; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	C:\Users\Marcos\Desktop\prj\mGear-1\mGear-1\UI.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BK@DEPFCNDH@Coulnd?5not?5open?5directory?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_02ILLPBGAO@?$DN?$CC?$AA@			; `string'
PUBLIC	??_C@_03PFIILPDO@?5?$DN?$CC?$AA@		; `string'
PUBLIC	??_C@_06PEKNBJMF@MGG?5ID?$AA@			; `string'
PUBLIC	??_C@_0O@PJPNPMCL@Window2?5Frame?$AA@		; `string'
PUBLIC	??_C@_0O@BEKHFMFK@Window?5Frame0?$AA@		; `string'
PUBLIC	??_C@_0O@NLMGNBL@Window?5Frame1?$AA@		; `string'
PUBLIC	??_C@_0O@CGJBDONI@Window?5Frame2?$AA@		; `string'
PUBLIC	??_C@_0O@JALBCEAG@Button?5Frame0?$AA@		; `string'
PUBLIC	??_C@_0O@IJKKBFEH@Button?5Frame1?$AA@		; `string'
PUBLIC	??_C@_0O@KCIHEGIE@Button?5Frame2?$AA@		; `string'
PUBLIC	??_C@_0BB@JHJNJBII@Subwindow?5Frame0?$AA@	; `string'
PUBLIC	??_C@_0BB@IOIGKAMJ@Subwindow?5Frame1?$AA@	; `string'
PUBLIC	??_C@_0BB@KFKLPDAK@Subwindow?5Frame2?$AA@	; `string'
PUBLIC	??_C@_09DLONLHCP@Tab?5Frame?$AA@		; `string'
PUBLIC	??_C@_0M@KGGBGCOI@Close?5Frame?$AA@		; `string'
PUBLIC	??_C@_0O@NIMFPFPB@Scroll?5Frame0?$AA@		; `string'
PUBLIC	??_C@_0O@MBNOMELA@Scroll?5Frame1?$AA@		; `string'
PUBLIC	??_C@_0BA@GBPLBIJP@Scroll?5Up?5Frame?$AA@	; `string'
PUBLIC	??_C@_0BC@PLHMGGMP@Scroll?5Down?5Frame?$AA@	; `string'
PUBLIC	??_C@_0BE@DIOJCMDC@Resize?5Cursor?5Frame?$AA@	; `string'
PUBLIC	??_C@_0BA@IPIPEMCB@Save?5Icon?5Frame?$AA@	; `string'
PUBLIC	??_C@_0BC@JKGLEFGA@Folder?5Icon?5Frame?$AA@	; `string'
PUBLIC	??_C@_0BB@MMJCIDDE@UI?5system?5loaded?$AA@	; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_02GIPFHKNO@OK?$AA@			; `string'
PUBLIC	??_C@_03CCLAEDDF@Yes?$AA@			; `string'
PUBLIC	??_C@_02JINPPBEP@No?$AA@			; `string'
PUBLIC	??_C@_06FMBNCPDL@Cancel?$AA@			; `string'
PUBLIC	??_C@_04IJKKPDFE@?5?$FLX?$FN?$AA@		; `string'
PUBLIC	??_C@_04NDEIMKLM@?5?$FL?5?$FN?$AA@		; `string'
PUBLIC	??_C@_06FFMNEPHE@?$CFs?3?5?$CFu?$AA@		; `string'
PUBLIC	??_C@_02GMHACPFF@?$CFu?$AA@			; `string'
PUBLIC	??_C@_06GBEGMGE@?$CFs?3?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_07BGICGNCG@?$CFs?3?5?$CFlu?$AA@		; `string'
PUBLIC	??_C@_03FKNCMABI@?$CFlu?$AA@			; `string'
PUBLIC	??_C@_07EFFLEODG@?$CFs?3?5?$CFld?$AA@		; `string'
PUBLIC	??_C@_03JALODAI@?$CFld?$AA@			; `string'
PUBLIC	??_C@_08KELGKKHF@?$CFs?3?5?$CF?43f?$AA@		; `string'
PUBLIC	??_C@_04GFJLOHHD@?$CF?43f?$AA@			; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_02CBLDBPFN@?1?1?$AA@			; `string'
PUBLIC	??_C@_04DNCDCIAE@Open?$AA@			; `string'
PUBLIC	??_C@_04INACKGJP@Save?$AA@			; `string'
PUBLIC	??_C@_06HJGPBJLE@Select?$AA@			; `string'
EXTRN	_atof:PROC
EXTRN	__imp__FindNextFileW@8:PROC
EXTRN	_mbstowcs_s:PROC
EXTRN	__imp__FindClose@4:PROC
EXTRN	__set_errno:PROC
EXTRN	_wcstombs_s:PROC
EXTRN	__imp__glReadPixels@28:PROC
EXTRN	_strtok:PROC
EXTRN	_fgets:PROC
EXTRN	_tolower:PROC
EXTRN	__imp__SDL_ShowCursor:PROC
EXTRN	_atoi:PROC
EXTRN	__imp__FindFirstFileW@8:PROC
EXTRN	__imp__GetFullPathNameW@16:PROC
COMM	_UI_Sys:BYTE:040ca8H
COMM	_UI_Win:BYTE:01c0H
_DATA	ENDS
;	COMDAT ??_C@_06HJGPBJLE@Select?$AA@
CONST	SEGMENT
??_C@_06HJGPBJLE@Select?$AA@ DB 'Select', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04INACKGJP@Save?$AA@
CONST	SEGMENT
??_C@_04INACKGJP@Save?$AA@ DB 'Save', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DNCDCIAE@Open?$AA@
CONST	SEGMENT
??_C@_04DNCDCIAE@Open?$AA@ DB 'Open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02CBLDBPFN@?1?1?$AA@
CONST	SEGMENT
??_C@_02CBLDBPFN@?1?1?$AA@ DB '//', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GFJLOHHD@?$CF?43f?$AA@
CONST	SEGMENT
??_C@_04GFJLOHHD@?$CF?43f?$AA@ DB '%.3f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KELGKKHF@?$CFs?3?5?$CF?43f?$AA@
CONST	SEGMENT
??_C@_08KELGKKHF@?$CFs?3?5?$CF?43f?$AA@ DB '%s: %.3f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JALODAI@?$CFld?$AA@
CONST	SEGMENT
??_C@_03JALODAI@?$CFld?$AA@ DB '%ld', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EFFLEODG@?$CFs?3?5?$CFld?$AA@
CONST	SEGMENT
??_C@_07EFFLEODG@?$CFs?3?5?$CFld?$AA@ DB '%s: %ld', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03FKNCMABI@?$CFlu?$AA@
CONST	SEGMENT
??_C@_03FKNCMABI@?$CFlu?$AA@ DB '%lu', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BGICGNCG@?$CFs?3?5?$CFlu?$AA@
CONST	SEGMENT
??_C@_07BGICGNCG@?$CFs?3?5?$CFlu?$AA@ DB '%s: %lu', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GBEGMGE@?$CFs?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_06GBEGMGE@?$CFs?3?5?$CFd?$AA@ DB '%s: %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMHACPFF@?$CFu?$AA@
CONST	SEGMENT
??_C@_02GMHACPFF@?$CFu?$AA@ DB '%u', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFMNEPHE@?$CFs?3?5?$CFu?$AA@
CONST	SEGMENT
??_C@_06FFMNEPHE@?$CFs?3?5?$CFu?$AA@ DB '%s: %u', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04NDEIMKLM@?5?$FL?5?$FN?$AA@
CONST	SEGMENT
??_C@_04NDEIMKLM@?5?$FL?5?$FN?$AA@ DB ' [ ]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IJKKPDFE@?5?$FLX?$FN?$AA@
CONST	SEGMENT
??_C@_04IJKKPDFE@?5?$FLX?$FN?$AA@ DB ' [X]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FMBNCPDL@Cancel?$AA@
CONST	SEGMENT
??_C@_06FMBNCPDL@Cancel?$AA@ DB 'Cancel', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JINPPBEP@No?$AA@
CONST	SEGMENT
??_C@_02JINPPBEP@No?$AA@ DB 'No', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CCLAEDDF@Yes?$AA@
CONST	SEGMENT
??_C@_03CCLAEDDF@Yes?$AA@ DB 'Yes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GIPFHKNO@OK?$AA@
CONST	SEGMENT
??_C@_02GIPFHKNO@OK?$AA@ DB 'OK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MMJCIDDE@UI?5system?5loaded?$AA@
CONST	SEGMENT
??_C@_0BB@MMJCIDDE@UI?5system?5loaded?$AA@ DB 'UI system loaded', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JKGLEFGA@Folder?5Icon?5Frame?$AA@
CONST	SEGMENT
??_C@_0BC@JKGLEFGA@Folder?5Icon?5Frame?$AA@ DB 'Folder Icon Frame', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IPIPEMCB@Save?5Icon?5Frame?$AA@
CONST	SEGMENT
??_C@_0BA@IPIPEMCB@Save?5Icon?5Frame?$AA@ DB 'Save Icon Frame', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DIOJCMDC@Resize?5Cursor?5Frame?$AA@
CONST	SEGMENT
??_C@_0BE@DIOJCMDC@Resize?5Cursor?5Frame?$AA@ DB 'Resize Cursor Frame', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PLHMGGMP@Scroll?5Down?5Frame?$AA@
CONST	SEGMENT
??_C@_0BC@PLHMGGMP@Scroll?5Down?5Frame?$AA@ DB 'Scroll Down Frame', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GBPLBIJP@Scroll?5Up?5Frame?$AA@
CONST	SEGMENT
??_C@_0BA@GBPLBIJP@Scroll?5Up?5Frame?$AA@ DB 'Scroll Up Frame', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MBNOMELA@Scroll?5Frame1?$AA@
CONST	SEGMENT
??_C@_0O@MBNOMELA@Scroll?5Frame1?$AA@ DB 'Scroll Frame1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NIMFPFPB@Scroll?5Frame0?$AA@
CONST	SEGMENT
??_C@_0O@NIMFPFPB@Scroll?5Frame0?$AA@ DB 'Scroll Frame0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KGGBGCOI@Close?5Frame?$AA@
CONST	SEGMENT
??_C@_0M@KGGBGCOI@Close?5Frame?$AA@ DB 'Close Frame', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DLONLHCP@Tab?5Frame?$AA@
CONST	SEGMENT
??_C@_09DLONLHCP@Tab?5Frame?$AA@ DB 'Tab Frame', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KFKLPDAK@Subwindow?5Frame2?$AA@
CONST	SEGMENT
??_C@_0BB@KFKLPDAK@Subwindow?5Frame2?$AA@ DB 'Subwindow Frame2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IOIGKAMJ@Subwindow?5Frame1?$AA@
CONST	SEGMENT
??_C@_0BB@IOIGKAMJ@Subwindow?5Frame1?$AA@ DB 'Subwindow Frame1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JHJNJBII@Subwindow?5Frame0?$AA@
CONST	SEGMENT
??_C@_0BB@JHJNJBII@Subwindow?5Frame0?$AA@ DB 'Subwindow Frame0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KCIHEGIE@Button?5Frame2?$AA@
CONST	SEGMENT
??_C@_0O@KCIHEGIE@Button?5Frame2?$AA@ DB 'Button Frame2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IJKKBFEH@Button?5Frame1?$AA@
CONST	SEGMENT
??_C@_0O@IJKKBFEH@Button?5Frame1?$AA@ DB 'Button Frame1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JALBCEAG@Button?5Frame0?$AA@
CONST	SEGMENT
??_C@_0O@JALBCEAG@Button?5Frame0?$AA@ DB 'Button Frame0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CGJBDONI@Window?5Frame2?$AA@
CONST	SEGMENT
??_C@_0O@CGJBDONI@Window?5Frame2?$AA@ DB 'Window Frame2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NLMGNBL@Window?5Frame1?$AA@
CONST	SEGMENT
??_C@_0O@NLMGNBL@Window?5Frame1?$AA@ DB 'Window Frame1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BEKHFMFK@Window?5Frame0?$AA@
CONST	SEGMENT
??_C@_0O@BEKHFMFK@Window?5Frame0?$AA@ DB 'Window Frame0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PJPNPMCL@Window2?5Frame?$AA@
CONST	SEGMENT
??_C@_0O@PJPNPMCL@Window2?5Frame?$AA@ DB 'Window2 Frame', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06PEKNBJMF@MGG?5ID?$AA@
CONST	SEGMENT
??_C@_06PEKNBJMF@MGG?5ID?$AA@ DB 'MGG ID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PFIILPDO@?5?$DN?$CC?$AA@
CONST	SEGMENT
??_C@_03PFIILPDO@?5?$DN?$CC?$AA@ DB ' ="', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02ILLPBGAO@?$DN?$CC?$AA@
CONST	SEGMENT
??_C@_02ILLPBGAO@?$DN?$CC?$AA@ DB '="', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DEPFCNDH@Coulnd?5not?5open?5directory?$AA@
CONST	SEGMENT
??_C@_0BK@DEPFCNDH@Coulnd?5not?5open?5directory?$AA@ DB 'Coulnd not open '
	DB	'directory', 00H				; `string'
PUBLIC	_UIMain_DrawSystem
PUBLIC	_UILoadSystem
; Function compile flags: /Ogtp
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\ui.c
;	COMDAT _UILoadSystem
_TEXT	SEGMENT
_buf$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_UILoadSystem PROC					; COMDAT
; _filename$dead$ = ecx

; 37   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx

; 38   : 	FILE *file;
; 39   : 	int8 basic=1;
; 40   : 	char buf[256], *tok, *val;
; 41   : 
; 42   : 	GLint pos, texc, col, texl, texr;
; 43   : 
; 44   : 	int16 value=0;
; 45   : 
; 46   : 	register uint8 i;
; 47   : 
; 48   : 	if(filename==NULL)
; 49   : 		basic=0;
; 50   : 	else
; 51   : 	if((file=fopen(filename,"r"))==NULL)

	push	OFFSET ??_C@_01KDCPPGHE@r?$AA@
	push	OFFSET ??_C@_0L@EMLOAAHA@UI_Sys?4cfg?$AA@
	call	_fopen
	mov	ebx, eax
	add	esp, 8
	test	ebx, ebx
	je	$LN38@UILoadSyst

; 52   : 		basic=0;
; 53   : 
; 54   : 	if(basic)
; 55   : 	{
; 56   : 		memset(&UI_Sys,-1,sizeof(UI_SYSTEM));

	push	esi
	push	265384					; 00040ca8H
	push	-1
	push	OFFSET _UI_Sys
	call	_memset

; 57   : 
; 58   : 		while(!feof(file))

	push	ebx
	call	_feof
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN36@UILoadSyst
	push	edi
$LL37@UILoadSyst:

; 59   : 		{
; 60   : 			fgets(buf,256,file);

	push	ebx
	lea	eax, DWORD PTR _buf$[ebp]
	push	256					; 00000100H
	push	eax
	call	_fgets

; 61   : 
; 62   : 			tok=strtok(buf,"=\"");

	lea	eax, DWORD PTR _buf$[ebp]
	push	OFFSET ??_C@_02ILLPBGAO@?$DN?$CC?$AA@
	push	eax
	call	_strtok

; 63   : 			val=strtok(NULL," =\"");

	push	OFFSET ??_C@_03PFIILPDO@?5?$DN?$CC?$AA@
	push	0
	mov	esi, eax
	call	_strtok
	add	esp, 28					; 0000001cH
	mov	edi, eax

; 64   : 
; 65   : 			if(strcmp(tok,"MGG ID")==NULL)

	mov	edx, OFFSET ??_C@_06PEKNBJMF@MGG?5ID?$AA@
	mov	ecx, esi
$LL48@UILoadSyst:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN49@UILoadSyst
	test	al, al
	je	SHORT $LN50@UILoadSyst
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN49@UILoadSyst
	add	ecx, 2
	add	edx, 2
	test	al, al
	jne	SHORT $LL48@UILoadSyst
$LN50@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN51@UILoadSyst
$LN49@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN51@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN35@UILoadSyst

; 66   : 				UI_Sys.mgg_id=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys, al
$LN35@UILoadSyst:

; 67   : 
; 68   : 			if(strcmp(tok,"Window2 Frame")==NULL)

	mov	ecx, OFFSET ??_C@_0O@PJPNPMCL@Window2?5Frame?$AA@
	mov	eax, esi
	npad	1
$LL52@UILoadSyst:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN53@UILoadSyst
	test	dl, dl
	je	SHORT $LN54@UILoadSyst
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN53@UILoadSyst
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL52@UILoadSyst
$LN54@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN55@UILoadSyst
$LN53@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN55@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN34@UILoadSyst

; 69   : 				UI_Sys.window2_frame=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys+1, al
$LN34@UILoadSyst:

; 70   : 
; 71   : 			if(strcmp(tok,"Window Frame0")==NULL)

	mov	ecx, OFFSET ??_C@_0O@BEKHFMFK@Window?5Frame0?$AA@
	mov	eax, esi
	npad	2
$LL56@UILoadSyst:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN57@UILoadSyst
	test	dl, dl
	je	SHORT $LN58@UILoadSyst
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN57@UILoadSyst
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL56@UILoadSyst
$LN58@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN59@UILoadSyst
$LN57@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN59@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN33@UILoadSyst

; 72   : 				UI_Sys.window_frame0=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys+2, al
$LN33@UILoadSyst:

; 73   : 			if(strcmp(tok,"Window Frame1")==NULL)

	mov	ecx, OFFSET ??_C@_0O@NLMGNBL@Window?5Frame1?$AA@
	mov	eax, esi
	npad	2
$LL60@UILoadSyst:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN61@UILoadSyst
	test	dl, dl
	je	SHORT $LN62@UILoadSyst
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN61@UILoadSyst
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL60@UILoadSyst
$LN62@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN63@UILoadSyst
$LN61@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN63@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN32@UILoadSyst

; 74   : 				UI_Sys.window_frame1=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys+3, al
$LN32@UILoadSyst:

; 75   : 			if(strcmp(tok,"Window Frame2")==NULL)

	mov	ecx, OFFSET ??_C@_0O@CGJBDONI@Window?5Frame2?$AA@
	mov	eax, esi
	npad	2
$LL64@UILoadSyst:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN65@UILoadSyst
	test	dl, dl
	je	SHORT $LN66@UILoadSyst
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN65@UILoadSyst
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL64@UILoadSyst
$LN66@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN67@UILoadSyst
$LN65@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN67@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN31@UILoadSyst

; 76   : 				UI_Sys.window_frame2=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys+4, al
$LN31@UILoadSyst:

; 77   : 
; 78   : 			if(strcmp(tok,"Button Frame0")==NULL)

	mov	ecx, OFFSET ??_C@_0O@JALBCEAG@Button?5Frame0?$AA@
	mov	eax, esi
	npad	2
$LL68@UILoadSyst:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN69@UILoadSyst
	test	dl, dl
	je	SHORT $LN70@UILoadSyst
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN69@UILoadSyst
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL68@UILoadSyst
$LN70@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN71@UILoadSyst
$LN69@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN71@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN30@UILoadSyst

; 79   : 				UI_Sys.button_frame0=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys+5, al
$LN30@UILoadSyst:

; 80   : 			if(strcmp(tok,"Button Frame1")==NULL)

	mov	ecx, OFFSET ??_C@_0O@IJKKBFEH@Button?5Frame1?$AA@
	mov	eax, esi
	npad	2
$LL72@UILoadSyst:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN73@UILoadSyst
	test	dl, dl
	je	SHORT $LN74@UILoadSyst
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN73@UILoadSyst
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL72@UILoadSyst
$LN74@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN75@UILoadSyst
$LN73@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN75@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN29@UILoadSyst

; 81   : 				UI_Sys.button_frame1=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys+6, al
$LN29@UILoadSyst:

; 82   : 			if(strcmp(tok,"Button Frame2")==NULL)

	mov	ecx, OFFSET ??_C@_0O@KCIHEGIE@Button?5Frame2?$AA@
	mov	eax, esi
	npad	2
$LL76@UILoadSyst:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN77@UILoadSyst
	test	dl, dl
	je	SHORT $LN78@UILoadSyst
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN77@UILoadSyst
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL76@UILoadSyst
$LN78@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN79@UILoadSyst
$LN77@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN79@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN28@UILoadSyst

; 83   : 				UI_Sys.button_frame2=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys+7, al
$LN28@UILoadSyst:

; 84   : 
; 85   : 			if(strcmp(tok,"Subwindow Frame0")==NULL)

	mov	ecx, OFFSET ??_C@_0BB@JHJNJBII@Subwindow?5Frame0?$AA@
	mov	eax, esi
	npad	2
$LL80@UILoadSyst:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN81@UILoadSyst
	test	dl, dl
	je	SHORT $LN82@UILoadSyst
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN81@UILoadSyst
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL80@UILoadSyst
$LN82@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN83@UILoadSyst
$LN81@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN83@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN27@UILoadSyst

; 86   : 				UI_Sys.subwindow_frame0=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys+10, al
$LN27@UILoadSyst:

; 87   : 			if(strcmp(tok,"Subwindow Frame1")==NULL)

	mov	ecx, OFFSET ??_C@_0BB@IOIGKAMJ@Subwindow?5Frame1?$AA@
	mov	eax, esi
	npad	2
$LL84@UILoadSyst:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN85@UILoadSyst
	test	dl, dl
	je	SHORT $LN86@UILoadSyst
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN85@UILoadSyst
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL84@UILoadSyst
$LN86@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN87@UILoadSyst
$LN85@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN87@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN26@UILoadSyst

; 88   : 				UI_Sys.subwindow_frame1=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys+11, al
$LN26@UILoadSyst:

; 89   : 			if(strcmp(tok,"Subwindow Frame2")==NULL)

	mov	ecx, OFFSET ??_C@_0BB@KFKLPDAK@Subwindow?5Frame2?$AA@
	mov	eax, esi
	npad	2
$LL88@UILoadSyst:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN89@UILoadSyst
	test	dl, dl
	je	SHORT $LN90@UILoadSyst
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN89@UILoadSyst
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL88@UILoadSyst
$LN90@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN91@UILoadSyst
$LN89@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN91@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN25@UILoadSyst

; 90   : 				UI_Sys.subwindow_frame2=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys+12, al
$LN25@UILoadSyst:

; 91   : 
; 92   : 			if(strcmp(tok,"Tab Frame")==NULL)

	mov	ecx, OFFSET ??_C@_09DLONLHCP@Tab?5Frame?$AA@
	mov	eax, esi
	npad	2
$LL92@UILoadSyst:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN93@UILoadSyst
	test	dl, dl
	je	SHORT $LN94@UILoadSyst
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN93@UILoadSyst
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL92@UILoadSyst
$LN94@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN95@UILoadSyst
$LN93@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN95@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN24@UILoadSyst

; 93   : 				UI_Sys.tab_frame=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys+8, al
$LN24@UILoadSyst:

; 94   : 			if(strcmp(tok,"Close Frame")==NULL)

	mov	ecx, OFFSET ??_C@_0M@KGGBGCOI@Close?5Frame?$AA@
	mov	eax, esi
	npad	2
$LL96@UILoadSyst:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN97@UILoadSyst
	test	dl, dl
	je	SHORT $LN98@UILoadSyst
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN97@UILoadSyst
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL96@UILoadSyst
$LN98@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN99@UILoadSyst
$LN97@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN99@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN23@UILoadSyst

; 95   : 				UI_Sys.close_frame=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys+9, al
$LN23@UILoadSyst:

; 96   : 
; 97   : 			if(strcmp(tok,"Scroll Frame0")==NULL)

	mov	ecx, OFFSET ??_C@_0O@NIMFPFPB@Scroll?5Frame0?$AA@
	mov	eax, esi
	npad	2
$LL100@UILoadSyst:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN101@UILoadSyst
	test	dl, dl
	je	SHORT $LN102@UILoadSyst
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN101@UILoadSyst
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL100@UILoadSyst
$LN102@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN103@UILoadSyst
$LN101@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN103@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN22@UILoadSyst

; 98   : 				UI_Sys.scroll_frame0=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys+13, al
$LN22@UILoadSyst:

; 99   : 			if(strcmp(tok,"Scroll Frame1")==NULL)

	mov	ecx, OFFSET ??_C@_0O@MBNOMELA@Scroll?5Frame1?$AA@
	mov	eax, esi
	npad	2
$LL104@UILoadSyst:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN105@UILoadSyst
	test	dl, dl
	je	SHORT $LN106@UILoadSyst
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN105@UILoadSyst
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL104@UILoadSyst
$LN106@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN107@UILoadSyst
$LN105@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN107@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN21@UILoadSyst

; 100  : 				UI_Sys.scroll_frame1=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys+14, al
$LN21@UILoadSyst:

; 101  : 			if(strcmp(tok,"Scroll Up Frame")==NULL)

	mov	ecx, OFFSET ??_C@_0BA@GBPLBIJP@Scroll?5Up?5Frame?$AA@
	mov	eax, esi
	npad	2
$LL108@UILoadSyst:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN109@UILoadSyst
	test	dl, dl
	je	SHORT $LN110@UILoadSyst
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN109@UILoadSyst
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL108@UILoadSyst
$LN110@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN111@UILoadSyst
$LN109@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN111@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN20@UILoadSyst

; 102  : 				UI_Sys.scroll_up_frame=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys+15, al
$LN20@UILoadSyst:

; 103  : 			if(strcmp(tok,"Scroll Down Frame")==NULL)

	mov	ecx, OFFSET ??_C@_0BC@PLHMGGMP@Scroll?5Down?5Frame?$AA@
	mov	eax, esi
	npad	2
$LL112@UILoadSyst:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN113@UILoadSyst
	test	dl, dl
	je	SHORT $LN114@UILoadSyst
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN113@UILoadSyst
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL112@UILoadSyst
$LN114@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN115@UILoadSyst
$LN113@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN115@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN19@UILoadSyst

; 104  : 				UI_Sys.scroll_down_frame=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys+16, al
$LN19@UILoadSyst:

; 105  : 
; 106  : 			if(strcmp(tok,"Resize Cursor Frame")==NULL)

	mov	ecx, OFFSET ??_C@_0BE@DIOJCMDC@Resize?5Cursor?5Frame?$AA@
	mov	eax, esi
	npad	2
$LL116@UILoadSyst:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN117@UILoadSyst
	test	dl, dl
	je	SHORT $LN118@UILoadSyst
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN117@UILoadSyst
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL116@UILoadSyst
$LN118@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN119@UILoadSyst
$LN117@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN119@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN18@UILoadSyst

; 107  : 				UI_Sys.resize_cursor=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys+41, al
$LN18@UILoadSyst:

; 108  : 
; 109  : 			if(strcmp(tok,"Save Icon Frame")==NULL)

	mov	ecx, OFFSET ??_C@_0BA@IPIPEMCB@Save?5Icon?5Frame?$AA@
	mov	eax, esi
	npad	2
$LL120@UILoadSyst:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN121@UILoadSyst
	test	dl, dl
	je	SHORT $LN122@UILoadSyst
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN121@UILoadSyst
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL120@UILoadSyst
$LN122@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN123@UILoadSyst
$LN121@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN123@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN17@UILoadSyst

; 110  : 				UI_Sys.save_icon=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys+19, al
$LN17@UILoadSyst:

; 111  : 
; 112  : 			if(strcmp(tok,"Folder Icon Frame")==NULL)

	mov	eax, OFFSET ??_C@_0BC@JKGLEFGA@Folder?5Icon?5Frame?$AA@
	npad	4
$LL124@UILoadSyst:
	mov	cl, BYTE PTR [esi]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN125@UILoadSyst
	test	cl, cl
	je	SHORT $LN126@UILoadSyst
	mov	cl, BYTE PTR [esi+1]
	cmp	cl, BYTE PTR [eax+1]
	jne	SHORT $LN125@UILoadSyst
	add	esi, 2
	add	eax, 2
	test	cl, cl
	jne	SHORT $LL124@UILoadSyst
$LN126@UILoadSyst:
	xor	eax, eax
	jmp	SHORT $LN127@UILoadSyst
$LN125@UILoadSyst:
	sbb	eax, eax
	or	eax, 1
$LN127@UILoadSyst:
	test	eax, eax
	jne	SHORT $LN16@UILoadSyst

; 113  : 				UI_Sys.folder_icon=atoi(val);

	push	edi
	call	_atoi
	add	esp, 4
	mov	BYTE PTR _UI_Sys+21, al
$LN16@UILoadSyst:

; 57   : 
; 58   : 		while(!feof(file))

	push	ebx
	call	_feof
	add	esp, 4
	test	eax, eax
	je	$LL37@UILoadSyst
	pop	edi
$LN36@UILoadSyst:

; 114  : 
; 115  : 		}
; 116  : 
; 117  : 		if(UI_Sys.mgg_id==-1)

	movzx	ecx, BYTE PTR _UI_Sys
	xor	edx, edx
	cmp	BYTE PTR _UI_Sys, -1

; 118  : 			UI_Sys.mgg_id=0;
; 119  : 
; 120  : 		if(UI_Sys.window2_frame==-1)
; 121  : 			UI_Sys.window2_frame=4;
; 122  : 
; 123  : 		if(UI_Sys.window_frame0==-1)

	mov	esi, 6

; 124  : 			UI_Sys.window_frame0=6;
; 125  : 		if(UI_Sys.window_frame1==-1)
; 126  : 			UI_Sys.window_frame1=7;
; 127  : 		if(UI_Sys.window_frame2==-1)
; 128  : 			UI_Sys.window_frame2=8;
; 129  : 
; 130  : 		if(UI_Sys.button_frame0==-1)
; 131  : 			UI_Sys.button_frame0=9;
; 132  : 		if(UI_Sys.button_frame1==-1)
; 133  : 			UI_Sys.button_frame1=10;
; 134  : 		if(UI_Sys.button_frame2==-1)
; 135  : 			UI_Sys.button_frame2=11;
; 136  : 
; 137  : 		if(UI_Sys.subwindow_frame0==-1)
; 138  : 			UI_Sys.subwindow_frame0=14;
; 139  : 		if(UI_Sys.subwindow_frame1==-1)
; 140  : 			UI_Sys.subwindow_frame1=15;
; 141  : 		if(UI_Sys.subwindow_frame2==-1)
; 142  : 			UI_Sys.subwindow_frame2=16;
; 143  : 
; 144  : 		if(UI_Sys.tab_frame==-1)
; 145  : 			UI_Sys.tab_frame=12;
; 146  : 		if(UI_Sys.close_frame==-1)
; 147  : 			UI_Sys.close_frame=13;
; 148  : 
; 149  : 		if(UI_Sys.resize_cursor==-1)
; 150  : 			UI_Sys.resize_cursor=6;
; 151  : 
; 152  : 
; 153  : 		fclose(file);

	push	ebx
	cmove	ecx, edx
	cmp	BYTE PTR _UI_Sys+1, -1
	mov	BYTE PTR _UI_Sys, cl
	mov	edx, 4
	movzx	ecx, BYTE PTR _UI_Sys+1
	cmove	ecx, edx
	cmp	BYTE PTR _UI_Sys+2, -1
	mov	BYTE PTR _UI_Sys+1, cl
	mov	edx, 7
	movzx	ecx, BYTE PTR _UI_Sys+2
	cmove	ecx, esi
	cmp	BYTE PTR _UI_Sys+3, -1
	mov	BYTE PTR _UI_Sys+2, cl
	movzx	ecx, BYTE PTR _UI_Sys+3
	cmove	ecx, edx
	cmp	BYTE PTR _UI_Sys+4, -1
	mov	BYTE PTR _UI_Sys+3, cl
	mov	edx, 8
	movzx	ecx, BYTE PTR _UI_Sys+4
	cmove	ecx, edx
	cmp	BYTE PTR _UI_Sys+5, -1
	mov	BYTE PTR _UI_Sys+4, cl
	mov	edx, 9
	movzx	ecx, BYTE PTR _UI_Sys+5
	cmove	ecx, edx
	cmp	BYTE PTR _UI_Sys+6, -1
	mov	BYTE PTR _UI_Sys+5, cl
	mov	edx, 10					; 0000000aH
	movzx	ecx, BYTE PTR _UI_Sys+6
	cmove	ecx, edx
	cmp	BYTE PTR _UI_Sys+7, -1
	mov	BYTE PTR _UI_Sys+6, cl
	mov	edx, 11					; 0000000bH
	movzx	ecx, BYTE PTR _UI_Sys+7
	cmove	ecx, edx
	cmp	BYTE PTR _UI_Sys+10, -1
	mov	BYTE PTR _UI_Sys+7, cl
	mov	edx, 14					; 0000000eH
	movzx	ecx, BYTE PTR _UI_Sys+10
	cmove	ecx, edx
	cmp	BYTE PTR _UI_Sys+11, -1
	mov	BYTE PTR _UI_Sys+10, cl
	mov	edx, 15					; 0000000fH
	movzx	ecx, BYTE PTR _UI_Sys+11
	cmove	ecx, edx
	cmp	BYTE PTR _UI_Sys+12, -1
	mov	BYTE PTR _UI_Sys+11, cl
	mov	edx, 16					; 00000010H
	movzx	ecx, BYTE PTR _UI_Sys+12
	cmove	ecx, edx
	cmp	BYTE PTR _UI_Sys+8, -1
	mov	BYTE PTR _UI_Sys+12, cl
	mov	edx, 12					; 0000000cH
	movzx	ecx, BYTE PTR _UI_Sys+8
	cmove	ecx, edx
	cmp	BYTE PTR _UI_Sys+9, -1
	mov	BYTE PTR _UI_Sys+8, cl
	mov	edx, 13					; 0000000dH
	movzx	ecx, BYTE PTR _UI_Sys+9
	cmove	ecx, edx
	cmp	BYTE PTR _UI_Sys+41, -1
	mov	BYTE PTR _UI_Sys+9, cl
	movzx	ecx, BYTE PTR _UI_Sys+41
	cmove	ecx, esi
	mov	BYTE PTR _UI_Sys+41, cl
	call	_fclose

; 154  : 
; 155  : 		LogApp("UI system loaded");

	push	OFFSET ??_C@_0BB@MMJCIDDE@UI?5system?5loaded?$AA@
	call	DWORD PTR __imp__SDL_Log
	add	esp, 8
	pop	esi

; 156  : 	}
; 157  : 	else

	jmp	SHORT $LN1@UILoadSyst
$LN38@UILoadSyst:

; 158  : 	{
; 159  : 		UI_Sys.mgg_id=0;
; 160  : 		UI_Sys.window2_frame=4;
; 161  : 		UI_Sys.window_frame0=6;
; 162  : 		UI_Sys.window_frame1=7;
; 163  : 		UI_Sys.window_frame2=8;
; 164  : 		UI_Sys.button_frame0=15;
; 165  : 		UI_Sys.button_frame1=10;
; 166  : 		UI_Sys.button_frame2=9;
; 167  : 		UI_Sys.tab_frame=12;
; 168  : 		UI_Sys.close_frame=13;
; 169  : 		UI_Sys.subwindow_frame0=14;
; 170  : 		UI_Sys.subwindow_frame1=15;
; 171  : 		UI_Sys.subwindow_frame2=16;
; 172  : 		UI_Sys.resize_cursor=6;
; 173  : 
; 174  : 		LogApp("UI system loaded");

	push	OFFSET ??_C@_0BB@MMJCIDDE@UI?5system?5loaded?$AA@
	mov	DWORD PTR _UI_Sys, 117834752		; 07060400H
	mov	DWORD PTR _UI_Sys+4, 151654152		; 090a0f08H
	mov	DWORD PTR _UI_Sys+8, 252579084		; 0f0e0d0cH
	mov	BYTE PTR _UI_Sys+12, 16			; 00000010H
	mov	BYTE PTR _UI_Sys+41, 6
	call	DWORD PTR __imp__SDL_Log
	add	esp, 4
$LN1@UILoadSyst:

; 175  : 	}
; 176  : 
; 177  : 	strcpy(UI_Sys.current_path,".");
; 178  : 	UI_Sys.mouse_scroll=0;
; 179  : 
; 180  : 	UI_Sys.sys_freeze=0;
; 181  : 
; 182  : 	UI_Sys.textinput=0;
; 183  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, 46					; 0000002eH
	xor	ecx, ebp
	mov	WORD PTR _UI_Sys+43, ax
	mov	DWORD PTR _UI_Sys+2092, 0
	mov	WORD PTR _UI_Sys+2162, 0
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_UILoadSystem ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\ui.c
;	COMDAT _UIMain_DrawSystem
_TEXT	SEGMENT
_p$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_UIMain_DrawSystem PROC					; COMDAT

; 1303 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1304 : 	register uint8 i;
; 1305 : 	Pos p;
; 1306 : 	int8 j=0;
; 1307 : 
; 1308 : 	//if(UI_Sys.sys_freeze)
; 1309 : 		//UI_Sys.sys_freeze=0;
; 1310 : 
; 1311 : 	if(st.num_uiwindow!=0)

	cmp	BYTE PTR _st+264, 0
	push	esi
	push	edi
	je	$LN21@UIMain_Dra

; 1312 : 	{
; 1313 : 		for(i=0;i<MAX_UIWINDOWS;i++)

	mov	esi, OFFSET _UI_Win
	mov	edi, 8
	npad	7
$LL20@UIMain_Dra:

; 1314 : 		{
; 1315 : 			if(!UI_Win[i].stat)

	mov	al, BYTE PTR [esi]
	test	al, al
	je	$LN19@UIMain_Dra

; 1316 : 				continue;
; 1317 : 			else
; 1318 : 			if(UI_Win[i].stat==2)

	cmp	al, 2
	jne	SHORT $LN15@UIMain_Dra

; 1319 : 				DrawUI(UI_Win[i].pos.x,UI_Win[i].pos.y,UI_Win[i].size.x,UI_Win[i].size.y,0,255,255,255,0,0,TEX_PAN_RANGE,TEX_PAN_RANGE,mgg_sys[UI_Sys.mgg_id].frames[UI_Sys.window2_frame],255,UI_Win[i].layer);

	movzx	eax, BYTE PTR [esi+28]
	push	eax
	movsx	eax, BYTE PTR _UI_Sys
	mov	edx, eax
	shl	edx, 4
	sub	edx, eax
	movsx	eax, BYTE PTR _UI_Sys+1

; 1320 : 			else

	jmp	SHORT $LN29@UIMain_Dra
$LN15@UIMain_Dra:

; 1321 : 			if(UI_Win[i].stat==1)

	cmp	al, 1
	jne	SHORT $LN19@UIMain_Dra

; 1322 : 				DrawUI(UI_Win[i].pos.x,UI_Win[i].pos.y,UI_Win[i].size.x,UI_Win[i].size.y,0,255,255,255,0,0,TEX_PAN_RANGE,TEX_PAN_RANGE,mgg_sys[UI_Sys.mgg_id].frames[UI_Win[i].window_frame],255,UI_Win[i].layer);

	movzx	eax, BYTE PTR [esi+28]
	push	eax
	movsx	eax, BYTE PTR _UI_Sys
	mov	edx, eax
	shl	edx, 4
	sub	edx, eax
	movsx	eax, BYTE PTR [esi+35]
$LN29@UIMain_Dra:
	push	255					; 000000ffH
	sub	esp, 40					; 00000028H
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR _mgg_sys[edx*4+40]
	movdqu	xmm0, XMMWORD PTR [eax+ecx*8]
	mov	edx, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	eax, esp
	push	32768					; 00008000H
	push	32768					; 00008000H
	push	0
	push	0
	push	255					; 000000ffH
	push	255					; 000000ffH
	movdqu	XMMWORD PTR [eax], xmm0
	push	255					; 000000ffH
	movdqu	xmm0, XMMWORD PTR [ecx+16]
	push	0
	push	DWORD PTR [esi+20]
	movdqu	XMMWORD PTR [eax+16], xmm0
	movq	xmm0, QWORD PTR [ecx+32]
	push	DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [esi+4]
	movq	QWORD PTR [eax+32], xmm0
	call	_DrawUI
	add	esp, 88					; 00000058H
$LN19@UIMain_Dra:

; 1312 : 	{
; 1313 : 		for(i=0;i<MAX_UIWINDOWS;i++)

	add	esi, 56					; 00000038H
	dec	edi
	jne	$LL20@UIMain_Dra

; 1323 : 		}
; 1324 : 	}
; 1325 : 	else

	jmp	SHORT $LN11@UIMain_Dra
$LN21@UIMain_Dra:

; 1326 : 	{
; 1327 : 		if(st.Text_Input && UI_Sys.textinput && UI_Sys.current_option==-1)

	cmp	BYTE PTR _st+66798, 0
	je	SHORT $LN11@UIMain_Dra
	cmp	BYTE PTR _UI_Sys+2163, 0
	je	SHORT $LN11@UIMain_Dra
	cmp	WORD PTR _UI_Sys+2096, -1
	jne	SHORT $LN11@UIMain_Dra

; 1328 : 			st.Text_Input=UI_Sys.textinput=0;

	mov	BYTE PTR _UI_Sys+2163, 0
	mov	BYTE PTR _st+66798, 0
$LN11@UIMain_Dra:

; 1329 : 	}
; 1330 : 
; 1331 : 	if(st.cursor_type!=0)

	cmp	BYTE PTR _st+3307836, 0
	je	$LN10@UIMain_Dra

; 1332 : 	{
; 1333 : 		SDL_ShowCursor(SDL_DISABLE);

	push	0
	call	DWORD PTR __imp__SDL_ShowCursor

; 1334 : 		
; 1335 : 		p=st.mouse;

	movq	xmm0, QWORD PTR _st+65624
	add	esp, 4
	mov	eax, DWORD PTR _st+65632

; 1336 : 
; 1337 : 		p.x=(p.x*GAME_WIDTH)/st.screenx;

	movzx	ecx, WORD PTR _st+228
	mov	DWORD PTR _p$[ebp+8], eax
	movq	QWORD PTR _p$[ebp], xmm0
	mov	eax, DWORD PTR _p$[ebp]
	shl	eax, 14					; 0000000eH
	cdq
	idiv	ecx

; 1338 : 		p.y=(p.y*9216)/st.screeny;

	movzx	ecx, WORD PTR _st+230
	mov	esi, eax
	imul	eax, DWORD PTR _p$[ebp+4], 9216
	cdq
	idiv	ecx

; 1339 : 
; 1340 : 		if(st.cursor_type==1)

	mov	cl, BYTE PTR _st+3307836
	mov	edi, eax
	cmp	cl, 1
	jne	SHORT $LN9@UIMain_Dra

; 1341 : 			DrawUI(p.x,p.y,512,512,0,255,255,255,0,0,TEX_PAN_RANGE,TEX_PAN_RANGE,mgg_sys[UI_Sys.mgg_id].frames[UI_Sys.resize_cursor],255,0);

	movsx	ecx, BYTE PTR _UI_Sys
	movsx	eax, BYTE PTR _UI_Sys+41
	mov	edx, ecx
	push	0
	push	255					; 000000ffH
	shl	edx, 4
	sub	edx, ecx
	sub	esp, 40					; 00000028H
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR _mgg_sys[edx*4+40]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	eax, esp
	push	32768					; 00008000H
	push	32768					; 00008000H
	push	0
	push	0
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	0

; 1342 : 		else

	jmp	$LN31@UIMain_Dra
$LN9@UIMain_Dra:

; 1343 : 		if(st.cursor_type==2)

	cmp	cl, 2
	jne	SHORT $LN7@UIMain_Dra

; 1344 : 			DrawUI(p.x,p.y,512,512,900,255,255,255,0,0,TEX_PAN_RANGE,TEX_PAN_RANGE,mgg_sys[UI_Sys.mgg_id].frames[UI_Sys.resize_cursor],255,0);

	movsx	eax, BYTE PTR _UI_Sys
	mov	edx, eax
	push	0
	shl	edx, 4
	sub	edx, eax
	movsx	eax, BYTE PTR _UI_Sys+41
	push	255					; 000000ffH
	sub	esp, 40					; 00000028H
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR _mgg_sys[edx*4+40]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	eax, esp
	push	32768					; 00008000H
	push	32768					; 00008000H
	push	0
	push	0
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	900					; 00000384H

; 1345 : 		else

	jmp	$LN31@UIMain_Dra
$LN7@UIMain_Dra:

; 1346 : 		if(st.cursor_type==3)

	cmp	cl, 3
	jne	SHORT $LN5@UIMain_Dra

; 1347 : 			DrawUI(p.x,p.y,512,512,450,255,255,255,0,0,TEX_PAN_RANGE,TEX_PAN_RANGE,mgg_sys[UI_Sys.mgg_id].frames[UI_Sys.resize_cursor],255,0);

	movsx	eax, BYTE PTR _UI_Sys
	mov	edx, eax
	push	0
	shl	edx, 4
	sub	edx, eax
	movsx	eax, BYTE PTR _UI_Sys+41
	push	255					; 000000ffH
	sub	esp, 40					; 00000028H
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR _mgg_sys[edx*4+40]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	eax, esp
	push	32768					; 00008000H
	push	32768					; 00008000H
	push	0
	push	0
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	450					; 000001c2H

; 1348 : 		else

	jmp	SHORT $LN31@UIMain_Dra
$LN5@UIMain_Dra:

; 1349 : 		if(st.cursor_type==4)

	cmp	cl, 4
	jne	$LN2@UIMain_Dra

; 1350 : 			DrawUI(p.x,p.y,512,512,1350,255,255,255,0,0,TEX_PAN_RANGE,TEX_PAN_RANGE,mgg_sys[UI_Sys.mgg_id].frames[UI_Sys.resize_cursor],255,0);

	movsx	eax, BYTE PTR _UI_Sys
	mov	edx, eax
	push	0
	shl	edx, 4
	sub	edx, eax
	movsx	eax, BYTE PTR _UI_Sys+41
	push	255					; 000000ffH
	sub	esp, 40					; 00000028H
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR _mgg_sys[edx*4+40]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	eax, esp
	push	32768					; 00008000H
	push	32768					; 00008000H
	push	0
	push	0
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	1350					; 00000546H
$LN31@UIMain_Dra:
	movdqu	xmm0, XMMWORD PTR [ecx]
	push	512					; 00000200H
	push	512					; 00000200H
	movdqu	XMMWORD PTR [eax], xmm0
	mov	edx, edi
	movdqu	xmm0, XMMWORD PTR [ecx+16]
	movdqu	XMMWORD PTR [eax+16], xmm0
	movq	xmm0, QWORD PTR [ecx+32]
	mov	ecx, esi
	movq	QWORD PTR [eax+32], xmm0
	call	_DrawUI
	add	esp, 88					; 00000058H

; 1351 : 	}
; 1352 : 	else

	jmp	SHORT $LN2@UIMain_Dra
$LN10@UIMain_Dra:

; 1353 : 		SDL_ShowCursor(SDL_ENABLE);

	push	1
	call	DWORD PTR __imp__SDL_ShowCursor
	add	esp, 4
$LN2@UIMain_Dra:

; 1354 : 
; 1355 : 	if(!st.mouse1)

	movzx	eax, BYTE PTR _UI_Sys+42
	xor	ecx, ecx
	cmp	BYTE PTR _st+65636, cl

; 1356 : 		UI_Sys.mouse_flag=0;
; 1357 : }

	pop	edi
	cmove	eax, ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	mov	BYTE PTR _UI_Sys+42, al
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_UIMain_DrawSystem ENDP
_TEXT	ENDS
END
