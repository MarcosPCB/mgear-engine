; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	C:\Users\Marcos\Desktop\prj\mGear-1\mTex\main.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0O@MMHOKIEN@NK_COLOR_TEXT?$AA@		; `string'
PUBLIC	??_C@_0BA@OKHFDINJ@NK_COLOR_WINDOW?$AA@		; `string'
PUBLIC	??_C@_0BA@POJBPCMH@NK_COLOR_HEADER?$AA@		; `string'
PUBLIC	??_C@_0BA@NMDKGDLN@NK_COLOR_BORDER?$AA@		; `string'
PUBLIC	??_C@_0BA@EKMODIPE@NK_COLOR_BUTTON?$AA@		; `string'
PUBLIC	??_C@_0BG@IECMHCP@NK_COLOR_BUTTON_HOVER?$AA@	; `string'
PUBLIC	??_C@_0BH@PDJCAFHC@NK_COLOR_BUTTON_ACTIVE?$AA@	; `string'
PUBLIC	??_C@_0BA@GINDMCEM@NK_COLOR_TOGGLE?$AA@		; `string'
PUBLIC	??_C@_0BG@GFOFADAH@NK_COLOR_TOGGLE_HOVER?$AA@	; `string'
PUBLIC	??_C@_0BH@CCMKKENB@NK_COLOR_TOGGLE_CURSOR?$AA@	; `string'
PUBLIC	??_C@_0BA@IJLDECBD@NK_COLOR_SELECT?$AA@		; `string'
PUBLIC	??_C@_0BH@PKJGNGNK@NK_COLOR_SELECT_ACTIVE?$AA@	; `string'
PUBLIC	??_C@_0BA@IMDHCAPK@NK_COLOR_SLIDER?$AA@		; `string'
PUBLIC	??_C@_0BH@LOKKNDLC@NK_COLOR_SLIDER_CURSOR?$AA@	; `string'
PUBLIC	??_C@_0BN@IIMOGDMI@NK_COLOR_SLIDER_CURSOR_HOVER?$AA@ ; `string'
PUBLIC	??_C@_0BO@MNHMPOAN@NK_COLOR_SLIDER_CURSOR_ACTIVE?$AA@ ; `string'
PUBLIC	??_C@_0BC@HONKKPNC@NK_COLOR_PROPERTY?$AA@	; `string'
PUBLIC	??_C@_0O@DEKGLIFN@NK_COLOR_EDIT?$AA@		; `string'
PUBLIC	??_C@_0BF@PJDDMCKJ@NK_COLOR_EDIT_CURSOR?$AA@	; `string'
PUBLIC	??_C@_0P@FEEPECKC@NK_COLOR_COMBO?$AA@		; `string'
PUBLIC	??_C@_0P@BJKJEJOA@NK_COLOR_CHART?$AA@		; `string'
PUBLIC	??_C@_0BF@MEEINDGA@NK_COLOR_CHART_COLOR?$AA@	; `string'
PUBLIC	??_C@_0BP@PFAFOEMP@NK_COLOR_CHART_COLOR_HIGHLIGHT?$AA@ ; `string'
PUBLIC	??_C@_0BD@FJBCPBMN@NK_COLOR_SCROLLBAR?$AA@	; `string'
PUBLIC	??_C@_0BK@BCKHGODL@NK_COLOR_SCROLLBAR_CURSOR?$AA@ ; `string'
PUBLIC	??_C@_0CA@HLCOJGKE@NK_COLOR_SCROLLBAR_CURSOR_HOVER?$AA@ ; `string'
PUBLIC	??_C@_0CB@IJILDDIL@NK_COLOR_SCROLLBAR_CURSOR_ACTIVE@ ; `string'
PUBLIC	??_C@_0BE@CKODGPAC@NK_COLOR_TAB_HEADER?$AA@	; `string'
PUBLIC	??_C@_0PD@HHBHAGG@?$CDversion?5300?5es?6uniform?5mat4?5Pro@ ; `string'
PUBLIC	??_C@_0MH@FHMHJAMC@?$CDversion?5300?5es?6precision?5medium@ ; `string'
PUBLIC	_nkrendered
_BSS	SEGMENT
_nkrendered DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_ctx:DWORD
COMM	_prev_tic:DWORD
COMM	_curr_tic:DWORD
COMM	_delta:DWORD
COMM	_tmgg:BYTE:04cH
COMM	_mtex:TBYTE
_DATA	ENDS
_BSS	SEGMENT
?time@?1??FileBrowser@@9@9 DD 01H DUP (?)		; `FileBrowser'::`2'::time
?backpath_available@?1??FileBrowser@@9@9 DD 01H DUP (?)	; `FileBrowser'::`2'::backpath_available
?fowardpath_available@?1??FileBrowser@@9@9 DD 01H DUP (?) ; `FileBrowser'::`2'::fowardpath_available
?files@?1??NewMGGBox@@9@9 DB 04100H DUP (?)		; `NewMGGBox'::`2'::files
?state@?1??NewMGGBox@@9@9 DD 01H DUP (?)		; `NewMGGBox'::`2'::state
?num_files_t@?1??NewMGGBox@@9@9 DD 01H DUP (?)		; `NewMGGBox'::`2'::num_files_t
?num_files_n@?1??NewMGGBox@@9@9 DD 01H DUP (?)		; `NewMGGBox'::`2'::num_files_n
?state@?1??MenuBar@@9@9 DD 01H DUP (?)			; `MenuBar'::`2'::state
?pannel_state@?1??LeftPannel@@9@9 DD 01H DUP (?)	; `LeftPannel'::`2'::pannel_state
_BSS	ENDS
;	COMDAT ??_C@_0MH@FHMHJAMC@?$CDversion?5300?5es?6precision?5medium@
CONST	SEGMENT
??_C@_0MH@FHMHJAMC@?$CDversion?5300?5es?6precision?5medium@ DB '#version '
	DB	'300 es', 0aH, 'precision mediump float;', 0aH, 'uniform sampl'
	DB	'er2D Texture;', 0aH, 'in vec2 Frag_UV;', 0aH, 'in vec4 Frag_C'
	DB	'olor;', 0aH, 'out vec4 Out_Color;', 0aH, 'void main(){', 0aH, ' '
	DB	'  Out_Color = Frag_Color * texture(Texture, Frag_UV.st);', 0aH
	DB	'}', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0PD@HHBHAGG@?$CDversion?5300?5es?6uniform?5mat4?5Pro@
CONST	SEGMENT
??_C@_0PD@HHBHAGG@?$CDversion?5300?5es?6uniform?5mat4?5Pro@ DB '#version '
	DB	'300 es', 0aH, 'uniform mat4 ProjMtx;', 0aH, 'in vec2 Position'
	DB	';', 0aH, 'in vec2 TexCoord;', 0aH, 'in vec4 Color;', 0aH, 'ou'
	DB	't vec2 Frag_UV;', 0aH, 'out vec4 Frag_Color;', 0aH, 'void mai'
	DB	'n() {', 0aH, '   Frag_UV = TexCoord;', 0aH, '   Frag_Color = '
	DB	'Color;', 0aH, '   gl_Position = ProjMtx * vec4(Position.xy, 0'
	DB	', 1);', 0aH, '}', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CKODGPAC@NK_COLOR_TAB_HEADER?$AA@
CONST	SEGMENT
??_C@_0BE@CKODGPAC@NK_COLOR_TAB_HEADER?$AA@ DB 'NK_COLOR_TAB_HEADER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IJILDDIL@NK_COLOR_SCROLLBAR_CURSOR_ACTIVE@
CONST	SEGMENT
??_C@_0CB@IJILDDIL@NK_COLOR_SCROLLBAR_CURSOR_ACTIVE@ DB 'NK_COLOR_SCROLLB'
	DB	'AR_CURSOR_ACTIVE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HLCOJGKE@NK_COLOR_SCROLLBAR_CURSOR_HOVER?$AA@
CONST	SEGMENT
??_C@_0CA@HLCOJGKE@NK_COLOR_SCROLLBAR_CURSOR_HOVER?$AA@ DB 'NK_COLOR_SCRO'
	DB	'LLBAR_CURSOR_HOVER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BCKHGODL@NK_COLOR_SCROLLBAR_CURSOR?$AA@
CONST	SEGMENT
??_C@_0BK@BCKHGODL@NK_COLOR_SCROLLBAR_CURSOR?$AA@ DB 'NK_COLOR_SCROLLBAR_'
	DB	'CURSOR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FJBCPBMN@NK_COLOR_SCROLLBAR?$AA@
CONST	SEGMENT
??_C@_0BD@FJBCPBMN@NK_COLOR_SCROLLBAR?$AA@ DB 'NK_COLOR_SCROLLBAR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PFAFOEMP@NK_COLOR_CHART_COLOR_HIGHLIGHT?$AA@
CONST	SEGMENT
??_C@_0BP@PFAFOEMP@NK_COLOR_CHART_COLOR_HIGHLIGHT?$AA@ DB 'NK_COLOR_CHART'
	DB	'_COLOR_HIGHLIGHT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MEEINDGA@NK_COLOR_CHART_COLOR?$AA@
CONST	SEGMENT
??_C@_0BF@MEEINDGA@NK_COLOR_CHART_COLOR?$AA@ DB 'NK_COLOR_CHART_COLOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BJKJEJOA@NK_COLOR_CHART?$AA@
CONST	SEGMENT
??_C@_0P@BJKJEJOA@NK_COLOR_CHART?$AA@ DB 'NK_COLOR_CHART', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FEEPECKC@NK_COLOR_COMBO?$AA@
CONST	SEGMENT
??_C@_0P@FEEPECKC@NK_COLOR_COMBO?$AA@ DB 'NK_COLOR_COMBO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PJDDMCKJ@NK_COLOR_EDIT_CURSOR?$AA@
CONST	SEGMENT
??_C@_0BF@PJDDMCKJ@NK_COLOR_EDIT_CURSOR?$AA@ DB 'NK_COLOR_EDIT_CURSOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DEKGLIFN@NK_COLOR_EDIT?$AA@
CONST	SEGMENT
??_C@_0O@DEKGLIFN@NK_COLOR_EDIT?$AA@ DB 'NK_COLOR_EDIT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HONKKPNC@NK_COLOR_PROPERTY?$AA@
CONST	SEGMENT
??_C@_0BC@HONKKPNC@NK_COLOR_PROPERTY?$AA@ DB 'NK_COLOR_PROPERTY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MNHMPOAN@NK_COLOR_SLIDER_CURSOR_ACTIVE?$AA@
CONST	SEGMENT
??_C@_0BO@MNHMPOAN@NK_COLOR_SLIDER_CURSOR_ACTIVE?$AA@ DB 'NK_COLOR_SLIDER'
	DB	'_CURSOR_ACTIVE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IIMOGDMI@NK_COLOR_SLIDER_CURSOR_HOVER?$AA@
CONST	SEGMENT
??_C@_0BN@IIMOGDMI@NK_COLOR_SLIDER_CURSOR_HOVER?$AA@ DB 'NK_COLOR_SLIDER_'
	DB	'CURSOR_HOVER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LOKKNDLC@NK_COLOR_SLIDER_CURSOR?$AA@
CONST	SEGMENT
??_C@_0BH@LOKKNDLC@NK_COLOR_SLIDER_CURSOR?$AA@ DB 'NK_COLOR_SLIDER_CURSOR'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IMDHCAPK@NK_COLOR_SLIDER?$AA@
CONST	SEGMENT
??_C@_0BA@IMDHCAPK@NK_COLOR_SLIDER?$AA@ DB 'NK_COLOR_SLIDER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PKJGNGNK@NK_COLOR_SELECT_ACTIVE?$AA@
CONST	SEGMENT
??_C@_0BH@PKJGNGNK@NK_COLOR_SELECT_ACTIVE?$AA@ DB 'NK_COLOR_SELECT_ACTIVE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IJLDECBD@NK_COLOR_SELECT?$AA@
CONST	SEGMENT
??_C@_0BA@IJLDECBD@NK_COLOR_SELECT?$AA@ DB 'NK_COLOR_SELECT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CCMKKENB@NK_COLOR_TOGGLE_CURSOR?$AA@
CONST	SEGMENT
??_C@_0BH@CCMKKENB@NK_COLOR_TOGGLE_CURSOR?$AA@ DB 'NK_COLOR_TOGGLE_CURSOR'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GFOFADAH@NK_COLOR_TOGGLE_HOVER?$AA@
CONST	SEGMENT
??_C@_0BG@GFOFADAH@NK_COLOR_TOGGLE_HOVER?$AA@ DB 'NK_COLOR_TOGGLE_HOVER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GINDMCEM@NK_COLOR_TOGGLE?$AA@
CONST	SEGMENT
??_C@_0BA@GINDMCEM@NK_COLOR_TOGGLE?$AA@ DB 'NK_COLOR_TOGGLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PDJCAFHC@NK_COLOR_BUTTON_ACTIVE?$AA@
CONST	SEGMENT
??_C@_0BH@PDJCAFHC@NK_COLOR_BUTTON_ACTIVE?$AA@ DB 'NK_COLOR_BUTTON_ACTIVE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IECMHCP@NK_COLOR_BUTTON_HOVER?$AA@
CONST	SEGMENT
??_C@_0BG@IECMHCP@NK_COLOR_BUTTON_HOVER?$AA@ DB 'NK_COLOR_BUTTON_HOVER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EKMODIPE@NK_COLOR_BUTTON?$AA@
CONST	SEGMENT
??_C@_0BA@EKMODIPE@NK_COLOR_BUTTON?$AA@ DB 'NK_COLOR_BUTTON', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NMDKGDLN@NK_COLOR_BORDER?$AA@
CONST	SEGMENT
??_C@_0BA@NMDKGDLN@NK_COLOR_BORDER?$AA@ DB 'NK_COLOR_BORDER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@POJBPCMH@NK_COLOR_HEADER?$AA@
CONST	SEGMENT
??_C@_0BA@POJBPCMH@NK_COLOR_HEADER?$AA@ DB 'NK_COLOR_HEADER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OKHFDINJ@NK_COLOR_WINDOW?$AA@
CONST	SEGMENT
??_C@_0BA@OKHFDINJ@NK_COLOR_WINDOW?$AA@ DB 'NK_COLOR_WINDOW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MMHOKIEN@NK_COLOR_TEXT?$AA@
CONST	SEGMENT
??_C@_0O@MMHOKIEN@NK_COLOR_TEXT?$AA@ DB 'NK_COLOR_TEXT', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
_nk_color_names DD FLAT:??_C@_0O@MMHOKIEN@NK_COLOR_TEXT?$AA@
	DD	FLAT:??_C@_0BA@OKHFDINJ@NK_COLOR_WINDOW?$AA@
	DD	FLAT:??_C@_0BA@POJBPCMH@NK_COLOR_HEADER?$AA@
	DD	FLAT:??_C@_0BA@NMDKGDLN@NK_COLOR_BORDER?$AA@
	DD	FLAT:??_C@_0BA@EKMODIPE@NK_COLOR_BUTTON?$AA@
	DD	FLAT:??_C@_0BG@IECMHCP@NK_COLOR_BUTTON_HOVER?$AA@
	DD	FLAT:??_C@_0BH@PDJCAFHC@NK_COLOR_BUTTON_ACTIVE?$AA@
	DD	FLAT:??_C@_0BA@GINDMCEM@NK_COLOR_TOGGLE?$AA@
	DD	FLAT:??_C@_0BG@GFOFADAH@NK_COLOR_TOGGLE_HOVER?$AA@
	DD	FLAT:??_C@_0BH@CCMKKENB@NK_COLOR_TOGGLE_CURSOR?$AA@
	DD	FLAT:??_C@_0BA@IJLDECBD@NK_COLOR_SELECT?$AA@
	DD	FLAT:??_C@_0BH@PKJGNGNK@NK_COLOR_SELECT_ACTIVE?$AA@
	DD	FLAT:??_C@_0BA@IMDHCAPK@NK_COLOR_SLIDER?$AA@
	DD	FLAT:??_C@_0BH@LOKKNDLC@NK_COLOR_SLIDER_CURSOR?$AA@
	DD	FLAT:??_C@_0BN@IIMOGDMI@NK_COLOR_SLIDER_CURSOR_HOVER?$AA@
	DD	FLAT:??_C@_0BO@MNHMPOAN@NK_COLOR_SLIDER_CURSOR_ACTIVE?$AA@
	DD	FLAT:??_C@_0BC@HONKKPNC@NK_COLOR_PROPERTY?$AA@
	DD	FLAT:??_C@_0O@DEKGLIFN@NK_COLOR_EDIT?$AA@
	DD	FLAT:??_C@_0BF@PJDDMCKJ@NK_COLOR_EDIT_CURSOR?$AA@
	DD	FLAT:??_C@_0P@FEEPECKC@NK_COLOR_COMBO?$AA@
	DD	FLAT:??_C@_0P@BJKJEJOA@NK_COLOR_CHART?$AA@
	DD	FLAT:??_C@_0BF@MEEINDGA@NK_COLOR_CHART_COLOR?$AA@
	DD	FLAT:??_C@_0BP@PFAFOEMP@NK_COLOR_CHART_COLOR_HIGHLIGHT?$AA@
	DD	FLAT:??_C@_0BD@FJBCPBMN@NK_COLOR_SCROLLBAR?$AA@
	DD	FLAT:??_C@_0BK@BCKHGODL@NK_COLOR_SCROLLBAR_CURSOR?$AA@
	DD	FLAT:??_C@_0CA@HLCOJGKE@NK_COLOR_SCROLLBAR_CURSOR_HOVER?$AA@
	DD	FLAT:??_C@_0CB@IJILDDIL@NK_COLOR_SCROLLBAR_CURSOR_ACTIVE@
	DD	FLAT:??_C@_0BE@CKODGPAC@NK_COLOR_TAB_HEADER?$AA@
?vertex_shader@?1??nk_sdl_device_create@@9@9 DD FLAT:??_C@_0PD@HHBHAGG@?$CDversion?5300?5es?6uniform?5mat4?5Pro@ ; `nk_sdl_device_create'::`2'::vertex_shader
?fragment_shader@?1??nk_sdl_device_create@@9@9 DD FLAT:??_C@_0MH@FHMHJAMC@?$CDversion?5300?5es?6precision?5medium@ ; `nk_sdl_device_create'::`2'::fragment_shader
?seperator@?1??nk_widget_text_wrap@@9@9 DD 020H		; `nk_widget_text_wrap'::`2'::seperator
?select@?1??FileBrowser@@9@9 DD 0ffffffffH		; `FileBrowser'::`2'::select
?doubleclick@?1??FileBrowser@@9@9 DD 0ffffffffH		; `FileBrowser'::`2'::doubleclick
?doubleclick2@?1??FileBrowser@@9@9 DD 0ffffffffH	; `FileBrowser'::`2'::doubleclick2
?editcolor@?1??LeftPannel@@9@9 DB 0ffH			; `LeftPannel'::`2'::editcolor
	DB	0ffH
	DB	0ffH
	DB	0ffH
_DATA	ENDS
CONST	SEGMENT
?pnt_align@?2??nk_draw_list_stroke_poly_line@@9@9 DD 04H ; `nk_draw_list_stroke_poly_line'::`3'::pnt_align
?pnt_size@?2??nk_draw_list_stroke_poly_line@@9@9 DD 08H	; `nk_draw_list_stroke_poly_line'::`3'::pnt_size
?hue_colors@?3??nk_draw_color_picker@@9@9 DB 0ffH	; `nk_draw_color_picker'::`4'::hue_colors
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	0ffH
	DB	00H
	DB	0ffH
	DB	00H
	DB	0ffH
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	0ffH
?align@?1??nk_command_buffer_push@@9@9 DD 04H		; `nk_command_buffer_push'::`2'::align
_nk_proggy_clean_ttf_compressed_data_base85 DB '7])#######hV0qs''/###[),#'
	DB	'#/l:$#Q6>##5[n42>c-TH`->>#/e>11NNV=Bv(*:.F?uu#(gRU.o0XGH`$vhL'
	DB	'G1hxt9?W`#,5LsCp#-i>.r$<$6pD>Lb'';9Crc6tgXmKVeU2cD4Eo3R/2*>]b'
	DB	'(MC;$jPfY.;h^`IWM9<Lh2TlS+f-s$o6Q<BWH`YiU.xfLq$N;$0iR/GX:U(jc'
	DB	'W2p/W*q?-qmnUCI;jHSAiFWM.R*kU@C=GH?a9wp8f$e.-4^Qg1)Q-GL(lf(r/'
	DB	'7GrRgwV%MS=C#`8ND>Qo#t''X#(v#Y9w0#1D$CIf;W''#pWUPXOuxXuU(H9M('
	DB	'1<q-UE31#^-V''8IRUo7Qf./L>=Ke$$''5F%)]0^#0X@U.a<r:QLtFsLcL6##'
	DB	'lOj)#.Y5<-R&KgLwqJfLgN&;Q?gI^#DY2uLi@^rMl9t=cWq6##weg>$FBjVQT'
	DB	'SDgEKnIS7EM9>ZY9w0#L;>>#Mx&4Mvt//L[MkA#W@lK.N''[0#7RL_&#w+F%H'
	DB	'tG9M#XL`N&.,GM4Pg;-<nLENhvx>-VsM.M0rJfLH2eTM`*oJMHRC`NkfimM2J'
	DB	',W-jXS:)r0wK#@Fge$U>`w''N7G#$#fB#$E^$#:9:hk+eOe--6x)F7*E%?76%'
	DB	'^GMHePW-Z5l''&GiF#$956:rS?dA#fiK:)Yr+`&#0j@''DbG&#^$PG.Ll+DNa'
	DB	'<XCMKEV*N)LN/N*b=%Q6pia-Xg8I$<MR&,VdJe$<(7G;Ckl''&hF;;$<_=X(b'
	DB	'.RS%%)###MPBuuE1V:v&cX&#2m#(&cV]`k9OhLMbn%s$G2,B$BfD3X*sp5#l,'
	DB	'$R#]x_X1xKX%b5U*[r5iMfUo9U`N99hG)tm+/Us9pG)XPu`<0s-)WTt(gCRxI'
	DB	'g(%6sfh=ktMKn3j)<6<b5Sk_/0(^]AaN#(p/L>&VZ>1i%h1S9u5o@YaaW$e+b'
	DB	'<TWFn/Z:Oh(Cx2$lNEoN^e)#CFY@@I;BOQ*sRwZtZxRcU7uW6CXow0i(?$Q[c'
	DB	'jOd[P4d)]>ROPOpxTO7Stwi1::iB1q)C_=dV26J;2,]7op$]uQr@_V7$q^%lQ'
	DB	'wtuHY]=DX,n3L#0PHDO4f9>dC@O>HBuKPpP*E,N+b3L#lpR/MrTEH.IAQk.a>'
	DB	'D[.e;mc.x]Ip.PH^''/aqUO/$1WxLoW0[iLA<QT;5HKD+@qQ''NQ(3_PLhE48'
	DB	'R.qAPSwQ0/WK?Z,[x?-J;jQTWA0X@KJ(_Y8N-:/M74:/-ZpKrUss?d#dZq]DA'
	DB	'bkU*JqkL+nwX@@47`5>w=4h(9.`GCRUxHPeR`5Mjol(dUWxZa(>STrPkrJiWx'
	DB	'`5U7F#.g*jrohGg`cg:lSTvEY/EV_7H4Q9[Z%cnv;JQYZ5q.l7Zeas:HOIZOB'
	DB	'?G<Nald$qs]@]L<J7bR*>gv:[7MI2k).''2($5FNP&EQ(,)U]W]+fh18.vsai'
	DB	'00);D3@4ku5P?DP8aJt+;qUM]=+b''8@;mViBKx0DE[-auGl8:PJ&Dj+M6OC]'
	DB	'O^((##]`0i)drT;-7X`=-H3[igUnPG-NZlo.#k@h#=Ork$m>a>$-?Tm$UV(?#'
	DB	'P6YY#''/###xe7q.73rI3*pP/$1>s9)W,JrM7SN]''/4C#v$U`0#V.[0>xQsH'
	DB	'$fEmPMgY2u7Kh(G%siIfLSoS+MK2eTM$=5,M8p`A.;_R%#u[K#$x4AG8.kK/H'
	DB	'SB==-''Ie/QTtG?-.*^N-4B/ZM_3YlQC7(p7q)&](`6_c)$/*JL(L-^(]$wIM'
	DB	'`dPtOdGA,U3:w2M-0<q-]L_?^)1vw''.,MRsqVr.L;aN&#/EgJ)PBc[-f>+Wo'
	DB	'mX2u7lqM2iEumMTcsF?-aT=Z-97UEnXglEn1K-bnEO`guFt(c%=;Am_Qs@jLo'
	DB	'oI&NX;]0#j4#F14;gl8-GQpgwhrq8''=l_f-b49''UOqkLu7-##oDY2L(te+M'
	DB	'ch&gLYtJ,MEtJfLh''x''M=$CS-ZZ%P]8bZ>#S?YY#%Q&q''3^Fw&?D)UDNro'
	DB	'cM3A76//oL?#h7gl85[qW/NDOk%16ij;+:1a''iNIdb-ou8.P*w,v5#EI$TWS'
	DB	'>Pot-R*H''-SEpA:g)f+O$%%`kA#G=8RMmG1&O`>to8bC]T&$,n.LoO>29sp3'
	DB	'dt-52U%VM#q7''DHpg+#Z9%H[K<L%a2E-grWVM3@2=-k22tL]4$##6We''8UJ'
	DB	'CKE[d_=%wI;''6X-GsLX4j^SgJ$##R*w,vP3wK#iiW&#*h^D&R?jp7+/u&#(A'
	DB	'P##XU8c$fSYW-J95_-Dp[g9wcO&#M-h1OcJlc-*vpw0xUX&#OQFKNX@QI''Io'
	DB	'Pp7nb,QU//MQ&ZDkKP)X<WSVL(68uVl&#c''[0#(s1X&xm$Y%B7*K:eDA323j'
	DB	'998GXbA#pwMs-jgD$9QISB-A_(aN4xoFM^@C58D0+Q+q3n0#3U1InDjF682-S'
	DB	'jMXJK)(h$hxua_K]ul92%''BOU&#BRRh-slg8KDlr:%L71Ka:.A;%YULjDPmL'
	DB	'<LYs8i#XwJOYaKPKc1h:''9Ke,g)b),78=I39B;xiY$bgGw-&.Zi9InXDuYa%'
	DB	'G*f2Bq7mn9^#p1vv%#(Wi-;/Z5ho;#2:;%d&#x9v68C5g?ntX0X)pT`;%pB3q'
	DB	'7mgGN)3%(P8nTd5L7GeA-GL@+%J3u2:(Yf>et`e;)f#Km8&+DC$I46>#Kr]]u'
	DB	'-[=99tts1.qb#q72g1WJO81q+eN''03''eM>&1XxY-caEnOj%2n8)),?ILR5^'
	DB	'.Ibn<-X-Mq7[a82Lq:F&#ce+S9wsCK*x`569E8ew''He]h:sI[2LM$[guka3Z'
	DB	'Rd6:t%IG:;$%YiJ:Nq=?eAw;/:nnDq0(CYcMpG)qLN4$##&J<j$UpK<Q4a1]M'
	DB	'upW^-sj_$%[HK%''F####QRZJ::Y3EGl4''@%FkiAOg#p[##O`gukTfBHagL<'
	DB	'LHw%q&OV0##F=6/:chIm0@eCP8X]:kFI%hl8hgO@RcBhS-@Qb$%+m=hPDLg*%'
	DB	'K8ln(wcf3/''DW-$.lR?n[nCH-eXOONTJlh:.RYF%3''p6sq:UIMA945&^HFS'
	DB	'87@$EP2iG<-lCO$%c`uKGD3rC$x0BL8aFn--`ke%#HMP''vh1/R&O_J9''um,'
	DB	'.<tx[@%wsJk&bUT2`0uMv7gg#qp/ij.L56''hl;.s5CUrxjOM7-##.l+Au''A'
	DB	'&O:-T72L]P`&=;ctp''XScX*rU.>-XTt,%OVU4)S1+R-#dg0/Nn?Ku1^0f$B*'
	DB	'P:Rowwm-`0PKjYDDM''3]d39VZHEl4,.j'']Pk-M.h^&:0FACm$maq-&sgw0t'
	DB	'7/6(^xtk%LuH88Fj-ekm>GA#_>568x6(OFRl-IZp`&b,_P''$M<Jnq79VsJW/'
	DB	'mWS*PUiq76;]/NM_>hLbxfc$mj`,O;&%W2m`Zh:/)Uetw:aJ%]K9h:TcF]u_-'
	DB	'Sj9,VK3M.*''&0D[Ca]J9gp8,kAW]%(?A%R$f<->Zts''^kn=-^@c4%-pY6qI'
	DB	'%J%1IGxfLU9CP8cbPlXv);C=b),<2mOvP8up,UVf3839acAWAW-W?#ao/^#%K'
	DB	'Yo8fRULNd2.>%m]UK:n%r$''sw]J;5pAoO_#2mO3n,''=H5(etHg*`+RLgv>='
	DB	'4U8guD$I%D:W>-r5V*%j*W:Kvej.Lp$<M-SGZ'':+Q_k+uvOSLiEo(<aD/K<C'
	DB	'Cc`''Lx>''?;++O''>()jLR-^u68PHm8ZFWe+ej8h:9r6L*0//c&iH&R8pRbA'
	DB	'#Kjm%upV1g:a_#Ur7FuA#(tRh#.Y5K+@?3<-8m0$PEn;J:rh6?I6uG<-`wMU'''
	DB	'ircp0LaE_OtlMb&1#6T.#FDKu#1Lw%u%+GM+X''e?YLfjM[VO0MbuFp7;>Q&#'
	DB	'WIo)0@F%q7c#4XAXN-U&VB<HFF*qL($/V,;(kXZejWO`<[5??ewY(*9=%wDc;'
	DB	',u<''9t3W-(H1th3+G]ucQ]kLs7df($/*JL]@*t7Bu_G3_7mp7<iaQjO@.kLg'
	DB	';x3B0lqp7Hf,^Ze7-##@/c58Mo(3;knp0%)A7?-W+eI''o8)b<nKnw''Ho8C='
	DB	'Y>pqB>0ie&jhZ[?iLR@@_AvA-iQC(=ksRZRVp7`.=+NpBC%rh&3]R:8XDmE5^'
	DB	'V8O(x<<aG/1N$#FX$0V5Y6x''aErI3I$7x%E`v<-BY,)%-?Psf*l?%C3.mM(='
	DB	'/M0:JxG''?7WhH%o''a<-80g0NBxoO(GH<dM]n.+%q@jH?f.UsJ2Ggs&4<-e4'
	DB	'7&Kl+f//9@`b+?.TeN_&B8Ss?v;^Trk;f#YvJkl&w$]>-+k?''(<S:68tq*Wo'
	DB	'DfZu'';mM?8X[ma8W%*`-=;D.(nc7/;)g:T1=^J$&BRV(-lTmNB6xqB[@0*o.'
	DB	'erM*<SWF]u2=st-*(6v>^](H.aREZSi,#1:[IXaZFOm<-ui#qUq2$##Ri;u75'
	DB	'OK#(RtaW-K-F`S+cF]uN`-KMQ%rP/Xri.LRcB##=YL3BgM/3MD?@f&1''BW-)'
	DB	'Ju<L25gl8uhVm1hL$##*8###''A3/LkKW+(^rWX?5W_8g)a(m&K8P>#bmmWCM'
	DB	'kk&#TR`C,5d>g)F;t,4:@_l8G/5h4vUd%&%950:VXD''QdWoY-F$BtUwmfe$Y'
	DB	'qL''8(PWX(P?^@Po3$##`MSs?DWBZ/S>+4%>fX,VWv/w''KD`LP5IbH;rTV>n'
	DB	'3cEK8U#bX]l-/V+^lj3;vlMb&[5YQ8#pekX9JP3XUC72L,,?+Ni&co7ApnO*5'
	DB	'NK,((W-i:$,kp''UDAO(G0Sq7MVjJsbIu)''Z,*[>br5fX^:FPAWr-m2KgL<L'
	DB	'UN098kTF&#lvo58=/vjDo;.;)Ka*hLR#/k=rKbxuV`>Q_nN6''8uTG&#1T5g)'
	DB	'uLv:873UpTLgH+#FgpH''_o1780Ph8KmxQJ8#H72L4@768@Tm&Qh4CB/5OvmA'
	DB	'&,Q&QbUoi$a_%3M01H)4x7I^&KQVgtFnV+;[Pc>[m4k//,]1?#`VY[Jr*3&&s'
	DB	'lRfLiVZJ:]?=K3Sw=[$=uRB?3xk48@aeg<Z''<$#4H)6,>e0jT6''N#(q%.O='
	DB	'?2S]u*(m<-V8J''(1)G][68hW$5''q[GC&5j`TE?m''esFGNRM)j,ffZ?-qx8'
	DB	';->g4t*:CIP/[Qap7/9''#(1sao7w-.qNUdkJ)tCF&#B^;xGvn2r9FEPFFFcL'
	DB	'@.iFNkTve$m%#QvQS8U@)2Z+3K:AKM5isZ88+dKQ)W6>J%CL<KE>`.d*(B`-n'
	DB	'8D9oK<Up]c$X$(,)M8Zt7/[rdkqTgl-0cuGMv''?>-XV1q[''-5k''cAZ69e;'
	DB	'D_?$ZPP&s^+7])$*$#@QYi9,5P&#9r+$%CE=68>K8r0=dSC%%(@p7.m7jilQ0'
	DB	'2''0-VWAg<a/''''3u.=4L$Y)6k/K:_[3=&jvL<L0C/2''v:^;-DIBW,B4E68'
	DB	':kZ;%?8(Q8BH=kO65BW?xSG&#@uU,DS*,?.+(o(#1vCS8#CHF>TlGW''b)Tq7'
	DB	'VT9q^*^$$.:&N@@$&)WHtPm*5_rO0&e%K&#-30j(E4#''Zb.o/(Tpm$>K''f@'
	DB	'[PvFl,hfINTNU6u''0pao7%XUp9]5.>%h`8_=VYbxuel.NTSsJfLacFu3B''l'
	DB	'QSu/m6-Oqem8T+oE--$0a/k]uj9EwsG>%veR*hv^BFpQj:K''#SJ,sB-''#]('
	DB	'j.Lg92rTw-*n%@/;39rrJF,l#qV%OrtBeC6/,;qB3ebNW[?,Hqj2L.1NP&GjU'
	DB	'R=1D8QaS3Up&@*9wP?+lo7b?@%''k4`p0Z$22%K3+iCZj?XJN4Nm&+YF]u@-W'
	DB	'$U%VEQ/,,>>#)D<h#`)h0:<Q6909ua+&VU%n2:cG3FJ-%@Bj-DgLr`Hw&HAKj'
	DB	'KjseK</xKT*)B,N9X3]krc12t''pgTV(Lv-tL[xg_%=M_q7a^x?7Ubd>#%8cY'
	DB	'#YZ?=,`Wdxu/ae&#w6)R89tI#6@s''(6Bf7a&?S=^ZI_kS&ai`&=tE72L_D,;'
	DB	'^R)7[$s<Eh#c&)q.MXI%#v9ROa5FZO%sF7q7Nwb&#ptUJ:aqJe$Sl68%.D###'
	DB	'EC><?-aF&#RNQv>o8lKN%5/$(vdfq7+ebA#u1p]ovUKW&Y%q]''>$1@-[xfn$'
	DB	'7ZTp7mM,G,Ko7a&Gu%G[RMxJs[0MM%wci.LFDK)(<c`Q8N)jEIF*+?P2a8g%)'
	DB	'$q]o2aH8C&<SibC/q,(e:v;-b#6[$NtDZ84Je2KNvB#$P5?tQ3nt(0d=j.LQf'
	DB	'./Ll33+(;q3L-w=8dX$#WF&uIJ@-bfI>%:_i2B5CsR8&9Z&#=mPEnm0f`<&c)'
	DB	'QL5uJ#%u%lJj+D-r;BoF&#4DoS97h5g)E#o:&S4weDF,9^Hoe`h*L+_a*NrLW'
	DB	'-1pG_&2UdB86e%B/:=>)N4xeW.*wft-;$''58-ESqr<b?UI(_%@[P46>#U`'''
	DB	'6AQ]m&6/`Z>#S?YY#Vc;r7U2&326d=w&H####?TZ`*4?&.MK?LP8Vxg>$[QXc'
	DB	'%QJv92.(Db*B)gb*BM9dM*hJMAo*c&#b0v=Pjer]$gG&JXDf->''StvU7505l'
	DB	'9$AFvgYRI^&<^b68?j#q9QX4SM''RO#&sL1IM.rJfLUAj221]d##DW=m83u5;'
	DB	'''bYx,*Sl0hL(W;;$doB&O/TQ:(Z^xBdLjL<Lni;''''X.`$#8+1GD:k$YUWs'
	DB	'bn8ogh6rxZ2Z9]%nd+>V#*8U_72Lh+2Q8Cj0i:6hp&$C/:p(HK>T8Y[gHQ4`4'
	DB	')''$Ab(Nof%V''8hL&#<NEdtg(n''=S1A(Q1/I&4([%dM`,Iu''1:_hL>SfD0'
	DB	'7&6D<fp8dHM7/g+tlPN9J*rKaPct&?''uBCem^jn%9_K)<,C5K3s=5g&GmJb*'
	DB	'[SYq7K;TRLGCsM-$$;S%:Y@r7AK0pprpL<Lrh,q7e/%KWK:50I^+m''vi`3?%'
	DB	'Zp+<-d+$L-Sv:@.o19n$s0&39;kn;S%BSq*$3WoJSCLweV[aZ''MQIjO<7;X-'
	DB	'X;&+dMLvu#^UsGEC9WEc[X(wI7#2.(F0jV*eZf<-Qv3J-c+J5AlrB#$p(H68L'
	DB	'vEA''q3n0#m,[`*8Ft)FcYgEud]CWfm68,(aLA$@EFTgLXoBq/UPlp7:d[/;r'
	DB	'_ix=:TF`S5H-b<LI&HY(K=h#)]Lk$K14lVfm:x$H<3^Ql<M`$OhapBnkup''D'
	DB	'#L$Pb_`N*g]2e;X/Dtg,bsj&K#2[-:iYr''_wgH)NUIR8a1n#S?Yej''h8^58'
	DB	'UbZd+^FKD*T@;6A7aQC[K8d-(v6GI$x:T<&''Gp5Uf>@M.*J:;$-rv29''M]8'
	DB	'qMv-tLp,''886iaC=Hb*YJoKJ,(j%K=H`K.v9HggqBIiZu''QvBT.#=)0ukru'
	DB	'V&.)3=(^1`o*Pj4<-<aN((^7(''#Z0wK#5GX@7u][`*S^43933A4rl][`*O4C'
	DB	'gLEl]v$1Q3AeF37dbXk,.)vj#x''d`;qgbQR%FW,2(?LO=s%Sc68%NP''##Ao'
	DB	'tl8x=BE#j1UD([3$M(]UI2LX3RpKN@;/#f''f/&_mt&F)XdF<9t4)Qa.*kTLw'
	DB	'Q''(TTB9.xH''>#MJ+gLq9-##@HuZPN0]u:h7.T..G:;$/Usj(T7`Q8tT72Ln'
	DB	'Yl<-qx8;-HV7Q-&Xdx%1a,hC=0u+HlsV>nuIQL-5<N?)NBS)QN*_I,?&)2''I'
	DB	'M%L3I)X((e/dl2&8''<M:^#M*Q+[T.Xri.LYS3v%fF`68h;b-X[/En''CR.q7'
	DB	'E)p''/kle2HM,u;^%OKC-N+Ll%F9CF<Nf''^#t2L,;27W:0O@6##U6W7:$rJf'
	DB	'LWHj$#)woqBefIZ.PK<b*t7ed;p*_m;4ExK#h@&]>_>@kXQtMacfD.m-VAb8;'
	DB	'IReM3$wf0''''hra*so568''Ip&vRs849''MRYSp%:t:h5qSgwpEr$B>Q,;s('
	DB	'C#$)`svQuF$##-D,##,g68@2[T;.XSdN9Qe)rpt._K-#5wF)sP''##p#C0c%-'
	DB	'Gb%hd+<-j''Ai*x&&HMkT]C''OSl##5RG[JXaHN;d''uA#x._U;.`PU@(Z3dt'
	DB	'4r152@:v,''R.Sj''w#0<-;kPI)FfJ&#AYJ&#//)>-k=m=*XnK$>=)72L]0I%'
	DB	'>.G690a:$##<,);?;72#?x9+d;^V''9;jY@;)br#q^YQpx:X#Te$Z^''=-=bG'
	DB	'hLf:D6&bNwZ9-ZD#n^9HhLMr5G;'']d&6''wYmTFmL<LD)F^%[tC''8;+9E#C'
	DB	'$g%#5Y>q9wI>P(9mI[>kC-ekLC/R&CH+s''B;K-M6$EB%is00:+A4[7xks.Lr'
	DB	'Nk0&E)wILYF@2L''0Nb$+pv<(2.768/FrY&h$^3i&@+G%JT''<-,v`3;_)I9M'
	DB	'^AE]CN?Cl2AZg+%4iTpT3<n-&%H%b<FDj2M<hH=&Eh<2Len$b*aTX=-8QxN)k'
	DB	'11IM1c^j%9s<L<NFSo)B?+<-(GxsF,^-Eh@$4dXhN$+#rxK8''je''D7k`e;)'
	DB	'2pYwPA''_p9&@^18ml1^[@g4t*[JOa*[=Qp7(qJ_oOL^(''7fB&Hq-:sf,sNj'
	DB	'8xq^>$U4O]GKx''m9)b@p7YsvK3w^YR-CdQ*:Ir<($u&)#(&?L9Rg3H)4fiEp'
	DB	'^iI9O8KnTj,]H?D*r7''M;PwZ9K0E^k&-cpI;.p/6_vwoFMV<->#%Xi.LxVnr'
	DB	'U(4&8/P+:hLSKj$#U%]49t''I:rgMi''FL@a:0Y-uA[39'',(vbma*hU%<-SR'
	DB	'F`Tt:542R_VV$p@[p8DV[A,?1839FWdF<TddF<9Ah-6&9tWoDlh]&1SpGMq>T'
	DB	'i1O*H&#(AL8[_P%.M>v^-))qOT*F5Cq0`Ye%+$B6i:7@0IX<N+T+0MlMBPQ*V'
	DB	'j>SsD<U4JHY8kD2)2fU/M#$e.)T4,_=8hLim[&);?UkK''-x?''(:siIfL<$p'
	DB	'FM`i<?%W(mGDHM%>iWP,##P`%/L<eXi:@Z9C.7o=@(pXdAO/NLQ8lPl+HPOQa'
	DB	'8wD8=^GlPa8TKI1CjhsCTSLJM''/Wl>-S(qw%sf/@%#B6;/U7K]uZbi^Oc^2n'
	DB	'<bhPmUkMw>%t<)''mEVE''''n`WnJra$^TKvX5B>;_aSEK'',(hwa0:i4G?.B'
	DB	'ci.(X[?b*($,=-n<.Q%`(X=?+@Am*Js0&=3bh8K]mL<LoNs''6,''85`0?t/'''
	DB	'_U59@]ddF<#LdF<eWdF<OuN/45rY<-L@&#+fm>69=Lb,OcZV/);TTm8VI;?%O'
	DB	'tJ<(b4mq7M6:u?KRdF<gR@2L=FNU-<b[(9c/ML3m;Z[$oF3g)GAWqpARc=<RO'
	DB	'u7cL5l;-[A]%/+fsd;l#SafT/f*W]0=O''$(Tb<[)*@e775R-:Yob%g*>l*:x'
	DB	'P?Yb.5)%w_I?7uk5JC+FS(m#i''k.''a0i)9<7b''fs''59hq$*5Uhv##pi^8'
	DB	'+hIEBF`nvo`;''l0.^S1<-wUK2/Coh58KKhLjM=SO*rfO`+qC`W-On.=AJ56>'
	DB	'>i2@2LH6A:&5q`?9I3@@''04&p2/LVa*T-4<-i3;M9UvZd+N7>b*eIwg:CC)c'
	DB	'<>nO&#<IGe;__.thjZl<%w(Wk2xmp4Q@I#I9,DF]u7-P=.-_:YJ]aS@V?6*C('
	DB	')dOp7:WL,b&3Rg/.cmM9&r^>$(>.Z-I&J(Q0Hd5Q%7Co-b`-c<N(6r@ip+Aur'
	DB	'K<m86QIth*#v;-OBqi+L7wDE-Ir8K[''m+DDSLwK&/.?-V%U_%3:qKNu$_b*B'
	DB	'-kp7NaD''QdWQPKYq[@>P)hI;*_F]u`Rb[.j8_Q/<&>uu+VsH$sM9TA%?)(vm'
	DB	'J80),P7E>)tjD%2L=-t#fK[%`v=Q8<FfNkgg^oIbah*#8/Qt$F&:K*-(N/''+'
	DB	'1vMB,u()-a.VUU*#[e%gAAO(S>WlA2);Sa>gXm8YB`1d@K#n]76-a$U,mF<fX'
	DB	']idqd)<3,]J7JmW4`6]uks=4-72L(jEk+:bJ0M^q-8Dm_Z?0olP1C9Sa&H[d&'
	DB	'c$ooQUj]Exd*3ZM@-WGW2%s'',B-_M%>%Ul:#/''xoFM9QX-$.QN''>[%$Z$u'
	DB	'F6pA6Ki2O5:8w*vP1<-1`[G,)-m#>0`P&#eb#.3i)rtB61(o''$?X3B</R90;'
	DB	'eZ]%Ncq;-Tl]#F>2Qft^ae_5tKL9MUe9b*sLEQ95C&`=G?@Mj=wh*''3E>=-<'
	DB	')Gt*Iw)''QG:`@IwOf7&]1i''S01B+Ev/Nac#9S;=;YQpg_6U`*kVY39xK,[/'
	DB	'6Aj7:''1Bm-_1EYfa1+o&o4hp7KN_Q(OlIo@S%;jVdn0''1<Vc52=u`3^o-n1'
	DB	'''g4v58Hj&6_t7$##?M)c<$bgQ_''SY((-xkA#Y(,p''H9rIVY-b,''%bCPF7'
	DB	'.J<Up^,(dU1VY*5#WkTU>h19w,WQhLI)3S#f$2(eb,jr*b;3Vw]*7NH%$c4Vs'
	DB	',eD9>XW8?N]o+(*pgC%/72LV-u<Hp,3@e^9UB1J+ak9-TN/mhKPg+AJYd$Mlv'
	DB	'AF_jCK*.O-^(63adMT->W%iewS8W6m2rtCpo''RS1R84=@paTKt)>=%&1[)*v'
	DB	'p''u+x,VrwN;&]kuO9JDbg=pO$J*.jVe;u''m0dr9l,<*wMK*Oe=g8lV_KEBF'
	DB	'kO''oU]^=[-792#ok,)i]lR8qQ2oA8wcRCZ^7w/Njh;?.stX?Q1>S1q4Bn$)K'
	DB	'1<-rGdO''$Wr.Lc.CG)$/*JL4tNR/,SVO3,aUw''DJN:)Ss;wGn9A32ijw%FL'
	DB	'+Z0Fn.U9;reSq)bmI32U==5ALuG&#Vf1398/pVo1*c-(aY168o<`JsSbk-,1N'
	DB	';$>0:OUas(3:8Z972LSfF8eb=c-;>SPw7.6hn3m`9^Xkn(r.qS[0;T%&Qc=+S'
	DB	'TRxX''q1BNk3&*eu2;&8q$&x>Q#Q7^Tf+6<(d%ZVmj2bDi%.3L2n+4W''$PiD'
	DB	'DG)g,r%+?,$@?uou5tSe2aN_AQU*<h`e-GI7)?OK2A.d7_c)?wQ5AS@DL3r#7'
	DB	'fSkgl6-++D:''A,uq7SvlB$pcpH''q3n0#_%dY#xCpr-l<F0NR@-##FEV6NTF'
	DB	'6##$l84N1w?AO>''IAOURQ##V^Fv-XFbGM7Fl(N<3DhLGF%q.1rC$#:T__&Pi'
	DB	'68%0xi_&[qFJ(77j_&JWoF.V735&T,[R*:xFR*K5>>#`bW-?4Ne_&6Ne_&6Ne'
	DB	'_&n`kr-#GJcM6X;uM6X;uM(.a..^2TkL%oR(#;u.T%fAr%4tJ8&><1=GHZ_+m'
	DB	'9/#H1F^R#SC#*N=BA9(D?v[UiFY>>^8p,KKF.W]L29uLkLlu/+4T<XoIB&hx='
	DB	'T1PcDaB&;HH+-AFr?(m9HZV)FKS8JCw;SD=6[^/DZUL`EUDf]GGlG&>w$)F./'
	DB	'^n3+rlo+DB;5sIYGNk+i1t-69Jg--0pao7Sm#K)pdHW&;LuDNH@H>#/X-TI(;'
	DB	'P>#,Gc>#0Su>#4`1?#8lC?#<xU?#@.i?#D:%@#HF7@#LRI@#P_[@#Tkn@#Xw*'
	DB	'A#]-=A#a9OA#d<F&#*;G##.GY##2Sl##6`($#:l:$#>xL$#B.`$#F:r$#JF.%'
	DB	'#NR@%#R_R%#Vke%#Zww%#_-4&#3^Rh%Sflr-k''MS.o?.5/sWel/wpEM0%3'''
	DB	'/1)K^f1-d>G21&v(35>V`39V7A4=onx4A1OY5EI0;6Ibgr6M$HS7Q<)58C5w,'
	DB	';WoA*#[%T*#`1g*#d=#+#hI5+#lUG+#pbY+#tnl+#x$),#&1;,#*=M,#.I`,#'
	DB	'2Ur,#6b.-#;w[H#iQtA#m^0B#qjBB#uvTB##-hB#''9$C#+E6C#/QHC#3^ZC#'
	DB	'7jmC#;v)D#?,<D#C8ND#GDaD#KPsD#O]/E#g1A5#KA*1#gC17#MGd;#8(02#L'
	DB	'-d3#rWM4#Hga1#,<w0#T.j<#O#''2#CYN1#qa^:#_4m3#o@/=#eG8=#t8J5#`'
	DB	'+78#4uI-#m3B2#SB[8#Q0@8#i[*9#iOn8#1Nm;#^sN9#qh<9#:=x-#P;K2#$%'
	DB	'X9#bC+.#Rg;<#mN=.#MTF.#RZO.#2?)4#Y#(/#[)1/#b;L/#dAU/#0Sv;#lY$'
	DB	'0#n`-0#sf60#(F24#wrH0#%/e0#TmD<#%JSMFove:CTBEXI:<eh2g)B,3h2^G'
	DB	'3i;#d3jD>)4kMYD4lVu`4m`:&5niUA5@(A5BA1]PBB:xlBCC=2CDLXMCEUtiC'
	DB	'f&0g2''tN?PGT4CPGT4CPGT4CPGT4CPGT4CPGT4CPGT4CPGT4CPGT4CPGT4CP'
	DB	'GT4CPGT4CPGT4CP-qekC`.9kEg^+F$kwViFJTB&5KTB&5KTB&5KTB&5KTB&5K'
	DB	'TB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5o,^<-28ZI''O'
	DB	'?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?'
	DB	';xpO?;xp;7q-#lLYI:xvD=#', 00H
	ORG $+3
_nk_custom_cursor_data DB '..-         -XXXXXXX-    X    -           X   '
	DB	'        -XXXXXXX          -          XXXXXXX..-         -X...'
	DB	'..X-   X.X   -          X.X          -X.....X          -     '
	DB	'     X.....X---         -XXX.XXX-  X...X  -         X...X    '
	DB	'     -X....X           -           X....XX           -  X.X  '
	DB	'- X.....X -        X.....X        -X...X            -        '
	DB	'    X...XXX          -  X.X  -X.......X-       X.......X     '
	DB	'  -X..X.X           -           X.X..XX.X         -  X.X  -XX'
	DB	'XX.XXXX-       XXXX.XXXX       -X.X X.X          -          X'
	DB	'.X X.XX..X        -  X.X  -   X.X   -          X.X          -'
	DB	'XX   X.X         -         X.X   XXX...X       -  X.X  -   X.'
	DB	'X   -    XX    X.X    XX    -      X.X        -        X.X   '
	DB	'   X....X      -  X.X  -   X.X   -   X.X    X.X    X.X   -   '
	DB	'    X.X       -       X.X       X.....X     -  X.X  -   X.X  '
	DB	' -  X..X    X.X    X..X  -        X.X      -      X.X        '
	DB	'X......X    -  X.X  -   X.X   - X...XXXXXX.XXXXXX...X -      '
	DB	'   X.X   XX-XX   X.X         X.......X   -  X.X  -   X.X   -X'
	DB	'.....................X-          X.X X.X-X.X X.X          X..'
	DB	'......X  -  X.X  -   X.X   - X...XXXXXX.XXXXXX...X -         '
	DB	'  X.X..X-X..X.X           X.........X -XXX.XXX-   X.X   -  X.'
	DB	'.X    X.X    X..X  -            X...X-X...X            X.....'
	DB	'.....X-X.....X-   X.X   -   X.X    X.X    X.X   -           X'
	DB	'....X-X....X           X......XXXXX-XXXXXXX-   X.X   -    XX '
	DB	'   X.X    XX    -          X.....X-X.....X          X...X..X '
	DB	'   ---------   X.X   -          X.X          -          XXXXX'
	DB	'XX-XXXXXXX          X..X X..X   -       -XXXX.XXXX-       XXX'
	DB	'X.XXXX       ------------------------------------X.X  X..X   '
	DB	'-       -X.......X-       X.......X       -    XX           X'
	DB	'X    -           XX    X..X  -       - X.....X -        X....'
	DB	'.X        -   X.X           X.X   -                 X..X     '
	DB	'     -  X...X  -         X...X         -  X..X           X..X'
	DB	'  -                  XX           -   X.X   -          X.X   '
	DB	'       - X...XXXXXXXXXXXXX...X -           ------------      '
	DB	'  -    X    -           X           -X.....................X-'
	DB	'                               ------------------------------'
	DB	'----- X...XXXXXXXXXXXXX...X -                                '
	DB	'                                 -  X..X           X..X  -   '
	DB	'                                                             '
	DB	' -   X.X           X.X   -                                   '
	DB	'                              -    XX           XX    -      '
	DB	'     ', 00H
	ORG $+1
_nk_default_color_style DB 0afH
	DB	0afH
	DB	0afH
	DB	0ffH
	DB	02dH
	DB	02dH
	DB	02dH
	DB	0ffH
	DB	028H
	DB	028H
	DB	028H
	DB	0ffH
	DB	041H
	DB	041H
	DB	041H
	DB	0ffH
	DB	032H
	DB	032H
	DB	032H
	DB	0ffH
	DB	028H
	DB	028H
	DB	028H
	DB	0ffH
	DB	023H
	DB	023H
	DB	023H
	DB	0ffH
	DB	064H
	DB	064H
	DB	064H
	DB	0ffH
	DB	078H
	DB	078H
	DB	078H
	DB	0ffH
	DB	02dH
	DB	02dH
	DB	02dH
	DB	0ffH
	DB	02dH
	DB	02dH
	DB	02dH
	DB	0ffH
	DB	023H
	DB	023H
	DB	023H
	DB	0ffH
	DB	026H
	DB	026H
	DB	026H
	DB	0ffH
	DB	064H
	DB	064H
	DB	064H
	DB	0ffH
	DB	078H
	DB	078H
	DB	078H
	DB	0ffH
	DB	096H
	DB	096H
	DB	096H
	DB	0ffH
	DB	026H
	DB	026H
	DB	026H
	DB	0ffH
	DB	026H
	DB	026H
	DB	026H
	DB	0ffH
	DB	0afH
	DB	0afH
	DB	0afH
	DB	0ffH
	DB	02dH
	DB	02dH
	DB	02dH
	DB	0ffH
	DB	078H
	DB	078H
	DB	078H
	DB	0ffH
	DB	02dH
	DB	02dH
	DB	02dH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	0ffH
	DB	028H
	DB	028H
	DB	028H
	DB	0ffH
	DB	064H
	DB	064H
	DB	064H
	DB	0ffH
	DB	078H
	DB	078H
	DB	078H
	DB	0ffH
	DB	096H
	DB	096H
	DB	096H
	DB	0ffH
	DB	028H
	DB	028H
	DB	028H
	DB	0ffH
?pnt_align@?1??nk_draw_list_fill_poly_convex@@9@9 DD 04H ; `nk_draw_list_fill_poly_convex'::`2'::pnt_align
?pnt_size@?1??nk_draw_list_fill_poly_convex@@9@9 DD 08H	; `nk_draw_list_fill_poly_convex'::`2'::pnt_size
_nk_utfbyte DB	080H
	DB	00H
	DB	0c0H
	DB	0e0H
	DB	0f0H
	ORG $+3
_nk_utfmask DB	0c0H
	DB	080H
	DB	0e0H
	DB	0f0H
	DB	0f8H
	ORG $+3
_nk_utfmin DD	00H
	DD	00H
	DD	080H
	DD	0800H
	DD	010000H
_nk_utfmax DD	010ffffH
	DD	07fH
	DD	07ffH
	DD	0ffffH
	DD	010ffffH
?null_rect@?1??nk_contextual_begin@@9@9 DD 000000000r ; 0 ; `nk_contextual_begin'::`2'::null_rect
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
?vertex_layout@?3??nk_sdl_render@@9@9 DD 00H		; `nk_sdl_render'::`4'::vertex_layout
	DD	06H
	DD	00H
	DD	02H
	DD	06H
	DD	08H
	DD	01H
	DD	0bH
	DD	010H
	DD	03H
	DD	013H
	DD	00H
?nk_cursor_data@?5??nk_font_atlas_bake@@9@9 DD 000000000r ; 0 ; `nk_font_atlas_bake'::`6'::nk_cursor_data
	DD	040400000r			; 3
	DD	041400000r			; 12
	DD	041980000r			; 19
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	041500000r			; 13
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	041800000r			; 16
	DD	040800000r			; 4
	DD	041000000r			; 8
	DD	041f80000r			; 31
	DD	000000000r			; 0
	DD	041b80000r			; 23
	DD	041b80000r			; 23
	DD	041300000r			; 11
	DD	041300000r			; 11
	DD	041a80000r			; 21
	DD	000000000r			; 0
	DD	041100000r			; 9
	DD	041b80000r			; 23
	DD	040a00000r			; 5
	DD	041300000r			; 11
	DD	0425c0000r			; 55
	DD	041900000r			; 18
	DD	041b80000r			; 23
	DD	041100000r			; 9
	DD	041300000r			; 11
	DD	040a00000r			; 5
	DD	042920000r			; 73
	DD	000000000r			; 0
	DD	041880000r			; 17
	DD	041880000r			; 17
	DD	041100000r			; 9
	DD	041100000r			; 9
	DD	0425c0000r			; 55
	DD	000000000r			; 0
	DD	041880000r			; 17
	DD	041880000r			; 17
	DD	041100000r			; 9
	DD	041100000r			; 9
_nk_rect_align DD 04H
_nk_range_align DD 04H
_nk_char_align DD 04H
_nk_build_align DD 04H
_nk_baker_align DD 04H
?ranges@?1??nk_font_default_glyph_ranges@@9@9 DD 020H	; `nk_font_default_glyph_ranges'::`2'::ranges
	DD	0ffH
	DD	00H
?ranges@?1??nk_font_chinese_glyph_ranges@@9@9 DD 020H	; `nk_font_chinese_glyph_ranges'::`2'::ranges
	DD	0ffH
	DD	03000H
	DD	030ffH
	DD	031f0H
	DD	031ffH
	DD	0ff00H
	DD	0ffefH
	DD	04e00H
	DD	09fafH
	DD	00H
?ranges@?1??nk_font_cyrillic_glyph_ranges@@9@9 DD 020H	; `nk_font_cyrillic_glyph_ranges'::`2'::ranges
	DD	0ffH
	DD	0400H
	DD	052fH
	DD	02de0H
	DD	02dffH
	DD	0a640H
	DD	0a69fH
	DD	00H
?ranges@?1??nk_font_korean_glyph_ranges@@9@9 DD 020H	; `nk_font_korean_glyph_ranges'::`2'::ranges
	DD	0ffH
	DD	03131H
	DD	03163H
	DD	0ac00H
	DD	0d79dH
	DD	00H
?point_align@?1??nk_draw_list_alloc_path@@9@9 DD 04H	; `nk_draw_list_alloc_path'::`2'::point_align
?point_size@?1??nk_draw_list_alloc_path@@9@9 DD 08H	; `nk_draw_list_alloc_path'::`2'::point_size
?max_height@?1??nk_font_bake_pack@@9@9 DD 08000H	; `nk_font_bake_pack'::`2'::max_height
?cmd_align@?1??nk_draw_list_push_command@@9@9 DD 04H	; `nk_draw_list_push_command'::`2'::cmd_align
?cmd_size@?1??nk_draw_list_push_command@@9@9 DD 018H	; `nk_draw_list_push_command'::`2'::cmd_size
?elem_align@?1??nk_draw_list_alloc_elements@@9@9 DD 02H	; `nk_draw_list_alloc_elements'::`2'::elem_align
?elem_size@?1??nk_draw_list_alloc_elements@@9@9 DD 02H	; `nk_draw_list_alloc_elements'::`2'::elem_size
?s@?1??nk_color_f@@9@9 DD 03b808081r		; 0.00392157 ; `nk_color_f'::`2'::s
_nk_red	DB	0ffH
	DB	00H
	DB	00H
	DB	0ffH
?s@?1??nk_color_d@@9@9 DQ 03f70101010101010r	; 0.00392157 ; `nk_color_d'::`2'::s
_nk_null_rect DD 0c6000000r			; -8192
	DD	0c6000000r			; -8192
	DD	046800000r			; 16384
	DD	046800000r			; 16384
_nk_green DB	00H
	DB	0ffH
	DB	00H
	DB	0ffH
_nk_blue DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
_nk_white DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
_nk_black DB	00H
	DB	00H
	DB	00H
	DB	0ffH
_nk_yellow DB	0ffH
	DB	0ffH
	DB	00H
	DB	0ffH
?a0@?1??nk_sin@@9@9 DD 00c780258r		; 1.91059e-031 ; `nk_sin'::`2'::a0
?a1@?1??nk_sin@@9@9 DD 03f801c6er		; 1.00087 ; `nk_sin'::`2'::a1
?size@?4??nk_create_page_element@@9@9 DD 01b0H		; `nk_create_page_element'::`5'::size
?a2@?1??nk_sin@@9@9 DD 0bc46b2e5r		; -0.0121276 ; `nk_sin'::`2'::a2
?a3@?1??nk_sin@@9@9 DD 0be0d6486r		; -0.138079 ; `nk_sin'::`2'::a3
?align@?4??nk_create_page_element@@9@9 DD 04H		; `nk_create_page_element'::`5'::align
?a4@?1??nk_sin@@9@9 DD 0bcdb0412r		; -0.0267353 ; `nk_sin'::`2'::a4
?a5@?1??nk_sin@@9@9 DD 03caa6a57r		; 0.0208027 ; `nk_sin'::`2'::a5
?a6@?1??nk_sin@@9@9 DD 0bb473a13r		; -0.00303996 ; `nk_sin'::`2'::a6
?a7@?1??nk_sin@@9@9 DD 03910f359r		; 0.000138236 ; `nk_sin'::`2'::a7
?a0@?1??nk_cos@@9@9 DD 03f804e2fr		; 1.00239 ; `nk_cos'::`2'::a0
?a1@?1??nk_cos@@9@9 DD 0bd1c6f36r		; -0.038192 ; `nk_cos'::`2'::a1
?a2@?1??nk_cos@@9@9 DD 0bec9ec7br		; -0.394382 ; `nk_cos'::`2'::a2
?a3@?1??nk_cos@@9@9 DD 0bdf1f042r		; -0.118134 ; `nk_cos'::`2'::a3
?a4@?1??nk_cos@@9@9 DD 03ddb63b9r		; 0.107124 ; `nk_cos'::`2'::a4
?a5@?1??nk_cos@@9@9 DD 0bc98e4a6r		; -0.0186637 ; `nk_cos'::`2'::a5
?a6@?1??nk_cos@@9@9 DD 03a81c79er		; 0.000990141 ; `nk_cos'::`2'::a6
?a7@?1??nk_cos@@9@9 DD 0a96b8c59r		; -5.23022e-014 ; `nk_cos'::`2'::a7
?black@?1??nk_draw_color_picker@@9@9 DB 00H		; `nk_draw_color_picker'::`2'::black
	DB	00H
	DB	00H
	DB	0ffH
?white@?1??nk_draw_color_picker@@9@9 DB 0ffH		; `nk_draw_color_picker'::`2'::white
	DB	0ffH
	DB	0ffH
	DB	0ffH
?black_trans@?1??nk_draw_color_picker@@9@9 DB 00H	; `nk_draw_color_picker'::`2'::black_trans
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
PUBLIC	_SDL_main
PUBLIC	_DirFiles
PUBLIC	_nk_init_default
PUBLIC	_nk_init_fixed
PUBLIC	_nk_init
PUBLIC	_nk_init_custom
PUBLIC	_nk_clear
PUBLIC	_nk_free
PUBLIC	_nk_input_begin
PUBLIC	_nk_input_motion
PUBLIC	_nk_input_key
PUBLIC	_nk_input_button
PUBLIC	_nk_input_scroll
PUBLIC	_nk_input_char
PUBLIC	_nk_input_glyph
PUBLIC	_nk_input_unicode
PUBLIC	_nk_input_end
PUBLIC	_nk__begin
PUBLIC	_nk__next
PUBLIC	_nk_convert
PUBLIC	_nk__draw_begin
PUBLIC	_nk__draw_end
PUBLIC	_nk__draw_next
PUBLIC	_nk_begin
PUBLIC	_nk_begin_titled
PUBLIC	_nk_end
PUBLIC	_nk_window_find
PUBLIC	_nk_window_get_bounds
PUBLIC	_nk_window_get_position
PUBLIC	_nk_window_get_size
PUBLIC	_nk_window_get_width
PUBLIC	_nk_window_get_height
PUBLIC	_nk_window_get_panel
PUBLIC	_nk_window_get_content_region
PUBLIC	_nk_window_get_content_region_min
PUBLIC	_nk_window_get_content_region_max
PUBLIC	_nk_window_get_content_region_size
PUBLIC	_nk_window_get_canvas
PUBLIC	_nk_window_has_focus
PUBLIC	_nk_window_is_collapsed
PUBLIC	_nk_window_is_closed
PUBLIC	_nk_window_is_hidden
PUBLIC	_nk_window_is_active
PUBLIC	_nk_window_is_hovered
PUBLIC	_nk_window_is_any_hovered
PUBLIC	_nk_item_is_any_active
PUBLIC	_nk_window_set_bounds
PUBLIC	_nk_window_set_position
PUBLIC	_nk_window_set_size
PUBLIC	_nk_window_set_focus
PUBLIC	_nk_window_close
PUBLIC	_nk_window_collapse
PUBLIC	_nk_window_collapse_if
PUBLIC	_nk_window_show
PUBLIC	_nk_window_show_if
PUBLIC	_nk_layout_set_min_row_height
PUBLIC	_nk_layout_reset_min_row_height
PUBLIC	_nk_layout_widget_bounds
PUBLIC	_nk_layout_ratio_from_pixel
PUBLIC	_nk_layout_row_dynamic
PUBLIC	_nk_layout_row_static
PUBLIC	_nk_layout_row_begin
PUBLIC	_nk_layout_row_push
PUBLIC	_nk_layout_row_end
PUBLIC	_nk_layout_row
PUBLIC	_nk_layout_row_template_begin
PUBLIC	_nk_layout_row_template_push_dynamic
PUBLIC	_nk_layout_row_template_push_variable
PUBLIC	_nk_layout_row_template_push_static
PUBLIC	_nk_layout_row_template_end
PUBLIC	_nk_layout_space_begin
PUBLIC	_nk_layout_space_push
PUBLIC	_nk_layout_space_end
PUBLIC	_nk_layout_space_bounds
PUBLIC	_nk_layout_space_to_screen
PUBLIC	_nk_layout_space_to_local
PUBLIC	_nk_layout_space_rect_to_screen
PUBLIC	_nk_layout_space_rect_to_local
PUBLIC	_nk_group_begin
PUBLIC	_nk_group_scrolled_offset_begin
PUBLIC	_nk_group_scrolled_begin
PUBLIC	_nk_group_scrolled_end
PUBLIC	_nk_group_end
PUBLIC	_nk_list_view_begin
PUBLIC	_nk_list_view_end
PUBLIC	_nk_tree_push_hashed
PUBLIC	_nk_tree_image_push_hashed
PUBLIC	_nk_tree_pop
PUBLIC	_nk_tree_state_push
PUBLIC	_nk_tree_state_image_push
PUBLIC	_nk_tree_state_pop
PUBLIC	_nk_widget
PUBLIC	_nk_widget_fitting
PUBLIC	_nk_widget_bounds
PUBLIC	_nk_widget_position
PUBLIC	_nk_widget_size
PUBLIC	_nk_widget_width
PUBLIC	_nk_widget_height
PUBLIC	_nk_widget_is_hovered
PUBLIC	_nk_widget_is_mouse_clicked
PUBLIC	_nk_widget_has_mouse_click_down
PUBLIC	_nk_spacing
PUBLIC	_nk_text
PUBLIC	_nk_text_colored
PUBLIC	_nk_text_wrap
PUBLIC	_nk_text_wrap_colored
PUBLIC	_nk_label
PUBLIC	_nk_label_colored
PUBLIC	_nk_label_wrap
PUBLIC	_nk_label_colored_wrap
PUBLIC	_nk_image
PUBLIC	_nk_labelf
PUBLIC	_nk_labelf_colored
PUBLIC	_nk_labelf_wrap
PUBLIC	_nk_labelf_colored_wrap
PUBLIC	_nk_value_bool
PUBLIC	_nk_value_int
PUBLIC	_nk_value_uint
PUBLIC	_nk_value_float
PUBLIC	_nk_value_color_byte
PUBLIC	_nk_value_color_float
PUBLIC	_nk_value_color_hex
PUBLIC	_nk_button_text
PUBLIC	_nk_button_label
PUBLIC	_nk_button_color
PUBLIC	_nk_button_symbol
PUBLIC	_nk_button_image
PUBLIC	_nk_button_symbol_label
PUBLIC	_nk_button_symbol_text
PUBLIC	_nk_button_image_label
PUBLIC	_nk_button_image_text
PUBLIC	_nk_button_text_styled
PUBLIC	_nk_button_label_styled
PUBLIC	_nk_button_symbol_styled
PUBLIC	_nk_button_image_styled
PUBLIC	_nk_button_symbol_text_styled
PUBLIC	_nk_button_symbol_label_styled
PUBLIC	_nk_button_image_label_styled
PUBLIC	_nk_button_image_text_styled
PUBLIC	_nk_button_set_behavior
PUBLIC	_nk_button_push_behavior
PUBLIC	_nk_button_pop_behavior
PUBLIC	_nk_check_label
PUBLIC	_nk_check_text
PUBLIC	_nk_check_flags_label
PUBLIC	_nk_check_flags_text
PUBLIC	_nk_checkbox_label
PUBLIC	_nk_checkbox_text
PUBLIC	_nk_checkbox_flags_label
PUBLIC	_nk_checkbox_flags_text
PUBLIC	_nk_radio_label
PUBLIC	_nk_radio_text
PUBLIC	_nk_option_label
PUBLIC	_nk_option_text
PUBLIC	_nk_selectable_label
PUBLIC	_nk_selectable_text
PUBLIC	_nk_selectable_image_label
PUBLIC	_nk_selectable_image_text
PUBLIC	_nk_select_label
PUBLIC	_nk_select_text
PUBLIC	_nk_select_image_label
PUBLIC	_nk_select_image_text
PUBLIC	_nk_slide_float
PUBLIC	_nk_slide_int
PUBLIC	_nk_slider_float
PUBLIC	_nk_slider_int
PUBLIC	_nk_progress
PUBLIC	_nk_prog
PUBLIC	_nk_color_picker
PUBLIC	_nk_color_pick
PUBLIC	_nk_property_int
PUBLIC	_nk_property_float
PUBLIC	_nk_property_double
PUBLIC	_nk_propertyi
PUBLIC	_nk_propertyf
PUBLIC	_nk_propertyd
PUBLIC	_nk_edit_string
PUBLIC	_nk_edit_string_zero_terminated
PUBLIC	_nk_edit_buffer
PUBLIC	_nk_edit_focus
PUBLIC	_nk_edit_unfocus
PUBLIC	_nk_chart_begin
PUBLIC	_nk_chart_begin_colored
PUBLIC	_nk_chart_add_slot
PUBLIC	_nk_chart_add_slot_colored
PUBLIC	_nk_chart_push
PUBLIC	_nk_chart_push_slot
PUBLIC	_nk_chart_end
PUBLIC	_nk_plot
PUBLIC	_nk_plot_function
PUBLIC	_nk_popup_begin
PUBLIC	_nk_popup_close
PUBLIC	_nk_popup_end
PUBLIC	_nk_combo
PUBLIC	_nk_combo_separator
PUBLIC	_nk_combo_string
PUBLIC	_nk_combo_callback
PUBLIC	_nk_combobox
PUBLIC	_nk_combobox_string
PUBLIC	_nk_combobox_separator
PUBLIC	_nk_combobox_callback
PUBLIC	_nk_combo_begin_text
PUBLIC	_nk_combo_begin_label
PUBLIC	_nk_combo_begin_color
PUBLIC	_nk_combo_begin_symbol
PUBLIC	_nk_combo_begin_symbol_label
PUBLIC	_nk_combo_begin_symbol_text
PUBLIC	_nk_combo_begin_image
PUBLIC	_nk_combo_begin_image_label
PUBLIC	_nk_combo_begin_image_text
PUBLIC	_nk_combo_item_label
PUBLIC	_nk_combo_item_text
PUBLIC	_nk_combo_item_image_label
PUBLIC	_nk_combo_item_image_text
PUBLIC	_nk_combo_item_symbol_label
PUBLIC	_nk_combo_item_symbol_text
PUBLIC	_nk_combo_close
PUBLIC	_nk_combo_end
PUBLIC	_nk_contextual_begin
PUBLIC	_nk_contextual_item_text
PUBLIC	_nk_contextual_item_label
PUBLIC	_nk_contextual_item_image_label
PUBLIC	_nk_contextual_item_image_text
PUBLIC	_nk_contextual_item_symbol_label
PUBLIC	_nk_contextual_item_symbol_text
PUBLIC	_nk_contextual_close
PUBLIC	_nk_contextual_end
PUBLIC	_nk_tooltip
PUBLIC	_nk_tooltip_begin
PUBLIC	_nk_tooltip_end
PUBLIC	_nk_menubar_begin
PUBLIC	_nk_menubar_end
PUBLIC	_nk_menu_begin_text
PUBLIC	_nk_menu_begin_label
PUBLIC	_nk_menu_begin_image
PUBLIC	_nk_menu_begin_image_text
PUBLIC	_nk_menu_begin_image_label
PUBLIC	_nk_menu_begin_symbol
PUBLIC	_nk_menu_begin_symbol_text
PUBLIC	_nk_menu_begin_symbol_label
PUBLIC	_nk_menu_item_text
PUBLIC	_nk_menu_item_label
PUBLIC	_nk_menu_item_image_label
PUBLIC	_nk_menu_item_image_text
PUBLIC	_nk_menu_item_symbol_text
PUBLIC	_nk_menu_item_symbol_label
PUBLIC	_nk_menu_close
PUBLIC	_nk_menu_end
PUBLIC	_nk_style_default
PUBLIC	_nk_style_from_table
PUBLIC	_nk_style_load_cursor
PUBLIC	_nk_style_load_all_cursors
PUBLIC	_nk_style_get_color_by_name
PUBLIC	_nk_style_set_font
PUBLIC	_nk_style_set_cursor
PUBLIC	_nk_style_show_cursor
PUBLIC	_nk_style_hide_cursor
PUBLIC	_nk_style_push_font
PUBLIC	_nk_style_push_float
PUBLIC	_nk_style_push_vec2
PUBLIC	_nk_style_push_style_item
PUBLIC	_nk_style_push_flags
PUBLIC	_nk_style_push_color
PUBLIC	_nk_style_pop_font
PUBLIC	_nk_style_pop_float
PUBLIC	_nk_style_pop_vec2
PUBLIC	_nk_style_pop_style_item
PUBLIC	_nk_style_pop_flags
PUBLIC	_nk_style_pop_color
PUBLIC	_nk_rgb
PUBLIC	_nk_rgb_iv
PUBLIC	_nk_rgb_bv
PUBLIC	_nk_rgb_f
PUBLIC	_nk_rgb_fv
PUBLIC	_nk_rgb_hex
PUBLIC	_nk_rgba
PUBLIC	_nk_rgba_u32
PUBLIC	_nk_rgba_iv
PUBLIC	_nk_rgba_bv
PUBLIC	_nk_rgba_f
PUBLIC	_nk_rgba_fv
PUBLIC	_nk_rgba_hex
PUBLIC	_nk_hsv
PUBLIC	_nk_hsv_iv
PUBLIC	_nk_hsv_bv
PUBLIC	_nk_hsv_f
PUBLIC	_nk_hsv_fv
PUBLIC	_nk_hsva
PUBLIC	_nk_hsva_iv
PUBLIC	_nk_hsva_bv
PUBLIC	_nk_hsva_f
PUBLIC	_nk_hsva_fv
PUBLIC	_nk_color_f
PUBLIC	_nk_color_fv
PUBLIC	_nk_color_d
PUBLIC	_nk_color_dv
PUBLIC	_nk_color_u32
PUBLIC	_nk_color_hex_rgba
PUBLIC	_nk_color_hex_rgb
PUBLIC	_nk_color_hsv_i
PUBLIC	_nk_color_hsv_b
PUBLIC	_nk_color_hsv_iv
PUBLIC	_nk_color_hsv_bv
PUBLIC	_nk_color_hsv_f
PUBLIC	_nk_color_hsv_fv
PUBLIC	_nk_color_hsva_i
PUBLIC	_nk_color_hsva_b
PUBLIC	_nk_color_hsva_iv
PUBLIC	_nk_color_hsva_bv
PUBLIC	_nk_color_hsva_f
PUBLIC	_nk_color_hsva_fv
PUBLIC	_nk_handle_ptr
PUBLIC	_nk_handle_id
PUBLIC	_nk_image_handle
PUBLIC	_nk_image_ptr
PUBLIC	_nk_image_id
PUBLIC	_nk_image_is_subimage
PUBLIC	_nk_subimage_ptr
PUBLIC	_nk_subimage_id
PUBLIC	_nk_subimage_handle
PUBLIC	_nk_murmur_hash
PUBLIC	_nk_triangle_from_direction
PUBLIC	_nk_vec2
PUBLIC	_nk_vec2i
PUBLIC	_nk_vec2v
PUBLIC	_nk_vec2iv
PUBLIC	_nk_get_null_rect
PUBLIC	_nk_rect
PUBLIC	_nk_recti
PUBLIC	_nk_recta
PUBLIC	_nk_rectv
PUBLIC	_nk_rectiv
PUBLIC	_nk_rect_pos
PUBLIC	_nk_rect_size
PUBLIC	_nk_strlen
PUBLIC	_nk_stricmp
PUBLIC	_nk_stricmpn
PUBLIC	_nk_strtoi
PUBLIC	_nk_strtof
PUBLIC	_nk_strtod
PUBLIC	_nk_strfilter
PUBLIC	_nk_strmatch_fuzzy_string
PUBLIC	_nk_strmatch_fuzzy_text
PUBLIC	_nk_utf_decode
PUBLIC	_nk_utf_encode
PUBLIC	_nk_utf_len
PUBLIC	_nk_utf_at
PUBLIC	_nk_font_default_glyph_ranges
PUBLIC	_nk_font_chinese_glyph_ranges
PUBLIC	_nk_font_cyrillic_glyph_ranges
PUBLIC	_nk_font_korean_glyph_ranges
PUBLIC	_nk_font_atlas_init_default
PUBLIC	_nk_font_atlas_init
PUBLIC	_nk_font_atlas_init_custom
PUBLIC	_nk_font_atlas_begin
PUBLIC	_nk_font_config
PUBLIC	_nk_font_atlas_add
PUBLIC	_nk_font_atlas_add_default
PUBLIC	_nk_font_atlas_add_from_memory
PUBLIC	_nk_font_atlas_add_from_file
PUBLIC	_nk_font_atlas_add_compressed
PUBLIC	_nk_font_atlas_add_compressed_base85
PUBLIC	_nk_font_atlas_bake
PUBLIC	_nk_font_atlas_end
PUBLIC	_nk_font_find_glyph
PUBLIC	_nk_font_atlas_cleanup
PUBLIC	_nk_font_atlas_clear
PUBLIC	_nk_buffer_init_default
PUBLIC	_nk_buffer_init
PUBLIC	_nk_buffer_init_fixed
PUBLIC	_nk_buffer_info
PUBLIC	_nk_buffer_push
PUBLIC	_nk_buffer_mark
PUBLIC	_nk_buffer_reset
PUBLIC	_nk_buffer_clear
PUBLIC	_nk_buffer_free
PUBLIC	_nk_buffer_memory
PUBLIC	_nk_buffer_memory_const
PUBLIC	_nk_buffer_total
PUBLIC	_nk_str_init_default
PUBLIC	_nk_str_init
PUBLIC	_nk_str_init_fixed
PUBLIC	_nk_str_clear
PUBLIC	_nk_str_free
PUBLIC	_nk_str_append_text_char
PUBLIC	_nk_str_append_str_char
PUBLIC	_nk_str_append_text_utf8
PUBLIC	_nk_str_append_str_utf8
PUBLIC	_nk_str_append_text_runes
PUBLIC	_nk_str_append_str_runes
PUBLIC	_nk_str_insert_at_char
PUBLIC	_nk_str_insert_at_rune
PUBLIC	_nk_str_insert_text_char
PUBLIC	_nk_str_insert_str_char
PUBLIC	_nk_str_insert_text_utf8
PUBLIC	_nk_str_insert_str_utf8
PUBLIC	_nk_str_insert_text_runes
PUBLIC	_nk_str_insert_str_runes
PUBLIC	_nk_str_remove_chars
PUBLIC	_nk_str_remove_runes
PUBLIC	_nk_str_delete_chars
PUBLIC	_nk_str_delete_runes
PUBLIC	_nk_str_at_char
PUBLIC	_nk_str_at_rune
PUBLIC	_nk_str_rune_at
PUBLIC	_nk_str_at_char_const
PUBLIC	_nk_str_at_const
PUBLIC	_nk_str_get
PUBLIC	_nk_str_get_const
PUBLIC	_nk_str_len
PUBLIC	_nk_str_len_char
PUBLIC	_nk_filter_default
PUBLIC	_nk_filter_ascii
PUBLIC	_nk_filter_float
PUBLIC	_nk_filter_decimal
PUBLIC	_nk_filter_hex
PUBLIC	_nk_filter_oct
PUBLIC	_nk_filter_binary
PUBLIC	_nk_textedit_init_default
PUBLIC	_nk_textedit_init
PUBLIC	_nk_textedit_init_fixed
PUBLIC	_nk_textedit_free
PUBLIC	_nk_textedit_text
PUBLIC	_nk_textedit_delete
PUBLIC	_nk_textedit_delete_selection
PUBLIC	_nk_textedit_select_all
PUBLIC	_nk_textedit_cut
PUBLIC	_nk_textedit_paste
PUBLIC	_nk_textedit_undo
PUBLIC	_nk_textedit_redo
PUBLIC	_nk_stroke_line
PUBLIC	_nk_stroke_curve
PUBLIC	_nk_stroke_rect
PUBLIC	_nk_stroke_circle
PUBLIC	_nk_stroke_arc
PUBLIC	_nk_stroke_triangle
PUBLIC	_nk_stroke_polyline
PUBLIC	_nk_stroke_polygon
PUBLIC	_nk_fill_rect
PUBLIC	_nk_fill_rect_multi_color
PUBLIC	_nk_fill_circle
PUBLIC	_nk_fill_arc
PUBLIC	_nk_fill_triangle
PUBLIC	_nk_fill_polygon
PUBLIC	_nk_draw_image
PUBLIC	_nk_draw_text
PUBLIC	_nk_push_scissor
PUBLIC	_nk_push_custom
PUBLIC	_nk_input_has_mouse_click
PUBLIC	_nk_input_has_mouse_click_in_rect
PUBLIC	_nk_input_has_mouse_click_down_in_rect
PUBLIC	_nk_input_is_mouse_click_in_rect
PUBLIC	_nk_input_is_mouse_click_down_in_rect
PUBLIC	_nk_input_any_mouse_click_in_rect
PUBLIC	_nk_input_is_mouse_prev_hovering_rect
PUBLIC	_nk_input_is_mouse_hovering_rect
PUBLIC	_nk_input_mouse_clicked
PUBLIC	_nk_input_is_mouse_down
PUBLIC	_nk_input_is_mouse_pressed
PUBLIC	_nk_input_is_mouse_released
PUBLIC	_nk_input_is_key_pressed
PUBLIC	_nk_input_is_key_released
PUBLIC	_nk_input_is_key_down
PUBLIC	_nk_draw_list_init
PUBLIC	_nk_draw_list_setup
PUBLIC	_nk_draw_list_clear
PUBLIC	_nk__draw_list_begin
PUBLIC	_nk__draw_list_next
PUBLIC	_nk__draw_list_end
PUBLIC	_nk_draw_list_path_clear
PUBLIC	_nk_draw_list_path_line_to
PUBLIC	_nk_draw_list_path_arc_to_fast
PUBLIC	_nk_draw_list_path_arc_to
PUBLIC	_nk_draw_list_path_rect_to
PUBLIC	_nk_draw_list_path_curve_to
PUBLIC	_nk_draw_list_path_fill
PUBLIC	_nk_draw_list_path_stroke
PUBLIC	_nk_draw_list_stroke_line
PUBLIC	_nk_draw_list_stroke_rect
PUBLIC	_nk_draw_list_stroke_triangle
PUBLIC	_nk_draw_list_stroke_circle
PUBLIC	_nk_draw_list_stroke_curve
PUBLIC	_nk_draw_list_stroke_poly_line
PUBLIC	_nk_draw_list_fill_rect
PUBLIC	_nk_draw_list_fill_rect_multi_color
PUBLIC	_nk_draw_list_fill_triangle
PUBLIC	_nk_draw_list_fill_circle
PUBLIC	_nk_draw_list_fill_poly_convex
PUBLIC	_nk_draw_list_add_image
PUBLIC	_nk_draw_list_add_text
PUBLIC	_nk_style_item_image
PUBLIC	_nk_style_item_color
PUBLIC	_nk_style_item_hide
PUBLIC	_nk_sdl_init
PUBLIC	_nk_sdl_font_stash_begin
PUBLIC	_nk_sdl_font_stash_end
PUBLIC	_nk_sdl_handle_event
PUBLIC	_nk_sdl_render
PUBLIC	_nk_sdl_shutdown
PUBLIC	_nk_sdl_device_destroy
PUBLIC	_nk_sdl_device_create
PUBLIC	_WriteCFG
PUBLIC	_LoadCFG
PUBLIC	_ColorPicker
PUBLIC	_FileBrowser
PUBLIC	_NewMGGBox
PUBLIC	_MenuBar
PUBLIC	_SpriteListSelection
PUBLIC	_LeftPannel
PUBLIC	_Canvas
PUBLIC	_AnimBox
PUBLIC	?__LINE__Var@?1??nk_zero@@9@9@ddf8d5d8		; `nk_zero'::`2'::__LINE__Var
PUBLIC	??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@ ; `string'
PUBLIC	??_C@_17GHAIJGMG@?$AAp?$AAt?$AAr?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_strlen@@9@9			; `nk_strlen'::`2'::__LINE__Var
PUBLIC	??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_strtoi@@9@9			; `nk_strtoi'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_strtod@@9@9			; `nk_strtod'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_stricmpn@@9@9		; `nk_stricmpn'::`2'::__LINE__Var
PUBLIC	??_C@_1O@OOEGIONJ@?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_strmatch_fuzzy_text@@9@9	; `nk_strmatch_fuzzy_text'::`2'::__LINE__Var
PUBLIC	??_C@_1BA@GHEKA@?$AAp?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_dtoa@@9@9@ddf8d5d8		; `nk_dtoa'::`2'::__LINE__Var
PUBLIC	??_C@_13KHDBCPJB@?$AAs?$AA?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??nk_strfmt@@9@9@ddf8d5d8	; `nk_strfmt'::`2'::__LINE__Var
PUBLIC	??_C@_17ENLBLDPN@?$AAb?$AAu?$AAf?$AA?$AA@	; `string'
PUBLIC	??_C@_1BC@JBKPFABB@?$AAb?$AAu?$AAf?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_file_load@@9@9@ddf8d5d8	; `nk_file_load'::`2'::__LINE__Var
PUBLIC	??_C@_19JIFMCCAP@?$AAp?$AAa?$AAt?$AAh?$AA?$AA@	; `string'
PUBLIC	??_C@_17JDHLKIIP@?$AAs?$AAi?$AAz?$AA?$AA@	; `string'
PUBLIC	??_C@_1M@KLHDKNJP@?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	?__LINE__Var@?1??nk_image_ptr@@9@9		; `nk_image_ptr'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_image_is_subimage@@9@9	; `nk_image_is_subimage'::`2'::__LINE__Var
PUBLIC	??_C@_17EHOCEIDI@?$AAi?$AAm?$AAg?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_unify@@9@9@ddf8d5d8		; `nk_unify'::`2'::__LINE__Var
PUBLIC	??_C@_13FNCBLAIF@?$AAa?$AA?$AA@			; `string'
PUBLIC	??_C@_19OFCFGDAA@?$AAc?$AAl?$AAi?$AAp?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_triangle_from_direction@@9@9 ; `nk_triangle_from_direction'::`2'::__LINE__Var
PUBLIC	??_C@_1O@PHBBLDEN@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_utf_validate@@9@9@ddf8d5d8	; `nk_utf_validate'::`2'::__LINE__Var
PUBLIC	??_C@_13ICFKHAEN@?$AAu?$AA?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??nk_utf_decode_byte@@9@9@ddf8d5d8 ; `nk_utf_decode_byte'::`2'::__LINE__Var
PUBLIC	??_C@_13JIJFJIGK@?$AAi?$AA?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??nk_utf_decode@@9@9		; `nk_utf_decode'::`2'::__LINE__Var
PUBLIC	??_C@_13PHCIHIAO@?$AAc?$AA?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??nk_utf_len@@9@9		; `nk_utf_len'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_utf_at@@9@9			; `nk_utf_at'::`2'::__LINE__Var
PUBLIC	??_C@_1O@KMGMBAKN@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@OIEABBIM@?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_17JOFJILLL@?$AAl?$AAe?$AAn?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_buffer_init@@9@9		; `nk_buffer_init'::`2'::__LINE__Var
PUBLIC	??_C@_13EPJEBPGL@?$AAb?$AA?$AA@			; `string'
PUBLIC	??_C@_1BK@GKDKIPLP@?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_buffer_init_fixed@@9@9	; `nk_buffer_init_fixed'::`2'::__LINE__Var
PUBLIC	??_C@_13BHPHAPDN@?$AAm?$AA?$AA@			; `string'
PUBLIC	??_C@_19GIOODLBE@?$AAs?$AAi?$AAz?$AAe?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_buffer_realloc@@9@9@ddf8d5d8 ; `nk_buffer_realloc'::`2'::__LINE__Var
PUBLIC	??_C@_19KEIJKAKM@?$AAt?$AAe?$AAm?$AAp?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_buffer_alloc@@9@9@ddf8d5d8	; `nk_buffer_alloc'::`2'::__LINE__Var
PUBLIC	??_C@_1DM@LCGIFLOD@?$AAb?$AA?9?$AA?$DO?$AAp?$AAo?$AAo?$AAl?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAb?$AA?9?$AA?$DO?$AAp?$AAo?$AAo?$AAl?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_buffer_mark@@9@9		; `nk_buffer_mark'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_buffer_reset@@9@9		; `nk_buffer_reset'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_buffer_clear@@9@9		; `nk_buffer_clear'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_buffer_free@@9@9		; `nk_buffer_free'::`2'::__LINE__Var
PUBLIC	??_C@_1BK@HIMMPAND@?$AAb?$AA?9?$AA?$DO?$AAp?$AAo?$AAo?$AAl?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_buffer_info@@9@9		; `nk_buffer_info'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_buffer_memory@@9@9		; `nk_buffer_memory'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_buffer_memory_const@@9@9	; `nk_buffer_memory_const'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_buffer_total@@9@9		; `nk_buffer_total'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_str_append_text_char@@9@9	; `nk_str_append_text_char'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_str_append_text_runes@@9@9	; `nk_str_append_text_runes'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_str_append_str_runes@@9@9	; `nk_str_append_str_runes'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_str_insert_at_char@@9@9	; `nk_str_insert_at_char'::`2'::__LINE__Var
PUBLIC	??_C@_1BC@OAMMNJJI@?$AAl?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GA@LCICMOEC@?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAp?$AAo?$AAs?$AA?5?$AA?$CL?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAl?$AAe?$AAn?$AA?5?$AA?$CL?$AA?5?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAc?$AAo?$AAp@ ; `string'
PUBLIC	??_C@_1EK@BAOJCPPG@?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAp?$AAo?$AAs?$AA?5?$AA?$CL?$AA?5?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAc?$AAo?$AAp?$AAy?$AAl?$AAe?$AAn?$AA?5?$AA?9?$AA?5?$AA1?$AA?$CJ?$AA?$CJ?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_str_insert_at_rune@@9@9	; `nk_str_insert_at_rune'::`2'::__LINE__Var
PUBLIC	??_C@_19FFPPJJEJ@?$AAc?$AAs?$AAt?$AAr?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_str_insert_text_utf8@@9@9	; `nk_str_insert_text_utf8'::`2'::__LINE__Var
PUBLIC	??_C@_19HIPAKEND@?$AAt?$AAe?$AAx?$AAt?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_str_insert_text_runes@@9@9	; `nk_str_insert_text_runes'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_str_insert_str_runes@@9@9	; `nk_str_insert_str_runes'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_str_remove_chars@@9@9	; `nk_str_remove_chars'::`2'::__LINE__Var
PUBLIC	??_C@_1FG@GHGMCHAP@?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAs?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5?$AA?9?$AA?5?$AA?$CI?$AAi?$AAn?$AAt@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_str_remove_runes@@9@9	; `nk_str_remove_runes'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_str_delete_chars@@9@9	; `nk_str_delete_chars'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_str_delete_runes@@9@9	; `nk_str_delete_runes'::`2'::__LINE__Var
PUBLIC	??_C@_1CI@LFGHEBFL@?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAp?$AAo?$AAs?$AA?5?$AA?$CL?$AA?5?$AAl?$AAe?$AAn?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_str_at_char@@9@9		; `nk_str_at_char'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_str_at_rune@@9@9		; `nk_str_at_rune'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_str_at_char_const@@9@9	; `nk_str_at_char_const'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_str_at_const@@9@9		; `nk_str_at_const'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_str_get@@9@9		; `nk_str_get'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_str_get_const@@9@9		; `nk_str_get_const'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_str_len@@9@9		; `nk_str_len'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_str_len_char@@9@9		; `nk_str_len_char'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_str_clear@@9@9		; `nk_str_clear'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_str_free@@9@9		; `nk_str_free'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_command_buffer_init@@9@9@ddf8d5d8 ; `nk_command_buffer_init'::`2'::__LINE__Var
PUBLIC	??_C@_1O@GHGFHGEN@?$AAc?$AAm?$AAd?$AAb?$AAu?$AAf?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_command_buffer_reset@@9@9@ddf8d5d8 ; `nk_command_buffer_reset'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_command_buffer_push@@9@9@ddf8d5d8 ; `nk_command_buffer_push'::`2'::__LINE__Var
PUBLIC	??_C@_1BA@GCDOPNOB@?$AAb?$AA?9?$AA?$DO?$AAb?$AAa?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_push_scissor@@9@9		; `nk_push_scissor'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_stroke_line@@9@9		; `nk_stroke_line'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_stroke_curve@@9@9		; `nk_stroke_curve'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_stroke_rect@@9@9		; `nk_stroke_rect'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_fill_rect@@9@9		; `nk_fill_rect'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_fill_rect_multi_color@@9@9	; `nk_fill_rect_multi_color'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_fill_circle@@9@9		; `nk_fill_circle'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_fill_arc@@9@9		; `nk_fill_arc'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_stroke_triangle@@9@9	; `nk_stroke_triangle'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_fill_triangle@@9@9		; `nk_fill_triangle'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_stroke_polygon@@9@9		; `nk_stroke_polygon'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_fill_polygon@@9@9		; `nk_fill_polygon'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_stroke_polyline@@9@9	; `nk_stroke_polyline'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_image@@9@9		; `nk_draw_image'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_push_custom@@9@9		; `nk_push_custom'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_text@@9@9		; `nk_draw_text'::`2'::__LINE__Var
PUBLIC	??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_draw_list_init@@9@9		; `nk_draw_list_init'::`2'::__LINE__Var
PUBLIC	??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_draw_list_setup@@9@9	; `nk_draw_list_setup'::`2'::__LINE__Var
PUBLIC	??_C@_1O@HCDMHDPE@?$AAc?$AAa?$AAn?$AAv?$AAa?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@NEJONDGE@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$AA@ ; `string'
PUBLIC	??_C@_19IHKENPKO@?$AAc?$AAm?$AAd?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_1BC@GCIAJMPE@?$AAv?$AAe?$AAr?$AAt?$AAi?$AAc?$AAe?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@KAKDHGPA@?$AAe?$AAl?$AAe?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk__draw_list_begin@@9@9	; `nk__draw_list_begin'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk__draw_list_end@@9@9		; `nk__draw_list_end'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk__draw_list_next@@9@9	; `nk__draw_list_next'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_clear@@9@9	; `nk_draw_list_clear'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_path_last@@9@9@ddf8d5d8 ; `nk_draw_list_path_last'::`2'::__LINE__Var
PUBLIC	??_C@_1CC@DJNGHHKD@?$AAl?$AAi?$AAs?$AAt?$AA?9?$AA?$DO?$AAp?$AAa?$AAt?$AAh?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_draw_list_push_command@@9@9@ddf8d5d8 ; `nk_draw_list_push_command'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_command_last@@9@9@ddf8d5d8 ; `nk_draw_list_command_last'::`2'::__LINE__Var
PUBLIC	??_C@_1CA@CEAIAHJE@?$AAl?$AAi?$AAs?$AAt?$AA?9?$AA?$DO?$AAc?$AAm?$AAd?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_draw_list_add_clip@@9@9@ddf8d5d8 ; `nk_draw_list_add_clip'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_push_image@@9@9@ddf8d5d8 ; `nk_draw_list_push_image'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_alloc_vertices@@9@9@ddf8d5d8 ; `nk_draw_list_alloc_vertices'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_alloc_elements@@9@9@ddf8d5d8 ; `nk_draw_list_alloc_elements'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_vertex_color@@9@9@ddf8d5d8 ; `nk_draw_vertex_color'::`2'::__LINE__Var
PUBLIC	??_C@_1EA@OIHMHNMA@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAF?$AAO?$AAR?$AAM?$AAA?$AAT?$AA_?$AAC?$AAO?$AAL?$AAO?$AAR?$AA_?$AAB?$AAE?$AAG?$AAI?$AAN?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DM@GJOAEAIH@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAF?$AAO?$AAR?$AAM?$AAA?$AAT?$AA_?$AAC?$AAO?$AAL?$AAO?$AAR?$AA_?$AAE?$AAN?$AAD?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FE@DPEENCO@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAv?$AAe?$AAr?$AAt?$AAe?$AAx?$AA?5?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?5?$AAc?$AAo?$AAl?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_draw_vertex_element@@9@9@ddf8d5d8 ; `nk_draw_vertex_element'::`2'::__LINE__Var
PUBLIC	??_C@_1DO@BBEFODIH@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AA?$DM?$AA?5?$AAN?$AAK?$AA_?$AAF?$AAO?$AAR?$AAM?$AAA?$AAT?$AA_?$AAC?$AAO?$AAL?$AAO?$AAR?$AA_?$AAB?$AAE?$AAG?$AAI?$AAN?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EI@PCEGCBPN@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAv?$AAe?$AAr?$AAt?$AAe?$AAx?$AA?5?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?5?$AAf?$AAo?$AAr?$AAm@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_draw_vertex@@9@9@ddf8d5d8	; `nk_draw_vertex'::`2'::__LINE__Var
PUBLIC	??_C@_1DO@JEEJBCGK@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAw?$AAr?$AAo?$AAn?$AAg?$AA?5?$AAe?$AAl?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?5?$AAa?$AAt?$AAt?$AAr?$AAi?$AAb?$AAu?$AAt?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_draw_list_stroke_poly_line@@9@9 ; `nk_draw_list_stroke_poly_line'::`2'::__LINE__Var
PUBLIC	??_C@_1BA@CGFLAEIE@?$AAn?$AAo?$AAr?$AAm?$AAa?$AAl?$AAs?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_draw_list_fill_poly_convex@@9@9 ; `nk_draw_list_fill_poly_convex'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_path_clear@@9@9	; `nk_draw_list_path_clear'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_path_line_to@@9@9	; `nk_draw_list_path_line_to'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_path_arc_to_fast@@9@9 ; `nk_draw_list_path_arc_to_fast'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_path_arc_to@@9@9	; `nk_draw_list_path_arc_to'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_path_rect_to@@9@9	; `nk_draw_list_path_rect_to'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_path_curve_to@@9@9 ; `nk_draw_list_path_curve_to'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_path_fill@@9@9	; `nk_draw_list_path_fill'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_path_stroke@@9@9	; `nk_draw_list_path_stroke'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_stroke_line@@9@9	; `nk_draw_list_stroke_line'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_fill_rect@@9@9	; `nk_draw_list_fill_rect'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_stroke_rect@@9@9	; `nk_draw_list_stroke_rect'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_fill_rect_multi_color@@9@9 ; `nk_draw_list_fill_rect_multi_color'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_fill_triangle@@9@9 ; `nk_draw_list_fill_triangle'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_stroke_triangle@@9@9 ; `nk_draw_list_stroke_triangle'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_fill_circle@@9@9	; `nk_draw_list_fill_circle'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_stroke_circle@@9@9 ; `nk_draw_list_stroke_circle'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_stroke_curve@@9@9	; `nk_draw_list_stroke_curve'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_push_rect_uv@@9@9@ddf8d5d8 ; `nk_draw_list_push_rect_uv'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_add_image@@9@9	; `nk_draw_list_add_image'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_draw_list_add_text@@9@9	; `nk_draw_list_add_text'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_convert@@9@9		; `nk_convert'::`2'::__LINE__Var
PUBLIC	??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@	; `string'
PUBLIC	??_C@_1CM@DMOLPMEO@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAv?$AAe?$AAr?$AAt?$AAe?$AAx?$AA_?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@EPGEFOHG@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAv?$AAe?$AAr?$AAt?$AAe?$AAx?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_rp_init_target@@9@9@ddf8d5d8 ; `nk_rp_init_target'::`2'::__LINE__Var
PUBLIC	??_C@_1EI@NNJKMECF@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAf?$AAf?$AAf?$AAf?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAf@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_rp__skyline_find_min_y@@9@9@ddf8d5d8 ; `nk_rp__skyline_find_min_y'::`2'::__LINE__Var
PUBLIC	??_C@_1BO@KBODBKOH@?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@BDIGDJGP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO?$AA?5?$AAx?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BM@JHJLEEND@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_rp__skyline_find_best_pos@@9@9@ddf8d5d8 ; `nk_rp__skyline_find_best_pos'::`2'::__LINE__Var
PUBLIC	??_C@_1CM@LEHAODMI@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AAc?$AA?9?$AA?$DO?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@MNLKNDNL@?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FA@GPDJEJHP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO?$AA?5?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5@ ; `string'
PUBLIC	??_C@_1BI@JNFMLHFF@?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAb?$AAe?$AAs?$AAt?$AA_?$AAy?$AA?$AA@ ; `string'
PUBLIC	??_C@_04EICJPCEA@cmap?$AA@			; `string'
PUBLIC	??_C@_04DACNFKGE@loca?$AA@			; `string'
PUBLIC	??_C@_04NEODDMOL@head?$AA@			; `string'
PUBLIC	??_C@_04LLIHEPK@glyf?$AA@			; `string'
PUBLIC	??_C@_04FMPHLIKP@hhea?$AA@			; `string'
PUBLIC	??_C@_04ONMNCIMC@hmtx?$AA@			; `string'
PUBLIC	??_C@_04HHMMLDJI@kern?$AA@			; `string'
PUBLIC	??_C@_04KODIGLGG@maxp?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??nk_tt_FindGlyphIndex@@9@9@ddf8d5d8 ; `nk_tt_FindGlyphIndex'::`2'::__LINE__Var
PUBLIC	??_C@_13COJANIEC@?$AA0?$AA?$AA@			; `string'
PUBLIC	??_C@_1HG@DLDBBFCO@?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAc?$AAo?$AAd?$AAe?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAn?$AAk?$AA_?$AAt?$AAt?$AAU?$AAS?$AAH?$AAO?$AAR?$AAT@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_tt_GetGlyphShape@@9@9@ddf8d5d8 ; `nk_tt_GetGlyphShape'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_tt__handle_clipped_edge@@9@9@ddf8d5d8 ; `nk_tt__handle_clipped_edge'::`2'::__LINE__Var
PUBLIC	??_C@_1BA@ENLNFFAM@?$AAy?$AA0?$AA?5?$AA?$DM?$AA?5?$AAy?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@JGPMADBG@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@DHAKMBPL@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@FAAMJPKE@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@FEPJEPJJ@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@NGGEAFFG@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@NILBPPPH@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FK@JPMIPNJF@?$AAx?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA0?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_tt__fill_active_edges_new@@9@9@ddf8d5d8 ; `nk_tt__fill_active_edges_new'::`2'::__LINE__Var
PUBLIC	??_C@_1BO@MDBOACOJ@?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_?$AAt?$AAo?$AAp?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EI@KOIFPDFH@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAy?$AA_?$AAb?$AAo?$AAt?$AAt?$AAo?$AAm?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_@ ; `string'
PUBLIC	??_C@_1CE@GDDDMDCC@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl?$AAe?$AAn?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_tt__rasterize_sorted_edges@@9@9@ddf8d5d8 ; `nk_tt__rasterize_sorted_edges'::`2'::__LINE__Var
PUBLIC	??_C@_1BK@LMAHJHLI@?$AAz?$AA?9?$AA?$DO?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@PMJHELI@?$AAz?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA_?$AAy?$AA_?$AAt?$AAo?$AAp?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_tt_Rasterize@@9@9@ddf8d5d8	; `nk_tt_Rasterize'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_tt_PackSetOversampling@@9@9@ddf8d5d8 ; `nk_tt_PackSetOversampling'::`2'::__LINE__Var
PUBLIC	??_C@_1CE@OKIIJOOA@?$AAh?$AA_?$AAo?$AAv?$AAe?$AAr?$AAs?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA8?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@LCKJLKGO@?$AAv?$AA_?$AAo?$AAv?$AAe?$AAr?$AAs?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA8?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_tt__h_prefilter@@9@9@ddf8d5d8 ; `nk_tt__h_prefilter'::`2'::__LINE__Var
PUBLIC	??_C@_1BO@BDJAMAMF@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_tt__v_prefilter@@9@9@ddf8d5d8 ; `nk_tt__v_prefilter'::`2'::__LINE__Var
PUBLIC	??_C@_1DO@LAPBLJ@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$CK?$AAs?$AAt?$AAr?$AAi?$AAd?$AAe?$AA_?$AAi?$AAn?$AA_?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_range_count@@9@9@ddf8d5d8	; `nk_range_count'::`2'::__LINE__Var
PUBLIC	??_C@_1M@KOBGMDOP@?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_range_glyph_count@@9@9@ddf8d5d8 ; `nk_range_glyph_count'::`2'::__LINE__Var
PUBLIC	??_C@_1O@LEKFDIFA@?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_font_baker_memory@@9@9@ddf8d5d8 ; `nk_font_baker_memory'::`2'::__LINE__Var
PUBLIC	??_C@_1BI@LDHLIKNE@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@JKPHGKFE@?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_font_bake_pack@@9@9@ddf8d5d8 ; `nk_font_bake_pack'::`2'::__LINE__Var
PUBLIC	??_C@_1BK@GDOOMBLP@?$AAi?$AAm?$AAa?$AAg?$AAe?$AA_?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@MDIKEACL@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@NGBHDANL@?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@MJBJBOIA@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DI@IJAOEFPO@?$AAr?$AAe?$AAc?$AAt?$AA_?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA_?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DI@OBHIIPHI@?$AAc?$AAh?$AAa?$AAr?$AA_?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA_?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DK@MJIDLFCD@?$AAr?$AAa?$AAn?$AAg?$AAe?$AA_?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA_?$AAr?$AAa?$AAn?$AAg?$AAe?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_font_bake@@9@9@ddf8d5d8	; `nk_font_bake'::`2'::__LINE__Var
PUBLIC	??_C@_1M@GKOIOOFK@?$AAb?$AAa?$AAk?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@PNHAFIJL@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@BAMJJACG@?$AAg?$AAl?$AAy?$AAp?$AAh?$AAs?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_font_bake_custom_data@@9@9@ddf8d5d8 ; `nk_font_bake_custom_data'::`2'::__LINE__Var
PUBLIC	??_C@_1BG@JELGLMGA@?$AAi?$AAm?$AAg?$AA_?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@MBHFANAC@?$AAi?$AAm?$AAg?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@JKDMJAOC@?$AAi?$AAm?$AAg?$AA_?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@JMKMBGAG@?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA_?$AAd?$AAa?$AAt?$AAa?$AA_?$AAm?$AAa?$AAs?$AAk?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_font_bake_convert@@9@9@ddf8d5d8 ; `nk_font_bake_convert'::`2'::__LINE__Var
PUBLIC	??_C@_1BG@FPHPBKAN@?$AAo?$AAu?$AAt?$AA_?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@GJBOJGHN@?$AAi?$AAn?$AA_?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_font_text_width@@9@9@ddf8d5d8 ; `nk_font_text_width'::`2'::__LINE__Var
PUBLIC	??_C@_1BK@JHIPEEHJ@?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAg?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_font_query_font_glyph@@9@9@ddf8d5d8 ; `nk_font_query_font_glyph'::`2'::__LINE__Var
PUBLIC	??_C@_1M@FFJEAAHP@?$AAg?$AAl?$AAy?$AAp?$AAh?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_font_find_glyph@@9@9	; `nk_font_find_glyph'::`2'::__LINE__Var
PUBLIC	??_C@_1CE@EGBHPFHC@?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAr?$AAa?$AAn?$AAg?$AAe?$AAs?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_font_init@@9@9@ddf8d5d8	; `nk_font_init'::`2'::__LINE__Var
PUBLIC	??_C@_1O@NBCNDPNP@?$AAg?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@PADPEMOB@?$AAb?$AAa?$AAk?$AAe?$AAd?$AA_?$AAf?$AAo?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk__match@@9@9@ddf8d5d8	; `nk__match'::`2'::__LINE__Var
PUBLIC	??_C@_1EC@MLCFIANA@?$AAn?$AAk?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAn?$AAk?$AA_?$AA_?$AAb?$AAa?$AAr?$AAr?$AAi?$AAe?$AAr@ ; `string'
PUBLIC	?__LINE__Var@?1??nk__lit@@9@9@ddf8d5d8		; `nk__lit'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_decompress@@9@9@ddf8d5d8	; `nk_decompress'::`2'::__LINE__Var
PUBLIC	??_C@_1DE@KBBHGLFN@?$AAn?$AAk?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAo?$AAl?$AAe?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@IFJFDKGL@?$AAn?$AAk?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAo?$AAl?$AAe?$AAn?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_font_atlas_init_default@@9@9 ; `nk_font_atlas_init_default'::`2'::__LINE__Var
PUBLIC	??_C@_1M@PFBJFKGM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_font_atlas_init@@9@9	; `nk_font_atlas_init'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_font_atlas_init_custom@@9@9	; `nk_font_atlas_init_custom'::`2'::__LINE__Var
PUBLIC	??_C@_1BE@GNEJBMGP@?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@EMLGEEBK@?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_font_atlas_begin@@9@9	; `nk_font_atlas_begin'::`2'::__LINE__Var
PUBLIC	??_C@_1GA@MNJGNIH@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9@ ; `string'
PUBLIC	??_C@_1GA@EALBBIL@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_font_atlas_add@@9@9		; `nk_font_atlas_add'::`2'::__LINE__Var
PUBLIC	??_C@_1CO@LNDLDAN@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@IMJOFDOF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@BIKDIHM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@BKPFMKJJ@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@EMLJIHOH@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAt?$AAt?$AAf?$AA_?$AAb?$AAl?$AAo?$AAb?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@CPJMIME@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAt?$AAt?$AAf?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@EPKOFENI@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AAf?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@JLAHHNKC@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAf?$AAo?$AAn?$AAt?$AA_?$AAn?$AAu?$AAm?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BM@OLHJPPIM@?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAt?$AAt?$AAf?$AA_?$AAb?$AAl?$AAo?$AAb?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_font_atlas_add_from_memory@@9@9 ; `nk_font_atlas_add_from_memory'::`2'::__LINE__Var
PUBLIC	??_C@_1O@NIJNBMFJ@?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_font_atlas_add_from_file@@9@9 ; `nk_font_atlas_add_from_file'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_font_atlas_add_compressed@@9@9 ; `nk_font_atlas_add_compressed'::`2'::__LINE__Var
PUBLIC	??_C@_1CA@NPEFJEMF@?$AAc?$AAo?$AAm?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@HMLKODMG@?$AAc?$AAo?$AAm?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@NFICCMAF@?$AAd?$AAe?$AAc?$AAo?$AAm?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_font_atlas_add_compressed_base85@@9@9 ; `nk_font_atlas_add_compressed_base85'::`2'::__LINE__Var
PUBLIC	??_C@_1BI@DCDGNPB@?$AAd?$AAa?$AAt?$AAa?$AA_?$AAb?$AAa?$AAs?$AAe?$AA8?$AA5?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_font_atlas_add_default@@9@9	; `nk_font_atlas_add_default'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_font_atlas_bake@@9@9	; `nk_font_atlas_bake'::`2'::__LINE__Var
PUBLIC	??_C@_17GNJCADOE@?$AAt?$AAm?$AAp?$AA?$AA@	; `string'
PUBLIC	??_C@_1BM@DILOJDLD@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAg?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@NNCEIJDJ@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAi?$AAx?$AAe?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@POOMANHF@?$AAi?$AAm?$AAg?$AA_?$AAr?$AAg?$AAb?$AAa?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_font_atlas_end@@9@9		; `nk_font_atlas_end'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_font_atlas_cleanup@@9@9	; `nk_font_atlas_cleanup'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_font_atlas_clear@@9@9	; `nk_font_atlas_clear'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_input_begin@@9@9		; `nk_input_begin'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_input_end@@9@9		; `nk_input_end'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_input_motion@@9@9		; `nk_input_motion'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_input_key@@9@9		; `nk_input_key'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_input_button@@9@9		; `nk_input_button'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_input_scroll@@9@9		; `nk_input_scroll'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_input_glyph@@9@9		; `nk_input_glyph'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_input_char@@9@9		; `nk_input_char'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_input_unicode@@9@9		; `nk_input_unicode'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_textedit_text@@9@9		; `nk_textedit_text'::`2'::__LINE__Var
PUBLIC	??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_textedit_init_fixed@@9@9	; `nk_textedit_init_fixed'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_textedit_init@@9@9		; `nk_textedit_init'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_textedit_init_default@@9@9	; `nk_textedit_init_default'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_textedit_select_all@@9@9	; `nk_textedit_select_all'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_textedit_free@@9@9		; `nk_textedit_free'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_widget_text@@9@9@ddf8d5d8	; `nk_widget_text'::`2'::__LINE__Var
PUBLIC	??_C@_13LNPOMHLG@?$AAo?$AA?$AA@			; `string'
PUBLIC	??_C@_13DKOGBHCI@?$AAt?$AA?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??nk_widget_text_wrap@@9@9@ddf8d5d8 ; `nk_widget_text_wrap'::`2'::__LINE__Var
PUBLIC	??_C@_01FJMABOPO@x?$AA@				; `string'
PUBLIC	??_C@_01IDAFKMJL@_?$AA@				; `string'
PUBLIC	??_C@_01MIFGBAGJ@?$CL?$AA@			; `string'
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??nk_do_button@@9@9@ddf8d5d8	; `nk_do_button'::`2'::__LINE__Var
PUBLIC	??_C@_1M@OIINANNN@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_17CMKEDJDI@?$AAo?$AAu?$AAt?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_do_button_text@@9@9@ddf8d5d8 ; `nk_do_button_text'::`2'::__LINE__Var
PUBLIC	??_C@_1O@DGBBOFII@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_do_button_symbol@@9@9@ddf8d5d8 ; `nk_do_button_symbol'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_do_button_image@@9@9@ddf8d5d8 ; `nk_do_button_image'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_do_button_text_symbol@@9@9@ddf8d5d8 ; `nk_do_button_text_symbol'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_do_button_text_image@@9@9@ddf8d5d8 ; `nk_do_button_text_image'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_do_toggle@@9@9@ddf8d5d8	; `nk_do_toggle'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_do_selectable@@9@9@ddf8d5d8	; `nk_do_selectable'::`2'::__LINE__Var
PUBLIC	??_C@_1M@KBCLFMHN@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_do_selectable_image@@9@9@ddf8d5d8 ; `nk_do_selectable_image'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_do_slider@@9@9@ddf8d5d8	; `nk_do_slider'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_do_progress@@9@9@ddf8d5d8	; `nk_do_progress'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_do_scrollbarv@@9@9@ddf8d5d8	; `nk_do_scrollbarv'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_do_scrollbarh@@9@9@ddf8d5d8	; `nk_do_scrollbarh'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_edit_draw_text@@9@9@ddf8d5d8 ; `nk_edit_draw_text'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_do_edit@@9@9@ddf8d5d8	; `nk_do_edit'::`2'::__LINE__Var
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_04PFOHOKJK@?5?5?5?5?$AA@			; `string'
PUBLIC	??_C@_1CC@DELOPEMK@?$AAs?$AAe?$AAl?$AAe?$AAc?$AAt?$AA_?$AAb?$AAe?$AAg?$AAi?$AAn?$AA_?$AAp?$AAt?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@GIIBLKDM@?$AAs?$AAe?$AAl?$AAe?$AAc?$AAt?$AA_?$AAe?$AAn?$AAd?$AA_?$AAp?$AAt?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@FFNHGOHN@?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA_?$AAp?$AAt?$AAr?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_color_picker_behavior@@9@9@ddf8d5d8 ; `nk_color_picker_behavior'::`2'::__LINE__Var
PUBLIC	??_C@_1O@DGDDDMMD@?$AAm?$AAa?$AAt?$AAr?$AAi?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@FPGEKOLJ@?$AAh?$AAu?$AAe?$AA_?$AAb?$AAa?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@EENKLIPJ@?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_draw_color_picker@@9@9@ddf8d5d8 ; `nk_draw_color_picker'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_do_color_picker@@9@9@ddf8d5d8 ; `nk_do_color_picker'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_style_from_table@@9@9	; `nk_style_from_table'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_style_set_font@@9@9		; `nk_style_set_font'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_style_push_font@@9@9	; `nk_style_push_font'::`2'::__LINE__Var
PUBLIC	??_C@_1KO@LJHFLGDM@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_style_pop_font@@9@9		; `nk_style_pop_font'::`2'::__LINE__Var
PUBLIC	??_C@_1CK@NLHKOOOH@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1KO@JLDKBNHN@?$AAt?$AAy?$AAp?$AAe?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI@ ; `string'
PUBLIC	??_C@_1CK@BNOCFFAG@?$AAt?$AAy?$AAp?$AAe?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_style_set_cursor@@9@9	; `nk_style_set_cursor'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_style_load_cursor@@9@9	; `nk_style_load_cursor'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_style_load_all_cursors@@9@9	; `nk_style_load_all_cursors'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_pool_init_fixed@@9@9@ddf8d5d8 ; `nk_pool_init_fixed'::`2'::__LINE__Var
PUBLIC	??_C@_1DO@HIJNMCBA@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAn?$AAk?$AA_?$AAp?$AAa?$AAg?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_pool_alloc@@9@9@ddf8d5d8	; `nk_pool_alloc'::`2'::__LINE__Var
PUBLIC	??_C@_1BI@FCHHCIJM@?$AAp?$AAo?$AAo?$AAl?$AA?9?$AA?$DO?$AAp?$AAa?$AAg?$AAe?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EG@GDCHEAAC@?$AAp?$AAo?$AAo?$AAl?$AA?9?$AA?$DO?$AAp?$AAa?$AAg?$AAe?$AAs?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AAp?$AAo?$AAo?$AAl?$AA?9?$AA?$DO?$AAc?$AAa?$AAp?$AAa?$AAc?$AAi@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_setup@@9@9@ddf8d5d8		; `nk_setup'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_init_fixed@@9@9		; `nk_init_fixed'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_init_custom@@9@9		; `nk_init_custom'::`2'::__LINE__Var
PUBLIC	??_C@_19GLKFFFDC@?$AAp?$AAo?$AAo?$AAl?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_init@@9@9			; `nk_init'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_free@@9@9			; `nk_free'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_clear@@9@9			; `nk_clear'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_start_buffer@@9@9@ddf8d5d8	; `nk_start_buffer'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_start@@9@9@ddf8d5d8		; `nk_start'::`2'::__LINE__Var
PUBLIC	??_C@_17MIEKGGLN@?$AAw?$AAi?$AAn?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_start_popup@@9@9@ddf8d5d8	; `nk_start_popup'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_finish_popup@@9@9@ddf8d5d8	; `nk_finish_popup'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_finish_buffer@@9@9@ddf8d5d8	; `nk_finish_buffer'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_finish@@9@9@ddf8d5d8	; `nk_finish'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk__begin@@9@9			; `nk__begin'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk__next@@9@9			; `nk__next'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_panel_begin@@9@9@ddf8d5d8	; `nk_panel_begin'::`2'::__LINE__Var
PUBLIC	??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_panel_end@@9@9@ddf8d5d8	; `nk_panel_end'::`2'::__LINE__Var
PUBLIC	??_C@_1DA@PKJELGCB@?$AA?$CB?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAr?$AAe?$AAe?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_create_page_element@@9@9@ddf8d5d8 ; `nk_create_page_element'::`2'::__LINE__Var
PUBLIC	??_C@_19DNIKFMHO@?$AAe?$AAl?$AAe?$AAm?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_add_value@@9@9@ddf8d5d8	; `nk_add_value'::`2'::__LINE__Var
PUBLIC	??_C@_17IGALFJBG@?$AAt?$AAb?$AAl?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_find_window@@9@9@ddf8d5d8	; `nk_find_window'::`2'::__LINE__Var
PUBLIC	??_C@_1CG@NEBMOBMP@?$AAi?$AAt?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAi?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_insert_window@@9@9@ddf8d5d8	; `nk_insert_window'::`2'::__LINE__Var
PUBLIC	??_C@_1BI@HILBEPMH@?$AAi?$AAt?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAw?$AAi?$AAn?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_begin_titled@@9@9		; `nk_begin_titled'::`2'::__LINE__Var
PUBLIC	??_C@_19HHIIBINK@?$AAn?$AAa?$AAm?$AAe?$AA?$AA@	; `string'
PUBLIC	??_C@_1M@NFEAPLNL@?$AAt?$AAi?$AAt?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CK@BJLINOEN@if?5this?5triggers?5you?5forgot?5to?5a@ ; `string'
PUBLIC	??_C@_1LC@NJCFCJDB@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?4?$AAf?$AAo?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?4?$AAf?$AAo@ ; `string'
PUBLIC	??_C@_0CM@NPLMGOOB@if?5this?5triggers?5you?5missed?5a?5?$GAn@ ; `string'
PUBLIC	??_C@_1HO@LCINIEJG@?$AA?$CB?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAi?$AAf?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?5?$AAt?$AAr?$AAi?$AAg?$AAg?$AAe@ ; `string'
PUBLIC	??_C@_1CK@MJEFJAFE@?$AAw?$AAi?$AAn?$AA?9?$AA?$DO?$AAs?$AAe?$AAq?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAs?$AAe?$AAq?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_end@@9@9			; `nk_end'::`2'::__LINE__Var
PUBLIC	??_C@_0CP@PKIBPAED@if?5this?5triggers?5you?5forgot?5to?5c@ ; `string'
PUBLIC	??_C@_1IC@IHIOPCBE@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAi?$AAf?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?5?$AAt?$AAr?$AAi?$AAg?$AAg?$AAe?$AAr@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_window_get_bounds@@9@9	; `nk_window_get_bounds'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_get_position@@9@9	; `nk_window_get_position'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_get_size@@9@9	; `nk_window_get_size'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_get_width@@9@9	; `nk_window_get_width'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_get_height@@9@9	; `nk_window_get_height'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_get_content_region@@9@9 ; `nk_window_get_content_region'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_get_content_region_min@@9@9 ; `nk_window_get_content_region_min'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_get_content_region_max@@9@9 ; `nk_window_get_content_region_max'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_get_content_region_size@@9@9 ; `nk_window_get_content_region_size'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_get_canvas@@9@9	; `nk_window_get_canvas'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_get_panel@@9@9	; `nk_window_get_panel'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_has_focus@@9@9	; `nk_window_has_focus'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_is_hovered@@9@9	; `nk_window_is_hovered'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_is_any_hovered@@9@9	; `nk_window_is_any_hovered'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_is_collapsed@@9@9	; `nk_window_is_collapsed'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_is_closed@@9@9	; `nk_window_is_closed'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_is_hidden@@9@9	; `nk_window_is_hidden'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_is_active@@9@9	; `nk_window_is_active'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_close@@9@9		; `nk_window_close'::`2'::__LINE__Var
PUBLIC	??_C@_0CL@POGABMMP@You?5cannot?5close?5a?5currently?5act@ ; `string'
PUBLIC	??_C@_1II@KEHDGIEG@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAw?$AAi?$AAn?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAY?$AAo?$AAu?$AA?5?$AAc?$AAa?$AAn?$AAn@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_window_set_bounds@@9@9	; `nk_window_set_bounds'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_set_position@@9@9	; `nk_window_set_position'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_set_size@@9@9	; `nk_window_set_size'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_collapse@@9@9	; `nk_window_collapse'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_collapse_if@@9@9	; `nk_window_collapse_if'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_show@@9@9		; `nk_window_show'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_show_if@@9@9		; `nk_window_show_if'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_window_set_focus@@9@9	; `nk_window_set_focus'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_menubar_begin@@9@9		; `nk_menubar_begin'::`2'::__LINE__Var
PUBLIC	??_C@_1EC@NJLDBDNI@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAa?$AAt?$AA_?$AAy?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAb?$AAo?$AAu?$AAn?$AAd?$AAs?$AA?4?$AAy@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_menubar_end@@9@9		; `nk_menubar_end'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_set_min_row_height@@9@9 ; `nk_layout_set_min_row_height'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_reset_min_row_height@@9@9 ; `nk_layout_reset_min_row_height'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_panel_layout@@9@9@ddf8d5d8	; `nk_panel_layout'::`2'::__LINE__Var
PUBLIC	??_C@_1EO@JPIFGEEN@?$AA?$CB?$AA?$CI?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAW?$AAI?$AAN?$AAD?$AAO?$AAW?$AA_?$AAM?$AAI?$AAN?$AAI@ ; `string'
PUBLIC	??_C@_1EI@DELDILCF@?$AA?$CB?$AA?$CI?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAW?$AAI?$AAN?$AAD?$AAO?$AAW?$AA_?$AAH?$AAI?$AAD?$AAD@ ; `string'
PUBLIC	??_C@_1EI@PPLANDAM@?$AA?$CB?$AA?$CI?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAW?$AAI?$AAN?$AAD?$AAO?$AAW?$AA_?$AAC?$AAL?$AAO?$AAS@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_row_layout@@9@9@ddf8d5d8	; `nk_row_layout'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_ratio_from_pixel@@9@9 ; `nk_layout_ratio_from_pixel'::`2'::__LINE__Var
PUBLIC	??_C@_1BI@OOJBMBEL@?$AAp?$AAi?$AAx?$AAe?$AAl?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_layout_row_begin@@9@9	; `nk_layout_row_begin'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_row_push@@9@9	; `nk_layout_row_push'::`2'::__LINE__Var
PUBLIC	??_C@_1KM@KNMABCOH@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAL?$AAA?$AAY?$AAO?$AAU?$AAT?$AA_?$AAS?$AAT@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_layout_row_end@@9@9		; `nk_layout_row_end'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_row@@9@9		; `nk_layout_row'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_row_template_begin@@9@9 ; `nk_layout_row_template_begin'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_row_template_push_dynamic@@9@9 ; `nk_layout_row_template_push_dynamic'::`2'::__LINE__Var
PUBLIC	??_C@_1EO@MCBIGAOG@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAL?$AAA?$AAY?$AAO?$AAU?$AAT?$AA_?$AAT?$AAE@ ; `string'
PUBLIC	??_C@_1DC@ELAOKKAE@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?5?$AA?$DM?$AA?5?$AA1?$AA6?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_layout_row_template_push_variable@@9@9 ; `nk_layout_row_template_push_variable'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_row_template_push_static@@9@9 ; `nk_layout_row_template_push_static'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_row_template_end@@9@9 ; `nk_layout_row_template_end'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_space_begin@@9@9	; `nk_layout_space_begin'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_space_end@@9@9	; `nk_layout_space_end'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_space_push@@9@9	; `nk_layout_space_push'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_space_bounds@@9@9	; `nk_layout_space_bounds'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_widget_bounds@@9@9	; `nk_layout_widget_bounds'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_space_to_screen@@9@9	; `nk_layout_space_to_screen'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_space_to_local@@9@9	; `nk_layout_space_to_local'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_space_rect_to_screen@@9@9 ; `nk_layout_space_rect_to_screen'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_space_rect_to_local@@9@9 ; `nk_layout_space_rect_to_local'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_widget_space@@9@9@ddf8d5d8 ; `nk_layout_widget_space'::`2'::__LINE__Var
PUBLIC	??_C@_1O@CGNPIAKO@?$AAb?$AAo?$AAu?$AAn?$AAd?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@DKKICNJC@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAr?$AAa?$AAt?$AAi?$AAo?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FA@JKACIFKJ@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4@ ; `string'
PUBLIC	??_C@_1CO@JFBIDLDE@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AA1?$AA6?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_panel_alloc_space@@9@9@ddf8d5d8 ; `nk_panel_alloc_space'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_layout_peek@@9@9@ddf8d5d8	; `nk_layout_peek'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_tree_state_base@@9@9@ddf8d5d8 ; `nk_tree_state_base'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_tree_state_pop@@9@9		; `nk_tree_state_pop'::`2'::__LINE__Var
PUBLIC	??_C@_1CO@ONCLGDAH@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAr?$AAe?$AAe?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_widget_bounds@@9@9		; `nk_widget_bounds'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_widget_position@@9@9	; `nk_widget_position'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_widget_size@@9@9		; `nk_widget_size'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_widget_width@@9@9		; `nk_widget_width'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_widget_height@@9@9		; `nk_widget_height'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_widget_is_hovered@@9@9	; `nk_widget_is_hovered'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_widget_is_mouse_clicked@@9@9 ; `nk_widget_is_mouse_clicked'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_widget_has_mouse_click_down@@9@9 ; `nk_widget_has_mouse_click_down'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_widget@@9@9			; `nk_widget'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_widget_fitting@@9@9		; `nk_widget_fitting'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_spacing@@9@9		; `nk_spacing'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_text_colored@@9@9		; `nk_text_colored'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_text_wrap_colored@@9@9	; `nk_text_wrap_colored'::`2'::__LINE__Var
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	??_C@_06DJHOIPC@?$CFs?3?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_06GBEGMGE@?$CFs?3?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_06FFMNEPHE@?$CFs?3?5?$CFu?$AA@		; `string'
PUBLIC	??_C@_08KELGKKHF@?$CFs?3?5?$CF?43f?$AA@		; `string'
PUBLIC	??_C@_0BF@LMCNFMJH@?$CFs?3?5?$CI?$CFd?0?5?$CFd?0?5?$CFd?0?5?$CFd?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BN@KPPADBIM@?$CFs?3?5?$CI?$CF?42f?0?5?$CF?42f?0?5?$CF?42f?0?5?$CF?42f?$CJ?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_text@@9@9			; `nk_text'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_text_wrap@@9@9		; `nk_text_wrap'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_image@@9@9			; `nk_image'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_button_set_behavior@@9@9	; `nk_button_set_behavior'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_button_push_behavior@@9@9	; `nk_button_push_behavior'::`2'::__LINE__Var
PUBLIC	??_C@_1LK@JEBCHHPP@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_button_pop_behavior@@9@9	; `nk_button_pop_behavior'::`2'::__LINE__Var
PUBLIC	??_C@_1CO@FDFLJFOK@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_button_text_styled@@9@9	; `nk_button_text_styled'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_button_text@@9@9		; `nk_button_text'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_button_color@@9@9		; `nk_button_color'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_button_symbol_styled@@9@9	; `nk_button_symbol_styled'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_button_symbol@@9@9		; `nk_button_symbol'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_button_image_styled@@9@9	; `nk_button_image_styled'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_button_image@@9@9		; `nk_button_image'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_button_symbol_text_styled@@9@9 ; `nk_button_symbol_text_styled'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_button_symbol_text@@9@9	; `nk_button_symbol_text'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_button_image_text_styled@@9@9 ; `nk_button_image_text_styled'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_selectable_text@@9@9	; `nk_selectable_text'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_selectable_image_text@@9@9	; `nk_selectable_image_text'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_check_text@@9@9		; `nk_check_text'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_check_flags_text@@9@9	; `nk_check_flags_text'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_checkbox_text@@9@9		; `nk_checkbox_text'::`2'::__LINE__Var
PUBLIC	??_C@_1O@IBNPCBAA@?$AAa?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_checkbox_flags_text@@9@9	; `nk_checkbox_flags_text'::`2'::__LINE__Var
PUBLIC	??_C@_1M@PIKEIEDD@?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_option_text@@9@9		; `nk_option_text'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_radio_text@@9@9		; `nk_radio_text'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_slider_float@@9@9		; `nk_slider_float'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_progress@@9@9		; `nk_progress'::`2'::__LINE__Var
PUBLIC	??_C@_17FOGAHDKL@?$AAc?$AAu?$AAr?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_edit_focus@@9@9		; `nk_edit_focus'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_edit_unfocus@@9@9		; `nk_edit_unfocus'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_edit_string@@9@9		; `nk_edit_string'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_edit_buffer@@9@9		; `nk_edit_buffer'::`2'::__LINE__Var
PUBLIC	??_C@_19LELMJPKF@?$AAe?$AAd?$AAi?$AAt?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_property@@9@9@ddf8d5d8	; `nk_property'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_property_int@@9@9		; `nk_property_int'::`2'::__LINE__Var
PUBLIC	??_C@_17ECLKCMMF@?$AAv?$AAa?$AAl?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_property_float@@9@9		; `nk_property_float'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_property_double@@9@9	; `nk_property_double'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_propertyi@@9@9		; `nk_propertyi'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_propertyf@@9@9		; `nk_propertyf'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_propertyd@@9@9		; `nk_propertyd'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_color_pick@@9@9		; `nk_color_pick'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_chart_begin_colored@@9@9	; `nk_chart_begin_colored'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_chart_add_slot_colored@@9@9	; `nk_chart_add_slot_colored'::`2'::__LINE__Var
PUBLIC	??_C@_1EK@IHPMBODD@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAa?$AAr?$AAt?$AA?4?$AAs?$AAl?$AAo?$AAt@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_chart_push_line@@9@9@ddf8d5d8 ; `nk_chart_push_line'::`2'::__LINE__Var
PUBLIC	??_C@_1CM@OFPHFACA@?$AAs?$AAl?$AAo?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAl?$AAo?$AAt?$AA?5?$AA?$DM?$AA?5?$AA4?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_chart_push_column@@9@9@ddf8d5d8 ; `nk_chart_push_column'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_chart_push_slot@@9@9	; `nk_chart_push_slot'::`2'::__LINE__Var
PUBLIC	??_C@_1FA@NCCAOEEL@?$AAs?$AAl?$AAo?$AAt?$AA?5?$AA?$DM?$AA?5?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAa@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_chart_end@@9@9		; `nk_chart_end'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_plot@@9@9			; `nk_plot'::`2'::__LINE__Var
PUBLIC	??_C@_1O@IBMGLEDN@?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_plot_function@@9@9		; `nk_plot_function'::`2'::__LINE__Var
PUBLIC	??_C@_1BK@MGBAIKDD@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA_?$AAg?$AAe?$AAt?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_group_scrolled_end@@9@9	; `nk_group_scrolled_end'::`2'::__LINE__Var
PUBLIC	??_C@_1BI@MGIMHMOI@?$AAw?$AAi?$AAn?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@KEJBMHNG@?$AAg?$AA?9?$AA?$DO?$AAp?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_group_begin@@9@9		; `nk_group_begin'::`2'::__LINE__Var
PUBLIC	??_C@_1BC@FPAKBMPJ@?$AAx?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@LAFIKKBI@?$AAy?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_list_view_begin@@9@9	; `nk_list_view_begin'::`2'::__LINE__Var
PUBLIC	??_C@_19IGFHNPAK@?$AAv?$AAi?$AAe?$AAw?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??nk_list_view_end@@9@9		; `nk_list_view_end'::`2'::__LINE__Var
PUBLIC	??_C@_1BE@PIEBDDFH@?$AAv?$AAi?$AAe?$AAw?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@PJMKKIBM@?$AAv?$AAi?$AAe?$AAw?$AA?9?$AA?$DO?$AAs?$AAc?$AAr?$AAo?$AAl?$AAl?$AA_?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_popup_begin@@9@9		; `nk_popup_begin'::`2'::__LINE__Var
PUBLIC	??_C@_0CG@PGMENGHG@popups?5are?5not?5allowed?5to?5have?5p@ ; `string'
PUBLIC	??_C@_1JO@DBBBPONP@?$AA?$CB?$AA?$CI?$AAp?$AAa?$AAn?$AAe?$AAl?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAP?$AAA?$AAN?$AAE?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAP?$AAO?$AAP@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_nonblock_begin@@9@9@ddf8d5d8 ; `nk_nonblock_begin'::`2'::__LINE__Var
PUBLIC	??_C@_1EI@JEAJFHEO@?$AA?$CB?$AA?$CI?$AAp?$AAa?$AAn?$AAe?$AAl?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAP?$AAA?$AAN?$AAE?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAP?$AAO?$AAP@ ; `string'
PUBLIC	??_C@_1BM@OHHEFNGN@?$AAp?$AAo?$AAp?$AAu?$AAp?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_popup_close@@9@9		; `nk_popup_close'::`2'::__LINE__Var
PUBLIC	??_C@_1BM@KLACOFEL@?$AAp?$AAo?$AAp?$AAu?$AAp?$AA?9?$AA?$DO?$AAp?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FC@NEPNGFGJ@?$AAp?$AAo?$AAp?$AAu?$AAp?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAP?$AAA?$AAN?$AAE?$AAL?$AA_?$AAS@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_popup_end@@9@9		; `nk_popup_end'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_tooltip_begin@@9@9		; `nk_tooltip_begin'::`2'::__LINE__Var
PUBLIC	??_C@_0BA@FIOIOCM@__?$CD?$CDTooltip?$CD?$CD__?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_tooltip_end@@9@9		; `nk_tooltip_end'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_tooltip@@9@9		; `nk_tooltip'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_contextual_begin@@9@9	; `nk_contextual_begin'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_contextual_item_text@@9@9	; `nk_contextual_item_text'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_contextual_item_image_text@@9@9 ; `nk_contextual_item_image_text'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_contextual_item_symbol_text@@9@9 ; `nk_contextual_item_symbol_text'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_contextual_close@@9@9	; `nk_contextual_close'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_contextual_end@@9@9		; `nk_contextual_end'::`2'::__LINE__Var
PUBLIC	??_C@_1EC@DJLEFCBF@?$AAp?$AAa?$AAn?$AAe?$AAl?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAP?$AAA?$AAN?$AAE?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAP?$AAO?$AAP?$AAU?$AAP@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_combo_begin@@9@9@ddf8d5d8	; `nk_combo_begin'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_combo_begin_text@@9@9	; `nk_combo_begin_text'::`2'::__LINE__Var
PUBLIC	??_C@_1BC@BAHMPCLB@?$AAs?$AAe?$AAl?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_combo_begin_color@@9@9	; `nk_combo_begin_color'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_combo_begin_symbol@@9@9	; `nk_combo_begin_symbol'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_combo_begin_symbol_text@@9@9 ; `nk_combo_begin_symbol_text'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_combo_begin_image@@9@9	; `nk_combo_begin_image'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_combo_begin_image_text@@9@9	; `nk_combo_begin_image_text'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_combo@@9@9			; `nk_combo'::`2'::__LINE__Var
PUBLIC	??_C@_1M@JLJIPHMC@?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_combo_separator@@9@9	; `nk_combo_separator'::`2'::__LINE__Var
PUBLIC	??_C@_1DK@MJNAGHOF@?$AAi?$AAt?$AAe?$AAm?$AAs?$AA_?$AAs?$AAe?$AAp?$AAa?$AAr?$AAa?$AAt?$AAe?$AAd?$AA_?$AAb?$AAy?$AA_?$AAs?$AAe?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_combo_callback@@9@9		; `nk_combo_callback'::`2'::__LINE__Var
PUBLIC	??_C@_1BI@CBJAPKKM@?$AAi?$AAt?$AAe?$AAm?$AA_?$AAg?$AAe?$AAt?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nk_menu_begin@@9@9@ddf8d5d8	; `nk_menu_begin'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_menu_begin_text@@9@9	; `nk_menu_begin_text'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_menu_begin_image@@9@9	; `nk_menu_begin_image'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_menu_begin_symbol@@9@9	; `nk_menu_begin_symbol'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_menu_begin_image_text@@9@9	; `nk_menu_begin_image_text'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_menu_begin_symbol_text@@9@9	; `nk_menu_begin_symbol_text'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??nk_sdl_device_create@@9@9	; `nk_sdl_device_create'::`2'::__LINE__Var
PUBLIC	??_C@_1HM@DKHOBLCB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@ ; `string'
PUBLIC	??_C@_1CE@FPHDOHKN@?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAG?$AAL?$AA_?$AAT?$AAR?$AAU?$AAE?$AA?$AA@ ; `string'
PUBLIC	??_C@_07GKACAEDJ@Texture?$AA@			; `string'
PUBLIC	??_C@_07EDEMHDKD@ProjMtx?$AA@			; `string'
PUBLIC	??_C@_08GCJNLIKG@Position?$AA@			; `string'
PUBLIC	??_C@_08NGMLKGCO@TexCoord?$AA@			; `string'
PUBLIC	??_C@_05PDOBBJNA@Color?$AA@			; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_0N@DBJPLNLE@settings?4cfg?$AA@		; `string'
PUBLIC	??_C@_0O@JOAMFABP@ScreenX?5?$DN?5?$CFd?6?$AA@	; `string'
PUBLIC	??_C@_0O@FCKGFAIB@ScreenY?5?$DN?5?$CFd?6?$AA@	; `string'
PUBLIC	??_C@_0BB@PFGCCBAA@FullScreen?5?$DN?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0BA@CCGGOMJJ@ScreenBPP?5?$DN?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@LFBKPFPE@AudioFrequency?5?$DN?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0BE@OAMPIJBI@AudioChannels?5?$DN?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0M@OCOMPIPE@VSync?5?$DN?5?$CFd?6?$AA@	; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_07DHPDHKIF@?$CFs?5?$DN?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_07NAMBOAHL@ScreenX?$AA@			; `string'
PUBLIC	??_C@_07MJNKNBDK@ScreenY?$AA@			; `string'
PUBLIC	??_C@_09IFGCFGJL@ScreenBPP?$AA@			; `string'
PUBLIC	??_C@_0L@CBCDGBIF@FullScreen?$AA@		; `string'
PUBLIC	??_C@_0P@HHDALPEH@AudioFrequency?$AA@		; `string'
PUBLIC	??_C@_0O@OBADIEME@AudioChannels?$AA@		; `string'
PUBLIC	??_C@_05PBPHDBPF@VSync?$AA@			; `string'
PUBLIC	??_C@_0M@PGCPLEOJ@CurrentPath?$AA@		; `string'
PUBLIC	??_C@_01BJJEKLCA@?$CC?$AA@			; `string'
PUBLIC	??_C@_0BK@DEPFCNDH@Coulnd?5not?5open?5directory?$AA@ ; `string'
PUBLIC	??_C@_02EKCPACEK@R?3?$AA@			; `string'
PUBLIC	??_C@_02FAMCGDNB@G?3?$AA@			; `string'
PUBLIC	??_C@_02FGAJKBDK@B?3?$AA@			; `string'
PUBLIC	??_C@_0N@DPGJHAPF@File?5Browser?$AA@		; `string'
PUBLIC	??_C@_01MNNFJEPP@?$DM?$AA@			; `string'
PUBLIC	??_C@_01PPODPGHN@?$DO?$AA@			; `string'
PUBLIC	??_C@_01JKBOJNNK@?$FO?$AA@			; `string'
PUBLIC	??_C@_0L@CPNGGKOP@New?5Folder?$AA@		; `string'
PUBLIC	??_C@_07ICAJMOAO@content?$AA@			; `string'
PUBLIC	??_C@_04DNCDCIAE@Open?$AA@			; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_06FMBNCPDL@Cancel?$AA@			; `string'
PUBLIC	??_C@_0DC@KBKJHOEA@Image?5Files?$AA?$CK?4png?$DL?$CK?4jpg?$DL?$CK?4tga?$DL?$CK?4@ ; `string'
PUBLIC	??_C@_0BK@HHEIJDCK@Select?5textures?5to?5import?$AA@ ; `string'
PUBLIC	??_C@_0BH@CIGIGAMK@Create?5new?5MGG?5project?$AA@ ; `string'
PUBLIC	??_C@_06FEFKNJEJ@Browse?$AA@			; `string'
PUBLIC	??_C@_0BL@HJHOAKN@Select?5your?5project?5folder?$AA@ ; `string'
PUBLIC	??_C@_0BA@JEDADDEO@Import?5textures?$AA@	; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_0BP@IDPDHAJP@Import?5normal?5mapping?5textures?$AA@ ; `string'
PUBLIC	??_C@_0CJ@HPCPPJKE@Select?5normal?5mapping?5textures?5t@ ; `string'
PUBLIC	??_C@_0BC@NLPHFHFE@Selected?5textures?$AA@	; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_0BF@DCHLKLBM@Selected?5normal?5maps?$AA@	; `string'
PUBLIC	??_C@_0BE@PFCBBNJE@Texture?5compression?$AA@	; `string'
PUBLIC	??_C@_04OHJIHAFH@None?$AA@			; `string'
PUBLIC	??_C@_0N@NIDFKEBJ@RLE?5?$CIfaster?$CJ?$AA@	; `string'
PUBLIC	??_C@_0BI@KFCNKMHJ@Texture?5mipmap?5?$CIfilter?$CJ?$AA@ ; `string'
PUBLIC	??_C@_07COOCJBJB@Nearest?$AA@			; `string'
PUBLIC	??_C@_06LACFBFGA@Linear?$AA@			; `string'
PUBLIC	??_C@_06MIKANEJK@Create?$AA@			; `string'
PUBLIC	??_C@_04IFEHPILC@Menu?$AA@			; `string'
PUBLIC	??_C@_04PBAHLACE@File?$AA@			; `string'
PUBLIC	??_C@_07LDBEDBB@New?5MGG?$AA@			; `string'
PUBLIC	??_C@_0BC@FLINIBDA@Open?5MGG?5txt?5file?$AA@	; `string'
PUBLIC	??_C@_04INACKGJP@Save?$AA@			; `string'
PUBLIC	??_C@_0L@JLONELEP@Save?5as?4?4?4?$AA@		; `string'
PUBLIC	??_C@_0M@GNJIJMPA@Compile?5MGG?$AA@		; `string'
PUBLIC	??_C@_04LBABLPF@Exit?$AA@			; `string'
PUBLIC	??_C@_04BBNPPDNC@Edit?$AA@			; `string'
PUBLIC	??_C@_0M@PIPCPMLP@Preferences?$AA@		; `string'
PUBLIC	??_C@_0P@FOGACOBA@MGG?5properties?$AA@		; `string'
PUBLIC	??_C@_04DDFEFHOJ@Help?$AA@			; `string'
PUBLIC	??_C@_05BDOHFCKE@About?$AA@			; `string'
PUBLIC	??_C@_0BB@FGHOOFIP@Sprite?5Selection?$AA@	; `string'
PUBLIC	??_C@_06MNNGKIJJ@SPRSEL?$AA@			; `string'
PUBLIC	??_C@_0M@ICNCCMBH@Left?5Pannel?$AA@		; `string'
PUBLIC	??_C@_04OFFCAMCD@Test?$AA@			; `string'
PUBLIC	??_C@_06PBIJCONE@Canvas?$AA@			; `string'
PUBLIC	??_C@_0O@GPCDBPIH@Animation?5Box?$AA@		; `string'
PUBLIC	??_C@_1HG@JKFDANAL@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAw?$AAh?$AAi?$AAl?$AAe?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAo?$AAr?$AA?5?$AAw?$AAr@ ; `string'
PUBLIC	??_C@_09PJHAHPG@Tex?5ALPHA?$AA@			; `string'
PUBLIC	??_C@_05MIPEAMDJ@arial?$AA@			; `string'
PUBLIC	??_C@_0BI@HHEBJCKC@font?1Roboto?9Regular?4ttf?$AA@ ; `string'
PUBLIC	??_C@_0L@JAEOLJKM@arial?5bold?$AA@		; `string'
PUBLIC	??_C@_0BF@DCPHDOKH@font?1Roboto?9Bold?4ttf?$AA@	; `string'
PUBLIC	??_C@_0BA@GLINHHCI@data?1mEngUI?4mgg?$AA@	; `string'
PUBLIC	??_C@_0BG@KBDHGKMD@Could?5not?5open?5UI?5mgg?$AA@ ; `string'
PUBLIC	??_C@_0L@EMLOAAHA@UI_Sys?4cfg?$AA@		; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@1e3ce508
PUBLIC	__real@358637bd
PUBLIC	__real@3ba3d70a
PUBLIC	__real@3c23d70a
PUBLIC	__real@3d06849b86a12b9b
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3da3d70a
PUBLIC	__real@3db851ec
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e19999a
PUBLIC	__real@3e2aaaab
PUBLIC	__real@3e3851ec
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3e8a3d71
PUBLIC	__real@3eb33333
PUBLIC	__real@3f000000
PUBLIC	__real@3f333333
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f59999a
PUBLIC	__real@3f666666
PUBLIC	__real@3f6b851f
PUBLIC	__real@3f7d70a4
PUBLIC	__real@3f800000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fc00000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@40400000
PUBLIC	__real@40490fdb
PUBLIC	__real@40800000
PUBLIC	__real@40c00000
PUBLIC	__real@40c90fdb
PUBLIC	__real@40e00000
PUBLIC	__real@41000000
PUBLIC	__real@41200000
PUBLIC	__real@41400000
PUBLIC	__real@41500000
PUBLIC	__real@41700000
PUBLIC	__real@41800000
PUBLIC	__real@41c80000
PUBLIC	__real@41f00000
PUBLIC	__real@42340000
PUBLIC	__real@42800000
PUBLIC	__real@42c80000
PUBLIC	__real@42f00000
PUBLIC	__real@42fe0000
PUBLIC	__real@43480000
PUBLIC	__real@43520000
PUBLIC	__real@437a0000
PUBLIC	__real@437f0000
PUBLIC	__real@43800000
PUBLIC	__real@43c30000
PUBLIC	__real@43e10000
PUBLIC	__real@44000000
PUBLIC	__real@4400c000
PUBLIC	__real@44160000
PUBLIC	__real@44480000
PUBLIC	__real@46800000
PUBLIC	__real@46fffe00
PUBLIC	__real@47000000
PUBLIC	__real@477fff00
PUBLIC	__real@4f000000
PUBLIC	__real@4f800000
PUBLIC	__real@beaaaaab
PUBLIC	__real@bf800000
PUBLIC	__real@bff0000000000000
PUBLIC	__real@c0000000
PUBLIC	__real@c2fe0000
PUBLIC	__real@c6fffe00
PUBLIC	__real@cf000000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strcat:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	_strtok:PROC
EXTRN	__imp__FindClose@4:PROC
EXTRN	__imp__FindFirstFileW@8:PROC
EXTRN	__imp__FindNextFileW@8:PROC
EXTRN	__imp__GetFullPathNameW@16:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__set_errno:PROC
EXTRN	_mbstowcs_s:PROC
EXTRN	_wcstombs_s:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	__imp__GetOpenFileNameA@4:PROC
EXTRN	__imp__SHGetPathFromIDListA@8:PROC
EXTRN	__imp__SHBrowseForFolderA@4:PROC
EXTRN	__imp__glBindTexture@8:PROC
EXTRN	__imp__glDeleteTextures@8:PROC
EXTRN	__imp__glDisable@4:PROC
EXTRN	__imp__glDrawElements@16:PROC
EXTRN	__imp__glEnable@4:PROC
EXTRN	__imp__glGenTextures@8:PROC
EXTRN	__imp__glScissor@16:PROC
EXTRN	__imp__glTexImage2D@36:PROC
EXTRN	__imp__glTexParameteri@12:PROC
EXTRN	__imp__glViewport@16:PROC
EXTRN	_SDL_SetClipboardText:PROC
EXTRN	_SDL_GetClipboardText:PROC
EXTRN	_SDL_GetWindowSize:PROC
EXTRN	_SDL_GL_GetDrawableSize:PROC
EXTRN	_SDL_GL_SwapWindow:PROC
EXTRN	_SDL_GetKeyboardState:PROC
EXTRN	_SDL_PollEvent:PROC
EXTRN	_SDL_Log:PROC
EXTRN	_SDL_GetTicks:PROC
EXTRN	_fclose:PROC
EXTRN	_feof:PROC
EXTRN	_fgets:PROC
EXTRN	_fopen:PROC
EXTRN	_fprintf:PROC
EXTRN	_fread:PROC
EXTRN	_fseek:PROC
EXTRN	_ftell:PROC
EXTRN	_sscanf:PROC
EXTRN	_sprintf:PROC
EXTRN	_vsprintf:PROC
EXTRN	_Init:PROC
EXTRN	_OpenFont:PROC
EXTRN	_Quit:PROC
EXTRN	_LoadMGG:PROC
EXTRN	_InitMGG:PROC
EXTRN	@SetTimerM@8:PROC
EXTRN	@GetTimerM@0:PROC
EXTRN	_FPSCounter:PROC
EXTRN	_BASICBKD:PROC
EXTRN	_Renderer:PROC
EXTRN	_Finish:PROC
EXTRN	_DrawSys:PROC
EXTRN	_ceil:PROC
EXTRN	_UIMain_DrawSystem:PROC
EXTRN	_UILoadSystem:PROC
EXTRN	_SetDirContent:PROC
EXTRN	__wassert:PROC
EXTRN	_WindowEvents:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__chkstk:PROC
EXTRN	__ftoui3:PROC
EXTRN	_GLeeFuncPtr_glActiveTexture:DWORD
EXTRN	_GLeeFuncPtr_glBindBuffer:DWORD
EXTRN	_GLeeFuncPtr_glDeleteBuffers:DWORD
EXTRN	_GLeeFuncPtr_glGenBuffers:DWORD
EXTRN	_GLeeFuncPtr_glBufferData:DWORD
EXTRN	_GLeeFuncPtr_glMapBuffer:DWORD
EXTRN	_GLeeFuncPtr_glUnmapBuffer:DWORD
EXTRN	_GLeeFuncPtr_glAttachShader:DWORD
EXTRN	_GLeeFuncPtr_glCompileShader:DWORD
EXTRN	_GLeeFuncPtr_glCreateProgram:DWORD
EXTRN	_GLeeFuncPtr_glCreateShader:DWORD
EXTRN	_GLeeFuncPtr_glDeleteProgram:DWORD
EXTRN	_GLeeFuncPtr_glDeleteShader:DWORD
EXTRN	_GLeeFuncPtr_glDetachShader:DWORD
EXTRN	_GLeeFuncPtr_glEnableVertexAttribArray:DWORD
EXTRN	_GLeeFuncPtr_glGetAttribLocation:DWORD
EXTRN	_GLeeFuncPtr_glGetProgramiv:DWORD
EXTRN	_GLeeFuncPtr_glGetShaderiv:DWORD
EXTRN	_GLeeFuncPtr_glGetUniformLocation:DWORD
EXTRN	_GLeeFuncPtr_glLinkProgram:DWORD
EXTRN	_GLeeFuncPtr_glShaderSource:DWORD
EXTRN	_GLeeFuncPtr_glUseProgram:DWORD
EXTRN	_GLeeFuncPtr_glUniform1i:DWORD
EXTRN	_GLeeFuncPtr_glUniformMatrix4fv:DWORD
EXTRN	_GLeeFuncPtr_glVertexAttribPointer:DWORD
EXTRN	_GLeeFuncPtr_glBindVertexArray:DWORD
EXTRN	_GLeeFuncPtr_glGenVertexArrays:DWORD
EXTRN	_st:BYTE
EXTRN	_events:BYTE
EXTRN	_mgg_sys:BYTE
EXTRN	_mgg_game:BYTE
EXTRN	_wn:DWORD
EXTRN	_UI_Sys:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_nk__barrier DD	01H DUP (?)
_nk__barrier2 DD 01H DUP (?)
_nk__barrier3 DD 01H DUP (?)
_nk__barrier4 DD 01H DUP (?)
_nk__dout DD	01H DUP (?)
_sdl	DB	0343cH DUP (?)
?lenpath@?1??FileBrowser@@9@9 DD 01H DUP (?)		; `FileBrowser'::`2'::lenpath
?backpath@?1??FileBrowser@@9@9 DB 0800H DUP (?)		; `FileBrowser'::`2'::backpath
?fowardpath@?1??FileBrowser@@9@9 DB 0800H DUP (?)	; `FileBrowser'::`2'::fowardpath
?temp@?1??FileBrowser@@9@9 DB 0800H DUP (?)		; `FileBrowser'::`2'::temp
?path2@?1??NewMGGBox@@9@9 DB 0104H DUP (?)		; `NewMGGBox'::`2'::path2
?tex@?1??NewMGGBox@@9@9 DB 020800H DUP (?)		; `NewMGGBox'::`2'::tex
?tex_n@?1??NewMGGBox@@9@9 DB 020800H DUP (?)		; `NewMGGBox'::`2'::tex_n
?path3@?1??NewMGGBox@@9@9 DB 0104H DUP (?)		; `NewMGGBox'::`2'::path3
?str@?1??NewMGGBox@@9@9 DB 020H DUP (?)			; `NewMGGBox'::`2'::str
?tex_names@?1??NewMGGBox@@9@9 DB 04000H DUP (?)		; `NewMGGBox'::`2'::tex_names
?tex_n_names@?1??NewMGGBox@@9@9 DB 04020H DUP (?)	; `NewMGGBox'::`2'::tex_n_names
?len@?1??NewMGGBox@@9@9 DD 01H DUP (?)			; `NewMGGBox'::`2'::len
?pidl@?1??NewMGGBox@@9@9 DD 01H DUP (?)			; `NewMGGBox'::`2'::pidl
?path@?1??MenuBar@@9@9 DB 0104H DUP (?)			; `MenuBar'::`2'::path
?pidl@?1??MenuBar@@9@9 DD 01H DUP (?)			; `MenuBar'::`2'::pidl
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@cf000000
CONST	SEGMENT
__real@cf000000 DD 0cf000000r			; -2.14748e+009
CONST	ENDS
;	COMDAT __real@c6fffe00
CONST	SEGMENT
__real@c6fffe00 DD 0c6fffe00r			; -32767
CONST	ENDS
;	COMDAT __real@c2fe0000
CONST	SEGMENT
__real@c2fe0000 DD 0c2fe0000r			; -127
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@beaaaaab
CONST	SEGMENT
__real@beaaaaab DD 0beaaaaabr			; -0.333333
CONST	ENDS
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT __real@4f000000
CONST	SEGMENT
__real@4f000000 DD 04f000000r			; 2.14748e+009
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@47000000
CONST	SEGMENT
__real@47000000 DD 047000000r			; 32768
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@46800000
CONST	SEGMENT
__real@46800000 DD 046800000r			; 16384
CONST	ENDS
;	COMDAT __real@44480000
CONST	SEGMENT
__real@44480000 DD 044480000r			; 800
CONST	ENDS
;	COMDAT __real@44160000
CONST	SEGMENT
__real@44160000 DD 044160000r			; 600
CONST	ENDS
;	COMDAT __real@4400c000
CONST	SEGMENT
__real@4400c000 DD 04400c000r			; 515
CONST	ENDS
;	COMDAT __real@44000000
CONST	SEGMENT
__real@44000000 DD 044000000r			; 512
CONST	ENDS
;	COMDAT __real@43e10000
CONST	SEGMENT
__real@43e10000 DD 043e10000r			; 450
CONST	ENDS
;	COMDAT __real@43c30000
CONST	SEGMENT
__real@43c30000 DD 043c30000r			; 390
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@437a0000
CONST	SEGMENT
__real@437a0000 DD 0437a0000r			; 250
CONST	ENDS
;	COMDAT __real@43520000
CONST	SEGMENT
__real@43520000 DD 043520000r			; 210
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@42fe0000
CONST	SEGMENT
__real@42fe0000 DD 042fe0000r			; 127
CONST	ENDS
;	COMDAT __real@42f00000
CONST	SEGMENT
__real@42f00000 DD 042f00000r			; 120
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@42340000
CONST	SEGMENT
__real@42340000 DD 042340000r			; 45
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41c80000
CONST	SEGMENT
__real@41c80000 DD 041c80000r			; 25
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@41500000
CONST	SEGMENT
__real@41500000 DD 041500000r			; 13
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7d70a4
CONST	SEGMENT
__real@3f7d70a4 DD 03f7d70a4r			; 0.99
CONST	ENDS
;	COMDAT __real@3f6b851f
CONST	SEGMENT
__real@3f6b851f DD 03f6b851fr			; 0.92
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3e8a3d71
CONST	SEGMENT
__real@3e8a3d71 DD 03e8a3d71r			; 0.27
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e3851ec
CONST	SEGMENT
__real@3e3851ec DD 03e3851ecr			; 0.18
CONST	ENDS
;	COMDAT __real@3e2aaaab
CONST	SEGMENT
__real@3e2aaaab DD 03e2aaaabr			; 0.166667
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db851ec
CONST	SEGMENT
__real@3db851ec DD 03db851ecr			; 0.09
CONST	ENDS
;	COMDAT __real@3da3d70a
CONST	SEGMENT
__real@3da3d70a DD 03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d06849b86a12b9b
CONST	SEGMENT
__real@3d06849b86a12b9b DQ 03d06849b86a12b9br	; 1e-014
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3ba3d70a
CONST	SEGMENT
__real@3ba3d70a DD 03ba3d70ar			; 0.005
CONST	ENDS
;	COMDAT __real@358637bd
CONST	SEGMENT
__real@358637bd DD 0358637bdr			; 1e-006
CONST	ENDS
;	COMDAT __real@1e3ce508
CONST	SEGMENT
__real@1e3ce508 DD 01e3ce508r			; 1e-020
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0L@EMLOAAHA@UI_Sys?4cfg?$AA@
CONST	SEGMENT
??_C@_0L@EMLOAAHA@UI_Sys?4cfg?$AA@ DB 'UI_Sys.cfg', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KBDHGKMD@Could?5not?5open?5UI?5mgg?$AA@
CONST	SEGMENT
??_C@_0BG@KBDHGKMD@Could?5not?5open?5UI?5mgg?$AA@ DB 'Could not open UI m'
	DB	'gg', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GLINHHCI@data?1mEngUI?4mgg?$AA@
CONST	SEGMENT
??_C@_0BA@GLINHHCI@data?1mEngUI?4mgg?$AA@ DB 'data/mEngUI.mgg', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DCPHDOKH@font?1Roboto?9Bold?4ttf?$AA@
CONST	SEGMENT
??_C@_0BF@DCPHDOKH@font?1Roboto?9Bold?4ttf?$AA@ DB 'font/Roboto-Bold.ttf', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JAEOLJKM@arial?5bold?$AA@
CONST	SEGMENT
??_C@_0L@JAEOLJKM@arial?5bold?$AA@ DB 'arial bold', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HHEBJCKC@font?1Roboto?9Regular?4ttf?$AA@
CONST	SEGMENT
??_C@_0BI@HHEBJCKC@font?1Roboto?9Regular?4ttf?$AA@ DB 'font/Roboto-Regula'
	DB	'r.ttf', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05MIPEAMDJ@arial?$AA@
CONST	SEGMENT
??_C@_05MIPEAMDJ@arial?$AA@ DB 'arial', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PJHAHPG@Tex?5ALPHA?$AA@
CONST	SEGMENT
??_C@_09PJHAHPG@Tex?5ALPHA?$AA@ DB 'Tex ALPHA', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HG@JKFDANAL@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAw?$AAh?$AAi?$AAl?$AAe?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAo?$AAr?$AA?5?$AAw?$AAr@
CONST	SEGMENT
??_C@_1HG@JKFDANAL@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAw?$AAh?$AAi?$AAl?$AAe?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAo?$AAr?$AA?5?$AAw?$AAr@ DB 'E'
	DB	00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'w', 00H
	DB	'h', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'r'
	DB	00H, 'y', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 't', 00H
	DB	'o', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ' '
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' '
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H
	DB	'u', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GPCDBPIH@Animation?5Box?$AA@
CONST	SEGMENT
??_C@_0O@GPCDBPIH@Animation?5Box?$AA@ DB 'Animation Box', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06PBIJCONE@Canvas?$AA@
CONST	SEGMENT
??_C@_06PBIJCONE@Canvas?$AA@ DB 'Canvas', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OFFCAMCD@Test?$AA@
CONST	SEGMENT
??_C@_04OFFCAMCD@Test?$AA@ DB 'Test', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ICNCCMBH@Left?5Pannel?$AA@
CONST	SEGMENT
??_C@_0M@ICNCCMBH@Left?5Pannel?$AA@ DB 'Left Pannel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06MNNGKIJJ@SPRSEL?$AA@
CONST	SEGMENT
??_C@_06MNNGKIJJ@SPRSEL?$AA@ DB 'SPRSEL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FGHOOFIP@Sprite?5Selection?$AA@
CONST	SEGMENT
??_C@_0BB@FGHOOFIP@Sprite?5Selection?$AA@ DB 'Sprite Selection', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05BDOHFCKE@About?$AA@
CONST	SEGMENT
??_C@_05BDOHFCKE@About?$AA@ DB 'About', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DDFEFHOJ@Help?$AA@
CONST	SEGMENT
??_C@_04DDFEFHOJ@Help?$AA@ DB 'Help', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FOGACOBA@MGG?5properties?$AA@
CONST	SEGMENT
??_C@_0P@FOGACOBA@MGG?5properties?$AA@ DB 'MGG properties', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PIPCPMLP@Preferences?$AA@
CONST	SEGMENT
??_C@_0M@PIPCPMLP@Preferences?$AA@ DB 'Preferences', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BBNPPDNC@Edit?$AA@
CONST	SEGMENT
??_C@_04BBNPPDNC@Edit?$AA@ DB 'Edit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBABLPF@Exit?$AA@
CONST	SEGMENT
??_C@_04LBABLPF@Exit?$AA@ DB 'Exit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GNJIJMPA@Compile?5MGG?$AA@
CONST	SEGMENT
??_C@_0M@GNJIJMPA@Compile?5MGG?$AA@ DB 'Compile MGG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JLONELEP@Save?5as?4?4?4?$AA@
CONST	SEGMENT
??_C@_0L@JLONELEP@Save?5as?4?4?4?$AA@ DB 'Save as...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04INACKGJP@Save?$AA@
CONST	SEGMENT
??_C@_04INACKGJP@Save?$AA@ DB 'Save', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FLINIBDA@Open?5MGG?5txt?5file?$AA@
CONST	SEGMENT
??_C@_0BC@FLINIBDA@Open?5MGG?5txt?5file?$AA@ DB 'Open MGG txt file', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07LDBEDBB@New?5MGG?$AA@
CONST	SEGMENT
??_C@_07LDBEDBB@New?5MGG?$AA@ DB 'New MGG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PBAHLACE@File?$AA@
CONST	SEGMENT
??_C@_04PBAHLACE@File?$AA@ DB 'File', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IFEHPILC@Menu?$AA@
CONST	SEGMENT
??_C@_04IFEHPILC@Menu?$AA@ DB 'Menu', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MIKANEJK@Create?$AA@
CONST	SEGMENT
??_C@_06MIKANEJK@Create?$AA@ DB 'Create', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LACFBFGA@Linear?$AA@
CONST	SEGMENT
??_C@_06LACFBFGA@Linear?$AA@ DB 'Linear', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07COOCJBJB@Nearest?$AA@
CONST	SEGMENT
??_C@_07COOCJBJB@Nearest?$AA@ DB 'Nearest', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KFCNKMHJ@Texture?5mipmap?5?$CIfilter?$CJ?$AA@
CONST	SEGMENT
??_C@_0BI@KFCNKMHJ@Texture?5mipmap?5?$CIfilter?$CJ?$AA@ DB 'Texture mipma'
	DB	'p (filter)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NIDFKEBJ@RLE?5?$CIfaster?$CJ?$AA@
CONST	SEGMENT
??_C@_0N@NIDFKEBJ@RLE?5?$CIfaster?$CJ?$AA@ DB 'RLE (faster)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHJIHAFH@None?$AA@
CONST	SEGMENT
??_C@_04OHJIHAFH@None?$AA@ DB 'None', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PFCBBNJE@Texture?5compression?$AA@
CONST	SEGMENT
??_C@_0BE@PFCBBNJE@Texture?5compression?$AA@ DB 'Texture compression', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DCHLKLBM@Selected?5normal?5maps?$AA@
CONST	SEGMENT
??_C@_0BF@DCHLKLBM@Selected?5normal?5maps?$AA@ DB 'Selected normal maps', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NLPHFHFE@Selected?5textures?$AA@
CONST	SEGMENT
??_C@_0BC@NLPHFHFE@Selected?5textures?$AA@ DB 'Selected textures', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HPCPPJKE@Select?5normal?5mapping?5textures?5t@
CONST	SEGMENT
??_C@_0CJ@HPCPPJKE@Select?5normal?5mapping?5textures?5t@ DB 'Select norma'
	DB	'l mapping textures to import', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@IDPDHAJP@Import?5normal?5mapping?5textures?$AA@
CONST	SEGMENT
??_C@_0BP@IDPDHAJP@Import?5normal?5mapping?5textures?$AA@ DB 'Import norm'
	DB	'al mapping textures', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JEDADDEO@Import?5textures?$AA@
CONST	SEGMENT
??_C@_0BA@JEDADDEO@Import?5textures?$AA@ DB 'Import textures', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HJHOAKN@Select?5your?5project?5folder?$AA@
CONST	SEGMENT
??_C@_0BL@HJHOAKN@Select?5your?5project?5folder?$AA@ DB 'Select your proj'
	DB	'ect folder', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06FEFKNJEJ@Browse?$AA@
CONST	SEGMENT
??_C@_06FEFKNJEJ@Browse?$AA@ DB 'Browse', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CIGIGAMK@Create?5new?5MGG?5project?$AA@
CONST	SEGMENT
??_C@_0BH@CIGIGAMK@Create?5new?5MGG?5project?$AA@ DB 'Create new MGG proj'
	DB	'ect', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HHEIJDCK@Select?5textures?5to?5import?$AA@
CONST	SEGMENT
??_C@_0BK@HHEIJDCK@Select?5textures?5to?5import?$AA@ DB 'Select textures '
	DB	'to import', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KBKJHOEA@Image?5Files?$AA?$CK?4png?$DL?$CK?4jpg?$DL?$CK?4tga?$DL?$CK?4@
CONST	SEGMENT
??_C@_0DC@KBKJHOEA@Image?5Files?$AA?$CK?4png?$DL?$CK?4jpg?$DL?$CK?4tga?$DL?$CK?4@ DB 'I'
	DB	'mage Files', 00H, '*.png;*.jpg;*.tga;*.bmp', 00H, 'Any File', 00H
	DB	'*.*', 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06FMBNCPDL@Cancel?$AA@
CONST	SEGMENT
??_C@_06FMBNCPDL@Cancel?$AA@ DB 'Cancel', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DNCDCIAE@Open?$AA@
CONST	SEGMENT
??_C@_04DNCDCIAE@Open?$AA@ DB 'Open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ICAJMOAO@content?$AA@
CONST	SEGMENT
??_C@_07ICAJMOAO@content?$AA@ DB 'content', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CPNGGKOP@New?5Folder?$AA@
CONST	SEGMENT
??_C@_0L@CPNGGKOP@New?5Folder?$AA@ DB 'New Folder', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01JKBOJNNK@?$FO?$AA@
CONST	SEGMENT
??_C@_01JKBOJNNK@?$FO?$AA@ DB '^', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PPODPGHN@?$DO?$AA@
CONST	SEGMENT
??_C@_01PPODPGHN@?$DO?$AA@ DB '>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MNNFJEPP@?$DM?$AA@
CONST	SEGMENT
??_C@_01MNNFJEPP@?$DM?$AA@ DB '<', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DPGJHAPF@File?5Browser?$AA@
CONST	SEGMENT
??_C@_0N@DPGJHAPF@File?5Browser?$AA@ DB 'File Browser', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02FGAJKBDK@B?3?$AA@
CONST	SEGMENT
??_C@_02FGAJKBDK@B?3?$AA@ DB 'B:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FAMCGDNB@G?3?$AA@
CONST	SEGMENT
??_C@_02FAMCGDNB@G?3?$AA@ DB 'G:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EKCPACEK@R?3?$AA@
CONST	SEGMENT
??_C@_02EKCPACEK@R?3?$AA@ DB 'R:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DEPFCNDH@Coulnd?5not?5open?5directory?$AA@
CONST	SEGMENT
??_C@_0BK@DEPFCNDH@Coulnd?5not?5open?5directory?$AA@ DB 'Coulnd not open '
	DB	'directory', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01BJJEKLCA@?$CC?$AA@
CONST	SEGMENT
??_C@_01BJJEKLCA@?$CC?$AA@ DB '"', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PGCPLEOJ@CurrentPath?$AA@
CONST	SEGMENT
??_C@_0M@PGCPLEOJ@CurrentPath?$AA@ DB 'CurrentPath', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PBPHDBPF@VSync?$AA@
CONST	SEGMENT
??_C@_05PBPHDBPF@VSync?$AA@ DB 'VSync', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OBADIEME@AudioChannels?$AA@
CONST	SEGMENT
??_C@_0O@OBADIEME@AudioChannels?$AA@ DB 'AudioChannels', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HHDALPEH@AudioFrequency?$AA@
CONST	SEGMENT
??_C@_0P@HHDALPEH@AudioFrequency?$AA@ DB 'AudioFrequency', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CBCDGBIF@FullScreen?$AA@
CONST	SEGMENT
??_C@_0L@CBCDGBIF@FullScreen?$AA@ DB 'FullScreen', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IFGCFGJL@ScreenBPP?$AA@
CONST	SEGMENT
??_C@_09IFGCFGJL@ScreenBPP?$AA@ DB 'ScreenBPP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MJNKNBDK@ScreenY?$AA@
CONST	SEGMENT
??_C@_07MJNKNBDK@ScreenY?$AA@ DB 'ScreenY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NAMBOAHL@ScreenX?$AA@
CONST	SEGMENT
??_C@_07NAMBOAHL@ScreenX?$AA@ DB 'ScreenX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DHPDHKIF@?$CFs?5?$DN?5?$CFd?$AA@
CONST	SEGMENT
??_C@_07DHPDHKIF@?$CFs?5?$DN?5?$CFd?$AA@ DB '%s = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OCOMPIPE@VSync?5?$DN?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0M@OCOMPIPE@VSync?5?$DN?5?$CFd?6?$AA@ DB 'VSync = %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OAMPIJBI@AudioChannels?5?$DN?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BE@OAMPIJBI@AudioChannels?5?$DN?5?$CFd?6?$AA@ DB 'AudioChannels = '
	DB	'%d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LFBKPFPE@AudioFrequency?5?$DN?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BF@LFBKPFPE@AudioFrequency?5?$DN?5?$CFd?6?$AA@ DB 'AudioFrequency '
	DB	'= %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CCGGOMJJ@ScreenBPP?5?$DN?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BA@CCGGOMJJ@ScreenBPP?5?$DN?5?$CFd?6?$AA@ DB 'ScreenBPP = %d', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PFGCCBAA@FullScreen?5?$DN?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BB@PFGCCBAA@FullScreen?5?$DN?5?$CFd?6?$AA@ DB 'FullScreen = %d', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FCKGFAIB@ScreenY?5?$DN?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0O@FCKGFAIB@ScreenY?5?$DN?5?$CFd?6?$AA@ DB 'ScreenY = %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JOAMFABP@ScreenX?5?$DN?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0O@JOAMFABP@ScreenX?5?$DN?5?$CFd?6?$AA@ DB 'ScreenX = %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DBJPLNLE@settings?4cfg?$AA@
CONST	SEGMENT
??_C@_0N@DBJPLNLE@settings?4cfg?$AA@ DB 'settings.cfg', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PDOBBJNA@Color?$AA@
CONST	SEGMENT
??_C@_05PDOBBJNA@Color?$AA@ DB 'Color', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NGMLKGCO@TexCoord?$AA@
CONST	SEGMENT
??_C@_08NGMLKGCO@TexCoord?$AA@ DB 'TexCoord', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GCJNLIKG@Position?$AA@
CONST	SEGMENT
??_C@_08GCJNLIKG@Position?$AA@ DB 'Position', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07EDEMHDKD@ProjMtx?$AA@
CONST	SEGMENT
??_C@_07EDEMHDKD@ProjMtx?$AA@ DB 'ProjMtx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GKACAEDJ@Texture?$AA@
CONST	SEGMENT
??_C@_07GKACAEDJ@Texture?$AA@ DB 'Texture', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@FPHDOHKN@?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAG?$AAL?$AA_?$AAT?$AAR?$AAU?$AAE?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@FPHDOHKN@?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAG?$AAL?$AA_?$AAT?$AAR?$AAU?$AAE?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'u', 00H, 's', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'G', 00H, 'L', 00H, '_', 00H, 'T'
	DB	00H, 'R', 00H, 'U', 00H, 'E', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HM@DKHOBLCB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
CONST	SEGMENT
??_C@_1HM@DKHOBLCB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'c', 00H, 'o'
	DB	00H, 's', 00H, '\', 00H, 'd', 00H, 'e', 00H, 's', 00H, 'k', 00H
	DB	't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'j'
	DB	00H, '\', 00H, 'm', 00H, 'g', 00H, 'e', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, '1', 00H, '\', 00H, 'm', 00H, 'g', 00H, 'e', 00H, 'a'
	DB	00H, 'r', 00H, '-', 00H, '1', 00H, '\', 00H, 'n', 00H, 'u', 00H
	DB	'k', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, '_', 00H, 's'
	DB	00H, 'd', 00H, 'l', 00H, '_', 00H, 'g', 00H, 'l', 00H, '3', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_sdl_device_create@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_sdl_device_create@@9@9 DD 04cH	; `nk_sdl_device_create'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_menu_begin_symbol_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_menu_begin_symbol_text@@9@9 DD 05c1aH ; `nk_menu_begin_symbol_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_menu_begin_image_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_menu_begin_image_text@@9@9 DD 05bfbH ; `nk_menu_begin_image_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_menu_begin_symbol@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_menu_begin_symbol@@9@9 DD 05be1H	; `nk_menu_begin_symbol'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_menu_begin_image@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_menu_begin_image@@9@9 DD 05bc7H	; `nk_menu_begin_image'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_menu_begin_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_menu_begin_text@@9@9 DD 05ba9H	; `nk_menu_begin_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_menu_begin@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_menu_begin@@9@9@ddf8d5d8 DD 05b87H	; `nk_menu_begin'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BI@CBJAPKKM@?$AAi?$AAt?$AAe?$AAm?$AA_?$AAg?$AAe?$AAt?$AAt?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@CBJAPKKM@?$AAi?$AAt?$AAe?$AAm?$AA_?$AAg?$AAe?$AAt?$AAt?$AAe?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, '_', 00H, 'g', 00H, 'e', 00H
	DB	't', 00H, 't', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_combo_callback@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_combo_callback@@9@9 DD 05b4bH	; `nk_combo_callback'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DK@MJNAGHOF@?$AAi?$AAt?$AAe?$AAm?$AAs?$AA_?$AAs?$AAe?$AAp?$AAa?$AAr?$AAa?$AAt?$AAe?$AAd?$AA_?$AAb?$AAy?$AA_?$AAs?$AAe?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@MJNAGHOF@?$AAi?$AAt?$AAe?$AAm?$AAs?$AA_?$AAs?$AAe?$AAp?$AAa?$AAr?$AAa?$AAt?$AAe?$AAd?$AA_?$AAb?$AAy?$AA_?$AAs?$AAe?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 's', 00H, '_', 00H, 's', 00H
	DB	'e', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 'd', 00H, '_', 00H, 'b', 00H, 'y', 00H, '_', 00H, 's', 00H
	DB	'e', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_combo_separator@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_combo_separator@@9@9 DD 05b14H	; `nk_combo_separator'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1M@JLJIPHMC@?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1M@JLJIPHMC@?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$AA@ DB 'i', 00H, 't', 00H
	DB	'e', 00H, 'm', 00H, 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_combo@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_combo@@9@9 DD 05af5H		; `nk_combo'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_combo_begin_image_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_combo_begin_image_text@@9@9 DD 05a75H ; `nk_combo_begin_image_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_combo_begin_image@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_combo_begin_image@@9@9 DD 05a26H	; `nk_combo_begin_image'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_combo_begin_symbol_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_combo_begin_symbol_text@@9@9 DD 059c6H ; `nk_combo_begin_symbol_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_combo_begin_symbol@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_combo_begin_symbol@@9@9 DD 0596dH	; `nk_combo_begin_symbol'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_combo_begin_color@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_combo_begin_color@@9@9 DD 0591fH	; `nk_combo_begin_color'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BC@BAHMPCLB@?$AAs?$AAe?$AAl?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@BAHMPCLB@?$AAs?$AAe?$AAl?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$AA@ DB 's'
	DB	00H, 'e', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'e', 00H
	DB	'd', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_combo_begin_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_combo_begin_text@@9@9 DD 058c3H	; `nk_combo_begin_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_combo_begin@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_combo_begin@@9@9@ddf8d5d8 DD 058a0H	; `nk_combo_begin'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EC@DJLEFCBF@?$AAp?$AAa?$AAn?$AAe?$AAl?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAP?$AAA?$AAN?$AAE?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAP?$AAO?$AAP?$AAU?$AAP@
CONST	SEGMENT
??_C@_1EC@DJLEFCBF@?$AAp?$AAa?$AAn?$AAe?$AAl?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAP?$AAA?$AAN?$AAE?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAP?$AAO?$AAP?$AAU?$AAP@ DB 'p'
	DB	00H, 'a', 00H, 'n', 00H, 'e', 00H, 'l', 00H, '-', 00H, '>', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '&', 00H, ' '
	DB	00H, 'N', 00H, 'K', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'N', 00H
	DB	'E', 00H, 'L', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, '_'
	DB	00H, 'P', 00H, 'O', 00H, 'P', 00H, 'U', 00H, 'P', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_contextual_end@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_contextual_end@@9@9 DD 05875H	; `nk_contextual_end'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_contextual_close@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_contextual_close@@9@9 DD 0586bH	; `nk_contextual_close'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_contextual_item_symbol_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_contextual_item_symbol_text@@9@9 DD 05849H ; `nk_contextual_item_symbol_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_contextual_item_image_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_contextual_item_image_text@@9@9 DD 05826H ; `nk_contextual_item_image_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_contextual_item_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_contextual_item_text@@9@9 DD 05804H	; `nk_contextual_item_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_contextual_begin@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_contextual_begin@@9@9 DD 057ccH	; `nk_contextual_begin'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_tooltip@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_tooltip@@9@9 DD 057a3H		; `nk_tooltip'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_tooltip_end@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_tooltip_end@@9@9 DD 05798H		; `nk_tooltip_end'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BA@FIOIOCM@__?$CD?$CDTooltip?$CD?$CD__?$AA@
CONST	SEGMENT
??_C@_0BA@FIOIOCM@__?$CD?$CDTooltip?$CD?$CD__?$AA@ DB '__##Tooltip##__', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_tooltip_begin@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_tooltip_begin@@9@9 DD 05777H	; `nk_tooltip_begin'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_popup_end@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_popup_end@@9@9 DD 05752H		; `nk_popup_end'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FC@NEPNGFGJ@?$AAp?$AAo?$AAp?$AAu?$AAp?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAP?$AAA?$AAN?$AAE?$AAL?$AA_?$AAS@
CONST	SEGMENT
??_C@_1FC@NEPNGFGJ@?$AAp?$AAo?$AAp?$AAu?$AAp?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAP?$AAA?$AAN?$AAE?$AAL?$AA_?$AAS@ DB 'p'
	DB	00H, 'o', 00H, 'p', 00H, 'u', 00H, 'p', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 't', 00H, '-'
	DB	00H, '>', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H
	DB	'&', 00H, ' ', 00H, 'N', 00H, 'K', 00H, '_', 00H, 'P', 00H, 'A'
	DB	00H, 'N', 00H, 'E', 00H, 'L', 00H, '_', 00H, 'S', 00H, 'E', 00H
	DB	'T', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'P', 00H, 'U', 00H, 'P'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@KLACOFEL@?$AAp?$AAo?$AAp?$AAu?$AAp?$AA?9?$AA?$DO?$AAp?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@KLACOFEL@?$AAp?$AAo?$AAp?$AAu?$AAp?$AA?9?$AA?$DO?$AAp?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$AA@ DB 'p'
	DB	00H, 'o', 00H, 'p', 00H, 'u', 00H, 'p', 00H, '-', 00H, '>', 00H
	DB	'p', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_popup_close@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_popup_close@@9@9 DD 05745H		; `nk_popup_close'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BM@OHHEFNGN@?$AAp?$AAo?$AAp?$AAu?$AAp?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@OHHEFNGN@?$AAp?$AAo?$AAp?$AAu?$AAp?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@ DB 'p'
	DB	00H, 'o', 00H, 'p', 00H, 'u', 00H, 'p', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@JEAJFHEO@?$AA?$CB?$AA?$CI?$AAp?$AAa?$AAn?$AAe?$AAl?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAP?$AAA?$AAN?$AAE?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAP?$AAO?$AAP@
CONST	SEGMENT
??_C@_1EI@JEAJFHEO@?$AA?$CB?$AA?$CI?$AAp?$AAa?$AAn?$AAe?$AAl?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAP?$AAA?$AAN?$AAE?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAP?$AAO?$AAP@ DB '!'
	DB	00H, '(', 00H, 'p', 00H, 'a', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	'-', 00H, '>', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' '
	DB	00H, '&', 00H, ' ', 00H, 'N', 00H, 'K', 00H, '_', 00H, 'P', 00H
	DB	'A', 00H, 'N', 00H, 'E', 00H, 'L', 00H, '_', 00H, 'S', 00H, 'E'
	DB	00H, 'T', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'P', 00H, 'U', 00H
	DB	'P', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_nonblock_begin@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_nonblock_begin@@9@9@ddf8d5d8 DD 056f6H ; `nk_nonblock_begin'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1JO@DBBBPONP@?$AA?$CB?$AA?$CI?$AAp?$AAa?$AAn?$AAe?$AAl?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAP?$AAA?$AAN?$AAE?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAP?$AAO?$AAP@
CONST	SEGMENT
??_C@_1JO@DBBBPONP@?$AA?$CB?$AA?$CI?$AAp?$AAa?$AAn?$AAe?$AAl?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAP?$AAA?$AAN?$AAE?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAP?$AAO?$AAP@ DB '!'
	DB	00H, '(', 00H, 'p', 00H, 'a', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	'-', 00H, '>', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' '
	DB	00H, '&', 00H, ' ', 00H, 'N', 00H, 'K', 00H, '_', 00H, 'P', 00H
	DB	'A', 00H, 'N', 00H, 'E', 00H, 'L', 00H, '_', 00H, 'S', 00H, 'E'
	DB	00H, 'T', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'P', 00H, 'U', 00H
	DB	'P', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"'
	DB	00H, 'p', 00H, 'o', 00H, 'p', 00H, 'u', 00H, 'p', 00H, 's', 00H
	DB	' ', 00H, 'a', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H
	DB	'w', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' '
	DB	00H, 'h', 00H, 'a', 00H, 'v', 00H, 'e', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'p', 00H, 'u', 00H, 'p', 00H, 's', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@PGMENGHG@popups?5are?5not?5allowed?5to?5have?5p@
CONST	SEGMENT
??_C@_0CG@PGMENGHG@popups?5are?5not?5allowed?5to?5have?5p@ DB 'popups are'
	DB	' not allowed to have popups', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_popup_begin@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_popup_begin@@9@9 DD 05694H		; `nk_popup_begin'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CK@PJMKKIBM@?$AAv?$AAi?$AAe?$AAw?$AA?9?$AA?$DO?$AAs?$AAc?$AAr?$AAo?$AAl?$AAl?$AA_?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@PJMKKIBM@?$AAv?$AAi?$AAe?$AAw?$AA?9?$AA?$DO?$AAs?$AAc?$AAr?$AAo?$AAl?$AAl?$AA_?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'v'
	DB	00H, 'i', 00H, 'e', 00H, 'w', 00H, '-', 00H, '>', 00H, 's', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 'l', 00H, '_', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@PIEBDDFH@?$AAv?$AAi?$AAe?$AAw?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@PIEBDDFH@?$AAv?$AAi?$AAe?$AAw?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?$AA@ DB 'v'
	DB	00H, 'i', 00H, 'e', 00H, 'w', 00H, '-', 00H, '>', 00H, 'c', 00H
	DB	't', 00H, 'x', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_list_view_end@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_list_view_end@@9@9 DD 0567aH	; `nk_list_view_end'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_19IGFHNPAK@?$AAv?$AAi?$AAe?$AAw?$AA?$AA@
CONST	SEGMENT
??_C@_19IGFHNPAK@?$AAv?$AAi?$AAe?$AAw?$AA?$AA@ DB 'v', 00H, 'i', 00H, 'e', 00H
	DB	'w', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_list_view_begin@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_list_view_begin@@9@9 DD 05645H	; `nk_list_view_begin'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BC@LAFIKKBI@?$AAy?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@LAFIKKBI@?$AAy?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$AA@ DB 'y'
	DB	00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@FPAKBMPJ@?$AAx?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@FPAKBMPJ@?$AAx?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$AA@ DB 'x'
	DB	00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_group_begin@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_group_begin@@9@9 DD 0561fH		; `nk_group_begin'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BE@KEJBMHNG@?$AAg?$AA?9?$AA?$DO?$AAp?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@KEJBMHNG@?$AAg?$AA?9?$AA?$DO?$AAp?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$AA@ DB 'g'
	DB	00H, '-', 00H, '>', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@MGIMHMOI@?$AAw?$AAi?$AAn?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@MGIMHMOI@?$AAw?$AAi?$AAn?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@ DB 'w'
	DB	00H, 'i', 00H, 'n', 00H, '-', 00H, '>', 00H, 'l', 00H, 'a', 00H
	DB	'y', 00H, 'o', 00H, 'u', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_group_scrolled_end@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_group_scrolled_end@@9@9 DD 055dbH	; `nk_group_scrolled_end'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BK@MGBAIKDD@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA_?$AAg?$AAe?$AAt?$AAt?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@MGBAIKDD@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA_?$AAg?$AAe?$AAt?$AAt?$AAe?$AAr?$AA?$AA@ DB 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '_', 00H, 'g', 00H
	DB	'e', 00H, 't', 00H, 't', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_plot_function@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_plot_function@@9@9 DD 0558bH	; `nk_plot_function'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1O@IBMGLEDN@?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1O@IBMGLEDN@?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$AA@ DB 'v', 00H, 'a'
	DB	00H, 'l', 00H, 'u', 00H, 'e', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_plot@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_plot@@9@9 DD 05571H			; `nk_plot'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_chart_end@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_chart_end@@9@9 DD 0555fH		; `nk_chart_end'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FA@NCCAOEEL@?$AAs?$AAl?$AAo?$AAt?$AA?5?$AA?$DM?$AA?5?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAa@
CONST	SEGMENT
??_C@_1FA@NCCAOEEL@?$AAs?$AAl?$AAo?$AAt?$AA?5?$AA?$DM?$AA?5?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAa@ DB 's'
	DB	00H, 'l', 00H, 'o', 00H, 't', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'c', 00H, 't', 00H, 'x', 00H, '-', 00H, '>', 00H, 'c', 00H, 'u'
	DB	00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, '-', 00H
	DB	'>', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 't'
	DB	00H, '-', 00H, '>', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H
	DB	't', 00H, '.', 00H, 's', 00H, 'l', 00H, 'o', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_chart_push_slot@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_chart_push_slot@@9@9 DD 05540H	; `nk_chart_push_slot'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_chart_push_column@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_chart_push_column@@9@9@ddf8d5d8 DD 05512H ; `nk_chart_push_column'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CM@OFPHFACA@?$AAs?$AAl?$AAo?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAl?$AAo?$AAt?$AA?5?$AA?$DM?$AA?5?$AA4?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@OFPHFACA@?$AAs?$AAl?$AAo?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAl?$AAo?$AAt?$AA?5?$AA?$DM?$AA?5?$AA4?$AA?$AA@ DB 's'
	DB	00H, 'l', 00H, 'o', 00H, 't', 00H, ' ', 00H, '>', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 's'
	DB	00H, 'l', 00H, 'o', 00H, 't', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'4', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_chart_push_line@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_chart_push_line@@9@9@ddf8d5d8 DD 054cbH ; `nk_chart_push_line'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EK@IHPMBODD@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAa?$AAr?$AAt?$AA?4?$AAs?$AAl?$AAo?$AAt@
CONST	SEGMENT
??_C@_1EK@IHPMBODD@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAa?$AAr?$AAt?$AA?4?$AAs?$AAl?$AAo?$AAt@ DB 'c'
	DB	00H, 't', 00H, 'x', 00H, '-', 00H, '>', 00H, 'c', 00H, 'u', 00H
	DB	'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, '-', 00H, '>'
	DB	00H, 'l', 00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'-', 00H, '>', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '.', 00H, 's', 00H, 'l', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, '4', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_chart_add_slot_colored@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_chart_add_slot_colored@@9@9 DD 054afH ; `nk_chart_add_slot_colored'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_chart_begin_colored@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_chart_begin_colored@@9@9 DD 0546eH	; `nk_chart_begin_colored'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_color_pick@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_color_pick@@9@9 DD 05443H		; `nk_color_pick'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_propertyd@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_propertyd@@9@9 DD 0542fH		; `nk_propertyd'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_propertyf@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_propertyf@@9@9 DD 05420H		; `nk_propertyf'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_propertyi@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_propertyi@@9@9 DD 05411H		; `nk_propertyi'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_property_double@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_property_double@@9@9 DD 05402H	; `nk_property_double'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_property_float@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_property_float@@9@9 DD 053f3H	; `nk_property_float'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_17ECLKCMMF@?$AAv?$AAa?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_17ECLKCMMF@?$AAv?$AAa?$AAl?$AA?$AA@ DB 'v', 00H, 'a', 00H, 'l', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_property_int@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_property_int@@9@9 DD 053e4H		; `nk_property_int'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_property@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_property@@9@9@ddf8d5d8 DD 0537fH	; `nk_property'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_19LELMJPKF@?$AAe?$AAd?$AAi?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_19LELMJPKF@?$AAe?$AAd?$AAi?$AAt?$AA?$AA@ DB 'e', 00H, 'd', 00H, 'i', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_edit_buffer@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_edit_buffer@@9@9 DD 0530dH		; `nk_edit_buffer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_edit_string@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_edit_string@@9@9 DD 052d3H		; `nk_edit_string'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_edit_unfocus@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_edit_unfocus@@9@9 DD 052c5H		; `nk_edit_unfocus'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_edit_focus@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_edit_focus@@9@9 DD 052b3H		; `nk_edit_focus'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_17FOGAHDKL@?$AAc?$AAu?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_17FOGAHDKL@?$AAc?$AAu?$AAr?$AA?$AA@ DB 'c', 00H, 'u', 00H, 'r', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_progress@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_progress@@9@9 DD 0528bH		; `nk_progress'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_slider_float@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_slider_float@@9@9 DD 0524cH		; `nk_slider_float'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_radio_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_radio_text@@9@9 DD 05231H		; `nk_radio_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_option_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_option_text@@9@9 DD 05214H		; `nk_option_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1M@PIKEIEDD@?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1M@PIKEIEDD@?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?$AA@ DB 'f', 00H, 'l', 00H
	DB	'a', 00H, 'g', 00H, 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_checkbox_flags_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_checkbox_flags_text@@9@9 DD 051efH	; `nk_checkbox_flags_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1O@IBNPCBAA@?$AAa?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1O@IBNPCBAA@?$AAa?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?$AA@ DB 'a', 00H, 'c'
	DB	00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_checkbox_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_checkbox_text@@9@9 DD 051e1H	; `nk_checkbox_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_check_flags_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_check_flags_text@@9@9 DD 051d3H	; `nk_check_flags_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_check_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_check_text@@9@9 DD 051b5H		; `nk_check_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_selectable_image_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_selectable_image_text@@9@9 DD 0517dH ; `nk_selectable_image_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_selectable_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_selectable_text@@9@9 DD 0515fH	; `nk_selectable_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_button_image_text_styled@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_button_image_text_styled@@9@9 DD 0512fH ; `nk_button_image_text_styled'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_button_symbol_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_button_symbol_text@@9@9 DD 0511cH	; `nk_button_symbol_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_button_symbol_text_styled@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_button_symbol_text_styled@@9@9 DD 05100H ; `nk_button_symbol_text_styled'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_button_image@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_button_image@@9@9 DD 050f6H		; `nk_button_image'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_button_image_styled@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_button_image_styled@@9@9 DD 050dcH	; `nk_button_image_styled'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_button_symbol@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_button_symbol@@9@9 DD 050d3H	; `nk_button_symbol'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_button_symbol_styled@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_button_symbol_styled@@9@9 DD 050baH	; `nk_button_symbol_styled'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_button_color@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_button_color@@9@9 DD 05095H		; `nk_button_color'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_button_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_button_text@@9@9 DD 05086H		; `nk_button_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_button_text_styled@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_button_text_styled@@9@9 DD 0506bH	; `nk_button_text_styled'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CO@FDFLJFOK@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@FDFLJFOK@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'b'
	DB	00H, 'u', 00H, 't', 00H, 't', 00H, 'o', 00H, 'n', 00H, '_', 00H
	DB	's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, '-', 00H, '>'
	DB	00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ' ', 00H, '>', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_button_pop_behavior@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_button_pop_behavior@@9@9 DD 05057H	; `nk_button_pop_behavior'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1LK@JEBCHHPP@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo@
CONST	SEGMENT
??_C@_1LK@JEBCHHPP@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo@ DB 'b'
	DB	00H, 'u', 00H, 't', 00H, 't', 00H, 'o', 00H, 'n', 00H, '_', 00H
	DB	's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, '-', 00H, '>'
	DB	00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, '(', 00H, 'i', 00H, 'n', 00H, 't', 00H, ')', 00H, '('
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H
	DB	'(', 00H, 'b', 00H, 'u', 00H, 't', 00H, 't', 00H, 'o', 00H, 'n'
	DB	00H, '_', 00H, 's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H
	DB	'-', 00H, '>', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 's', 00H, ')', 00H, '/', 00H, 's', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, 'b'
	DB	00H, 'u', 00H, 't', 00H, 't', 00H, 'o', 00H, 'n', 00H, '_', 00H
	DB	's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, '-', 00H, '>'
	DB	00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H
	DB	't', 00H, 's', 00H, ')', 00H, '[', 00H, '0', 00H, ']', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_button_push_behavior@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_button_push_behavior@@9@9 DD 05042H	; `nk_button_push_behavior'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_button_set_behavior@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_button_set_behavior@@9@9 DD 0503aH	; `nk_button_set_behavior'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_image@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_image@@9@9 DD 05025H		; `nk_image'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_text_wrap@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_text_wrap@@9@9 DD 0500cH		; `nk_text_wrap'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_text@@9@9 DD 05004H			; `nk_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BN@KPPADBIM@?$CFs?3?5?$CI?$CF?42f?0?5?$CF?42f?0?5?$CF?42f?0?5?$CF?42f?$CJ?$AA@
CONST	SEGMENT
??_C@_0BN@KPPADBIM@?$CFs?3?5?$CI?$CF?42f?0?5?$CF?42f?0?5?$CF?42f?0?5?$CF?42f?$CJ?$AA@ DB '%'
	DB	's: (%.2f, %.2f, %.2f, %.2f)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LMCNFMJH@?$CFs?3?5?$CI?$CFd?0?5?$CFd?0?5?$CFd?0?5?$CFd?$CJ?$AA@
CONST	SEGMENT
??_C@_0BF@LMCNFMJH@?$CFs?3?5?$CI?$CFd?0?5?$CFd?0?5?$CFd?0?5?$CFd?$CJ?$AA@ DB '%'
	DB	's: (%d, %d, %d, %d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08KELGKKHF@?$CFs?3?5?$CF?43f?$AA@
CONST	SEGMENT
??_C@_08KELGKKHF@?$CFs?3?5?$CF?43f?$AA@ DB '%s: %.3f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFMNEPHE@?$CFs?3?5?$CFu?$AA@
CONST	SEGMENT
??_C@_06FFMNEPHE@?$CFs?3?5?$CFu?$AA@ DB '%s: %u', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GBEGMGE@?$CFs?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_06GBEGMGE@?$CFs?3?5?$CFd?$AA@ DB '%s: %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJHOIPC@?$CFs?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_06DJHOIPC@?$CFs?3?5?$CFs?$AA@ DB '%s: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_text_wrap_colored@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_text_wrap_colored@@9@9 DD 04f92H	; `nk_text_wrap_colored'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_text_colored@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_text_colored@@9@9 DD 04f76H		; `nk_text_colored'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_spacing@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_spacing@@9@9 DD 04f4fH		; `nk_spacing'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_widget_fitting@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_widget_fitting@@9@9 DD 04f29H	; `nk_widget_fitting'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_widget@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_widget@@9@9 DD 04ef7H		; `nk_widget'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_widget_has_mouse_click_down@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_widget_has_mouse_click_down@@9@9 DD 04ee0H ; `nk_widget_has_mouse_click_down'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_widget_is_mouse_clicked@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_widget_is_mouse_clicked@@9@9 DD 04ec9H ; `nk_widget_is_mouse_clicked'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_widget_is_hovered@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_widget_is_hovered@@9@9 DD 04eb2H	; `nk_widget_is_hovered'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_widget_height@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_widget_height@@9@9 DD 04ea5H	; `nk_widget_height'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_widget_width@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_widget_width@@9@9 DD 04e98H		; `nk_widget_width'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_widget_size@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_widget_size@@9@9 DD 04e8bH		; `nk_widget_size'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_widget_position@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_widget_position@@9@9 DD 04e7eH	; `nk_widget_position'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_widget_bounds@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_widget_bounds@@9@9 DD 04e72H	; `nk_widget_bounds'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CO@ONCLGDAH@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAr?$AAe?$AAe?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@ONCLGDAH@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAr?$AAe?$AAe?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?$AA@ DB 'l'
	DB	00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 't', 00H, '-', 00H
	DB	'>', 00H, 'r', 00H, 'o', 00H, 'w', 00H, '.', 00H, 't', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'd', 00H, 'e', 00H, 'p', 00H
	DB	't', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_tree_state_pop@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_tree_state_pop@@9@9 DD 04e49H	; `nk_tree_state_pop'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_tree_state_base@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_tree_state_base@@9@9@ddf8d5d8 DD 04dbcH ; `nk_tree_state_base'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_peek@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_peek@@9@9@ddf8d5d8 DD 04da0H	; `nk_layout_peek'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_panel_alloc_space@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_panel_alloc_space@@9@9@ddf8d5d8 DD 04d89H ; `nk_panel_alloc_space'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CO@JFBIDLDE@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AA1?$AA6?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@JFBIDLDE@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AA1?$AA6?$AA?$AA@ DB 'l'
	DB	00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 't', 00H, '-', 00H
	DB	'>', 00H, 'r', 00H, 'o', 00H, 'w', 00H, '.', 00H, 'i', 00H, 'n'
	DB	00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'1', 00H, '6', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@JKACIFKJ@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4@
CONST	SEGMENT
??_C@_1FA@JKACIFKJ@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4@ DB 'l'
	DB	00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 't', 00H, '-', 00H
	DB	'>', 00H, 'r', 00H, 'o', 00H, 'w', 00H, '.', 00H, 'i', 00H, 'n'
	DB	00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'l', 00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 't', 00H, '-'
	DB	00H, '>', 00H, 'r', 00H, 'o', 00H, 'w', 00H, '.', 00H, 'c', 00H
	DB	'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@DKKICNJC@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAr?$AAa?$AAt?$AAi?$AAo?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@DKKICNJC@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAr?$AAa?$AAt?$AAi?$AAo?$AA?$AA@ DB 'l'
	DB	00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 't', 00H, '-', 00H
	DB	'>', 00H, 'r', 00H, 'o', 00H, 'w', 00H, '.', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@CGNPIAKO@?$AAb?$AAo?$AAu?$AAn?$AAd?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1O@CGNPIAKO@?$AAb?$AAo?$AAu?$AAn?$AAd?$AAs?$AA?$AA@ DB 'b', 00H, 'o'
	DB	00H, 'u', 00H, 'n', 00H, 'd', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_widget_space@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_widget_space@@9@9@ddf8d5d8 DD 04d07H ; `nk_layout_widget_space'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_space_rect_to_local@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_space_rect_to_local@@9@9 DD 04cecH ; `nk_layout_space_rect_to_local'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_space_rect_to_screen@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_space_rect_to_screen@@9@9 DD 04cdbH ; `nk_layout_space_rect_to_screen'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_space_to_local@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_space_to_local@@9@9 DD 04ccaH ; `nk_layout_space_to_local'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_space_to_screen@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_space_to_screen@@9@9 DD 04cb9H ; `nk_layout_space_to_screen'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_widget_bounds@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_widget_bounds@@9@9 DD 04ca5H	; `nk_layout_widget_bounds'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_space_bounds@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_space_bounds@@9@9 DD 04c91H	; `nk_layout_space_bounds'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_space_push@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_space_push@@9@9 DD 04c80H	; `nk_layout_space_push'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_space_end@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_space_end@@9@9 DD 04c6cH	; `nk_layout_space_end'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_space_begin@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_space_begin@@9@9 DD 04c53H	; `nk_layout_space_begin'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_row_template_end@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_row_template_end@@9@9 DD 04c1eH ; `nk_layout_row_template_end'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_row_template_push_static@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_row_template_push_static@@9@9 DD 04c09H ; `nk_layout_row_template_push_static'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_row_template_push_variable@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_row_template_push_variable@@9@9 DD 04bf4H ; `nk_layout_row_template_push_variable'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DC@ELAOKKAE@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?5?$AA?$DM?$AA?5?$AA1?$AA6?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@ELAOKKAE@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?5?$AA?$DM?$AA?5?$AA1?$AA6?$AA?$AA@ DB 'l'
	DB	00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 't', 00H, '-', 00H
	DB	'>', 00H, 'r', 00H, 'o', 00H, 'w', 00H, '.', 00H, 'c', 00H, 'o'
	DB	00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, 's', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, '1', 00H, '6', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@MCBIGAOG@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAL?$AAA?$AAY?$AAO?$AAU?$AAT?$AA_?$AAT?$AAE@
CONST	SEGMENT
??_C@_1EO@MCBIGAOG@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAL?$AAA?$AAY?$AAO?$AAU?$AAT?$AA_?$AAT?$AAE@ DB 'l'
	DB	00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 't', 00H, '-', 00H
	DB	'>', 00H, 'r', 00H, 'o', 00H, 'w', 00H, '.', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'N', 00H, 'K', 00H, '_', 00H, 'L', 00H, 'A', 00H, 'Y', 00H, 'O'
	DB	00H, 'U', 00H, 'T', 00H, '_', 00H, 'T', 00H, 'E', 00H, 'M', 00H
	DB	'P', 00H, 'L', 00H, 'A', 00H, 'T', 00H, 'E', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_row_template_push_dynamic@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_row_template_push_dynamic@@9@9 DD 04bdfH ; `nk_layout_row_template_push_dynamic'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_row_template_begin@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_row_template_begin@@9@9 DD 04bc3H ; `nk_layout_row_template_begin'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_row@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_row@@9@9 DD 04b9cH		; `nk_layout_row'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_row_end@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_row_end@@9@9 DD 04b86H	; `nk_layout_row_end'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1KM@KNMABCOH@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAL?$AAA?$AAY?$AAO?$AAU?$AAT?$AA_?$AAS?$AAT@
CONST	SEGMENT
??_C@_1KM@KNMABCOH@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAL?$AAA?$AAY?$AAO?$AAU?$AAT?$AA_?$AAS?$AAT@ DB 'l'
	DB	00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 't', 00H, '-', 00H
	DB	'>', 00H, 'r', 00H, 'o', 00H, 'w', 00H, '.', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'N', 00H, 'K', 00H, '_', 00H, 'L', 00H, 'A', 00H, 'Y', 00H, 'O'
	DB	00H, 'U', 00H, 'T', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'A', 00H
	DB	'T', 00H, 'I', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'O', 00H, 'W'
	DB	00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'l', 00H, 'a', 00H
	DB	'y', 00H, 'o', 00H, 'u', 00H, 't', 00H, '-', 00H, '>', 00H, 'r'
	DB	00H, 'o', 00H, 'w', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p', 00H
	DB	'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'K'
	DB	00H, '_', 00H, 'L', 00H, 'A', 00H, 'Y', 00H, 'O', 00H, 'U', 00H
	DB	'T', 00H, '_', 00H, 'D', 00H, 'Y', 00H, 'N', 00H, 'A', 00H, 'M'
	DB	00H, 'I', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'O', 00H, 'W', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_row_push@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_row_push@@9@9 DD 04b6bH	; `nk_layout_row_push'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_row_begin@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_row_begin@@9@9 DD 04b51H	; `nk_layout_row_begin'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BI@OOJBMBEL@?$AAp?$AAi?$AAx?$AAe?$AAl?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@OOJBMBEL@?$AAp?$AAi?$AAx?$AAe?$AAl?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@ DB 'p'
	DB	00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, '_', 00H, 'w', 00H
	DB	'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_ratio_from_pixel@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_ratio_from_pixel@@9@9 DD 04b39H ; `nk_layout_ratio_from_pixel'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_row_layout@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_row_layout@@9@9@ddf8d5d8 DD 04b22H	; `nk_row_layout'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EI@PPLANDAM@?$AA?$CB?$AA?$CI?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAW?$AAI?$AAN?$AAD?$AAO?$AAW?$AA_?$AAC?$AAL?$AAO?$AAS@
CONST	SEGMENT
??_C@_1EI@PPLANDAM@?$AA?$CB?$AA?$CI?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAW?$AAI?$AAN?$AAD?$AAO?$AAW?$AA_?$AAC?$AAL?$AAO?$AAS@ DB '!'
	DB	00H, '(', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, '-', 00H, '>', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g'
	DB	00H, 's', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'N', 00H, 'K', 00H
	DB	'_', 00H, 'W', 00H, 'I', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, '_', 00H, 'C', 00H, 'L', 00H, 'O', 00H, 'S', 00H, 'E', 00H
	DB	'D', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@DELDILCF@?$AA?$CB?$AA?$CI?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAW?$AAI?$AAN?$AAD?$AAO?$AAW?$AA_?$AAH?$AAI?$AAD?$AAD@
CONST	SEGMENT
??_C@_1EI@DELDILCF@?$AA?$CB?$AA?$CI?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAW?$AAI?$AAN?$AAD?$AAO?$AAW?$AA_?$AAH?$AAI?$AAD?$AAD@ DB '!'
	DB	00H, '(', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, '-', 00H, '>', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g'
	DB	00H, 's', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'N', 00H, 'K', 00H
	DB	'_', 00H, 'W', 00H, 'I', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, '_', 00H, 'H', 00H, 'I', 00H, 'D', 00H, 'D', 00H, 'E', 00H
	DB	'N', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@JPIFGEEN@?$AA?$CB?$AA?$CI?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAW?$AAI?$AAN?$AAD?$AAO?$AAW?$AA_?$AAM?$AAI?$AAN?$AAI@
CONST	SEGMENT
??_C@_1EO@JPIFGEEN@?$AA?$CB?$AA?$CI?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAW?$AAI?$AAN?$AAD?$AAO?$AAW?$AA_?$AAM?$AAI?$AAN?$AAI@ DB '!'
	DB	00H, '(', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, '-', 00H, '>', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g'
	DB	00H, 's', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'N', 00H, 'K', 00H
	DB	'_', 00H, 'W', 00H, 'I', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, '_', 00H, 'M', 00H, 'I', 00H, 'N', 00H, 'I', 00H, 'M', 00H
	DB	'I', 00H, 'Z', 00H, 'E', 00H, 'D', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_panel_layout@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_panel_layout@@9@9@ddf8d5d8 DD 04aedH ; `nk_panel_layout'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_reset_min_row_height@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_reset_min_row_height@@9@9 DD 04ac4H ; `nk_layout_reset_min_row_height'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_layout_set_min_row_height@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_layout_set_min_row_height@@9@9 DD 04ab3H ; `nk_layout_set_min_row_height'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_menubar_end@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_menubar_end@@9@9 DD 04a8fH		; `nk_menubar_end'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EC@NJLDBDNI@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAa?$AAt?$AA_?$AAy?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAb?$AAo?$AAu?$AAn?$AAd?$AAs?$AA?4?$AAy@
CONST	SEGMENT
??_C@_1EC@NJLDBDNI@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAa?$AAt?$AA_?$AAy?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAb?$AAo?$AAu?$AAn?$AAd?$AAs?$AA?4?$AAy@ DB 'l'
	DB	00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 't', 00H, '-', 00H
	DB	'>', 00H, 'a', 00H, 't', 00H, '_', 00H, 'y', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, '-', 00H, '>', 00H, 'b', 00H, 'o', 00H, 'u'
	DB	00H, 'n', 00H, 'd', 00H, 's', 00H, '.', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_menubar_begin@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_menubar_begin@@9@9 DD 04a69H	; `nk_menubar_begin'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_set_focus@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_set_focus@@9@9 DD 04a51H	; `nk_window_set_focus'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_show_if@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_show_if@@9@9 DD 04a49H	; `nk_window_show_if'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_show@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_show@@9@9 DD 04a36H		; `nk_window_show'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_collapse_if@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_collapse_if@@9@9 DD 04a2eH	; `nk_window_collapse_if'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_collapse@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_collapse@@9@9 DD 04a1bH	; `nk_window_collapse'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_set_size@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_set_size@@9@9 DD 04a11H	; `nk_window_set_size'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_set_position@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_set_position@@9@9 DD 04a08H	; `nk_window_set_position'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_set_bounds@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_set_bounds@@9@9 DD 04a00H	; `nk_window_set_bounds'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1II@KEHDGIEG@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAw?$AAi?$AAn?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAY?$AAo?$AAu?$AA?5?$AAc?$AAa?$AAn?$AAn@
CONST	SEGMENT
??_C@_1II@KEHDGIEG@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAw?$AAi?$AAn?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAY?$AAo?$AAu?$AA?5?$AAc?$AAa?$AAn?$AAn@ DB 'c'
	DB	00H, 't', 00H, 'x', 00H, '-', 00H, '>', 00H, 'c', 00H, 'u', 00H
	DB	'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, '!'
	DB	00H, '=', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'Y', 00H, 'o', 00H, 'u'
	DB	00H, ' ', 00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 'c', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e'
	DB	00H, ' ', 00H, 'a', 00H, ' ', 00H, 'c', 00H, 'u', 00H, 'r', 00H
	DB	'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'l', 00H, 'y', 00H, ' '
	DB	00H, 'a', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H
	DB	' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@POGABMMP@You?5cannot?5close?5a?5currently?5act@
CONST	SEGMENT
??_C@_0CL@POGABMMP@You?5cannot?5close?5a?5currently?5act@ DB 'You cannot '
	DB	'close a currently active window', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_close@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_close@@9@9 DD 049f2H		; `nk_window_close'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_is_active@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_is_active@@9@9 DD 049d8H	; `nk_window_is_active'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_is_hidden@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_is_hidden@@9@9 DD 049c8H	; `nk_window_is_hidden'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_is_closed@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_is_closed@@9@9 DD 049b8H	; `nk_window_is_closed'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_is_collapsed@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_is_collapsed@@9@9 DD 049a8H	; `nk_window_is_collapsed'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_is_any_hovered@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_is_any_hovered@@9@9 DD 04984H ; `nk_window_is_any_hovered'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_is_hovered@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_is_hovered@@9@9 DD 04979H	; `nk_window_is_hovered'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_has_focus@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_has_focus@@9@9 DD 0496fH	; `nk_window_has_focus'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_get_panel@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_get_panel@@9@9 DD 04966H	; `nk_window_get_panel'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_get_canvas@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_get_canvas@@9@9 DD 0495cH	; `nk_window_get_canvas'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_get_content_region_size@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_get_content_region_size@@9@9 DD 04952H ; `nk_window_get_content_region_size'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_get_content_region_max@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_get_content_region_max@@9@9 DD 04947H ; `nk_window_get_content_region_max'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_get_content_region_min@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_get_content_region_min@@9@9 DD 0493dH ; `nk_window_get_content_region_min'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_get_content_region@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_get_content_region@@9@9 DD 04934H ; `nk_window_get_content_region'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_get_height@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_get_height@@9@9 DD 0492bH	; `nk_window_get_height'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_get_width@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_get_width@@9@9 DD 04922H	; `nk_window_get_width'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_get_size@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_get_size@@9@9 DD 04919H	; `nk_window_get_size'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_get_position@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_get_position@@9@9 DD 04910H	; `nk_window_get_position'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_window_get_bounds@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_window_get_bounds@@9@9 DD 04907H	; `nk_window_get_bounds'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1IC@IHIOPCBE@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAi?$AAf?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?5?$AAt?$AAr?$AAi?$AAg?$AAg?$AAe?$AAr@
CONST	SEGMENT
??_C@_1IC@IHIOPCBE@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAi?$AAf?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?5?$AAt?$AAr?$AAi?$AAg?$AAg?$AAe?$AAr@ DB 'c'
	DB	00H, 't', 00H, 'x', 00H, '-', 00H, '>', 00H, 'c', 00H, 'u', 00H
	DB	'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, '"', 00H, 'i', 00H, 'f', 00H, ' ', 00H
	DB	't', 00H, 'h', 00H, 'i', 00H, 's', 00H, ' ', 00H, 't', 00H, 'r'
	DB	00H, 'i', 00H, 'g', 00H, 'g', 00H, 'e', 00H, 'r', 00H, 's', 00H
	DB	' ', 00H, 'y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, 'g', 00H, 'o', 00H, 't', 00H, ' ', 00H, 't', 00H
	DB	'o', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, ' '
	DB	00H, '`', 00H, 'n', 00H, 'k', 00H, '_', 00H, 'b', 00H, 'e', 00H
	DB	'g', 00H, 'i', 00H, 'n', 00H, '`', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@PKIBPAED@if?5this?5triggers?5you?5forgot?5to?5c@
CONST	SEGMENT
??_C@_0CP@PKIBPAED@if?5this?5triggers?5you?5forgot?5to?5c@ DB 'if this tr'
	DB	'iggers you forgot to call `nk_begin`', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_end@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_end@@9@9 DD 048f4H			; `nk_end'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CK@MJEFJAFE@?$AAw?$AAi?$AAn?$AA?9?$AA?$DO?$AAs?$AAe?$AAq?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAs?$AAe?$AAq?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@MJEFJAFE@?$AAw?$AAi?$AAn?$AA?9?$AA?$DO?$AAs?$AAe?$AAq?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAs?$AAe?$AAq?$AA?$AA@ DB 'w'
	DB	00H, 'i', 00H, 'n', 00H, '-', 00H, '>', 00H, 's', 00H, 'e', 00H
	DB	'q', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'c', 00H, 't'
	DB	00H, 'x', 00H, '-', 00H, '>', 00H, 's', 00H, 'e', 00H, 'q', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1HO@LCINIEJG@?$AA?$CB?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAi?$AAf?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?5?$AAt?$AAr?$AAi?$AAg?$AAg?$AAe@
CONST	SEGMENT
??_C@_1HO@LCINIEJG@?$AA?$CB?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAi?$AAf?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?5?$AAt?$AAr?$AAi?$AAg?$AAg?$AAe@ DB '!'
	DB	00H, 'c', 00H, 't', 00H, 'x', 00H, '-', 00H, '>', 00H, 'c', 00H
	DB	'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'i', 00H, 'f', 00H
	DB	' ', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, ' ', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'g', 00H, 'g', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, ' ', 00H, 'y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'm'
	DB	00H, 'i', 00H, 's', 00H, 's', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'a', 00H, ' ', 00H, '`', 00H, 'n', 00H, 'k', 00H, '_', 00H, 'e'
	DB	00H, 'n', 00H, 'd', 00H, '`', 00H, ' ', 00H, 'c', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@NPLMGOOB@if?5this?5triggers?5you?5missed?5a?5?$GAn@
CONST	SEGMENT
??_C@_0CM@NPLMGOOB@if?5this?5triggers?5you?5missed?5a?5?$GAn@ DB 'if this'
	DB	' triggers you missed a `nk_end` call', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1LC@NJCFCJDB@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?4?$AAf?$AAo?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?4?$AAf?$AAo@
CONST	SEGMENT
??_C@_1LC@NJCFCJDB@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?4?$AAf?$AAo?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?4?$AAf?$AAo@ DB 'c'
	DB	00H, 't', 00H, 'x', 00H, '-', 00H, '>', 00H, 's', 00H, 't', 00H
	DB	'y', 00H, 'l', 00H, 'e', 00H, '.', 00H, 'f', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H
	DB	't', 00H, 'x', 00H, '-', 00H, '>', 00H, 's', 00H, 't', 00H, 'y'
	DB	00H, 'l', 00H, 'e', 00H, '.', 00H, 'f', 00H, 'o', 00H, 'n', 00H
	DB	't', 00H, '-', 00H, '>', 00H, 'w', 00H, 'i', 00H, 'd', 00H, 't'
	DB	00H, 'h', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H
	DB	'i', 00H, 'f', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's'
	DB	00H, ' ', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'g', 00H, 'g', 00H
	DB	'e', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'y', 00H, 'o', 00H, 'u'
	DB	00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'g', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, 'd'
	DB	00H, 'd', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'f', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@BJLINOEN@if?5this?5triggers?5you?5forgot?5to?5a@
CONST	SEGMENT
??_C@_0CK@BJLINOEN@if?5this?5triggers?5you?5forgot?5to?5a@ DB 'if this tr'
	DB	'iggers you forgot to add a font', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@NFEAPLNL@?$AAt?$AAi?$AAt?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@NFEAPLNL@?$AAt?$AAi?$AAt?$AAl?$AAe?$AA?$AA@ DB 't', 00H, 'i', 00H
	DB	't', 00H, 'l', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_19HHIIBINK@?$AAn?$AAa?$AAm?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_19HHIIBINK@?$AAn?$AAa?$AAm?$AAe?$AA?$AA@ DB 'n', 00H, 'a', 00H, 'm', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_begin_titled@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_begin_titled@@9@9 DD 0485aH		; `nk_begin_titled'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BI@HILBEPMH@?$AAi?$AAt?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAw?$AAi?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@HILBEPMH@?$AAi?$AAt?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAw?$AAi?$AAn?$AA?$AA@ DB 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_insert_window@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_insert_window@@9@9@ddf8d5d8 DD 04807H ; `nk_insert_window'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CG@NEBMOBMP@?$AAi?$AAt?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAi?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@NEBMOBMP@?$AAi?$AAt?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAi?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?$AA@ DB 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, '-', 00H, '>'
	DB	00H, 'n', 00H, 'e', 00H, 'x', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_find_window@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_find_window@@9@9@ddf8d5d8 DD 047f1H	; `nk_find_window'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_17IGALFJBG@?$AAt?$AAb?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_17IGALFJBG@?$AAt?$AAb?$AAl?$AA?$AA@ DB 't', 00H, 'b', 00H, 'l', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_add_value@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_add_value@@9@9@ddf8d5d8 DD 047a2H	; `nk_add_value'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_19DNIKFMHO@?$AAe?$AAl?$AAe?$AAm?$AA?$AA@
CONST	SEGMENT
??_C@_19DNIKFMHO@?$AAe?$AAl?$AAe?$AAm?$AA?$AA@ DB 'e', 00H, 'l', 00H, 'e', 00H
	DB	'm', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_create_page_element@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_create_page_element@@9@9@ddf8d5d8 DD 0471bH ; `nk_create_page_element'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DA@PKJELGCB@?$AA?$CB?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAr?$AAe?$AAe?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@PKJELGCB@?$AA?$CB?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAr?$AAe?$AAe?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?$AA@ DB '!'
	DB	00H, 'l', 00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'-', 00H, '>', 00H, 'r', 00H, 'o', 00H, 'w', 00H, '.', 00H, 't'
	DB	00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'd', 00H, 'e', 00H
	DB	'p', 00H, 't', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_panel_end@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_panel_end@@9@9@ddf8d5d8 DD 045deH	; `nk_panel_end'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@ DB 'c'
	DB	00H, 't', 00H, 'x', 00H, '-', 00H, '>', 00H, 'c', 00H, 'u', 00H
	DB	'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, '-', 00H, '>'
	DB	00H, 'l', 00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@ DB 'c'
	DB	00H, 't', 00H, 'x', 00H, '-', 00H, '>', 00H, 'c', 00H, 'u', 00H
	DB	'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_panel_begin@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_panel_begin@@9@9@ddf8d5d8 DD 04500H	; `nk_panel_begin'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk__next@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk__next@@9@9 DD 044a9H		; `nk__next'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk__begin@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk__begin@@9@9 DD 04494H		; `nk__begin'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_finish@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_finish@@9@9@ddf8d5d8 DD 04442H	; `nk_finish'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_finish_buffer@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_finish_buffer@@9@9@ddf8d5d8 DD 04439H ; `nk_finish_buffer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_finish_popup@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_finish_popup@@9@9@ddf8d5d8 DD 0442cH ; `nk_finish_popup'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_start_popup@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_start_popup@@9@9@ddf8d5d8 DD 0441bH	; `nk_start_popup'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_17MIEKGGLN@?$AAw?$AAi?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_17MIEKGGLN@?$AAw?$AAi?$AAn?$AA?$AA@ DB 'w', 00H, 'i', 00H, 'n', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_start@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_start@@9@9@ddf8d5d8 DD 04413H	; `nk_start'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_start_buffer@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_start_buffer@@9@9@ddf8d5d8 DD 04407H ; `nk_start_buffer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_clear@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_clear@@9@9 DD 043c1H		; `nk_clear'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_free@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_free@@9@9 DD 043aaH			; `nk_free'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_init@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_init@@9@9 DD 04393H			; `nk_init'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_19GLKFFFDC@?$AAp?$AAo?$AAo?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_19GLKFFFDC@?$AAp?$AAo?$AAo?$AAl?$AA?$AA@ DB 'p', 00H, 'o', 00H, 'o', 00H
	DB	'l', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_init_custom@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_init_custom@@9@9 DD 0437dH		; `nk_init_custom'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_init_fixed@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_init_fixed@@9@9 DD 04371H		; `nk_init_fixed'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_setup@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_setup@@9@9@ddf8d5d8 DD 04356H	; `nk_setup'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EG@GDCHEAAC@?$AAp?$AAo?$AAo?$AAl?$AA?9?$AA?$DO?$AAp?$AAa?$AAg?$AAe?$AAs?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AAp?$AAo?$AAo?$AAl?$AA?9?$AA?$DO?$AAc?$AAa?$AAp?$AAa?$AAc?$AAi@
CONST	SEGMENT
??_C@_1EG@GDCHEAAC@?$AAp?$AAo?$AAo?$AAl?$AA?9?$AA?$DO?$AAp?$AAa?$AAg?$AAe?$AAs?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AAp?$AAo?$AAo?$AAl?$AA?9?$AA?$DO?$AAc?$AAa?$AAp?$AAa?$AAc?$AAi@ DB 'p'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, '-', 00H, '>', 00H, 'p', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, 's', 00H, '-', 00H, '>', 00H, 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'p', 00H, 'o', 00H, 'o', 00H, 'l', 00H, '-', 00H, '>', 00H, 'c'
	DB	00H, 'a', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@FCHHCIJM@?$AAp?$AAo?$AAo?$AAl?$AA?9?$AA?$DO?$AAp?$AAa?$AAg?$AAe?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@FCHHCIJM@?$AAp?$AAo?$AAo?$AAl?$AA?9?$AA?$DO?$AAp?$AAa?$AAg?$AAe?$AAs?$AA?$AA@ DB 'p'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, '-', 00H, '>', 00H, 'p', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_pool_alloc@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_pool_alloc@@9@9@ddf8d5d8 DD 04330H	; `nk_pool_alloc'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DO@HIJNMCBA@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAn?$AAk?$AA_?$AAp?$AAa?$AAg?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@HIJNMCBA@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAn?$AAk?$AA_?$AAp?$AAa?$AAg?$AAe?$AA?$CJ?$AA?$AA@ DB 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H
	DB	' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f'
	DB	00H, '(', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H
	DB	't', 00H, ' ', 00H, 'n', 00H, 'k', 00H, '_', 00H, 'p', 00H, 'a'
	DB	00H, 'g', 00H, 'e', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_pool_init_fixed@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_pool_init_fixed@@9@9@ddf8d5d8 DD 04324H ; `nk_pool_init_fixed'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_style_load_all_cursors@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_style_load_all_cursors@@9@9 DD 042faH ; `nk_style_load_all_cursors'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_style_load_cursor@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_style_load_cursor@@9@9 DD 042f0H	; `nk_style_load_cursor'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_style_set_cursor@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_style_set_cursor@@9@9 DD 042d5H	; `nk_style_set_cursor'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CK@BNOCFFAG@?$AAt?$AAy?$AAp?$AAe?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@BNOCFFAG@?$AAt?$AAy?$AAp?$AAe?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 't'
	DB	00H, 'y', 00H, 'p', 00H, 'e', 00H, '_', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'c', 00H, 'k', 00H, '-', 00H, '>', 00H, 'h', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1KO@JLDKBNHN@?$AAt?$AAy?$AAp?$AAe?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI@
CONST	SEGMENT
??_C@_1KO@JLDKBNHN@?$AAt?$AAy?$AAp?$AAe?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI@ DB 't'
	DB	00H, 'y', 00H, 'p', 00H, 'e', 00H, '_', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'c', 00H, 'k', 00H, '-', 00H, '>', 00H, 'h', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, ' ', 00H, '<', 00H, ' ', 00H, '(', 00H
	DB	'i', 00H, 'n', 00H, 't', 00H, ')', 00H, '(', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '_', 00H, 's', 00H, 't', 00H, 'a'
	DB	00H, 'c', 00H, 'k', 00H, '-', 00H, '>', 00H, 'e', 00H, 'l', 00H
	DB	'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's', 00H, ')'
	DB	00H, '/', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H
	DB	'f', 00H, '(', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, '_'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, '-', 00H
	DB	'>', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, 's', 00H, ')', 00H, '[', 00H, '0', 00H, ']', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NLHKOOOH@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@NLHKOOOH@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'f'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, '_', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'c', 00H, 'k', 00H, '-', 00H, '>', 00H, 'h', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_style_pop_font@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_style_pop_font@@9@9 DD 04294H	; `nk_style_pop_font'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1KO@LJHFLGDM@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI@
CONST	SEGMENT
??_C@_1KO@LJHFLGDM@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI@ DB 'f'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, '_', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'c', 00H, 'k', 00H, '-', 00H, '>', 00H, 'h', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, ' ', 00H, '<', 00H, ' ', 00H, '(', 00H
	DB	'i', 00H, 'n', 00H, 't', 00H, ')', 00H, '(', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, 'f', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, '_', 00H, 's', 00H, 't', 00H, 'a'
	DB	00H, 'c', 00H, 'k', 00H, '-', 00H, '>', 00H, 'e', 00H, 'l', 00H
	DB	'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's', 00H, ')'
	DB	00H, '/', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H
	DB	'f', 00H, '(', 00H, 'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, '_'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, '-', 00H
	DB	'>', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, 's', 00H, ')', 00H, '[', 00H, '0', 00H, ']', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_style_push_font@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_style_push_font@@9@9 DD 0427fH	; `nk_style_push_font'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_style_set_font@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_style_set_font@@9@9 DD 04271H	; `nk_style_set_font'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_style_from_table@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_style_from_table@@9@9 DD 04051H	; `nk_style_from_table'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_do_color_picker@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_do_color_picker@@9@9@ddf8d5d8 DD 03fe9H ; `nk_do_color_picker'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_color_picker@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_color_picker@@9@9@ddf8d5d8 DD 03fa6H ; `nk_draw_color_picker'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1M@EENKLIPJ@?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1M@EENKLIPJ@?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ DB 'c', 00H, 'o', 00H
	DB	'l', 00H, 'o', 00H, 'r', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@FPGEKOLJ@?$AAh?$AAu?$AAe?$AA_?$AAb?$AAa?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@FPGEKOLJ@?$AAh?$AAu?$AAe?$AA_?$AAb?$AAa?$AAr?$AA?$AA@ DB 'h', 00H
	DB	'u', 00H, 'e', 00H, '_', 00H, 'b', 00H, 'a', 00H, 'r', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@DGDDDMMD@?$AAm?$AAa?$AAt?$AAr?$AAi?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1O@DGDDDMMD@?$AAm?$AAa?$AAt?$AAr?$AAi?$AAx?$AA?$AA@ DB 'm', 00H, 'a'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'x', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_color_picker_behavior@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_color_picker_behavior@@9@9@ddf8d5d8 DD 03f6fH ; `nk_color_picker_behavior'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BG@FFNHGOHN@?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA_?$AAp?$AAt?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@FFNHGOHN@?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA_?$AAp?$AAt?$AAr?$AA?$AA@ DB 'c'
	DB	00H, 'u', 00H, 'r', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_', 00H
	DB	'p', 00H, 't', 00H, 'r', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@GIIBLKDM@?$AAs?$AAe?$AAl?$AAe?$AAc?$AAt?$AA_?$AAe?$AAn?$AAd?$AA_?$AAp?$AAt?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@GIIBLKDM@?$AAs?$AAe?$AAl?$AAe?$AAc?$AAt?$AA_?$AAe?$AAn?$AAd?$AA_?$AAp?$AAt?$AAr?$AA?$AA@ DB 's'
	DB	00H, 'e', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, '_', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, '_', 00H, 'p', 00H, 't', 00H, 'r'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@DELOPEMK@?$AAs?$AAe?$AAl?$AAe?$AAc?$AAt?$AA_?$AAb?$AAe?$AAg?$AAi?$AAn?$AA_?$AAp?$AAt?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@DELOPEMK@?$AAs?$AAe?$AAl?$AAe?$AAc?$AAt?$AA_?$AAb?$AAe?$AAg?$AAi?$AAn?$AA_?$AAp?$AAt?$AAr?$AA?$AA@ DB 's'
	DB	00H, 'e', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, '_', 00H
	DB	'b', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n', 00H, '_', 00H, 'p'
	DB	00H, 't', 00H, 'r', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PFOHOKJK@?5?5?5?5?$AA@
CONST	SEGMENT
??_C@_04PFOHOKJK@?5?5?5?5?$AA@ DB '    ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_do_edit@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_do_edit@@9@9@ddf8d5d8 DD 03c47H	; `nk_do_edit'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_edit_draw_text@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_edit_draw_text@@9@9@ddf8d5d8 DD 03bf7H ; `nk_edit_draw_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_do_scrollbarh@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_do_scrollbarh@@9@9@ddf8d5d8 DD 03b5aH ; `nk_do_scrollbarh'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_do_scrollbarv@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_do_scrollbarv@@9@9@ddf8d5d8 DD 03b00H ; `nk_do_scrollbarv'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_do_progress@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_do_progress@@9@9@ddf8d5d8 DD 03a6cH	; `nk_do_progress'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_do_slider@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_do_slider@@9@9@ddf8d5d8 DD 039ceH	; `nk_do_slider'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_do_selectable_image@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_do_selectable_image@@9@9@ddf8d5d8 DD 0392eH ; `nk_do_selectable_image'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1M@KBCLFMHN@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@KBCLFMHN@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$AA@ DB 'v', 00H, 'a', 00H
	DB	'l', 00H, 'u', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_do_selectable@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_do_selectable@@9@9@ddf8d5d8 DD 03909H ; `nk_do_selectable'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_do_toggle@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_do_toggle@@9@9@ddf8d5d8 DD 03896H	; `nk_do_toggle'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_do_button_text_image@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_do_button_text_image@@9@9@ddf8d5d8 DD 03801H ; `nk_do_button_text_image'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_do_button_text_symbol@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_do_button_text_symbol@@9@9@ddf8d5d8 DD 037c6H ; `nk_do_button_text_symbol'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_do_button_image@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_do_button_image@@9@9@ddf8d5d8 DD 03788H ; `nk_do_button_image'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_do_button_symbol@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_do_button_symbol@@9@9@ddf8d5d8 DD 03768H ; `nk_do_button_symbol'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1O@DGBBOFII@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$AA@
CONST	SEGMENT
??_C@_1O@DGBBOFII@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$AA@ DB 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_do_button_text@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_do_button_text@@9@9@ddf8d5d8 DD 03738H ; `nk_do_button_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_17CMKEDJDI@?$AAo?$AAu?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_17CMKEDJDI@?$AAo?$AAu?$AAt?$AA?$AA@ DB 'o', 00H, 'u', 00H, 't', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@OIINANNN@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@OIINANNN@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$AA@ DB 's', 00H, 't', 00H
	DB	'y', 00H, 'l', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_do_button@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_do_button@@9@9@ddf8d5d8 DD 03704H	; `nk_do_button'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MIFGBAGJ@?$CL?$AA@
CONST	SEGMENT
??_C@_01MIFGBAGJ@?$CL?$AA@ DB '+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IDAFKMJL@_?$AA@
CONST	SEGMENT
??_C@_01IDAFKMJL@_?$AA@ DB '_', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
CONST	SEGMENT
??_C@_01FJMABOPO@x?$AA@ DB 'x', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_widget_text_wrap@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_widget_text_wrap@@9@9@ddf8d5d8 DD 03670H ; `nk_widget_text_wrap'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_13DKOGBHCI@?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_13DKOGBHCI@?$AAt?$AA?$AA@ DB 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13LNPOMHLG@?$AAo?$AA?$AA@
CONST	SEGMENT
??_C@_13LNPOMHLG@?$AAo?$AA?$AA@ DB 'o', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_widget_text@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_widget_text@@9@9@ddf8d5d8 DD 03641H	; `nk_widget_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_textedit_free@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_textedit_free@@9@9 DD 03627H	; `nk_textedit_free'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_textedit_select_all@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_textedit_select_all@@9@9 DD 0361fH	; `nk_textedit_select_all'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_textedit_init_default@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_textedit_init_default@@9@9 DD 03614H ; `nk_textedit_init_default'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_textedit_init@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_textedit_init@@9@9 DD 03608H	; `nk_textedit_init'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_textedit_init_fixed@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_textedit_init_fixed@@9@9 DD 035fdH	; `nk_textedit_init_fixed'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@ DB 's', 00H, 't', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_textedit_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_textedit_text@@9@9 DD 0337dH	; `nk_textedit_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_input_unicode@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_input_unicode@@9@9 DD 03171H	; `nk_input_unicode'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_input_char@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_input_char@@9@9 DD 03167H		; `nk_input_char'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_input_glyph@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_input_glyph@@9@9 DD 03154H		; `nk_input_glyph'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_input_scroll@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_input_scroll@@9@9 DD 0314bH		; `nk_input_scroll'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_input_button@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_input_button@@9@9 DD 0313aH		; `nk_input_button'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_input_key@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_input_key@@9@9 DD 0312eH		; `nk_input_key'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_input_motion@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_input_motion@@9@9 DD 03121H		; `nk_input_motion'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_input_end@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_input_end@@9@9 DD 03111H		; `nk_input_end'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_input_begin@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_input_begin@@9@9 DD 030fcH		; `nk_input_begin'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_atlas_clear@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_atlas_clear@@9@9 DD 030dfH	; `nk_font_atlas_clear'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_atlas_cleanup@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_atlas_cleanup@@9@9 DD 030caH	; `nk_font_atlas_cleanup'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_atlas_end@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_atlas_end@@9@9 DD 030a7H	; `nk_font_atlas_end'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BC@POOMANHF@?$AAi?$AAm?$AAg?$AA_?$AAr?$AAg?$AAb?$AAa?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@POOMANHF@?$AAi?$AAm?$AAg?$AA_?$AAr?$AAg?$AAb?$AAa?$AA?$AA@ DB 'i'
	DB	00H, 'm', 00H, 'g', 00H, '_', 00H, 'r', 00H, 'g', 00H, 'b', 00H
	DB	'a', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@NNCEIJDJ@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAi?$AAx?$AAe?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@NNCEIJDJ@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAi?$AAx?$AAe?$AAl?$AA?$AA@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'p', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@DILOJDLD@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAg?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@DILOJDLD@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAg?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?$AA@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'g', 00H, 'l', 00H, 'y', 00H, 'p', 00H, 'h', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_17GNJCADOE@?$AAt?$AAm?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_17GNJCADOE@?$AAt?$AAm?$AAp?$AA?$AA@ DB 't', 00H, 'm', 00H, 'p', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_atlas_bake@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_atlas_bake@@9@9 DD 0302aH	; `nk_font_atlas_bake'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_atlas_add_default@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_atlas_add_default@@9@9 DD 0301cH ; `nk_font_atlas_add_default'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BI@DCDGNPB@?$AAd?$AAa?$AAt?$AAa?$AA_?$AAb?$AAa?$AAs?$AAe?$AA8?$AA5?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@DCDGNPB@?$AAd?$AAa?$AAt?$AAa?$AA_?$AAb?$AAa?$AAs?$AAe?$AA8?$AA5?$AA?$AA@ DB 'd'
	DB	00H, 'a', 00H, 't', 00H, 'a', 00H, '_', 00H, 'b', 00H, 'a', 00H
	DB	's', 00H, 'e', 00H, '8', 00H, '5', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_atlas_add_compressed_base85@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_atlas_add_compressed_base85@@9@9 DD 02ffdH ; `nk_font_atlas_add_compressed_base85'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CE@NFICCMAF@?$AAd?$AAe?$AAc?$AAo?$AAm?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@NFICCMAF@?$AAd?$AAe?$AAc?$AAo?$AAm?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?$AA@ DB 'd'
	DB	00H, 'e', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'r', 00H
	DB	'e', 00H, 's', 00H, 's', 00H, 'e', 00H, 'd', 00H, '_', 00H, 'd'
	DB	00H, 'a', 00H, 't', 00H, 'a', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@HMLKODMG@?$AAc?$AAo?$AAm?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@HMLKODMG@?$AAc?$AAo?$AAm?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 's', 00H
	DB	's', 00H, 'e', 00H, 'd', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@NPEFJEMF@?$AAc?$AAo?$AAm?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@NPEFJEMF@?$AAc?$AAo?$AAm?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 's', 00H
	DB	's', 00H, 'e', 00H, 'd', 00H, '_', 00H, 'd', 00H, 'a', 00H, 't'
	DB	00H, 'a', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_atlas_add_compressed@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_atlas_add_compressed@@9@9 DD 02fdaH ; `nk_font_atlas_add_compressed'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_atlas_add_from_file@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_atlas_add_from_file@@9@9 DD 02fbeH ; `nk_font_atlas_add_from_file'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1O@NIJNBMFJ@?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_1O@NIJNBMFJ@?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@ DB 'm', 00H, 'e'
	DB	00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_atlas_add_from_memory@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_atlas_add_from_memory@@9@9 DD 02fa4H ; `nk_font_atlas_add_from_memory'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BM@OLHJPPIM@?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAt?$AAt?$AAf?$AA_?$AAb?$AAl?$AAo?$AAb?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@OLHJPPIM@?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAt?$AAt?$AAf?$AA_?$AAb?$AAl?$AAo?$AAb?$AA?$AA@ DB 'c'
	DB	00H, 'f', 00H, 'g', 00H, '-', 00H, '>', 00H, 't', 00H, 't', 00H
	DB	'f', 00H, '_', 00H, 'b', 00H, 'l', 00H, 'o', 00H, 'b', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@JLAHHNKC@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAf?$AAo?$AAn?$AAt?$AA_?$AAn?$AAu?$AAm?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@JLAHHNKC@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAf?$AAo?$AAn?$AAt?$AA_?$AAn?$AAu?$AAm?$AA?$AA@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, '_', 00H, 'n', 00H, 'u'
	DB	00H, 'm', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@EPKOFENI@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@EPKOFENI@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AAf?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H, '-', 00H
	DB	'>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>'
	DB	00H, ' ', 00H, '0', 00H, '.', 00H, '0', 00H, 'f', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@CPJMIME@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAt?$AAt?$AAf?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@CPJMIME@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAt?$AAt?$AAf?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H, '-', 00H
	DB	'>', 00H, 't', 00H, 't', 00H, 'f', 00H, '_', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@EMLJIHOH@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAt?$AAt?$AAf?$AA_?$AAb?$AAl?$AAo?$AAb?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@EMLJIHOH@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAt?$AAt?$AAf?$AA_?$AAb?$AAl?$AAo?$AAb?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H, '-', 00H
	DB	'>', 00H, 't', 00H, 't', 00H, 'f', 00H, '_', 00H, 'b', 00H, 'l'
	DB	00H, 'o', 00H, 'b', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@BKPFMKJJ@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@BKPFMKJJ@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	't', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 'a'
	DB	00H, 'r', 00H, 'y', 00H, '.', 00H, 'f', 00H, 'r', 00H, 'e', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@BIKDIHM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@BIKDIHM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	't', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 'a'
	DB	00H, 'r', 00H, 'y', 00H, '.', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@IMJOFDOF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@IMJOFDOF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'p', 00H, 'e', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, '.', 00H, 'f', 00H, 'r', 00H, 'e', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@LNDLDAN@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@LNDLDAN@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'p', 00H, 'e', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, '.', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_atlas_add@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_atlas_add@@9@9 DD 02f59H	; `nk_font_atlas_add'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GA@EALBBIL@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9@
CONST	SEGMENT
??_C@_1GA@EALBBIL@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'p', 00H, 'e', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, '.', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'p', 00H, 'e', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, '.', 00H, 'f', 00H, 'r', 00H, 'e', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GA@MNJGNIH@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9@
CONST	SEGMENT
??_C@_1GA@MNJGNIH@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	't', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 'a'
	DB	00H, 'r', 00H, 'y', 00H, '.', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'a'
	DB	00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	't', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 'a'
	DB	00H, 'r', 00H, 'y', 00H, '.', 00H, 'f', 00H, 'r', 00H, 'e', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_atlas_begin@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_atlas_begin@@9@9 DD 02f47H	; `nk_font_atlas_begin'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BE@EMLGEEBK@?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@EMLGEEBK@?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?$AA@ DB 't'
	DB	00H, 'e', 00H, 'm', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 'a', 00H
	DB	'r', 00H, 'y', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@GNEJBMGP@?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@GNEJBMGP@?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?$AA@ DB 'p'
	DB	00H, 'e', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_atlas_init_custom@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_atlas_init_custom@@9@9 DD 02f3bH ; `nk_font_atlas_init_custom'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_atlas_init@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_atlas_init@@9@9 DD 02f2fH	; `nk_font_atlas_init'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1M@PFBJFKGM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1M@PFBJFKGM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?$AA@ DB 'a', 00H, 't', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_atlas_init_default@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_atlas_init_default@@9@9 DD 02f20H ; `nk_font_atlas_init_default'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DE@IFJFDKGL@?$AAn?$AAk?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAo?$AAl?$AAe?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@IFJFDKGL@?$AAn?$AAk?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAo?$AAl?$AAe?$AAn?$AA?$AA@ DB 'n'
	DB	00H, 'k', 00H, '_', 00H, '_', 00H, 'd', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'o', 00H, 'u'
	DB	00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, ' ', 00H, '+', 00H
	DB	' ', 00H, 'o', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@KBBHGLFN@?$AAn?$AAk?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAo?$AAl?$AAe?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@KBBHGLFN@?$AAn?$AAk?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAo?$AAl?$AAe?$AAn?$AA?$AA@ DB 'n'
	DB	00H, 'k', 00H, '_', 00H, '_', 00H, 'd', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'o', 00H, 'u'
	DB	00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, ' ', 00H, '+', 00H
	DB	' ', 00H, 'o', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_decompress@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_decompress@@9@9@ddf8d5d8 DD 02ec7H	; `nk_decompress'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk__lit@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk__lit@@9@9@ddf8d5d8 DD 02e88H	; `nk__lit'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EC@MLCFIANA@?$AAn?$AAk?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAn?$AAk?$AA_?$AA_?$AAb?$AAa?$AAr?$AAr?$AAi?$AAe?$AAr@
CONST	SEGMENT
??_C@_1EC@MLCFIANA@?$AAn?$AAk?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAn?$AAk?$AA_?$AA_?$AAb?$AAa?$AAr?$AAr?$AAi?$AAe?$AAr@ DB 'n'
	DB	00H, 'k', 00H, '_', 00H, '_', 00H, 'd', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'l', 00H, 'e', 00H, 'n'
	DB	00H, 'g', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, 'n', 00H, 'k', 00H, '_', 00H, '_', 00H, 'b', 00H, 'a'
	DB	00H, 'r', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk__match@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk__match@@9@9@ddf8d5d8 DD 02e7eH	; `nk__match'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BG@PADPEMOB@?$AAb?$AAa?$AAk?$AAe?$AAd?$AA_?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@PADPEMOB@?$AAb?$AAa?$AAk?$AAe?$AAd?$AA_?$AAf?$AAo?$AAn?$AAt?$AA?$AA@ DB 'b'
	DB	00H, 'a', 00H, 'k', 00H, 'e', 00H, 'd', 00H, '_', 00H, 'f', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@NBCNDPNP@?$AAg?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1O@NBCNDPNP@?$AAg?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?$AA@ DB 'g', 00H, 'l'
	DB	00H, 'y', 00H, 'p', 00H, 'h', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_init@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_init@@9@9@ddf8d5d8 DD 02dc2H	; `nk_font_init'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CE@EGBHPFHC@?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAr?$AAa?$AAn?$AAg?$AAe?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@EGBHPFHC@?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAr?$AAa?$AAn?$AAg?$AAe?$AAs?$AA?$AA@ DB 'f'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, '-', 00H, '>', 00H, 'i', 00H
	DB	'n', 00H, 'f', 00H, 'o', 00H, '.', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_find_glyph@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_find_glyph@@9@9 DD 02da6H	; `nk_font_find_glyph'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1M@FFJEAAHP@?$AAg?$AAl?$AAy?$AAp?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_1M@FFJEAAHP@?$AAg?$AAl?$AAy?$AAp?$AAh?$AA?$AA@ DB 'g', 00H, 'l', 00H
	DB	'y', 00H, 'p', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_query_font_glyph@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_query_font_glyph@@9@9@ddf8d5d8 DD 02d8bH ; `nk_font_query_font_glyph'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BK@JHIPEEHJ@?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAg?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@JHIPEEHJ@?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAg?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?$AA@ DB 'f'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, '-', 00H, '>', 00H, 'g', 00H
	DB	'l', 00H, 'y', 00H, 'p', 00H, 'h', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_text_width@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_text_width@@9@9@ddf8d5d8 DD 02d68H ; `nk_font_text_width'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BE@GJBOJGHN@?$AAi?$AAn?$AA_?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@GJBOJGHN@?$AAi?$AAn?$AA_?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, '_', 00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H
	DB	'r', 00H, 'y', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@FPHPBKAN@?$AAo?$AAu?$AAt?$AA_?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@FPHPBKAN@?$AAo?$AAu?$AAt?$AA_?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@ DB 'o'
	DB	00H, 'u', 00H, 't', 00H, '_', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_bake_convert@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_bake_convert@@9@9@ddf8d5d8 DD 02d50H ; `nk_font_bake_convert'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CE@JMKMBGAG@?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA_?$AAd?$AAa?$AAt?$AAa?$AA_?$AAm?$AAa?$AAs?$AAk?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@JMKMBGAG@?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA_?$AAd?$AAa?$AAt?$AAa?$AA_?$AAm?$AAa?$AAs?$AAk?$AA?$AA@ DB 't'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	'_', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 's', 00H, 'k', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@JKDMJAOC@?$AAi?$AAm?$AAg?$AA_?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@JKDMJAOC@?$AAi?$AAm?$AAg?$AA_?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$AA@ DB 'i'
	DB	00H, 'm', 00H, 'g', 00H, '_', 00H, 'h', 00H, 'e', 00H, 'i', 00H
	DB	'g', 00H, 'h', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@MBHFANAC@?$AAi?$AAm?$AAg?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@MBHFANAC@?$AAi?$AAm?$AAg?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@ DB 'i'
	DB	00H, 'm', 00H, 'g', 00H, '_', 00H, 'w', 00H, 'i', 00H, 'd', 00H
	DB	't', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@JELGLMGA@?$AAi?$AAm?$AAg?$AA_?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@JELGLMGA@?$AAi?$AAm?$AAg?$AA_?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@ DB 'i'
	DB	00H, 'm', 00H, 'g', 00H, '_', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_bake_custom_data@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_bake_custom_data@@9@9@ddf8d5d8 DD 02d34H ; `nk_font_bake_custom_data'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BK@BAMJJACG@?$AAg?$AAl?$AAy?$AAp?$AAh?$AAs?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@BAMJJACG@?$AAg?$AAl?$AAy?$AAp?$AAh?$AAs?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ DB 'g'
	DB	00H, 'l', 00H, 'y', 00H, 'p', 00H, 'h', 00H, 's', 00H, '_', 00H
	DB	'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@PNHAFIJL@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@PNHAFIJL@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ DB 'f'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'u', 00H, 'n', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@GKOIOOFK@?$AAb?$AAa?$AAk?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1M@GKOIOOFK@?$AAb?$AAa?$AAk?$AAe?$AAr?$AA?$AA@ DB 'b', 00H, 'a', 00H
	DB	'k', 00H, 'e', 00H, 'r', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_bake@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_bake@@9@9@ddf8d5d8 DD 02cc6H	; `nk_font_bake'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DK@MJIDLFCD@?$AAr?$AAa?$AAn?$AAg?$AAe?$AA_?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA_?$AAr?$AAa?$AAn?$AAg?$AAe?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@MJIDLFCD@?$AAr?$AAa?$AAn?$AAg?$AAe?$AA_?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA_?$AAr?$AAa?$AAn?$AAg?$AAe?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ DB 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'n', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 't', 00H, 'o', 00H, 't'
	DB	00H, 'a', 00H, 'l', 00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n'
	DB	00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@OBHIIPHI@?$AAc?$AAh?$AAa?$AAr?$AA_?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA_?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@OBHIIPHI@?$AAc?$AAh?$AAa?$AAr?$AA_?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA_?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ DB 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 't', 00H, 'o', 00H, 't', 00H, 'a'
	DB	00H, 'l', 00H, '_', 00H, 'g', 00H, 'l', 00H, 'y', 00H, 'p', 00H
	DB	'h', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@IJAOEFPO@?$AAr?$AAe?$AAc?$AAt?$AA_?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA_?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@IJAOEFPO@?$AAr?$AAe?$AAc?$AAt?$AA_?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA_?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ DB 'r'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 't', 00H, 'o', 00H, 't', 00H, 'a'
	DB	00H, 'l', 00H, '_', 00H, 'g', 00H, 'l', 00H, 'y', 00H, 'p', 00H
	DB	'h', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@MJBJBOIA@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1M@MJBJBOIA@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ DB 'c', 00H, 'o', 00H
	DB	'u', 00H, 'n', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@NGBHDANL@?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1O@NGBHDANL@?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$AA@ DB 'h', 00H, 'e'
	DB	00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@MDIKEACL@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_1M@MDIKEACL@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@ DB 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@GDOOMBLP@?$AAi?$AAm?$AAa?$AAg?$AAe?$AA_?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@GDOOMBLP@?$AAi?$AAm?$AAa?$AAg?$AAe?$AA_?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@ DB 'i'
	DB	00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_bake_pack@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_bake_pack@@9@9@ddf8d5d8 DD 02c56H ; `nk_font_bake_pack'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BI@JKPHGKFE@?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@JKPHGKFE@?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ DB 'g'
	DB	00H, 'l', 00H, 'y', 00H, 'p', 00H, 'h', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@LDHLIKNE@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@LDHLIKNE@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H, '_', 00H
	DB	'l', 00H, 'i', 00H, 's', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_font_baker_memory@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_font_baker_memory@@9@9@ddf8d5d8 DD 02c23H ; `nk_font_baker_memory'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1O@LEKFDIFA@?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_1O@LEKFDIFA@?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AA?$AA@ DB 't', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'f', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_range_glyph_count@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_range_glyph_count@@9@9@ddf8d5d8 DD 02be4H ; `nk_range_glyph_count'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1M@KOBGMDOP@?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@KOBGMDOP@?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'r', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_range_count@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_range_count@@9@9@ddf8d5d8 DD 02bdaH	; `nk_range_count'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DO@LAPBLJ@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$CK?$AAs?$AAt?$AAr?$AAi?$AAd?$AAe?$AA_?$AAi?$AAn?$AA_?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@LAPBLJ@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$CK?$AAs?$AAt?$AAr?$AAi?$AAd?$AAe?$AA_?$AAi?$AAn?$AA_?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'p'
	DB	00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, 's', 00H, '[', 00H
	DB	'i', 00H, '*', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'i', 00H, 'n', 00H, '_', 00H, 'b', 00H
	DB	'y', 00H, 't', 00H, 'e', 00H, 's', 00H, ']', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_tt__v_prefilter@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_tt__v_prefilter@@9@9@ddf8d5d8 DD 02ae0H ; `nk_tt__v_prefilter'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BO@BDJAMAMF@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@BDJAMAMF@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'p'
	DB	00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, 's', 00H, '[', 00H
	DB	'i', 00H, ']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_tt__h_prefilter@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_tt__h_prefilter@@9@9@ddf8d5d8 DD 02aa0H ; `nk_tt__h_prefilter'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CE@LCKJLKGO@?$AAv?$AA_?$AAo?$AAv?$AAe?$AAr?$AAs?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA8?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@LCKJLKGO@?$AAv?$AA_?$AAo?$AAv?$AAe?$AAr?$AAs?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA8?$AA?$AA@ DB 'v'
	DB	00H, '_', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 's', 00H
	DB	'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '<'
	DB	00H, '=', 00H, ' ', 00H, '8', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@OKIIJOOA@?$AAh?$AA_?$AAo?$AAv?$AAe?$AAr?$AAs?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA8?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@OKIIJOOA@?$AAh?$AA_?$AAo?$AAv?$AAe?$AAr?$AAs?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA8?$AA?$AA@ DB 'h'
	DB	00H, '_', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 's', 00H
	DB	'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '<'
	DB	00H, '=', 00H, ' ', 00H, '8', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_tt_PackSetOversampling@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_tt_PackSetOversampling@@9@9@ddf8d5d8 DD 02a94H ; `nk_tt_PackSetOversampling'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_tt_Rasterize@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_tt_Rasterize@@9@9@ddf8d5d8 DD 02a41H ; `nk_tt_Rasterize'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CI@PMJHELI@?$AAz?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA_?$AAy?$AA_?$AAt?$AAo?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@PMJHELI@?$AAz?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA_?$AAy?$AA_?$AAt?$AAo?$AAp?$AA?$AA@ DB 'z'
	DB	00H, '-', 00H, '>', 00H, 'e', 00H, 'y', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, 's', 00H, 'c', 00H, 'a', 00H, 'n', 00H, '_'
	DB	00H, 'y', 00H, '_', 00H, 't', 00H, 'o', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@LMAHJHLI@?$AAz?$AA?9?$AA?$DO?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@LMAHJHLI@?$AAz?$AA?9?$AA?$DO?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ DB 'z'
	DB	00H, '-', 00H, '>', 00H, 'd', 00H, 'i', 00H, 'r', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_tt__rasterize_sorted_edges@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_tt__rasterize_sorted_edges@@9@9@ddf8d5d8 DD 028d9H ; `nk_tt__rasterize_sorted_edges'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CE@GDDDMDCC@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl?$AAe?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@GDDDMDCC@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl?$AAe?$AAn?$AA?$AA@ DB 'x'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'x', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'l', 00H, 'e', 00H, 'n', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@KOIFPDFH@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAy?$AA_?$AAb?$AAo?$AAt?$AAt?$AAo?$AAm?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_@
CONST	SEGMENT
??_C@_1EI@KOIFPDFH@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAy?$AA_?$AAb?$AAo?$AAt?$AAt?$AAo?$AAm?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_@ DB 'e'
	DB	00H, '-', 00H, '>', 00H, 's', 00H, 'y', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 'y', 00H, '_', 00H, 'b', 00H, 'o', 00H, 't'
	DB	00H, 't', 00H, 'o', 00H, 'm', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, 'e', 00H, '-', 00H, '>', 00H, 'e', 00H, 'y', 00H, ' '
	DB	00H, '>', 00H, '=', 00H, ' ', 00H, 'y', 00H, '_', 00H, 't', 00H
	DB	'o', 00H, 'p', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@MDBOACOJ@?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_?$AAt?$AAo?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@MDBOACOJ@?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_?$AAt?$AAo?$AAp?$AA?$AA@ DB 'e'
	DB	00H, '-', 00H, '>', 00H, 'e', 00H, 'y', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, 'y', 00H, '_', 00H, 't', 00H, 'o', 00H, 'p'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_tt__fill_active_edges_new@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_tt__fill_active_edges_new@@9@9@ddf8d5d8 DD 02837H ; `nk_tt__fill_active_edges_new'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FK@JPMIPNJF@?$AAx?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA0?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5@
CONST	SEGMENT
??_C@_1FK@JPMIPNJF@?$AAx?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA0?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5@ DB 'x'
	DB	00H, '0', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'x', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '0', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '+', 00H, '1', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '1', 00H, ' '
	DB	00H, '>', 00H, '=', 00H, ' ', 00H, 'x', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 'x', 00H, '1', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, 'x', 00H, '+', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NILBPPPH@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@NILBPPPH@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@ DB 'x'
	DB	00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'x', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '1', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '+', 00H, '1', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@NGGEAFFG@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@NGGEAFFG@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@ DB 'x'
	DB	00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'x', 00H
	DB	'+', 00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@FEPJEPJJ@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@FEPJEPJJ@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$AA@ DB 'x'
	DB	00H, '1', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@FAAMJPKE@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@FAAMJPKE@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$AA@ DB 'x'
	DB	00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'x', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@DHAKMBPL@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@DHAKMBPL@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@ DB 'x'
	DB	00H, '1', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H
	DB	'+', 00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@JGPMADBG@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@JGPMADBG@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?$AA@ DB 'e'
	DB	00H, '-', 00H, '>', 00H, 's', 00H, 'y', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 'e', 00H, '-', 00H, '>', 00H, 'e', 00H, 'y'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@ENLNFFAM@?$AAy?$AA0?$AA?5?$AA?$DM?$AA?5?$AAy?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@ENLNFFAM@?$AAy?$AA0?$AA?5?$AA?$DM?$AA?5?$AAy?$AA1?$AA?$AA@ DB 'y'
	DB	00H, '0', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'y', 00H, '1', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_tt__handle_clipped_edge@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_tt__handle_clipped_edge@@9@9@ddf8d5d8 DD 02815H ; `nk_tt__handle_clipped_edge'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_tt_GetGlyphShape@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_tt_GetGlyphShape@@9@9@ddf8d5d8 DD 026adH ; `nk_tt_GetGlyphShape'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1HG@DLDBBFCO@?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAc?$AAo?$AAd?$AAe?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAn?$AAk?$AA_?$AAt?$AAt?$AAU?$AAS?$AAH?$AAO?$AAR?$AAT@
CONST	SEGMENT
??_C@_1HG@DLDBBFCO@?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAc?$AAo?$AAd?$AAe?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAn?$AAk?$AA_?$AAt?$AAt?$AAU?$AAS?$AAH?$AAO?$AAR?$AAT@ DB 'u'
	DB	00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'p', 00H, 'o'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, 'n', 00H, 'k', 00H, '_', 00H, 't', 00H, 't', 00H, 'U'
	DB	00H, 'S', 00H, 'H', 00H, 'O', 00H, 'R', 00H, 'T', 00H, '(', 00H
	DB	'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, ' ', 00H, '+', 00H, ' '
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'C', 00H, 'o', 00H, 'u', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, '+', 00H, ' ', 00H, '2', 00H, '*'
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'm', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0?$AA?$AA@ DB '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_tt_FindGlyphIndex@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_tt_FindGlyphIndex@@9@9@ddf8d5d8 DD 02614H ; `nk_tt_FindGlyphIndex'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04KODIGLGG@maxp?$AA@
CONST	SEGMENT
??_C@_04KODIGLGG@maxp?$AA@ DB 'maxp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HHMMLDJI@kern?$AA@
CONST	SEGMENT
??_C@_04HHMMLDJI@kern?$AA@ DB 'kern', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04ONMNCIMC@hmtx?$AA@
CONST	SEGMENT
??_C@_04ONMNCIMC@hmtx?$AA@ DB 'hmtx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FMPHLIKP@hhea?$AA@
CONST	SEGMENT
??_C@_04FMPHLIKP@hhea?$AA@ DB 'hhea', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LLIHEPK@glyf?$AA@
CONST	SEGMENT
??_C@_04LLIHEPK@glyf?$AA@ DB 'glyf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NEODDMOL@head?$AA@
CONST	SEGMENT
??_C@_04NEODDMOL@head?$AA@ DB 'head', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DACNFKGE@loca?$AA@
CONST	SEGMENT
??_C@_04DACNFKGE@loca?$AA@ DB 'loca', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EICJPCEA@cmap?$AA@
CONST	SEGMENT
??_C@_04EICJPCEA@cmap?$AA@ DB 'cmap', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@JNFMLHFF@?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAb?$AAe?$AAs?$AAt?$AA_?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@JNFMLHFF@?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAb?$AAe?$AAs?$AAt?$AA_?$AAy?$AA?$AA@ DB 'y'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'b', 00H, 'e', 00H
	DB	's', 00H, 't', 00H, '_', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@GPDJEJHP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO?$AA?5?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5@
CONST	SEGMENT
??_C@_1FA@GPDJEJHP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO?$AA?5?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5@ DB 'n'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, '-', 00H, '>', 00H, 'n', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, '-', 00H, '>', 00H, 'x', 00H, ' '
	DB	00H, '>', 00H, ' ', 00H, 'x', 00H, 'p', 00H, 'o', 00H, 's', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 'd'
	DB	00H, 'e', 00H, '-', 00H, '>', 00H, 'x', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 'x', 00H, 'p', 00H, 'o', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@MNLKNDNL@?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@MNLKNDNL@?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'x'
	DB	00H, 'p', 00H, 'o', 00H, 's', 00H, ' ', 00H, '>', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@LEHAODMI@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AAc?$AA?9?$AA?$DO?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@LEHAODMI@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AAc?$AA?9?$AA?$DO?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '%', 00H
	DB	' ', 00H, 'c', 00H, '-', 00H, '>', 00H, 'a', 00H, 'l', 00H, 'i'
	DB	00H, 'g', 00H, 'n', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_rp__skyline_find_best_pos@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_rp__skyline_find_best_pos@@9@9@ddf8d5d8 DD 02435H ; `nk_rp__skyline_find_best_pos'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BM@JHJLEEND@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@JHJLEEND@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0?$AA?$AA@ DB 'n'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, '-', 00H, '>', 00H, 'x', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@BDIGDJGP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO?$AA?5?$AAx?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@BDIGDJGP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO?$AA?5?$AAx?$AA0?$AA?$AA@ DB 'n'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, '-', 00H, '>', 00H, 'n', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, '-', 00H, '>', 00H, 'x', 00H, ' '
	DB	00H, '>', 00H, ' ', 00H, 'x', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@KBODBKOH@?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@KBODBKOH@?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0?$AA?$AA@ DB 'f'
	DB	00H, 'i', 00H, 'r', 00H, 's', 00H, 't', 00H, '-', 00H, '>', 00H
	DB	'x', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_rp__skyline_find_min_y@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_rp__skyline_find_min_y@@9@9@ddf8d5d8 DD 0240aH ; `nk_rp__skyline_find_min_y'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EI@NNJKMECF@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAf?$AAf?$AAf?$AAf?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAf@
CONST	SEGMENT
??_C@_1EI@NNJKMECF@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAf?$AAf?$AAf?$AAf?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAf@ DB 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 'x', 00H, 'f', 00H, 'f', 00H, 'f'
	DB	00H, 'f', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'h', 00H
	DB	'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, ' ', 00H, '<'
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 'x', 00H, 'f', 00H, 'f', 00H
	DB	'f', 00H, 'f', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_rp_init_target@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_rp_init_target@@9@9@ddf8d5d8 DD 023ebH ; `nk_rp_init_target'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CI@EPGEFOHG@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAv?$AAe?$AAr?$AAt?$AAe?$AAx?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@EPGEFOHG@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAv?$AAe?$AAr?$AAt?$AAe?$AAx?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H, '-', 00H
	DB	'>', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x'
	DB	00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@DMOLPMEO@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAv?$AAe?$AAr?$AAt?$AAe?$AAx?$AA_?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@DMOLPMEO@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAv?$AAe?$AAr?$AAt?$AAe?$AAx?$AA_?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H, '-', 00H
	DB	'>', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x'
	DB	00H, '_', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@ DB 'c', 00H, 't', 00H, 'x', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_convert@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_convert@@9@9 DD 022ffH		; `nk_convert'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_add_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_add_text@@9@9 DD 022ccH	; `nk_draw_list_add_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_add_image@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_add_image@@9@9 DD 022b5H	; `nk_draw_list_add_image'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_push_rect_uv@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_push_rect_uv@@9@9@ddf8d5d8 DD 02290H ; `nk_draw_list_push_rect_uv'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_stroke_curve@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_stroke_curve@@9@9 DD 02284H ; `nk_draw_list_stroke_curve'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_stroke_circle@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_stroke_circle@@9@9 DD 02277H ; `nk_draw_list_stroke_circle'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_fill_circle@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_fill_circle@@9@9 DD 0226bH ; `nk_draw_list_fill_circle'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_stroke_triangle@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_stroke_triangle@@9@9 DD 0225fH ; `nk_draw_list_stroke_triangle'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_fill_triangle@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_fill_triangle@@9@9 DD 02253H ; `nk_draw_list_fill_triangle'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_fill_rect_multi_color@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_fill_rect_multi_color@@9@9 DD 02231H ; `nk_draw_list_fill_rect_multi_color'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_stroke_rect@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_stroke_rect@@9@9 DD 02221H ; `nk_draw_list_stroke_rect'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_fill_rect@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_fill_rect@@9@9 DD 02211H	; `nk_draw_list_fill_rect'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_stroke_line@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_stroke_line@@9@9 DD 02201H ; `nk_draw_list_stroke_line'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_path_stroke@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_path_stroke@@9@9 DD 021f4H ; `nk_draw_list_path_stroke'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_path_fill@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_path_fill@@9@9 DD 021e8H	; `nk_draw_list_path_fill'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_path_curve_to@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_path_curve_to@@9@9 DD 021cdH ; `nk_draw_list_path_curve_to'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_path_rect_to@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_path_rect_to@@9@9 DD 021b5H ; `nk_draw_list_path_rect_to'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_path_arc_to@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_path_arc_to@@9@9 DD 02187H ; `nk_draw_list_path_arc_to'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_path_arc_to_fast@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_path_arc_to_fast@@9@9 DD 02176H ; `nk_draw_list_path_arc_to_fast'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_path_line_to@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_path_line_to@@9@9 DD 02162H ; `nk_draw_list_path_line_to'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_path_clear@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_path_clear@@9@9 DD 02158H	; `nk_draw_list_path_clear'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_fill_poly_convex@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_fill_poly_convex@@9@9 DD 020dcH ; `nk_draw_list_fill_poly_convex'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BA@CGFLAEIE@?$AAn?$AAo?$AAr?$AAm?$AAa?$AAl?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@CGFLAEIE@?$AAn?$AAo?$AAr?$AAm?$AAa?$AAl?$AAs?$AA?$AA@ DB 'n', 00H
	DB	'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 'l', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_stroke_poly_line@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_stroke_poly_line@@9@9 DD 01feaH ; `nk_draw_list_stroke_poly_line'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DO@JEEJBCGK@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAw?$AAr?$AAo?$AAn?$AAg?$AA?5?$AAe?$AAl?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?5?$AAa?$AAt?$AAt?$AAr?$AAi?$AAb?$AAu?$AAt?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@JEEJBCGK@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAw?$AAr?$AAo?$AAn?$AAg?$AA?5?$AAe?$AAl?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?5?$AAa?$AAt?$AAt?$AAr?$AAi?$AAb?$AAu?$AAt?$AAe?$AA?$CC?$AA?$AA@ DB '0'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'w', 00H
	DB	'r', 00H, 'o', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'e', 00H, 'l'
	DB	00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H
	DB	'a', 00H, 't', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'b', 00H, 'u'
	DB	00H, 't', 00H, 'e', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_vertex@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_vertex@@9@9@ddf8d5d8 DD 01fd5H	; `nk_draw_vertex'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EI@PCEGCBPN@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAv?$AAe?$AAr?$AAt?$AAe?$AAx?$AA?5?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?5?$AAf?$AAo?$AAr?$AAm@
CONST	SEGMENT
??_C@_1EI@PCEGCBPN@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAv?$AAe?$AAr?$AAt?$AAe?$AAx?$AA?5?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?5?$AAf?$AAo?$AAr?$AAm@ DB '0'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'i', 00H
	DB	'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' '
	DB	00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H
	DB	' ', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 't'
	DB	00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H
	DB	't', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@BBEFODIH@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AA?$DM?$AA?5?$AAN?$AAK?$AA_?$AAF?$AAO?$AAR?$AAM?$AAA?$AAT?$AA_?$AAC?$AAO?$AAL?$AAO?$AAR?$AA_?$AAB?$AAE?$AAG?$AAI?$AAN?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@BBEFODIH@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AA?$DM?$AA?5?$AAN?$AAK?$AA_?$AAF?$AAO?$AAR?$AAM?$AAA?$AAT?$AA_?$AAC?$AAO?$AAL?$AAO?$AAR?$AA_?$AAB?$AAE?$AAG?$AAI?$AAN?$AA?$AA@ DB 'f'
	DB	00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, 'N', 00H, 'K', 00H, '_', 00H, 'F', 00H, 'O'
	DB	00H, 'R', 00H, 'M', 00H, 'A', 00H, 'T', 00H, '_', 00H, 'C', 00H
	DB	'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, '_', 00H, 'B', 00H, 'E'
	DB	00H, 'G', 00H, 'I', 00H, 'N', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_vertex_element@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_vertex_element@@9@9@ddf8d5d8 DD 01f9eH ; `nk_draw_vertex_element'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FE@DPEENCO@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAv?$AAe?$AAr?$AAt?$AAe?$AAx?$AA?5?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?5?$AAc?$AAo?$AAl?$AAo@
CONST	SEGMENT
??_C@_1FE@DPEENCO@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAv?$AAe?$AAr?$AAt?$AAe?$AAx?$AA?5?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?5?$AAc?$AAo?$AAl?$AAo@ DB '0'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'I', 00H
	DB	'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' '
	DB	00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H
	DB	' ', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 't'
	DB	00H, ' ', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@GJOAEAIH@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAF?$AAO?$AAR?$AAM?$AAA?$AAT?$AA_?$AAC?$AAO?$AAL?$AAO?$AAR?$AA_?$AAE?$AAN?$AAD?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@GJOAEAIH@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAF?$AAO?$AAR?$AAM?$AAA?$AAT?$AA_?$AAC?$AAO?$AAL?$AAO?$AAR?$AA_?$AAE?$AAN?$AAD?$AA?$AA@ DB 'f'
	DB	00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'K', 00H, '_', 00H, 'F'
	DB	00H, 'O', 00H, 'R', 00H, 'M', 00H, 'A', 00H, 'T', 00H, '_', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, '_', 00H, 'E'
	DB	00H, 'N', 00H, 'D', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@OIHMHNMA@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAF?$AAO?$AAR?$AAM?$AAA?$AAT?$AA_?$AAC?$AAO?$AAL?$AAO?$AAR?$AA_?$AAB?$AAE?$AAG?$AAI?$AAN?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@OIHMHNMA@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAF?$AAO?$AAR?$AAM?$AAA?$AAT?$AA_?$AAC?$AAO?$AAL?$AAO?$AAR?$AA_?$AAB?$AAE?$AAG?$AAI?$AAN?$AA?$AA@ DB 'f'
	DB	00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'K', 00H, '_', 00H, 'F'
	DB	00H, 'O', 00H, 'R', 00H, 'M', 00H, 'A', 00H, 'T', 00H, '_', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, '_', 00H, 'B'
	DB	00H, 'E', 00H, 'G', 00H, 'I', 00H, 'N', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_vertex_color@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_vertex_color@@9@9@ddf8d5d8 DD 01f57H ; `nk_draw_vertex_color'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_alloc_elements@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_alloc_elements@@9@9@ddf8d5d8 DD 01f3bH ; `nk_draw_list_alloc_elements'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_alloc_vertices@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_alloc_vertices@@9@9@ddf8d5d8 DD 01f2eH ; `nk_draw_list_alloc_vertices'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_push_image@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_push_image@@9@9@ddf8d5d8 DD 01f16H ; `nk_draw_list_push_image'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_add_clip@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_add_clip@@9@9@ddf8d5d8 DD 01f07H ; `nk_draw_list_add_clip'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CA@CEAIAHJE@?$AAl?$AAi?$AAs?$AAt?$AA?9?$AA?$DO?$AAc?$AAm?$AAd?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@CEAIAHJE@?$AAl?$AAi?$AAs?$AAt?$AA?9?$AA?$DO?$AAc?$AAm?$AAd?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ DB 'l'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, '-', 00H, '>', 00H, 'c', 00H
	DB	'm', 00H, 'd', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n'
	DB	00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_command_last@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_command_last@@9@9@ddf8d5d8 DD 01ef9H ; `nk_draw_list_command_last'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_push_command@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_push_command@@9@9@ddf8d5d8 DD 01edaH ; `nk_draw_list_push_command'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CC@DJNGHHKD@?$AAl?$AAi?$AAs?$AAt?$AA?9?$AA?$DO?$AAp?$AAa?$AAt?$AAh?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@DJNGHHKD@?$AAl?$AAi?$AAs?$AAt?$AA?9?$AA?$DO?$AAp?$AAa?$AAt?$AAh?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ DB 'l'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, '-', 00H, '>', 00H, 'p', 00H
	DB	'a', 00H, 't', 00H, 'h', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'u'
	DB	00H, 'n', 00H, 't', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_path_last@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_path_last@@9@9@ddf8d5d8 DD 01ecdH ; `nk_draw_list_path_last'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_clear@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_clear@@9@9 DD 01ea4H	; `nk_draw_list_clear'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk__draw_list_next@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk__draw_list_next@@9@9 DD 01e96H	; `nk__draw_list_next'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk__draw_list_end@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk__draw_list_end@@9@9 DD 01e80H	; `nk__draw_list_end'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk__draw_list_begin@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk__draw_list_begin@@9@9 DD 01e6fH	; `nk__draw_list_begin'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BC@KAKDHGPA@?$AAe?$AAl?$AAe?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@KAKDHGPA@?$AAe?$AAl?$AAe?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?$AA@ DB 'e'
	DB	00H, 'l', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	's', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@GCIAJMPE@?$AAv?$AAe?$AAr?$AAt?$AAi?$AAc?$AAe?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@GCIAJMPE@?$AAv?$AAe?$AAr?$AAt?$AAi?$AAc?$AAe?$AAs?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'r', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_19IHKENPKO@?$AAc?$AAm?$AAd?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_19IHKENPKO@?$AAc?$AAm?$AAd?$AAs?$AA?$AA@ DB 'c', 00H, 'm', 00H, 'd', 00H
	DB	's', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@NEJONDGE@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$AA@
CONST	SEGMENT
??_C@_1O@NEJONDGE@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$AA@ DB 'c', 00H, 'o'
	DB	00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@HCDMHDPE@?$AAc?$AAa?$AAn?$AAv?$AAa?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1O@HCDMHDPE@?$AAc?$AAa?$AAn?$AAv?$AAa?$AAs?$AA?$AA@ DB 'c', 00H, 'a'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_setup@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_setup@@9@9 DD 01e5bH	; `nk_draw_list_setup'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@ DB 'l', 00H, 'i', 00H, 's', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_list_init@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_list_init@@9@9 DD 01e4bH	; `nk_draw_list_init'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@ DB 'f', 00H, 'o', 00H, 'n', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_text@@9@9 DD 01e1dH		; `nk_draw_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_push_custom@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_push_custom@@9@9 DD 01e04H		; `nk_push_custom'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_draw_image@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_draw_image@@9@9 DD 01decH		; `nk_draw_image'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_stroke_polyline@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_stroke_polyline@@9@9 DD 01dd6H	; `nk_stroke_polyline'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_fill_polygon@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_fill_polygon@@9@9 DD 01dc0H		; `nk_fill_polygon'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_stroke_polygon@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_stroke_polygon@@9@9 DD 01daaH	; `nk_stroke_polygon'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_fill_triangle@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_fill_triangle@@9@9 DD 01d8eH	; `nk_fill_triangle'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_stroke_triangle@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_stroke_triangle@@9@9 DD 01d72H	; `nk_stroke_triangle'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_fill_arc@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_fill_arc@@9@9 DD 01d60H		; `nk_fill_arc'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_fill_circle@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_fill_circle@@9@9 DD 01d37H		; `nk_fill_circle'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_fill_rect_multi_color@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_fill_rect_multi_color@@9@9 DD 01d07H ; `nk_fill_rect_multi_color'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_fill_rect@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_fill_rect@@9@9 DD 01ceeH		; `nk_fill_rect'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_stroke_rect@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_stroke_rect@@9@9 DD 01cd6H		; `nk_stroke_rect'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_stroke_curve@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_stroke_curve@@9@9 DD 01cbfH		; `nk_stroke_curve'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_stroke_line@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_stroke_line@@9@9 DD 01cacH		; `nk_stroke_line'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_push_scissor@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_push_scissor@@9@9 DD 01c96H		; `nk_push_scissor'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BA@GCDOPNOB@?$AAb?$AA?9?$AA?$DO?$AAb?$AAa?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@GCDOPNOB@?$AAb?$AA?9?$AA?$DO?$AAb?$AAa?$AAs?$AAe?$AA?$AA@ DB 'b'
	DB	00H, '-', 00H, '>', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_command_buffer_push@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_command_buffer_push@@9@9@ddf8d5d8 DD 01c75H ; `nk_command_buffer_push'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_command_buffer_reset@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_command_buffer_reset@@9@9@ddf8d5d8 DD 01c66H ; `nk_command_buffer_reset'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1O@GHGFHGEN@?$AAc?$AAm?$AAd?$AAb?$AAu?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_1O@GHGFHGEN@?$AAc?$AAm?$AAd?$AAb?$AAu?$AAf?$AA?$AA@ DB 'c', 00H, 'm'
	DB	00H, 'd', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_command_buffer_init@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_command_buffer_init@@9@9@ddf8d5d8 DD 01c59H ; `nk_command_buffer_init'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_free@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_free@@9@9 DD 01c49H		; `nk_str_free'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_clear@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_clear@@9@9 DD 01c41H		; `nk_str_clear'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_len_char@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_len_char@@9@9 DD 01c39H		; `nk_str_len_char'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_len@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_len@@9@9 DD 01c31H		; `nk_str_len'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_get_const@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_get_const@@9@9 DD 01c29H	; `nk_str_get_const'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_get@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_get@@9@9 DD 01c21H		; `nk_str_get'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_at_const@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_at_const@@9@9 DD 01bf3H		; `nk_str_at_const'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_at_char_const@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_at_char_const@@9@9 DD 01bebH	; `nk_str_at_char_const'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_at_rune@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_at_rune@@9@9 DD 01bc6H		; `nk_str_at_rune'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_at_char@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_at_char@@9@9 DD 01bbeH		; `nk_str_at_char'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CI@LFGHEBFL@?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAp?$AAo?$AAs?$AA?5?$AA?$CL?$AA?5?$AAl?$AAe?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@LFGHEBFL@?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAp?$AAo?$AAs?$AA?5?$AA?$CL?$AA?5?$AAl?$AAe?$AAn?$AA?$AA@ DB 's'
	DB	00H, '-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 's', 00H, ' '
	DB	00H, '+', 00H, ' ', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_delete_runes@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_delete_runes@@9@9 DD 01ba5H	; `nk_str_delete_runes'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_delete_chars@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_delete_chars@@9@9 DD 01b93H	; `nk_str_delete_chars'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_remove_runes@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_remove_runes@@9@9 DD 01b7dH	; `nk_str_remove_runes'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FG@GHGMCHAP@?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAs?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5?$AA?9?$AA?5?$AA?$CI?$AAi?$AAn?$AAt@
CONST	SEGMENT
??_C@_1FG@GHGMCHAP@?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAs?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5?$AA?9?$AA?5?$AA?$CI?$AAi?$AAn?$AAt@ DB '('
	DB	00H, '(', 00H, 'i', 00H, 'n', 00H, 't', 00H, ')', 00H, 's', 00H
	DB	'-', 00H, '>', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, '.', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '-'
	DB	00H, ' ', 00H, '(', 00H, 'i', 00H, 'n', 00H, 't', 00H, ')', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, ')', 00H, ' ', 00H, '>', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_remove_chars@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_remove_chars@@9@9 DD 01b72H	; `nk_str_remove_chars'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_insert_str_runes@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_insert_str_runes@@9@9 DD 01b62H	; `nk_str_insert_str_runes'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_insert_text_runes@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_insert_text_runes@@9@9 DD 01b51H ; `nk_str_insert_text_runes'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_19HIPAKEND@?$AAt?$AAe?$AAx?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_19HIPAKEND@?$AAt?$AAe?$AAx?$AAt?$AA?$AA@ DB 't', 00H, 'e', 00H, 'x', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_insert_text_utf8@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_insert_text_utf8@@9@9 DD 01b2dH	; `nk_str_insert_text_utf8'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_19FFPPJJEJ@?$AAc?$AAs?$AAt?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_19FFPPJJEJ@?$AAc?$AAs?$AAt?$AAr?$AA?$AA@ DB 'c', 00H, 's', 00H, 't', 00H
	DB	'r', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_insert_at_rune@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_insert_at_rune@@9@9 DD 01b0dH	; `nk_str_insert_at_rune'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EK@BAOJCPPG@?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAp?$AAo?$AAs?$AA?5?$AA?$CL?$AA?5?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAc?$AAo?$AAp?$AAy?$AAl?$AAe?$AAn?$AA?5?$AA?9?$AA?5?$AA1?$AA?$CJ?$AA?$CJ?$AA?5@
CONST	SEGMENT
??_C@_1EK@BAOJCPPG@?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAp?$AAo?$AAs?$AA?5?$AA?$CL?$AA?5?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAc?$AAo?$AAp?$AAy?$AAl?$AAe?$AAn?$AA?5?$AA?9?$AA?5?$AA1?$AA?$CJ?$AA?$CJ?$AA?5@ DB '('
	DB	00H, '(', 00H, 'i', 00H, 'n', 00H, 't', 00H, ')', 00H, 'p', 00H
	DB	'o', 00H, 's', 00H, ' ', 00H, '+', 00H, ' ', 00H, '(', 00H, '('
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, ')', 00H, 'c', 00H, 'o', 00H
	DB	'p', 00H, 'y', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '-'
	DB	00H, ' ', 00H, '1', 00H, ')', 00H, ')', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GA@LCICMOEC@?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAp?$AAo?$AAs?$AA?5?$AA?$CL?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAl?$AAe?$AAn?$AA?5?$AA?$CL?$AA?5?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAc?$AAo?$AAp@
CONST	SEGMENT
??_C@_1GA@LCICMOEC@?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAp?$AAo?$AAs?$AA?5?$AA?$CL?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAl?$AAe?$AAn?$AA?5?$AA?$CL?$AA?5?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAc?$AAo?$AAp@ DB '('
	DB	00H, '(', 00H, 'i', 00H, 'n', 00H, 't', 00H, ')', 00H, 'p', 00H
	DB	'o', 00H, 's', 00H, ' ', 00H, '+', 00H, ' ', 00H, '(', 00H, 'i'
	DB	00H, 'n', 00H, 't', 00H, ')', 00H, 'l', 00H, 'e', 00H, 'n', 00H
	DB	' ', 00H, '+', 00H, ' ', 00H, '(', 00H, '(', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, ')', 00H, 'c', 00H, 'o', 00H, 'p', 00H, 'y', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '-', 00H, ' ', 00H, '1'
	DB	00H, ')', 00H, ')', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@OAMMNJJI@?$AAl?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@OAMMNJJI@?$AAl?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'l'
	DB	00H, 'e', 00H, 'n', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_insert_at_char@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_insert_at_char@@9@9 DD 01ae9H	; `nk_str_insert_at_char'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_append_str_runes@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_append_str_runes@@9@9 DD 01ad9H	; `nk_str_append_str_runes'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_append_text_runes@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_append_text_runes@@9@9 DD 01ac8H ; `nk_str_append_text_runes'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_str_append_text_char@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_str_append_text_char@@9@9 DD 01a93H	; `nk_str_append_text_char'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_buffer_total@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_buffer_total@@9@9 DD 01a69H		; `nk_buffer_total'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_buffer_memory_const@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_buffer_memory_const@@9@9 DD 01a61H	; `nk_buffer_memory_const'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_buffer_memory@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_buffer_memory@@9@9 DD 01a59H	; `nk_buffer_memory'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_buffer_info@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_buffer_info@@9@9 DD 01a4cH		; `nk_buffer_info'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BK@HIMMPAND@?$AAb?$AA?9?$AA?$DO?$AAp?$AAo?$AAo?$AAl?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@HIMMPAND@?$AAb?$AA?9?$AA?$DO?$AAp?$AAo?$AAo?$AAl?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@ DB 'b'
	DB	00H, '-', 00H, '>', 00H, 'p', 00H, 'o', 00H, 'o', 00H, 'l', 00H
	DB	'.', 00H, 'f', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_buffer_free@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_buffer_free@@9@9 DD 01a41H		; `nk_buffer_free'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_buffer_clear@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_buffer_clear@@9@9 DD 01a36H		; `nk_buffer_clear'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_buffer_reset@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_buffer_reset@@9@9 DD 01a20H		; `nk_buffer_reset'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_buffer_mark@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_buffer_mark@@9@9 DD 01a15H		; `nk_buffer_mark'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DM@LCGIFLOD@?$AAb?$AA?9?$AA?$DO?$AAp?$AAo?$AAo?$AAl?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAb?$AA?9?$AA?$DO?$AAp?$AAo?$AAo?$AAl?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@LCGIFLOD@?$AAb?$AA?9?$AA?$DO?$AAp?$AAo?$AAo?$AAl?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAb?$AA?9?$AA?$DO?$AAp?$AAo?$AAo?$AAl?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@ DB 'b'
	DB	00H, '-', 00H, '>', 00H, 'p', 00H, 'o', 00H, 'o', 00H, 'l', 00H
	DB	'.', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'b', 00H, '-', 00H, '>', 00H
	DB	'p', 00H, 'o', 00H, 'o', 00H, 'l', 00H, '.', 00H, 'f', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_buffer_alloc@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_buffer_alloc@@9@9@ddf8d5d8 DD 019d8H ; `nk_buffer_alloc'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_19KEIJKAKM@?$AAt?$AAe?$AAm?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_19KEIJKAKM@?$AAt?$AAe?$AAm?$AAp?$AA?$AA@ DB 't', 00H, 'e', 00H, 'm', 00H
	DB	'p', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_buffer_realloc@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_buffer_realloc@@9@9@ddf8d5d8 DD 019b0H ; `nk_buffer_realloc'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_19GIOODLBE@?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_19GIOODLBE@?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_13BHPHAPDN@?$AAm?$AA?$AA@
CONST	SEGMENT
??_C@_13BHPHAPDN@?$AAm?$AA?$AA@ DB 'm', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_buffer_init_fixed@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_buffer_init_fixed@@9@9 DD 01983H	; `nk_buffer_init_fixed'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BK@GKDKIPLP@?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@GKDKIPLP@?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
CONST	SEGMENT
??_C@_13EPJEBPGL@?$AAb?$AA?$AA@ DB 'b', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_buffer_init@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_buffer_init@@9@9 DD 01972H		; `nk_buffer_init'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_17JOFJILLL@?$AAl?$AAe?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_17JOFJILLL@?$AAl?$AAe?$AAn?$AA?$AA@ DB 'l', 00H, 'e', 00H, 'n', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@OIEABBIM@?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@OIEABBIM@?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?$AA@ DB 'u', 00H
	DB	'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@KMGMBAKN@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1O@KMGMBAKN@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@ DB 'b', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_utf_at@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_utf_at@@9@9 DD 01936H		; `nk_utf_at'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_utf_len@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_utf_len@@9@9 DD 0191dH		; `nk_utf_len'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_13PHCIHIAO@?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_13PHCIHIAO@?$AAc?$AA?$AA@ DB 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_utf_decode@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_utf_decode@@9@9 DD 018eaH		; `nk_utf_decode'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_13JIJFJIGK@?$AAi?$AA?$AA@
CONST	SEGMENT
??_C@_13JIJFJIGK@?$AAi?$AA?$AA@ DB 'i', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_utf_decode_byte@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_utf_decode_byte@@9@9@ddf8d5d8 DD 018deH ; `nk_utf_decode_byte'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_13ICFKHAEN@?$AAu?$AA?$AA@
CONST	SEGMENT
??_C@_13ICFKHAEN@?$AAu?$AA?$AA@ DB 'u', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_utf_validate@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_utf_validate@@9@9@ddf8d5d8 DD 018d2H ; `nk_utf_validate'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1O@PHBBLDEN@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1O@PHBBLDEN@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@ DB 'r', 00H, 'e'
	DB	00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_triangle_from_direction@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_triangle_from_direction@@9@9 DD 01835H ; `nk_triangle_from_direction'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_19OFCFGDAA@?$AAc?$AAl?$AAi?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_19OFCFGDAA@?$AAc?$AAl?$AAi?$AAp?$AA?$AA@ DB 'c', 00H, 'l', 00H, 'i', 00H
	DB	'p', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_13FNCBLAIF@?$AAa?$AA?$AA@
CONST	SEGMENT
??_C@_13FNCBLAIF@?$AAa?$AA?$AA@ DB 'a', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_unify@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_unify@@9@9@ddf8d5d8 DD 01827H	; `nk_unify'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_17EHOCEIDI@?$AAi?$AAm?$AAg?$AA?$AA@
CONST	SEGMENT
??_C@_17EHOCEIDI@?$AAi?$AAm?$AAg?$AA?$AA@ DB 'i', 00H, 'm', 00H, 'g', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_image_is_subimage@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_image_is_subimage@@9@9 DD 0181fH	; `nk_image_is_subimage'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_image_ptr@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_image_ptr@@9@9 DD 01802H		; `nk_image_ptr'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@KLHDKNJP@?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1M@KLHDKNJP@?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@ DB 'a', 00H, 'l', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_17JDHLKIIP@?$AAs?$AAi?$AAz?$AA?$AA@
CONST	SEGMENT
??_C@_17JDHLKIIP@?$AAs?$AAi?$AAz?$AA?$AA@ DB 's', 00H, 'i', 00H, 'z', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_19JIFMCCAP@?$AAp?$AAa?$AAt?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_19JIFMCCAP@?$AAp?$AAa?$AAt?$AAh?$AA?$AA@ DB 'p', 00H, 'a', 00H, 't', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_file_load@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_file_load@@9@9@ddf8d5d8 DD 015edH	; `nk_file_load'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BC@JBKPFABB@?$AAb?$AAu?$AAf?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@JBKPFABB@?$AAb?$AAu?$AAf?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 'b'
	DB	00H, 'u', 00H, 'f', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_17ENLBLDPN@?$AAb?$AAu?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_17ENLBLDPN@?$AAb?$AAu?$AAf?$AA?$AA@ DB 'b', 00H, 'u', 00H, 'f', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_strfmt@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_strfmt@@9@9@ddf8d5d8 DD 015a0H	; `nk_strfmt'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_13KHDBCPJB@?$AAs?$AA?$AA@ DB 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_dtoa@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_dtoa@@9@9@ddf8d5d8 DD 0140fH	; `nk_dtoa'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BA@GHEKA@?$AAp?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@GHEKA@?$AAp?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?$AA@ DB 'p', 00H, 'a'
	DB	00H, 't', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_strmatch_fuzzy_text@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_strmatch_fuzzy_text@@9@9 DD 01319H	; `nk_strmatch_fuzzy_text'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1O@OOEGIONJ@?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1O@OOEGIONJ@?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'n', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_stricmpn@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_stricmpn@@9@9 DD 012d4H		; `nk_stricmpn'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_strtod@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_strtod@@9@9 DD 01279H		; `nk_strtod'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??nk_strtoi@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_strtoi@@9@9 DD 01260H		; `nk_strtoi'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@ DB 's', 00H, 't', 00H, 'r', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_strlen@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??nk_strlen@@9@9 DD 01257H		; `nk_strlen'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_17GHAIJGMG@?$AAp?$AAt?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_17GHAIJGMG@?$AAp?$AAt?$AAr?$AA?$AA@ DB 'p', 00H, 't', 00H, 'r', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
CONST	SEGMENT
??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'c', 00H, 'o'
	DB	00H, 's', 00H, '\', 00H, 'd', 00H, 'e', 00H, 's', 00H, 'k', 00H
	DB	't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'j'
	DB	00H, '\', 00H, 'm', 00H, 'g', 00H, 'e', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, '1', 00H, '\', 00H, 'm', 00H, 'g', 00H, 'e', 00H, 'a'
	DB	00H, 'r', 00H, '-', 00H, '1', 00H, '\', 00H, 'n', 00H, 'u', 00H
	DB	'k', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nk_zero@@9@9@ddf8d5d8
_DATA	SEGMENT
?__LINE__Var@?1??nk_zero@@9@9@ddf8d5d8 DD 01250H	; `nk_zero'::`2'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mtex\main.c
;	COMDAT _AnimBox
_TEXT	SEGMENT
$T1 = -212						; size = 16
_AnimBox PROC						; COMDAT

; 929  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 930  : 	if (nk_begin(ctx, "Animation Box", nk_rect(0.80f * st.screenx, 30, 0.20f * st.screenx, 0.5f * st.screeny), NK_WINDOW_BORDER | NK_WINDOW_TITLE))

	push	65					; 00000041H
	movzx	eax, WORD PTR _st+230
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movzx	ecx, WORD PTR _st+228
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR [esp], xmm0
	movzx	edx, WORD PTR _st+228
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	_nk_rect
	add	esp, 4
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	push	OFFSET ??_C@_0O@GPCDBPIH@Animation?5Box?$AA@
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_begin
	add	esp, 28					; 0000001cH

; 931  : 	{
; 932  : 
; 933  : 	}
; 934  : 
; 935  : 	nk_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_end
	add	esp, 4

; 936  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AnimBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mtex\main.c
;	COMDAT _Canvas
_TEXT	SEGMENT
$T1 = -240						; size = 20
$T2 = -212						; size = 16
_Canvas	PROC						; COMDAT

; 915  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 916  : 	ctx->style.window.fixed_background = nk_style_item_color(nk_rgb(16, 16, 16));

	push	16					; 00000010H
	push	16					; 00000010H
	push	16					; 00000010H
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _ctx
	add	ecx, 5560				; 000015b8H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 917  : 
; 918  : 	if (nk_begin(ctx, "Canvas", nk_rect(0.10f * st.screenx, 30, 0.70f * st.screenx, st.screeny), NK_WINDOW_BORDER | NK_WINDOW_TITLE))

	push	65					; 00000041H
	movzx	eax, WORD PTR _st+230
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movzx	ecx, WORD PTR _st+228
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@3f333333
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR [esp], xmm0
	movzx	edx, WORD PTR _st+228
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	_nk_rect
	add	esp, 4
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	push	OFFSET ??_C@_06PBIJCONE@Canvas?$AA@
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_begin
	add	esp, 28					; 0000001cH

; 919  : 	{
; 920  : 
; 921  : 	}
; 922  : 
; 923  : 	nk_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_end
	add	esp, 4

; 924  : 
; 925  : 	nk_style_default(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_style_default
	add	esp, 4

; 926  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Canvas	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mtex\main.c
;	COMDAT _LeftPannel
_TEXT	SEGMENT
$T1 = -392						; size = 16
_LeftPannel PROC					; COMDAT

; 888  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 396				; 0000018cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-396]
	mov	ecx, 99					; 00000063H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 889  : 	register int i, j, k;
; 890  : 	static int sl, pannel_state = 0;
; 891  : 	static struct nk_color editcolor = { 255, 255, 255, 255 };
; 892  : 	static char strbuf[32];
; 893  : 	static struct nk_rect bounds;
; 894  : 	TEX_DATA data;
; 895  : 	int temp, px, py, sx, sy;
; 896  : 	struct nk_image texid;
; 897  : 
; 898  : 	if (nkrendered==0)

	cmp	DWORD PTR _nkrendered, 0
	jne	$LN2@LeftPannel

; 899  : 	{
; 900  : 		if (nk_begin(ctx, "Left Pannel", nk_rect(0, 30, st.screenx * 0.10f, st.screeny), NK_WINDOW_NO_SCROLLBAR | NK_WINDOW_BORDER))

	push	33					; 00000021H
	movzx	eax, WORD PTR _st+230
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movzx	ecx, WORD PTR _st+228
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	_nk_rect
	add	esp, 4
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	push	OFFSET ??_C@_0M@ICNCCMBH@Left?5Pannel?$AA@
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_begin
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN1@LeftPannel

; 901  : 		{
; 902  : 			nk_layout_row_dynamic(ctx, 30, 1);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 903  : 
; 904  : 			nk_button_label(ctx, "Test");

	push	OFFSET ??_C@_04OFFCAMCD@Test?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_button_label
	add	esp, 8
$LN1@LeftPannel:

; 905  : 
; 906  : 			//nk_spacing(ctx, 1);
; 907  : 
; 908  : 		}
; 909  : 
; 910  : 		nk_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_end
	add	esp, 4
$LN2@LeftPannel:

; 911  : 	}
; 912  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@LeftPannel
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 396				; 0000018cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@LeftPannel:
	DD	3
	DD	$LN8@LeftPannel
$LN8@LeftPannel:
	DD	-80					; ffffffb0H
	DD	40					; 00000028H
	DD	$LN5@LeftPannel
	DD	-164					; ffffff5cH
	DD	16					; 00000010H
	DD	$LN6@LeftPannel
	DD	-176					; ffffff50H
	DD	4
	DD	$LN7@LeftPannel
$LN7@LeftPannel:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN6@LeftPannel:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
$LN5@LeftPannel:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_LeftPannel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mtex\main.c
;	COMDAT _SpriteListSelection
_TEXT	SEGMENT
$T1 = -780						; size = 16
$T2 = -756						; size = 20
$T3 = -728						; size = 20
$T4 = -700						; size = 20
$T5 = -672						; size = 16
$T6 = -648						; size = 16
$T7 = -624						; size = 16
_label_active$ = -408					; size = 6
_labels$ = -392						; size = 192
_texid$ = -192						; size = 16
_sy$ = -168						; size = 4
_sx$ = -156						; size = 4
_py$ = -144						; size = 4
_px$ = -132						; size = 4
_temp$ = -120						; size = 4
_data$ = -108						; size = 40
_m$ = -60						; size = 4
_l$ = -48						; size = 4
_k$ = -36						; size = 4
_j$ = -24						; size = 4
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_SpriteListSelection PROC				; COMDAT

; 758  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 784				; 00000310H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-784]
	mov	ecx, 196				; 000000c4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 759  : 	register int i, j, k, l = 0, m;

	mov	DWORD PTR _l$[ebp], 0

; 760  : 	TEX_DATA data;
; 761  : 	int temp;
; 762  : 	float px, py, sx, sy;
; 763  : 	struct nk_image texid;
; 764  : 	char labels[6][32], label_active[6] = { 0, 0, 0, 0, 0, 0 };

	mov	BYTE PTR _label_active$[ebp], 0
	mov	BYTE PTR _label_active$[ebp+1], 0
	mov	BYTE PTR _label_active$[ebp+2], 0
	mov	BYTE PTR _label_active$[ebp+3], 0
	mov	BYTE PTR _label_active$[ebp+4], 0
	mov	BYTE PTR _label_active$[ebp+5], 0

; 765  : 
; 766  : 	if (nk_begin(ctx, "Sprite Selection", nk_rect(st.screenx / 2 - 300, st.screeny / 2 - 300, 600, 600),
; 767  : 		NK_WINDOW_BORDER | NK_WINDOW_MINIMIZABLE | NK_WINDOW_MOVABLE | NK_WINDOW_NO_SCROLLBAR | NK_WINDOW_SCALABLE))

	push	55					; 00000037H
	push	ecx
	movss	xmm0, DWORD PTR __real@44160000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@44160000
	movss	DWORD PTR [esp], xmm0
	movzx	eax, WORD PTR _st+230
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	eax, 300				; 0000012cH
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movzx	eax, WORD PTR _st+228
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	eax, 300				; 0000012cH
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	_nk_rect
	add	esp, 4
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	push	OFFSET ??_C@_0BB@FGHOOFIP@Sprite?5Selection?$AA@
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_begin
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	$LN22@SpriteList

; 768  : 	{
; 769  : 		nk_layout_row_dynamic(ctx, 515, 1);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@4400c000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 770  : 
; 771  : 		if (nk_group_begin(ctx, "SPRSEL", NK_WINDOW_BORDER))

	push	1
	push	OFFSET ??_C@_06MNNGKIJJ@SPRSEL?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_group_begin
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN21@SpriteList

; 772  : 		{
; 773  : 			/*
; 774  : 			ctx->style.selectable.text_normal = nk_rgb(255, 128, 32);
; 775  : 			ctx->style.selectable.text_hover = nk_rgb(255, 128, 8);
; 776  : 			ctx->style.selectable.text_pressed = nk_rgb(255, 128, 8);
; 777  : 			ctx->style.selectable.text_normal_active = nk_rgb(255, 32, 32);
; 778  : 			ctx->style.selectable.text_hover_active = nk_rgb(255, 32, 32);
; 779  : 			ctx->style.selectable.text_pressed_active = nk_rgb(255, 32, 32);
; 780  : 			*/
; 781  : 
; 782  : 			ctx->style.selectable.hover = nk_style_item_color(nk_rgb(206, 206, 206));

	push	206					; 000000ceH
	push	206					; 000000ceH
	push	206					; 000000ceH
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _ctx
	add	ecx, 1140				; 00000474H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 783  : 			ctx->style.selectable.normal_active = nk_style_item_color(nk_rgb(255, 128, 32));

	push	32					; 00000020H
	push	128					; 00000080H
	push	255					; 000000ffH
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _ctx
	add	ecx, 1180				; 0000049cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 784  : 			ctx->style.selectable.hover_active = nk_style_item_color(nk_rgb(255, 128, 32));

	push	32					; 00000020H
	push	128					; 00000080H
	push	255					; 000000ffH
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _ctx
	add	ecx, 1200				; 000004b0H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 785  : 
; 786  : 			nk_layout_row_dynamic(ctx, 100, 6);

	push	6
	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 787  : 			//l = 0;
; 788  : 			for (i = 0; i < st.num_sprites; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@SpriteList
$LN19@SpriteList:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN20@SpriteList:
	movzx	eax, WORD PTR _st+2335376
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN18@SpriteList

; 789  : 			{
; 790  : 				j = st.sprite_id_list[i];

	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _st[eax+75152]
	mov	DWORD PTR _j$[ebp], ecx

; 791  : 				if (st.Game_Sprites[j].num_start_frames>0)

	imul	eax, DWORD PTR _j$[ebp], 8828
	movsx	ecx, WORD PTR _st[eax+75476]
	test	ecx, ecx
	jle	$LN14@SpriteList

; 792  : 				{
; 793  : 					for (k = 0; k < st.Game_Sprites[j].num_start_frames; k++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN16@SpriteList
$LN15@SpriteList:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN16@SpriteList:
	imul	eax, DWORD PTR _j$[ebp], 8828
	movsx	ecx, WORD PTR _st[eax+75476]
	cmp	DWORD PTR _k$[ebp], ecx
	jge	$LN14@SpriteList

; 794  : 					{
; 795  : 						data = mgg_game[st.Game_Sprites[j].MGG_ID].frames[st.Game_Sprites[j].frame[k]];

	imul	eax, DWORD PTR _j$[ebp], 8828
	movsx	ecx, WORD PTR _st[eax+75472]
	imul	edx, ecx, 60
	imul	eax, DWORD PTR _j$[ebp], 8828
	mov	ecx, DWORD PTR _st[eax+75480]
	mov	eax, DWORD PTR _k$[ebp]
	imul	ecx, DWORD PTR [ecx+eax*4], 40
	mov	esi, DWORD PTR _mgg_game[edx+40]
	add	esi, ecx
	mov	ecx, 10					; 0000000aH
	lea	edi, DWORD PTR _data$[ebp]
	rep movsd

; 796  : 
; 797  : 					//	if (meng.sprite_selection == j && meng.sprite_frame_selection == st.Game_Sprites[j].frame[k])
; 798  : 							temp = 1;

	mov	DWORD PTR _temp$[ebp], 1

; 799  : 						//else
; 800  : 							temp = 0;

	mov	DWORD PTR _temp$[ebp], 0

; 801  : 
; 802  : 						if (data.vb_id != -1)

	movsx	eax, WORD PTR _data$[ebp+10]
	cmp	eax, -1
	je	$LN13@SpriteList

; 803  : 						{
; 804  : 							px = ((float)data.posx / 32768) * data.w;

	movzx	eax, WORD PTR _data$[ebp+14]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@47000000
	cvtsi2ss xmm1, DWORD PTR _data$[ebp+24]
	mulss	xmm0, xmm1
	movss	DWORD PTR _px$[ebp], xmm0

; 805  : 							ceil(px);

	cvtss2sd xmm0, DWORD PTR _px$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_ceil
	fstp	ST(0)
	add	esp, 8

; 806  : 							px += data.x_offset;

	movsx	eax, WORD PTR _data$[ebp+36]
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR _px$[ebp]
	movss	DWORD PTR _px$[ebp], xmm0

; 807  : 							py = ((float)data.posy / 32768) * data.h;

	movzx	eax, WORD PTR _data$[ebp+16]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@47000000
	cvtsi2ss xmm1, DWORD PTR _data$[ebp+28]
	mulss	xmm0, xmm1
	movss	DWORD PTR _py$[ebp], xmm0

; 808  : 							ceil(py);

	cvtss2sd xmm0, DWORD PTR _py$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_ceil
	fstp	ST(0)
	add	esp, 8

; 809  : 							py += data.y_offset;

	movsx	eax, WORD PTR _data$[ebp+38]
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR _py$[ebp]
	movss	DWORD PTR _py$[ebp], xmm0

; 810  : 							sx = ((float)data.sizex / 32768) * data.w;

	movzx	eax, WORD PTR _data$[ebp+18]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@47000000
	cvtsi2ss xmm1, DWORD PTR _data$[ebp+24]
	mulss	xmm0, xmm1
	movss	DWORD PTR _sx$[ebp], xmm0

; 811  : 							ceil(sx);

	cvtss2sd xmm0, DWORD PTR _sx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_ceil
	fstp	ST(0)
	add	esp, 8

; 812  : 							sy = ((float)data.sizey / 32768) * data.h;

	movzx	eax, WORD PTR _data$[ebp+20]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@47000000
	cvtsi2ss xmm1, DWORD PTR _data$[ebp+28]
	mulss	xmm0, xmm1
	movss	DWORD PTR _sy$[ebp], xmm0

; 813  : 							ceil(sy);

	cvtss2sd xmm0, DWORD PTR _sy$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_ceil
	fstp	ST(0)
	add	esp, 8

; 814  : 							texid = nk_subimage_id(data.data, data.w, data.h, nk_recta(nk_vec2(px, py), nk_vec2(sx, sy)));

	push	ecx
	movss	xmm0, DWORD PTR _sy$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _py$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _px$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	_nk_recta
	add	esp, 4
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	movzx	ecx, WORD PTR _data$[ebp+28]
	push	ecx
	movzx	edx, WORD PTR _data$[ebp+24]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	call	_nk_subimage_id
	add	esp, 32					; 00000020H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _texid$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _texid$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _texid$[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _texid$[ebp+12], eax

; 815  : 						}
; 816  : 						else

	jmp	SHORT $LN12@SpriteList
$LN13@SpriteList:

; 817  : 							texid = nk_image_id(data.data);

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T7[ebp]
	push	ecx
	call	_nk_image_id
	add	esp, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _texid$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _texid$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _texid$[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _texid$[ebp+12], eax
$LN12@SpriteList:

; 818  : 
; 819  : 						if (nk_selectable_image_label(ctx, texid," ", NK_TEXT_ALIGN_CENTERED, &temp))

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	push	2
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _texid$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _texid$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _texid$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _texid$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_selectable_image_label
	add	esp, 32					; 00000020H

; 820  : 						{
; 821  : 							//meng.sprite_selection = j;
; 822  : 							//meng.sprite_frame_selection = st.Game_Sprites[j].frame[k];
; 823  : 
; 824  : 							//meng.spr.health = st.Game_Sprites[j].health;
; 825  : 							//meng.spr.body = st.Game_Sprites[j].body;
; 826  : 							//meng.spr.flags = st.Game_Sprites[j].flags;
; 827  : 
; 828  : 							//meng.spr.body.size = st.Game_Sprites[j].body.size;
; 829  : 						}
; 830  : 
; 831  : 						strcpy(labels[l], st.Game_Sprites[j].name);

	imul	eax, DWORD PTR _j$[ebp], 8828
	add	eax, OFFSET _st+75408
	push	eax
	mov	ecx, DWORD PTR _l$[ebp]
	shl	ecx, 5
	lea	edx, DWORD PTR _labels$[ebp+ecx]
	push	edx
	call	_strcpy
	add	esp, 8

; 832  : 
; 833  : 						//nk_label(ctx, labels[l], NK_TEXT_ALIGN_CENTERED);
; 834  : 
; 835  : 						label_active[l] = temp;

	mov	eax, DWORD PTR _l$[ebp]
	mov	cl, BYTE PTR _temp$[ebp]
	mov	BYTE PTR _label_active$[ebp+eax], cl

; 836  : 
; 837  : 						l++;

	mov	eax, DWORD PTR _l$[ebp]
	add	eax, 1
	mov	DWORD PTR _l$[ebp], eax

; 838  : 
; 839  : 						if (l == 6)

	cmp	DWORD PTR _l$[ebp], 6
	jne	$LN10@SpriteList

; 840  : 						{
; 841  : 							nk_layout_row_dynamic(ctx, 15, 6);

	push	6
	push	ecx
	movss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 842  : 							for (m = 0; m < l; m++)

	mov	DWORD PTR _m$[ebp], 0
	jmp	SHORT $LN9@SpriteList
$LN8@SpriteList:
	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 1
	mov	DWORD PTR _m$[ebp], eax
$LN9@SpriteList:
	mov	eax, DWORD PTR _m$[ebp]
	cmp	eax, DWORD PTR _l$[ebp]
	jge	SHORT $LN7@SpriteList

; 843  : 							{
; 844  : 								if (label_active[m])

	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR _label_active$[ebp+eax]
	test	ecx, ecx
	je	SHORT $LN6@SpriteList

; 845  : 									ctx->style.text.color = nk_rgb(255, 255, 255);

	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ctx
	mov	DWORD PTR [ecx+404], eax

; 846  : 								else

	jmp	SHORT $LN5@SpriteList
$LN6@SpriteList:

; 847  : 									ctx->style.text.color = nk_rgb(128, 128, 128);

	push	128					; 00000080H
	push	128					; 00000080H
	push	128					; 00000080H
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ctx
	mov	DWORD PTR [ecx+404], eax
$LN5@SpriteList:

; 848  : 
; 849  : 								nk_label(ctx, labels[m], NK_TEXT_ALIGN_CENTERED);

	push	2
	mov	eax, DWORD PTR _m$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _labels$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _ctx
	push	edx
	call	_nk_label
	add	esp, 12					; 0000000cH

; 850  : 							}

	jmp	$LN8@SpriteList
$LN7@SpriteList:

; 851  : 
; 852  : 							memset(label_active, 6, 0);

	push	0
	push	6
	lea	eax, DWORD PTR _label_active$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 853  : 
; 854  : 							nk_layout_row_dynamic(ctx, 100, 6);

	push	6
	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 855  : 							l = 0;

	mov	DWORD PTR _l$[ebp], 0
$LN10@SpriteList:

; 856  : 						}
; 857  : 					}

	jmp	$LN15@SpriteList
$LN14@SpriteList:

; 858  : 				}
; 859  : 			}

	jmp	$LN19@SpriteList
$LN18@SpriteList:

; 860  : 
; 861  : 			if (l != 0)

	cmp	DWORD PTR _l$[ebp], 0
	je	SHORT $LN4@SpriteList

; 862  : 			{
; 863  : 				nk_layout_row_dynamic(ctx, 15, 6);

	push	6
	push	ecx
	movss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 864  : 				for (m = 0; m < l; m++)

	mov	DWORD PTR _m$[ebp], 0
	jmp	SHORT $LN3@SpriteList
$LN2@SpriteList:
	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 1
	mov	DWORD PTR _m$[ebp], eax
$LN3@SpriteList:
	mov	eax, DWORD PTR _m$[ebp]
	cmp	eax, DWORD PTR _l$[ebp]
	jge	SHORT $LN1@SpriteList

; 865  : 					nk_label(ctx, labels[m], NK_TEXT_ALIGN_CENTERED);

	push	2
	mov	eax, DWORD PTR _m$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _labels$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _ctx
	push	edx
	call	_nk_label
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN2@SpriteList
$LN1@SpriteList:

; 866  : 
; 867  : 				l = 0;

	mov	DWORD PTR _l$[ebp], 0
$LN4@SpriteList:

; 868  : 			}
; 869  : 
; 870  : 			nk_group_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_group_end
	add	esp, 4
$LN21@SpriteList:

; 871  : 		}
; 872  : 
; 873  : 		nk_style_default(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_style_default
	add	esp, 4

; 874  : 
; 875  : 		nk_layout_row_dynamic(ctx, 30, 3);

	push	3
	push	ecx
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 876  : 		nk_spacing(ctx, 2);

	push	2
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_spacing
	add	esp, 8
$LN22@SpriteList:

; 877  : 
; 878  : 		//if (nk_button_label(ctx, "Select"))
; 879  : 			//meng.command = ADD_SPRITE;
; 880  : 	}
; 881  : 
; 882  : 	st.mouse1 = 0;

	mov	BYTE PTR _st+65636, 0

; 883  : 
; 884  : 	nk_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_end
	add	esp, 4

; 885  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@SpriteList
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 784				; 00000310H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN31@SpriteList:
	DD	5
	DD	$LN30@SpriteList
$LN30@SpriteList:
	DD	-108					; ffffff94H
	DD	40					; 00000028H
	DD	$LN25@SpriteList
	DD	-120					; ffffff88H
	DD	4
	DD	$LN26@SpriteList
	DD	-192					; ffffff40H
	DD	16					; 00000010H
	DD	$LN27@SpriteList
	DD	-392					; fffffe78H
	DD	192					; 000000c0H
	DD	$LN28@SpriteList
	DD	-408					; fffffe68H
	DD	6
	DD	$LN29@SpriteList
$LN29@SpriteList:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	0
$LN28@SpriteList:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	0
$LN27@SpriteList:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
$LN26@SpriteList:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN25@SpriteList:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_SpriteListSelection ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mtex\main.c
;	COMDAT _MenuBar
_TEXT	SEGMENT
$T1 = -604						; size = 16
_bi$ = -376						; size = 32
_id2$ = -56						; size = 4
_id$ = -44						; size = 4
_MenuBar PROC						; COMDAT

; 659  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 608				; 00000260H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-608]
	mov	ecx, 152				; 00000098H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 660  : 	register int i, a, m;
; 661  : 	static char str[128], path[MAX_PATH];
; 662  : 	int id = 0, id2 = 0, check;

	mov	DWORD PTR _id$[ebp], 0
	mov	DWORD PTR _id2$[ebp], 0

; 663  : 	static int state = 0, mggid;
; 664  : 
; 665  : 	TCHAR filename[MAX_PATH];
; 666  : 
; 667  : 	BROWSEINFO bi;
; 668  : 
; 669  : 	ZeroMemory(&bi, sizeof(bi));

	push	32					; 00000020H
	push	0
	lea	eax, DWORD PTR _bi$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 670  : 
; 671  : 	static LPITEMIDLIST pidl;
; 672  : 
; 673  : 	if (nkrendered==0)

	cmp	DWORD PTR _nkrendered, 0
	jne	$LN1@MenuBar

; 674  : 	{
; 675  : 		if (nk_begin(ctx, "Menu", nk_rect(0, 0, st.screenx, 30), NK_WINDOW_NO_SCROLLBAR))

	push	32					; 00000020H
	push	ecx
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR [esp], xmm0
	movzx	eax, WORD PTR _st+228
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_nk_rect
	add	esp, 4
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	push	OFFSET ??_C@_04IFEHPILC@Menu?$AA@
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_begin
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	$LN12@MenuBar

; 676  : 		{
; 677  : 			nk_menubar_begin(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_menubar_begin
	add	esp, 4

; 678  : 			nk_layout_row_begin(ctx, NK_STATIC, 25, 5);

	push	5
	push	ecx
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_begin
	add	esp, 16					; 00000010H

; 679  : 
; 680  : 			nk_layout_row_push(ctx, 45);

	push	ecx
	movss	xmm0, DWORD PTR __real@42340000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_push
	add	esp, 8

; 681  : 			if (nk_menu_begin_label(ctx, "File", NK_TEXT_LEFT, nk_vec2(210, 210)))

	push	ecx
	movss	xmm0, DWORD PTR __real@43520000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@43520000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	push	17					; 00000011H
	push	OFFSET ??_C@_04PBAHLACE@File?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_menu_begin_label
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN11@MenuBar

; 682  : 			{
; 683  : 				nk_layout_row_dynamic(ctx, 30, 1);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 684  : 				if (nk_menu_item_label(ctx, "New MGG", NK_TEXT_LEFT))

	push	17					; 00000011H
	push	OFFSET ??_C@_07LDBEDBB@New?5MGG?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_menu_item_label
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN10@MenuBar

; 685  : 				{
; 686  : 					state = 1;

	mov	DWORD PTR ?state@?1??MenuBar@@9@9, 1
$LN10@MenuBar:

; 687  : 				}
; 688  : 
; 689  : 				if (nk_menu_item_label(ctx, "Open MGG txt file", NK_TEXT_LEFT))

	push	17					; 00000011H
	push	OFFSET ??_C@_0BC@FLINIBDA@Open?5MGG?5txt?5file?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_menu_item_label
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN9@MenuBar

; 690  : 				{
; 691  : 					//SetDirContent("mgm");
; 692  : 					state = 2;

	mov	DWORD PTR ?state@?1??MenuBar@@9@9, 2
$LN9@MenuBar:

; 693  : 				}
; 694  : 
; 695  : 				nk_menu_item_label(ctx, "Save", NK_TEXT_LEFT);

	push	17					; 00000011H
	push	OFFSET ??_C@_04INACKGJP@Save?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_menu_item_label
	add	esp, 12					; 0000000cH

; 696  : 				nk_menu_item_label(ctx, "Save as...", NK_TEXT_LEFT);

	push	17					; 00000011H
	push	OFFSET ??_C@_0L@JLONELEP@Save?5as?4?4?4?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_menu_item_label
	add	esp, 12					; 0000000cH

; 697  : 				nk_menu_item_label(ctx, "Compile MGG", NK_TEXT_LEFT);

	push	17					; 00000011H
	push	OFFSET ??_C@_0M@GNJIJMPA@Compile?5MGG?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_menu_item_label
	add	esp, 12					; 0000000cH

; 698  : 				if (nk_menu_item_label(ctx, "Exit", NK_TEXT_LEFT)) st.quit = 1;

	push	17					; 00000011H
	push	OFFSET ??_C@_04LBABLPF@Exit?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_menu_item_label
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN8@MenuBar
	mov	BYTE PTR _st+66668, 1
$LN8@MenuBar:

; 699  : 				nk_menu_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_menu_end
	add	esp, 4
$LN11@MenuBar:

; 700  : 			}
; 701  : 
; 702  : 			nk_layout_row_push(ctx, 45);

	push	ecx
	movss	xmm0, DWORD PTR __real@42340000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_push
	add	esp, 8

; 703  : 			if (nk_menu_begin_label(ctx, "Edit", NK_TEXT_LEFT, nk_vec2(120, 200)))

	push	ecx
	movss	xmm0, DWORD PTR __real@43480000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42f00000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	push	17					; 00000011H
	push	OFFSET ??_C@_04BBNPPDNC@Edit?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_menu_begin_label
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN7@MenuBar

; 704  : 			{
; 705  : 				nk_layout_row_dynamic(ctx, 30, 1);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 706  : 				nk_menu_item_label(ctx, "Preferences", NK_TEXT_LEFT);

	push	17					; 00000011H
	push	OFFSET ??_C@_0M@PIPCPMLP@Preferences?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_menu_item_label
	add	esp, 12					; 0000000cH

; 707  : 				nk_menu_item_label(ctx, "MGG properties", NK_TEXT_LEFT);

	push	17					; 00000011H
	push	OFFSET ??_C@_0P@FOGACOBA@MGG?5properties?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_menu_item_label
	add	esp, 12					; 0000000cH

; 708  : 				nk_menu_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_menu_end
	add	esp, 4
$LN7@MenuBar:

; 709  : 			}
; 710  : 
; 711  : 
; 712  : 			nk_layout_row_push(ctx, 45);

	push	ecx
	movss	xmm0, DWORD PTR __real@42340000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_push
	add	esp, 8

; 713  : 			if (nk_menu_begin_label(ctx, "Help", NK_TEXT_LEFT, nk_vec2(120, 200)))

	push	ecx
	movss	xmm0, DWORD PTR __real@43480000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42f00000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	push	17					; 00000011H
	push	OFFSET ??_C@_04DDFEFHOJ@Help?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_menu_begin_label
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN6@MenuBar

; 714  : 			{
; 715  : 				nk_layout_row_dynamic(ctx, 30, 1);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 716  : 				nk_menu_item_label(ctx, "Help", NK_TEXT_LEFT);

	push	17					; 00000011H
	push	OFFSET ??_C@_04DDFEFHOJ@Help?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_menu_item_label
	add	esp, 12					; 0000000cH

; 717  : 				nk_menu_item_label(ctx, "About", NK_TEXT_LEFT);

	push	17					; 00000011H
	push	OFFSET ??_C@_05BDOHFCKE@About?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_menu_item_label
	add	esp, 12					; 0000000cH

; 718  : 				nk_menu_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_menu_end
	add	esp, 4
$LN6@MenuBar:

; 719  : 			}
; 720  : 
; 721  : 			nk_layout_row_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_end
	add	esp, 4

; 722  : 			nk_menubar_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_menubar_end
	add	esp, 4
$LN12@MenuBar:

; 723  : 
; 724  : 		}
; 725  : 
; 726  : 		nk_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_end
	add	esp, 4

; 727  : 
; 728  : 		if (state == 1)

	cmp	DWORD PTR ?state@?1??MenuBar@@9@9, 1
	jne	SHORT $LN3@MenuBar

; 729  : 		{
; 730  : 			bi.lpszTitle = ("Select your project folder");

	mov	DWORD PTR _bi$[ebp+12], OFFSET ??_C@_0BL@HJHOAKN@Select?5your?5project?5folder?$AA@

; 731  : 
; 732  : 			pidl = SHBrowseForFolder(&bi);

	mov	esi, esp
	lea	eax, DWORD PTR _bi$[ebp]
	push	eax
	call	DWORD PTR __imp__SHBrowseForFolderA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?pidl@?1??MenuBar@@9@9, eax

; 733  : 
; 734  : 			if (pidl)

	cmp	DWORD PTR ?pidl@?1??MenuBar@@9@9, 0
	je	SHORT $LN4@MenuBar

; 735  : 			{
; 736  : 				state = 2;

	mov	DWORD PTR ?state@?1??MenuBar@@9@9, 2

; 737  : 				memset(&tmgg, 0, sizeof(_MGGFORMAT));

	push	76					; 0000004cH
	push	0
	push	OFFSET _tmgg
	call	_memset
	add	esp, 12					; 0000000cH

; 738  : 			}
; 739  : 			else

	jmp	SHORT $LN3@MenuBar
$LN4@MenuBar:

; 740  : 				state = 0;

	mov	DWORD PTR ?state@?1??MenuBar@@9@9, 0
$LN3@MenuBar:

; 741  : 		}
; 742  : 
; 743  : 		if (state == 2)

	cmp	DWORD PTR ?state@?1??MenuBar@@9@9, 2
	jne	SHORT $LN1@MenuBar

; 744  : 		{
; 745  : 			if (pidl)

	cmp	DWORD PTR ?pidl@?1??MenuBar@@9@9, 0
	je	SHORT $LN1@MenuBar

; 746  : 			{
; 747  : 				SHGetPathFromIDList(pidl, path);

	mov	esi, esp
	push	OFFSET ?path@?1??MenuBar@@9@9
	mov	eax, DWORD PTR ?pidl@?1??MenuBar@@9@9
	push	eax
	call	DWORD PTR __imp__SHGetPathFromIDListA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 748  : 				
; 749  : 				NewMGGBox(path);

	push	OFFSET ?path@?1??MenuBar@@9@9
	call	_NewMGGBox
	add	esp, 4
$LN1@MenuBar:

; 750  : 			}
; 751  : 
; 752  : 			//state = 0;
; 753  : 		}
; 754  : 	}
; 755  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@MenuBar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 608				; 00000260H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN20@MenuBar:
	DD	3
	DD	$LN19@MenuBar
$LN19@MenuBar:
	DD	-336					; fffffeb0H
	DD	260					; 00000104H
	DD	$LN16@MenuBar
	DD	-376					; fffffe88H
	DD	32					; 00000020H
	DD	$LN17@MenuBar
	DD	-388					; fffffe7cH
	DD	4
	DD	$LN18@MenuBar
$LN18@MenuBar:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN17@MenuBar:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	0
$LN16@MenuBar:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_MenuBar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mtex\main.c
;	COMDAT _NewMGGBox
_TEXT	SEGMENT
tv448 = -420						; size = 4
tv437 = -420						; size = 4
tv417 = -420						; size = 4
tv374 = -420						; size = 4
tv442 = -416						; size = 4
tv431 = -416						; size = 4
tv379 = -416						; size = 4
tv368 = -416						; size = 4
$T1 = -408						; size = 16
_bi$ = -192						; size = 32
_ofn$ = -152						; size = 88
_tok$ = -56						; size = 4
_len2$ = -44						; size = 4
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_path$ = 8						; size = 4
_NewMGGBox PROC						; COMDAT

; 402  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 420				; 000001a4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-420]
	mov	ecx, 105				; 00000069H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 403  : 	register int i, j, k;
; 404  : 	static char path2[MAX_PATH], files[MAX_PATH * 64] = { 0 }, tex[512][MAX_PATH], tex_n[512][MAX_PATH], path3[MAX_PATH], str[32], tex_names[512][32], tex_n_names[512][32];
; 405  : 	static int len, state = 0, num_files_t = 0, num_files_n = 0;
; 406  : 	int len2;
; 407  : 	char *tok = NULL;

	mov	DWORD PTR _tok$[ebp], 0

; 408  : 
; 409  : 	OPENFILENAME ofn;
; 410  : 	ZeroMemory(&files, sizeof(files));

	push	16640					; 00004100H
	push	0
	push	OFFSET ?files@?1??NewMGGBox@@9@9
	call	_memset
	add	esp, 12					; 0000000cH

; 411  : 	ZeroMemory(&ofn, sizeof(ofn));

	push	88					; 00000058H
	push	0
	lea	eax, DWORD PTR _ofn$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 412  : 	ofn.lStructSize = sizeof(ofn);

	mov	DWORD PTR _ofn$[ebp], 88		; 00000058H

; 413  : 	ofn.hwndOwner = NULL;  // If you have a window to center over, put its HANDLE here

	mov	DWORD PTR _ofn$[ebp+4], 0

; 414  : 	ofn.lpstrFilter = "Image Files\0*.png;*.jpg;*.tga;*.bmp\0Any File\0*.*\0";

	mov	DWORD PTR _ofn$[ebp+12], OFFSET ??_C@_0DC@KBKJHOEA@Image?5Files?$AA?$CK?4png?$DL?$CK?4jpg?$DL?$CK?4tga?$DL?$CK?4@

; 415  : 	ofn.lpstrFile = files;

	mov	DWORD PTR _ofn$[ebp+28], OFFSET ?files@?1??NewMGGBox@@9@9

; 416  : 	ofn.nMaxFile = MAX_PATH*2;

	mov	DWORD PTR _ofn$[ebp+32], 520		; 00000208H

; 417  : 	ofn.lpstrTitle = "Select textures to import";

	mov	DWORD PTR _ofn$[ebp+48], OFFSET ??_C@_0BK@HHEIJDCK@Select?5textures?5to?5import?$AA@

; 418  : 	//strcpy(ofn.lpstrInitialDir, path);
; 419  : 	ofn.lpstrInitialDir = path;

	mov	eax, DWORD PTR _path$[ebp]
	mov	DWORD PTR _ofn$[ebp+44], eax

; 420  : 
; 421  : 	BROWSEINFO bi;
; 422  : 
; 423  : 	ZeroMemory(&bi, sizeof(bi));

	push	32					; 00000020H
	push	0
	lea	eax, DWORD PTR _bi$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 424  : 
; 425  : 	static LPITEMIDLIST pidl;
; 426  : 
; 427  : 	ofn.Flags = OFN_DONTADDTORECENT | OFN_FILEMUSTEXIST | OFN_ALLOWMULTISELECT;

	mov	DWORD PTR _ofn$[ebp+52], 33559040	; 02001200H

; 428  : 
; 429  : 	if (!state)

	cmp	DWORD PTR ?state@?1??NewMGGBox@@9@9, 0
	jne	SHORT $LN40@NewMGGBox

; 430  : 	{
; 431  : 		strcpy(path2, path);

	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	push	OFFSET ?path2@?1??NewMGGBox@@9@9
	call	_strcpy
	add	esp, 8

; 432  : 		len = strlen(path2);

	push	OFFSET ?path2@?1??NewMGGBox@@9@9
	call	_strlen
	add	esp, 4
	mov	DWORD PTR ?len@?1??NewMGGBox@@9@9, eax

; 433  : 		
; 434  : 		state = 1;

	mov	DWORD PTR ?state@?1??NewMGGBox@@9@9, 1
$LN40@NewMGGBox:

; 435  : 	}
; 436  : 
; 437  : 	if (nk_begin(ctx, "Create new MGG project", nk_rect(st.screenx / 2 - 256, st.screeny / 2 - 256, 512, 512), NK_WINDOW_BORDER | NK_WINDOW_TITLE))

	push	65					; 00000041H
	push	ecx
	movss	xmm0, DWORD PTR __real@44000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@44000000
	movss	DWORD PTR [esp], xmm0
	movzx	eax, WORD PTR _st+230
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	eax, 256				; 00000100H
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movzx	eax, WORD PTR _st+228
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	eax, 256				; 00000100H
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	_nk_rect
	add	esp, 4
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	push	OFFSET ??_C@_0BH@CIGIGAMK@Create?5new?5MGG?5project?$AA@
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_begin
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	$LN39@NewMGGBox

; 438  : 	{
; 439  : 		nk_layout_row_begin(ctx, NK_DYNAMIC, 30, 2);

	push	2
	push	ecx
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_begin
	add	esp, 16					; 00000010H

; 440  : 
; 441  : 		nk_layout_row_push(ctx, 0.85f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f59999a
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_push
	add	esp, 8

; 442  : 		nk_edit_string(ctx, NK_EDIT_SIMPLE, path2, &len, MAX_PATH, nk_filter_default);

	push	OFFSET _nk_filter_default
	push	260					; 00000104H
	push	OFFSET ?len@?1??NewMGGBox@@9@9
	push	OFFSET ?path2@?1??NewMGGBox@@9@9
	push	512					; 00000200H
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_edit_string
	add	esp, 24					; 00000018H

; 443  : 
; 444  : 		nk_layout_row_push(ctx, 0.15f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_push
	add	esp, 8

; 445  : 		if (nk_button_label(ctx, "Browse"))

	push	OFFSET ??_C@_06FEFKNJEJ@Browse?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_button_label
	add	esp, 8
	test	eax, eax
	je	SHORT $LN37@NewMGGBox

; 446  : 		{
; 447  : 			bi.lpszTitle = ("Select your project folder");

	mov	DWORD PTR _bi$[ebp+12], OFFSET ??_C@_0BL@HJHOAKN@Select?5your?5project?5folder?$AA@

; 448  : 
; 449  : 			pidl = SHBrowseForFolder(&bi);

	mov	esi, esp
	lea	eax, DWORD PTR _bi$[ebp]
	push	eax
	call	DWORD PTR __imp__SHBrowseForFolderA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?pidl@?1??NewMGGBox@@9@9, eax

; 450  : 
; 451  : 			if (pidl)

	cmp	DWORD PTR ?pidl@?1??NewMGGBox@@9@9, 0
	je	SHORT $LN37@NewMGGBox

; 452  : 			{
; 453  : 				SHGetPathFromIDList(pidl, path);

	mov	esi, esp
	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pidl@?1??NewMGGBox@@9@9
	push	ecx
	call	DWORD PTR __imp__SHGetPathFromIDListA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 454  : 
; 455  : 				strcpy(path2, path);

	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	push	OFFSET ?path2@?1??NewMGGBox@@9@9
	call	_strcpy
	add	esp, 8

; 456  : 				len = strlen(path2);

	push	OFFSET ?path2@?1??NewMGGBox@@9@9
	call	_strlen
	add	esp, 4
	mov	DWORD PTR ?len@?1??NewMGGBox@@9@9, eax
$LN37@NewMGGBox:

; 457  : 			}
; 458  : 		}
; 459  : 
; 460  : 		nk_layout_row_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_end
	add	esp, 4

; 461  : 
; 462  : 		nk_layout_row_dynamic(ctx, 10, 1);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 463  : 		nk_spacing(ctx, 1);

	push	1
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_spacing
	add	esp, 8

; 464  : 
; 465  : 		nk_layout_row_dynamic(ctx, 30, 2);

	push	2
	push	ecx
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 466  : 		if (nk_button_label(ctx, "Import textures"))

	push	OFFSET ??_C@_0BA@JEDADDEO@Import?5textures?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_button_label
	add	esp, 8
	test	eax, eax
	je	$LN33@NewMGGBox

; 467  : 		{
; 468  : 			if (GetOpenFileName(&ofn))

	mov	esi, esp
	lea	eax, DWORD PTR _ofn$[ebp]
	push	eax
	call	DWORD PTR __imp__GetOpenFileNameA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN33@NewMGGBox

; 469  : 			{
; 470  : 				state = 1;

	mov	DWORD PTR ?state@?1??NewMGGBox@@9@9, 1

; 471  : 				i = 0;

	mov	DWORD PTR _i$[ebp], 0
$LN34@NewMGGBox:

; 472  : 				while (state)

	cmp	DWORD PTR ?state@?1??NewMGGBox@@9@9, 0
	je	$LN33@NewMGGBox

; 473  : 				{
; 474  : 					if (i == 0)

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN32@NewMGGBox

; 475  : 					{
; 476  : 						tok = strtok(files, " ");

	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	push	OFFSET ?files@?1??NewMGGBox@@9@9
	call	_strtok
	add	esp, 8
	mov	DWORD PTR _tok$[ebp], eax

; 477  : 						strcpy(path3, tok);

	mov	eax, DWORD PTR _tok$[ebp]
	push	eax
	push	OFFSET ?path3@?1??NewMGGBox@@9@9
	call	_strcpy
	add	esp, 8

; 478  : 					}
; 479  : 					else

	jmp	$LN23@NewMGGBox
$LN32@NewMGGBox:

; 480  : 					{
; 481  : 						tok = strtok(NULL, " ");

	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	push	0
	call	_strtok
	add	esp, 8
	mov	DWORD PTR _tok$[ebp], eax

; 482  : 
; 483  : 						if (!tok)

	cmp	DWORD PTR _tok$[ebp], 0
	jne	$LN30@NewMGGBox

; 484  : 						{
; 485  : 							if (i == 1)

	cmp	DWORD PTR _i$[ebp], 1
	jne	$LN29@NewMGGBox

; 486  : 							{
; 487  : 								strcpy(tex[num_files_t], path3);

	push	OFFSET ?path3@?1??NewMGGBox@@9@9
	imul	eax, DWORD PTR ?num_files_t@?1??NewMGGBox@@9@9, 260
	add	eax, OFFSET ?tex@?1??NewMGGBox@@9@9
	push	eax
	call	_strcpy
	add	esp, 8

; 488  : 								len2 = strlen(path3);

	push	OFFSET ?path3@?1??NewMGGBox@@9@9
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len2$[ebp], eax

; 489  : 
; 490  : 								for (j = len2; j > 0; j--)

	mov	eax, DWORD PTR _len2$[ebp]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN28@NewMGGBox
$LN27@NewMGGBox:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN28@NewMGGBox:
	cmp	DWORD PTR _j$[ebp], 0
	jle	SHORT $LN26@NewMGGBox

; 491  : 								{
; 492  : 									if (path3[j] == '\\' || path3[j] == '/')

	mov	eax, DWORD PTR _j$[ebp]
	movsx	ecx, BYTE PTR ?path3@?1??NewMGGBox@@9@9[eax]
	cmp	ecx, 92					; 0000005cH
	je	SHORT $LN24@NewMGGBox
	mov	eax, DWORD PTR _j$[ebp]
	movsx	ecx, BYTE PTR ?path3@?1??NewMGGBox@@9@9[eax]
	cmp	ecx, 47					; 0000002fH
	jne	SHORT $LN25@NewMGGBox
$LN24@NewMGGBox:

; 493  : 									{
; 494  : 										j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 495  : 										break;

	jmp	SHORT $LN26@NewMGGBox
$LN25@NewMGGBox:

; 496  : 									}
; 497  : 								}

	jmp	SHORT $LN27@NewMGGBox
$LN26@NewMGGBox:

; 498  : 
; 499  : 								strcpy(tex_names[num_files_t], path3 + j);

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, OFFSET ?path3@?1??NewMGGBox@@9@9
	push	eax
	mov	ecx, DWORD PTR ?num_files_t@?1??NewMGGBox@@9@9
	shl	ecx, 5
	add	ecx, OFFSET ?tex_names@?1??NewMGGBox@@9@9
	push	ecx
	call	_strcpy
	add	esp, 8

; 500  : 
; 501  : 								num_files_t++;

	mov	eax, DWORD PTR ?num_files_t@?1??NewMGGBox@@9@9
	add	eax, 1
	mov	DWORD PTR ?num_files_t@?1??NewMGGBox@@9@9, eax
$LN29@NewMGGBox:

; 502  : 							}
; 503  : 							state = 0;

	mov	DWORD PTR ?state@?1??NewMGGBox@@9@9, 0

; 504  : 							i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 505  : 							break;

	jmp	SHORT $LN33@NewMGGBox

; 506  : 						}
; 507  : 						else

	jmp	SHORT $LN23@NewMGGBox
$LN30@NewMGGBox:

; 508  : 						{
; 509  : 							strcpy(tex[num_files_t], path3);

	push	OFFSET ?path3@?1??NewMGGBox@@9@9
	imul	eax, DWORD PTR ?num_files_t@?1??NewMGGBox@@9@9, 260
	add	eax, OFFSET ?tex@?1??NewMGGBox@@9@9
	push	eax
	call	_strcpy
	add	esp, 8

; 510  : 							//strcat(tex[num_files_t], "\\");
; 511  : 							strcat(tex[num_files_t], tok);

	mov	eax, DWORD PTR _tok$[ebp]
	push	eax
	imul	ecx, DWORD PTR ?num_files_t@?1??NewMGGBox@@9@9, 260
	add	ecx, OFFSET ?tex@?1??NewMGGBox@@9@9
	push	ecx
	call	_strcat
	add	esp, 8

; 512  : 							strcpy(tex_names[num_files_t], tok);

	mov	eax, DWORD PTR _tok$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?num_files_t@?1??NewMGGBox@@9@9
	shl	ecx, 5
	add	ecx, OFFSET ?tex_names@?1??NewMGGBox@@9@9
	push	ecx
	call	_strcpy
	add	esp, 8

; 513  : 							num_files_t++;

	mov	eax, DWORD PTR ?num_files_t@?1??NewMGGBox@@9@9
	add	eax, 1
	mov	DWORD PTR ?num_files_t@?1??NewMGGBox@@9@9, eax
$LN23@NewMGGBox:

; 514  : 						}
; 515  : 					}
; 516  : 
; 517  : 					i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 518  : 				}

	jmp	$LN34@NewMGGBox
$LN33@NewMGGBox:

; 519  : 				
; 520  : 			}
; 521  : 		}
; 522  : 
; 523  : 		if (nk_button_label(ctx, "Import normal mapping textures"))

	push	OFFSET ??_C@_0BP@IDPDHAJP@Import?5normal?5mapping?5textures?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_button_label
	add	esp, 8
	test	eax, eax
	je	$LN19@NewMGGBox

; 524  : 		{
; 525  : 			ZeroMemory(&files, sizeof(files));

	push	16640					; 00004100H
	push	0
	push	OFFSET ?files@?1??NewMGGBox@@9@9
	call	_memset
	add	esp, 12					; 0000000cH

; 526  : 			ofn.lpstrTitle = "Select normal mapping textures to import";

	mov	DWORD PTR _ofn$[ebp+48], OFFSET ??_C@_0CJ@HPCPPJKE@Select?5normal?5mapping?5textures?5t@

; 527  : 
; 528  : 			if (GetOpenFileName(&ofn))

	mov	esi, esp
	lea	eax, DWORD PTR _ofn$[ebp]
	push	eax
	call	DWORD PTR __imp__GetOpenFileNameA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN19@NewMGGBox

; 529  : 			{
; 530  : 				state = 1;

	mov	DWORD PTR ?state@?1??NewMGGBox@@9@9, 1

; 531  : 				i = 0;

	mov	DWORD PTR _i$[ebp], 0
$LN20@NewMGGBox:

; 532  : 				while (state)

	cmp	DWORD PTR ?state@?1??NewMGGBox@@9@9, 0
	je	$LN19@NewMGGBox

; 533  : 				{
; 534  : 					if (i == 0)

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN18@NewMGGBox

; 535  : 					{
; 536  : 						tok = strtok(files, " ");

	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	push	OFFSET ?files@?1??NewMGGBox@@9@9
	call	_strtok
	add	esp, 8
	mov	DWORD PTR _tok$[ebp], eax

; 537  : 						strcpy(path3, tok);

	mov	eax, DWORD PTR _tok$[ebp]
	push	eax
	push	OFFSET ?path3@?1??NewMGGBox@@9@9
	call	_strcpy
	add	esp, 8

; 538  : 					}
; 539  : 					else

	jmp	$LN9@NewMGGBox
$LN18@NewMGGBox:

; 540  : 					{
; 541  : 						tok = strtok(NULL, " ");

	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	push	0
	call	_strtok
	add	esp, 8
	mov	DWORD PTR _tok$[ebp], eax

; 542  : 
; 543  : 						if (!tok)

	cmp	DWORD PTR _tok$[ebp], 0
	jne	$LN16@NewMGGBox

; 544  : 						{
; 545  : 							if (i == 1)

	cmp	DWORD PTR _i$[ebp], 1
	jne	$LN15@NewMGGBox

; 546  : 							{
; 547  : 								strcpy(tex_n[num_files_n], path3);

	push	OFFSET ?path3@?1??NewMGGBox@@9@9
	imul	eax, DWORD PTR ?num_files_n@?1??NewMGGBox@@9@9, 260
	add	eax, OFFSET ?tex_n@?1??NewMGGBox@@9@9
	push	eax
	call	_strcpy
	add	esp, 8

; 548  : 								len2 = strlen(path3);

	push	OFFSET ?path3@?1??NewMGGBox@@9@9
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len2$[ebp], eax

; 549  : 
; 550  : 								for (j = len2; j > 0; j--)

	mov	eax, DWORD PTR _len2$[ebp]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN14@NewMGGBox
$LN13@NewMGGBox:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN14@NewMGGBox:
	cmp	DWORD PTR _j$[ebp], 0
	jle	SHORT $LN12@NewMGGBox

; 551  : 								{
; 552  : 									if (path3[j] == '\\' || path3[j] == '/')

	mov	eax, DWORD PTR _j$[ebp]
	movsx	ecx, BYTE PTR ?path3@?1??NewMGGBox@@9@9[eax]
	cmp	ecx, 92					; 0000005cH
	je	SHORT $LN10@NewMGGBox
	mov	eax, DWORD PTR _j$[ebp]
	movsx	ecx, BYTE PTR ?path3@?1??NewMGGBox@@9@9[eax]
	cmp	ecx, 47					; 0000002fH
	jne	SHORT $LN11@NewMGGBox
$LN10@NewMGGBox:

; 553  : 									{
; 554  : 										j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 555  : 										break;

	jmp	SHORT $LN12@NewMGGBox
$LN11@NewMGGBox:

; 556  : 									}
; 557  : 								}

	jmp	SHORT $LN13@NewMGGBox
$LN12@NewMGGBox:

; 558  : 
; 559  : 								strcpy(tex_n_names[num_files_n], path3 + j);

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, OFFSET ?path3@?1??NewMGGBox@@9@9
	push	eax
	mov	ecx, DWORD PTR ?num_files_n@?1??NewMGGBox@@9@9
	shl	ecx, 5
	add	ecx, OFFSET ?tex_n_names@?1??NewMGGBox@@9@9
	push	ecx
	call	_strcpy
	add	esp, 8

; 560  : 
; 561  : 								num_files_n++;

	mov	eax, DWORD PTR ?num_files_n@?1??NewMGGBox@@9@9
	add	eax, 1
	mov	DWORD PTR ?num_files_n@?1??NewMGGBox@@9@9, eax
$LN15@NewMGGBox:

; 562  : 							}
; 563  : 							state = 0;

	mov	DWORD PTR ?state@?1??NewMGGBox@@9@9, 0

; 564  : 							i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 565  : 							break;

	jmp	SHORT $LN19@NewMGGBox

; 566  : 						}
; 567  : 						else

	jmp	SHORT $LN9@NewMGGBox
$LN16@NewMGGBox:

; 568  : 						{
; 569  : 							strcpy(tex_n[num_files_n], path3);

	push	OFFSET ?path3@?1??NewMGGBox@@9@9
	imul	eax, DWORD PTR ?num_files_n@?1??NewMGGBox@@9@9, 260
	add	eax, OFFSET ?tex_n@?1??NewMGGBox@@9@9
	push	eax
	call	_strcpy
	add	esp, 8

; 570  : 							strcat(tex_n[num_files_n], tok);

	mov	eax, DWORD PTR _tok$[ebp]
	push	eax
	imul	ecx, DWORD PTR ?num_files_n@?1??NewMGGBox@@9@9, 260
	add	ecx, OFFSET ?tex_n@?1??NewMGGBox@@9@9
	push	ecx
	call	_strcat
	add	esp, 8

; 571  : 							strcpy(tex_n_names[num_files_n], tok);

	mov	eax, DWORD PTR _tok$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?num_files_n@?1??NewMGGBox@@9@9
	shl	ecx, 5
	add	ecx, OFFSET ?tex_n_names@?1??NewMGGBox@@9@9
	push	ecx
	call	_strcpy
	add	esp, 8

; 572  : 							num_files_n++;

	mov	eax, DWORD PTR ?num_files_n@?1??NewMGGBox@@9@9
	add	eax, 1
	mov	DWORD PTR ?num_files_n@?1??NewMGGBox@@9@9, eax
$LN9@NewMGGBox:

; 573  : 						}
; 574  : 					}
; 575  : 
; 576  : 					i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 577  : 				}

	jmp	$LN20@NewMGGBox
$LN19@NewMGGBox:

; 578  : 
; 579  : 			}
; 580  : 		}
; 581  : 
; 582  : 		nk_layout_row_dynamic(ctx, 256, 2);

	push	2
	push	ecx
	movss	xmm0, DWORD PTR __real@43800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 583  : 
; 584  : 		if (nk_group_begin(ctx, "Selected textures", NK_WINDOW_BORDER | NK_WINDOW_TITLE))

	push	65					; 00000041H
	push	OFFSET ??_C@_0BC@NLPHFHFE@Selected?5textures?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_group_begin
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN8@NewMGGBox

; 585  : 		{
; 586  : 			for (i = 0; i < num_files_t; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@NewMGGBox
$LN6@NewMGGBox:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@NewMGGBox:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?num_files_t@?1??NewMGGBox@@9@9
	jge	$LN5@NewMGGBox

; 587  : 			{
; 588  : 				nk_layout_row_begin(ctx, NK_DYNAMIC, 15, 4);

	push	4
	push	ecx
	movss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_begin
	add	esp, 16					; 00000010H

; 589  : 				nk_layout_row_push(ctx, 0.1f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_push
	add	esp, 8

; 590  : 				sprintf(str, "%d", i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET ?str@?1??NewMGGBox@@9@9
	call	_sprintf
	add	esp, 12					; 0000000cH

; 591  : 				nk_label(ctx, str, NK_TEXT_ALIGN_LEFT);

	push	1
	push	OFFSET ?str@?1??NewMGGBox@@9@9
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_label
	add	esp, 12					; 0000000cH

; 592  : 
; 593  : 				nk_layout_row_push(ctx, 0.70f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_push
	add	esp, 8

; 594  : 				nk_label(ctx, tex_names[i], NK_TEXT_ALIGN_LEFT);

	push	1
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, OFFSET ?tex_names@?1??NewMGGBox@@9@9
	push	eax
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_label
	add	esp, 12					; 0000000cH

; 595  : 
; 596  : 				nk_layout_row_push(ctx, 0.1f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_push
	add	esp, 8

; 597  : 				nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_UP);

	push	7
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_button_symbol
	add	esp, 8

; 598  : 
; 599  : 				nk_layout_row_push(ctx, 0.1f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_push
	add	esp, 8

; 600  : 				nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_DOWN);

	push	8
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_button_symbol
	add	esp, 8

; 601  : 				nk_layout_row_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_end
	add	esp, 4

; 602  : 			}

	jmp	$LN6@NewMGGBox
$LN5@NewMGGBox:

; 603  : 
; 604  : 			nk_group_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_group_end
	add	esp, 4
$LN8@NewMGGBox:

; 605  : 		}
; 606  : 
; 607  : 		if (nk_group_begin(ctx, "Selected normal maps", NK_WINDOW_BORDER | NK_WINDOW_TITLE))

	push	65					; 00000041H
	push	OFFSET ??_C@_0BF@DCHLKLBM@Selected?5normal?5maps?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_group_begin
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN4@NewMGGBox

; 608  : 		{
; 609  : 			for (i = 0; i < num_files_n; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@NewMGGBox
$LN2@NewMGGBox:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@NewMGGBox:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?num_files_n@?1??NewMGGBox@@9@9
	jge	$LN1@NewMGGBox

; 610  : 			{
; 611  : 				nk_layout_row_begin(ctx, NK_DYNAMIC, 15, 4);

	push	4
	push	ecx
	movss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_begin
	add	esp, 16					; 00000010H

; 612  : 				nk_layout_row_push(ctx, 0.1f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_push
	add	esp, 8

; 613  : 				sprintf(str, "%d", i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	OFFSET ?str@?1??NewMGGBox@@9@9
	call	_sprintf
	add	esp, 12					; 0000000cH

; 614  : 				nk_label(ctx, str, NK_TEXT_ALIGN_LEFT);

	push	1
	push	OFFSET ?str@?1??NewMGGBox@@9@9
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_label
	add	esp, 12					; 0000000cH

; 615  : 
; 616  : 				nk_layout_row_push(ctx, 0.70f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_push
	add	esp, 8

; 617  : 				nk_label(ctx, tex_n_names[i], NK_TEXT_ALIGN_LEFT);

	push	1
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, OFFSET ?tex_n_names@?1??NewMGGBox@@9@9
	push	eax
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_label
	add	esp, 12					; 0000000cH

; 618  : 
; 619  : 				nk_layout_row_push(ctx, 0.1f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_push
	add	esp, 8

; 620  : 				nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_UP);

	push	7
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_button_symbol
	add	esp, 8

; 621  : 
; 622  : 				nk_layout_row_push(ctx, 0.1f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_push
	add	esp, 8

; 623  : 				nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_DOWN);

	push	8
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_button_symbol
	add	esp, 8

; 624  : 				nk_layout_row_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_end
	add	esp, 4

; 625  : 			}

	jmp	$LN2@NewMGGBox
$LN1@NewMGGBox:

; 626  : 
; 627  : 			nk_group_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_group_end
	add	esp, 4
$LN4@NewMGGBox:

; 628  : 		}
; 629  : 
; 630  : 		nk_layout_row_dynamic(ctx, 15, 1);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 631  : 		nk_label(ctx, "Texture compression", NK_TEXT_ALIGN_LEFT);

	push	1
	push	OFFSET ??_C@_0BE@PFCBBNJE@Texture?5compression?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_label
	add	esp, 12					; 0000000cH

; 632  : 
; 633  : 		nk_layout_row_dynamic(ctx, 15, 2);

	push	2
	push	ecx
	movss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 634  : 
; 635  : 		mtex.RLE = nk_option_label(ctx, "None", mtex.RLE == 0) ? 0 : mtex.RLE;

	movzx	eax, BYTE PTR _mtex+8
	test	eax, eax
	jne	SHORT $LN43@NewMGGBox
	mov	DWORD PTR tv368[ebp], 1
	jmp	SHORT $LN44@NewMGGBox
$LN43@NewMGGBox:
	mov	DWORD PTR tv368[ebp], 0
$LN44@NewMGGBox:
	mov	ecx, DWORD PTR tv368[ebp]
	push	ecx
	push	OFFSET ??_C@_04OHJIHAFH@None?$AA@
	mov	edx, DWORD PTR _ctx
	push	edx
	call	_nk_option_label
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN45@NewMGGBox
	mov	DWORD PTR tv374[ebp], 0
	jmp	SHORT $LN46@NewMGGBox
$LN45@NewMGGBox:
	movzx	eax, BYTE PTR _mtex+8
	mov	DWORD PTR tv374[ebp], eax
$LN46@NewMGGBox:
	mov	cl, BYTE PTR tv374[ebp]
	mov	BYTE PTR _mtex+8, cl

; 636  : 		mtex.RLE = nk_option_label(ctx, "RLE (faster)", mtex.RLE == 1) ? 1 : mtex.RLE;

	movzx	eax, BYTE PTR _mtex+8
	cmp	eax, 1
	jne	SHORT $LN47@NewMGGBox
	mov	DWORD PTR tv379[ebp], 1
	jmp	SHORT $LN48@NewMGGBox
$LN47@NewMGGBox:
	mov	DWORD PTR tv379[ebp], 0
$LN48@NewMGGBox:
	mov	ecx, DWORD PTR tv379[ebp]
	push	ecx
	push	OFFSET ??_C@_0N@NIDFKEBJ@RLE?5?$CIfaster?$CJ?$AA@
	mov	edx, DWORD PTR _ctx
	push	edx
	call	_nk_option_label
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN49@NewMGGBox
	mov	DWORD PTR tv417[ebp], 1
	jmp	SHORT $LN50@NewMGGBox
$LN49@NewMGGBox:
	movzx	eax, BYTE PTR _mtex+8
	mov	DWORD PTR tv417[ebp], eax
$LN50@NewMGGBox:
	mov	cl, BYTE PTR tv417[ebp]
	mov	BYTE PTR _mtex+8, cl

; 637  : 
; 638  : 		nk_layout_row_dynamic(ctx, 15, 1);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 639  : 		nk_label(ctx, "Texture mipmap (filter)", NK_TEXT_ALIGN_LEFT);

	push	1
	push	OFFSET ??_C@_0BI@KFCNKMHJ@Texture?5mipmap?5?$CIfilter?$CJ?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_label
	add	esp, 12					; 0000000cH

; 640  : 
; 641  : 		nk_layout_row_dynamic(ctx, 15, 2);

	push	2
	push	ecx
	movss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 642  : 
; 643  : 		tmgg.mipmap = nk_option_label(ctx, "Nearest", tmgg.mipmap == 1) ? 1 : tmgg.mipmap;

	movsx	eax, BYTE PTR _tmgg+72
	cmp	eax, 1
	jne	SHORT $LN51@NewMGGBox
	mov	DWORD PTR tv431[ebp], 1
	jmp	SHORT $LN52@NewMGGBox
$LN51@NewMGGBox:
	mov	DWORD PTR tv431[ebp], 0
$LN52@NewMGGBox:
	mov	ecx, DWORD PTR tv431[ebp]
	push	ecx
	push	OFFSET ??_C@_07COOCJBJB@Nearest?$AA@
	mov	edx, DWORD PTR _ctx
	push	edx
	call	_nk_option_label
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN53@NewMGGBox
	mov	DWORD PTR tv437[ebp], 1
	jmp	SHORT $LN54@NewMGGBox
$LN53@NewMGGBox:
	movsx	eax, BYTE PTR _tmgg+72
	mov	DWORD PTR tv437[ebp], eax
$LN54@NewMGGBox:
	mov	cl, BYTE PTR tv437[ebp]
	mov	BYTE PTR _tmgg+72, cl

; 644  : 		tmgg.mipmap = nk_option_label(ctx, "Linear", tmgg.mipmap == 0) ? 0 : tmgg.mipmap;

	movsx	eax, BYTE PTR _tmgg+72
	test	eax, eax
	jne	SHORT $LN55@NewMGGBox
	mov	DWORD PTR tv442[ebp], 1
	jmp	SHORT $LN56@NewMGGBox
$LN55@NewMGGBox:
	mov	DWORD PTR tv442[ebp], 0
$LN56@NewMGGBox:
	mov	ecx, DWORD PTR tv442[ebp]
	push	ecx
	push	OFFSET ??_C@_06LACFBFGA@Linear?$AA@
	mov	edx, DWORD PTR _ctx
	push	edx
	call	_nk_option_label
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN57@NewMGGBox
	mov	DWORD PTR tv448[ebp], 0
	jmp	SHORT $LN58@NewMGGBox
$LN57@NewMGGBox:
	movsx	eax, BYTE PTR _tmgg+72
	mov	DWORD PTR tv448[ebp], eax
$LN58@NewMGGBox:
	mov	cl, BYTE PTR tv448[ebp]
	mov	BYTE PTR _tmgg+72, cl

; 645  : 
; 646  : 		nk_layout_row_dynamic(ctx, 25, 6);

	push	6
	push	ecx
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 647  : 		nk_spacing(ctx, 4);

	push	4
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_spacing
	add	esp, 8

; 648  : 
; 649  : 		nk_button_label(ctx, "Create");

	push	OFFSET ??_C@_06MIKANEJK@Create?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_button_label
	add	esp, 8

; 650  : 		nk_button_label(ctx, "Cancel");

	push	OFFSET ??_C@_06FMBNCPDL@Cancel?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_button_label
	add	esp, 8
$LN39@NewMGGBox:

; 651  : 
; 652  : 
; 653  : 	}
; 654  : 
; 655  : 	nk_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_end
	add	esp, 4

; 656  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN62@NewMGGBox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 420				; 000001a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN62@NewMGGBox:
	DD	2
	DD	$LN61@NewMGGBox
$LN61@NewMGGBox:
	DD	-152					; ffffff68H
	DD	88					; 00000058H
	DD	$LN59@NewMGGBox
	DD	-192					; ffffff40H
	DD	32					; 00000020H
	DD	$LN60@NewMGGBox
$LN60@NewMGGBox:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	0
$LN59@NewMGGBox:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	110					; 0000006eH
	DB	0
_NewMGGBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mtex\main.c
;	COMDAT _FileBrowser
_TEXT	SEGMENT
$T1 = -1604						; size = 16
$T2 = -1580						; size = 16
$T3 = -1556						; size = 16
$T4 = -1532						; size = 16
$T5 = -1508						; size = 4
$T6 = -1496						; size = 4
$T7 = -1484						; size = 16
$T8 = -1460						; size = 16
$T9 = -1436						; size = 16
$T10 = -1412						; size = 16
$T11 = -1388						; size = 16
$T12 = -1364						; size = 16
$T13 = -1340						; size = 16
$T14 = -1316						; size = 16
_d$ = -1088						; size = 4
_f$ = -1076						; size = 4
_lenght$ = -1064					; size = 4
_j$ = -1052						; size = 4
_i$ = -1040						; size = 4
_filename$ = 8						; size = 4
_FileBrowser PROC					; COMDAT

; 151  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1608				; 00000648H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1608]
	mov	ecx, 402				; 00000192H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 152  : 	char path[1024];
; 153  : 
; 154  : 	register int i, j;
; 155  : 
; 156  : 	static int select = -1, time = 0, len, doubleclick = -1, doubleclick2 = -1, backpath_available = 0, fowardpath_available = 0, lenpath;
; 157  : 
; 158  : 	static char backpath[2048], fowardpath[2048], temp[2048];
; 159  : 
; 160  : 	size_t lenght;
; 161  : 
; 162  : 	FILE *f;
; 163  : 	DIR *d;
; 164  : 
; 165  : 	if (nk_begin(ctx, "File Browser", nk_rect(st.screenx/2 - 400, st.screeny/2 - 225, 800, 450), NK_WINDOW_BORDER | NK_WINDOW_CLOSABLE | NK_WINDOW_MOVABLE))

	push	11					; 0000000bH
	push	ecx
	movss	xmm0, DWORD PTR __real@43e10000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@44480000
	movss	DWORD PTR [esp], xmm0
	movzx	eax, WORD PTR _st+230
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	eax, 225				; 000000e1H
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movzx	eax, WORD PTR _st+228
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	eax, 400				; 00000190H
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	_nk_rect
	add	esp, 4
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	push	OFFSET ??_C@_0N@DPGJHAPF@File?5Browser?$AA@
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_begin
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	$LN1@FileBrowse

; 166  : 	{
; 167  : 		nk_layout_space_begin(ctx, NK_DYNAMIC, 390, INT_MAX);

	push	2147483647				; 7fffffffH
	push	ecx
	movss	xmm0, DWORD PTR __real@43c30000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_space_begin
	add	esp, 16					; 00000010H

; 168  : 
; 169  : 		nk_layout_space_push(ctx, nk_rect(0.01, 0.01, 0.08, 0.08));

	push	ecx
	movss	xmm0, DWORD PTR __real@3da3d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3da3d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	_nk_rect
	add	esp, 4
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_layout_space_push
	add	esp, 20					; 00000014H

; 170  : 		if (nk_button_label(ctx, "<"))

	push	OFFSET ??_C@_01MNNFJEPP@?$DM?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_button_label
	add	esp, 8
	test	eax, eax
	je	$LN32@FileBrowse

; 171  : 		{
; 172  : 			if (backpath_available)

	cmp	DWORD PTR ?backpath_available@?1??FileBrowser@@9@9, 0
	je	$LN32@FileBrowse

; 173  : 			{
; 174  : 				strcpy(temp, UI_Sys.current_path);

	push	OFFSET _UI_Sys+43
	push	OFFSET ?temp@?1??FileBrowser@@9@9
	call	_strcpy
	add	esp, 8

; 175  : 
; 176  : 				if ((d = opendir(backpath)) != NULL)

	push	OFFSET ?backpath@?1??FileBrowser@@9@9
	call	_opendir
	add	esp, 4
	mov	DWORD PTR _d$[ebp], eax
	cmp	DWORD PTR _d$[ebp], 0
	je	$LN32@FileBrowse

; 177  : 				{
; 178  : 					strcpy(fowardpath, UI_Sys.current_path);

	push	OFFSET _UI_Sys+43
	push	OFFSET ?fowardpath@?1??FileBrowser@@9@9
	call	_strcpy
	add	esp, 8

; 179  : 					strcpy(UI_Sys.current_path, backpath);

	push	OFFSET ?backpath@?1??FileBrowser@@9@9
	push	OFFSET _UI_Sys+43
	call	_strcpy
	add	esp, 8

; 180  : 					backpath_available = 0;

	mov	DWORD PTR ?backpath_available@?1??FileBrowser@@9@9, 0

; 181  : 					fowardpath_available = 1;

	mov	DWORD PTR ?fowardpath_available@?1??FileBrowser@@9@9, 1

; 182  : 					strcpy(backpath, temp);

	push	OFFSET ?temp@?1??FileBrowser@@9@9
	push	OFFSET ?backpath@?1??FileBrowser@@9@9
	call	_strcpy
	add	esp, 8

; 183  : 					closedir(d);

	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	call	_closedir
	add	esp, 4

; 184  : 					SetDirContent(UI_Sys.extension);

	push	OFFSET _UI_Sys+265334
	call	_SetDirContent
	add	esp, 4

; 185  : 					doubleclick = -1;

	mov	DWORD PTR ?doubleclick@?1??FileBrowser@@9@9, -1

; 186  : 					doubleclick2 = -1;

	mov	DWORD PTR ?doubleclick2@?1??FileBrowser@@9@9, -1

; 187  : 					select = -1;

	mov	DWORD PTR ?select@?1??FileBrowser@@9@9, -1

; 188  : 					time = 0;

	mov	DWORD PTR ?time@?1??FileBrowser@@9@9, 0
$LN32@FileBrowse:

; 189  : 				}
; 190  : 			}
; 191  : 		}
; 192  : 
; 193  : 		nk_layout_space_push(ctx, nk_rect(0.09, 0.01, 0.08, 0.08));

	push	ecx
	movss	xmm0, DWORD PTR __real@3da3d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3da3d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3db851ec
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	_nk_rect
	add	esp, 4
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_layout_space_push
	add	esp, 20					; 00000014H

; 194  : 		if(nk_button_label(ctx, ">"))

	push	OFFSET ??_C@_01PPODPGHN@?$DO?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_button_label
	add	esp, 8
	test	eax, eax
	je	$LN29@FileBrowse

; 195  : 		{
; 196  : 			if (fowardpath_available)

	cmp	DWORD PTR ?fowardpath_available@?1??FileBrowser@@9@9, 0
	je	$LN29@FileBrowse

; 197  : 			{
; 198  : 				strcpy(temp, UI_Sys.current_path);

	push	OFFSET _UI_Sys+43
	push	OFFSET ?temp@?1??FileBrowser@@9@9
	call	_strcpy
	add	esp, 8

; 199  : 
; 200  : 				if ((d = opendir(fowardpath)) != NULL)

	push	OFFSET ?fowardpath@?1??FileBrowser@@9@9
	call	_opendir
	add	esp, 4
	mov	DWORD PTR _d$[ebp], eax
	cmp	DWORD PTR _d$[ebp], 0
	je	$LN29@FileBrowse

; 201  : 				{
; 202  : 					strcpy(backpath, UI_Sys.current_path);

	push	OFFSET _UI_Sys+43
	push	OFFSET ?backpath@?1??FileBrowser@@9@9
	call	_strcpy
	add	esp, 8

; 203  : 					strcpy(UI_Sys.current_path, fowardpath);

	push	OFFSET ?fowardpath@?1??FileBrowser@@9@9
	push	OFFSET _UI_Sys+43
	call	_strcpy
	add	esp, 8

; 204  : 					backpath_available = 1;

	mov	DWORD PTR ?backpath_available@?1??FileBrowser@@9@9, 1

; 205  : 					fowardpath_available = 0;

	mov	DWORD PTR ?fowardpath_available@?1??FileBrowser@@9@9, 0

; 206  : 					strcpy(fowardpath, temp);

	push	OFFSET ?temp@?1??FileBrowser@@9@9
	push	OFFSET ?fowardpath@?1??FileBrowser@@9@9
	call	_strcpy
	add	esp, 8

; 207  : 					closedir(d);

	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	call	_closedir
	add	esp, 4

; 208  : 					SetDirContent(UI_Sys.extension);

	push	OFFSET _UI_Sys+265334
	call	_SetDirContent
	add	esp, 4

; 209  : 					doubleclick = -1;

	mov	DWORD PTR ?doubleclick@?1??FileBrowser@@9@9, -1

; 210  : 					doubleclick2 = -1;

	mov	DWORD PTR ?doubleclick2@?1??FileBrowser@@9@9, -1

; 211  : 					select = -1;

	mov	DWORD PTR ?select@?1??FileBrowser@@9@9, -1

; 212  : 					time = 0;

	mov	DWORD PTR ?time@?1??FileBrowser@@9@9, 0
$LN29@FileBrowse:

; 213  : 				}
; 214  : 			}
; 215  : 		}
; 216  : 
; 217  : 		nk_layout_space_push(ctx, nk_rect(0.18, 0.01, 0.08, 0.08));

	push	ecx
	movss	xmm0, DWORD PTR __real@3da3d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3da3d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e3851ec
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	_nk_rect
	add	esp, 4
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_layout_space_push
	add	esp, 20					; 00000014H

; 218  : 		if (nk_button_label(ctx, "^"))

	push	OFFSET ??_C@_01JKBOJNNK@?$FO?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_button_label
	add	esp, 8
	test	eax, eax
	je	$LN21@FileBrowse

; 219  : 		{
; 220  : 			strcpy(temp, UI_Sys.current_path);

	push	OFFSET _UI_Sys+43
	push	OFFSET ?temp@?1??FileBrowser@@9@9
	call	_strcpy
	add	esp, 8

; 221  : 
; 222  : 			lenght = strlen(temp);

	push	OFFSET ?temp@?1??FileBrowser@@9@9
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _lenght$[ebp], eax

; 223  : 
; 224  : 			for (i = lenght; i > 0; i--)

	mov	eax, DWORD PTR _lenght$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN27@FileBrowse
$LN26@FileBrowse:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN27@FileBrowse:
	cmp	DWORD PTR _i$[ebp], 0
	jle	$LN25@FileBrowse

; 225  : 			{
; 226  : 				if (temp[i] != 92 && temp[i] != 47)

	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR ?temp@?1??FileBrowser@@9@9[eax]
	cmp	ecx, 92					; 0000005cH
	je	SHORT $LN24@FileBrowse
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR ?temp@?1??FileBrowser@@9@9[eax]
	cmp	ecx, 47					; 0000002fH
	je	SHORT $LN24@FileBrowse

; 227  : 					temp[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR $T5[ebp], eax
	cmp	DWORD PTR $T5[ebp], 2048		; 00000800H
	jae	SHORT $LN38@FileBrowse
	jmp	SHORT $LN39@FileBrowse
$LN38@FileBrowse:
	call	___report_rangecheckfailure
$LN39@FileBrowse:
	mov	ecx, DWORD PTR $T5[ebp]
	mov	BYTE PTR ?temp@?1??FileBrowser@@9@9[ecx], 0
$LN24@FileBrowse:

; 228  : 				
; 229  : 				if (temp[i] == 92 || temp[i] == 47)

	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR ?temp@?1??FileBrowser@@9@9[eax]
	cmp	ecx, 92					; 0000005cH
	je	SHORT $LN22@FileBrowse
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR ?temp@?1??FileBrowser@@9@9[eax]
	cmp	ecx, 47					; 0000002fH
	jne	SHORT $LN23@FileBrowse
$LN22@FileBrowse:

; 230  : 				{
; 231  : 					temp[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR $T6[ebp], eax
	cmp	DWORD PTR $T6[ebp], 2048		; 00000800H
	jae	SHORT $LN40@FileBrowse
	jmp	SHORT $LN41@FileBrowse
$LN40@FileBrowse:
	call	___report_rangecheckfailure
$LN41@FileBrowse:
	mov	ecx, DWORD PTR $T6[ebp]
	mov	BYTE PTR ?temp@?1??FileBrowser@@9@9[ecx], 0

; 232  : 					break;

	jmp	SHORT $LN25@FileBrowse
$LN23@FileBrowse:

; 233  : 				}
; 234  : 			}

	jmp	$LN26@FileBrowse
$LN25@FileBrowse:

; 235  : 
; 236  : 			if ((d = opendir(temp)) != NULL)

	push	OFFSET ?temp@?1??FileBrowser@@9@9
	call	_opendir
	add	esp, 4
	mov	DWORD PTR _d$[ebp], eax
	cmp	DWORD PTR _d$[ebp], 0
	je	SHORT $LN21@FileBrowse

; 237  : 			{
; 238  : 				strcpy(backpath, UI_Sys.current_path);

	push	OFFSET _UI_Sys+43
	push	OFFSET ?backpath@?1??FileBrowser@@9@9
	call	_strcpy
	add	esp, 8

; 239  : 				strcpy(UI_Sys.current_path, temp);

	push	OFFSET ?temp@?1??FileBrowser@@9@9
	push	OFFSET _UI_Sys+43
	call	_strcpy
	add	esp, 8

; 240  : 				backpath_available = 1;

	mov	DWORD PTR ?backpath_available@?1??FileBrowser@@9@9, 1

; 241  : 				fowardpath_available = 0;

	mov	DWORD PTR ?fowardpath_available@?1??FileBrowser@@9@9, 0

; 242  : 				closedir(d);

	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	call	_closedir
	add	esp, 4

; 243  : 				SetDirContent(UI_Sys.extension);

	push	OFFSET _UI_Sys+265334
	call	_SetDirContent
	add	esp, 4

; 244  : 				doubleclick = -1;

	mov	DWORD PTR ?doubleclick@?1??FileBrowser@@9@9, -1

; 245  : 				doubleclick2 = -1;

	mov	DWORD PTR ?doubleclick2@?1??FileBrowser@@9@9, -1

; 246  : 				select = -1;

	mov	DWORD PTR ?select@?1??FileBrowser@@9@9, -1

; 247  : 				time = 0;

	mov	DWORD PTR ?time@?1??FileBrowser@@9@9, 0
$LN21@FileBrowse:

; 248  : 			}
; 249  : 		}
; 250  : 
; 251  : 		nk_layout_space_push(ctx, nk_rect(0.27, 0.01, 0.20, 0.08));

	push	ecx
	movss	xmm0, DWORD PTR __real@3da3d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e8a3d71
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	call	_nk_rect
	add	esp, 4
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_layout_space_push
	add	esp, 20					; 00000014H

; 252  : 		nk_button_image_label(ctx, nk_image_id(mgg_sys[UI_Sys.mgg_id].frames[UI_Sys.folder_icon].data), "New Folder", NK_TEXT_CENTERED);

	push	18					; 00000012H
	push	OFFSET ??_C@_0L@CPNGGKOP@New?5Folder?$AA@
	movsx	eax, BYTE PTR _UI_Sys
	imul	ecx, eax, 60
	movsx	edx, BYTE PTR _UI_Sys+21
	imul	eax, edx, 40
	mov	ecx, DWORD PTR _mgg_sys[ecx+40]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T8[ebp]
	push	eax
	call	_nk_image_id
	add	esp, -8					; fffffff8H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_button_image_label
	add	esp, 28					; 0000001cH

; 253  : 
; 254  : 		nk_layout_space_push(ctx, nk_rect(0.01, 0.10, 0.99, 0.08));

	push	ecx
	movss	xmm0, DWORD PTR __real@3da3d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f7d70a4
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T9[ebp]
	push	eax
	call	_nk_rect
	add	esp, 4
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_layout_space_push
	add	esp, 20					; 00000014H

; 255  : 
; 256  : 		lenpath = strlen(UI_Sys.current_path);

	push	OFFSET _UI_Sys+43
	call	_strlen
	add	esp, 4
	mov	DWORD PTR ?lenpath@?1??FileBrowser@@9@9, eax

; 257  : 
; 258  : 		nk_edit_string(ctx, NK_EDIT_FIELD, UI_Sys.current_path, &lenpath, 2048, nk_filter_default);

	push	OFFSET _nk_filter_default
	push	2048					; 00000800H
	push	OFFSET ?lenpath@?1??FileBrowser@@9@9
	push	OFFSET _UI_Sys+43
	push	608					; 00000260H
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_edit_string
	add	esp, 24					; 00000018H

; 259  : 
; 260  : 		nk_layout_space_push(ctx, nk_rect(0.01, 0.20, 0.99, 0.70));

	push	ecx
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f7d70a4
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T10[ebp]
	push	eax
	call	_nk_rect
	add	esp, 4
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_layout_space_push
	add	esp, 20					; 00000014H

; 261  : 
; 262  : 		if (nk_group_begin(ctx, "content", NK_WINDOW_BORDER))

	push	1
	push	OFFSET ??_C@_07ICAJMOAO@content?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_group_begin
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN7@FileBrowse

; 263  : 		{
; 264  : 			nk_layout_row_dynamic(ctx, 25, 1);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 265  : 
; 266  : 			if (UI_Sys.num_files > 2)

	movsx	eax, WORD PTR _UI_Sys+265332
	cmp	eax, 2
	jle	$LN19@FileBrowse

; 267  : 			{
; 268  : 				for (i = 2, j = 0; i < UI_Sys.num_files; i++)

	mov	DWORD PTR _i$[ebp], 2
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN18@FileBrowse
$LN17@FileBrowse:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN18@FileBrowse:
	movsx	eax, WORD PTR _UI_Sys+265332
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN16@FileBrowse

; 269  : 				{
; 270  : 					if (select == i)

	mov	eax, DWORD PTR ?select@?1??FileBrowser@@9@9
	cmp	eax, DWORD PTR _i$[ebp]
	jne	$LN15@FileBrowse

; 271  : 					{
; 272  : 						if (UI_Sys.filesp[i] == UI_Sys.foldersp[i])

	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, WORD PTR _UI_Sys[eax*2+264308]
	mov	edx, DWORD PTR _i$[ebp]
	movsx	eax, WORD PTR _UI_Sys[edx*2+264820]
	cmp	ecx, eax
	jne	SHORT $LN14@FileBrowse

; 273  : 							nk_select_image_label(ctx, nk_image_id(mgg_sys[UI_Sys.mgg_id].frames[UI_Sys.folder_icon].data), UI_Sys.files[UI_Sys.foldersp[i]], NK_TEXT_RIGHT, 1);

	push	1
	push	20					; 00000014H
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, WORD PTR _UI_Sys[eax*2+264820]
	shl	ecx, 9
	add	ecx, OFFSET _UI_Sys+2164
	push	ecx
	movsx	edx, BYTE PTR _UI_Sys
	imul	eax, edx, 60
	movsx	ecx, BYTE PTR _UI_Sys+21
	imul	edx, ecx, 40
	mov	eax, DWORD PTR _mgg_sys[eax+40]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	lea	edx, DWORD PTR $T11[ebp]
	push	edx
	call	_nk_image_id
	add	esp, -8					; fffffff8H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_select_image_label
	add	esp, 32					; 00000020H

; 274  : 						/*
; 275  : 						{
; 276  : 						if (doubleclick2 == i && (GetTimerM() - time) > 50)
; 277  : 						{
; 278  : 						strcpy(temp, UI_Sys.current_path);
; 279  : 						strcat(temp, "\\");
; 280  : 						strcat(temp, UI_Sys.files[UI_Sys.foldersp[i]]);
; 281  : 
; 282  : 						if ((d = opendir(temp)) != NULL)
; 283  : 						{
; 284  : 						strcpy(backpath, UI_Sys.current_path);
; 285  : 						strcpy(UI_Sys.current_path, temp);
; 286  : 						backpath_available = 1;
; 287  : 						closedir(d);
; 288  : 						SetDirContent(UI_Sys.extension);
; 289  : 						doubleclick = -1;
; 290  : 						doubleclick2 = -1;
; 291  : 						select = -1;
; 292  : 						time = 0;
; 293  : 						break;
; 294  : 						}
; 295  : 						}
; 296  : 						else
; 297  : 						{
; 298  : 						doubleclick2 = i;
; 299  : 						time = GetTimerM();
; 300  : 						}
; 301  : 						}
; 302  : 						*/
; 303  : 						else

	jmp	SHORT $LN13@FileBrowse
$LN14@FileBrowse:

; 304  : 							nk_select_label(ctx, UI_Sys.files[UI_Sys.filesp[i]], NK_TEXT_RIGHT, 1);

	push	1
	push	20					; 00000014H
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, WORD PTR _UI_Sys[eax*2+264308]
	shl	ecx, 9
	add	ecx, OFFSET _UI_Sys+2164
	push	ecx
	mov	edx, DWORD PTR _ctx
	push	edx
	call	_nk_select_label
	add	esp, 16					; 00000010H
$LN13@FileBrowse:

; 305  : 						/*
; 306  : 						{
; 307  : 							if (doubleclick2 == i && (GetTimerM() - time) > 50)
; 308  : 							{
; 309  : 								strcpy(temp, UI_Sys.current_path);
; 310  : 								strcat(temp, "\\");
; 311  : 								strcat(temp, UI_Sys.files[UI_Sys.filesp[i]]);
; 312  : 
; 313  : 								if ((f = fopen(temp, "rb")) == NULL)
; 314  : 								{
; 315  : 									fclose(f);
; 316  : 									return temp;
; 317  : 								}
; 318  : 							}
; 319  : 							else
; 320  : 								doubleclick2 = i;
; 321  : 						}
; 322  : 						*/
; 323  : 					}
; 324  : 					else

	jmp	$LN8@FileBrowse
$LN15@FileBrowse:

; 325  : 					{
; 326  : 						if (UI_Sys.filesp[i] == UI_Sys.foldersp[i])

	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, WORD PTR _UI_Sys[eax*2+264308]
	mov	edx, DWORD PTR _i$[ebp]
	movsx	eax, WORD PTR _UI_Sys[edx*2+264820]
	cmp	ecx, eax
	jne	$LN11@FileBrowse

; 327  : 						{
; 328  : 							if (nk_select_image_label(ctx, nk_image_id(mgg_sys[UI_Sys.mgg_id].frames[UI_Sys.folder_icon].data), UI_Sys.files[UI_Sys.foldersp[i]], NK_TEXT_RIGHT, 0))

	push	0
	push	20					; 00000014H
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, WORD PTR _UI_Sys[eax*2+264820]
	shl	ecx, 9
	add	ecx, OFFSET _UI_Sys+2164
	push	ecx
	movsx	edx, BYTE PTR _UI_Sys
	imul	eax, edx, 60
	movsx	ecx, BYTE PTR _UI_Sys+21
	imul	edx, ecx, 40
	mov	eax, DWORD PTR _mgg_sys[eax+40]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	lea	edx, DWORD PTR $T12[ebp]
	push	edx
	call	_nk_image_id
	add	esp, -8					; fffffff8H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_select_image_label
	add	esp, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN10@FileBrowse

; 329  : 							{
; 330  : 								select = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR ?select@?1??FileBrowser@@9@9, eax

; 331  : 								doubleclick = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR ?doubleclick@?1??FileBrowser@@9@9, eax

; 332  : 								time = GetTimerM();

	call	@GetTimerM@0
	mov	DWORD PTR ?time@?1??FileBrowser@@9@9, eax
$LN10@FileBrowse:

; 333  : 							}
; 334  : 						}
; 335  : 						else

	jmp	SHORT $LN8@FileBrowse
$LN11@FileBrowse:

; 336  : 						{
; 337  : 							if (nk_select_label(ctx, UI_Sys.files[UI_Sys.filesp[i]], NK_TEXT_RIGHT, 0))

	push	0
	push	20					; 00000014H
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, WORD PTR _UI_Sys[eax*2+264308]
	shl	ecx, 9
	add	ecx, OFFSET _UI_Sys+2164
	push	ecx
	mov	edx, DWORD PTR _ctx
	push	edx
	call	_nk_select_label
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN8@FileBrowse

; 338  : 								select = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR ?select@?1??FileBrowser@@9@9, eax
$LN8@FileBrowse:

; 339  : 						}
; 340  : 					}
; 341  : 				}

	jmp	$LN17@FileBrowse
$LN16@FileBrowse:

; 342  : 
; 343  : 				nk_group_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_group_end
	add	esp, 4

; 344  : 			}
; 345  : 			else

	jmp	SHORT $LN7@FileBrowse
$LN19@FileBrowse:

; 346  : 				nk_spacing(ctx, 1);

	push	1
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_spacing
	add	esp, 8
$LN7@FileBrowse:

; 347  : 		}
; 348  : 
; 349  : 		nk_layout_space_push(ctx, nk_rect(0.80, 0.92, 0.10, 0.08));

	push	ecx
	movss	xmm0, DWORD PTR __real@3da3d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f6b851f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T13[ebp]
	push	eax
	call	_nk_rect
	add	esp, 4
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_layout_space_push
	add	esp, 20					; 00000014H

; 350  : 		if (nk_button_label(ctx, "Open"))

	push	OFFSET ??_C@_04DNCDCIAE@Open?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_button_label
	add	esp, 8
	test	eax, eax
	je	$LN2@FileBrowse

; 351  : 		{
; 352  : 			if (UI_Sys.filesp[select] == UI_Sys.foldersp[select])

	mov	eax, DWORD PTR ?select@?1??FileBrowser@@9@9
	movsx	ecx, WORD PTR _UI_Sys[eax*2+264308]
	mov	edx, DWORD PTR ?select@?1??FileBrowser@@9@9
	movsx	eax, WORD PTR _UI_Sys[edx*2+264820]
	cmp	ecx, eax
	jne	$LN5@FileBrowse

; 353  : 			{
; 354  : 				strcpy(temp, UI_Sys.current_path);

	push	OFFSET _UI_Sys+43
	push	OFFSET ?temp@?1??FileBrowser@@9@9
	call	_strcpy
	add	esp, 8

; 355  : 				strcat(temp, "\\");

	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	push	OFFSET ?temp@?1??FileBrowser@@9@9
	call	_strcat
	add	esp, 8

; 356  : 				strcat(temp, UI_Sys.files[UI_Sys.foldersp[select]]);

	mov	eax, DWORD PTR ?select@?1??FileBrowser@@9@9
	movsx	ecx, WORD PTR _UI_Sys[eax*2+264820]
	shl	ecx, 9
	add	ecx, OFFSET _UI_Sys+2164
	push	ecx
	push	OFFSET ?temp@?1??FileBrowser@@9@9
	call	_strcat
	add	esp, 8

; 357  : 
; 358  : 				if ((d = opendir(temp)) != NULL)

	push	OFFSET ?temp@?1??FileBrowser@@9@9
	call	_opendir
	add	esp, 4
	mov	DWORD PTR _d$[ebp], eax
	cmp	DWORD PTR _d$[ebp], 0
	je	SHORT $LN4@FileBrowse

; 359  : 				{
; 360  : 					strcpy(backpath, UI_Sys.current_path);

	push	OFFSET _UI_Sys+43
	push	OFFSET ?backpath@?1??FileBrowser@@9@9
	call	_strcpy
	add	esp, 8

; 361  : 					strcpy(UI_Sys.current_path, temp);

	push	OFFSET ?temp@?1??FileBrowser@@9@9
	push	OFFSET _UI_Sys+43
	call	_strcpy
	add	esp, 8

; 362  : 					backpath_available = 1;

	mov	DWORD PTR ?backpath_available@?1??FileBrowser@@9@9, 1

; 363  : 					closedir(d);

	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	call	_closedir
	add	esp, 4

; 364  : 					SetDirContent(UI_Sys.extension);

	push	OFFSET _UI_Sys+265334
	call	_SetDirContent
	add	esp, 4

; 365  : 					doubleclick = -1;

	mov	DWORD PTR ?doubleclick@?1??FileBrowser@@9@9, -1

; 366  : 					doubleclick2 = -1;

	mov	DWORD PTR ?doubleclick2@?1??FileBrowser@@9@9, -1

; 367  : 					select = -1;

	mov	DWORD PTR ?select@?1??FileBrowser@@9@9, -1

; 368  : 					time = 0;

	mov	DWORD PTR ?time@?1??FileBrowser@@9@9, 0
$LN4@FileBrowse:

; 369  : 				}
; 370  : 			}
; 371  : 			else

	jmp	$LN2@FileBrowse
$LN5@FileBrowse:

; 372  : 			{
; 373  : 				strcpy(temp, UI_Sys.current_path);

	push	OFFSET _UI_Sys+43
	push	OFFSET ?temp@?1??FileBrowser@@9@9
	call	_strcpy
	add	esp, 8

; 374  : 				strcat(temp, "\\");

	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	push	OFFSET ?temp@?1??FileBrowser@@9@9
	call	_strcat
	add	esp, 8

; 375  : 				strcat(temp, UI_Sys.files[UI_Sys.filesp[select]]);

	mov	eax, DWORD PTR ?select@?1??FileBrowser@@9@9
	movsx	ecx, WORD PTR _UI_Sys[eax*2+264308]
	shl	ecx, 9
	add	ecx, OFFSET _UI_Sys+2164
	push	ecx
	push	OFFSET ?temp@?1??FileBrowser@@9@9
	call	_strcat
	add	esp, 8

; 376  : 
; 377  : 				if ((f = fopen(temp, "rb")) != NULL)

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	push	OFFSET ?temp@?1??FileBrowser@@9@9
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _f$[ebp], eax
	cmp	DWORD PTR _f$[ebp], 0
	je	SHORT $LN2@FileBrowse

; 378  : 				{
; 379  : 					fclose(f);

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 380  : 					nk_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_end
	add	esp, 4

; 381  : 					strcpy(filename, temp);

	push	OFFSET ?temp@?1??FileBrowser@@9@9
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8

; 382  : 					return 1;

	mov	eax, 1
	jmp	$LN36@FileBrowse
$LN2@FileBrowse:

; 383  : 				}
; 384  : 			}
; 385  : 		}
; 386  : 
; 387  : 		nk_layout_space_push(ctx, nk_rect(0.90, 0.92, 0.10, 0.08));

	push	ecx
	movss	xmm0, DWORD PTR __real@3da3d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f6b851f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T14[ebp]
	push	eax
	call	_nk_rect
	add	esp, 4
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_layout_space_push
	add	esp, 20					; 00000014H

; 388  : 		if (nk_button_label(ctx, "Cancel"))

	push	OFFSET ??_C@_06FMBNCPDL@Cancel?$AA@
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_button_label
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@FileBrowse

; 389  : 		{
; 390  : 			nk_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_end
	add	esp, 4

; 391  : 			return -1;

	or	eax, -1
	jmp	SHORT $LN36@FileBrowse
$LN1@FileBrowse:

; 392  : 		}
; 393  : 
; 394  : 	}
; 395  : 
; 396  : 	nk_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_end
	add	esp, 4

; 397  : 
; 398  : 	return 0;

	xor	eax, eax
$LN36@FileBrowse:

; 399  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN45@FileBrowse
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 1608				; 00000648H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN45@FileBrowse:
	DD	2
	DD	$LN44@FileBrowse
$LN44@FileBrowse:
	DD	-1028					; fffffbfcH
	DD	1024					; 00000400H
	DD	$LN42@FileBrowse
	DD	-1100					; fffffbb4H
	DD	4
	DD	$LN43@FileBrowse
$LN43@FileBrowse:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN42@FileBrowse:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
_FileBrowser ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mtex\main.c
;	COMDAT _ColorPicker
_TEXT	SEGMENT
_color$ = 8						; size = 4
_ColorPicker PROC					; COMDAT

; 134  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 135  : 	if (nk_combo_begin_color(ctx, color, nk_vec2(200, 250)))

	push	ecx
	movss	xmm0, DWORD PTR __real@437a0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@43480000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_combo_begin_color
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN1@ColorPicke

; 136  : 	{
; 137  : 		nk_layout_row_dynamic(ctx, 120, 1);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@42f00000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 138  : 		color = nk_color_picker(ctx, color, NK_RGB);

	push	0
	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_color_picker
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _color$[ebp], eax

; 139  : 		nk_layout_row_dynamic(ctx, 25, 1);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 140  : 		color.r = (nk_byte)nk_propertyi(ctx, "R:", 0, color.r, 255, 1, 1);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	1
	push	255					; 000000ffH
	movzx	eax, BYTE PTR _color$[ebp]
	push	eax
	push	0
	push	OFFSET ??_C@_02EKCPACEK@R?3?$AA@
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_propertyi
	add	esp, 28					; 0000001cH
	mov	BYTE PTR _color$[ebp], al

; 141  : 		color.g = (nk_byte)nk_propertyi(ctx, "G:", 0, color.g, 255, 1, 1);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	1
	push	255					; 000000ffH
	movzx	eax, BYTE PTR _color$[ebp+1]
	push	eax
	push	0
	push	OFFSET ??_C@_02FAMCGDNB@G?3?$AA@
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_propertyi
	add	esp, 28					; 0000001cH
	mov	BYTE PTR _color$[ebp+1], al

; 142  : 		color.b = (nk_byte)nk_propertyi(ctx, "B:", 0, color.b, 255, 1, 1);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	1
	push	255					; 000000ffH
	movzx	eax, BYTE PTR _color$[ebp+2]
	push	eax
	push	0
	push	OFFSET ??_C@_02FGAJKBDK@B?3?$AA@
	mov	ecx, DWORD PTR _ctx
	push	ecx
	call	_nk_propertyi
	add	esp, 28					; 0000001cH
	mov	BYTE PTR _color$[ebp+2], al

; 143  : 
; 144  : 		nk_combo_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_combo_end
	add	esp, 4
$LN1@ColorPicke:

; 145  : 	}
; 146  : 
; 147  : 	return color;

	mov	eax, DWORD PTR _color$[ebp]

; 148  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ColorPicker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mtex\main.c
;	COMDAT _LoadCFG
_TEXT	SEGMENT
_value$ = -6340						; size = 4
_buf3$ = -6328						; size = 2048
_buf2$ = -4272						; size = 4
_str$ = -2204						; size = 128
_buf$ = -2068						; size = 2048
_file$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_LoadCFG PROC						; COMDAT

; 64   : {

	push	ebp
	mov	ebp, esp
	mov	eax, 6536				; 00001988H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-6536]
	mov	ecx, 1634				; 00000662H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 65   : 	FILE *file;
; 66   : 	char buf[2048], str[128], str2[2048], *buf2, buf3[2048];
; 67   : 	int value=0;

	mov	DWORD PTR _value$[ebp], 0

; 68   : 	if((file=fopen("settings.cfg","r"))==NULL)

	push	OFFSET ??_C@_01KDCPPGHE@r?$AA@
	push	OFFSET ??_C@_0N@DBJPLNLE@settings?4cfg?$AA@
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _file$[ebp], eax
	cmp	DWORD PTR _file$[ebp], 0
	jne	SHORT $LN13@LoadCFG

; 69   : 		if(WriteCFG()==0)

	call	_WriteCFG
	movzx	eax, ax
	test	eax, eax
	jne	SHORT $LN13@LoadCFG

; 70   : 			return 0;

	xor	eax, eax
	jmp	$LN16@LoadCFG
$LN13@LoadCFG:

; 71   : 
; 72   : 	while(!feof(file))

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_feof
	add	esp, 4
	test	eax, eax
	jne	$LN12@LoadCFG

; 73   : 	{
; 74   : 		fgets(buf,sizeof(buf),file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	2048					; 00000800H
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 75   : 		sscanf(buf,"%s = %d", str, &value);

	lea	eax, DWORD PTR _value$[ebp]
	push	eax
	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	push	OFFSET ??_C@_07DHPDHKIF@?$CFs?5?$DN?5?$CFd?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_sscanf
	add	esp, 16					; 00000010H

; 76   : 		if(strcmp(str,"ScreenX")==NULL) st.screenx=value;

	push	OFFSET ??_C@_07NAMBOAHL@ScreenX?$AA@
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@LoadCFG
	mov	ax, WORD PTR _value$[ebp]
	mov	WORD PTR _st+228, ax
$LN11@LoadCFG:

; 77   : 		if(strcmp(str,"ScreenY")==NULL) st.screeny=value;

	push	OFFSET ??_C@_07MJNKNBDK@ScreenY?$AA@
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@LoadCFG
	mov	ax, WORD PTR _value$[ebp]
	mov	WORD PTR _st+230, ax
$LN10@LoadCFG:

; 78   : 		if(strcmp(str,"ScreenBPP")==NULL) st.bpp=value;

	push	OFFSET ??_C@_09IFGCFGJL@ScreenBPP?$AA@
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@LoadCFG
	mov	al, BYTE PTR _value$[ebp]
	mov	BYTE PTR _st+232, al
$LN9@LoadCFG:

; 79   : 		if(strcmp(str,"FullScreen")==NULL) st.fullscreen=value;

	push	OFFSET ??_C@_0L@CBCDGBIF@FullScreen?$AA@
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@LoadCFG
	mov	al, BYTE PTR _value$[ebp]
	mov	BYTE PTR _st+233, al
$LN8@LoadCFG:

; 80   : 		if(strcmp(str,"AudioFrequency")==NULL) st.audiof=value;

	push	OFFSET ??_C@_0P@HHDALPEH@AudioFrequency?$AA@
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@LoadCFG
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _st+236, eax
$LN7@LoadCFG:

; 81   : 		if(strcmp(str,"AudioChannels")==NULL) st.audioc=value;

	push	OFFSET ??_C@_0O@OBADIEME@AudioChannels?$AA@
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@LoadCFG
	mov	al, BYTE PTR _value$[ebp]
	mov	BYTE PTR _st+240, al
$LN6@LoadCFG:

; 82   : 		if(strcmp(str,"VSync")==NULL) st.vsync=value;

	push	OFFSET ??_C@_05PBPHDBPF@VSync?$AA@
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@LoadCFG
	mov	al, BYTE PTR _value$[ebp]
	mov	BYTE PTR _st+241, al
$LN5@LoadCFG:

; 83   : 		if (strcmp(str, "CurrentPath") == NULL)

	push	OFFSET ??_C@_0M@PGCPLEOJ@CurrentPath?$AA@
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@LoadCFG

; 84   : 		{
; 85   : 			memcpy(buf3, buf, 2048);

	push	2048					; 00000800H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf3$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 86   : 			buf2 = strtok(buf3, "\"");

	push	OFFSET ??_C@_01BJJEKLCA@?$CC?$AA@
	lea	eax, DWORD PTR _buf3$[ebp]
	push	eax
	call	_strtok
	add	esp, 8
	mov	DWORD PTR _buf2$[ebp], eax

; 87   : 			buf2 = strtok(NULL, "\"");

	push	OFFSET ??_C@_01BJJEKLCA@?$CC?$AA@
	push	0
	call	_strtok
	add	esp, 8
	mov	DWORD PTR _buf2$[ebp], eax

; 88   : 			strcpy(st.CurrPath, buf2);

	mov	eax, DWORD PTR _buf2$[ebp]
	push	eax
	push	OFFSET _st+3307838
	call	_strcpy
	add	esp, 8

; 89   : 			continue;

	jmp	$LN13@LoadCFG
$LN4@LoadCFG:

; 90   : 		}
; 91   : 	}

	jmp	$LN13@LoadCFG
$LN12@LoadCFG:

; 92   : 
; 93   : 	if(!st.screenx || !st.screeny || !st.bpp || !st.audioc || !st.audioc || st.vsync>1)

	movzx	eax, WORD PTR _st+228
	test	eax, eax
	je	SHORT $LN2@LoadCFG
	movzx	eax, WORD PTR _st+230
	test	eax, eax
	je	SHORT $LN2@LoadCFG
	movzx	eax, BYTE PTR _st+232
	test	eax, eax
	je	SHORT $LN2@LoadCFG
	movzx	eax, BYTE PTR _st+240
	test	eax, eax
	je	SHORT $LN2@LoadCFG
	movzx	eax, BYTE PTR _st+240
	test	eax, eax
	je	SHORT $LN2@LoadCFG
	movzx	eax, BYTE PTR _st+241
	cmp	eax, 1
	jle	SHORT $LN3@LoadCFG
$LN2@LoadCFG:

; 94   : 	{
; 95   : 		fclose(file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 96   : 		if(WriteCFG()==0)

	call	_WriteCFG
	movzx	eax, ax
	test	eax, eax
	jne	SHORT $LN3@LoadCFG

; 97   : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN16@LoadCFG
$LN3@LoadCFG:

; 98   : 	}
; 99   : 
; 100  : 	fclose(file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 101  : 
; 102  : 	return 1;

	mov	eax, 1
$LN16@LoadCFG:

; 103  : 
; 104  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@LoadCFG
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 6536				; 00001988H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN25@LoadCFG:
	DD	5
	DD	$LN24@LoadCFG
$LN24@LoadCFG:
	DD	-2068					; fffff7ecH
	DD	2048					; 00000800H
	DD	$LN19@LoadCFG
	DD	-2204					; fffff764H
	DD	128					; 00000080H
	DD	$LN20@LoadCFG
	DD	-4260					; ffffef5cH
	DD	2048					; 00000800H
	DD	$LN21@LoadCFG
	DD	-6328					; ffffe748H
	DD	2048					; 00000800H
	DD	$LN22@LoadCFG
	DD	-6340					; ffffe73cH
	DD	4
	DD	$LN23@LoadCFG
$LN23@LoadCFG:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN22@LoadCFG:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	51					; 00000033H
	DB	0
$LN21@LoadCFG:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	50					; 00000032H
	DB	0
$LN20@LoadCFG:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN19@LoadCFG:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_LoadCFG ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mtex\main.c
;	COMDAT _WriteCFG
_TEXT	SEGMENT
_file$ = -8						; size = 4
_WriteCFG PROC						; COMDAT

; 36   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 37   : 	FILE *file;
; 38   : 
; 39   : 	if((file=fopen("settings.cfg","w"))==NULL)

	push	OFFSET ??_C@_01NOFIACDB@w?$AA@
	push	OFFSET ??_C@_0N@DBJPLNLE@settings?4cfg?$AA@
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _file$[ebp], eax
	cmp	DWORD PTR _file$[ebp], 0
	jne	SHORT $LN1@WriteCFG

; 40   : 		return 0;

	xor	eax, eax
	jmp	$LN2@WriteCFG
$LN1@WriteCFG:

; 41   : 
; 42   : 	st.screenx=1024;

	mov	eax, 1024				; 00000400H
	mov	WORD PTR _st+228, ax

; 43   : 	st.screeny=576;

	mov	eax, 576				; 00000240H
	mov	WORD PTR _st+230, ax

; 44   : 	st.fullscreen=0;

	mov	BYTE PTR _st+233, 0

; 45   : 	st.bpp=32;

	mov	BYTE PTR _st+232, 32			; 00000020H

; 46   : 	st.audiof=44100;

	mov	DWORD PTR _st+236, 44100		; 0000ac44H

; 47   : 	st.audioc=2;

	mov	BYTE PTR _st+240, 2

; 48   : 	st.vsync=0;

	mov	BYTE PTR _st+241, 0

; 49   : 
; 50   : 	fprintf(file,"ScreenX = %d\n",st.screenx);

	movzx	eax, WORD PTR _st+228
	push	eax
	push	OFFSET ??_C@_0O@JOAMFABP@ScreenX?5?$DN?5?$CFd?6?$AA@
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 51   : 	fprintf(file,"ScreenY = %d\n",st.screeny);

	movzx	eax, WORD PTR _st+230
	push	eax
	push	OFFSET ??_C@_0O@FCKGFAIB@ScreenY?5?$DN?5?$CFd?6?$AA@
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 52   : 	fprintf(file,"FullScreen = %d\n",st.fullscreen);

	movzx	eax, BYTE PTR _st+233
	push	eax
	push	OFFSET ??_C@_0BB@PFGCCBAA@FullScreen?5?$DN?5?$CFd?6?$AA@
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 53   : 	fprintf(file,"ScreenBPP = %d\n",st.bpp);

	movzx	eax, BYTE PTR _st+232
	push	eax
	push	OFFSET ??_C@_0BA@CCGGOMJJ@ScreenBPP?5?$DN?5?$CFd?6?$AA@
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 54   : 	fprintf(file,"AudioFrequency = %d\n",st.audiof);

	mov	eax, DWORD PTR _st+236
	push	eax
	push	OFFSET ??_C@_0BF@LFBKPFPE@AudioFrequency?5?$DN?5?$CFd?6?$AA@
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 55   : 	fprintf(file,"AudioChannels = %d\n",st.audioc);

	movzx	eax, BYTE PTR _st+240
	push	eax
	push	OFFSET ??_C@_0BE@OAMPIJBI@AudioChannels?5?$DN?5?$CFd?6?$AA@
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 56   : 	fprintf(file,"VSync = %d\n",st.vsync);

	movzx	eax, BYTE PTR _st+241
	push	eax
	push	OFFSET ??_C@_0M@OCOMPIPE@VSync?5?$DN?5?$CFd?6?$AA@
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 57   : 
; 58   : 	fclose(file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 59   : 
; 60   : 	return 1;

	mov	eax, 1
$LN2@WriteCFG:

; 61   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_WriteCFG ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear_sdl_gl3.h
;	COMDAT _nk_sdl_clipbard_copy
_TEXT	SEGMENT
_str$ = -8						; size = 4
_usr$ = 8						; size = 4
_text$ = 12						; size = 4
_len$ = 16						; size = 4
_nk_sdl_clipbard_copy PROC				; COMDAT

; 299  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 300  :     char *str = 0;

	mov	DWORD PTR _str$[ebp], 0

; 301  :     (void)usr;
; 302  :     if (!len) return;

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN2@nk_sdl_cli
	jmp	SHORT $LN3@nk_sdl_cli
$LN2@nk_sdl_cli:

; 303  :     str = (char*)malloc((size_t)len+1);

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _str$[ebp], eax

; 304  :     if (!str) return;

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN1@nk_sdl_cli
	jmp	SHORT $LN3@nk_sdl_cli
$LN1@nk_sdl_cli:

; 305  :     memcpy(str, text, (size_t)len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 306  :     str[len] = '\0';

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	BYTE PTR [eax], 0

; 307  :     SDL_SetClipboardText(str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_SDL_SetClipboardText
	add	esp, 4

; 308  :     free(str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_free
	add	esp, 4
$LN3@nk_sdl_cli:

; 309  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_sdl_clipbard_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear_sdl_gl3.h
;	COMDAT _nk_sdl_clipbard_paste
_TEXT	SEGMENT
_text$ = -8						; size = 4
_usr$ = 8						; size = 4
_edit$ = 12						; size = 4
_nk_sdl_clipbard_paste PROC				; COMDAT

; 291  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 292  :     const char *text = SDL_GetClipboardText();

	call	_SDL_GetClipboardText
	mov	DWORD PTR _text$[ebp], eax

; 293  :     if (text) nk_textedit_paste(edit, text, nk_strlen(text));

	cmp	DWORD PTR _text$[ebp], 0
	je	SHORT $LN2@nk_sdl_cli
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _edit$[ebp]
	push	edx
	call	_nk_textedit_paste
	add	esp, 12					; 0000000cH
$LN2@nk_sdl_cli:

; 294  :     (void)usr;
; 295  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_sdl_clipbard_paste ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear_sdl_gl3.h
;	COMDAT _nk_sdl_device_upload_atlas
_TEXT	SEGMENT
_dev$ = -8						; size = 4
_image$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_nk_sdl_device_upload_atlas PROC			; COMDAT

; 159  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 160  :     struct nk_sdl_device *dev = &sdl.ogl;

	mov	DWORD PTR _dev$[ebp], OFFSET _sdl+4

; 161  :     glGenTextures(1, &dev->font_tex);

	mov	eax, DWORD PTR _dev$[ebp]
	add	eax, 116				; 00000074H
	mov	esi, esp
	push	eax
	push	1
	call	DWORD PTR __imp__glGenTextures@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 162  :     glBindTexture(GL_TEXTURE_2D, dev->font_tex);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glBindTexture@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 163  :     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

	mov	esi, esp
	push	9729					; 00002601H
	push	10241					; 00002801H
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glTexParameteri@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 164  :     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

	mov	esi, esp
	push	9729					; 00002601H
	push	10240					; 00002800H
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glTexParameteri@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 165  :     glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, (GLsizei)width, (GLsizei)height, 0,
; 166  :                 GL_RGBA, GL_UNSIGNED_BYTE, image);

	mov	esi, esp
	mov	eax, DWORD PTR _image$[ebp]
	push	eax
	push	5121					; 00001401H
	push	6408					; 00001908H
	push	0
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	push	6408					; 00001908H
	push	0
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glTexImage2D@36
	cmp	esi, esp
	call	__RTC_CheckEsp

; 167  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_sdl_device_upload_atlas ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear_sdl_gl3.h
;	COMDAT _nk_sdl_device_create
_TEXT	SEGMENT
_vc$1 = -68						; size = 4
_vt$2 = -56						; size = 4
_vp$3 = -44						; size = 4
_vs$4 = -32						; size = 4
_dev$ = -20						; size = 4
_status$ = -8						; size = 4
_nk_sdl_device_create PROC				; COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 77   :     GLint status;
; 78   :     static const GLchar *vertex_shader =
; 79   :         NK_SHADER_VERSION
; 80   :         "uniform mat4 ProjMtx;\n"
; 81   :         "in vec2 Position;\n"
; 82   :         "in vec2 TexCoord;\n"
; 83   :         "in vec4 Color;\n"
; 84   :         "out vec2 Frag_UV;\n"
; 85   :         "out vec4 Frag_Color;\n"
; 86   :         "void main() {\n"
; 87   :         "   Frag_UV = TexCoord;\n"
; 88   :         "   Frag_Color = Color;\n"
; 89   :         "   gl_Position = ProjMtx * vec4(Position.xy, 0, 1);\n"
; 90   :         "}\n";
; 91   :     static const GLchar *fragment_shader =
; 92   :         NK_SHADER_VERSION
; 93   :         "precision mediump float;\n"
; 94   :         "uniform sampler2D Texture;\n"
; 95   :         "in vec2 Frag_UV;\n"
; 96   :         "in vec4 Frag_Color;\n"
; 97   :         "out vec4 Out_Color;\n"
; 98   :         "void main(){\n"
; 99   :         "   Out_Color = Frag_Color * texture(Texture, Frag_UV.st);\n"
; 100  :         "}\n";
; 101  : 
; 102  :     struct nk_sdl_device *dev = &sdl.ogl;

	mov	DWORD PTR _dev$[ebp], OFFSET _sdl+4

; 103  :     nk_buffer_init_default(&dev->cmds);

	mov	eax, DWORD PTR _dev$[ebp]
	push	eax
	call	_nk_buffer_init_default
	add	esp, 4

; 104  :     dev->prog = glCreateProgram();

	mov	esi, esp
	call	DWORD PTR _GLeeFuncPtr_glCreateProgram
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _dev$[ebp]
	mov	DWORD PTR [ecx+84], eax

; 105  :     dev->vert_shdr = glCreateShader(GL_VERTEX_SHADER);

	mov	esi, esp
	push	35633					; 00008b31H
	call	DWORD PTR _GLeeFuncPtr_glCreateShader
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _dev$[ebp]
	mov	DWORD PTR [ecx+88], eax

; 106  :     dev->frag_shdr = glCreateShader(GL_FRAGMENT_SHADER);

	mov	esi, esp
	push	35632					; 00008b30H
	call	DWORD PTR _GLeeFuncPtr_glCreateShader
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _dev$[ebp]
	mov	DWORD PTR [ecx+92], eax

; 107  :     glShaderSource(dev->vert_shdr, 1, &vertex_shader, 0);

	mov	esi, esp
	push	0
	push	OFFSET ?vertex_shader@?1??nk_sdl_device_create@@9@9
	push	1
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glShaderSource
	cmp	esi, esp
	call	__RTC_CheckEsp

; 108  :     glShaderSource(dev->frag_shdr, 1, &fragment_shader, 0);

	mov	esi, esp
	push	0
	push	OFFSET ?fragment_shader@?1??nk_sdl_device_create@@9@9
	push	1
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glShaderSource
	cmp	esi, esp
	call	__RTC_CheckEsp

; 109  :     glCompileShader(dev->vert_shdr);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glCompileShader
	cmp	esi, esp
	call	__RTC_CheckEsp

; 110  :     glCompileShader(dev->frag_shdr);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glCompileShader
	cmp	esi, esp
	call	__RTC_CheckEsp

; 111  :     glGetShaderiv(dev->vert_shdr, GL_COMPILE_STATUS, &status);

	mov	esi, esp
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	35713					; 00008b81H
	mov	ecx, DWORD PTR _dev$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	DWORD PTR _GLeeFuncPtr_glGetShaderiv
	cmp	esi, esp
	call	__RTC_CheckEsp

; 112  :     assert(status == GL_TRUE);

	cmp	DWORD PTR _status$[ebp], 1
	je	SHORT $LN3@nk_sdl_dev
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_sdl_device_create@@9@9
	add	eax, 36					; 00000024H
	push	eax
	push	OFFSET ??_C@_1HM@DKHOBLCB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CE@FPHDOHKN@?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAG?$AAL?$AA_?$AAT?$AAR?$AAU?$AAE?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@nk_sdl_dev:

; 113  :     glGetShaderiv(dev->frag_shdr, GL_COMPILE_STATUS, &status);

	mov	esi, esp
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	35713					; 00008b81H
	mov	ecx, DWORD PTR _dev$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	push	edx
	call	DWORD PTR _GLeeFuncPtr_glGetShaderiv
	cmp	esi, esp
	call	__RTC_CheckEsp

; 114  :     assert(status == GL_TRUE);

	cmp	DWORD PTR _status$[ebp], 1
	je	SHORT $LN4@nk_sdl_dev
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_sdl_device_create@@9@9
	add	eax, 38					; 00000026H
	push	eax
	push	OFFSET ??_C@_1HM@DKHOBLCB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CE@FPHDOHKN@?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAG?$AAL?$AA_?$AAT?$AAR?$AAU?$AAE?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_sdl_dev:

; 115  :     glAttachShader(dev->prog, dev->vert_shdr);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _dev$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	call	DWORD PTR _GLeeFuncPtr_glAttachShader
	cmp	esi, esp
	call	__RTC_CheckEsp

; 116  :     glAttachShader(dev->prog, dev->frag_shdr);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR _dev$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	call	DWORD PTR _GLeeFuncPtr_glAttachShader
	cmp	esi, esp
	call	__RTC_CheckEsp

; 117  :     glLinkProgram(dev->prog);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glLinkProgram
	cmp	esi, esp
	call	__RTC_CheckEsp

; 118  :     glGetProgramiv(dev->prog, GL_LINK_STATUS, &status);

	mov	esi, esp
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	35714					; 00008b82H
	mov	ecx, DWORD PTR _dev$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	call	DWORD PTR _GLeeFuncPtr_glGetProgramiv
	cmp	esi, esp
	call	__RTC_CheckEsp

; 119  :     assert(status == GL_TRUE);

	cmp	DWORD PTR _status$[ebp], 1
	je	SHORT $LN5@nk_sdl_dev
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_sdl_device_create@@9@9
	add	eax, 43					; 0000002bH
	push	eax
	push	OFFSET ??_C@_1HM@DKHOBLCB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CE@FPHDOHKN@?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAG?$AAL?$AA_?$AAT?$AAR?$AAU?$AAE?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_sdl_dev:

; 120  : 
; 121  :     dev->uniform_tex = glGetUniformLocation(dev->prog, "Texture");

	mov	esi, esp
	push	OFFSET ??_C@_07GKACAEDJ@Texture?$AA@
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glGetUniformLocation
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _dev$[ebp]
	mov	DWORD PTR [edx+108], eax

; 122  :     dev->uniform_proj = glGetUniformLocation(dev->prog, "ProjMtx");

	mov	esi, esp
	push	OFFSET ??_C@_07EDEMHDKD@ProjMtx?$AA@
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glGetUniformLocation
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _dev$[ebp]
	mov	DWORD PTR [edx+112], eax

; 123  :     dev->attrib_pos = glGetAttribLocation(dev->prog, "Position");

	mov	esi, esp
	push	OFFSET ??_C@_08GCJNLIKG@Position?$AA@
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glGetAttribLocation
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _dev$[ebp]
	mov	DWORD PTR [edx+96], eax

; 124  :     dev->attrib_uv = glGetAttribLocation(dev->prog, "TexCoord");

	mov	esi, esp
	push	OFFSET ??_C@_08NGMLKGCO@TexCoord?$AA@
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glGetAttribLocation
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _dev$[ebp]
	mov	DWORD PTR [edx+100], eax

; 125  :     dev->attrib_col = glGetAttribLocation(dev->prog, "Color");

	mov	esi, esp
	push	OFFSET ??_C@_05PDOBBJNA@Color?$AA@
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glGetAttribLocation
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _dev$[ebp]
	mov	DWORD PTR [edx+104], eax

; 126  : 
; 127  :     {
; 128  :         /* buffer setup */
; 129  :         GLsizei vs = sizeof(struct nk_sdl_vertex);

	mov	DWORD PTR _vs$4[ebp], 20		; 00000014H

; 130  :         size_t vp = offsetof(struct nk_sdl_vertex, position);

	mov	DWORD PTR _vp$3[ebp], 0

; 131  :         size_t vt = offsetof(struct nk_sdl_vertex, uv);

	mov	DWORD PTR _vt$2[ebp], 8

; 132  :         size_t vc = offsetof(struct nk_sdl_vertex, col);

	mov	DWORD PTR _vc$1[ebp], 16		; 00000010H

; 133  : 
; 134  :         glGenBuffers(1, &dev->vbo);

	mov	eax, DWORD PTR _dev$[ebp]
	add	eax, 72					; 00000048H
	mov	esi, esp
	push	eax
	push	1
	call	DWORD PTR _GLeeFuncPtr_glGenBuffers
	cmp	esi, esp
	call	__RTC_CheckEsp

; 135  :         glGenBuffers(1, &dev->ebo);

	mov	eax, DWORD PTR _dev$[ebp]
	add	eax, 80					; 00000050H
	mov	esi, esp
	push	eax
	push	1
	call	DWORD PTR _GLeeFuncPtr_glGenBuffers
	cmp	esi, esp
	call	__RTC_CheckEsp

; 136  :         glGenVertexArrays(1, &dev->vao);

	mov	eax, DWORD PTR _dev$[ebp]
	add	eax, 76					; 0000004cH
	mov	esi, esp
	push	eax
	push	1
	call	DWORD PTR _GLeeFuncPtr_glGenVertexArrays
	cmp	esi, esp
	call	__RTC_CheckEsp

; 137  : 
; 138  :         glBindVertexArray(dev->vao);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glBindVertexArray
	cmp	esi, esp
	call	__RTC_CheckEsp

; 139  :         glBindBuffer(GL_ARRAY_BUFFER, dev->vbo);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	push	34962					; 00008892H
	call	DWORD PTR _GLeeFuncPtr_glBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 140  :         glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, dev->ebo);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	push	34963					; 00008893H
	call	DWORD PTR _GLeeFuncPtr_glBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 141  : 
; 142  :         glEnableVertexAttribArray((GLuint)dev->attrib_pos);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glEnableVertexAttribArray
	cmp	esi, esp
	call	__RTC_CheckEsp

; 143  :         glEnableVertexAttribArray((GLuint)dev->attrib_uv);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glEnableVertexAttribArray
	cmp	esi, esp
	call	__RTC_CheckEsp

; 144  :         glEnableVertexAttribArray((GLuint)dev->attrib_col);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glEnableVertexAttribArray
	cmp	esi, esp
	call	__RTC_CheckEsp

; 145  : 
; 146  :         glVertexAttribPointer((GLuint)dev->attrib_pos, 2, GL_FLOAT, GL_FALSE, vs, (void*)vp);

	mov	esi, esp
	mov	eax, DWORD PTR _vp$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _vs$4[ebp]
	push	ecx
	push	0
	push	5126					; 00001406H
	push	2
	mov	edx, DWORD PTR _dev$[ebp]
	mov	eax, DWORD PTR [edx+96]
	push	eax
	call	DWORD PTR _GLeeFuncPtr_glVertexAttribPointer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 147  :         glVertexAttribPointer((GLuint)dev->attrib_uv, 2, GL_FLOAT, GL_FALSE, vs, (void*)vt);

	mov	esi, esp
	mov	eax, DWORD PTR _vt$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _vs$4[ebp]
	push	ecx
	push	0
	push	5126					; 00001406H
	push	2
	mov	edx, DWORD PTR _dev$[ebp]
	mov	eax, DWORD PTR [edx+100]
	push	eax
	call	DWORD PTR _GLeeFuncPtr_glVertexAttribPointer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 148  :         glVertexAttribPointer((GLuint)dev->attrib_col, 4, GL_UNSIGNED_BYTE, GL_TRUE, vs, (void*)vc);

	mov	esi, esp
	mov	eax, DWORD PTR _vc$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _vs$4[ebp]
	push	ecx
	push	1
	push	5121					; 00001401H
	push	4
	mov	edx, DWORD PTR _dev$[ebp]
	mov	eax, DWORD PTR [edx+104]
	push	eax
	call	DWORD PTR _GLeeFuncPtr_glVertexAttribPointer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 149  :     }
; 150  : 
; 151  :     glBindTexture(GL_TEXTURE_2D, 0);

	mov	esi, esp
	push	0
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glBindTexture@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 152  :     glBindBuffer(GL_ARRAY_BUFFER, 0);

	mov	esi, esp
	push	0
	push	34962					; 00008892H
	call	DWORD PTR _GLeeFuncPtr_glBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 153  :     glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);

	mov	esi, esp
	push	0
	push	34963					; 00008893H
	call	DWORD PTR _GLeeFuncPtr_glBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 154  :     glBindVertexArray(0);

	mov	esi, esp
	push	0
	call	DWORD PTR _GLeeFuncPtr_glBindVertexArray
	cmp	esi, esp
	call	__RTC_CheckEsp

; 155  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@nk_sdl_dev
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@nk_sdl_dev:
	DD	1
	DD	$LN7@nk_sdl_dev
$LN7@nk_sdl_dev:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@nk_sdl_dev
$LN6@nk_sdl_dev:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_nk_sdl_device_create ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear_sdl_gl3.h
;	COMDAT _nk_sdl_device_destroy
_TEXT	SEGMENT
_dev$ = -8						; size = 4
_nk_sdl_device_destroy PROC				; COMDAT

; 171  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 172  :     struct nk_sdl_device *dev = &sdl.ogl;

	mov	DWORD PTR _dev$[ebp], OFFSET _sdl+4

; 173  :     glDetachShader(dev->prog, dev->vert_shdr);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _dev$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	call	DWORD PTR _GLeeFuncPtr_glDetachShader
	cmp	esi, esp
	call	__RTC_CheckEsp

; 174  :     glDetachShader(dev->prog, dev->frag_shdr);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR _dev$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	call	DWORD PTR _GLeeFuncPtr_glDetachShader
	cmp	esi, esp
	call	__RTC_CheckEsp

; 175  :     glDeleteShader(dev->vert_shdr);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glDeleteShader
	cmp	esi, esp
	call	__RTC_CheckEsp

; 176  :     glDeleteShader(dev->frag_shdr);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glDeleteShader
	cmp	esi, esp
	call	__RTC_CheckEsp

; 177  :     glDeleteProgram(dev->prog);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glDeleteProgram
	cmp	esi, esp
	call	__RTC_CheckEsp

; 178  :     glDeleteTextures(1, &dev->font_tex);

	mov	eax, DWORD PTR _dev$[ebp]
	add	eax, 116				; 00000074H
	mov	esi, esp
	push	eax
	push	1
	call	DWORD PTR __imp__glDeleteTextures@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 179  :     glDeleteBuffers(1, &dev->vbo);

	mov	eax, DWORD PTR _dev$[ebp]
	add	eax, 72					; 00000048H
	mov	esi, esp
	push	eax
	push	1
	call	DWORD PTR _GLeeFuncPtr_glDeleteBuffers
	cmp	esi, esp
	call	__RTC_CheckEsp

; 180  :     glDeleteBuffers(1, &dev->ebo);

	mov	eax, DWORD PTR _dev$[ebp]
	add	eax, 80					; 00000050H
	mov	esi, esp
	push	eax
	push	1
	call	DWORD PTR _GLeeFuncPtr_glDeleteBuffers
	cmp	esi, esp
	call	__RTC_CheckEsp

; 181  :     nk_buffer_free(&dev->cmds);

	mov	eax, DWORD PTR _dev$[ebp]
	push	eax
	call	_nk_buffer_free
	add	esp, 4

; 182  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_sdl_device_destroy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear_sdl_gl3.h
;	COMDAT _nk_sdl_shutdown
_TEXT	SEGMENT
_nk_sdl_shutdown PROC					; COMDAT

; 436  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 437  :     nk_font_atlas_clear(&sdl.atlas);

	push	OFFSET _sdl+13080
	call	_nk_font_atlas_clear
	add	esp, 4

; 438  :     nk_free(&sdl.ctx);

	push	OFFSET _sdl+124
	call	_nk_free
	add	esp, 4

; 439  :     nk_sdl_device_destroy();

	call	_nk_sdl_device_destroy

; 440  :     memset(&sdl, 0, sizeof(sdl));

	push	13372					; 0000343cH
	push	0
	push	OFFSET _sdl
	call	_memset
	add	esp, 12					; 0000000cH

; 441  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_sdl_shutdown ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear_sdl_gl3.h
;	COMDAT _nk_sdl_render
_TEXT	SEGMENT
_ebuf$1 = -388						; size = 60
_vbuf$2 = -320						; size = 60
_config$3 = -252					; size = 48
_offset$4 = -196					; size = 4
_elements$5 = -184					; size = 4
_vertices$6 = -172					; size = 4
_cmd$7 = -160						; size = 4
_ortho$ = -148						; size = 64
_scale$ = -76						; size = 8
_display_height$ = -60					; size = 4
_display_width$ = -48					; size = 4
_height$ = -36						; size = 4
_width$ = -24						; size = 4
_dev$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_AA$ = 8						; size = 4
_max_vertex_buffer$ = 12				; size = 4
_max_element_buffer$ = 16				; size = 4
_nk_sdl_render PROC					; COMDAT

; 186  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 584				; 00000248H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-584]
	mov	ecx, 146				; 00000092H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 187  :     struct nk_sdl_device *dev = &sdl.ogl;

	mov	DWORD PTR _dev$[ebp], OFFSET _sdl+4

; 188  :     int width, height;
; 189  :     int display_width, display_height;
; 190  :     struct nk_vec2 scale;
; 191  :     GLfloat ortho[4][4] = {
; 192  :         {2.0f, 0.0f, 0.0f, 0.0f},
; 193  :         {0.0f,-2.0f, 0.0f, 0.0f},
; 194  :         {0.0f, 0.0f,-1.0f, 0.0f},
; 195  :         {-1.0f,1.0f, 0.0f, 1.0f},
; 196  :     };

	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _ortho$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ortho$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ortho$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ortho$[ebp+12], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ortho$[ebp+16], xmm0
	movss	xmm0, DWORD PTR __real@c0000000
	movss	DWORD PTR _ortho$[ebp+20], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ortho$[ebp+24], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ortho$[ebp+28], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ortho$[ebp+32], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ortho$[ebp+36], xmm0
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _ortho$[ebp+40], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ortho$[ebp+44], xmm0
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _ortho$[ebp+48], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _ortho$[ebp+52], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ortho$[ebp+56], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _ortho$[ebp+60], xmm0

; 197  :     SDL_GetWindowSize(sdl.win, &width, &height);

	lea	eax, DWORD PTR _height$[ebp]
	push	eax
	lea	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sdl
	push	edx
	call	_SDL_GetWindowSize
	add	esp, 12					; 0000000cH

; 198  :     SDL_GL_GetDrawableSize(sdl.win, &display_width, &display_height);

	lea	eax, DWORD PTR _display_height$[ebp]
	push	eax
	lea	ecx, DWORD PTR _display_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sdl
	push	edx
	call	_SDL_GL_GetDrawableSize
	add	esp, 12					; 0000000cH

; 199  :     ortho[0][0] /= (GLfloat)width;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _ortho$[ebp+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	cvtsi2ss xmm0, DWORD PTR _width$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	divss	xmm1, xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	lea	ecx, DWORD PTR _ortho$[ebp+edx]
	movss	DWORD PTR [ecx+eax], xmm1

; 200  :     ortho[1][1] /= (GLfloat)height;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	lea	ecx, DWORD PTR _ortho$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	cvtsi2ss xmm0, DWORD PTR _height$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx]
	divss	xmm1, xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	lea	edx, DWORD PTR _ortho$[ebp+ecx]
	movss	DWORD PTR [edx+eax], xmm1

; 201  : 
; 202  :     scale.x = (float)display_width/(float)width;

	cvtsi2ss xmm0, DWORD PTR _display_width$[ebp]
	cvtsi2ss xmm1, DWORD PTR _width$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _scale$[ebp], xmm0

; 203  :     scale.y = (float)display_height/(float)height;

	cvtsi2ss xmm0, DWORD PTR _display_height$[ebp]
	cvtsi2ss xmm1, DWORD PTR _height$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _scale$[ebp+4], xmm0

; 204  : 
; 205  :     /* setup global state */
; 206  :     glViewport(0,0,display_width,display_height);

	mov	esi, esp
	mov	eax, DWORD PTR _display_height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _display_width$[ebp]
	push	ecx
	push	0
	push	0
	call	DWORD PTR __imp__glViewport@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 207  :     //glEnable(GL_BLEND);
; 208  :     //glBlendEquation(GL_FUNC_ADD);
; 209  :     //glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
; 210  :    // glDisable(GL_CULL_FACE);
; 211  :     glDisable(GL_DEPTH_TEST);

	mov	esi, esp
	push	2929					; 00000b71H
	call	DWORD PTR __imp__glDisable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 212  :     glEnable(GL_SCISSOR_TEST);

	mov	esi, esp
	push	3089					; 00000c11H
	call	DWORD PTR __imp__glEnable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 213  :     glActiveTexture(GL_TEXTURE0);

	mov	esi, esp
	push	33984					; 000084c0H
	call	DWORD PTR _GLeeFuncPtr_glActiveTexture
	cmp	esi, esp
	call	__RTC_CheckEsp

; 214  : 
; 215  :     /* setup program */
; 216  :     glUseProgram(dev->prog);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glUseProgram
	cmp	esi, esp
	call	__RTC_CheckEsp

; 217  :     glUniform1i(dev->uniform_tex, 0);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glUniform1i
	cmp	esi, esp
	call	__RTC_CheckEsp

; 218  :     glUniformMatrix4fv(dev->uniform_proj, 1, GL_FALSE, &ortho[0][0]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _ortho$[ebp+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	add	edx, ecx
	mov	esi, esp
	push	edx
	push	0
	push	1
	mov	edx, DWORD PTR _dev$[ebp]
	mov	eax, DWORD PTR [edx+112]
	push	eax
	call	DWORD PTR _GLeeFuncPtr_glUniformMatrix4fv
	cmp	esi, esp
	call	__RTC_CheckEsp

; 219  :     {
; 220  :         /* convert from command queue into draw list and draw to screen */
; 221  :         const struct nk_draw_command *cmd;
; 222  :         void *vertices, *elements;
; 223  :         const nk_draw_index *offset = NULL;

	mov	DWORD PTR _offset$4[ebp], 0

; 224  : 
; 225  :         /* allocate vertex and element buffer */
; 226  :         glBindVertexArray(dev->vao);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	call	DWORD PTR _GLeeFuncPtr_glBindVertexArray
	cmp	esi, esp
	call	__RTC_CheckEsp

; 227  :         glBindBuffer(GL_ARRAY_BUFFER, dev->vbo);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	push	34962					; 00008892H
	call	DWORD PTR _GLeeFuncPtr_glBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 228  :         glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, dev->ebo);

	mov	esi, esp
	mov	eax, DWORD PTR _dev$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	push	34963					; 00008893H
	call	DWORD PTR _GLeeFuncPtr_glBindBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 229  : 
; 230  :         glBufferData(GL_ARRAY_BUFFER, max_vertex_buffer, NULL, GL_STREAM_DRAW);

	mov	esi, esp
	push	35040					; 000088e0H
	push	0
	mov	eax, DWORD PTR _max_vertex_buffer$[ebp]
	push	eax
	push	34962					; 00008892H
	call	DWORD PTR _GLeeFuncPtr_glBufferData
	cmp	esi, esp
	call	__RTC_CheckEsp

; 231  :         glBufferData(GL_ELEMENT_ARRAY_BUFFER, max_element_buffer, NULL, GL_STREAM_DRAW);

	mov	esi, esp
	push	35040					; 000088e0H
	push	0
	mov	eax, DWORD PTR _max_element_buffer$[ebp]
	push	eax
	push	34963					; 00008893H
	call	DWORD PTR _GLeeFuncPtr_glBufferData
	cmp	esi, esp
	call	__RTC_CheckEsp

; 232  : 
; 233  :         /* load vertices/elements directly into vertex/element buffer */
; 234  :         vertices = glMapBuffer(GL_ARRAY_BUFFER, GL_WRITE_ONLY);

	mov	esi, esp
	push	35001					; 000088b9H
	push	34962					; 00008892H
	call	DWORD PTR _GLeeFuncPtr_glMapBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _vertices$6[ebp], eax

; 235  :         elements = glMapBuffer(GL_ELEMENT_ARRAY_BUFFER, GL_WRITE_ONLY);

	mov	esi, esp
	push	35001					; 000088b9H
	push	34963					; 00008893H
	call	DWORD PTR _GLeeFuncPtr_glMapBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _elements$5[ebp], eax

; 236  :         {
; 237  :             /* fill convert configuration */
; 238  :             struct nk_convert_config config;
; 239  :             static const struct nk_draw_vertex_layout_element vertex_layout[] = {
; 240  :                 {NK_VERTEX_POSITION, NK_FORMAT_FLOAT, NK_OFFSETOF(struct nk_sdl_vertex, position)},
; 241  :                 {NK_VERTEX_TEXCOORD, NK_FORMAT_FLOAT, NK_OFFSETOF(struct nk_sdl_vertex, uv)},
; 242  :                 {NK_VERTEX_COLOR, NK_FORMAT_R8G8B8A8, NK_OFFSETOF(struct nk_sdl_vertex, col)},
; 243  :                 {NK_VERTEX_LAYOUT_END}
; 244  :             };
; 245  :             NK_MEMSET(&config, 0, sizeof(config));

	push	48					; 00000030H
	push	0
	lea	eax, DWORD PTR _config$3[ebp]
	push	eax
	call	_nk_memset
	add	esp, 12					; 0000000cH

; 246  :             config.vertex_layout = vertex_layout;

	mov	DWORD PTR _config$3[ebp+36], OFFSET ?vertex_layout@?3??nk_sdl_render@@9@9

; 247  :             config.vertex_size = sizeof(struct nk_sdl_vertex);

	mov	DWORD PTR _config$3[ebp+40], 20		; 00000014H

; 248  :             config.vertex_alignment = NK_ALIGNOF(struct nk_sdl_vertex);

	mov	DWORD PTR _config$3[ebp+44], 4

; 249  :             config.null = dev->null;

	mov	eax, DWORD PTR _dev$[ebp]
	add	eax, 60					; 0000003cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _config$3[ebp+24], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _config$3[ebp+28], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _config$3[ebp+32], eax

; 250  :             config.circle_segment_count = 22;

	mov	DWORD PTR _config$3[ebp+12], 22		; 00000016H

; 251  :             config.curve_segment_count = 22;

	mov	DWORD PTR _config$3[ebp+20], 22		; 00000016H

; 252  :             config.arc_segment_count = 22;

	mov	DWORD PTR _config$3[ebp+16], 22		; 00000016H

; 253  :             config.global_alpha = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _config$3[ebp], xmm0

; 254  :             config.shape_AA = AA;

	mov	eax, DWORD PTR _AA$[ebp]
	mov	DWORD PTR _config$3[ebp+8], eax

; 255  :             config.line_AA = AA;

	mov	eax, DWORD PTR _AA$[ebp]
	mov	DWORD PTR _config$3[ebp+4], eax

; 256  : 
; 257  :             /* setup buffers to load vertices and elements */
; 258  :             {struct nk_buffer vbuf, ebuf;
; 259  :             nk_buffer_init_fixed(&vbuf, vertices, (nk_size)max_vertex_buffer);

	mov	eax, DWORD PTR _max_vertex_buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vertices$6[ebp]
	push	ecx
	lea	edx, DWORD PTR _vbuf$2[ebp]
	push	edx
	call	_nk_buffer_init_fixed
	add	esp, 12					; 0000000cH

; 260  :             nk_buffer_init_fixed(&ebuf, elements, (nk_size)max_element_buffer);

	mov	eax, DWORD PTR _max_element_buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _elements$5[ebp]
	push	ecx
	lea	edx, DWORD PTR _ebuf$1[ebp]
	push	edx
	call	_nk_buffer_init_fixed
	add	esp, 12					; 0000000cH

; 261  :             nk_convert(&sdl.ctx, &dev->cmds, &vbuf, &ebuf, &config);}

	lea	eax, DWORD PTR _config$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _ebuf$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _vbuf$2[ebp]
	push	edx
	mov	eax, DWORD PTR _dev$[ebp]
	push	eax
	push	OFFSET _sdl+124
	call	_nk_convert
	add	esp, 20					; 00000014H

; 262  :         }
; 263  :         glUnmapBuffer(GL_ARRAY_BUFFER);

	mov	esi, esp
	push	34962					; 00008892H
	call	DWORD PTR _GLeeFuncPtr_glUnmapBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 264  :         glUnmapBuffer(GL_ELEMENT_ARRAY_BUFFER);

	mov	esi, esp
	push	34963					; 00008893H
	call	DWORD PTR _GLeeFuncPtr_glUnmapBuffer
	cmp	esi, esp
	call	__RTC_CheckEsp

; 265  : 
; 266  :         /* iterate over and execute each draw command */
; 267  :         nk_draw_foreach(cmd, &sdl.ctx, &dev->cmds) {

	mov	eax, DWORD PTR _dev$[ebp]
	push	eax
	push	OFFSET _sdl+124
	call	_nk__draw_begin
	add	esp, 8
	mov	DWORD PTR _cmd$7[ebp], eax
	jmp	SHORT $LN4@nk_sdl_ren
$LN3@nk_sdl_ren:
	push	OFFSET _sdl+124
	mov	eax, DWORD PTR _dev$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmd$7[ebp]
	push	ecx
	call	_nk__draw_next
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmd$7[ebp], eax
$LN4@nk_sdl_ren:
	cmp	DWORD PTR _cmd$7[ebp], 0
	je	$LN2@nk_sdl_ren

; 268  :             if (!cmd->elem_count) continue;

	mov	eax, DWORD PTR _cmd$7[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@nk_sdl_ren
	jmp	SHORT $LN3@nk_sdl_ren
$LN1@nk_sdl_ren:

; 269  :             glBindTexture(GL_TEXTURE_2D, (GLuint)cmd->texture.id);

	mov	esi, esp
	mov	eax, DWORD PTR _cmd$7[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glBindTexture@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 270  :             glScissor((GLint)(cmd->clip_rect.x * scale.x),
; 271  :                 (GLint)((height - (GLint)(cmd->clip_rect.y + cmd->clip_rect.h)) * scale.y),
; 272  :                 (GLint)(cmd->clip_rect.w * scale.x),
; 273  :                 (GLint)(cmd->clip_rect.h * scale.y));

	mov	eax, DWORD PTR _cmd$7[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _scale$[ebp+4]
	cvttss2si ecx, xmm0
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _cmd$7[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	cvttss2si eax, xmm0
	push	eax
	mov	ecx, DWORD PTR _cmd$7[ebp]
	mov	edx, DWORD PTR _cmd$7[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, DWORD PTR [edx+16]
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, eax
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR _scale$[ebp+4]
	cvttss2si edx, xmm0
	push	edx
	mov	eax, DWORD PTR _cmd$7[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	cvttss2si ecx, xmm0
	push	ecx
	call	DWORD PTR __imp__glScissor@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 274  :             glDrawElements(GL_TRIANGLES, (GLsizei)cmd->elem_count, GL_UNSIGNED_SHORT, offset);

	mov	esi, esp
	mov	eax, DWORD PTR _offset$4[ebp]
	push	eax
	push	5123					; 00001403H
	mov	ecx, DWORD PTR _cmd$7[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	4
	call	DWORD PTR __imp__glDrawElements@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 275  :             offset += cmd->elem_count;

	mov	eax, DWORD PTR _cmd$7[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _offset$4[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _offset$4[ebp], eax

; 276  :         }

	jmp	$LN3@nk_sdl_ren
$LN2@nk_sdl_ren:

; 277  :         nk_clear(&sdl.ctx);

	push	OFFSET _sdl+124
	call	_nk_clear
	add	esp, 4

; 278  :     }
; 279  : 
; 280  :     //glUseProgram(0);
; 281  :     //glBindBuffer(GL_ARRAY_BUFFER, 0);
; 282  :     //glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
; 283  :     //glBindVertexArray(0);
; 284  :    // glDisable(GL_BLEND);
; 285  :     glDisable(GL_SCISSOR_TEST);

	mov	esi, esp
	push	3089					; 00000c11H
	call	DWORD PTR __imp__glDisable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 286  : 	glEnable(GL_DEPTH_TEST);

	mov	esi, esp
	push	2929					; 00000b71H
	call	DWORD PTR __imp__glEnable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 287  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@nk_sdl_ren
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 584				; 00000248H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN17@nk_sdl_ren:
	DD	9
	DD	$LN16@nk_sdl_ren
$LN16@nk_sdl_ren:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@nk_sdl_ren
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN8@nk_sdl_ren
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN9@nk_sdl_ren
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN10@nk_sdl_ren
	DD	-76					; ffffffb4H
	DD	8
	DD	$LN11@nk_sdl_ren
	DD	-148					; ffffff6cH
	DD	64					; 00000040H
	DD	$LN12@nk_sdl_ren
	DD	-252					; ffffff04H
	DD	48					; 00000030H
	DD	$LN13@nk_sdl_ren
	DD	-320					; fffffec0H
	DD	60					; 0000003cH
	DD	$LN14@nk_sdl_ren
	DD	-388					; fffffe7cH
	DD	60					; 0000003cH
	DD	$LN15@nk_sdl_ren
$LN15@nk_sdl_ren:
	DB	101					; 00000065H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN14@nk_sdl_ren:
	DB	118					; 00000076H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN13@nk_sdl_ren:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	0
$LN12@nk_sdl_ren:
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	0
$LN11@nk_sdl_ren:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN10@nk_sdl_ren:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	0
$LN9@nk_sdl_ren:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN8@nk_sdl_ren:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	0
$LN7@nk_sdl_ren:
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
_nk_sdl_render ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear_sdl_gl3.h
;	COMDAT _nk_sdl_handle_event
_TEXT	SEGMENT
tv255 = -316						; size = 4
tv215 = -316						; size = 4
tv205 = -316						; size = 4
tv195 = -316						; size = 4
tv185 = -316						; size = 4
tv175 = -316						; size = 4
tv165 = -316						; size = 4
tv155 = -316						; size = 4
tv70 = -316						; size = 4
_glyph$1 = -116						; size = 4
_y$2 = -104						; size = 4
_x$3 = -92						; size = 4
_y$4 = -80						; size = 4
_x$5 = -68						; size = 4
_down$6 = -56						; size = 4
_sym$7 = -44						; size = 4
_state$8 = -32						; size = 4
_down$9 = -20						; size = 4
_ctx$ = -8						; size = 4
_evt$ = 8						; size = 4
_nk_sdl_handle_event PROC				; COMDAT

; 345  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 346  :     struct nk_context *ctx = &sdl.ctx;

	mov	DWORD PTR _ctx$[ebp], OFFSET _sdl+124

; 347  :     if (evt->type == SDL_KEYUP || evt->type == SDL_KEYDOWN) {

	mov	eax, DWORD PTR _evt$[ebp]
	cmp	DWORD PTR [eax], 769			; 00000301H
	je	SHORT $LN63@nk_sdl_han
	mov	eax, DWORD PTR _evt$[ebp]
	cmp	DWORD PTR [eax], 768			; 00000300H
	jne	$LN64@nk_sdl_han
$LN63@nk_sdl_han:

; 348  :         /* key events */
; 349  :         int down = evt->type == SDL_KEYDOWN;

	mov	eax, DWORD PTR _evt$[ebp]
	cmp	DWORD PTR [eax], 768			; 00000300H
	jne	SHORT $LN67@nk_sdl_han
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN68@nk_sdl_han
$LN67@nk_sdl_han:
	mov	DWORD PTR tv70[ebp], 0
$LN68@nk_sdl_han:
	mov	ecx, DWORD PTR tv70[ebp]
	mov	DWORD PTR _down$9[ebp], ecx

; 350  :         const Uint8* state = SDL_GetKeyboardState(0);

	push	0
	call	_SDL_GetKeyboardState
	add	esp, 4
	mov	DWORD PTR _state$8[ebp], eax

; 351  :         SDL_Keycode sym = evt->key.keysym.sym;

	mov	eax, DWORD PTR _evt$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _sym$7[ebp], ecx

; 352  :         if (sym == SDLK_RSHIFT || sym == SDLK_LSHIFT)

	cmp	DWORD PTR _sym$7[ebp], 1073742053	; 400000e5H
	je	SHORT $LN61@nk_sdl_han
	cmp	DWORD PTR _sym$7[ebp], 1073742049	; 400000e1H
	jne	SHORT $LN62@nk_sdl_han
$LN61@nk_sdl_han:

; 353  :             nk_input_key(ctx, NK_KEY_SHIFT, down);

	mov	eax, DWORD PTR _down$9[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	$LN18@nk_sdl_han
$LN62@nk_sdl_han:

; 354  :         else if (sym == SDLK_DELETE)

	cmp	DWORD PTR _sym$7[ebp], 127		; 0000007fH
	jne	SHORT $LN59@nk_sdl_han

; 355  :             nk_input_key(ctx, NK_KEY_DEL, down);

	mov	eax, DWORD PTR _down$9[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	$LN18@nk_sdl_han
$LN59@nk_sdl_han:

; 356  :         else if (sym == SDLK_RETURN)

	cmp	DWORD PTR _sym$7[ebp], 13		; 0000000dH
	jne	SHORT $LN57@nk_sdl_han

; 357  :             nk_input_key(ctx, NK_KEY_ENTER, down);

	mov	eax, DWORD PTR _down$9[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	$LN18@nk_sdl_han
$LN57@nk_sdl_han:

; 358  :         else if (sym == SDLK_TAB)

	cmp	DWORD PTR _sym$7[ebp], 9
	jne	SHORT $LN55@nk_sdl_han

; 359  :             nk_input_key(ctx, NK_KEY_TAB, down);

	mov	eax, DWORD PTR _down$9[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	$LN18@nk_sdl_han
$LN55@nk_sdl_han:

; 360  :         else if (sym == SDLK_BACKSPACE)

	cmp	DWORD PTR _sym$7[ebp], 8
	jne	SHORT $LN53@nk_sdl_han

; 361  :             nk_input_key(ctx, NK_KEY_BACKSPACE, down);

	mov	eax, DWORD PTR _down$9[ebp]
	push	eax
	push	6
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	$LN18@nk_sdl_han
$LN53@nk_sdl_han:

; 362  :         else if (sym == SDLK_HOME) {

	cmp	DWORD PTR _sym$7[ebp], 1073741898	; 4000004aH
	jne	SHORT $LN51@nk_sdl_han

; 363  :             nk_input_key(ctx, NK_KEY_TEXT_START, down);

	mov	eax, DWORD PTR _down$9[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_key
	add	esp, 12					; 0000000cH

; 364  :             nk_input_key(ctx, NK_KEY_SCROLL_START, down);

	mov	eax, DWORD PTR _down$9[ebp]
	push	eax
	push	26					; 0000001aH
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	$LN18@nk_sdl_han
$LN51@nk_sdl_han:

; 365  :         } else if (sym == SDLK_END) {

	cmp	DWORD PTR _sym$7[ebp], 1073741901	; 4000004dH
	jne	SHORT $LN49@nk_sdl_han

; 366  :             nk_input_key(ctx, NK_KEY_TEXT_END, down);

	mov	eax, DWORD PTR _down$9[ebp]
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_key
	add	esp, 12					; 0000000cH

; 367  :             nk_input_key(ctx, NK_KEY_SCROLL_END, down);

	mov	eax, DWORD PTR _down$9[ebp]
	push	eax
	push	27					; 0000001bH
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	$LN18@nk_sdl_han
$LN49@nk_sdl_han:

; 368  :         } else if (sym == SDLK_PAGEDOWN) {

	cmp	DWORD PTR _sym$7[ebp], 1073741902	; 4000004eH
	jne	SHORT $LN47@nk_sdl_han

; 369  :             nk_input_key(ctx, NK_KEY_SCROLL_DOWN, down);

	mov	eax, DWORD PTR _down$9[ebp]
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	$LN18@nk_sdl_han
$LN47@nk_sdl_han:

; 370  :         } else if (sym == SDLK_PAGEUP) {

	cmp	DWORD PTR _sym$7[ebp], 1073741899	; 4000004bH
	jne	SHORT $LN45@nk_sdl_han

; 371  :             nk_input_key(ctx, NK_KEY_SCROLL_UP, down);

	mov	eax, DWORD PTR _down$9[ebp]
	push	eax
	push	29					; 0000001dH
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	$LN18@nk_sdl_han
$LN45@nk_sdl_han:

; 372  :         } else if (sym == SDLK_z)

	cmp	DWORD PTR _sym$7[ebp], 122		; 0000007aH
	jne	SHORT $LN43@nk_sdl_han

; 373  :             nk_input_key(ctx, NK_KEY_TEXT_UNDO, down && state[SDL_SCANCODE_LCTRL]);

	cmp	DWORD PTR _down$9[ebp], 0
	je	SHORT $LN69@nk_sdl_han
	mov	eax, 1
	imul	ecx, eax, 224
	mov	edx, DWORD PTR _state$8[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN69@nk_sdl_han
	mov	DWORD PTR tv155[ebp], 1
	jmp	SHORT $LN70@nk_sdl_han
$LN69@nk_sdl_han:
	mov	DWORD PTR tv155[ebp], 0
$LN70@nk_sdl_han:
	mov	ecx, DWORD PTR tv155[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	$LN18@nk_sdl_han
$LN43@nk_sdl_han:

; 374  :         else if (sym == SDLK_r)

	cmp	DWORD PTR _sym$7[ebp], 114		; 00000072H
	jne	SHORT $LN41@nk_sdl_han

; 375  :             nk_input_key(ctx, NK_KEY_TEXT_REDO, down && state[SDL_SCANCODE_LCTRL]);

	cmp	DWORD PTR _down$9[ebp], 0
	je	SHORT $LN71@nk_sdl_han
	mov	eax, 1
	imul	ecx, eax, 224
	mov	edx, DWORD PTR _state$8[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN71@nk_sdl_han
	mov	DWORD PTR tv165[ebp], 1
	jmp	SHORT $LN72@nk_sdl_han
$LN71@nk_sdl_han:
	mov	DWORD PTR tv165[ebp], 0
$LN72@nk_sdl_han:
	mov	ecx, DWORD PTR tv165[ebp]
	push	ecx
	push	22					; 00000016H
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	$LN18@nk_sdl_han
$LN41@nk_sdl_han:

; 376  :         else if (sym == SDLK_c)

	cmp	DWORD PTR _sym$7[ebp], 99		; 00000063H
	jne	SHORT $LN39@nk_sdl_han

; 377  :             nk_input_key(ctx, NK_KEY_COPY, down && state[SDL_SCANCODE_LCTRL]);

	cmp	DWORD PTR _down$9[ebp], 0
	je	SHORT $LN73@nk_sdl_han
	mov	eax, 1
	imul	ecx, eax, 224
	mov	edx, DWORD PTR _state$8[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN73@nk_sdl_han
	mov	DWORD PTR tv175[ebp], 1
	jmp	SHORT $LN74@nk_sdl_han
$LN73@nk_sdl_han:
	mov	DWORD PTR tv175[ebp], 0
$LN74@nk_sdl_han:
	mov	ecx, DWORD PTR tv175[ebp]
	push	ecx
	push	7
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	$LN18@nk_sdl_han
$LN39@nk_sdl_han:

; 378  :         else if (sym == SDLK_v)

	cmp	DWORD PTR _sym$7[ebp], 118		; 00000076H
	jne	SHORT $LN37@nk_sdl_han

; 379  :             nk_input_key(ctx, NK_KEY_PASTE, down && state[SDL_SCANCODE_LCTRL]);

	cmp	DWORD PTR _down$9[ebp], 0
	je	SHORT $LN75@nk_sdl_han
	mov	eax, 1
	imul	ecx, eax, 224
	mov	edx, DWORD PTR _state$8[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN75@nk_sdl_han
	mov	DWORD PTR tv185[ebp], 1
	jmp	SHORT $LN76@nk_sdl_han
$LN75@nk_sdl_han:
	mov	DWORD PTR tv185[ebp], 0
$LN76@nk_sdl_han:
	mov	ecx, DWORD PTR tv185[ebp]
	push	ecx
	push	9
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	$LN18@nk_sdl_han
$LN37@nk_sdl_han:

; 380  :         else if (sym == SDLK_x)

	cmp	DWORD PTR _sym$7[ebp], 120		; 00000078H
	jne	SHORT $LN35@nk_sdl_han

; 381  :             nk_input_key(ctx, NK_KEY_CUT, down && state[SDL_SCANCODE_LCTRL]);

	cmp	DWORD PTR _down$9[ebp], 0
	je	SHORT $LN77@nk_sdl_han
	mov	eax, 1
	imul	ecx, eax, 224
	mov	edx, DWORD PTR _state$8[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN77@nk_sdl_han
	mov	DWORD PTR tv195[ebp], 1
	jmp	SHORT $LN78@nk_sdl_han
$LN77@nk_sdl_han:
	mov	DWORD PTR tv195[ebp], 0
$LN78@nk_sdl_han:
	mov	ecx, DWORD PTR tv195[ebp]
	push	ecx
	push	8
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	$LN18@nk_sdl_han
$LN35@nk_sdl_han:

; 382  :         else if (sym == SDLK_b)

	cmp	DWORD PTR _sym$7[ebp], 98		; 00000062H
	jne	SHORT $LN33@nk_sdl_han

; 383  :             nk_input_key(ctx, NK_KEY_TEXT_LINE_START, down && state[SDL_SCANCODE_LCTRL]);

	cmp	DWORD PTR _down$9[ebp], 0
	je	SHORT $LN79@nk_sdl_han
	mov	eax, 1
	imul	ecx, eax, 224
	mov	edx, DWORD PTR _state$8[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN79@nk_sdl_han
	mov	DWORD PTR tv205[ebp], 1
	jmp	SHORT $LN80@nk_sdl_han
$LN79@nk_sdl_han:
	mov	DWORD PTR tv205[ebp], 0
$LN80@nk_sdl_han:
	mov	ecx, DWORD PTR tv205[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	$LN18@nk_sdl_han
$LN33@nk_sdl_han:

; 384  :         else if (sym == SDLK_e)

	cmp	DWORD PTR _sym$7[ebp], 101		; 00000065H
	jne	SHORT $LN31@nk_sdl_han

; 385  :             nk_input_key(ctx, NK_KEY_TEXT_LINE_END, down && state[SDL_SCANCODE_LCTRL]);

	cmp	DWORD PTR _down$9[ebp], 0
	je	SHORT $LN81@nk_sdl_han
	mov	eax, 1
	imul	ecx, eax, 224
	mov	edx, DWORD PTR _state$8[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN81@nk_sdl_han
	mov	DWORD PTR tv215[ebp], 1
	jmp	SHORT $LN82@nk_sdl_han
$LN81@nk_sdl_han:
	mov	DWORD PTR tv215[ebp], 0
$LN82@nk_sdl_han:
	mov	ecx, DWORD PTR tv215[ebp]
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	$LN18@nk_sdl_han
$LN31@nk_sdl_han:

; 386  :         else if (sym == SDLK_UP)

	cmp	DWORD PTR _sym$7[ebp], 1073741906	; 40000052H
	jne	SHORT $LN29@nk_sdl_han

; 387  :             nk_input_key(ctx, NK_KEY_UP, down);

	mov	eax, DWORD PTR _down$9[ebp]
	push	eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	$LN18@nk_sdl_han
$LN29@nk_sdl_han:

; 388  :         else if (sym == SDLK_DOWN)

	cmp	DWORD PTR _sym$7[ebp], 1073741905	; 40000051H
	jne	SHORT $LN27@nk_sdl_han

; 389  :             nk_input_key(ctx, NK_KEY_DOWN, down);

	mov	eax, DWORD PTR _down$9[ebp]
	push	eax
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	$LN18@nk_sdl_han
$LN27@nk_sdl_han:

; 390  :         else if (sym == SDLK_LEFT) {

	cmp	DWORD PTR _sym$7[ebp], 1073741904	; 40000050H
	jne	SHORT $LN25@nk_sdl_han

; 391  :             if (state[SDL_SCANCODE_LCTRL])

	mov	eax, 1
	imul	ecx, eax, 224
	mov	edx, DWORD PTR _state$8[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN24@nk_sdl_han

; 392  :                 nk_input_key(ctx, NK_KEY_TEXT_WORD_LEFT, down);

	mov	eax, DWORD PTR _down$9[ebp]
	push	eax
	push	24					; 00000018H
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN23@nk_sdl_han
$LN24@nk_sdl_han:

; 393  :             else nk_input_key(ctx, NK_KEY_LEFT, down);

	mov	eax, DWORD PTR _down$9[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
$LN23@nk_sdl_han:

; 394  :         } else if (sym == SDLK_RIGHT) {

	jmp	SHORT $LN18@nk_sdl_han
$LN25@nk_sdl_han:
	cmp	DWORD PTR _sym$7[ebp], 1073741903	; 4000004fH
	jne	SHORT $LN21@nk_sdl_han

; 395  :             if (state[SDL_SCANCODE_LCTRL])

	mov	eax, 1
	imul	ecx, eax, 224
	mov	edx, DWORD PTR _state$8[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN20@nk_sdl_han

; 396  :                 nk_input_key(ctx, NK_KEY_TEXT_WORD_RIGHT, down);

	mov	eax, DWORD PTR _down$9[ebp]
	push	eax
	push	25					; 00000019H
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN19@nk_sdl_han
$LN20@nk_sdl_han:

; 397  :             else nk_input_key(ctx, NK_KEY_RIGHT, down);

	mov	eax, DWORD PTR _down$9[ebp]
	push	eax
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_key
	add	esp, 12					; 0000000cH
$LN19@nk_sdl_han:

; 398  :         } else return 0;

	jmp	SHORT $LN18@nk_sdl_han
$LN21@nk_sdl_han:
	xor	eax, eax
	jmp	$LN65@nk_sdl_han
$LN18@nk_sdl_han:

; 399  :         return 1;

	mov	eax, 1
	jmp	$LN65@nk_sdl_han
	jmp	$LN1@nk_sdl_han
$LN64@nk_sdl_han:

; 400  :     } else if (evt->type == SDL_MOUSEBUTTONDOWN || evt->type == SDL_MOUSEBUTTONUP) {

	mov	eax, DWORD PTR _evt$[ebp]
	cmp	DWORD PTR [eax], 1025			; 00000401H
	je	SHORT $LN15@nk_sdl_han
	mov	eax, DWORD PTR _evt$[ebp]
	cmp	DWORD PTR [eax], 1026			; 00000402H
	jne	$LN16@nk_sdl_han
$LN15@nk_sdl_han:

; 401  :         /* mouse button */
; 402  :         int down = evt->type == SDL_MOUSEBUTTONDOWN;

	mov	eax, DWORD PTR _evt$[ebp]
	cmp	DWORD PTR [eax], 1025			; 00000401H
	jne	SHORT $LN83@nk_sdl_han
	mov	DWORD PTR tv255[ebp], 1
	jmp	SHORT $LN84@nk_sdl_han
$LN83@nk_sdl_han:
	mov	DWORD PTR tv255[ebp], 0
$LN84@nk_sdl_han:
	mov	ecx, DWORD PTR tv255[ebp]
	mov	DWORD PTR _down$6[ebp], ecx

; 403  :         const int x = evt->button.x, y = evt->button.y;

	mov	eax, DWORD PTR _evt$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _x$5[ebp], ecx
	mov	eax, DWORD PTR _evt$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _y$4[ebp], ecx

; 404  :         if (evt->button.button == SDL_BUTTON_LEFT) {

	mov	eax, DWORD PTR _evt$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	cmp	ecx, 1
	jne	SHORT $LN14@nk_sdl_han

; 405  :             if (evt->button.clicks > 1)

	mov	eax, DWORD PTR _evt$[ebp]
	movzx	ecx, BYTE PTR [eax+18]
	cmp	ecx, 1
	jle	SHORT $LN13@nk_sdl_han

; 406  :                 nk_input_button(ctx, NK_BUTTON_DOUBLE, x, y, down);

	mov	eax, DWORD PTR _down$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$5[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_input_button
	add	esp, 20					; 00000014H
$LN13@nk_sdl_han:

; 407  :             nk_input_button(ctx, NK_BUTTON_LEFT, x, y, down);

	mov	eax, DWORD PTR _down$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$5[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_input_button
	add	esp, 20					; 00000014H
	jmp	SHORT $LN9@nk_sdl_han
$LN14@nk_sdl_han:

; 408  :         } else if (evt->button.button == SDL_BUTTON_MIDDLE)

	mov	eax, DWORD PTR _evt$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	cmp	ecx, 2
	jne	SHORT $LN11@nk_sdl_han

; 409  :             nk_input_button(ctx, NK_BUTTON_MIDDLE, x, y, down);

	mov	eax, DWORD PTR _down$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$5[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_input_button
	add	esp, 20					; 00000014H
	jmp	SHORT $LN9@nk_sdl_han
$LN11@nk_sdl_han:

; 410  :         else if (evt->button.button == SDL_BUTTON_RIGHT)

	mov	eax, DWORD PTR _evt$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	cmp	ecx, 3
	jne	SHORT $LN9@nk_sdl_han

; 411  :             nk_input_button(ctx, NK_BUTTON_RIGHT, x, y, down);

	mov	eax, DWORD PTR _down$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$5[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_input_button
	add	esp, 20					; 00000014H
$LN9@nk_sdl_han:

; 412  :         return 1;

	mov	eax, 1
	jmp	$LN65@nk_sdl_han
	jmp	$LN1@nk_sdl_han
$LN16@nk_sdl_han:

; 413  :     } else if (evt->type == SDL_MOUSEMOTION) {

	mov	eax, DWORD PTR _evt$[ebp]
	cmp	DWORD PTR [eax], 1024			; 00000400H
	jne	SHORT $LN7@nk_sdl_han

; 414  :         /* mouse motion */
; 415  :         if (ctx->input.mouse.grabbed) {

	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, BYTE PTR [eax+357]
	test	ecx, ecx
	je	SHORT $LN6@nk_sdl_han

; 416  :             int x = (int)ctx->input.mouse.prev.x, y = (int)ctx->input.mouse.prev.y;

	mov	eax, DWORD PTR _ctx$[ebp]
	cvttss2si ecx, DWORD PTR [eax+332]
	mov	DWORD PTR _x$3[ebp], ecx
	mov	eax, DWORD PTR _ctx$[ebp]
	cvttss2si ecx, DWORD PTR [eax+336]
	mov	DWORD PTR _y$2[ebp], ecx

; 417  :             nk_input_motion(ctx, x + evt->motion.xrel, y + evt->motion.yrel);

	mov	eax, DWORD PTR _evt$[ebp]
	mov	ecx, DWORD PTR _y$2[ebp]
	add	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _evt$[ebp]
	mov	eax, DWORD PTR _x$3[ebp]
	add	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_motion
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN5@nk_sdl_han
$LN6@nk_sdl_han:

; 418  :         } else nk_input_motion(ctx, evt->motion.x, evt->motion.y);

	mov	eax, DWORD PTR _evt$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _evt$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_motion
	add	esp, 12					; 0000000cH
$LN5@nk_sdl_han:

; 419  :         return 1;

	mov	eax, 1
	jmp	$LN65@nk_sdl_han
	jmp	SHORT $LN1@nk_sdl_han
$LN7@nk_sdl_han:

; 420  :     } else if (evt->type == SDL_TEXTINPUT) {

	mov	eax, DWORD PTR _evt$[ebp]
	cmp	DWORD PTR [eax], 771			; 00000303H
	jne	SHORT $LN3@nk_sdl_han

; 421  :         /* text input */
; 422  :         nk_glyph glyph;
; 423  :         memcpy(glyph, evt->text.text, NK_UTF_SIZE);

	push	4
	mov	eax, DWORD PTR _evt$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _glyph$1[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 424  :         nk_input_glyph(ctx, glyph);

	lea	eax, DWORD PTR _glyph$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_glyph
	add	esp, 8

; 425  :         return 1;

	mov	eax, 1
	jmp	SHORT $LN65@nk_sdl_han
	jmp	SHORT $LN1@nk_sdl_han
$LN3@nk_sdl_han:

; 426  :     } else if (evt->type == SDL_MOUSEWHEEL) {

	mov	eax, DWORD PTR _evt$[ebp]
	cmp	DWORD PTR [eax], 1027			; 00000403H
	jne	SHORT $LN1@nk_sdl_han

; 427  :         /* mouse wheel */
; 428  :         nk_input_scroll(ctx,nk_vec2((float)evt->wheel.x,(float)evt->wheel.y));

	mov	eax, DWORD PTR _evt$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+20]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _evt$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_input_scroll
	add	esp, 12					; 0000000cH

; 429  :         return 1;

	mov	eax, 1
	jmp	SHORT $LN65@nk_sdl_han
$LN1@nk_sdl_han:

; 430  :     }
; 431  :     return 0;

	xor	eax, eax
$LN65@nk_sdl_han:

; 432  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN87@nk_sdl_han
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN87@nk_sdl_han:
	DD	1
	DD	$LN86@nk_sdl_han
$LN86@nk_sdl_han:
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN85@nk_sdl_han
$LN85@nk_sdl_han:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	0
_nk_sdl_handle_event ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear_sdl_gl3.h
;	COMDAT _nk_sdl_font_stash_end
_TEXT	SEGMENT
_h$ = -32						; size = 4
_w$ = -20						; size = 4
_image$ = -8						; size = 4
_nk_sdl_font_stash_end PROC				; COMDAT

; 333  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 334  :     const void *image; int w, h;
; 335  :     image = nk_font_atlas_bake(&sdl.atlas, &w, &h, NK_FONT_ATLAS_RGBA32);

	push	1
	lea	eax, DWORD PTR _h$[ebp]
	push	eax
	lea	ecx, DWORD PTR _w$[ebp]
	push	ecx
	push	OFFSET _sdl+13080
	call	_nk_font_atlas_bake
	add	esp, 16					; 00000010H
	mov	DWORD PTR _image$[ebp], eax

; 336  :     nk_sdl_device_upload_atlas(image, w, h);

	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _image$[ebp]
	push	edx
	call	_nk_sdl_device_upload_atlas
	add	esp, 12					; 0000000cH

; 337  :     nk_font_atlas_end(&sdl.atlas, nk_handle_id((int)sdl.ogl.font_tex), &sdl.ogl.null);

	push	OFFSET _sdl+64
	mov	eax, DWORD PTR _sdl+120
	push	eax
	call	_nk_handle_id
	add	esp, 4
	push	eax
	push	OFFSET _sdl+13080
	call	_nk_font_atlas_end
	add	esp, 12					; 0000000cH

; 338  :     if (sdl.atlas.default_font)

	cmp	DWORD PTR _sdl+13356, 0
	je	SHORT $LN2@nk_sdl_fon

; 339  :         nk_style_set_font(&sdl.ctx, &sdl.atlas.default_font->handle);

	mov	eax, DWORD PTR _sdl+13356
	add	eax, 4
	push	eax
	push	OFFSET _sdl+124
	call	_nk_style_set_font
	add	esp, 8
$LN2@nk_sdl_fon:

; 340  : 
; 341  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@nk_sdl_fon
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@nk_sdl_fon:
	DD	2
	DD	$LN6@nk_sdl_fon
$LN6@nk_sdl_fon:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@nk_sdl_fon
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@nk_sdl_fon
$LN5@nk_sdl_fon:
	DB	104					; 00000068H
	DB	0
$LN4@nk_sdl_fon:
	DB	119					; 00000077H
	DB	0
_nk_sdl_font_stash_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear_sdl_gl3.h
;	COMDAT _nk_sdl_font_stash_begin
_TEXT	SEGMENT
_atlas$ = 8						; size = 4
_nk_sdl_font_stash_begin PROC				; COMDAT

; 325  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 326  :     nk_font_atlas_init_default(&sdl.atlas);

	push	OFFSET _sdl+13080
	call	_nk_font_atlas_init_default
	add	esp, 4

; 327  :     nk_font_atlas_begin(&sdl.atlas);

	push	OFFSET _sdl+13080
	call	_nk_font_atlas_begin
	add	esp, 4

; 328  :     *atlas = &sdl.atlas;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [eax], OFFSET _sdl+13080

; 329  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_sdl_font_stash_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear_sdl_gl3.h
;	COMDAT _nk_sdl_init
_TEXT	SEGMENT
_win$ = 8						; size = 4
_nk_sdl_init PROC					; COMDAT

; 313  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 314  :     sdl.win = win;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR _sdl, eax

; 315  :     nk_init_default(&sdl.ctx, 0);

	push	0
	push	OFFSET _sdl+124
	call	_nk_init_default
	add	esp, 8

; 316  :     sdl.ctx.clip.copy = nk_sdl_clipbard_copy;

	mov	DWORD PTR _sdl+5940, OFFSET _nk_sdl_clipbard_copy

; 317  :     sdl.ctx.clip.paste = nk_sdl_clipbard_paste;

	mov	DWORD PTR _sdl+5936, OFFSET _nk_sdl_clipbard_paste

; 318  :     sdl.ctx.clip.userdata = nk_handle_ptr(0);

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	mov	DWORD PTR _sdl+5932, eax

; 319  :     nk_sdl_device_create();

	call	_nk_sdl_device_create

; 320  :     return &sdl.ctx;

	mov	eax, OFFSET _sdl+124

; 321  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_sdl_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_menu_begin
_TEXT	SEGMENT
tv138 = -272						; size = 4
tv132 = -272						; size = 4
_hash$ = -72						; size = 4
_popup$ = -60						; size = 4
_body$ = -48						; size = 16
_is_active$ = -24					; size = 4
_is_open$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_win$ = 12						; size = 4
_id$ = 16						; size = 4
_is_clicked$ = 20					; size = 4
_header$ = 24						; size = 16
_size$ = 40						; size = 8
_nk_menu_begin PROC					; COMDAT

; 23431: {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 23432:     int is_open = 0;

	mov	DWORD PTR _is_open$[ebp], 0

; 23433:     int is_active = 0;

	mov	DWORD PTR _is_active$[ebp], 0

; 23434:     struct nk_rect body;
; 23435:     struct nk_window *popup;
; 23436:     nk_hash hash = nk_murmur_hash(id, (int)nk_strlen(id), NK_PANEL_MENU);

	push	64					; 00000040H
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	call	_nk_murmur_hash
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _hash$[ebp], eax

; 23437: 
; 23438:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN10@nk_menu_be
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_menu_begin@@9@9@ddf8d5d8
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_menu_be:

; 23439:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN11@nk_menu_be
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_menu_begin@@9@9@ddf8d5d8
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_menu_be:

; 23440:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN12@nk_menu_be
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_menu_begin@@9@9@ddf8d5d8
	add	edx, 9
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_menu_be:

; 23441:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN6@nk_menu_be
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN6@nk_menu_be
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN7@nk_menu_be
$LN6@nk_menu_be:

; 23442:         return 0;

	xor	eax, eax
	jmp	$LN8@nk_menu_be
$LN7@nk_menu_be:

; 23443: 
; 23444:     body.x = header.x;

	movss	xmm0, DWORD PTR _header$[ebp]
	movss	DWORD PTR _body$[ebp], xmm0

; 23445:     body.w = size.x;

	movss	xmm0, DWORD PTR _size$[ebp]
	movss	DWORD PTR _body$[ebp+8], xmm0

; 23446:     body.y = header.y + header.h;

	movss	xmm0, DWORD PTR _header$[ebp+4]
	addss	xmm0, DWORD PTR _header$[ebp+12]
	movss	DWORD PTR _body$[ebp+4], xmm0

; 23447:     body.h = size.y;

	movss	xmm0, DWORD PTR _size$[ebp+4]
	movss	DWORD PTR _body$[ebp+12], xmm0

; 23448: 
; 23449:     popup = win->popup.win;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	mov	DWORD PTR _popup$[ebp], ecx

; 23450:     is_open = popup ? nk_true : nk_false;

	cmp	DWORD PTR _popup$[ebp], 0
	je	SHORT $LN13@nk_menu_be
	mov	DWORD PTR tv132[ebp], 1
	jmp	SHORT $LN14@nk_menu_be
$LN13@nk_menu_be:
	mov	DWORD PTR tv132[ebp], 0
$LN14@nk_menu_be:
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR _is_open$[ebp], eax

; 23451:     is_active = (popup && (win->popup.name == hash) && win->popup.type == NK_PANEL_MENU);

	cmp	DWORD PTR _popup$[ebp], 0
	je	SHORT $LN15@nk_menu_be
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	cmp	ecx, DWORD PTR _hash$[ebp]
	jne	SHORT $LN15@nk_menu_be
	mov	edx, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [edx+256], 64			; 00000040H
	jne	SHORT $LN15@nk_menu_be
	mov	DWORD PTR tv138[ebp], 1
	jmp	SHORT $LN16@nk_menu_be
$LN15@nk_menu_be:
	mov	DWORD PTR tv138[ebp], 0
$LN16@nk_menu_be:
	mov	eax, DWORD PTR tv138[ebp]
	mov	DWORD PTR _is_active$[ebp], eax

; 23452:     if ((is_clicked && is_open && !is_active) || (is_open && !is_active) ||
; 23453:         (!is_open && !is_active && !is_clicked)) return 0;

	cmp	DWORD PTR _is_clicked$[ebp], 0
	je	SHORT $LN3@nk_menu_be
	cmp	DWORD PTR _is_open$[ebp], 0
	je	SHORT $LN3@nk_menu_be
	cmp	DWORD PTR _is_active$[ebp], 0
	je	SHORT $LN4@nk_menu_be
$LN3@nk_menu_be:
	cmp	DWORD PTR _is_open$[ebp], 0
	je	SHORT $LN2@nk_menu_be
	cmp	DWORD PTR _is_active$[ebp], 0
	je	SHORT $LN4@nk_menu_be
$LN2@nk_menu_be:
	cmp	DWORD PTR _is_open$[ebp], 0
	jne	SHORT $LN5@nk_menu_be
	cmp	DWORD PTR _is_active$[ebp], 0
	jne	SHORT $LN5@nk_menu_be
	cmp	DWORD PTR _is_clicked$[ebp], 0
	jne	SHORT $LN5@nk_menu_be
$LN4@nk_menu_be:
	xor	eax, eax
	jmp	SHORT $LN8@nk_menu_be
$LN5@nk_menu_be:

; 23454:     if (!nk_nonblock_begin(ctx, NK_WINDOW_NO_SCROLLBAR, body, header, NK_PANEL_MENU))

	push	64					; 00000040H
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _body$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _body$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _body$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _body$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	push	32					; 00000020H
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_nonblock_begin
	add	esp, 44					; 0000002cH
	test	eax, eax
	jne	SHORT $LN1@nk_menu_be

; 23455:         return 0;

	xor	eax, eax
	jmp	SHORT $LN8@nk_menu_be
$LN1@nk_menu_be:

; 23456: 
; 23457:     win->popup.type = NK_PANEL_MENU;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+256], 64			; 00000040H

; 23458:     win->popup.name = hash;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR [eax+280], ecx

; 23459:     return 1;

	mov	eax, 1
$LN8@nk_menu_be:

; 23460: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@nk_menu_be
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@nk_menu_be:
	DD	1
	DD	$LN18@nk_menu_be
$LN18@nk_menu_be:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN17@nk_menu_be
$LN17@nk_menu_be:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	121					; 00000079H
	DB	0
_nk_menu_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_begin
_TEXT	SEGMENT
tv157 = -296						; size = 4
tv138 = -296						; size = 4
tv132 = -296						; size = 4
$T1 = -288						; size = 16
_hash$ = -72						; size = 4
_body$ = -60						; size = 16
_is_active$ = -36					; size = 4
_is_open$ = -24						; size = 4
_popup$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_win$ = 12						; size = 4
_size$ = 16						; size = 8
_is_clicked$ = 24					; size = 4
_header$ = 28						; size = 16
_nk_combo_begin PROC					; COMDAT

; 22688: {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 22689:     struct nk_window *popup;
; 22690:     int is_open = 0;

	mov	DWORD PTR _is_open$[ebp], 0

; 22691:     int is_active = 0;

	mov	DWORD PTR _is_active$[ebp], 0

; 22692:     struct nk_rect body;
; 22693:     nk_hash hash;
; 22694: 
; 22695:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN10@nk_combo_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_combo_begin@@9@9@ddf8d5d8
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_combo_b:

; 22696:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN11@nk_combo_b
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_combo_begin@@9@9@ddf8d5d8
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_combo_b:

; 22697:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN12@nk_combo_b
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_combo_begin@@9@9@ddf8d5d8
	add	edx, 9
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_combo_b:

; 22698:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN6@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN6@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN7@nk_combo_b
$LN6@nk_combo_b:

; 22699:         return 0;

	xor	eax, eax
	jmp	$LN8@nk_combo_b
$LN7@nk_combo_b:

; 22700: 
; 22701:     popup = win->popup.win;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	mov	DWORD PTR _popup$[ebp], ecx

; 22702:     body.x = header.x;

	movss	xmm0, DWORD PTR _header$[ebp]
	movss	DWORD PTR _body$[ebp], xmm0

; 22703:     body.w = size.x;

	movss	xmm0, DWORD PTR _size$[ebp]
	movss	DWORD PTR _body$[ebp+8], xmm0

; 22704:     body.y = header.y + header.h-ctx->style.window.combo_border;

	movss	xmm0, DWORD PTR _header$[ebp+4]
	addss	xmm0, DWORD PTR _header$[ebp+12]
	mov	eax, DWORD PTR _ctx$[ebp]
	subss	xmm0, DWORD PTR [eax+5636]
	movss	DWORD PTR _body$[ebp+4], xmm0

; 22705:     body.h = size.y;

	movss	xmm0, DWORD PTR _size$[ebp+4]
	movss	DWORD PTR _body$[ebp+12], xmm0

; 22706: 
; 22707:     hash = win->popup.combo_count++;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+288]
	mov	DWORD PTR _hash$[ebp], ecx
	mov	edx, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [edx+288]
	add	eax, 1
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+288], eax

; 22708:     is_open = (popup) ? nk_true:nk_false;

	cmp	DWORD PTR _popup$[ebp], 0
	je	SHORT $LN13@nk_combo_b
	mov	DWORD PTR tv132[ebp], 1
	jmp	SHORT $LN14@nk_combo_b
$LN13@nk_combo_b:
	mov	DWORD PTR tv132[ebp], 0
$LN14@nk_combo_b:
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR _is_open$[ebp], eax

; 22709:     is_active = (popup && (win->popup.name == hash) && win->popup.type == NK_PANEL_COMBO);

	cmp	DWORD PTR _popup$[ebp], 0
	je	SHORT $LN15@nk_combo_b
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	cmp	ecx, DWORD PTR _hash$[ebp]
	jne	SHORT $LN15@nk_combo_b
	mov	edx, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [edx+256], 32			; 00000020H
	jne	SHORT $LN15@nk_combo_b
	mov	DWORD PTR tv138[ebp], 1
	jmp	SHORT $LN16@nk_combo_b
$LN15@nk_combo_b:
	mov	DWORD PTR tv138[ebp], 0
$LN16@nk_combo_b:
	mov	eax, DWORD PTR tv138[ebp]
	mov	DWORD PTR _is_active$[ebp], eax

; 22710:     if ((is_clicked && is_open && !is_active) || (is_open && !is_active) ||
; 22711:         (!is_open && !is_active && !is_clicked)) return 0;

	cmp	DWORD PTR _is_clicked$[ebp], 0
	je	SHORT $LN3@nk_combo_b
	cmp	DWORD PTR _is_open$[ebp], 0
	je	SHORT $LN3@nk_combo_b
	cmp	DWORD PTR _is_active$[ebp], 0
	je	SHORT $LN4@nk_combo_b
$LN3@nk_combo_b:
	cmp	DWORD PTR _is_open$[ebp], 0
	je	SHORT $LN2@nk_combo_b
	cmp	DWORD PTR _is_active$[ebp], 0
	je	SHORT $LN4@nk_combo_b
$LN2@nk_combo_b:
	cmp	DWORD PTR _is_open$[ebp], 0
	jne	SHORT $LN5@nk_combo_b
	cmp	DWORD PTR _is_active$[ebp], 0
	jne	SHORT $LN5@nk_combo_b
	cmp	DWORD PTR _is_clicked$[ebp], 0
	jne	SHORT $LN5@nk_combo_b
$LN4@nk_combo_b:
	xor	eax, eax
	jmp	$LN8@nk_combo_b
$LN5@nk_combo_b:

; 22712:     if (!nk_nonblock_begin(ctx, 0, body,
; 22713:         (is_clicked && is_open)?nk_rect(0,0,0,0):header, NK_PANEL_COMBO)) return 0;

	cmp	DWORD PTR _is_clicked$[ebp], 0
	je	SHORT $LN17@nk_combo_b
	cmp	DWORD PTR _is_open$[ebp], 0
	je	SHORT $LN17@nk_combo_b
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	_nk_rect
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN18@nk_combo_b
$LN17@nk_combo_b:
	lea	ecx, DWORD PTR _header$[ebp]
	mov	DWORD PTR tv157[ebp], ecx
$LN18@nk_combo_b:
	push	32					; 00000020H
	mov	edx, DWORD PTR tv157[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _body$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _body$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _body$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _body$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	push	0
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_nonblock_begin
	add	esp, 44					; 0000002cH
	test	eax, eax
	jne	SHORT $LN1@nk_combo_b
	xor	eax, eax
	jmp	SHORT $LN8@nk_combo_b
$LN1@nk_combo_b:

; 22714: 
; 22715:     win->popup.type = NK_PANEL_COMBO;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+256], 32			; 00000020H

; 22716:     win->popup.name = hash;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR [eax+280], ecx

; 22717:     return 1;

	mov	eax, 1
$LN8@nk_combo_b:

; 22718: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@nk_combo_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN21@nk_combo_b:
	DD	1
	DD	$LN20@nk_combo_b
$LN20@nk_combo_b:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN19@nk_combo_b
$LN19@nk_combo_b:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	121					; 00000079H
	DB	0
_nk_combo_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_nonblock_begin
_TEXT	SEGMENT
_root$1 = -104						; size = 4
_root$2 = -92						; size = 4
_in_header$3 = -80					; size = 4
_in_body$4 = -68					; size = 4
_pressed$5 = -56					; size = 4
_is_active$ = -44					; size = 4
_panel$ = -32						; size = 4
_win$ = -20						; size = 4
_popup$ = -8						; size = 4
_ctx$ = 8						; size = 4
_flags$ = 12						; size = 4
_body$ = 16						; size = 16
_header$ = 32						; size = 16
_panel_type$ = 48					; size = 4
_nk_nonblock_begin PROC					; COMDAT

; 22262: {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 22263:     struct nk_window *popup;
; 22264:     struct nk_window *win;
; 22265:     struct nk_panel *panel;
; 22266:     int is_active = nk_true;

	mov	DWORD PTR _is_active$[ebp], 1

; 22267: 
; 22268:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN14@nk_nonbloc
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_nonblock_begin@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_nonbloc:

; 22269:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN15@nk_nonbloc
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_nonblock_begin@@9@9@ddf8d5d8
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@nk_nonbloc:

; 22270:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN16@nk_nonbloc
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_nonblock_begin@@9@9@ddf8d5d8
	add	edx, 8
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN16@nk_nonbloc:

; 22271:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN10@nk_nonbloc
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN10@nk_nonbloc
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN11@nk_nonbloc
$LN10@nk_nonbloc:

; 22272:         return 0;

	xor	eax, eax
	jmp	$LN12@nk_nonbloc
$LN11@nk_nonbloc:

; 22273: 
; 22274:     /* popups cannot have popups */
; 22275:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 22276:     panel = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _panel$[ebp], ecx

; 22277:     NK_ASSERT(!(panel->type & NK_PANEL_SET_POPUP));

	mov	eax, DWORD PTR _panel$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 244				; 000000f4H
	je	SHORT $LN17@nk_nonbloc
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_nonblock_begin@@9@9@ddf8d5d8
	add	edx, 15					; 0000000fH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EI@JEAJFHEO@?$AA?$CB?$AA?$CI?$AAp?$AAa?$AAn?$AAe?$AAl?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAP?$AAA?$AAN?$AAE?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAP?$AAO?$AAP@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN17@nk_nonbloc:

; 22278:     (void)panel;
; 22279:     popup = win->popup.win;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	mov	DWORD PTR _popup$[ebp], ecx

; 22280:     if (!popup) {

	cmp	DWORD PTR _popup$[ebp], 0
	jne	SHORT $LN9@nk_nonbloc

; 22281:         /* create window for nonblocking popup */
; 22282:         popup = (struct nk_window*)nk_create_window(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_create_window
	add	esp, 4
	mov	DWORD PTR _popup$[ebp], eax

; 22283:         popup->parent = win;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+384], ecx

; 22284:         win->popup.win = popup;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _popup$[ebp]
	mov	DWORD PTR [eax+252], ecx

; 22285:         win->popup.type = panel_type;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _panel_type$[ebp]
	mov	DWORD PTR [eax+256], ecx

; 22286:         nk_command_buffer_init(&popup->buffer, &ctx->memory, NK_CLIPPING_ON);

	push	1
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5748				; 00001674H
	push	eax
	mov	ecx, DWORD PTR _popup$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	_nk_command_buffer_init
	add	esp, 12					; 0000000cH

; 22287:     } else {

	jmp	$LN8@nk_nonbloc
$LN9@nk_nonbloc:

; 22288:         /* close the popup if user pressed outside or in the header */
; 22289:         int pressed, in_body, in_header;
; 22290:         pressed = nk_input_is_mouse_pressed(&ctx->input, NK_BUTTON_LEFT);

	push	0
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_input_is_mouse_pressed
	add	esp, 8
	mov	DWORD PTR _pressed$5[ebp], eax

; 22291:         in_body = nk_input_is_mouse_hovering_rect(&ctx->input, body);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _body$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _body$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _body$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _body$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	mov	DWORD PTR _in_body$4[ebp], eax

; 22292:         in_header = nk_input_is_mouse_hovering_rect(&ctx->input, header);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	mov	DWORD PTR _in_header$3[ebp], eax

; 22293:         if (pressed && (!in_body || in_header))

	cmp	DWORD PTR _pressed$5[ebp], 0
	je	SHORT $LN8@nk_nonbloc
	cmp	DWORD PTR _in_body$4[ebp], 0
	je	SHORT $LN6@nk_nonbloc
	cmp	DWORD PTR _in_header$3[ebp], 0
	je	SHORT $LN8@nk_nonbloc
$LN6@nk_nonbloc:

; 22294:             is_active = nk_false;

	mov	DWORD PTR _is_active$[ebp], 0
$LN8@nk_nonbloc:

; 22295:     }
; 22296:     win->popup.header = header;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 304				; 00000130H
	mov	ecx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [eax+12], edx

; 22297: 
; 22298:     if (!is_active) {

	cmp	DWORD PTR _is_active$[ebp], 0
	jne	SHORT $LN5@nk_nonbloc

; 22299:         /* remove read only mode from all parent panels */
; 22300:         struct nk_panel *root = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _root$2[ebp], ecx
$LN4@nk_nonbloc:

; 22301:         while (root) {

	cmp	DWORD PTR _root$2[ebp], 0
	je	SHORT $LN3@nk_nonbloc

; 22302:             root->flags |= NK_WINDOW_REMOVE_ROM;

	mov	eax, DWORD PTR _root$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, 65536				; 00010000H
	mov	edx, DWORD PTR _root$2[ebp]
	mov	DWORD PTR [edx+4], ecx

; 22303:             root = root->parent;

	mov	eax, DWORD PTR _root$2[ebp]
	mov	ecx, DWORD PTR [eax+408]
	mov	DWORD PTR _root$2[ebp], ecx

; 22304:         }

	jmp	SHORT $LN4@nk_nonbloc
$LN3@nk_nonbloc:

; 22305:         return is_active;

	mov	eax, DWORD PTR _is_active$[ebp]
	jmp	$LN12@nk_nonbloc
$LN5@nk_nonbloc:

; 22306:     }
; 22307: 
; 22308:     popup->bounds = body;

	mov	eax, DWORD PTR _popup$[ebp]
	add	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR _body$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _body$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _body$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _body$[ebp+12]
	mov	DWORD PTR [eax+12], edx

; 22309:     popup->parent = win;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+384], ecx

; 22310:     popup->layout = (struct nk_panel*)nk_create_panel(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_create_panel
	add	esp, 4
	mov	ecx, DWORD PTR _popup$[ebp]
	mov	DWORD PTR [ecx+140], eax

; 22311:     popup->flags = flags;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [eax+72], ecx

; 22312:     popup->flags |= NK_WINDOW_BORDER;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	or	ecx, 1
	mov	edx, DWORD PTR _popup$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 22313:     popup->flags |= NK_WINDOW_DYNAMIC;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	or	ecx, 2048				; 00000800H
	mov	edx, DWORD PTR _popup$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 22314:     popup->seq = ctx->seq;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+12952]
	mov	DWORD PTR [eax], edx

; 22315:     win->popup.active = 1;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+284], 1

; 22316:     NK_ASSERT(popup->layout);

	mov	eax, DWORD PTR _popup$[ebp]
	cmp	DWORD PTR [eax+140], 0
	jne	SHORT $LN18@nk_nonbloc
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_nonblock_begin@@9@9@ddf8d5d8
	add	ecx, 54					; 00000036H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BM@OHHEFNGN@?$AAp?$AAo?$AAp?$AAu?$AAp?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@nk_nonbloc:

; 22317: 
; 22318:     nk_start_popup(ctx, win);

	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_start_popup
	add	esp, 8

; 22319:     popup->buffer = win->buffer;

	mov	esi, DWORD PTR _win$[ebp]
	add	esi, 100				; 00000064H
	mov	edi, DWORD PTR _popup$[ebp]
	add	edi, 100				; 00000064H
	mov	ecx, 10					; 0000000aH
	rep movsd

; 22320:     nk_push_scissor(&popup->buffer, nk_null_rect);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _nk_null_rect
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _nk_null_rect+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _nk_null_rect+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _nk_null_rect+12
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _popup$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_nk_push_scissor
	add	esp, 20					; 00000014H

; 22321:     ctx->current = popup;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _popup$[ebp]
	mov	DWORD PTR [eax+12940], ecx

; 22322: 
; 22323:     nk_panel_begin(ctx, 0, panel_type);

	mov	eax, DWORD PTR _panel_type$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_panel_begin
	add	esp, 12					; 0000000cH

; 22324:     win->buffer = popup->buffer;

	mov	esi, DWORD PTR _popup$[ebp]
	add	esi, 100				; 00000064H
	mov	edi, DWORD PTR _win$[ebp]
	add	edi, 100				; 00000064H
	mov	ecx, 10					; 0000000aH
	rep movsd

; 22325:     popup->layout->parent = win->layout;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	DWORD PTR [ecx+408], eax

; 22326:     popup->layout->offset_x = &popup->scrollbar.x;

	mov	eax, DWORD PTR _popup$[ebp]
	add	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _popup$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR [edx+24], eax

; 22327:     popup->layout->offset_y = &popup->scrollbar.y;

	mov	eax, DWORD PTR _popup$[ebp]
	add	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _popup$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR [edx+28], eax

; 22328: 
; 22329:     /* set read only mode to all parent panels */
; 22330:     {struct nk_panel *root;
; 22331:     root = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _root$1[ebp], ecx
$LN2@nk_nonbloc:

; 22332:     while (root) {

	cmp	DWORD PTR _root$1[ebp], 0
	je	SHORT $LN1@nk_nonbloc

; 22333:         root->flags |= NK_WINDOW_ROM;

	mov	eax, DWORD PTR _root$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, 4096				; 00001000H
	mov	edx, DWORD PTR _root$1[ebp]
	mov	DWORD PTR [edx+4], ecx

; 22334:         root = root->parent;

	mov	eax, DWORD PTR _root$1[ebp]
	mov	ecx, DWORD PTR [eax+408]
	mov	DWORD PTR _root$1[ebp], ecx

; 22335:     }}

	jmp	SHORT $LN2@nk_nonbloc
$LN1@nk_nonbloc:

; 22336:     return is_active;

	mov	eax, DWORD PTR _is_active$[ebp]
$LN12@nk_nonbloc:

; 22337: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_nonblock_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_chart_push_column
_TEXT	SEGMENT
tv204 = -312						; size = 4
tv278 = -308						; size = 4
tv228 = -308						; size = 4
tv184 = -308						; size = 4
tv164 = -308						; size = 4
_padding$1 = -108					; size = 4
_item$ = -96						; size = 16
_color$ = -72						; size = 4
_ret$ = -60						; size = 4
_ratio$ = -48						; size = 4
_layout$ = -36						; size = 4
_in$ = -24						; size = 4
_out$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_win$ = 12						; size = 4
_chart$ = 16						; size = 4
_value$ = 20						; size = 4
_slot$ = 24						; size = 4
_nk_chart_push_column PROC				; COMDAT

; 21778: {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21779:     struct nk_command_buffer *out = &win->buffer;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	mov	DWORD PTR _out$[ebp], eax

; 21780:     const struct nk_input *in = &ctx->input;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 21781:     struct nk_panel *layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 21782: 
; 21783:     float ratio;
; 21784:     nk_flags ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 21785:     struct nk_color color;
; 21786:     struct nk_rect item = {0,0,0,0};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _item$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _item$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _item$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _item$[ebp+12], xmm0

; 21787: 
; 21788:     NK_ASSERT(slot >= 0 && slot < NK_CHART_MAX_SLOT);

	cmp	DWORD PTR _slot$[ebp], 0
	jl	SHORT $LN8@nk_chart_p
	cmp	DWORD PTR _slot$[ebp], 4
	jl	SHORT $LN9@nk_chart_p
$LN8@nk_chart_p:
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_chart_push_column@@9@9@ddf8d5d8
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@OFPHFACA@?$AAs?$AAl?$AAo?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAl?$AAo?$AAt?$AA?5?$AA?$DM?$AA?5?$AA4?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_chart_p:

; 21789:     if (chart->slots[slot].index  >= chart->slots[slot].count)

	imul	eax, DWORD PTR _slot$[ebp], 40
	imul	ecx, DWORD PTR _slot$[ebp], 40
	mov	edx, DWORD PTR _chart$[ebp]
	mov	esi, DWORD PTR _chart$[ebp]
	mov	eax, DWORD PTR [edx+eax+56]
	cmp	eax, DWORD PTR [esi+ecx+44]
	jl	SHORT $LN5@nk_chart_p

; 21790:         return nk_false;

	xor	eax, eax
	jmp	$LN6@nk_chart_p
$LN5@nk_chart_p:

; 21791:     if (chart->slots[slot].count) {

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _chart$[ebp]
	cmp	DWORD PTR [ecx+eax+44], 0
	je	SHORT $LN4@nk_chart_p

; 21792:         float padding = (float)(chart->slots[slot].count-1);

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _chart$[ebp]
	mov	edx, DWORD PTR [ecx+eax+44]
	sub	edx, 1
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _padding$1[ebp], xmm0

; 21793:         item.w = (chart->w - padding) / (float)(chart->slots[slot].count);

	mov	eax, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	subss	xmm0, DWORD PTR _padding$1[ebp]
	imul	ecx, DWORD PTR _slot$[ebp], 40
	mov	edx, DWORD PTR _chart$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+ecx+44]
	divss	xmm0, xmm1
	movss	DWORD PTR _item$[ebp+8], xmm0
$LN4@nk_chart_p:

; 21794:     }
; 21795: 
; 21796:     /* calculate bounds of current bar chart entry */
; 21797:     color = chart->slots[slot].color;;

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _chart$[ebp]
	mov	edx, DWORD PTR [ecx+eax+24]
	mov	DWORD PTR _color$[ebp], edx

; 21798:     item.h = chart->h * NK_ABS((value/chart->slots[slot].range));

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR _value$[ebp]
	divss	xmm0, DWORD PTR [ecx+eax+40]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN10@nk_chart_p
	imul	edx, DWORD PTR _slot$[ebp], 40
	mov	eax, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR _value$[ebp]
	divss	xmm0, DWORD PTR [eax+edx+40]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv164[ebp], xmm0
	jmp	SHORT $LN11@nk_chart_p
$LN10@nk_chart_p:
	imul	ecx, DWORD PTR _slot$[ebp], 40
	mov	edx, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR _value$[ebp]
	divss	xmm0, DWORD PTR [edx+ecx+40]
	movss	DWORD PTR tv164[ebp], xmm0
$LN11@nk_chart_p:
	mov	eax, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR tv164[ebp]
	movss	DWORD PTR _item$[ebp+12], xmm0

; 21799:     if (value >= 0) {

	movss	xmm0, DWORD PTR _value$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN3@nk_chart_p

; 21800:         ratio = (value + NK_ABS(chart->slots[slot].min)) / NK_ABS(chart->slots[slot].range);

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+eax+32]
	jbe	SHORT $LN12@nk_chart_p
	imul	edx, DWORD PTR _slot$[ebp], 40
	mov	eax, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+32]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv184[ebp], xmm0
	jmp	SHORT $LN13@nk_chart_p
$LN12@nk_chart_p:
	imul	ecx, DWORD PTR _slot$[ebp], 40
	mov	edx, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+32]
	movss	DWORD PTR tv184[ebp], xmm0
$LN13@nk_chart_p:
	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+eax+40]
	jbe	SHORT $LN14@nk_chart_p
	imul	edx, DWORD PTR _slot$[ebp], 40
	mov	eax, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+40]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv204[ebp], xmm0
	jmp	SHORT $LN15@nk_chart_p
$LN14@nk_chart_p:
	imul	ecx, DWORD PTR _slot$[ebp], 40
	mov	edx, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+40]
	movss	DWORD PTR tv204[ebp], xmm0
$LN15@nk_chart_p:
	movss	xmm0, DWORD PTR _value$[ebp]
	addss	xmm0, DWORD PTR tv184[ebp]
	divss	xmm0, DWORD PTR tv204[ebp]
	movss	DWORD PTR _ratio$[ebp], xmm0

; 21801:         item.y = (chart->y + chart->h) - chart->h * ratio;

	mov	eax, DWORD PTR _chart$[ebp]
	mov	ecx, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _chart$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR _ratio$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _item$[ebp+4], xmm0

; 21802:     } else {

	jmp	SHORT $LN2@nk_chart_p
$LN3@nk_chart_p:

; 21803:         ratio = (value - chart->slots[slot].max) / chart->slots[slot].range;

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR _value$[ebp]
	subss	xmm0, DWORD PTR [ecx+eax+36]
	imul	edx, DWORD PTR _slot$[ebp], 40
	mov	eax, DWORD PTR _chart$[ebp]
	divss	xmm0, DWORD PTR [eax+edx+40]
	movss	DWORD PTR _ratio$[ebp], xmm0

; 21804:         item.y = chart->y + (chart->h * NK_ABS(ratio)) - item.h;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _ratio$[ebp]
	jbe	SHORT $LN16@nk_chart_p
	movss	xmm0, DWORD PTR _ratio$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv228[ebp], xmm0
	jmp	SHORT $LN17@nk_chart_p
$LN16@nk_chart_p:
	movss	xmm0, DWORD PTR _ratio$[ebp]
	movss	DWORD PTR tv228[ebp], xmm0
$LN17@nk_chart_p:
	mov	eax, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR tv228[ebp]
	mov	ecx, DWORD PTR _chart$[ebp]
	addss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, DWORD PTR _item$[ebp+12]
	movss	DWORD PTR _item$[ebp+4], xmm0
$LN2@nk_chart_p:

; 21805:     }
; 21806:     item.x = chart->x + ((float)chart->slots[slot].index * item.w);

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _chart$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+eax+56]
	mulss	xmm0, DWORD PTR _item$[ebp+8]
	mov	edx, DWORD PTR _chart$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _item$[ebp], xmm0

; 21807:     item.x = item.x + ((float)chart->slots[slot].index);

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _chart$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+eax+56]
	addss	xmm0, DWORD PTR _item$[ebp]
	movss	DWORD PTR _item$[ebp], xmm0

; 21808: 
; 21809:     /* user chart bar selection */
; 21810:     if (!(layout->flags & NK_WINDOW_ROM) &&
; 21811:         NK_INBOX(in->mouse.pos.x,in->mouse.pos.y,item.x,item.y,item.w,item.h)) {

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4096				; 00001000H
	jne	$LN1@nk_chart_p
	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+324]
	comiss	xmm0, DWORD PTR _item$[ebp]
	jb	$LN1@nk_chart_p
	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR _item$[ebp]
	addss	xmm0, DWORD PTR _item$[ebp+8]
	comiss	xmm0, DWORD PTR [eax+324]
	jbe	$LN1@nk_chart_p
	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	comiss	xmm0, DWORD PTR _item$[ebp+4]
	jb	SHORT $LN1@nk_chart_p
	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR _item$[ebp+4]
	addss	xmm0, DWORD PTR _item$[ebp+12]
	comiss	xmm0, DWORD PTR [eax+328]
	jbe	SHORT $LN1@nk_chart_p

; 21812:         ret = NK_CHART_HOVERING;

	mov	DWORD PTR _ret$[ebp], 1

; 21813:         ret |= (!in->mouse.buttons[NK_BUTTON_LEFT].down &&
; 21814:                 in->mouse.buttons[NK_BUTTON_LEFT].clicked) ? NK_CHART_CLICKED: 0;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in$[ebp]
	cmp	DWORD PTR [edx+ecx+260], 0
	jne	SHORT $LN18@nk_chart_p
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in$[ebp]
	cmp	DWORD PTR [edx+ecx+264], 0
	je	SHORT $LN18@nk_chart_p
	mov	DWORD PTR tv278[ebp], 2
	jmp	SHORT $LN19@nk_chart_p
$LN18@nk_chart_p:
	mov	DWORD PTR tv278[ebp], 0
$LN19@nk_chart_p:
	mov	eax, DWORD PTR _ret$[ebp]
	or	eax, DWORD PTR tv278[ebp]
	mov	DWORD PTR _ret$[ebp], eax

; 21815:         color = chart->slots[slot].highlight;

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _chart$[ebp]
	mov	edx, DWORD PTR [ecx+eax+28]
	mov	DWORD PTR _color$[ebp], edx
$LN1@nk_chart_p:

; 21816:     }
; 21817:     nk_fill_rect(out, item, 0, color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _item$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _item$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 21818:     chart->slots[slot].index += 1;

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _chart$[ebp]
	mov	edx, DWORD PTR [ecx+eax+56]
	add	edx, 1
	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _chart$[ebp]
	mov	DWORD PTR [ecx+eax+56], edx

; 21819:     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN6@nk_chart_p:

; 21820: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@nk_chart_p
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@nk_chart_p:
	DD	2
	DD	$LN22@nk_chart_p
$LN22@nk_chart_p:
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN20@nk_chart_p
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN21@nk_chart_p
$LN21@nk_chart_p:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
$LN20@nk_chart_p:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_nk_chart_push_column ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_chart_push_line
_TEXT	SEGMENT
tv297 = -360						; size = 4
tv221 = -360						; size = 4
tv210 = -360						; size = 4
$T1 = -352						; size = 16
_ratio$ = -136						; size = 4
_range$ = -124						; size = 4
_step$ = -112						; size = 4
_color$ = -100						; size = 4
_bounds$ = -88						; size = 16
_cur$ = -64						; size = 8
_ret$ = -48						; size = 4
_out$ = -36						; size = 4
_i$ = -24						; size = 4
_layout$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_win$ = 12						; size = 4
_g$ = 16						; size = 4
_value$ = 20						; size = 4
_slot$ = 24						; size = 4
_nk_chart_push_line PROC				; COMDAT

; 21707: {

	push	ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21708:     struct nk_panel *layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 21709:     const struct nk_input *i = &ctx->input;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _i$[ebp], eax

; 21710:     struct nk_command_buffer *out = &win->buffer;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	mov	DWORD PTR _out$[ebp], eax

; 21711: 
; 21712:     nk_flags ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 21713:     struct nk_vec2 cur;
; 21714:     struct nk_rect bounds;
; 21715:     struct nk_color color;
; 21716:     float step;
; 21717:     float range;
; 21718:     float ratio;
; 21719: 
; 21720:     NK_ASSERT(slot >= 0 && slot < NK_CHART_MAX_SLOT);

	cmp	DWORD PTR _slot$[ebp], 0
	jl	SHORT $LN7@nk_chart_p
	cmp	DWORD PTR _slot$[ebp], 4
	jl	SHORT $LN8@nk_chart_p
$LN7@nk_chart_p:
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_chart_push_line@@9@9@ddf8d5d8
	add	eax, 13					; 0000000dH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@OFPHFACA@?$AAs?$AAl?$AAo?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAl?$AAo?$AAt?$AA?5?$AA?$DM?$AA?5?$AA4?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_chart_p:

; 21721:     step = g->w / (float)g->slots[slot].count;

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+eax+44]
	mov	edx, DWORD PTR _g$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	divss	xmm1, xmm0
	movss	DWORD PTR _step$[ebp], xmm1

; 21722:     range = g->slots[slot].max - g->slots[slot].min;

	imul	eax, DWORD PTR _slot$[ebp], 40
	imul	ecx, DWORD PTR _slot$[ebp], 40
	mov	edx, DWORD PTR _g$[ebp]
	mov	esi, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+36]
	subss	xmm0, DWORD PTR [esi+ecx+32]
	movss	DWORD PTR _range$[ebp], xmm0

; 21723:     ratio = (value - g->slots[slot].min) / range;

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR _value$[ebp]
	subss	xmm0, DWORD PTR [ecx+eax+32]
	divss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR _ratio$[ebp], xmm0

; 21724: 
; 21725:     if (g->slots[slot].index == 0) {

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	cmp	DWORD PTR [ecx+eax+56], 0
	jne	$LN4@nk_chart_p

; 21726:         /* first data point does not have a connection */
; 21727:         g->slots[slot].last.x = g->x;

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	mov	edx, DWORD PTR _g$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax+48], edx

; 21728:         g->slots[slot].last.y = (g->y + g->h) - ratio * (float)g->h;

	mov	eax, DWORD PTR _g$[ebp]
	mov	ecx, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _g$[ebp]
	movss	xmm1, DWORD PTR _ratio$[ebp]
	mulss	xmm1, DWORD PTR [edx+16]
	subss	xmm0, xmm1
	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	movss	DWORD PTR [ecx+eax+52], xmm0

; 21729: 
; 21730:         bounds.x = g->slots[slot].last.x - 2;

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+48]
	subss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _bounds$[ebp], xmm0

; 21731:         bounds.y = g->slots[slot].last.y - 2;

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+52]
	subss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _bounds$[ebp+4], xmm0

; 21732:         bounds.w = bounds.h = 4;

	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR _bounds$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _bounds$[ebp+12]
	movss	DWORD PTR _bounds$[ebp+8], xmm0

; 21733: 
; 21734:         color = g->slots[slot].color;

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	mov	edx, DWORD PTR [ecx+eax+24]
	mov	DWORD PTR _color$[ebp], edx

; 21735:         if (!(layout->flags & NK_WINDOW_ROM) &&
; 21736:             NK_INBOX(i->mouse.pos.x,i->mouse.pos.y, g->slots[slot].last.x-3, g->slots[slot].last.y-3, 6, 6)){

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4096				; 00001000H
	jne	$LN3@nk_chart_p
	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+48]
	subss	xmm0, DWORD PTR __real@40400000
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm1, DWORD PTR [edx+324]
	comiss	xmm1, xmm0
	jb	$LN3@nk_chart_p
	mov	eax, DWORD PTR _i$[ebp]
	imul	ecx, DWORD PTR _slot$[ebp], 40
	mov	edx, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+48]
	subss	xmm0, DWORD PTR __real@40400000
	addss	xmm0, DWORD PTR __real@40c00000
	comiss	xmm0, DWORD PTR [eax+324]
	jbe	$LN3@nk_chart_p
	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+52]
	subss	xmm0, DWORD PTR __real@40400000
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm1, DWORD PTR [edx+328]
	comiss	xmm1, xmm0
	jb	$LN3@nk_chart_p
	mov	eax, DWORD PTR _i$[ebp]
	imul	ecx, DWORD PTR _slot$[ebp], 40
	mov	edx, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+52]
	subss	xmm0, DWORD PTR __real@40400000
	addss	xmm0, DWORD PTR __real@40c00000
	comiss	xmm0, DWORD PTR [eax+328]
	jbe	$LN3@nk_chart_p

; 21737:             ret = nk_input_is_mouse_hovering_rect(i, bounds) ? NK_CHART_HOVERING : 0;

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN9@nk_chart_p
	mov	DWORD PTR tv210[ebp], 1
	jmp	SHORT $LN10@nk_chart_p
$LN9@nk_chart_p:
	mov	DWORD PTR tv210[ebp], 0
$LN10@nk_chart_p:
	mov	ecx, DWORD PTR tv210[ebp]
	mov	DWORD PTR _ret$[ebp], ecx

; 21738:             ret |= (i->mouse.buttons[NK_BUTTON_LEFT].down &&
; 21739:                 i->mouse.buttons[NK_BUTTON_LEFT].clicked) ? NK_CHART_CLICKED: 0;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [edx+ecx+260], 0
	je	SHORT $LN11@nk_chart_p
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [edx+ecx+264], 0
	je	SHORT $LN11@nk_chart_p
	mov	DWORD PTR tv221[ebp], 2
	jmp	SHORT $LN12@nk_chart_p
$LN11@nk_chart_p:
	mov	DWORD PTR tv221[ebp], 0
$LN12@nk_chart_p:
	mov	eax, DWORD PTR _ret$[ebp]
	or	eax, DWORD PTR tv221[ebp]
	mov	DWORD PTR _ret$[ebp], eax

; 21740:             color = g->slots[slot].highlight;

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	mov	edx, DWORD PTR [ecx+eax+28]
	mov	DWORD PTR _color$[ebp], edx
$LN3@nk_chart_p:

; 21741:         }
; 21742:         nk_fill_rect(out, bounds, 0, color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 21743:         g->slots[slot].index += 1;

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	mov	edx, DWORD PTR [ecx+eax+56]
	add	edx, 1
	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	mov	DWORD PTR [ecx+eax+56], edx

; 21744:         return ret;

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN5@nk_chart_p
$LN4@nk_chart_p:

; 21745:     }
; 21746: 
; 21747:     /* draw a line between the last data point and the new one */
; 21748:     color = g->slots[slot].color;

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	mov	edx, DWORD PTR [ecx+eax+24]
	mov	DWORD PTR _color$[ebp], edx

; 21749:     cur.x = g->x + (float)(step * (float)g->slots[slot].index);

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+eax+56]
	mulss	xmm0, DWORD PTR _step$[ebp]
	mov	edx, DWORD PTR _g$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _cur$[ebp], xmm0

; 21750:     cur.y = (g->y + g->h) - (ratio * (float)g->h);

	mov	eax, DWORD PTR _g$[ebp]
	mov	ecx, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _g$[ebp]
	movss	xmm1, DWORD PTR _ratio$[ebp]
	mulss	xmm1, DWORD PTR [edx+16]
	subss	xmm0, xmm1
	movss	DWORD PTR _cur$[ebp+4], xmm0

; 21751:     nk_stroke_line(out, g->slots[slot].last.x, g->slots[slot].last.y, cur.x, cur.y, 1.0f, color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _cur$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _cur$[ebp]
	movss	DWORD PTR [esp], xmm0
	imul	ecx, DWORD PTR _slot$[ebp], 40
	mov	edx, DWORD PTR _g$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx+52]
	movss	DWORD PTR [esp], xmm0
	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax+48]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_stroke_line
	add	esp, 28					; 0000001cH

; 21752: 
; 21753:     bounds.x = cur.x - 3;

	movss	xmm0, DWORD PTR _cur$[ebp]
	subss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR _bounds$[ebp], xmm0

; 21754:     bounds.y = cur.y - 3;

	movss	xmm0, DWORD PTR _cur$[ebp+4]
	subss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR _bounds$[ebp+4], xmm0

; 21755:     bounds.w = bounds.h = 6;

	movss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR _bounds$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _bounds$[ebp+12]
	movss	DWORD PTR _bounds$[ebp+8], xmm0

; 21756: 
; 21757:     /* user selection of current data point */
; 21758:     if (!(layout->flags & NK_WINDOW_ROM)) {

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4096				; 00001000H
	jne	$LN1@nk_chart_p

; 21759:         if (nk_input_is_mouse_hovering_rect(i, bounds)) {

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@nk_chart_p

; 21760:             ret = NK_CHART_HOVERING;

	mov	DWORD PTR _ret$[ebp], 1

; 21761:             ret |= (!i->mouse.buttons[NK_BUTTON_LEFT].down &&
; 21762:                 i->mouse.buttons[NK_BUTTON_LEFT].clicked) ? NK_CHART_CLICKED: 0;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [edx+ecx+260], 0
	jne	SHORT $LN13@nk_chart_p
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [edx+ecx+264], 0
	je	SHORT $LN13@nk_chart_p
	mov	DWORD PTR tv297[ebp], 2
	jmp	SHORT $LN14@nk_chart_p
$LN13@nk_chart_p:
	mov	DWORD PTR tv297[ebp], 0
$LN14@nk_chart_p:
	mov	eax, DWORD PTR _ret$[ebp]
	or	eax, DWORD PTR tv297[ebp]
	mov	DWORD PTR _ret$[ebp], eax

; 21763:             color = g->slots[slot].highlight;

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	mov	edx, DWORD PTR [ecx+eax+28]
	mov	DWORD PTR _color$[ebp], edx
$LN1@nk_chart_p:

; 21764:         }
; 21765:     }
; 21766:     nk_fill_rect(out, nk_rect(cur.x - 2, cur.y - 2, 4, 4), 0, color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _cur$[ebp+4]
	subss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _cur$[ebp]
	subss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_nk_rect
	add	esp, 4
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 21767: 
; 21768:     /* save current data point position */
; 21769:     g->slots[slot].last.x = cur.x;

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR _cur$[ebp]
	movss	DWORD PTR [ecx+eax+48], xmm0

; 21770:     g->slots[slot].last.y = cur.y;

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR _cur$[ebp+4]
	movss	DWORD PTR [ecx+eax+52], xmm0

; 21771:     g->slots[slot].index  += 1;

	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	mov	edx, DWORD PTR [ecx+eax+56]
	add	edx, 1
	imul	eax, DWORD PTR _slot$[ebp], 40
	mov	ecx, DWORD PTR _g$[ebp]
	mov	DWORD PTR [ecx+eax+56], edx

; 21772:     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN5@nk_chart_p:

; 21773: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@nk_chart_p
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 360				; 00000168H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@nk_chart_p:
	DD	3
	DD	$LN18@nk_chart_p
$LN18@nk_chart_p:
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN15@nk_chart_p
	DD	-88					; ffffffa8H
	DD	16					; 00000010H
	DD	$LN16@nk_chart_p
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN17@nk_chart_p
$LN17@nk_chart_p:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN16@nk_chart_p:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN15@nk_chart_p:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
_nk_chart_push_line ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_property
_TEXT	SEGMENT
tv172 = -512						; size = 4
tv139 = -512						; size = 4
_dummy_select_end$ = -312				; size = 4
_dummy_select_begin$ = -300				; size = 4
_dummy_cursor$ = -288					; size = 4
_dummy_length$ = -276					; size = 4
_dummy_state$ = -264					; size = 4
_dummy_buffer$ = -252					; size = 64
_old_state$ = -180					; size = 4
_select_end$ = -168					; size = 4
_select_begin$ = -156					; size = 4
_cursor$ = -144						; size = 4
_len$ = -132						; size = 4
_buffer$ = -120						; size = 4
_hash$ = -108						; size = 4
_state$ = -96						; size = 4
_s$ = -84						; size = 4
_bounds$ = -72						; size = 16
_style$ = -48						; size = 4
_in$ = -36						; size = 4
_layout$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_variant$ = 16						; size = 4
_inc_per_pixel$ = 20					; size = 4
_filter$ = 24						; size = 4
_nk_property PROC					; COMDAT

; 21375: {

	push	ebp
	mov	ebp, esp
	sub	esp, 512				; 00000200H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-512]
	mov	ecx, 128				; 00000080H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21376:     struct nk_window *win;
; 21377:     struct nk_panel *layout;
; 21378:     struct nk_input *in;
; 21379:     const struct nk_style *style;
; 21380: 
; 21381:     struct nk_rect bounds;
; 21382:     enum nk_widget_layout_states s;
; 21383: 
; 21384:     int *state = 0;

	mov	DWORD PTR _state$[ebp], 0

; 21385:     nk_hash hash = 0;

	mov	DWORD PTR _hash$[ebp], 0

; 21386:     char *buffer = 0;

	mov	DWORD PTR _buffer$[ebp], 0

; 21387:     int *len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 21388:     int *cursor = 0;

	mov	DWORD PTR _cursor$[ebp], 0

; 21389:     int *select_begin = 0;

	mov	DWORD PTR _select_begin$[ebp], 0

; 21390:     int *select_end = 0;

	mov	DWORD PTR _select_end$[ebp], 0

; 21391:     int old_state;
; 21392: 
; 21393:     char dummy_buffer[NK_MAX_NUMBER_BUFFER];
; 21394:     int dummy_state = NK_PROPERTY_DEFAULT;

	mov	DWORD PTR _dummy_state$[ebp], 0

; 21395:     int dummy_length = 0;

	mov	DWORD PTR _dummy_length$[ebp], 0

; 21396:     int dummy_cursor = 0;

	mov	DWORD PTR _dummy_cursor$[ebp], 0

; 21397:     int dummy_select_begin = 0;

	mov	DWORD PTR _dummy_select_begin$[ebp], 0

; 21398:     int dummy_select_end = 0;

	mov	DWORD PTR _dummy_select_end$[ebp], 0

; 21399: 
; 21400:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN14@nk_propert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_property@@9@9@ddf8d5d8
	add	eax, 25					; 00000019H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_propert:

; 21401:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN15@nk_propert
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_property@@9@9@ddf8d5d8
	add	ecx, 26					; 0000001aH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@nk_propert:

; 21402:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN16@nk_propert
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_property@@9@9@ddf8d5d8
	add	edx, 27					; 0000001bH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN16@nk_propert:

; 21403:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN10@nk_propert
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN10@nk_propert
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN11@nk_propert
$LN10@nk_propert:

; 21404:         return;

	jmp	$LN2@nk_propert
$LN11@nk_propert:

; 21405: 
; 21406:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 21407:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 21408:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 21409:     s = nk_widget(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax

; 21410:     if (!s) return;

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN9@nk_propert
	jmp	$LN2@nk_propert
$LN9@nk_propert:

; 21411: 
; 21412:     /* calculate hash from name */
; 21413:     if (name[0] == '#') {

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _name$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 35					; 00000023H
	jne	SHORT $LN8@nk_propert

; 21414:         hash = nk_murmur_hash(name, (int)nk_strlen(name), win->property.seq++);

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+240]
	mov	DWORD PTR tv139[ebp], ecx
	mov	edx, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [edx+240]
	add	eax, 1
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+240], eax
	mov	edx, DWORD PTR tv139[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_nk_murmur_hash
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _hash$[ebp], eax

; 21415:         name++; /* special number hash */

	mov	eax, DWORD PTR _name$[ebp]
	add	eax, 1
	mov	DWORD PTR _name$[ebp], eax
	jmp	SHORT $LN7@nk_propert
$LN8@nk_propert:

; 21416:     } else hash = nk_murmur_hash(name, (int)nk_strlen(name), 42);

	push	42					; 0000002aH
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_nk_murmur_hash
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _hash$[ebp], eax
$LN7@nk_propert:

; 21417: 
; 21418:     /* check if property is currently hot item */
; 21419:     if (win->property.active && hash == win->property.name) {

	mov	eax, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [eax+148], 0
	je	SHORT $LN6@nk_propert
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	cmp	ecx, DWORD PTR [eax+236]
	jne	SHORT $LN6@nk_propert

; 21420:         buffer = win->property.buffer;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 156				; 0000009cH
	mov	DWORD PTR _buffer$[ebp], eax

; 21421:         len = &win->property.length;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 220				; 000000dcH
	mov	DWORD PTR _len$[ebp], eax

; 21422:         cursor = &win->property.cursor;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 224				; 000000e0H
	mov	DWORD PTR _cursor$[ebp], eax

; 21423:         state = &win->property.state;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 248				; 000000f8H
	mov	DWORD PTR _state$[ebp], eax

; 21424:         select_begin = &win->property.select_start;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 228				; 000000e4H
	mov	DWORD PTR _select_begin$[ebp], eax

; 21425:         select_end = &win->property.select_end;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 232				; 000000e8H
	mov	DWORD PTR _select_end$[ebp], eax

; 21426:     } else {

	jmp	SHORT $LN5@nk_propert
$LN6@nk_propert:

; 21427:         buffer = dummy_buffer;

	lea	eax, DWORD PTR _dummy_buffer$[ebp]
	mov	DWORD PTR _buffer$[ebp], eax

; 21428:         len = &dummy_length;

	lea	eax, DWORD PTR _dummy_length$[ebp]
	mov	DWORD PTR _len$[ebp], eax

; 21429:         cursor = &dummy_cursor;

	lea	eax, DWORD PTR _dummy_cursor$[ebp]
	mov	DWORD PTR _cursor$[ebp], eax

; 21430:         state = &dummy_state;

	lea	eax, DWORD PTR _dummy_state$[ebp]
	mov	DWORD PTR _state$[ebp], eax

; 21431:         select_begin =  &dummy_select_begin;

	lea	eax, DWORD PTR _dummy_select_begin$[ebp]
	mov	DWORD PTR _select_begin$[ebp], eax

; 21432:         select_end = &dummy_select_end;

	lea	eax, DWORD PTR _dummy_select_end$[ebp]
	mov	DWORD PTR _select_end$[ebp], eax
$LN5@nk_propert:

; 21433:     }
; 21434: 
; 21435:     /* execute property widget */
; 21436:     old_state = *state;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _old_state$[ebp], ecx

; 21437:     ctx->text_edit.clip = ctx->clip;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5808				; 000016b0H
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 7536				; 00001d70H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 21438:     in = ((s == NK_WIDGET_ROM && !win->property.active) ||
; 21439:         layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _s$[ebp], 2
	jne	SHORT $LN17@nk_propert
	mov	eax, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [eax+148], 0
	je	SHORT $LN18@nk_propert
$LN17@nk_propert:
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 4096				; 00001000H
	jne	SHORT $LN18@nk_propert
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv172[ebp], eax
	jmp	SHORT $LN19@nk_propert
$LN18@nk_propert:
	mov	DWORD PTR tv172[ebp], 0
$LN19@nk_propert:
	mov	ecx, DWORD PTR tv172[ebp]
	mov	DWORD PTR _in$[ebp], ecx

; 21440:     nk_do_property(&ctx->last_widget_state, &win->buffer, bounds, name,
; 21441:         variant, inc_per_pixel, buffer, len, state, cursor, select_begin,
; 21442:         select_end, &style->property, filter, in, style->font, &ctx->text_edit,
; 21443:         ctx->button_behavior);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5824]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 7536				; 00001d70H
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _filter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	add	ecx, 1572				; 00000624H
	push	ecx
	mov	edx, DWORD PTR _select_end$[ebp]
	push	edx
	mov	eax, DWORD PTR _select_begin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cursor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _inc_per_pixel$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _variant$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 5820				; 000016bcH
	push	edx
	call	_nk_do_property
	add	esp, 84					; 00000054H

; 21444: 
; 21445:     if (in && *state != NK_PROPERTY_DEFAULT && !win->property.active) {

	cmp	DWORD PTR _in$[ebp], 0
	je	$LN3@nk_propert
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN3@nk_propert
	mov	eax, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [eax+148], 0
	jne	$LN3@nk_propert

; 21446:         /* current property is now hot */
; 21447:         win->property.active = 1;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+148], 1

; 21448:         NK_MEMCPY(win->property.buffer, buffer, (nk_size)*len);

	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 156				; 0000009cH
	push	eax
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 21449:         win->property.length = *len;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+220], edx

; 21450:         win->property.cursor = *cursor;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _cursor$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+224], edx

; 21451:         win->property.state = *state;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+248], edx

; 21452:         win->property.name = hash;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR [eax+236], ecx

; 21453:         win->property.select_start = *select_begin;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _select_begin$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+228], edx

; 21454:         win->property.select_end = *select_end;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _select_end$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+232], edx

; 21455:         if (*state == NK_PROPERTY_DRAG) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 2
	jne	SHORT $LN3@nk_propert

; 21456:             ctx->input.mouse.grab = nk_true;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	BYTE PTR [eax+356], 1

; 21457:             ctx->input.mouse.grabbed = nk_true;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	BYTE PTR [eax+357], 1
$LN3@nk_propert:

; 21458:         }
; 21459:     }
; 21460:     /* check if previously active property is now inactive */
; 21461:     if (*state == NK_PROPERTY_DEFAULT && old_state != NK_PROPERTY_DEFAULT) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@nk_propert
	cmp	DWORD PTR _old_state$[ebp], 0
	je	SHORT $LN2@nk_propert

; 21462:         if (old_state == NK_PROPERTY_DRAG) {

	cmp	DWORD PTR _old_state$[ebp], 2
	jne	SHORT $LN1@nk_propert

; 21463:             ctx->input.mouse.grab = nk_false;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	BYTE PTR [eax+356], 0

; 21464:             ctx->input.mouse.grabbed = nk_false;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	BYTE PTR [eax+357], 0

; 21465:             ctx->input.mouse.ungrab = nk_true;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	BYTE PTR [eax+358], 1
$LN1@nk_propert:

; 21466:         }
; 21467:         win->property.select_start = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+228], 0

; 21468:         win->property.select_end = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+232], 0

; 21469:         win->property.active = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+148], 0
$LN2@nk_propert:

; 21470:     }
; 21471: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@nk_propert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 512				; 00000200H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN28@nk_propert:
	DD	7
	DD	$LN27@nk_propert
$LN27@nk_propert:
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN20@nk_propert
	DD	-252					; ffffff04H
	DD	64					; 00000040H
	DD	$LN21@nk_propert
	DD	-264					; fffffef8H
	DD	4
	DD	$LN22@nk_propert
	DD	-276					; fffffeecH
	DD	4
	DD	$LN23@nk_propert
	DD	-288					; fffffee0H
	DD	4
	DD	$LN24@nk_propert
	DD	-300					; fffffed4H
	DD	4
	DD	$LN25@nk_propert
	DD	-312					; fffffec8H
	DD	4
	DD	$LN26@nk_propert
$LN26@nk_propert:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN25@nk_propert:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	103					; 00000067H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN24@nk_propert:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN23@nk_propert:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN22@nk_propert:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN21@nk_propert:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN20@nk_propert:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_property ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_property_variant_double
_TEXT	SEGMENT
_result$ = -48						; size = 40
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_value$ = 12						; size = 8
_min_value$ = 20					; size = 8
_max_value$ = 28					; size = 8
_step$ = 36						; size = 8
_nk_property_variant_double PROC			; COMDAT

; 21362: {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21363:     struct nk_property_variant result;
; 21364:     result.kind = NK_PROPERTY_DOUBLE;

	mov	DWORD PTR _result$[ebp], 2

; 21365:     result.value.d = value;

	movsd	xmm0, QWORD PTR _value$[ebp]
	movsd	QWORD PTR _result$[ebp+8], xmm0

; 21366:     result.min_value.d = min_value;

	movsd	xmm0, QWORD PTR _min_value$[ebp]
	movsd	QWORD PTR _result$[ebp+16], xmm0

; 21367:     result.max_value.d = max_value;

	movsd	xmm0, QWORD PTR _max_value$[ebp]
	movsd	QWORD PTR _result$[ebp+24], xmm0

; 21368:     result.step.d = step;

	movsd	xmm0, QWORD PTR _step$[ebp]
	movsd	QWORD PTR _result$[ebp+32], xmm0

; 21369:     return result;

	mov	ecx, 10					; 0000000aH
	lea	esi, DWORD PTR _result$[ebp]
	mov	edi, DWORD PTR $T1[ebp]
	rep movsd
	mov	eax, DWORD PTR $T1[ebp]

; 21370: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_propert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@nk_propert:
	DD	1
	DD	$LN4@nk_propert
$LN4@nk_propert:
	DD	-48					; ffffffd0H
	DD	40					; 00000028H
	DD	$LN3@nk_propert
$LN3@nk_propert:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
_nk_property_variant_double ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_property_variant_float
_TEXT	SEGMENT
_result$ = -48						; size = 40
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_value$ = 12						; size = 4
_min_value$ = 16					; size = 4
_max_value$ = 20					; size = 4
_step$ = 24						; size = 4
_nk_property_variant_float PROC				; COMDAT

; 21349: {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21350:     struct nk_property_variant result;
; 21351:     result.kind = NK_PROPERTY_FLOAT;

	mov	DWORD PTR _result$[ebp], 1

; 21352:     result.value.f = value;

	movss	xmm0, DWORD PTR _value$[ebp]
	movss	DWORD PTR _result$[ebp+8], xmm0

; 21353:     result.min_value.f = min_value;

	movss	xmm0, DWORD PTR _min_value$[ebp]
	movss	DWORD PTR _result$[ebp+16], xmm0

; 21354:     result.max_value.f = max_value;

	movss	xmm0, DWORD PTR _max_value$[ebp]
	movss	DWORD PTR _result$[ebp+24], xmm0

; 21355:     result.step.f = step;

	movss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR _result$[ebp+32], xmm0

; 21356:     return result;

	mov	ecx, 10					; 0000000aH
	lea	esi, DWORD PTR _result$[ebp]
	mov	edi, DWORD PTR $T1[ebp]
	rep movsd
	mov	eax, DWORD PTR $T1[ebp]

; 21357: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_propert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@nk_propert:
	DD	1
	DD	$LN4@nk_propert
$LN4@nk_propert:
	DD	-48					; ffffffd0H
	DD	40					; 00000028H
	DD	$LN3@nk_propert
$LN3@nk_propert:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
_nk_property_variant_float ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_property_variant_int
_TEXT	SEGMENT
_result$ = -48						; size = 40
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_value$ = 12						; size = 4
_min_value$ = 16					; size = 4
_max_value$ = 20					; size = 4
_step$ = 24						; size = 4
_nk_property_variant_int PROC				; COMDAT

; 21337: {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21338:     struct nk_property_variant result;
; 21339:     result.kind = NK_PROPERTY_INT;

	mov	DWORD PTR _result$[ebp], 0

; 21340:     result.value.i = value;

	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _result$[ebp+8], eax

; 21341:     result.min_value.i = min_value;

	mov	eax, DWORD PTR _min_value$[ebp]
	mov	DWORD PTR _result$[ebp+16], eax

; 21342:     result.max_value.i = max_value;

	mov	eax, DWORD PTR _max_value$[ebp]
	mov	DWORD PTR _result$[ebp+24], eax

; 21343:     result.step.i = step;

	mov	eax, DWORD PTR _step$[ebp]
	mov	DWORD PTR _result$[ebp+32], eax

; 21344:     return result;

	mov	ecx, 10					; 0000000aH
	lea	esi, DWORD PTR _result$[ebp]
	mov	edi, DWORD PTR $T1[ebp]
	rep movsd
	mov	eax, DWORD PTR $T1[ebp]

; 21345: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_propert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@nk_propert:
	DD	1
	DD	$LN4@nk_propert
$LN4@nk_propert:
	DD	-48					; ffffffd0H
	DD	40					; 00000028H
	DD	$LN3@nk_propert
$LN3@nk_propert:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
_nk_property_variant_int ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tree_base
_TEXT	SEGMENT
_state$ = -44						; size = 4
_tree_hash$ = -32					; size = 4
_title_len$ = -20					; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_type$ = 12						; size = 4
_img$ = 16						; size = 4
_title$ = 20						; size = 4
_initial_state$ = 24					; size = 4
_hash$ = 28						; size = 4
_len$ = 32						; size = 4
_line$ = 36						; size = 4
_nk_tree_base PROC					; COMDAT

; 20010: {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 20011:     struct nk_window *win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 20012:     int title_len = 0;

	mov	DWORD PTR _title_len$[ebp], 0

; 20013:     nk_hash tree_hash = 0;

	mov	DWORD PTR _tree_hash$[ebp], 0

; 20014:     nk_uint *state = 0;

	mov	DWORD PTR _state$[ebp], 0

; 20015: 
; 20016:     /* retrieve tree state from internal widget state tables */
; 20017:     if (!hash) {

	cmp	DWORD PTR _hash$[ebp], 0
	jne	SHORT $LN3@nk_tree_ba

; 20018:         title_len = (int)nk_strlen(title);

	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _title_len$[ebp], eax

; 20019:         tree_hash = nk_murmur_hash(title, (int)title_len, (nk_hash)line);

	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _title$[ebp]
	push	edx
	call	_nk_murmur_hash
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _tree_hash$[ebp], eax
	jmp	SHORT $LN2@nk_tree_ba
$LN3@nk_tree_ba:

; 20020:     } else tree_hash = nk_murmur_hash(hash, len, (nk_hash)line);

	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hash$[ebp]
	push	edx
	call	_nk_murmur_hash
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _tree_hash$[ebp], eax
$LN2@nk_tree_ba:

; 20021:     state = nk_find_value(win, tree_hash);

	mov	eax, DWORD PTR _tree_hash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	call	_nk_find_value
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 20022:     if (!state) {

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN1@nk_tree_ba

; 20023:         state = nk_add_value(ctx, win, tree_hash, 0);

	push	0
	mov	eax, DWORD PTR _tree_hash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_add_value
	add	esp, 16					; 00000010H
	mov	DWORD PTR _state$[ebp], eax

; 20024:         *state = initial_state;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _initial_state$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@nk_tree_ba:

; 20025:     }
; 20026:     return nk_tree_state_base(ctx, type, img, title, (enum nk_collapse_states*)state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	mov	edx, DWORD PTR _img$[ebp]
	push	edx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_tree_state_base
	add	esp, 20					; 00000014H

; 20027: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tree_base ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tree_state_base
_TEXT	SEGMENT
tv599 = -476						; size = 8
tv215 = -472						; size = 4
tv595 = -468						; size = 4
tv314 = -468						; size = 4
tv271 = -468						; size = 4
tv227 = -468						; size = 4
tv219 = -468						; size = 4
tv212 = -468						; size = 4
$T1 = -460						; size = 16
_label$2 = -244						; size = 16
_background$3 = -220					; size = 4
_widget_state$ = -208					; size = 4
_ws$ = -196						; size = 4
_text$ = -184						; size = 16
_sym$ = -160						; size = 16
_header$ = -136						; size = 16
_item_spacing$ = -112					; size = 8
_row_height$ = -96					; size = 4
_symbol$ = -84						; size = 4
_button$ = -72						; size = 4
_in$ = -60						; size = 4
_out$ = -48						; size = 4
_style$ = -36						; size = 4
_layout$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_type$ = 12						; size = 4
_img$ = 16						; size = 4
_title$ = 20						; size = 4
_state$ = 24						; size = 4
_nk_tree_state_base PROC				; COMDAT

; 19900: {

	push	ebp
	mov	ebp, esp
	sub	esp, 476				; 000001dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-476]
	mov	ecx, 119				; 00000077H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 19901:     struct nk_window *win;
; 19902:     struct nk_panel *layout;
; 19903:     const struct nk_style *style;
; 19904:     struct nk_command_buffer *out;
; 19905:     const struct nk_input *in;
; 19906:     const struct nk_style_button *button;
; 19907:     enum nk_symbol_type symbol;
; 19908:     float row_height;
; 19909: 
; 19910:     struct nk_vec2 item_spacing;
; 19911:     struct nk_rect header = {0,0,0,0};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _header$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _header$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _header$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _header$[ebp+12], xmm0

; 19912:     struct nk_rect sym = {0,0,0,0};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sym$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sym$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sym$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sym$[ebp+12], xmm0

; 19913:     struct nk_text text;
; 19914: 
; 19915:     nk_flags ws = 0;

	mov	DWORD PTR _ws$[ebp], 0

; 19916:     enum nk_widget_layout_states widget_state;
; 19917: 
; 19918:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN19@nk_tree_st
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_tree_state_base@@9@9@ddf8d5d8
	add	eax, 18					; 00000012H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@nk_tree_st:

; 19919:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN20@nk_tree_st
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_tree_state_base@@9@9@ddf8d5d8
	add	ecx, 19					; 00000013H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN20@nk_tree_st:

; 19920:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN21@nk_tree_st
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_tree_state_base@@9@9@ddf8d5d8
	add	edx, 20					; 00000014H
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN21@nk_tree_st:

; 19921:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN15@nk_tree_st
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN15@nk_tree_st
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN16@nk_tree_st
$LN15@nk_tree_st:

; 19922:         return 0;

	xor	eax, eax
	jmp	$LN1@nk_tree_st
$LN16@nk_tree_st:

; 19923: 
; 19924:     /* cache some data */
; 19925:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19926:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19927:     out = &win->buffer;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	mov	DWORD PTR _out$[ebp], eax

; 19928:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 19929:     item_spacing = style->window.spacing;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5308]
	mov	edx, DWORD PTR [eax+5312]
	mov	DWORD PTR _item_spacing$[ebp], ecx
	mov	DWORD PTR _item_spacing$[ebp+4], edx

; 19930: 
; 19931:     /* calculate header bounds and draw background */
; 19932:     row_height = style->font->height + 2 * style->tab.padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+4560]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _row_height$[ebp], xmm0

; 19933:     nk_layout_set_min_row_height(ctx, row_height);

	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_layout_set_min_row_height
	add	esp, 8

; 19934:     nk_layout_row_dynamic(ctx, row_height, 1);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 19935:     nk_layout_reset_min_row_height(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_layout_reset_min_row_height
	add	esp, 4

; 19936: 
; 19937:     widget_state = nk_widget(&header, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _widget_state$[ebp], eax

; 19938:     if (type == NK_TREE_TAB) {

	cmp	DWORD PTR _type$[ebp], 1
	jne	$LN14@nk_tree_st

; 19939:         const struct nk_style_item *background = &style->tab.background;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 3996				; 00000f9cH
	mov	DWORD PTR _background$3[ebp], eax

; 19940:         if (background->type == NK_STYLE_ITEM_IMAGE) {

	mov	eax, DWORD PTR _background$3[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN13@nk_tree_st

; 19941:             nk_draw_image(out, header, &background->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _background$3[ebp]
	add	ecx, 4
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 19942:             text.background = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	DWORD PTR _text$[ebp+8], eax

; 19943:         } else {

	jmp	$LN12@nk_tree_st
$LN13@nk_tree_st:

; 19944:             text.background = background->data.color;

	mov	eax, DWORD PTR _background$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _text$[ebp+8], ecx

; 19945:             nk_fill_rect(out, header, 0, style->tab.border_color);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4016]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 19946:             nk_fill_rect(out, nk_shrink_rect(header, style->tab.border),
; 19947:                 style->tab.rounding, background->data.color);

	mov	eax, DWORD PTR _background$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4548]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4544]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_nk_shrink_rect
	add	esp, 8
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH
$LN12@nk_tree_st:

; 19948:         }

	jmp	SHORT $LN11@nk_tree_st
$LN14@nk_tree_st:

; 19949:     } else text.background = style->window.background;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5220]
	mov	DWORD PTR _text$[ebp+8], ecx
$LN11@nk_tree_st:

; 19950: 
; 19951:     /* update node state */
; 19952:     in = (!(layout->flags & NK_WINDOW_ROM)) ? &ctx->input: 0;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN22@nk_tree_st
	mov	DWORD PTR tv212[ebp], 1
	jmp	SHORT $LN23@nk_tree_st
$LN22@nk_tree_st:
	mov	DWORD PTR tv212[ebp], 0
$LN23@nk_tree_st:
	cmp	DWORD PTR tv212[ebp], 0
	je	SHORT $LN24@nk_tree_st
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv215[ebp], edx
	jmp	SHORT $LN25@nk_tree_st
$LN24@nk_tree_st:
	mov	DWORD PTR tv215[ebp], 0
$LN25@nk_tree_st:
	mov	eax, DWORD PTR tv215[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 19953:     in = (in && widget_state == NK_WIDGET_VALID) ? &ctx->input : 0;

	cmp	DWORD PTR _in$[ebp], 0
	je	SHORT $LN26@nk_tree_st
	cmp	DWORD PTR _widget_state$[ebp], 1
	jne	SHORT $LN26@nk_tree_st
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv219[ebp], eax
	jmp	SHORT $LN27@nk_tree_st
$LN26@nk_tree_st:
	mov	DWORD PTR tv219[ebp], 0
$LN27@nk_tree_st:
	mov	ecx, DWORD PTR tv219[ebp]
	mov	DWORD PTR _in$[ebp], ecx

; 19954:     if (nk_button_behavior(&ws, header, in, NK_BUTTON_DEFAULT))

	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR _ws$[ebp]
	push	ecx
	call	_nk_button_behavior
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN10@nk_tree_st

; 19955:         *state = (*state == NK_MAXIMIZED) ? NK_MINIMIZED : NK_MAXIMIZED;

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN28@nk_tree_st
	mov	DWORD PTR tv227[ebp], 0
	jmp	SHORT $LN29@nk_tree_st
$LN28@nk_tree_st:
	mov	DWORD PTR tv227[ebp], 1
$LN29@nk_tree_st:
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR tv227[ebp]
	mov	DWORD PTR [ecx], edx
$LN10@nk_tree_st:

; 19956: 
; 19957:     /* select correct button style */
; 19958:     if (*state == NK_MAXIMIZED) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN9@nk_tree_st

; 19959:         symbol = style->tab.sym_maximize;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4540]
	mov	DWORD PTR _symbol$[ebp], ecx

; 19960:         if (type == NK_TREE_TAB)

	cmp	DWORD PTR _type$[ebp], 1
	jne	SHORT $LN8@nk_tree_st

; 19961:             button = &style->tab.tab_maximize_button;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4024				; 00000fb8H
	mov	DWORD PTR _button$[ebp], eax
	jmp	SHORT $LN7@nk_tree_st
$LN8@nk_tree_st:

; 19962:         else button = &style->tab.node_maximize_button;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4280				; 000010b8H
	mov	DWORD PTR _button$[ebp], eax
$LN7@nk_tree_st:

; 19963:     } else {

	jmp	SHORT $LN4@nk_tree_st
$LN9@nk_tree_st:

; 19964:         symbol = style->tab.sym_minimize;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4536]
	mov	DWORD PTR _symbol$[ebp], ecx

; 19965:         if (type == NK_TREE_TAB)

	cmp	DWORD PTR _type$[ebp], 1
	jne	SHORT $LN5@nk_tree_st

; 19966:             button = &style->tab.tab_minimize_button;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4152				; 00001038H
	mov	DWORD PTR _button$[ebp], eax
	jmp	SHORT $LN4@nk_tree_st
$LN5@nk_tree_st:

; 19967:         else button = &style->tab.node_minimize_button;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4408				; 00001138H
	mov	DWORD PTR _button$[ebp], eax
$LN4@nk_tree_st:

; 19968:     }
; 19969: 
; 19970:     {/* draw triangle button */
; 19971:     sym.w = sym.h = style->font->height;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _sym$[ebp+12], xmm0
	movss	xmm0, DWORD PTR _sym$[ebp+12]
	movss	DWORD PTR _sym$[ebp+8], xmm0

; 19972:     sym.y = header.y + style->tab.padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp+4]
	addss	xmm0, DWORD PTR [eax+4560]
	movss	DWORD PTR _sym$[ebp+4], xmm0

; 19973:     sym.x = header.x + style->tab.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp]
	addss	xmm0, DWORD PTR [eax+4556]
	movss	DWORD PTR _sym$[ebp], xmm0

; 19974:     nk_do_button_symbol(&ws, &win->buffer, sym, symbol, NK_BUTTON_DEFAULT,
; 19975:         button, 0, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	0
	mov	edx, DWORD PTR _button$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _symbol$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _sym$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _sym$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _sym$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _sym$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	lea	edx, DWORD PTR _ws$[ebp]
	push	edx
	call	_nk_do_button_symbol
	add	esp, 44					; 0000002cH

; 19976: 
; 19977:     if (img) {

	cmp	DWORD PTR _img$[ebp], 0
	je	$LN3@nk_tree_st

; 19978:         /* draw optional image icon */
; 19979:         sym.x = sym.x + sym.w + 4 * item_spacing.x;

	movss	xmm0, DWORD PTR _sym$[ebp]
	addss	xmm0, DWORD PTR _sym$[ebp+8]
	movss	xmm1, DWORD PTR __real@40800000
	mulss	xmm1, DWORD PTR _item_spacing$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _sym$[ebp], xmm0

; 19980:         nk_draw_image(&win->buffer, sym, img, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _img$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _sym$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _sym$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _sym$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _sym$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 19981:         sym.w = style->font->height + style->tab.spacing.x;}

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR [edx+4564]
	movss	DWORD PTR _sym$[ebp+8], xmm0
$LN3@nk_tree_st:

; 19982:     }
; 19983: 
; 19984:     {/* draw label */
; 19985:     struct nk_rect label;
; 19986:     header.w = NK_MAX(header.w, sym.w + item_spacing.x);

	movss	xmm0, DWORD PTR _sym$[ebp+8]
	addss	xmm0, DWORD PTR _item_spacing$[ebp]
	comiss	xmm0, DWORD PTR _header$[ebp+8]
	jbe	SHORT $LN30@nk_tree_st
	movss	xmm0, DWORD PTR _sym$[ebp+8]
	addss	xmm0, DWORD PTR _item_spacing$[ebp]
	movss	DWORD PTR tv271[ebp], xmm0
	jmp	SHORT $LN31@nk_tree_st
$LN30@nk_tree_st:
	movss	xmm0, DWORD PTR _header$[ebp+8]
	movss	DWORD PTR tv271[ebp], xmm0
$LN31@nk_tree_st:
	movss	xmm0, DWORD PTR tv271[ebp]
	movss	DWORD PTR _header$[ebp+8], xmm0

; 19987:     label.x = sym.x + sym.w + item_spacing.x;

	movss	xmm0, DWORD PTR _sym$[ebp]
	addss	xmm0, DWORD PTR _sym$[ebp+8]
	addss	xmm0, DWORD PTR _item_spacing$[ebp]
	movss	DWORD PTR _label$2[ebp], xmm0

; 19988:     label.y = sym.y;

	movss	xmm0, DWORD PTR _sym$[ebp+4]
	movss	DWORD PTR _label$2[ebp+4], xmm0

; 19989:     label.w = header.w - (sym.w + item_spacing.y + style->tab.indent);

	movss	xmm0, DWORD PTR _sym$[ebp+8]
	addss	xmm0, DWORD PTR _item_spacing$[ebp+4]
	mov	eax, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [eax+4552]
	movss	xmm1, DWORD PTR _header$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _label$2[ebp+8], xmm1

; 19990:     label.h = style->font->height;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _label$2[ebp+12], xmm0

; 19991:     text.text = style->tab.text;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR _text$[ebp+12], ecx

; 19992:     text.padding = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _text$[ebp], eax
	mov	DWORD PTR _text$[ebp+4], edx

; 19993:     nk_widget_text(out, label, title, nk_strlen(title), &text,
; 19994:         NK_TEXT_LEFT, style->font);}

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	17					; 00000011H
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _label$2[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _label$2[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _label$2[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _label$2[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_widget_text
	add	esp, 40					; 00000028H

; 19995: 
; 19996:     /* increase x-axis cursor widget position pointer */
; 19997:     if (*state == NK_MAXIMIZED) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	$LN2@nk_tree_st

; 19998:         layout->at_x = header.x + (float)*layout->offset_x + style->tab.indent;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv595[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv595[ebp]
	mov	eax, DWORD PTR tv595[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv599[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv599[ebp]
	addss	xmm0, DWORD PTR _header$[ebp]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+4552]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [edx+32], xmm0

; 19999:         layout->bounds.w = NK_MAX(layout->bounds.w, style->tab.indent);

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR [ecx+4552]
	comiss	xmm0, DWORD PTR [eax+16]
	jbe	SHORT $LN32@nk_tree_st
	mov	edx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR [edx+4552]
	movss	DWORD PTR tv314[ebp], xmm0
	jmp	SHORT $LN33@nk_tree_st
$LN32@nk_tree_st:
	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR tv314[ebp], xmm0
$LN33@nk_tree_st:
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR tv314[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 20000:         layout->bounds.w -= (style->tab.indent + style->window.padding.x);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR [eax+4552]
	addss	xmm0, DWORD PTR [ecx+5332]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [eax+16], xmm1

; 20001:         layout->row.tree_depth++;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	add	ecx, 1
	mov	edx, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [edx+156], ecx

; 20002:         return nk_true;

	mov	eax, 1
	jmp	SHORT $LN1@nk_tree_st
	jmp	SHORT $LN1@nk_tree_st
$LN2@nk_tree_st:

; 20003:     } else return nk_false;

	xor	eax, eax
$LN1@nk_tree_st:

; 20004: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN41@nk_tree_st
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 476				; 000001dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN41@nk_tree_st:
	DD	6
	DD	$LN40@nk_tree_st
$LN40@nk_tree_st:
	DD	-112					; ffffff90H
	DD	8
	DD	$LN34@nk_tree_st
	DD	-136					; ffffff78H
	DD	16					; 00000010H
	DD	$LN35@nk_tree_st
	DD	-160					; ffffff60H
	DD	16					; 00000010H
	DD	$LN36@nk_tree_st
	DD	-184					; ffffff48H
	DD	16					; 00000010H
	DD	$LN37@nk_tree_st
	DD	-196					; ffffff3cH
	DD	4
	DD	$LN38@nk_tree_st
	DD	-244					; ffffff0cH
	DD	16					; 00000010H
	DD	$LN39@nk_tree_st
$LN39@nk_tree_st:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN38@nk_tree_st:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	0
$LN37@nk_tree_st:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN36@nk_tree_st:
	DB	115					; 00000073H
	DB	121					; 00000079H
	DB	109					; 0000006dH
	DB	0
$LN35@nk_tree_st:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN34@nk_tree_st:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
_nk_tree_state_base ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_peek
_TEXT	SEGMENT
_layout$ = -44						; size = 4
_win$ = -32						; size = 4
_index$ = -20						; size = 4
_y$ = -8						; size = 4
_bounds$ = 8						; size = 4
_ctx$ = 12						; size = 4
_nk_layout_peek PROC					; COMDAT

; 19872: {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19873:     float y;
; 19874:     int index;
; 19875:     struct nk_window *win;
; 19876:     struct nk_panel *layout;
; 19877: 
; 19878:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_peek@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_layout_:

; 19879:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN7@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_peek@@9@9@ddf8d5d8
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_layout_:

; 19880:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN8@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_peek@@9@9@ddf8d5d8
	add	edx, 8
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_layout_:

; 19881:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN2@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN3@nk_layout_
$LN2@nk_layout_:

; 19882:         return;

	jmp	$LN4@nk_layout_
$LN3@nk_layout_:

; 19883: 
; 19884:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19885:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19886:     y = layout->at_y;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR _y$[ebp], xmm0

; 19887:     index = layout->row.index;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _index$[ebp], ecx

; 19888:     if (layout->row.index >= layout->row.columns) {

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [eax+104]
	cmp	edx, DWORD PTR [ecx+116]
	jl	SHORT $LN1@nk_layout_

; 19889:         layout->at_y += layout->row.height;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	addss	xmm0, DWORD PTR [ecx+108]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [edx+36], xmm0

; 19890:         layout->row.index = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [eax+104], 0
$LN1@nk_layout_:

; 19891:     }
; 19892:     nk_layout_widget_space(bounds, ctx, win, nk_false);

	push	0
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bounds$[ebp]
	push	edx
	call	_nk_layout_widget_space
	add	esp, 16					; 00000010H

; 19893:     layout->at_y = y;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 19894:     layout->row.index = index;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR [eax+104], ecx
$LN4@nk_layout_:

; 19895: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_peek ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_panel_alloc_space
_TEXT	SEGMENT
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
_bounds$ = 8						; size = 4
_ctx$ = 12						; size = 4
_nk_panel_alloc_space PROC				; COMDAT

; 19849: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19850:     struct nk_window *win;
; 19851:     struct nk_panel *layout;
; 19852: 
; 19853:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_panel_a
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_panel_alloc_space@@9@9@ddf8d5d8
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_panel_a:

; 19854:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN7@nk_panel_a
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_panel_alloc_space@@9@9@ddf8d5d8
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_panel_a:

; 19855:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN8@nk_panel_a
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_panel_alloc_space@@9@9@ddf8d5d8
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_panel_a:

; 19856:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_panel_a
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN2@nk_panel_a
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN3@nk_panel_a
$LN2@nk_panel_a:

; 19857:         return;

	jmp	SHORT $LN4@nk_panel_a
$LN3@nk_panel_a:

; 19858: 
; 19859:     /* check if the end of the row has been hit and begin new row if so */
; 19860:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19861:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19862:     if (layout->row.index >= layout->row.columns)

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [eax+104]
	cmp	edx, DWORD PTR [ecx+116]
	jl	SHORT $LN1@nk_panel_a

; 19863:         nk_panel_alloc_row(ctx, win);

	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_panel_alloc_row
	add	esp, 8
$LN1@nk_panel_a:

; 19864: 
; 19865:     /* calculate widget position and size */
; 19866:     nk_layout_widget_space(bounds, ctx, win, nk_true);

	push	1
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bounds$[ebp]
	push	edx
	call	_nk_layout_widget_space
	add	esp, 16					; 00000010H

; 19867:     layout->row.index++;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	add	ecx, 1
	mov	edx, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [edx+104], ecx
$LN4@nk_panel_a:

; 19868: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_panel_alloc_space ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_widget_space
_TEXT	SEGMENT
tv641 = -320						; size = 8
tv617 = -320						; size = 8
tv567 = -320						; size = 8
tv550 = -320						; size = 8
tv480 = -320						; size = 8
tv461 = -320						; size = 8
tv637 = -312						; size = 4
tv613 = -312						; size = 4
tv563 = -312						; size = 4
tv546 = -312						; size = 4
tv476 = -312						; size = 4
tv457 = -312						; size = 4
tv228 = -312						; size = 4
tv154 = -312						; size = 4
tv148 = -312						; size = 4
_ratio$1 = -112						; size = 4
_panel_space$ = -100					; size = 4
_item_spacing$ = -88					; size = 4
_item_width$ = -76					; size = 4
_item_offset$ = -64					; size = 4
_padding$ = -52						; size = 8
_spacing$ = -36						; size = 8
_style$ = -20						; size = 4
_layout$ = -8						; size = 4
_bounds$ = 8						; size = 4
_ctx$ = 12						; size = 4
_win$ = 16						; size = 4
_modify$ = 20						; size = 4
_nk_layout_widget_space PROC				; COMDAT

; 19719: {

	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19720:     struct nk_panel *layout;
; 19721:     const struct nk_style *style;
; 19722: 
; 19723:     struct nk_vec2 spacing;
; 19724:     struct nk_vec2 padding;
; 19725: 
; 19726:     float item_offset = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _item_offset$[ebp], xmm0

; 19727:     float item_width = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _item_width$[ebp], xmm0

; 19728:     float item_spacing = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _item_spacing$[ebp], xmm0

; 19729:     float panel_space = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _panel_space$[ebp], xmm0

; 19730: 
; 19731:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN24@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_widget_space@@9@9@ddf8d5d8
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN24@nk_layout_:

; 19732:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN25@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_widget_space@@9@9@ddf8d5d8
	add	ecx, 13					; 0000000dH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN25@nk_layout_:

; 19733:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN26@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_widget_space@@9@9@ddf8d5d8
	add	edx, 14					; 0000000eH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN26@nk_layout_:

; 19734:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN20@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN20@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN21@nk_layout_
$LN20@nk_layout_:

; 19735:         return;

	jmp	$LN22@nk_layout_
$LN21@nk_layout_:

; 19736: 
; 19737:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19738:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19739:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 19740:     NK_ASSERT(bounds);

	cmp	DWORD PTR _bounds$[ebp], 0
	jne	SHORT $LN27@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_widget_space@@9@9@ddf8d5d8
	add	eax, 21					; 00000015H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@CGNPIAKO@?$AAb?$AAo?$AAu?$AAn?$AAd?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN27@nk_layout_:

; 19741: 
; 19742:     spacing = style->window.spacing;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5308]
	mov	edx, DWORD PTR [eax+5312]
	mov	DWORD PTR _spacing$[ebp], ecx
	mov	DWORD PTR _spacing$[ebp+4], edx

; 19743:     padding = nk_panel_get_padding(style, layout->type);

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	edx
	call	_nk_panel_get_padding
	add	esp, 8
	mov	DWORD PTR _padding$[ebp], eax
	mov	DWORD PTR _padding$[ebp+4], edx

; 19744:     panel_space = nk_layout_row_calculate_usable_space(&ctx->style, layout->type,
; 19745:                                             layout->bounds.w, layout->row.columns);

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR _layout$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 360				; 00000168H
	push	edx
	call	_nk_layout_row_calculate_usable_space
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _panel_space$[ebp]

; 19746: 
; 19747:     /* calculate the width of one item inside the current layout space */
; 19748:     switch (layout->row.type) {

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR tv148[ebp], ecx
	cmp	DWORD PTR tv148[ebp], 8
	ja	$LN2@nk_layout_
	mov	edx, DWORD PTR tv148[ebp]
	jmp	DWORD PTR $LN40@nk_layout_[edx*4]
$LN17@nk_layout_:

; 19749:     case NK_LAYOUT_DYNAMIC_FIXED: {
; 19750:         /* scaling fixed size widgets item width */
; 19751:         item_width = NK_MAX(1.0f,panel_space-1.0f) / (float)layout->row.columns;

	movss	xmm0, DWORD PTR _panel_space$[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN28@nk_layout_
	movss	xmm0, DWORD PTR _panel_space$[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv154[ebp], xmm0
	jmp	SHORT $LN29@nk_layout_
$LN28@nk_layout_:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv154[ebp], xmm0
$LN29@nk_layout_:
	mov	eax, DWORD PTR _layout$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+116]
	movss	xmm1, DWORD PTR tv154[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _item_width$[ebp], xmm1

; 19752:         item_offset = (float)layout->row.index * item_width;

	mov	eax, DWORD PTR _layout$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+104]
	mulss	xmm0, DWORD PTR _item_width$[ebp]
	movss	DWORD PTR _item_offset$[ebp], xmm0

; 19753:         item_spacing = (float)layout->row.index * spacing.x;

	mov	eax, DWORD PTR _layout$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+104]
	mulss	xmm0, DWORD PTR _spacing$[ebp]
	movss	DWORD PTR _item_spacing$[ebp], xmm0

; 19754:     } break;

	jmp	$LN18@nk_layout_
$LN16@nk_layout_:

; 19755:     case NK_LAYOUT_DYNAMIC_ROW: {
; 19756:         /* scaling single ratio widget width */
; 19757:         item_width = layout->row.item_width * panel_space;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+124]
	mulss	xmm0, DWORD PTR _panel_space$[ebp]
	movss	DWORD PTR _item_width$[ebp], xmm0

; 19758:         item_offset = layout->row.item_offset;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+132]
	movss	DWORD PTR _item_offset$[ebp], xmm0

; 19759:         item_spacing = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _item_spacing$[ebp], xmm0

; 19760: 
; 19761:         if (modify) {

	cmp	DWORD PTR _modify$[ebp], 0
	je	SHORT $LN15@nk_layout_

; 19762:             layout->row.item_offset += item_width + spacing.x;

	movss	xmm0, DWORD PTR _item_width$[ebp]
	addss	xmm0, DWORD PTR _spacing$[ebp]
	mov	eax, DWORD PTR _layout$[ebp]
	addss	xmm0, DWORD PTR [eax+132]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [ecx+132], xmm0

; 19763:             layout->row.filled += layout->row.item_width;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+136]
	addss	xmm0, DWORD PTR [ecx+124]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [edx+136], xmm0

; 19764:             layout->row.index = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [eax+104], 0
$LN15@nk_layout_:

; 19765:         }
; 19766:     } break;

	jmp	$LN18@nk_layout_
$LN14@nk_layout_:

; 19767:     case NK_LAYOUT_DYNAMIC_FREE: {
; 19768:         /* panel width depended free widget placing */
; 19769:         bounds->x = layout->at_x + (layout->bounds.w * layout->row.item.x);

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR [ecx+140]
	mov	edx, DWORD PTR _layout$[ebp]
	addss	xmm0, DWORD PTR [edx+32]
	mov	eax, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [eax], xmm0

; 19770:         bounds->x -= (float)*layout->offset_x;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv457[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv457[ebp]
	mov	eax, DWORD PTR tv457[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv461[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv461[ebp]
	mov	ecx, DWORD PTR _bounds$[ebp]
	movss	xmm1, DWORD PTR [ecx]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [edx], xmm1

; 19771:         bounds->y = layout->at_y + (layout->row.height * layout->row.item.y);

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+108]
	mulss	xmm0, DWORD PTR [ecx+144]
	mov	edx, DWORD PTR _layout$[ebp]
	addss	xmm0, DWORD PTR [edx+36]
	mov	eax, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 19772:         bounds->y -= (float)*layout->offset_y;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv476[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv476[ebp]
	mov	eax, DWORD PTR tv476[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv480[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv480[ebp]
	mov	ecx, DWORD PTR _bounds$[ebp]
	movss	xmm1, DWORD PTR [ecx+4]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 19773:         bounds->w = layout->bounds.w  * layout->row.item.w;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR [ecx+148]
	mov	edx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 19774:         bounds->h = layout->row.height * layout->row.item.h;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+108]
	mulss	xmm0, DWORD PTR [ecx+152]
	mov	edx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 19775:         return;

	jmp	$LN22@nk_layout_

; 19776:     } break;

	jmp	$LN18@nk_layout_
$LN13@nk_layout_:

; 19777:     case NK_LAYOUT_DYNAMIC: {
; 19778:         /* scaling arrays of panel width ratios for every widget */
; 19779:         float ratio;
; 19780:         NK_ASSERT(layout->row.ratio);

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+120], 0
	jne	SHORT $LN30@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_widget_space@@9@9@ddf8d5d8
	add	ecx, 61					; 0000003dH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CE@DKKICNJC@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAr?$AAa?$AAt?$AAi?$AAo?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN30@nk_layout_:

; 19781:         ratio = (layout->row.ratio[layout->row.index] < 0) ?
; 19782:             layout->row.item_width : layout->row.ratio[layout->row.index];

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	edx, DWORD PTR _layout$[ebp]
	mov	eax, DWORD PTR [edx+120]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+ecx*4]
	jbe	SHORT $LN31@nk_layout_
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [ecx+124]
	movss	DWORD PTR tv228[ebp], xmm0
	jmp	SHORT $LN32@nk_layout_
$LN31@nk_layout_:
	mov	edx, DWORD PTR _layout$[ebp]
	mov	eax, DWORD PTR [edx+104]
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	movss	xmm0, DWORD PTR [edx+eax*4]
	movss	DWORD PTR tv228[ebp], xmm0
$LN32@nk_layout_:
	movss	xmm0, DWORD PTR tv228[ebp]
	movss	DWORD PTR _ratio$1[ebp], xmm0

; 19783: 
; 19784:         item_spacing = (float)layout->row.index * spacing.x;

	mov	eax, DWORD PTR _layout$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+104]
	mulss	xmm0, DWORD PTR _spacing$[ebp]
	movss	DWORD PTR _item_spacing$[ebp], xmm0

; 19785:         item_width = (ratio * panel_space);

	movss	xmm0, DWORD PTR _ratio$1[ebp]
	mulss	xmm0, DWORD PTR _panel_space$[ebp]
	movss	DWORD PTR _item_width$[ebp], xmm0

; 19786:         item_offset = layout->row.item_offset;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+132]
	movss	DWORD PTR _item_offset$[ebp], xmm0

; 19787: 
; 19788:         if (modify) {

	cmp	DWORD PTR _modify$[ebp], 0
	je	SHORT $LN12@nk_layout_

; 19789:             layout->row.item_offset += item_width;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+132]
	addss	xmm0, DWORD PTR _item_width$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [ecx+132], xmm0

; 19790:             layout->row.filled += ratio;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+136]
	addss	xmm0, DWORD PTR _ratio$1[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [ecx+136], xmm0
$LN12@nk_layout_:

; 19791:         }
; 19792:     } break;

	jmp	$LN18@nk_layout_
$LN11@nk_layout_:

; 19793:     case NK_LAYOUT_STATIC_FIXED: {
; 19794:         /* non-scaling fixed widgets item width */
; 19795:         item_width = layout->row.item_width;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+124]
	movss	DWORD PTR _item_width$[ebp], xmm0

; 19796:         item_offset = (float)layout->row.index * item_width;

	mov	eax, DWORD PTR _layout$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+104]
	mulss	xmm0, DWORD PTR _item_width$[ebp]
	movss	DWORD PTR _item_offset$[ebp], xmm0

; 19797:         item_spacing = (float)layout->row.index * spacing.x;

	mov	eax, DWORD PTR _layout$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+104]
	mulss	xmm0, DWORD PTR _spacing$[ebp]
	movss	DWORD PTR _item_spacing$[ebp], xmm0

; 19798:     } break;

	jmp	$LN18@nk_layout_
$LN10@nk_layout_:

; 19799:     case NK_LAYOUT_STATIC_ROW: {
; 19800:         /* scaling single ratio widget width */
; 19801:         item_width = layout->row.item_width;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+124]
	movss	DWORD PTR _item_width$[ebp], xmm0

; 19802:         item_offset = layout->row.item_offset;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+132]
	movss	DWORD PTR _item_offset$[ebp], xmm0

; 19803:         item_spacing = (float)layout->row.index * spacing.x;

	mov	eax, DWORD PTR _layout$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+104]
	mulss	xmm0, DWORD PTR _spacing$[ebp]
	movss	DWORD PTR _item_spacing$[ebp], xmm0

; 19804:         if (modify) layout->row.item_offset += item_width;

	cmp	DWORD PTR _modify$[ebp], 0
	je	SHORT $LN9@nk_layout_
	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+132]
	addss	xmm0, DWORD PTR _item_width$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [ecx+132], xmm0
$LN9@nk_layout_:

; 19805:     } break;

	jmp	$LN18@nk_layout_
$LN8@nk_layout_:

; 19806:     case NK_LAYOUT_STATIC_FREE: {
; 19807:         /* free widget placing */
; 19808:         bounds->x = layout->at_x + layout->row.item.x;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	addss	xmm0, DWORD PTR [ecx+140]
	mov	edx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [edx], xmm0

; 19809:         bounds->w = layout->row.item.w;

	mov	eax, DWORD PTR _bounds$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR [eax+8], edx

; 19810:         if (((bounds->x + bounds->w) > layout->max_x) && modify)

	mov	eax, DWORD PTR _bounds$[ebp]
	mov	ecx, DWORD PTR _bounds$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _layout$[ebp]
	comiss	xmm0, DWORD PTR [edx+40]
	jbe	SHORT $LN7@nk_layout_
	cmp	DWORD PTR _modify$[ebp], 0
	je	SHORT $LN7@nk_layout_

; 19811:             layout->max_x = (bounds->x + bounds->w);

	mov	eax, DWORD PTR _bounds$[ebp]
	mov	ecx, DWORD PTR _bounds$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [edx+40], xmm0
$LN7@nk_layout_:

; 19812:         bounds->x -= (float)*layout->offset_x;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv546[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv546[ebp]
	mov	eax, DWORD PTR tv546[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv550[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv550[ebp]
	mov	ecx, DWORD PTR _bounds$[ebp]
	movss	xmm1, DWORD PTR [ecx]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [edx], xmm1

; 19813:         bounds->y = layout->at_y + layout->row.item.y;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	addss	xmm0, DWORD PTR [ecx+144]
	mov	edx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 19814:         bounds->y -= (float)*layout->offset_y;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv563[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv563[ebp]
	mov	eax, DWORD PTR tv563[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv567[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv567[ebp]
	mov	ecx, DWORD PTR _bounds$[ebp]
	movss	xmm1, DWORD PTR [ecx+4]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 19815:         bounds->h = layout->row.item.h;

	mov	eax, DWORD PTR _bounds$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	mov	DWORD PTR [eax+12], edx

; 19816:         return;

	jmp	$LN22@nk_layout_

; 19817:     } break;

	jmp	$LN18@nk_layout_
$LN6@nk_layout_:

; 19818:     case NK_LAYOUT_STATIC: {
; 19819:         /* non-scaling array of panel pixel width for every widget */
; 19820:         item_spacing = (float)layout->row.index * spacing.x;

	mov	eax, DWORD PTR _layout$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+104]
	mulss	xmm0, DWORD PTR _spacing$[ebp]
	movss	DWORD PTR _item_spacing$[ebp], xmm0

; 19821:         item_width = layout->row.ratio[layout->row.index];

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	edx, DWORD PTR _layout$[ebp]
	mov	eax, DWORD PTR [edx+120]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	movss	DWORD PTR _item_width$[ebp], xmm0

; 19822:         item_offset = layout->row.item_offset;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+132]
	movss	DWORD PTR _item_offset$[ebp], xmm0

; 19823:         if (modify) layout->row.item_offset += item_width;

	cmp	DWORD PTR _modify$[ebp], 0
	je	SHORT $LN5@nk_layout_
	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+132]
	addss	xmm0, DWORD PTR _item_width$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [ecx+132], xmm0
$LN5@nk_layout_:

; 19824:     } break;

	jmp	$LN18@nk_layout_
$LN4@nk_layout_:

; 19825:     case NK_LAYOUT_TEMPLATE: {
; 19826:         /* stretchy row layout with combined dynamic/static widget width*/
; 19827:         NK_ASSERT(layout->row.index < layout->row.columns);

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [eax+104]
	cmp	edx, DWORD PTR [ecx+116]
	jl	SHORT $LN33@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_widget_space@@9@9@ddf8d5d8
	add	eax, 108				; 0000006cH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1FA@JKACIFKJ@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN33@nk_layout_:

; 19828:         NK_ASSERT(layout->row.index < NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS);

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+104], 16			; 00000010H
	jl	SHORT $LN34@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_widget_space@@9@9@ddf8d5d8
	add	ecx, 109				; 0000006dH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@JFBIDLDE@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AA1?$AA6?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN34@nk_layout_:

; 19829:         item_width = layout->row.templates[layout->row.index];

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4+160]
	movss	DWORD PTR _item_width$[ebp], xmm0

; 19830:         item_offset = layout->row.item_offset;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+132]
	movss	DWORD PTR _item_offset$[ebp], xmm0

; 19831:         item_spacing = (float)layout->row.index * spacing.x;

	mov	eax, DWORD PTR _layout$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+104]
	mulss	xmm0, DWORD PTR _spacing$[ebp]
	movss	DWORD PTR _item_spacing$[ebp], xmm0

; 19832:         if (modify) layout->row.item_offset += item_width;

	cmp	DWORD PTR _modify$[ebp], 0
	je	SHORT $LN3@nk_layout_
	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+132]
	addss	xmm0, DWORD PTR _item_width$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [ecx+132], xmm0
$LN3@nk_layout_:

; 19833:     } break;

	jmp	SHORT $LN18@nk_layout_
$LN2@nk_layout_:

; 19834:     default: NK_ASSERT(0); break;

	xor	eax, eax
	jne	SHORT $LN35@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_widget_space@@9@9@ddf8d5d8
	add	ecx, 115				; 00000073H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN35@nk_layout_:
$LN18@nk_layout_:

; 19835:     };
; 19836: 
; 19837:     /* set the bounds of the newly allocated widget */
; 19838:     bounds->w = item_width;

	mov	eax, DWORD PTR _bounds$[ebp]
	movss	xmm0, DWORD PTR _item_width$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 19839:     bounds->h = layout->row.height - spacing.y;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+108]
	subss	xmm0, DWORD PTR _spacing$[ebp+4]
	mov	ecx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 19840:     bounds->y = layout->at_y - (float)*layout->offset_y;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv613[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv613[ebp]
	mov	eax, DWORD PTR tv613[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv617[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv617[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm1, DWORD PTR [ecx+36]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 19841:     bounds->x = layout->at_x + item_offset + item_spacing + padding.x;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	addss	xmm0, DWORD PTR _item_offset$[ebp]
	addss	xmm0, DWORD PTR _item_spacing$[ebp]
	addss	xmm0, DWORD PTR _padding$[ebp]
	mov	ecx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 19842:     if (((bounds->x + bounds->w) > layout->max_x) && modify)

	mov	eax, DWORD PTR _bounds$[ebp]
	mov	ecx, DWORD PTR _bounds$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _layout$[ebp]
	comiss	xmm0, DWORD PTR [edx+40]
	jbe	SHORT $LN1@nk_layout_
	cmp	DWORD PTR _modify$[ebp], 0
	je	SHORT $LN1@nk_layout_

; 19843:         layout->max_x = bounds->x + bounds->w;

	mov	eax, DWORD PTR _bounds$[ebp]
	mov	ecx, DWORD PTR _bounds$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [edx+40], xmm0
$LN1@nk_layout_:

; 19844:     bounds->x -= (float)*layout->offset_x;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv637[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv637[ebp]
	mov	eax, DWORD PTR tv637[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv641[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv641[ebp]
	mov	ecx, DWORD PTR _bounds$[ebp]
	movss	xmm1, DWORD PTR [ecx]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [edx], xmm1
$LN22@nk_layout_:

; 19845: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN39@nk_layout_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN39@nk_layout_:
	DD	2
	DD	$LN38@nk_layout_
$LN38@nk_layout_:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN36@nk_layout_
	DD	-52					; ffffffccH
	DD	8
	DD	$LN37@nk_layout_
$LN37@nk_layout_:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN36@nk_layout_:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN40@nk_layout_:
	DD	$LN17@nk_layout_
	DD	$LN16@nk_layout_
	DD	$LN14@nk_layout_
	DD	$LN13@nk_layout_
	DD	$LN11@nk_layout_
	DD	$LN10@nk_layout_
	DD	$LN8@nk_layout_
	DD	$LN6@nk_layout_
	DD	$LN4@nk_layout_
_nk_layout_widget_space ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_panel_alloc_row
_TEXT	SEGMENT
_row_height$ = -36					; size = 4
_spacing$ = -24						; size = 8
_layout$ = -8						; size = 4
_ctx$ = 8						; size = 4
_win$ = 12						; size = 4
_nk_panel_alloc_row PROC				; COMDAT

; 19709: {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19710:     struct nk_panel *layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19711:     struct nk_vec2 spacing = ctx->style.window.spacing;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5668]
	mov	edx, DWORD PTR [eax+5672]
	mov	DWORD PTR _spacing$[ebp], ecx
	mov	DWORD PTR _spacing$[ebp+4], edx

; 19712:     const float row_height = layout->row.height - spacing.y;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+108]
	subss	xmm0, DWORD PTR _spacing$[ebp+4]
	movss	DWORD PTR _row_height$[ebp], xmm0

; 19713:     nk_panel_layout(ctx, win, row_height, layout->row.columns);

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_panel_layout
	add	esp, 16					; 00000010H

; 19714: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_panel_a
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@nk_panel_a:
	DD	1
	DD	$LN4@nk_panel_a
$LN4@nk_panel_a:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN3@nk_panel_a
$LN3@nk_panel_a:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
_nk_panel_alloc_row ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_row_layout
_TEXT	SEGMENT
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_fmt$ = 12						; size = 4
_height$ = 16						; size = 4
_cols$ = 20						; size = 4
_width$ = 24						; size = 4
_nk_row_layout PROC					; COMDAT

; 19234: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19235:     /* update the current row and set the current row layout */
; 19236:     struct nk_window *win;
; 19237:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_row_lay
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_row_layout@@9@9@ddf8d5d8
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_row_lay:

; 19238:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_row_lay
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_row_layout@@9@9@ddf8d5d8
	add	ecx, 4
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_row_lay:

; 19239:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_row_lay
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_row_layout@@9@9@ddf8d5d8
	add	edx, 5
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_row_lay:

; 19240:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_row_lay
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_row_lay
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN4@nk_row_lay
$LN3@nk_row_lay:

; 19241:         return;

	jmp	$LN5@nk_row_lay
$LN4@nk_row_lay:

; 19242: 
; 19243:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19244:     nk_panel_layout(ctx, win, height, cols);

	mov	eax, DWORD PTR _cols$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_panel_layout
	add	esp, 16					; 00000010H

; 19245:     if (fmt == NK_DYNAMIC)

	cmp	DWORD PTR _fmt$[ebp], 0
	jne	SHORT $LN2@nk_row_lay

; 19246:         win->layout->row.type = NK_LAYOUT_DYNAMIC_FIXED;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR [ecx+100], 0
	jmp	SHORT $LN1@nk_row_lay
$LN2@nk_row_lay:

; 19247:     else win->layout->row.type = NK_LAYOUT_STATIC_FIXED;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR [ecx+100], 4
$LN1@nk_row_lay:

; 19248: 
; 19249:     win->layout->row.ratio = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR [ecx+120], 0

; 19250:     win->layout->row.filled = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+136], xmm0

; 19251:     win->layout->row.item_offset = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+132], xmm0

; 19252:     win->layout->row.item_width = (float)width;

	cvtsi2ss xmm0, DWORD PTR _width$[ebp]
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	movss	DWORD PTR [ecx+124], xmm0
$LN5@nk_row_lay:

; 19253: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_row_layout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_panel_layout
_TEXT	SEGMENT
tv167 = -288						; size = 4
_background$1 = -88					; size = 16
_color$ = -64						; size = 4
_item_spacing$ = -52					; size = 8
_out$ = -36						; size = 4
_style$ = -24						; size = 4
_layout$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_win$ = 12						; size = 4
_height$ = 16						; size = 4
_cols$ = 20						; size = 4
_nk_panel_layout PROC					; COMDAT

; 19181: {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 19182:     struct nk_panel *layout;
; 19183:     const struct nk_style *style;
; 19184:     struct nk_command_buffer *out;
; 19185: 
; 19186:     struct nk_vec2 item_spacing;
; 19187:     struct nk_color color;
; 19188: 
; 19189:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN8@nk_panel_l
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_panel_layout@@9@9@ddf8d5d8
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_panel_l:

; 19190:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN9@nk_panel_l
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_panel_layout@@9@9@ddf8d5d8
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_panel_l:

; 19191:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN10@nk_panel_l
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_panel_layout@@9@9@ddf8d5d8
	add	edx, 10					; 0000000aH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_panel_l:

; 19192:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN4@nk_panel_l
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN4@nk_panel_l
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN5@nk_panel_l
$LN4@nk_panel_l:

; 19193:         return;

	jmp	$LN1@nk_panel_l
$LN5@nk_panel_l:

; 19194: 
; 19195:     /* prefetch some configuration data */
; 19196:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19197:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 19198:     out = &win->buffer;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	mov	DWORD PTR _out$[ebp], eax

; 19199:     color = style->window.background;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5220]
	mov	DWORD PTR _color$[ebp], ecx

; 19200:     item_spacing = style->window.spacing;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5308]
	mov	edx, DWORD PTR [eax+5312]
	mov	DWORD PTR _item_spacing$[ebp], ecx
	mov	DWORD PTR _item_spacing$[ebp+4], edx

; 19201: 
; 19202:     /*  if one of these triggers you forgot to add an `if` condition around either
; 19203:         a window, group, popup, combobox or contextual menu `begin` and `end` block.
; 19204:         Example:
; 19205:             if (nk_begin(...) {...} nk_end(...); or
; 19206:             if (nk_group_begin(...) { nk_group_end(...);} */
; 19207:     NK_ASSERT(!(layout->flags & NK_WINDOW_MINIMIZED));

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN11@nk_panel_l
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_panel_layout@@9@9@ddf8d5d8
	add	edx, 26					; 0000001aH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EO@JPIFGEEN@?$AA?$CB?$AA?$CI?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAW?$AAI?$AAN?$AAD?$AAO?$AAW?$AA_?$AAM?$AAI?$AAN?$AAI@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_panel_l:

; 19208:     NK_ASSERT(!(layout->flags & NK_WINDOW_HIDDEN));

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 8192				; 00002000H
	je	SHORT $LN12@nk_panel_l
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_panel_layout@@9@9@ddf8d5d8
	add	edx, 27					; 0000001bH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EI@DELDILCF@?$AA?$CB?$AA?$CI?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAW?$AAI?$AAN?$AAD?$AAO?$AAW?$AA_?$AAH?$AAI?$AAD?$AAD@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_panel_l:

; 19209:     NK_ASSERT(!(layout->flags & NK_WINDOW_CLOSED));

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 16384				; 00004000H
	je	SHORT $LN13@nk_panel_l
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_panel_layout@@9@9@ddf8d5d8
	add	edx, 28					; 0000001cH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EI@PPLANDAM@?$AA?$CB?$AA?$CI?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAW?$AAI?$AAN?$AAD?$AAO?$AAW?$AA_?$AAC?$AAL?$AAO?$AAS@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_panel_l:

; 19210: 
; 19211:     /* update the current row and set the current row layout */
; 19212:     layout->row.index = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [eax+104], 0

; 19213:     layout->at_y += layout->row.height;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	addss	xmm0, DWORD PTR [ecx+108]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [edx+36], xmm0

; 19214:     layout->row.columns = cols;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _cols$[ebp]
	mov	DWORD PTR [eax+116], ecx

; 19215:     if (height == 0.0f)

	movss	xmm0, DWORD PTR _height$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@nk_panel_l

; 19216:         layout->row.height = NK_MAX(height, layout->row.min_height) + item_spacing.y;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+112]
	comiss	xmm0, DWORD PTR _height$[ebp]
	jbe	SHORT $LN14@nk_panel_l
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [ecx+112]
	movss	DWORD PTR tv167[ebp], xmm0
	jmp	SHORT $LN15@nk_panel_l
$LN14@nk_panel_l:
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR tv167[ebp], xmm0
$LN15@nk_panel_l:
	movss	xmm0, DWORD PTR tv167[ebp]
	addss	xmm0, DWORD PTR _item_spacing$[ebp+4]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [edx+108], xmm0
	jmp	SHORT $LN2@nk_panel_l
$LN3@nk_panel_l:

; 19217:     else layout->row.height = height + item_spacing.y;

	movss	xmm0, DWORD PTR _height$[ebp]
	addss	xmm0, DWORD PTR _item_spacing$[ebp+4]
	mov	eax, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [eax+108], xmm0
$LN2@nk_panel_l:

; 19218: 
; 19219:     layout->row.item_offset = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+132], xmm0

; 19220:     if (layout->flags & NK_WINDOW_DYNAMIC) {

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2048				; 00000800H
	je	SHORT $LN1@nk_panel_l

; 19221:         /* draw background for dynamic panels */
; 19222:         struct nk_rect background;
; 19223:         background.x = win->bounds.x;

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	movss	DWORD PTR _background$1[ebp], xmm0

; 19224:         background.w = win->bounds.w;

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR [eax+84]
	movss	DWORD PTR _background$1[ebp+8], xmm0

; 19225:         background.y = layout->at_y - 1.0f;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _background$1[ebp+4], xmm0

; 19226:         background.h = layout->row.height + 1.0f;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+108]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _background$1[ebp+12], xmm0

; 19227:         nk_fill_rect(out, background, 0, color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _background$1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _background$1[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _background$1[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _background$1[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH
$LN1@nk_panel_l:

; 19228:     }
; 19229: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@nk_panel_l
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@nk_panel_l:
	DD	3
	DD	$LN19@nk_panel_l
$LN19@nk_panel_l:
	DD	-52					; ffffffccH
	DD	8
	DD	$LN16@nk_panel_l
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN17@nk_panel_l
	DD	-88					; ffffffa8H
	DD	16					; 00000010H
	DD	$LN18@nk_panel_l
$LN18@nk_panel_l:
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN17@nk_panel_l:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN16@nk_panel_l:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
_nk_panel_layout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_row_calculate_usable_space
_TEXT	SEGMENT
tv73 = -264						; size = 4
_padding$ = -64						; size = 8
_spacing$ = -48						; size = 8
_panel_space$ = -32					; size = 4
_panel_spacing$ = -20					; size = 4
_panel_padding$ = -8					; size = 4
_style$ = 8						; size = 4
_type$ = 12						; size = 4
_total_space$ = 16					; size = 4
_columns$ = 20						; size = 4
_nk_layout_row_calculate_usable_space PROC		; COMDAT

; 19160: {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19161:     float panel_padding;
; 19162:     float panel_spacing;
; 19163:     float panel_space;
; 19164: 
; 19165:     struct nk_vec2 spacing;
; 19166:     struct nk_vec2 padding;
; 19167: 
; 19168:     spacing = style->window.spacing;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5308]
	mov	edx, DWORD PTR [eax+5312]
	mov	DWORD PTR _spacing$[ebp], ecx
	mov	DWORD PTR _spacing$[ebp+4], edx

; 19169:     padding = nk_panel_get_padding(style, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	push	ecx
	call	_nk_panel_get_padding
	add	esp, 8
	mov	DWORD PTR _padding$[ebp], eax
	mov	DWORD PTR _padding$[ebp+4], edx

; 19170: 
; 19171:     /* calculate the usable panel space */
; 19172:     panel_padding = 2 * padding.x;

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _padding$[ebp]
	movss	DWORD PTR _panel_padding$[ebp], xmm0

; 19173:     panel_spacing = (float)NK_MAX(columns - 1, 0) * spacing.x;

	mov	eax, DWORD PTR _columns$[ebp]
	sub	eax, 1
	jns	SHORT $LN3@nk_layout_
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN4@nk_layout_
$LN3@nk_layout_:
	mov	ecx, DWORD PTR _columns$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv73[ebp], ecx
$LN4@nk_layout_:
	cvtsi2ss xmm0, DWORD PTR tv73[ebp]
	mulss	xmm0, DWORD PTR _spacing$[ebp]
	movss	DWORD PTR _panel_spacing$[ebp], xmm0

; 19174:     panel_space  = total_space - panel_padding - panel_spacing;

	movss	xmm0, DWORD PTR _total_space$[ebp]
	subss	xmm0, DWORD PTR _panel_padding$[ebp]
	subss	xmm0, DWORD PTR _panel_spacing$[ebp]
	movss	DWORD PTR _panel_space$[ebp], xmm0

; 19175:     return panel_space;

	fld	DWORD PTR _panel_space$[ebp]

; 19176: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@nk_layout_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@nk_layout_:
	DD	2
	DD	$LN7@nk_layout_
$LN7@nk_layout_:
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN5@nk_layout_
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN6@nk_layout_
$LN6@nk_layout_:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN5@nk_layout_:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
_nk_layout_row_calculate_usable_space ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_insert_window
_TEXT	SEGMENT
_end$1 = -20						; size = 4
_iter$ = -8						; size = 4
_ctx$ = 8						; size = 4
_win$ = 12						; size = 4
_loc$ = 16						; size = 4
_nk_insert_window PROC					; COMDAT

; 18439: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18440:     const struct nk_window *iter;
; 18441:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN11@nk_insert_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_insert_window@@9@9@ddf8d5d8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_insert_:

; 18442:     NK_ASSERT(win);

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN12@nk_insert_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_insert_window@@9@9@ddf8d5d8
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17MIEKGGLN@?$AAw?$AAi?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_insert_:

; 18443:     if (!win || !ctx) return;

	cmp	DWORD PTR _win$[ebp], 0
	je	SHORT $LN7@nk_insert_
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN8@nk_insert_
$LN7@nk_insert_:
	jmp	$LN9@nk_insert_
$LN8@nk_insert_:

; 18444: 
; 18445:     iter = ctx->begin;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12928]
	mov	DWORD PTR _iter$[ebp], ecx
$LN6@nk_insert_:

; 18446:     while (iter) {

	cmp	DWORD PTR _iter$[ebp], 0
	je	SHORT $LN5@nk_insert_

; 18447:         NK_ASSERT(iter != iter->next);

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR _iter$[ebp]
	cmp	ecx, DWORD PTR [eax+376]
	jne	SHORT $LN13@nk_insert_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_insert_window@@9@9@ddf8d5d8
	add	edx, 8
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CG@NEBMOBMP@?$AAi?$AAt?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAi?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_insert_:

; 18448:         NK_ASSERT(iter != win);

	mov	eax, DWORD PTR _iter$[ebp]
	cmp	eax, DWORD PTR _win$[ebp]
	jne	SHORT $LN14@nk_insert_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_insert_window@@9@9@ddf8d5d8
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BI@HILBEPMH@?$AAi?$AAt?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAw?$AAi?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_insert_:

; 18449:         if (iter == win) return;

	mov	eax, DWORD PTR _iter$[ebp]
	cmp	eax, DWORD PTR _win$[ebp]
	jne	SHORT $LN4@nk_insert_
	jmp	$LN9@nk_insert_
$LN4@nk_insert_:

; 18450:         iter = iter->next;

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+376]
	mov	DWORD PTR _iter$[ebp], ecx

; 18451:     }

	jmp	SHORT $LN6@nk_insert_
$LN5@nk_insert_:

; 18452: 
; 18453:     if (!ctx->begin) {

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12928], 0
	jne	SHORT $LN3@nk_insert_

; 18454:         win->next = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+376], 0

; 18455:         win->prev = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+380], 0

; 18456:         ctx->begin = win;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+12928], ecx

; 18457:         ctx->end = win;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+12932], ecx

; 18458:         ctx->count = 1;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+12948], 1

; 18459:         return;

	jmp	$LN9@nk_insert_
$LN3@nk_insert_:

; 18460:     }
; 18461:     if (loc == NK_INSERT_BACK) {

	cmp	DWORD PTR _loc$[ebp], 0
	jne	$LN2@nk_insert_

; 18462:         struct nk_window *end;
; 18463:         end = ctx->end;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12932]
	mov	DWORD PTR _end$1[ebp], ecx

; 18464:         end->flags |= NK_WINDOW_ROM;

	mov	eax, DWORD PTR _end$1[ebp]
	mov	ecx, DWORD PTR [eax+72]
	or	ecx, 4096				; 00001000H
	mov	edx, DWORD PTR _end$1[ebp]
	mov	DWORD PTR [edx+72], ecx

; 18465:         end->next = win;

	mov	eax, DWORD PTR _end$1[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+376], ecx

; 18466:         win->prev = ctx->end;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+12932]
	mov	DWORD PTR [eax+380], edx

; 18467:         win->next = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+376], 0

; 18468:         ctx->end = win;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+12932], ecx

; 18469:         ctx->active = ctx->end;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+12932]
	mov	DWORD PTR [eax+12936], edx

; 18470:         ctx->end->flags &= ~(nk_flags)NK_WINDOW_ROM;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12932]
	mov	edx, DWORD PTR [ecx+72]
	and	edx, -4097				; ffffefffH
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12932]
	mov	DWORD PTR [ecx+72], edx

; 18471:     } else {

	jmp	SHORT $LN1@nk_insert_
$LN2@nk_insert_:

; 18472:         ctx->end->flags |= NK_WINDOW_ROM;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12932]
	mov	edx, DWORD PTR [ecx+72]
	or	edx, 4096				; 00001000H
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12932]
	mov	DWORD PTR [ecx+72], edx

; 18473:         ctx->begin->prev = win;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12928]
	mov	edx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+380], edx

; 18474:         win->next = ctx->begin;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+12928]
	mov	DWORD PTR [eax+376], edx

; 18475:         win->prev = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+380], 0

; 18476:         ctx->begin = win;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+12928], ecx

; 18477:         ctx->begin->flags &= ~(nk_flags)NK_WINDOW_ROM;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12928]
	mov	edx, DWORD PTR [ecx+72]
	and	edx, -4097				; ffffefffH
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12928]
	mov	DWORD PTR [ecx+72], edx
$LN1@nk_insert_:

; 18478:     }
; 18479:     ctx->count++;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12948]
	add	ecx, 1
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+12948], ecx
$LN9@nk_insert_:

; 18480: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_insert_window ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_find_window
_TEXT	SEGMENT
_max_len$1 = -20					; size = 4
_iter$ = -8						; size = 4
_ctx$ = 8						; size = 4
_hash$ = 12						; size = 4
_name$ = 16						; size = 4
_nk_find_window PROC					; COMDAT

; 18417: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18418:     struct nk_window *iter;
; 18419:     iter = ctx->begin;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12928]
	mov	DWORD PTR _iter$[ebp], ecx
$LN4@nk_find_wi:

; 18420:     while (iter) {

	cmp	DWORD PTR _iter$[ebp], 0
	je	SHORT $LN3@nk_find_wi

; 18421:         NK_ASSERT(iter != iter->next);

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR _iter$[ebp]
	cmp	ecx, DWORD PTR [eax+376]
	jne	SHORT $LN7@nk_find_wi
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_find_window@@9@9@ddf8d5d8
	add	edx, 4
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CG@NEBMOBMP@?$AAi?$AAt?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAi?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_find_wi:

; 18422:         if (iter->name == hash) {

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _hash$[ebp]
	jne	SHORT $LN2@nk_find_wi

; 18423:             int max_len = nk_strlen(iter->name_string);

	mov	eax, DWORD PTR _iter$[ebp]
	add	eax, 8
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _max_len$1[ebp], eax

; 18424:             if (!nk_stricmpn(iter->name_string, name, max_len))

	mov	eax, DWORD PTR _max_len$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iter$[ebp]
	add	edx, 8
	push	edx
	call	_nk_stricmpn
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@nk_find_wi

; 18425:                 return iter;

	mov	eax, DWORD PTR _iter$[ebp]
	jmp	SHORT $LN5@nk_find_wi
$LN2@nk_find_wi:

; 18426:         }
; 18427:         iter = iter->next;

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+376]
	mov	DWORD PTR _iter$[ebp], ecx

; 18428:     }

	jmp	SHORT $LN4@nk_find_wi
$LN3@nk_find_wi:

; 18429:     return 0;

	xor	eax, eax
$LN5@nk_find_wi:

; 18430: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_find_window ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_find_value
_TEXT	SEGMENT
_size$1 = -32						; size = 4
_i$2 = -20						; size = 4
_iter$ = -8						; size = 4
_win$ = 8						; size = 4
_name$ = 12						; size = 4
_nk_find_value PROC					; COMDAT

; 18356: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18357:     struct nk_table *iter = win->tables;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+368]
	mov	DWORD PTR _iter$[ebp], ecx
$LN6@nk_find_va:

; 18358:     while (iter) {

	cmp	DWORD PTR _iter$[ebp], 0
	je	SHORT $LN5@nk_find_va

; 18359:         unsigned int i = 0;

	mov	DWORD PTR _i$2[ebp], 0

; 18360:         unsigned int size = iter->size;

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _size$1[ebp], ecx

; 18361:         for (i = 0; i < size; ++i) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@nk_find_va
$LN3@nk_find_va:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@nk_find_va:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _size$1[ebp]
	jae	SHORT $LN2@nk_find_va

; 18362:             if (iter->keys[i] == name) {

	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _iter$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+8]
	cmp	edx, DWORD PTR _name$[ebp]
	jne	SHORT $LN1@nk_find_va

; 18363:                 iter->seq = win->seq;

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 18364:                 return &iter->values[i];

	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _iter$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4+212]
	jmp	SHORT $LN7@nk_find_va
$LN1@nk_find_va:

; 18365:             }

	jmp	SHORT $LN3@nk_find_va
$LN2@nk_find_va:

; 18366:         } size = NK_VALUE_PAGE_CAPACITY;

	mov	DWORD PTR _size$1[ebp], 51		; 00000033H

; 18367:         iter = iter->next;

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	mov	DWORD PTR _iter$[ebp], ecx

; 18368:     }

	jmp	SHORT $LN6@nk_find_va
$LN5@nk_find_va:

; 18369:     return 0;

	xor	eax, eax
$LN7@nk_find_va:

; 18370: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_find_value ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_add_value
_TEXT	SEGMENT
tv152 = -208						; size = 4
_tbl$1 = -8						; size = 4
_ctx$ = 8						; size = 4
_win$ = 12						; size = 4
_name$ = 16						; size = 4
_value$ = 20						; size = 4
_nk_add_value PROC					; COMDAT

; 18338: {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18339:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN8@nk_add_val
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_add_value@@9@9@ddf8d5d8
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_add_val:

; 18340:     NK_ASSERT(win);

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN9@nk_add_val
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_add_value@@9@9@ddf8d5d8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17MIEKGGLN@?$AAw?$AAi?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_add_val:

; 18341:     if (!win || !ctx) return 0;

	cmp	DWORD PTR _win$[ebp], 0
	je	SHORT $LN4@nk_add_val
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_add_val
$LN4@nk_add_val:
	xor	eax, eax
	jmp	$LN6@nk_add_val
$LN5@nk_add_val:

; 18342:     if (!win->tables || win->tables->size >= NK_VALUE_PAGE_CAPACITY) {

	mov	eax, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [eax+368], 0
	je	SHORT $LN2@nk_add_val
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+368]
	cmp	DWORD PTR [ecx+4], 51			; 00000033H
	jb	SHORT $LN3@nk_add_val
$LN2@nk_add_val:

; 18343:         struct nk_table *tbl = nk_create_table(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_create_table
	add	esp, 4
	mov	DWORD PTR _tbl$1[ebp], eax

; 18344:         NK_ASSERT(tbl);

	cmp	DWORD PTR _tbl$1[ebp], 0
	jne	SHORT $LN10@nk_add_val
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_add_value@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17IGALFJBG@?$AAt?$AAb?$AAl?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_add_val:

; 18345:         if (!tbl) return 0;

	cmp	DWORD PTR _tbl$1[ebp], 0
	jne	SHORT $LN1@nk_add_val
	xor	eax, eax
	jmp	$LN6@nk_add_val
$LN1@nk_add_val:

; 18346:         nk_push_table(win, tbl);

	mov	eax, DWORD PTR _tbl$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	call	_nk_push_table
	add	esp, 8
$LN3@nk_add_val:

; 18347:     }
; 18348:     win->tables->seq = win->seq;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+368]
	mov	edx, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 18349:     win->tables->keys[win->tables->size] = name;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+368]
	mov	edx, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [edx+368]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx+edx*4+8], eax

; 18350:     win->tables->values[win->tables->size] = value;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+368]
	mov	edx, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [edx+368]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx+edx*4+212], eax

; 18351:     return &win->tables->values[win->tables->size++];

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+368]
	mov	edx, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [edx+368]
	mov	edx, DWORD PTR [eax+4]
	lea	eax, DWORD PTR [ecx+edx*4+212]
	mov	DWORD PTR tv152[ebp], eax
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+368]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+368]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv152[ebp]
$LN6@nk_add_val:

; 18352: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_add_value ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_push_table
_TEXT	SEGMENT
_win$ = 8						; size = 4
_tbl$ = 12						; size = 4
_nk_push_table PROC					; COMDAT

; 18305: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18306:     if (!win->tables) {

	mov	eax, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [eax+368], 0
	jne	SHORT $LN1@nk_push_ta

; 18307:         win->tables = tbl;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _tbl$[ebp]
	mov	DWORD PTR [eax+368], ecx

; 18308:         tbl->next = 0;

	mov	eax, DWORD PTR _tbl$[ebp]
	mov	DWORD PTR [eax+416], 0

; 18309:         tbl->prev = 0;

	mov	eax, DWORD PTR _tbl$[ebp]
	mov	DWORD PTR [eax+420], 0

; 18310:         tbl->size = 0;

	mov	eax, DWORD PTR _tbl$[ebp]
	mov	DWORD PTR [eax+4], 0

; 18311:         win->table_count = 1;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+372], 1

; 18312:         return;

	jmp	SHORT $LN2@nk_push_ta
$LN1@nk_push_ta:

; 18313:     }
; 18314:     win->tables->prev = tbl;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+368]
	mov	edx, DWORD PTR _tbl$[ebp]
	mov	DWORD PTR [ecx+420], edx

; 18315:     tbl->next = win->tables;

	mov	eax, DWORD PTR _tbl$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+368]
	mov	DWORD PTR [eax+416], edx

; 18316:     tbl->prev = 0;

	mov	eax, DWORD PTR _tbl$[ebp]
	mov	DWORD PTR [eax+420], 0

; 18317:     tbl->size = 0;

	mov	eax, DWORD PTR _tbl$[ebp]
	mov	DWORD PTR [eax+4], 0

; 18318:     win->tables = tbl;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _tbl$[ebp]
	mov	DWORD PTR [eax+368], ecx

; 18319:     win->table_count++;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+372]
	add	ecx, 1
	mov	edx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [edx+372], ecx
$LN2@nk_push_ta:

; 18320: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_push_table ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_create_table
_TEXT	SEGMENT
_elem$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_create_table PROC					; COMDAT

; 18287: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18288:     struct nk_page_element *elem;
; 18289:     elem = nk_create_page_element(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_create_page_element
	add	esp, 4
	mov	DWORD PTR _elem$[ebp], eax

; 18290:     if (!elem) return 0;

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN1@nk_create_
	xor	eax, eax
	jmp	SHORT $LN2@nk_create_
$LN1@nk_create_:

; 18291:     nk_zero_struct(*elem);

	push	432					; 000001b0H
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 18292:     return &elem->data.tbl;

	mov	eax, DWORD PTR _elem$[ebp]
$LN2@nk_create_:

; 18293: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_create_table ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_free_page_element
_TEXT	SEGMENT
_buffer_end$1 = -20					; size = 4
_elem_end$2 = -8					; size = 4
_ctx$ = 8						; size = 4
_elem$ = 12						; size = 4
_nk_free_page_element PROC				; COMDAT

; 18243: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18244:     /* we have a pool so just add to free list */
; 18245:     if (ctx->use_pool) {

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12884], 0
	je	SHORT $LN3@nk_free_pa

; 18246:         nk_link_page_element_into_freelist(ctx, elem);

	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_link_page_element_into_freelist
	add	esp, 8

; 18247:         return;

	jmp	SHORT $LN4@nk_free_pa
$LN3@nk_free_pa:

; 18248:     }
; 18249:     /* if possible remove last element from back of fixed memory buffer */
; 18250:     {void *elem_end = (void*)(elem + 1);

	mov	eax, DWORD PTR _elem$[ebp]
	add	eax, 432				; 000001b0H
	mov	DWORD PTR _elem_end$2[ebp], eax

; 18251:     void *buffer_end = (nk_byte*)ctx->memory.memory.ptr + ctx->memory.size;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5780]
	mov	edx, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [edx+5804]
	mov	DWORD PTR _buffer_end$1[ebp], ecx

; 18252:     if (elem_end == buffer_end)

	mov	eax, DWORD PTR _elem_end$2[ebp]
	cmp	eax, DWORD PTR _buffer_end$1[ebp]
	jne	SHORT $LN2@nk_free_pa

; 18253:         ctx->memory.size -= sizeof(struct nk_page_element);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5804]
	sub	ecx, 432				; 000001b0H
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+5804], ecx
	jmp	SHORT $LN4@nk_free_pa
$LN2@nk_free_pa:

; 18254:     else nk_link_page_element_into_freelist(ctx, elem);}

	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_link_page_element_into_freelist
	add	esp, 8
$LN4@nk_free_pa:

; 18255: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_free_page_element ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_link_page_element_into_freelist
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_elem$ = 12						; size = 4
_nk_link_page_element_into_freelist PROC		; COMDAT

; 18231: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18232:     /* link table into freelist */
; 18233:     if (!ctx->freelist) {

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12944], 0
	jne	SHORT $LN2@nk_link_pa

; 18234:         ctx->freelist = elem;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	DWORD PTR [eax+12944], ecx

; 18235:     } else {

	jmp	SHORT $LN3@nk_link_pa
$LN2@nk_link_pa:

; 18236:         elem->next = ctx->freelist;

	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+12944]
	mov	DWORD PTR [eax+424], edx

; 18237:         ctx->freelist = elem;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	DWORD PTR [eax+12944], ecx
$LN3@nk_link_pa:

; 18238:     }
; 18239: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_link_page_element_into_freelist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_create_page_element
_TEXT	SEGMENT
_elem$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_create_page_element PROC				; COMDAT

; 18203: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18204:     struct nk_page_element *elem;
; 18205:     if (ctx->freelist) {

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12944], 0
	je	SHORT $LN6@nk_create_

; 18206:         /* unlink page element from free list */
; 18207:         elem = ctx->freelist;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12944]
	mov	DWORD PTR _elem$[ebp], ecx

; 18208:         ctx->freelist = elem->next;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+424]
	mov	DWORD PTR [eax+12944], edx
	jmp	$LN5@nk_create_
$LN6@nk_create_:

; 18209:     } else if (ctx->use_pool) {

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12884], 0
	je	SHORT $LN4@nk_create_

; 18210:         /* allocate page element from memory pool */
; 18211:         elem = nk_pool_alloc(&ctx->pool);

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 12888				; 00003258H
	push	eax
	call	_nk_pool_alloc
	add	esp, 4
	mov	DWORD PTR _elem$[ebp], eax

; 18212:         NK_ASSERT(elem);

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN9@nk_create_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_create_page_element@@9@9@ddf8d5d8
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19DNIKFMHO@?$AAe?$AAl?$AAe?$AAm?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_create_:

; 18213:         if (!elem) return 0;

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN3@nk_create_
	xor	eax, eax
	jmp	SHORT $LN7@nk_create_
$LN3@nk_create_:

; 18214:     } else {

	jmp	SHORT $LN5@nk_create_
$LN4@nk_create_:

; 18215:         /* allocate new page element from back of fixed size memory buffer */
; 18216:         NK_STORAGE const nk_size size = sizeof(struct nk_page_element);
; 18217:         NK_STORAGE const nk_size align = NK_ALIGNOF(struct nk_page_element);
; 18218:         elem = (struct nk_page_element*)nk_buffer_alloc(&ctx->memory, NK_BUFFER_BACK, size, align);

	mov	eax, DWORD PTR ?align@?4??nk_create_page_element@@9@9
	push	eax
	mov	ecx, DWORD PTR ?size@?4??nk_create_page_element@@9@9
	push	ecx
	push	1
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 5748				; 00001674H
	push	edx
	call	_nk_buffer_alloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _elem$[ebp], eax

; 18219:         NK_ASSERT(elem);

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN10@nk_create_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_create_page_element@@9@9@ddf8d5d8
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19DNIKFMHO@?$AAe?$AAl?$AAe?$AAm?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_create_:

; 18220:         if (!elem) return 0;

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN5@nk_create_
	xor	eax, eax
	jmp	SHORT $LN7@nk_create_
$LN5@nk_create_:

; 18221:     }
; 18222:     nk_zero_struct(*elem);

	push	432					; 000001b0H
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 18223:     elem->next = 0;

	mov	eax, DWORD PTR _elem$[ebp]
	mov	DWORD PTR [eax+424], 0

; 18224:     elem->prev = 0;

	mov	eax, DWORD PTR _elem$[ebp]
	mov	DWORD PTR [eax+428], 0

; 18225:     return elem;

	mov	eax, DWORD PTR _elem$[ebp]
$LN7@nk_create_:

; 18226: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_create_page_element ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_panel_end
_TEXT	SEGMENT
tv1103 = -604						; size = 8
tv1015 = -604						; size = 8
tv448 = -600						; size = 4
tv1099 = -596						; size = 4
tv1011 = -596						; size = 4
tv450 = -596						; size = 4
tv408 = -596						; size = 4
tv288 = -596						; size = 4
tv134 = -596						; size = 4
_delta_x$1 = -396					; size = 4
_left_mouse_click_in_scaler$2 = -384			; size = 4
_left_mouse_down$3 = -372				; size = 4
_window_size$4 = -360					; size = 8
_item$5 = -344						; size = 4
_scaler$6 = -332					; size = 16
_padding_y$7 = -308					; size = 4
_border_color$8 = -296					; size = 4
_any_item_active$9 = -284				; size = 4
_is_window_hovered$10 = -272				; size = 4
_has_input$11 = -260					; size = 4
_state$12 = -248					; size = 4
_state$13 = -236					; size = 4
_root_panel$14 = -224					; size = 4
_root_window$15 = -212					; size = 4
_scroll_inc$16 = -200					; size = 4
_scroll_step$17 = -188					; size = 4
_scroll_offset$18 = -176				; size = 4
_scroll_target$19 = -164				; size = 4
_scroll_has_scrolling$20 = -152				; size = 4
_scroll$21 = -140					; size = 16
_empty_space$22 = -116					; size = 16
_panel_padding$ = -92					; size = 8
_scrollbar_size$ = -76					; size = 8
_out$ = -60						; size = 4
_style$ = -48						; size = 4
_layout$ = -36						; size = 4
_window$ = -24						; size = 4
_in$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_nk_panel_end PROC					; COMDAT

; 17886: {

	push	ebp
	mov	ebp, esp
	sub	esp, 604				; 0000025cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-604]
	mov	ecx, 151				; 00000097H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 17887:     struct nk_input *in;
; 17888:     struct nk_window *window;
; 17889:     struct nk_panel *layout;
; 17890:     const struct nk_style *style;
; 17891:     struct nk_command_buffer *out;
; 17892: 
; 17893:     struct nk_vec2 scrollbar_size;
; 17894:     struct nk_vec2 panel_padding;
; 17895: 
; 17896:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN62@nk_panel_e
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_panel_end@@9@9@ddf8d5d8
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN62@nk_panel_e:

; 17897:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN63@nk_panel_e
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_panel_end@@9@9@ddf8d5d8
	add	ecx, 11					; 0000000bH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN63@nk_panel_e:

; 17898:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN64@nk_panel_e
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_panel_end@@9@9@ddf8d5d8
	add	edx, 12					; 0000000cH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN64@nk_panel_e:

; 17899:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN58@nk_panel_e
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN58@nk_panel_e
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN59@nk_panel_e
$LN58@nk_panel_e:

; 17900:         return;

	jmp	$LN75@nk_panel_e
$LN59@nk_panel_e:

; 17901: 
; 17902:     window = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _window$[ebp], ecx

; 17903:     layout = window->layout;

	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 17904:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 17905:     out = &window->buffer;

	mov	eax, DWORD PTR _window$[ebp]
	add	eax, 100				; 00000064H
	mov	DWORD PTR _out$[ebp], eax

; 17906:     in = (layout->flags & NK_WINDOW_ROM || layout->flags & NK_WINDOW_NO_INPUT) ? 0 :&ctx->input;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN65@nk_panel_e
	mov	edx, DWORD PTR _layout$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN65@nk_panel_e
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv134[ebp], ecx
	jmp	SHORT $LN66@nk_panel_e
$LN65@nk_panel_e:
	mov	DWORD PTR tv134[ebp], 0
$LN66@nk_panel_e:
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR _in$[ebp], edx

; 17907:     if (!nk_panel_is_sub(layout->type))

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_nk_panel_is_sub
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN57@nk_panel_e

; 17908:         nk_push_scissor(out, nk_null_rect);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _nk_null_rect
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _nk_null_rect+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _nk_null_rect+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _nk_null_rect+12
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_push_scissor
	add	esp, 20					; 00000014H
$LN57@nk_panel_e:

; 17909: 
; 17910:     /* cache configuration data */
; 17911:     scrollbar_size = style->window.scrollbar_size;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5316]
	mov	edx, DWORD PTR [eax+5320]
	mov	DWORD PTR _scrollbar_size$[ebp], ecx
	mov	DWORD PTR _scrollbar_size$[ebp+4], edx

; 17912:     panel_padding = nk_panel_get_padding(style, layout->type);

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	edx
	call	_nk_panel_get_padding
	add	esp, 8
	mov	DWORD PTR _panel_padding$[ebp], eax
	mov	DWORD PTR _panel_padding$[ebp+4], edx

; 17913: 
; 17914:     /* update the current cursor Y-position to point over the last added widget */
; 17915:     layout->at_y += layout->row.height;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	addss	xmm0, DWORD PTR [ecx+108]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [edx+36], xmm0

; 17916: 
; 17917:     /* dynamic panels */
; 17918:     if (layout->flags & NK_WINDOW_DYNAMIC && !(layout->flags & NK_WINDOW_MINIMIZED))

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2048				; 00000800H
	je	$LN53@nk_panel_e
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32768				; 00008000H
	jne	$LN53@nk_panel_e

; 17919:     {
; 17920:         /* update panel height to fit dynamic growth */
; 17921:         struct nk_rect empty_space;
; 17922:         if (layout->at_y < (layout->bounds.y + layout->bounds.h))

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _layout$[ebp]
	comiss	xmm0, DWORD PTR [edx+36]
	jbe	SHORT $LN55@nk_panel_e

; 17923:             layout->bounds.h = layout->at_y - layout->bounds.y;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	subss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [edx+20], xmm0
$LN55@nk_panel_e:

; 17924: 
; 17925:         /* fill top empty space */
; 17926:         empty_space.x = window->bounds.x;

	mov	eax, DWORD PTR _window$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	movss	DWORD PTR _empty_space$22[ebp], xmm0

; 17927:         empty_space.y = layout->bounds.y;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _empty_space$22[ebp+4], xmm0

; 17928:         empty_space.h = panel_padding.y;

	movss	xmm0, DWORD PTR _panel_padding$[ebp+4]
	movss	DWORD PTR _empty_space$22[ebp+12], xmm0

; 17929:         empty_space.w = window->bounds.w;

	mov	eax, DWORD PTR _window$[ebp]
	movss	xmm0, DWORD PTR [eax+84]
	movss	DWORD PTR _empty_space$22[ebp+8], xmm0

; 17930:         nk_fill_rect(out, empty_space, 0, style->window.background);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5220]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _empty_space$22[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _empty_space$22[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _empty_space$22[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _empty_space$22[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 17931: 
; 17932:         /* fill left empty space */
; 17933:         empty_space.x = window->bounds.x;

	mov	eax, DWORD PTR _window$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	movss	DWORD PTR _empty_space$22[ebp], xmm0

; 17934:         empty_space.y = layout->bounds.y;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _empty_space$22[ebp+4], xmm0

; 17935:         empty_space.w = panel_padding.x + layout->border;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR _panel_padding$[ebp]
	addss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR _empty_space$22[ebp+8], xmm0

; 17936:         empty_space.h = layout->bounds.h;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _empty_space$22[ebp+12], xmm0

; 17937:         nk_fill_rect(out, empty_space, 0, style->window.background);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5220]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _empty_space$22[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _empty_space$22[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _empty_space$22[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _empty_space$22[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 17938: 
; 17939:         /* fill right empty space */
; 17940:         empty_space.x = layout->bounds.x + layout->bounds.w - layout->border;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _layout$[ebp]
	subss	xmm0, DWORD PTR [edx+52]
	movss	DWORD PTR _empty_space$22[ebp], xmm0

; 17941:         empty_space.y = layout->bounds.y;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _empty_space$22[ebp+4], xmm0

; 17942:         empty_space.w = panel_padding.x + layout->border;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR _panel_padding$[ebp]
	addss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR _empty_space$22[ebp+8], xmm0

; 17943:         empty_space.h = layout->bounds.h;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _empty_space$22[ebp+12], xmm0

; 17944:         if (*layout->offset_y == 0 && !(layout->flags & NK_WINDOW_NO_SCROLLBAR))

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN54@nk_panel_e
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32					; 00000020H
	jne	SHORT $LN54@nk_panel_e

; 17945:             empty_space.w += scrollbar_size.x;

	movss	xmm0, DWORD PTR _empty_space$22[ebp+8]
	addss	xmm0, DWORD PTR _scrollbar_size$[ebp]
	movss	DWORD PTR _empty_space$22[ebp+8], xmm0
$LN54@nk_panel_e:

; 17946:         nk_fill_rect(out, empty_space, 0, style->window.background);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5220]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _empty_space$22[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _empty_space$22[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _empty_space$22[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _empty_space$22[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 17947: 
; 17948:         /* fill bottom empty space */
; 17949:         if (*layout->offset_x != 0 && !(layout->flags & NK_WINDOW_NO_SCROLLBAR)) {

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	DWORD PTR [ecx], 0
	je	$LN53@nk_panel_e
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32					; 00000020H
	jne	SHORT $LN53@nk_panel_e

; 17950:             empty_space.x = window->bounds.x;

	mov	eax, DWORD PTR _window$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	movss	DWORD PTR _empty_space$22[ebp], xmm0

; 17951:             empty_space.y = layout->bounds.y + layout->bounds.h;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [ecx+20]
	movss	DWORD PTR _empty_space$22[ebp+4], xmm0

; 17952:             empty_space.w = window->bounds.w;

	mov	eax, DWORD PTR _window$[ebp]
	movss	xmm0, DWORD PTR [eax+84]
	movss	DWORD PTR _empty_space$22[ebp+8], xmm0

; 17953:             empty_space.h = scrollbar_size.y;

	movss	xmm0, DWORD PTR _scrollbar_size$[ebp+4]
	movss	DWORD PTR _empty_space$22[ebp+12], xmm0

; 17954:             nk_fill_rect(out, empty_space, 0, style->window.background);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5220]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _empty_space$22[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _empty_space$22[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _empty_space$22[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _empty_space$22[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH
$LN53@nk_panel_e:

; 17955:         }
; 17956:     }
; 17957: 
; 17958:     /* scrollbars */
; 17959:     if (!(layout->flags & NK_WINDOW_NO_SCROLLBAR) &&
; 17960:         !(layout->flags & NK_WINDOW_MINIMIZED) &&
; 17961:         window->scrollbar_hiding_timer < NK_SCROLLBAR_HIDING_TIMEOUT)

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32					; 00000020H
	jne	$LN52@nk_panel_e
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32768				; 00008000H
	jne	$LN52@nk_panel_e
	mov	eax, DWORD PTR _window$[ebp]
	movss	xmm0, DWORD PTR __real@40800000
	comiss	xmm0, DWORD PTR [eax+144]
	jbe	$LN52@nk_panel_e

; 17962:     {
; 17963:         struct nk_rect scroll;
; 17964:         int scroll_has_scrolling;
; 17965:         float scroll_target;
; 17966:         float scroll_offset;
; 17967:         float scroll_step;
; 17968:         float scroll_inc;
; 17969: 
; 17970:         /* mouse wheel scrolling */
; 17971:         if (nk_panel_is_sub(layout->type))

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_nk_panel_is_sub
	add	esp, 4
	test	eax, eax
	je	$LN51@nk_panel_e

; 17972:         {
; 17973:             /* sub-window mouse wheel scrolling */
; 17974:             struct nk_window *root_window = window;

	mov	eax, DWORD PTR _window$[ebp]
	mov	DWORD PTR _root_window$15[ebp], eax

; 17975:             struct nk_panel *root_panel = window->layout;

	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _root_panel$14[ebp], ecx
$LN50@nk_panel_e:

; 17976:             while (root_panel->parent)

	mov	eax, DWORD PTR _root_panel$14[ebp]
	cmp	DWORD PTR [eax+408], 0
	je	SHORT $LN49@nk_panel_e

; 17977:                 root_panel = root_panel->parent;

	mov	eax, DWORD PTR _root_panel$14[ebp]
	mov	ecx, DWORD PTR [eax+408]
	mov	DWORD PTR _root_panel$14[ebp], ecx
	jmp	SHORT $LN50@nk_panel_e
$LN49@nk_panel_e:

; 17978:             while (root_window->parent)

	mov	eax, DWORD PTR _root_window$15[ebp]
	cmp	DWORD PTR [eax+384], 0
	je	SHORT $LN47@nk_panel_e

; 17979:                 root_window = root_window->parent;

	mov	eax, DWORD PTR _root_window$15[ebp]
	mov	ecx, DWORD PTR [eax+384]
	mov	DWORD PTR _root_window$15[ebp], ecx
	jmp	SHORT $LN49@nk_panel_e
$LN47@nk_panel_e:

; 17980: 
; 17981:             /* only allow scrolling if parent window is active */
; 17982:             scroll_has_scrolling = 0;

	mov	DWORD PTR _scroll_has_scrolling$20[ebp], 0

; 17983:             if ((root_window == ctx->active) && layout->has_scrolling) {

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _root_window$15[ebp]
	cmp	ecx, DWORD PTR [eax+12936]
	jne	$LN45@nk_panel_e
	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	$LN45@nk_panel_e

; 17984:                 /* and panel is being hovered and inside clip rect*/
; 17985:                 if (nk_input_is_mouse_hovering_rect(in, layout->bounds) &&
; 17986:                     NK_INTERSECT(layout->bounds.x, layout->bounds.y, layout->bounds.w, layout->bounds.h,
; 17987:                         root_panel->clip.x, root_panel->clip.y, root_panel->clip.w, root_panel->clip.h))

	mov	eax, DWORD PTR _layout$[ebp]
	add	eax, 8
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN45@nk_panel_e
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _root_panel$14[ebp]
	movss	xmm1, DWORD PTR [edx+60]
	comiss	xmm1, xmm0
	ja	$LN45@nk_panel_e
	mov	eax, DWORD PTR _root_panel$14[ebp]
	mov	ecx, DWORD PTR _root_panel$14[ebp]
	movss	xmm0, DWORD PTR [eax+60]
	addss	xmm0, DWORD PTR [ecx+68]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	comiss	xmm1, xmm0
	ja	$LN45@nk_panel_e
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _root_panel$14[ebp]
	movss	xmm1, DWORD PTR [edx+64]
	comiss	xmm1, xmm0
	ja	SHORT $LN45@nk_panel_e
	mov	eax, DWORD PTR _root_panel$14[ebp]
	mov	ecx, DWORD PTR _root_panel$14[ebp]
	movss	xmm0, DWORD PTR [eax+64]
	addss	xmm0, DWORD PTR [ecx+72]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	comiss	xmm1, xmm0
	ja	SHORT $LN45@nk_panel_e

; 17988:                 {
; 17989:                     /* deactivate all parent scrolling */
; 17990:                     root_panel = window->layout;

	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _root_panel$14[ebp], ecx
$LN44@nk_panel_e:

; 17991:                     while (root_panel->parent) {

	mov	eax, DWORD PTR _root_panel$14[ebp]
	cmp	DWORD PTR [eax+408], 0
	je	SHORT $LN43@nk_panel_e

; 17992:                         root_panel->has_scrolling = nk_false;

	mov	eax, DWORD PTR _root_panel$14[ebp]
	mov	DWORD PTR [eax+56], 0

; 17993:                         root_panel = root_panel->parent;

	mov	eax, DWORD PTR _root_panel$14[ebp]
	mov	ecx, DWORD PTR [eax+408]
	mov	DWORD PTR _root_panel$14[ebp], ecx

; 17994:                     }

	jmp	SHORT $LN44@nk_panel_e
$LN43@nk_panel_e:

; 17995:                     root_panel->has_scrolling = nk_false;

	mov	eax, DWORD PTR _root_panel$14[ebp]
	mov	DWORD PTR [eax+56], 0

; 17996:                     scroll_has_scrolling = nk_true;

	mov	DWORD PTR _scroll_has_scrolling$20[ebp], 1
$LN45@nk_panel_e:

; 17997:                 }
; 17998:             }

	jmp	$LN37@nk_panel_e
$LN51@nk_panel_e:

; 17999:         } else if (!nk_panel_is_sub(layout->type)) {

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_nk_panel_is_sub
	add	esp, 4
	test	eax, eax
	jne	$LN41@nk_panel_e

; 18000:             /* window mouse wheel scrolling */
; 18001:             scroll_has_scrolling = (window == ctx->active) && layout->has_scrolling;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _window$[ebp]
	cmp	ecx, DWORD PTR [eax+12936]
	jne	SHORT $LN67@nk_panel_e
	mov	edx, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [edx+56], 0
	je	SHORT $LN67@nk_panel_e
	mov	DWORD PTR tv288[ebp], 1
	jmp	SHORT $LN68@nk_panel_e
$LN67@nk_panel_e:
	mov	DWORD PTR tv288[ebp], 0
$LN68@nk_panel_e:
	mov	eax, DWORD PTR tv288[ebp]
	mov	DWORD PTR _scroll_has_scrolling$20[ebp], eax

; 18002:             if (in && (in->mouse.scroll_delta.y > 0 || in->mouse.scroll_delta.x > 0) && scroll_has_scrolling)

	cmp	DWORD PTR _in$[ebp], 0
	je	SHORT $LN40@nk_panel_e
	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+352]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN39@nk_panel_e
	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+348]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN40@nk_panel_e
$LN39@nk_panel_e:
	cmp	DWORD PTR _scroll_has_scrolling$20[ebp], 0
	je	SHORT $LN40@nk_panel_e

; 18003:                 window->scrolled = nk_true;

	mov	eax, DWORD PTR _window$[ebp]
	mov	DWORD PTR [eax+364], 1
	jmp	SHORT $LN38@nk_panel_e
$LN40@nk_panel_e:

; 18004:             else window->scrolled = nk_false;

	mov	eax, DWORD PTR _window$[ebp]
	mov	DWORD PTR [eax+364], 0
$LN38@nk_panel_e:

; 18005:         } else scroll_has_scrolling = nk_false;

	jmp	SHORT $LN37@nk_panel_e
$LN41@nk_panel_e:
	mov	DWORD PTR _scroll_has_scrolling$20[ebp], 0
$LN37@nk_panel_e:

; 18006: 
; 18007:         {
; 18008:             /* vertical scrollbar */
; 18009:             nk_flags state = 0;

	mov	DWORD PTR _state$13[ebp], 0

; 18010:             scroll.x = layout->bounds.x + layout->bounds.w + panel_padding.x;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, DWORD PTR _panel_padding$[ebp]
	movss	DWORD PTR _scroll$21[ebp], xmm0

; 18011:             scroll.y = layout->bounds.y;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _scroll$21[ebp+4], xmm0

; 18012:             scroll.w = scrollbar_size.x;

	movss	xmm0, DWORD PTR _scrollbar_size$[ebp]
	movss	DWORD PTR _scroll$21[ebp+8], xmm0

; 18013:             scroll.h = layout->bounds.h;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _scroll$21[ebp+12], xmm0

; 18014: 
; 18015:             scroll_offset = (float)*layout->offset_y;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv1011[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv1011[ebp]
	mov	eax, DWORD PTR tv1011[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv1015[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1015[ebp]
	movss	DWORD PTR _scroll_offset$18[ebp], xmm0

; 18016:             scroll_step = scroll.h * 0.10f;

	movss	xmm0, DWORD PTR _scroll$21[ebp+12]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _scroll_step$17[ebp], xmm0

; 18017:             scroll_inc = scroll.h * 0.01f;

	movss	xmm0, DWORD PTR _scroll$21[ebp+12]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR _scroll_inc$16[ebp], xmm0

; 18018:             scroll_target = (float)(int)(layout->at_y - scroll.y);

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	subss	xmm0, DWORD PTR _scroll$21[ebp+4]
	cvttss2si ecx, xmm0
	cvtsi2ss xmm0, ecx
	movss	DWORD PTR _scroll_target$19[ebp], xmm0

; 18019:             scroll_offset = nk_do_scrollbarv(&state, out, scroll, scroll_has_scrolling,
; 18020:                 scroll_offset, scroll_target, scroll_step, scroll_inc,
; 18021:                 &ctx->style.scrollv, in, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 3924				; 00000f54H
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _scroll_inc$16[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scroll_step$17[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scroll_target$19[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scroll_offset$18[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _scroll_has_scrolling$20[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _scroll$21[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _scroll$21[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _scroll$21[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _scroll$21[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	lea	eax, DWORD PTR _state$13[ebp]
	push	eax
	call	_nk_do_scrollbarv
	add	esp, 56					; 00000038H
	fstp	DWORD PTR _scroll_offset$18[ebp]

; 18022:             *layout->offset_y = (nk_uint)scroll_offset;

	movss	xmm0, DWORD PTR _scroll_offset$18[ebp]
	call	__ftoui3
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx], eax

; 18023:             if (in && scroll_has_scrolling)

	cmp	DWORD PTR _in$[ebp], 0
	je	SHORT $LN36@nk_panel_e
	cmp	DWORD PTR _scroll_has_scrolling$20[ebp], 0
	je	SHORT $LN36@nk_panel_e

; 18024:                 in->mouse.scroll_delta.y = 0;

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+352], xmm0
$LN36@nk_panel_e:

; 18025:         }
; 18026:         {
; 18027:             /* horizontal scrollbar */
; 18028:             nk_flags state = 0;

	mov	DWORD PTR _state$12[ebp], 0

; 18029:             scroll.x = layout->bounds.x;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _scroll$21[ebp], xmm0

; 18030:             scroll.y = layout->bounds.y + layout->bounds.h;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [ecx+20]
	movss	DWORD PTR _scroll$21[ebp+4], xmm0

; 18031:             scroll.w = layout->bounds.w;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR _scroll$21[ebp+8], xmm0

; 18032:             scroll.h = scrollbar_size.y;

	movss	xmm0, DWORD PTR _scrollbar_size$[ebp+4]
	movss	DWORD PTR _scroll$21[ebp+12], xmm0

; 18033: 
; 18034:             scroll_offset = (float)*layout->offset_x;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv1099[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv1099[ebp]
	mov	eax, DWORD PTR tv1099[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv1103[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1103[ebp]
	movss	DWORD PTR _scroll_offset$18[ebp], xmm0

; 18035:             scroll_target = (float)(int)(layout->max_x - scroll.x);

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	subss	xmm0, DWORD PTR _scroll$21[ebp]
	cvttss2si ecx, xmm0
	cvtsi2ss xmm0, ecx
	movss	DWORD PTR _scroll_target$19[ebp], xmm0

; 18036:             scroll_step = layout->max_x * 0.05f;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR _scroll_step$17[ebp], xmm0

; 18037:             scroll_inc = layout->max_x * 0.005f;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	mulss	xmm0, DWORD PTR __real@3ba3d70a
	movss	DWORD PTR _scroll_inc$16[ebp], xmm0

; 18038:             scroll_offset = nk_do_scrollbarh(&state, out, scroll, scroll_has_scrolling,
; 18039:                 scroll_offset, scroll_target, scroll_step, scroll_inc,
; 18040:                 &ctx->style.scrollh, in, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 3492				; 00000da4H
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _scroll_inc$16[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scroll_step$17[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scroll_target$19[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scroll_offset$18[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _scroll_has_scrolling$20[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _scroll$21[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _scroll$21[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _scroll$21[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _scroll$21[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	lea	eax, DWORD PTR _state$12[ebp]
	push	eax
	call	_nk_do_scrollbarh
	add	esp, 56					; 00000038H
	fstp	DWORD PTR _scroll_offset$18[ebp]

; 18041:             *layout->offset_x = (nk_uint)scroll_offset;

	movss	xmm0, DWORD PTR _scroll_offset$18[ebp]
	call	__ftoui3
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [edx], eax
$LN52@nk_panel_e:

; 18042:         }
; 18043:     }
; 18044: 
; 18045:     /* hide scroll if no user input */
; 18046:     if (window->flags & NK_WINDOW_SCROLL_AUTO_HIDE) {

	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 128				; 00000080H
	je	$LN35@nk_panel_e

; 18047:         int has_input = ctx->input.mouse.delta.x != 0 || ctx->input.mouse.delta.y != 0 || ctx->input.mouse.scroll_delta.y != 0;

	mov	eax, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR [eax+340]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN69@nk_panel_e
	mov	ecx, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR [ecx+344]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN69@nk_panel_e
	mov	edx, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR [edx+352]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN69@nk_panel_e
	mov	DWORD PTR tv408[ebp], 0
	jmp	SHORT $LN70@nk_panel_e
$LN69@nk_panel_e:
	mov	DWORD PTR tv408[ebp], 1
$LN70@nk_panel_e:
	mov	eax, DWORD PTR tv408[ebp]
	mov	DWORD PTR _has_input$11[ebp], eax

; 18048:         int is_window_hovered = nk_window_is_hovered(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_window_is_hovered
	add	esp, 4
	mov	DWORD PTR _is_window_hovered$10[ebp], eax

; 18049:         int any_item_active = (ctx->last_widget_state & NK_WIDGET_STATE_MODIFIED);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 2
	mov	DWORD PTR _any_item_active$9[ebp], ecx

; 18050:         if ((!has_input && is_window_hovered) || (!is_window_hovered && !any_item_active))

	cmp	DWORD PTR _has_input$11[ebp], 0
	jne	SHORT $LN32@nk_panel_e
	cmp	DWORD PTR _is_window_hovered$10[ebp], 0
	jne	SHORT $LN33@nk_panel_e
$LN32@nk_panel_e:
	cmp	DWORD PTR _is_window_hovered$10[ebp], 0
	jne	SHORT $LN34@nk_panel_e
	cmp	DWORD PTR _any_item_active$9[ebp], 0
	jne	SHORT $LN34@nk_panel_e
$LN33@nk_panel_e:

; 18051:             window->scrollbar_hiding_timer += ctx->delta_time_seconds;

	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR [eax+144]
	addss	xmm0, DWORD PTR [ecx+7328]
	mov	edx, DWORD PTR _window$[ebp]
	movss	DWORD PTR [edx+144], xmm0
	jmp	SHORT $LN31@nk_panel_e
$LN34@nk_panel_e:

; 18052:         else window->scrollbar_hiding_timer = 0;

	mov	eax, DWORD PTR _window$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+144], xmm0
$LN31@nk_panel_e:

; 18053:     } else window->scrollbar_hiding_timer = 0;

	jmp	SHORT $LN30@nk_panel_e
$LN35@nk_panel_e:
	mov	eax, DWORD PTR _window$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+144], xmm0
$LN30@nk_panel_e:

; 18054: 
; 18055:     /* window border */
; 18056:     if (layout->flags & NK_WINDOW_BORDER)

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 1
	je	$LN29@nk_panel_e

; 18057:     {
; 18058:         struct nk_color border_color = nk_panel_get_border_color(style, layout->type);

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	edx
	call	_nk_panel_get_border_color
	add	esp, 8
	mov	DWORD PTR _border_color$8[ebp], eax

; 18059:         const float padding_y = (layout->flags & NK_WINDOW_MINIMIZED) ?
; 18060:             style->window.border + window->bounds.y + layout->header_height:
; 18061:             (layout->flags & NK_WINDOW_DYNAMIC)?
; 18062:             layout->bounds.y + layout->bounds.h + layout->footer_height:
; 18063:             window->bounds.y + window->bounds.h;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN73@nk_panel_e
	mov	edx, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR _window$[ebp]
	movss	xmm0, DWORD PTR [edx+5272]
	addss	xmm0, DWORD PTR [eax+80]
	mov	ecx, DWORD PTR _layout$[ebp]
	addss	xmm0, DWORD PTR [ecx+48]
	movss	DWORD PTR tv450[ebp], xmm0
	jmp	SHORT $LN74@nk_panel_e
$LN73@nk_panel_e:
	mov	edx, DWORD PTR _layout$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 2048				; 00000800H
	je	SHORT $LN71@nk_panel_e
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	addss	xmm0, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _layout$[ebp]
	addss	xmm0, DWORD PTR [eax+44]
	movss	DWORD PTR tv448[ebp], xmm0
	jmp	SHORT $LN72@nk_panel_e
$LN71@nk_panel_e:
	mov	ecx, DWORD PTR _window$[ebp]
	mov	edx, DWORD PTR _window$[ebp]
	movss	xmm0, DWORD PTR [ecx+80]
	addss	xmm0, DWORD PTR [edx+88]
	movss	DWORD PTR tv448[ebp], xmm0
$LN72@nk_panel_e:
	movss	xmm0, DWORD PTR tv448[ebp]
	movss	DWORD PTR tv450[ebp], xmm0
$LN74@nk_panel_e:
	movss	xmm0, DWORD PTR tv450[ebp]
	movss	DWORD PTR _padding_y$7[ebp], xmm0

; 18064: 
; 18065:         /* draw border top */
; 18066:         nk_stroke_line(out,window->bounds.x,window->bounds.y,
; 18067:             window->bounds.x + window->bounds.w, window->bounds.y,
; 18068:             layout->border, border_color);

	mov	eax, DWORD PTR _border_color$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _layout$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+52]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _window$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+80]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR _window$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	addss	xmm0, DWORD PTR [ecx+84]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _window$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+80]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _window$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+76]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_stroke_line
	add	esp, 28					; 0000001cH

; 18069: 
; 18070:         /* draw bottom border */
; 18071:         nk_stroke_line(out, window->bounds.x, padding_y,
; 18072:             window->bounds.x + window->bounds.w, padding_y, layout->border, border_color);

	mov	eax, DWORD PTR _border_color$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _layout$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+52]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _padding_y$7[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _window$[ebp]
	mov	eax, DWORD PTR _window$[ebp]
	movss	xmm0, DWORD PTR [edx+76]
	addss	xmm0, DWORD PTR [eax+84]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _padding_y$7[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _window$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+76]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_stroke_line
	add	esp, 28					; 0000001cH

; 18073: 
; 18074:         /* draw left border */
; 18075:         nk_stroke_line(out, window->bounds.x + layout->border*0.5f,
; 18076:             window->bounds.y, window->bounds.x + layout->border*0.5f,
; 18077:             padding_y, layout->border, border_color);

	mov	eax, DWORD PTR _border_color$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _layout$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+52]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _padding_y$7[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [edx+52]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _window$[ebp]
	addss	xmm0, DWORD PTR [eax+76]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _window$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+80]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [edx+52]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _window$[ebp]
	addss	xmm0, DWORD PTR [eax+76]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_stroke_line
	add	esp, 28					; 0000001cH

; 18078: 
; 18079:         /* draw right border */
; 18080:         nk_stroke_line(out, window->bounds.x + window->bounds.w - layout->border*0.5f,
; 18081:             window->bounds.y, window->bounds.x + window->bounds.w - layout->border*0.5f,
; 18082:             padding_y, layout->border, border_color);

	mov	eax, DWORD PTR _border_color$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _layout$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+52]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _padding_y$7[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _window$[ebp]
	mov	eax, DWORD PTR _window$[ebp]
	movss	xmm0, DWORD PTR [edx+76]
	addss	xmm0, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm1, DWORD PTR [ecx+52]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _window$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+80]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR _window$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	addss	xmm0, DWORD PTR [ecx+84]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	xmm1, DWORD PTR [edx+52]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_stroke_line
	add	esp, 28					; 0000001cH
$LN29@nk_panel_e:

; 18083:     }
; 18084: 
; 18085:     /* scaler */
; 18086:     if ((layout->flags & NK_WINDOW_SCALABLE) && in && !(layout->flags & NK_WINDOW_MINIMIZED))

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4
	je	$LN19@nk_panel_e
	cmp	DWORD PTR _in$[ebp], 0
	je	$LN19@nk_panel_e
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32768				; 00008000H
	jne	$LN19@nk_panel_e

; 18087:     {
; 18088:         /* calculate scaler bounds */
; 18089:         struct nk_rect scaler;
; 18090:         scaler.w = scrollbar_size.x;

	movss	xmm0, DWORD PTR _scrollbar_size$[ebp]
	movss	DWORD PTR _scaler$6[ebp+8], xmm0

; 18091:         scaler.h = scrollbar_size.y;

	movss	xmm0, DWORD PTR _scrollbar_size$[ebp+4]
	movss	DWORD PTR _scaler$6[ebp+12], xmm0

; 18092:         scaler.y = layout->bounds.y + layout->bounds.h;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [ecx+20]
	movss	DWORD PTR _scaler$6[ebp+4], xmm0

; 18093:         if (layout->flags & NK_WINDOW_SCALE_LEFT)

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 512				; 00000200H
	je	SHORT $LN27@nk_panel_e

; 18094:             scaler.x = layout->bounds.x - panel_padding.x * 0.5f;

	movss	xmm0, DWORD PTR _panel_padding$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm1, DWORD PTR [eax+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _scaler$6[ebp], xmm1
	jmp	SHORT $LN26@nk_panel_e
$LN27@nk_panel_e:

; 18095:         else scaler.x = layout->bounds.x + layout->bounds.w + panel_padding.x;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, DWORD PTR _panel_padding$[ebp]
	movss	DWORD PTR _scaler$6[ebp], xmm0
$LN26@nk_panel_e:

; 18096:         if (layout->flags & NK_WINDOW_NO_SCROLLBAR)

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32					; 00000020H
	je	SHORT $LN25@nk_panel_e

; 18097:             scaler.x -= scaler.w;

	movss	xmm0, DWORD PTR _scaler$6[ebp]
	subss	xmm0, DWORD PTR _scaler$6[ebp+8]
	movss	DWORD PTR _scaler$6[ebp], xmm0
$LN25@nk_panel_e:

; 18098: 
; 18099:         /* draw scaler */
; 18100:         {const struct nk_style_item *item = &style->window.scaler;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 5252				; 00001484H
	mov	DWORD PTR _item$5[ebp], eax

; 18101:         if (item->type == NK_STYLE_ITEM_IMAGE)

	mov	eax, DWORD PTR _item$5[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN24@nk_panel_e

; 18102:             nk_draw_image(out, scaler, &item->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _item$5[ebp]
	add	ecx, 4
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _scaler$6[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _scaler$6[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _scaler$6[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _scaler$6[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 18103:         else {

	jmp	$LN21@nk_panel_e
$LN24@nk_panel_e:

; 18104:             if (layout->flags & NK_WINDOW_SCALE_LEFT) {

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 512				; 00000200H
	je	$LN22@nk_panel_e

; 18105:                 nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
; 18106:                     scaler.y + scaler.h, scaler.x + scaler.w,
; 18107:                     scaler.y + scaler.h, item->data.color);

	mov	eax, DWORD PTR _item$5[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	movss	xmm0, DWORD PTR _scaler$6[ebp+4]
	addss	xmm0, DWORD PTR _scaler$6[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _scaler$6[ebp]
	addss	xmm0, DWORD PTR _scaler$6[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _scaler$6[ebp+4]
	addss	xmm0, DWORD PTR _scaler$6[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaler$6[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaler$6[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaler$6[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_fill_triangle
	add	esp, 32					; 00000020H

; 18108:             } else {

	jmp	$LN21@nk_panel_e
$LN22@nk_panel_e:

; 18109:                 nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
; 18110:                     scaler.y + scaler.h, scaler.x, scaler.y + scaler.h, item->data.color);

	mov	eax, DWORD PTR _item$5[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	movss	xmm0, DWORD PTR _scaler$6[ebp+4]
	addss	xmm0, DWORD PTR _scaler$6[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaler$6[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _scaler$6[ebp+4]
	addss	xmm0, DWORD PTR _scaler$6[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _scaler$6[ebp]
	addss	xmm0, DWORD PTR _scaler$6[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaler$6[ebp+4]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _scaler$6[ebp]
	addss	xmm0, DWORD PTR _scaler$6[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_fill_triangle
	add	esp, 32					; 00000020H
$LN21@nk_panel_e:

; 18111:             }
; 18112:         }}
; 18113: 
; 18114:         /* do window scaling */
; 18115:         if (!(window->flags & NK_WINDOW_ROM)) {

	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 4096				; 00001000H
	jne	$LN19@nk_panel_e

; 18116:             struct nk_vec2 window_size = style->window.min_size;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5324]
	mov	edx, DWORD PTR [eax+5328]
	mov	DWORD PTR _window_size$4[ebp], ecx
	mov	DWORD PTR _window_size$4[ebp+4], edx

; 18117:             int left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in$[ebp]
	mov	eax, DWORD PTR [edx+ecx+260]
	mov	DWORD PTR _left_mouse_down$3[ebp], eax

; 18118:             int left_mouse_click_in_scaler = nk_input_has_mouse_click_down_in_rect(in,
; 18119:                     NK_BUTTON_LEFT, scaler, nk_true);

	push	1
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _scaler$6[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _scaler$6[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _scaler$6[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _scaler$6[ebp+12]
	mov	DWORD PTR [eax+12], edx
	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_has_mouse_click_down_in_rect
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _left_mouse_click_in_scaler$2[ebp], eax

; 18120: 
; 18121:             if (left_mouse_down && left_mouse_click_in_scaler) {

	cmp	DWORD PTR _left_mouse_down$3[ebp], 0
	je	$LN19@nk_panel_e
	cmp	DWORD PTR _left_mouse_click_in_scaler$2[ebp], 0
	je	$LN19@nk_panel_e

; 18122:                 float delta_x = in->mouse.delta.x;

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+340]
	movss	DWORD PTR _delta_x$1[ebp], xmm0

; 18123:                 if (layout->flags & NK_WINDOW_SCALE_LEFT) {

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 512				; 00000200H
	je	SHORT $LN18@nk_panel_e

; 18124:                     delta_x = -delta_x;

	movss	xmm0, DWORD PTR _delta_x$1[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _delta_x$1[ebp], xmm0

; 18125:                     window->bounds.x += in->mouse.delta.x;

	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	addss	xmm0, DWORD PTR [ecx+340]
	mov	edx, DWORD PTR _window$[ebp]
	movss	DWORD PTR [edx+76], xmm0
$LN18@nk_panel_e:

; 18126:                 }
; 18127:                 /* dragging in x-direction  */
; 18128:                 if (window->bounds.w + delta_x >= window_size.x) {

	mov	eax, DWORD PTR _window$[ebp]
	movss	xmm0, DWORD PTR [eax+84]
	addss	xmm0, DWORD PTR _delta_x$1[ebp]
	comiss	xmm0, DWORD PTR _window_size$4[ebp]
	jb	SHORT $LN16@nk_panel_e

; 18129:                     if ((delta_x < 0) || (delta_x > 0 && in->mouse.pos.x >= scaler.x)) {

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _delta_x$1[ebp]
	ja	SHORT $LN15@nk_panel_e
	movss	xmm0, DWORD PTR _delta_x$1[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN16@nk_panel_e
	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+324]
	comiss	xmm0, DWORD PTR _scaler$6[ebp]
	jb	SHORT $LN16@nk_panel_e
$LN15@nk_panel_e:

; 18130:                         window->bounds.w = window->bounds.w + delta_x;

	mov	eax, DWORD PTR _window$[ebp]
	movss	xmm0, DWORD PTR [eax+84]
	addss	xmm0, DWORD PTR _delta_x$1[ebp]
	mov	ecx, DWORD PTR _window$[ebp]
	movss	DWORD PTR [ecx+84], xmm0

; 18131:                         scaler.x += in->mouse.delta.x;

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR _scaler$6[ebp]
	addss	xmm0, DWORD PTR [eax+340]
	movss	DWORD PTR _scaler$6[ebp], xmm0
$LN16@nk_panel_e:

; 18132:                     }
; 18133:                 }
; 18134:                 /* dragging in y-direction (only possible if static window) */
; 18135:                 if (!(layout->flags & NK_WINDOW_DYNAMIC)) {

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2048				; 00000800H
	jne	$LN12@nk_panel_e

; 18136:                     if (window_size.y < window->bounds.h + in->mouse.delta.y) {

	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+88]
	addss	xmm0, DWORD PTR [ecx+344]
	comiss	xmm0, DWORD PTR _window_size$4[ebp+4]
	jbe	SHORT $LN12@nk_panel_e

; 18137:                         if ((in->mouse.delta.y < 0) || (in->mouse.delta.y > 0 && in->mouse.pos.y >= scaler.y)) {

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+344]
	ja	SHORT $LN11@nk_panel_e
	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+344]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN12@nk_panel_e
	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	comiss	xmm0, DWORD PTR _scaler$6[ebp+4]
	jb	SHORT $LN12@nk_panel_e
$LN11@nk_panel_e:

; 18138:                             window->bounds.h = window->bounds.h + in->mouse.delta.y;

	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+88]
	addss	xmm0, DWORD PTR [ecx+344]
	mov	edx, DWORD PTR _window$[ebp]
	movss	DWORD PTR [edx+88], xmm0

; 18139:                             scaler.y += in->mouse.delta.y;

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR _scaler$6[ebp+4]
	addss	xmm0, DWORD PTR [eax+344]
	movss	DWORD PTR _scaler$6[ebp+4], xmm0
$LN12@nk_panel_e:

; 18140:                         }
; 18141:                     }
; 18142:                 }
; 18143:                 ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT];

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+364]
	mov	DWORD PTR [edx+392], ecx

; 18144:                 in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = scaler.x + scaler.w/2.0f;

	movss	xmm0, DWORD PTR _scaler$6[ebp+8]
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR _scaler$6[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	DWORD PTR [edx+ecx+268], xmm0

; 18145:                 in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y = scaler.y + scaler.h/2.0f;

	movss	xmm0, DWORD PTR _scaler$6[ebp+12]
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR _scaler$6[ebp+4]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in$[ebp]
	movss	DWORD PTR [edx+ecx+272], xmm0
$LN19@nk_panel_e:

; 18146:             }
; 18147:         }
; 18148:     }
; 18149:     if (!nk_panel_is_sub(layout->type)) {

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_nk_panel_is_sub
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN8@nk_panel_e

; 18150:         /* window is hidden so clear command buffer  */
; 18151:         if (layout->flags & NK_WINDOW_HIDDEN)

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 8192				; 00002000H
	je	SHORT $LN9@nk_panel_e

; 18152:             nk_command_buffer_reset(&window->buffer);

	mov	eax, DWORD PTR _window$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_nk_command_buffer_reset
	add	esp, 4
	jmp	SHORT $LN8@nk_panel_e
$LN9@nk_panel_e:

; 18153:         /* window is visible and not tab */
; 18154:         else nk_finish(ctx, window);

	mov	eax, DWORD PTR _window$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_finish
	add	esp, 8
$LN8@nk_panel_e:

; 18155:     }
; 18156: 
; 18157:     /* NK_WINDOW_REMOVE_ROM flag was set so remove NK_WINDOW_ROM */
; 18158:     if (layout->flags & NK_WINDOW_REMOVE_ROM) {

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN7@nk_panel_e

; 18159:         layout->flags &= ~(nk_flags)NK_WINDOW_ROM;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -4097				; ffffefffH
	mov	edx, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 18160:         layout->flags &= ~(nk_flags)NK_WINDOW_REMOVE_ROM;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -65537				; fffeffffH
	mov	edx, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN7@nk_panel_e:

; 18161:     }
; 18162:     window->flags = layout->flags;

	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+72], edx

; 18163: 
; 18164:     /* property garbage collector */
; 18165:     if (window->property.active && window->property.old != window->property.seq &&
; 18166:         window->property.active == window->property.prev) {

	mov	eax, DWORD PTR _window$[ebp]
	cmp	DWORD PTR [eax+148], 0
	je	SHORT $LN6@nk_panel_e
	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR _window$[ebp]
	mov	edx, DWORD PTR [eax+244]
	cmp	edx, DWORD PTR [ecx+240]
	je	SHORT $LN6@nk_panel_e
	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR _window$[ebp]
	mov	edx, DWORD PTR [eax+148]
	cmp	edx, DWORD PTR [ecx+152]
	jne	SHORT $LN6@nk_panel_e

; 18167:         nk_zero(&window->property, sizeof(window->property));

	push	104					; 00000068H
	mov	eax, DWORD PTR _window$[ebp]
	add	eax, 148				; 00000094H
	push	eax
	call	_nk_zero
	add	esp, 8

; 18168:     } else {

	jmp	SHORT $LN5@nk_panel_e
$LN6@nk_panel_e:

; 18169:         window->property.old = window->property.seq;

	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR _window$[ebp]
	mov	edx, DWORD PTR [ecx+240]
	mov	DWORD PTR [eax+244], edx

; 18170:         window->property.prev = window->property.active;

	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR _window$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR [eax+152], edx

; 18171:         window->property.seq = 0;

	mov	eax, DWORD PTR _window$[ebp]
	mov	DWORD PTR [eax+240], 0
$LN5@nk_panel_e:

; 18172:     }
; 18173:     /* edit garbage collector */
; 18174:     if (window->edit.active && window->edit.old != window->edit.seq &&
; 18175:        window->edit.active == window->edit.prev) {

	mov	eax, DWORD PTR _window$[ebp]
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN4@nk_panel_e
	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR _window$[ebp]
	mov	edx, DWORD PTR [eax+328]
	cmp	edx, DWORD PTR [ecx+324]
	je	SHORT $LN4@nk_panel_e
	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR _window$[ebp]
	mov	edx, DWORD PTR [eax+332]
	cmp	edx, DWORD PTR [ecx+336]
	jne	SHORT $LN4@nk_panel_e

; 18176:         nk_zero(&window->edit, sizeof(window->edit));

	push	44					; 0000002cH
	mov	eax, DWORD PTR _window$[ebp]
	add	eax, 320				; 00000140H
	push	eax
	call	_nk_zero
	add	esp, 8

; 18177:     } else {

	jmp	SHORT $LN3@nk_panel_e
$LN4@nk_panel_e:

; 18178:         window->edit.old = window->edit.seq;

	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR _window$[ebp]
	mov	edx, DWORD PTR [ecx+324]
	mov	DWORD PTR [eax+328], edx

; 18179:         window->edit.prev = window->edit.active;

	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR _window$[ebp]
	mov	edx, DWORD PTR [ecx+332]
	mov	DWORD PTR [eax+336], edx

; 18180:         window->edit.seq = 0;

	mov	eax, DWORD PTR _window$[ebp]
	mov	DWORD PTR [eax+324], 0
$LN3@nk_panel_e:

; 18181:     }
; 18182:     /* contextual garbage collector */
; 18183:     if (window->popup.active_con && window->popup.con_old != window->popup.con_count) {

	mov	eax, DWORD PTR _window$[ebp]
	cmp	DWORD PTR [eax+300], 0
	je	SHORT $LN2@nk_panel_e
	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR _window$[ebp]
	mov	edx, DWORD PTR [eax+296]
	cmp	edx, DWORD PTR [ecx+292]
	je	SHORT $LN2@nk_panel_e

; 18184:         window->popup.con_count = 0;

	mov	eax, DWORD PTR _window$[ebp]
	mov	DWORD PTR [eax+292], 0

; 18185:         window->popup.con_old = 0;

	mov	eax, DWORD PTR _window$[ebp]
	mov	DWORD PTR [eax+296], 0

; 18186:         window->popup.active_con = 0;

	mov	eax, DWORD PTR _window$[ebp]
	mov	DWORD PTR [eax+300], 0

; 18187:     } else {

	jmp	SHORT $LN1@nk_panel_e
$LN2@nk_panel_e:

; 18188:         window->popup.con_old = window->popup.con_count;

	mov	eax, DWORD PTR _window$[ebp]
	mov	ecx, DWORD PTR _window$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	DWORD PTR [eax+296], edx

; 18189:         window->popup.con_count = 0;

	mov	eax, DWORD PTR _window$[ebp]
	mov	DWORD PTR [eax+292], 0
$LN1@nk_panel_e:

; 18190:     }
; 18191:     window->popup.combo_count = 0;

	mov	eax, DWORD PTR _window$[ebp]
	mov	DWORD PTR [eax+288], 0

; 18192:     /* helper to make sure you have a 'nk_tree_push' for every 'nk_tree_pop' */
; 18193:     NK_ASSERT(!layout->row.tree_depth);

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+156], 0
	je	SHORT $LN75@nk_panel_e
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_panel_end@@9@9@ddf8d5d8
	add	ecx, 307				; 00000133H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1DA@PKJELGCB@?$AA?$CB?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAr?$AAe?$AAe?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN75@nk_panel_e:

; 18194: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN86@nk_panel_e
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 604				; 0000025cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN86@nk_panel_e:
	DD	9
	DD	$LN85@nk_panel_e
$LN85@nk_panel_e:
	DD	-76					; ffffffb4H
	DD	8
	DD	$LN76@nk_panel_e
	DD	-92					; ffffffa4H
	DD	8
	DD	$LN77@nk_panel_e
	DD	-116					; ffffff8cH
	DD	16					; 00000010H
	DD	$LN78@nk_panel_e
	DD	-140					; ffffff74H
	DD	16					; 00000010H
	DD	$LN79@nk_panel_e
	DD	-236					; ffffff14H
	DD	4
	DD	$LN80@nk_panel_e
	DD	-248					; ffffff08H
	DD	4
	DD	$LN81@nk_panel_e
	DD	-296					; fffffed8H
	DD	4
	DD	$LN82@nk_panel_e
	DD	-332					; fffffeb4H
	DD	16					; 00000010H
	DD	$LN83@nk_panel_e
	DD	-360					; fffffe98H
	DD	8
	DD	$LN84@nk_panel_e
$LN84@nk_panel_e:
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN83@nk_panel_e:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN82@nk_panel_e:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN81@nk_panel_e:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN80@nk_panel_e:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN79@nk_panel_e:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	0
$LN78@nk_panel_e:
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN77@nk_panel_e:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN76@nk_panel_e:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_nk_panel_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_panel_begin
_TEXT	SEGMENT
tv562 = -588						; size = 4
tv563 = -584						; size = 4
tv626 = -580						; size = 4
tv553 = -580						; size = 4
tv487 = -580						; size = 4
tv469 = -580						; size = 4
tv151 = -580						; size = 4
$T1 = -572						; size = 16
_clip$2 = -356						; size = 16
_body$3 = -332						; size = 16
_t$4 = -308						; size = 4
_label$5 = -296						; size = 16
_text_len$6 = -272					; size = 4
_ws$7 = -260						; size = 4
_ws$8 = -248						; size = 4
_button$9 = -236					; size = 16
_background$10 = -212					; size = 4
_header$11 = -200					; size = 16
_text$12 = -176						; size = 16
_header$13 = -152					; size = 16
_left_mouse_click_in_cursor$14 = -128			; size = 4
_left_mouse_down$15 = -116				; size = 4
_panel_padding$ = -104					; size = 8
_scrollbar_size$ = -88					; size = 8
_font$ = -72						; size = 4
_style$ = -60						; size = 4
_out$ = -48						; size = 4
_layout$ = -36						; size = 4
_win$ = -24						; size = 4
_in$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_title$ = 12						; size = 4
_panel_type$ = 16					; size = 4
_nk_panel_begin PROC					; COMDAT

; 17664: {

	push	ebp
	mov	ebp, esp
	sub	esp, 588				; 0000024cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-588]
	mov	ecx, 147				; 00000093H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 17665:     struct nk_input *in;
; 17666:     struct nk_window *win;
; 17667:     struct nk_panel *layout;
; 17668:     struct nk_command_buffer *out;
; 17669:     const struct nk_style *style;
; 17670:     const struct nk_user_font *font;
; 17671: 
; 17672:     struct nk_vec2 scrollbar_size;
; 17673:     struct nk_vec2 panel_padding;
; 17674: 
; 17675:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN36@nk_panel_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_panel_begin@@9@9@ddf8d5d8
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN36@nk_panel_b:

; 17676:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN37@nk_panel_b
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_panel_begin@@9@9@ddf8d5d8
	add	ecx, 12					; 0000000cH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN37@nk_panel_b:

; 17677:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN38@nk_panel_b
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_panel_begin@@9@9@ddf8d5d8
	add	edx, 13					; 0000000dH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN38@nk_panel_b:

; 17678:     if (!ctx || !ctx->current || !ctx->current->layout) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN32@nk_panel_b
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN32@nk_panel_b
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN33@nk_panel_b
$LN32@nk_panel_b:
	xor	eax, eax
	jmp	$LN34@nk_panel_b
$LN33@nk_panel_b:

; 17679:     nk_zero(ctx->current->layout, sizeof(*ctx->current->layout));

	push	412					; 0000019cH
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	push	edx
	call	_nk_zero
	add	esp, 8

; 17680:     if ((ctx->current->flags & NK_WINDOW_HIDDEN) || (ctx->current->flags & NK_WINDOW_CLOSED)) {

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+72]
	and	edx, 8192				; 00002000H
	jne	SHORT $LN30@nk_panel_b
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+72]
	and	edx, 16384				; 00004000H
	je	SHORT $LN31@nk_panel_b
$LN30@nk_panel_b:

; 17681:         nk_zero(ctx->current->layout, sizeof(struct nk_panel));

	push	412					; 0000019cH
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	push	edx
	call	_nk_zero
	add	esp, 8

; 17682:         ctx->current->layout->type = panel_type;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR _panel_type$[ebp]
	mov	DWORD PTR [edx], eax

; 17683:         return 0;

	xor	eax, eax
	jmp	$LN34@nk_panel_b
$LN31@nk_panel_b:

; 17684:     }
; 17685:     /* pull state into local stack */
; 17686:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 17687:     font = style->font;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _font$[ebp], ecx

; 17688:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 17689:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 17690:     out = &win->buffer;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	mov	DWORD PTR _out$[ebp], eax

; 17691:     in = (win->flags & NK_WINDOW_NO_INPUT) ? 0: &ctx->input;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 1024				; 00000400H
	je	SHORT $LN39@nk_panel_b
	mov	DWORD PTR tv151[ebp], 0
	jmp	SHORT $LN40@nk_panel_b
$LN39@nk_panel_b:
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv151[ebp], edx
$LN40@nk_panel_b:
	mov	eax, DWORD PTR tv151[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 17692: #ifdef NK_INCLUDE_COMMAND_USERDATA
; 17693:     win->buffer.userdata = ctx->userdata;
; 17694: #endif
; 17695:     /* pull style configuration into local stack */
; 17696:     scrollbar_size = style->window.scrollbar_size;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5316]
	mov	edx, DWORD PTR [eax+5320]
	mov	DWORD PTR _scrollbar_size$[ebp], ecx
	mov	DWORD PTR _scrollbar_size$[ebp+4], edx

; 17697:     panel_padding = nk_panel_get_padding(style, panel_type);

	mov	eax, DWORD PTR _panel_type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	push	ecx
	call	_nk_panel_get_padding
	add	esp, 8
	mov	DWORD PTR _panel_padding$[ebp], eax
	mov	DWORD PTR _panel_padding$[ebp+4], edx

; 17698: 
; 17699:     /* window movement */
; 17700:     if ((win->flags & NK_WINDOW_MOVABLE) && !(win->flags & NK_WINDOW_ROM)) {

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 2
	je	$LN26@nk_panel_b
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 4096				; 00001000H
	jne	$LN26@nk_panel_b

; 17701:         int left_mouse_down;
; 17702:         int left_mouse_click_in_cursor;
; 17703: 
; 17704:         /* calculate draggable window space */
; 17705:         struct nk_rect header;
; 17706:         header.x = win->bounds.x;

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	movss	DWORD PTR _header$13[ebp], xmm0

; 17707:         header.y = win->bounds.y;

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR [eax+80]
	movss	DWORD PTR _header$13[ebp+4], xmm0

; 17708:         header.w = win->bounds.w;

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR [eax+84]
	movss	DWORD PTR _header$13[ebp+8], xmm0

; 17709:         if (nk_panel_has_header(win->flags, title)) {

	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	call	_nk_panel_has_header
	add	esp, 8
	test	eax, eax
	je	SHORT $LN28@nk_panel_b

; 17710:             header.h = font->height + 2.0f * style->window.header.padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+5180]
	mov	ecx, DWORD PTR _font$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _header$13[ebp+12], xmm0

; 17711:             header.h += 2.0f * style->window.header.label_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+5188]
	addss	xmm0, DWORD PTR _header$13[ebp+12]
	movss	DWORD PTR _header$13[ebp+12], xmm0
	jmp	SHORT $LN27@nk_panel_b
$LN28@nk_panel_b:

; 17712:         } else header.h = panel_padding.y;

	movss	xmm0, DWORD PTR _panel_padding$[ebp+4]
	movss	DWORD PTR _header$13[ebp+12], xmm0
$LN27@nk_panel_b:

; 17713: 
; 17714:         /* window movement by dragging */
; 17715:         left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in$[ebp]
	mov	eax, DWORD PTR [edx+ecx+260]
	mov	DWORD PTR _left_mouse_down$15[ebp], eax

; 17716:         left_mouse_click_in_cursor = nk_input_has_mouse_click_down_in_rect(in,
; 17717:             NK_BUTTON_LEFT, header, nk_true);

	push	1
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _header$13[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _header$13[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _header$13[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _header$13[ebp+12]
	mov	DWORD PTR [eax+12], edx
	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_has_mouse_click_down_in_rect
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _left_mouse_click_in_cursor$14[ebp], eax

; 17718:         if (left_mouse_down && left_mouse_click_in_cursor) {

	cmp	DWORD PTR _left_mouse_down$15[ebp], 0
	je	$LN26@nk_panel_b
	cmp	DWORD PTR _left_mouse_click_in_cursor$14[ebp], 0
	je	$LN26@nk_panel_b

; 17719:             win->bounds.x = win->bounds.x + in->mouse.delta.x;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	addss	xmm0, DWORD PTR [ecx+340]
	mov	edx, DWORD PTR _win$[ebp]
	movss	DWORD PTR [edx+76], xmm0

; 17720:             win->bounds.y = win->bounds.y + in->mouse.delta.y;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+80]
	addss	xmm0, DWORD PTR [ecx+344]
	mov	edx, DWORD PTR _win$[ebp]
	movss	DWORD PTR [edx+80], xmm0

; 17721:             in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x += in->mouse.delta.x;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in$[ebp]
	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+268]
	addss	xmm0, DWORD PTR [eax+340]
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _in$[ebp]
	movss	DWORD PTR [eax+edx+268], xmm0

; 17722:             in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y += in->mouse.delta.y;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in$[ebp]
	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+272]
	addss	xmm0, DWORD PTR [eax+344]
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _in$[ebp]
	movss	DWORD PTR [eax+edx+272], xmm0

; 17723:             ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_MOVE];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+eax+364]
	mov	DWORD PTR [ecx+392], eax
$LN26@nk_panel_b:

; 17724:         }
; 17725:     }
; 17726: 
; 17727:     /* setup panel */
; 17728:     layout->type = panel_type;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _panel_type$[ebp]
	mov	DWORD PTR [eax], ecx

; 17729:     layout->flags = win->flags;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+4], edx

; 17730:     layout->bounds = win->bounds;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR _layout$[ebp]
	add	ecx, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 17731:     layout->bounds.x += panel_padding.x;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR _panel_padding$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 17732:     layout->bounds.w -= 2*panel_padding.x;

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _panel_padding$[ebp]
	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm1, DWORD PTR [eax+16]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [ecx+16], xmm1

; 17733:     if (win->flags & NK_WINDOW_BORDER) {

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 1
	je	SHORT $LN25@nk_panel_b

; 17734:         layout->border = nk_panel_get_border(style, win->flags, panel_type);

	mov	eax, DWORD PTR _panel_type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	push	eax
	call	_nk_panel_get_border
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _layout$[ebp]
	fstp	DWORD PTR [ecx+52]

; 17735:         layout->bounds = nk_shrink_rect(layout->bounds, layout->border);

	mov	eax, DWORD PTR _layout$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _layout$[ebp]
	add	ecx, 8
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	_nk_shrink_rect
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _layout$[ebp]
	add	ecx, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	jmp	SHORT $LN24@nk_panel_b
$LN25@nk_panel_b:

; 17736:     } else layout->border = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+52], xmm0
$LN24@nk_panel_b:

; 17737:     layout->at_y = layout->bounds.y;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+36], edx

; 17738:     layout->at_x = layout->bounds.x;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+32], edx

; 17739:     layout->max_x = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+40], xmm0

; 17740:     layout->header_height = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+48], xmm0

; 17741:     layout->footer_height = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+44], xmm0

; 17742:     nk_layout_reset_min_row_height(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_layout_reset_min_row_height
	add	esp, 4

; 17743:     layout->row.index = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [eax+104], 0

; 17744:     layout->row.columns = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [eax+116], 0

; 17745:     layout->row.ratio = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [eax+120], 0

; 17746:     layout->row.item_width = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+124], xmm0

; 17747:     layout->row.tree_depth = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [eax+156], 0

; 17748:     layout->row.height = panel_padding.y;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR _panel_padding$[ebp+4]
	movss	DWORD PTR [eax+108], xmm0

; 17749:     layout->has_scrolling = nk_true;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [eax+56], 1

; 17750:     if (!(win->flags & NK_WINDOW_NO_SCROLLBAR))

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 32					; 00000020H
	jne	SHORT $LN23@nk_panel_b

; 17751:         layout->bounds.w -= scrollbar_size.x;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	subss	xmm0, DWORD PTR _scrollbar_size$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [ecx+16], xmm0
$LN23@nk_panel_b:

; 17752:     if (!nk_panel_is_nonblock(panel_type)) {

	mov	eax, DWORD PTR _panel_type$[ebp]
	push	eax
	call	_nk_panel_is_nonblock
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN22@nk_panel_b

; 17753:         layout->footer_height = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+44], xmm0

; 17754:         if (!(win->flags & NK_WINDOW_NO_SCROLLBAR) || win->flags & NK_WINDOW_SCALABLE)

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 32					; 00000020H
	je	SHORT $LN20@nk_panel_b
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 4
	je	SHORT $LN21@nk_panel_b
$LN20@nk_panel_b:

; 17755:             layout->footer_height = scrollbar_size.y;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR _scrollbar_size$[ebp+4]
	movss	DWORD PTR [eax+44], xmm0
$LN21@nk_panel_b:

; 17756:         layout->bounds.h -= layout->footer_height;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	subss	xmm0, DWORD PTR [ecx+44]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [edx+20], xmm0
$LN22@nk_panel_b:

; 17757:     }
; 17758: 
; 17759:     /* panel header */
; 17760:     if (nk_panel_has_header(win->flags, title))

	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	call	_nk_panel_has_header
	add	esp, 8
	test	eax, eax
	je	$LN19@nk_panel_b

; 17761:     {
; 17762:         struct nk_text text;
; 17763:         struct nk_rect header;
; 17764:         const struct nk_style_item *background = 0;

	mov	DWORD PTR _background$10[ebp], 0

; 17765: 
; 17766:         /* calculate header bounds */
; 17767:         header.x = win->bounds.x;

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	movss	DWORD PTR _header$11[ebp], xmm0

; 17768:         header.y = win->bounds.y;

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR [eax+80]
	movss	DWORD PTR _header$11[ebp+4], xmm0

; 17769:         header.w = win->bounds.w;

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR [eax+84]
	movss	DWORD PTR _header$11[ebp+8], xmm0

; 17770:         header.h = font->height + 2.0f * style->window.header.padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+5180]
	mov	ecx, DWORD PTR _font$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _header$11[ebp+12], xmm0

; 17771:         header.h += (2.0f * style->window.header.label_padding.y);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+5188]
	addss	xmm0, DWORD PTR _header$11[ebp+12]
	movss	DWORD PTR _header$11[ebp+12], xmm0

; 17772: 
; 17773:         /* shrink panel by header */
; 17774:         layout->header_height = header.h;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR _header$11[ebp+12]
	movss	DWORD PTR [eax+48], xmm0

; 17775:         layout->bounds.y += header.h;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR _header$11[ebp+12]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 17776:         layout->bounds.h -= header.h;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	subss	xmm0, DWORD PTR _header$11[ebp+12]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [ecx+20], xmm0

; 17777:         layout->at_y += header.h;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	addss	xmm0, DWORD PTR _header$11[ebp+12]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [ecx+36], xmm0

; 17778: 
; 17779:         /* select correct header background and text color */
; 17780:         if (ctx->active == win) {

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12936]
	cmp	ecx, DWORD PTR _win$[ebp]
	jne	SHORT $LN18@nk_panel_b

; 17781:             background = &style->window.header.active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4872				; 00001308H
	mov	DWORD PTR _background$10[ebp], eax

; 17782:             text.text = style->window.header.label_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5168]
	mov	DWORD PTR _text$12[ebp+12], ecx
	jmp	SHORT $LN15@nk_panel_b
$LN18@nk_panel_b:

; 17783:         } else if (nk_input_is_mouse_hovering_rect(&ctx->input, header)) {

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _header$11[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _header$11[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _header$11[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _header$11[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN16@nk_panel_b

; 17784:             background = &style->window.header.hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4852				; 000012f4H
	mov	DWORD PTR _background$10[ebp], eax

; 17785:             text.text = style->window.header.label_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5164]
	mov	DWORD PTR _text$12[ebp+12], ecx

; 17786:         } else {

	jmp	SHORT $LN15@nk_panel_b
$LN16@nk_panel_b:

; 17787:             background = &style->window.header.normal;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4832				; 000012e0H
	mov	DWORD PTR _background$10[ebp], eax

; 17788:             text.text = style->window.header.label_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5160]
	mov	DWORD PTR _text$12[ebp+12], ecx
$LN15@nk_panel_b:

; 17789:         }
; 17790: 
; 17791:         /* draw header background */
; 17792:         header.h += 1.0f;

	movss	xmm0, DWORD PTR _header$11[ebp+12]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _header$11[ebp+12], xmm0

; 17793:         if (background->type == NK_STYLE_ITEM_IMAGE) {

	mov	eax, DWORD PTR _background$10[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN14@nk_panel_b

; 17794:             text.background = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	DWORD PTR _text$12[ebp+8], eax

; 17795:             nk_draw_image(&win->buffer, header, &background->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _background$10[ebp]
	add	ecx, 4
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _header$11[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _header$11[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _header$11[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _header$11[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 17796:         } else {

	jmp	SHORT $LN13@nk_panel_b
$LN14@nk_panel_b:

; 17797:             text.background = background->data.color;

	mov	eax, DWORD PTR _background$10[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _text$12[ebp+8], ecx

; 17798:             nk_fill_rect(out, header, 0, background->data.color);

	mov	eax, DWORD PTR _background$10[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _header$11[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _header$11[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _header$11[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _header$11[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH
$LN13@nk_panel_b:

; 17799:         }
; 17800: 
; 17801:         /* window close button */
; 17802:         {struct nk_rect button;
; 17803:         button.y = header.y + style->window.header.padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$11[ebp+4]
	addss	xmm0, DWORD PTR [eax+5180]
	movss	DWORD PTR _button$9[ebp+4], xmm0

; 17804:         button.h = header.h - 2 * style->window.header.padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+5180]
	movss	xmm1, DWORD PTR _header$11[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _button$9[ebp+12], xmm1

; 17805:         button.w = button.h;

	movss	xmm0, DWORD PTR _button$9[ebp+12]
	movss	DWORD PTR _button$9[ebp+8], xmm0

; 17806:         if (win->flags & NK_WINDOW_CLOSABLE) {

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 8
	je	$LN9@nk_panel_b

; 17807:             nk_flags ws = 0;

	mov	DWORD PTR _ws$8[ebp], 0

; 17808:             if (style->window.header.align == NK_HEADER_RIGHT) {

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+5172], 1
	jne	SHORT $LN11@nk_panel_b

; 17809:                 button.x = (header.w + header.x) - (button.w + style->window.header.padding.x);

	movss	xmm0, DWORD PTR _header$11[ebp+8]
	addss	xmm0, DWORD PTR _header$11[ebp]
	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR _button$9[ebp+8]
	addss	xmm1, DWORD PTR [eax+5176]
	subss	xmm0, xmm1
	movss	DWORD PTR _button$9[ebp], xmm0

; 17810:                 header.w -= button.w + style->window.header.spacing.x + style->window.header.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$9[ebp+8]
	addss	xmm0, DWORD PTR [eax+5192]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+5176]
	movss	xmm1, DWORD PTR _header$11[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _header$11[ebp+8], xmm1

; 17811:             } else {

	jmp	SHORT $LN10@nk_panel_b
$LN11@nk_panel_b:

; 17812:                 button.x = header.x + style->window.header.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$11[ebp]
	addss	xmm0, DWORD PTR [eax+5176]
	movss	DWORD PTR _button$9[ebp], xmm0

; 17813:                 header.x += button.w + style->window.header.spacing.x + style->window.header.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$9[ebp+8]
	addss	xmm0, DWORD PTR [eax+5192]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+5176]
	addss	xmm0, DWORD PTR _header$11[ebp]
	movss	DWORD PTR _header$11[ebp], xmm0
$LN10@nk_panel_b:

; 17814:             }
; 17815: 
; 17816:             if (nk_do_button_symbol(&ws, &win->buffer, button,
; 17817:                 style->window.header.close_symbol, NK_BUTTON_DEFAULT,
; 17818:                 &style->window.header.close_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4892				; 0000131cH
	push	eax
	push	0
	mov	ecx, DWORD PTR _style$[ebp]
	mov	edx, DWORD PTR [ecx+5148]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _button$9[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _button$9[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _button$9[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _button$9[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	lea	ecx, DWORD PTR _ws$8[ebp]
	push	ecx
	call	_nk_do_button_symbol
	add	esp, 44					; 0000002cH
	test	eax, eax
	je	SHORT $LN9@nk_panel_b
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN9@nk_panel_b

; 17819:             {
; 17820:                 layout->flags |= NK_WINDOW_HIDDEN;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, 8192				; 00002000H
	mov	edx, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 17821:                 layout->flags &= (nk_flags)~NK_WINDOW_MINIMIZED;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -32769				; ffff7fffH
	mov	edx, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN9@nk_panel_b:

; 17822:             }
; 17823:         }
; 17824: 
; 17825:         /* window minimize button */
; 17826:         if (win->flags & NK_WINDOW_MINIMIZABLE) {

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 16					; 00000010H
	je	$LN4@nk_panel_b

; 17827:             nk_flags ws = 0;

	mov	DWORD PTR _ws$7[ebp], 0

; 17828:             if (style->window.header.align == NK_HEADER_RIGHT) {

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+5172], 1
	jne	$LN7@nk_panel_b

; 17829:                 button.x = (header.w + header.x) - button.w;

	movss	xmm0, DWORD PTR _header$11[ebp+8]
	addss	xmm0, DWORD PTR _header$11[ebp]
	subss	xmm0, DWORD PTR _button$9[ebp+8]
	movss	DWORD PTR _button$9[ebp], xmm0

; 17830:                 if (!(win->flags & NK_WINDOW_CLOSABLE)) {

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 8
	jne	SHORT $LN6@nk_panel_b

; 17831:                     button.x -= style->window.header.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$9[ebp]
	subss	xmm0, DWORD PTR [eax+5176]
	movss	DWORD PTR _button$9[ebp], xmm0

; 17832:                     header.w -= style->window.header.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$11[ebp+8]
	subss	xmm0, DWORD PTR [eax+5176]
	movss	DWORD PTR _header$11[ebp+8], xmm0
$LN6@nk_panel_b:

; 17833:                 }
; 17834:                 header.w -= button.w + style->window.header.spacing.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$9[ebp+8]
	addss	xmm0, DWORD PTR [eax+5192]
	movss	xmm1, DWORD PTR _header$11[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _header$11[ebp+8], xmm1

; 17835:             } else {

	jmp	SHORT $LN5@nk_panel_b
$LN7@nk_panel_b:

; 17836:                 button.x = header.x;

	movss	xmm0, DWORD PTR _header$11[ebp]
	movss	DWORD PTR _button$9[ebp], xmm0

; 17837:                 header.x += button.w + style->window.header.spacing.x + style->window.header.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$9[ebp+8]
	addss	xmm0, DWORD PTR [eax+5192]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+5176]
	addss	xmm0, DWORD PTR _header$11[ebp]
	movss	DWORD PTR _header$11[ebp], xmm0
$LN5@nk_panel_b:

; 17838:             }
; 17839:             if (nk_do_button_symbol(&ws, &win->buffer, button, (layout->flags & NK_WINDOW_MINIMIZED)?
; 17840:                 style->window.header.maximize_symbol: style->window.header.minimize_symbol,
; 17841:                 NK_BUTTON_DEFAULT, &style->window.header.minimize_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN41@nk_panel_b
	mov	edx, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR [edx+5156]
	mov	DWORD PTR tv469[ebp], eax
	jmp	SHORT $LN42@nk_panel_b
$LN41@nk_panel_b:
	mov	ecx, DWORD PTR _style$[ebp]
	mov	edx, DWORD PTR [ecx+5152]
	mov	DWORD PTR tv469[ebp], edx
$LN42@nk_panel_b:
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 5020				; 0000139cH
	push	eax
	push	0
	mov	ecx, DWORD PTR tv469[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _button$9[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _button$9[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _button$9[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _button$9[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	lea	eax, DWORD PTR _ws$7[ebp]
	push	eax
	call	_nk_do_button_symbol
	add	esp, 44					; 0000002cH
	test	eax, eax
	je	SHORT $LN4@nk_panel_b
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN4@nk_panel_b

; 17842:                 layout->flags = (layout->flags & NK_WINDOW_MINIMIZED) ?
; 17843:                     layout->flags & (nk_flags)~NK_WINDOW_MINIMIZED:
; 17844:                     layout->flags | NK_WINDOW_MINIMIZED;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN43@nk_panel_b
	mov	edx, DWORD PTR _layout$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, -32769				; ffff7fffH
	mov	DWORD PTR tv487[ebp], eax
	jmp	SHORT $LN44@nk_panel_b
$LN43@nk_panel_b:
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	or	edx, 32768				; 00008000H
	mov	DWORD PTR tv487[ebp], edx
$LN44@nk_panel_b:
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR tv487[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN4@nk_panel_b:

; 17845:         }}
; 17846: 
; 17847:         {/* window header title */
; 17848:         int text_len = nk_strlen(title);

	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _text_len$6[ebp], eax

; 17849:         struct nk_rect label = {0,0,0,0};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _label$5[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _label$5[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _label$5[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _label$5[ebp+12], xmm0

; 17850:         float t = font->width(font->userdata, font->height, title, text_len);

	mov	esi, esp
	mov	eax, DWORD PTR _text_len$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _t$4[ebp]

; 17851:         text.padding = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _text$12[ebp], eax
	mov	DWORD PTR _text$12[ebp+4], edx

; 17852: 
; 17853:         label.x = header.x + style->window.header.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$11[ebp]
	addss	xmm0, DWORD PTR [eax+5176]
	movss	DWORD PTR _label$5[ebp], xmm0

; 17854:         label.x += style->window.header.label_padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _label$5[ebp]
	addss	xmm0, DWORD PTR [eax+5184]
	movss	DWORD PTR _label$5[ebp], xmm0

; 17855:         label.y = header.y + style->window.header.label_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$11[ebp+4]
	addss	xmm0, DWORD PTR [eax+5188]
	movss	DWORD PTR _label$5[ebp+4], xmm0

; 17856:         label.h = font->height + 2 * style->window.header.label_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+5188]
	mov	ecx, DWORD PTR _font$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _label$5[ebp+12], xmm0

; 17857:         label.w = t + 2 * style->window.header.spacing.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+5192]
	addss	xmm0, DWORD PTR _t$4[ebp]
	movss	DWORD PTR _label$5[ebp+8], xmm0

; 17858:         label.w = NK_CLAMP(0, label.w, header.x + header.w - label.x);

	movss	xmm0, DWORD PTR _header$11[ebp]
	addss	xmm0, DWORD PTR _header$11[ebp+8]
	subss	xmm0, DWORD PTR _label$5[ebp]
	comiss	xmm0, DWORD PTR _label$5[ebp+8]
	jbe	SHORT $LN45@nk_panel_b
	movss	xmm0, DWORD PTR _label$5[ebp+8]
	movss	DWORD PTR tv553[ebp], xmm0
	jmp	SHORT $LN46@nk_panel_b
$LN45@nk_panel_b:
	movss	xmm0, DWORD PTR _header$11[ebp]
	addss	xmm0, DWORD PTR _header$11[ebp+8]
	subss	xmm0, DWORD PTR _label$5[ebp]
	movss	DWORD PTR tv553[ebp], xmm0
$LN46@nk_panel_b:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv553[ebp]
	jbe	SHORT $LN49@nk_panel_b
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv563[ebp], xmm0
	jmp	SHORT $LN50@nk_panel_b
$LN49@nk_panel_b:
	movss	xmm0, DWORD PTR _header$11[ebp]
	addss	xmm0, DWORD PTR _header$11[ebp+8]
	subss	xmm0, DWORD PTR _label$5[ebp]
	comiss	xmm0, DWORD PTR _label$5[ebp+8]
	jbe	SHORT $LN47@nk_panel_b
	movss	xmm0, DWORD PTR _label$5[ebp+8]
	movss	DWORD PTR tv562[ebp], xmm0
	jmp	SHORT $LN48@nk_panel_b
$LN47@nk_panel_b:
	movss	xmm0, DWORD PTR _header$11[ebp]
	addss	xmm0, DWORD PTR _header$11[ebp+8]
	subss	xmm0, DWORD PTR _label$5[ebp]
	movss	DWORD PTR tv562[ebp], xmm0
$LN48@nk_panel_b:
	movss	xmm0, DWORD PTR tv562[ebp]
	movss	DWORD PTR tv563[ebp], xmm0
$LN50@nk_panel_b:
	movss	xmm0, DWORD PTR tv563[ebp]
	movss	DWORD PTR _label$5[ebp+8], xmm0

; 17859:         nk_widget_text(out, label,(const char*)title, text_len, &text, NK_TEXT_LEFT, font);}

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	17					; 00000011H
	lea	ecx, DWORD PTR _text$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _text_len$6[ebp]
	push	edx
	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _label$5[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _label$5[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _label$5[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _label$5[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_widget_text
	add	esp, 40					; 00000028H
$LN19@nk_panel_b:

; 17860:     }
; 17861: 
; 17862:     /* draw window background */
; 17863:     if (!(layout->flags & NK_WINDOW_MINIMIZED) && !(layout->flags & NK_WINDOW_DYNAMIC)) {

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32768				; 00008000H
	jne	$LN1@nk_panel_b
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2048				; 00000800H
	jne	$LN1@nk_panel_b

; 17864:         struct nk_rect body;
; 17865:         body.x = win->bounds.x;

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	movss	DWORD PTR _body$3[ebp], xmm0

; 17866:         body.w = win->bounds.w;

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR [eax+84]
	movss	DWORD PTR _body$3[ebp+8], xmm0

; 17867:         body.y = (win->bounds.y + layout->header_height);

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+80]
	addss	xmm0, DWORD PTR [ecx+48]
	movss	DWORD PTR _body$3[ebp+4], xmm0

; 17868:         body.h = (win->bounds.h - layout->header_height);

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+88]
	subss	xmm0, DWORD PTR [ecx+48]
	movss	DWORD PTR _body$3[ebp+12], xmm0

; 17869:         if (style->window.fixed_background.type == NK_STYLE_ITEM_IMAGE)

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+5200], 1
	jne	SHORT $LN2@nk_panel_b

; 17870:             nk_draw_image(out, body, &style->window.fixed_background.data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	add	ecx, 5204				; 00001454H
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _body$3[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _body$3[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _body$3[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _body$3[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_draw_image
	add	esp, 28					; 0000001cH
	jmp	SHORT $LN1@nk_panel_b
$LN2@nk_panel_b:

; 17871:         else nk_fill_rect(out, body, 0, style->window.fixed_background.data.color);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5204]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _body$3[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _body$3[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _body$3[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _body$3[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH
$LN1@nk_panel_b:

; 17872:     }
; 17873: 
; 17874:     /* set clipping rectangle */
; 17875:     {struct nk_rect clip;
; 17876:     layout->clip = layout->bounds;

	mov	eax, DWORD PTR _layout$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR _layout$[ebp]
	add	ecx, 60					; 0000003cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 17877:     nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
; 17878:         layout->clip.x + layout->clip.w, layout->clip.y + layout->clip.h);

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+64]
	addss	xmm0, DWORD PTR [ecx+72]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _layout$[ebp]
	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [edx+60]
	addss	xmm0, DWORD PTR [eax+68]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _layout$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+64]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _layout$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+60]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 104				; 00000068H
	push	eax
	lea	ecx, DWORD PTR _clip$2[ebp]
	push	ecx
	call	_nk_unify
	add	esp, 24					; 00000018H

; 17879:     nk_push_scissor(out, clip);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _clip$2[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _clip$2[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _clip$2[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _clip$2[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_push_scissor
	add	esp, 20					; 00000014H

; 17880:     layout->clip = clip;}

	mov	eax, DWORD PTR _layout$[ebp]
	add	eax, 60					; 0000003cH
	mov	ecx, DWORD PTR _clip$2[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _clip$2[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _clip$2[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _clip$2[ebp+12]
	mov	DWORD PTR [eax+12], edx

; 17881:     return !(layout->flags & NK_WINDOW_HIDDEN) && !(layout->flags & NK_WINDOW_MINIMIZED);

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 8192				; 00002000H
	jne	SHORT $LN51@nk_panel_b
	mov	edx, DWORD PTR _layout$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 32768				; 00008000H
	jne	SHORT $LN51@nk_panel_b
	mov	DWORD PTR tv626[ebp], 1
	jmp	SHORT $LN52@nk_panel_b
$LN51@nk_panel_b:
	mov	DWORD PTR tv626[ebp], 0
$LN52@nk_panel_b:
	mov	eax, DWORD PTR tv626[ebp]
$LN34@nk_panel_b:

; 17882: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN65@nk_panel_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 588				; 0000024cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN65@nk_panel_b:
	DD	11					; 0000000bH
	DD	$LN64@nk_panel_b
$LN64@nk_panel_b:
	DD	-88					; ffffffa8H
	DD	8
	DD	$LN53@nk_panel_b
	DD	-104					; ffffff98H
	DD	8
	DD	$LN54@nk_panel_b
	DD	-152					; ffffff68H
	DD	16					; 00000010H
	DD	$LN55@nk_panel_b
	DD	-176					; ffffff50H
	DD	16					; 00000010H
	DD	$LN56@nk_panel_b
	DD	-200					; ffffff38H
	DD	16					; 00000010H
	DD	$LN57@nk_panel_b
	DD	-236					; ffffff14H
	DD	16					; 00000010H
	DD	$LN58@nk_panel_b
	DD	-248					; ffffff08H
	DD	4
	DD	$LN59@nk_panel_b
	DD	-260					; fffffefcH
	DD	4
	DD	$LN60@nk_panel_b
	DD	-296					; fffffed8H
	DD	16					; 00000010H
	DD	$LN61@nk_panel_b
	DD	-332					; fffffeb4H
	DD	16					; 00000010H
	DD	$LN62@nk_panel_b
	DD	-356					; fffffe9cH
	DD	16					; 00000010H
	DD	$LN63@nk_panel_b
$LN63@nk_panel_b:
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	0
$LN62@nk_panel_b:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	121					; 00000079H
	DB	0
$LN61@nk_panel_b:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN60@nk_panel_b:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	0
$LN59@nk_panel_b:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	0
$LN58@nk_panel_b:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN57@nk_panel_b:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN56@nk_panel_b:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN55@nk_panel_b:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN54@nk_panel_b:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN53@nk_panel_b:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_nk_panel_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_panel_is_nonblock
_TEXT	SEGMENT
tv66 = -196						; size = 4
_type$ = 8						; size = 4
_nk_panel_is_nonblock PROC				; COMDAT

; 17658: {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17659:     return (type & NK_PANEL_SET_NONBLOCK)?1:0;

	mov	eax, DWORD PTR _type$[ebp]
	and	eax, 240				; 000000f0H
	je	SHORT $LN3@nk_panel_i
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@nk_panel_i
$LN3@nk_panel_i:
	mov	DWORD PTR tv66[ebp], 0
$LN4@nk_panel_i:
	mov	eax, DWORD PTR tv66[ebp]

; 17660: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_panel_is_nonblock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_panel_is_sub
_TEXT	SEGMENT
tv66 = -196						; size = 4
_type$ = 8						; size = 4
_nk_panel_is_sub PROC					; COMDAT

; 17652: {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17653:     return (type & NK_PANEL_SET_SUB)?1:0;

	mov	eax, DWORD PTR _type$[ebp]
	and	eax, 246				; 000000f6H
	je	SHORT $LN3@nk_panel_i
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@nk_panel_i
$LN3@nk_panel_i:
	mov	DWORD PTR tv66[ebp], 0
$LN4@nk_panel_i:
	mov	eax, DWORD PTR tv66[ebp]

; 17654: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_panel_is_sub ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_panel_get_border_color
_TEXT	SEGMENT
tv64 = -196						; size = 4
_style$ = 8						; size = 4
_type$ = 12						; size = 4
_nk_panel_get_border_color PROC				; COMDAT

; 17637: {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17638:     switch (type) {

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 126		; 0000007eH
	ja	SHORT $LN7@nk_panel_g
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN12@nk_panel_g[edx]
	jmp	DWORD PTR $LN13@nk_panel_g[eax*4]
$LN7@nk_panel_g:

; 17639:     default:
; 17640:     case NK_PANEL_WINDOW: return style->window.border_color;

	mov	eax, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR [eax+5224]
	jmp	SHORT $LN10@nk_panel_g
$LN6@nk_panel_g:

; 17641:     case NK_PANEL_GROUP: return style->window.group_border_color;

	mov	eax, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR [eax+5244]
	jmp	SHORT $LN10@nk_panel_g
$LN5@nk_panel_g:

; 17642:     case NK_PANEL_POPUP: return style->window.popup_border_color;

	mov	eax, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR [eax+5228]
	jmp	SHORT $LN10@nk_panel_g
$LN4@nk_panel_g:

; 17643:     case NK_PANEL_CONTEXTUAL: return style->window.contextual_border_color;

	mov	eax, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR [eax+5236]
	jmp	SHORT $LN10@nk_panel_g
$LN3@nk_panel_g:

; 17644:     case NK_PANEL_COMBO: return style->window.combo_border_color;

	mov	eax, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR [eax+5232]
	jmp	SHORT $LN10@nk_panel_g
$LN2@nk_panel_g:

; 17645:     case NK_PANEL_MENU: return style->window.menu_border_color;

	mov	eax, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR [eax+5240]
	jmp	SHORT $LN10@nk_panel_g
$LN1@nk_panel_g:

; 17646:     case NK_PANEL_TOOLTIP: return style->window.menu_border_color;

	mov	eax, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR [eax+5240]
$LN10@nk_panel_g:

; 17647:     }
; 17648: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@nk_panel_g:
	DD	$LN6@nk_panel_g
	DD	$LN5@nk_panel_g
	DD	$LN4@nk_panel_g
	DD	$LN3@nk_panel_g
	DD	$LN2@nk_panel_g
	DD	$LN1@nk_panel_g
	DD	$LN7@nk_panel_g
$LN12@nk_panel_g:
	DB	0
	DB	6
	DB	1
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
_nk_panel_get_border_color ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_panel_get_border
_TEXT	SEGMENT
tv66 = -196						; size = 4
_style$ = 8						; size = 4
_flags$ = 12						; size = 4
_type$ = 16						; size = 4
_nk_panel_get_border PROC				; COMDAT

; 17621: {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17622:     if (flags & NK_WINDOW_BORDER) {

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 1
	je	$LN11@nk_panel_g

; 17623:         switch (type) {

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR tv66[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 126		; 0000007eH
	ja	SHORT $LN8@nk_panel_g
	mov	edx, DWORD PTR tv66[ebp]
	movzx	eax, BYTE PTR $LN14@nk_panel_g[edx]
	jmp	DWORD PTR $LN15@nk_panel_g[eax*4]
$LN8@nk_panel_g:

; 17624:         default:
; 17625:         case NK_PANEL_WINDOW: return style->window.border;

	mov	eax, DWORD PTR _style$[ebp]
	fld	DWORD PTR [eax+5272]
	jmp	SHORT $LN1@nk_panel_g
$LN7@nk_panel_g:

; 17626:         case NK_PANEL_GROUP: return style->window.group_border;

	mov	eax, DWORD PTR _style$[ebp]
	fld	DWORD PTR [eax+5288]
	jmp	SHORT $LN1@nk_panel_g
$LN6@nk_panel_g:

; 17627:         case NK_PANEL_POPUP: return style->window.popup_border;

	mov	eax, DWORD PTR _style$[ebp]
	fld	DWORD PTR [eax+5296]
	jmp	SHORT $LN1@nk_panel_g
$LN5@nk_panel_g:

; 17628:         case NK_PANEL_CONTEXTUAL: return style->window.contextual_border;

	mov	eax, DWORD PTR _style$[ebp]
	fld	DWORD PTR [eax+5280]
	jmp	SHORT $LN1@nk_panel_g
$LN4@nk_panel_g:

; 17629:         case NK_PANEL_COMBO: return style->window.combo_border;

	mov	eax, DWORD PTR _style$[ebp]
	fld	DWORD PTR [eax+5276]
	jmp	SHORT $LN1@nk_panel_g
$LN3@nk_panel_g:

; 17630:         case NK_PANEL_MENU: return style->window.menu_border;

	mov	eax, DWORD PTR _style$[ebp]
	fld	DWORD PTR [eax+5284]
	jmp	SHORT $LN1@nk_panel_g
$LN2@nk_panel_g:

; 17631:         case NK_PANEL_TOOLTIP: return style->window.menu_border;

	mov	eax, DWORD PTR _style$[ebp]
	fld	DWORD PTR [eax+5284]
	jmp	SHORT $LN1@nk_panel_g

; 17632:     }} else return 0;

	jmp	SHORT $LN1@nk_panel_g
$LN11@nk_panel_g:
	fldz
$LN1@nk_panel_g:

; 17633: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@nk_panel_g:
	DD	$LN7@nk_panel_g
	DD	$LN6@nk_panel_g
	DD	$LN5@nk_panel_g
	DD	$LN4@nk_panel_g
	DD	$LN3@nk_panel_g
	DD	$LN2@nk_panel_g
	DD	$LN8@nk_panel_g
$LN14@nk_panel_g:
	DB	0
	DB	6
	DB	1
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
_nk_panel_get_border ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_panel_get_padding
_TEXT	SEGMENT
tv64 = -196						; size = 4
_style$ = 8						; size = 4
_type$ = 12						; size = 4
_nk_panel_get_padding PROC				; COMDAT

; 17605: {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17606:     switch (type) {

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 126		; 0000007eH
	ja	SHORT $LN7@nk_panel_g
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN12@nk_panel_g[edx]
	jmp	DWORD PTR $LN13@nk_panel_g[eax*4]
$LN7@nk_panel_g:

; 17607:     default:
; 17608:     case NK_PANEL_WINDOW: return style->window.padding;

	mov	ecx, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR [ecx+5332]
	mov	edx, DWORD PTR [ecx+5336]
	jmp	SHORT $LN10@nk_panel_g
$LN6@nk_panel_g:

; 17609:     case NK_PANEL_GROUP: return style->window.group_padding;

	mov	ecx, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR [ecx+5340]
	mov	edx, DWORD PTR [ecx+5344]
	jmp	SHORT $LN10@nk_panel_g
$LN5@nk_panel_g:

; 17610:     case NK_PANEL_POPUP: return style->window.popup_padding;

	mov	ecx, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR [ecx+5348]
	mov	edx, DWORD PTR [ecx+5352]
	jmp	SHORT $LN10@nk_panel_g
$LN4@nk_panel_g:

; 17611:     case NK_PANEL_CONTEXTUAL: return style->window.contextual_padding;

	mov	ecx, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR [ecx+5364]
	mov	edx, DWORD PTR [ecx+5368]
	jmp	SHORT $LN10@nk_panel_g
$LN3@nk_panel_g:

; 17612:     case NK_PANEL_COMBO: return style->window.combo_padding;

	mov	ecx, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR [ecx+5356]
	mov	edx, DWORD PTR [ecx+5360]
	jmp	SHORT $LN10@nk_panel_g
$LN2@nk_panel_g:

; 17613:     case NK_PANEL_MENU: return style->window.menu_padding;

	mov	ecx, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR [ecx+5372]
	mov	edx, DWORD PTR [ecx+5376]
	jmp	SHORT $LN10@nk_panel_g
$LN1@nk_panel_g:

; 17614:     case NK_PANEL_TOOLTIP: return style->window.menu_padding;

	mov	ecx, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR [ecx+5372]
	mov	edx, DWORD PTR [ecx+5376]
$LN10@nk_panel_g:

; 17615:     }
; 17616: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@nk_panel_g:
	DD	$LN6@nk_panel_g
	DD	$LN5@nk_panel_g
	DD	$LN4@nk_panel_g
	DD	$LN3@nk_panel_g
	DD	$LN2@nk_panel_g
	DD	$LN1@nk_panel_g
	DD	$LN7@nk_panel_g
$LN12@nk_panel_g:
	DB	0
	DB	6
	DB	1
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
_nk_panel_get_padding ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_panel_has_header
_TEXT	SEGMENT
tv73 = -208						; size = 4
tv68 = -208						; size = 4
_active$ = -8						; size = 4
_flags$ = 8						; size = 4
_title$ = 12						; size = 4
_nk_panel_has_header PROC				; COMDAT

; 17595: {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17596:     int active = 0;

	mov	DWORD PTR _active$[ebp], 0

; 17597:     active = (flags & (NK_WINDOW_CLOSABLE|NK_WINDOW_MINIMIZABLE));

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 24					; 00000018H
	mov	DWORD PTR _active$[ebp], eax

; 17598:     active = active || (flags & NK_WINDOW_TITLE);

	jne	SHORT $LN3@nk_panel_h
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 64					; 00000040H
	jne	SHORT $LN3@nk_panel_h
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@nk_panel_h
$LN3@nk_panel_h:
	mov	DWORD PTR tv68[ebp], 1
$LN4@nk_panel_h:
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR _active$[ebp], ecx

; 17599:     active = active && !(flags & NK_WINDOW_HIDDEN) && title;

	cmp	DWORD PTR _active$[ebp], 0
	je	SHORT $LN5@nk_panel_h
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 8192				; 00002000H
	jne	SHORT $LN5@nk_panel_h
	cmp	DWORD PTR _title$[ebp], 0
	je	SHORT $LN5@nk_panel_h
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN6@nk_panel_h
$LN5@nk_panel_h:
	mov	DWORD PTR tv73[ebp], 0
$LN6@nk_panel_h:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR _active$[ebp], ecx

; 17600:     return active;

	mov	eax, DWORD PTR _active$[ebp]

; 17601: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_panel_has_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_build
_TEXT	SEGMENT
_buf$1 = -108						; size = 4
_next$2 = -96						; size = 4
_next$3 = -84						; size = 4
_cursor$4 = -72						; size = 4
_mouse_bounds$5 = -60					; size = 16
_buffer$ = -36						; size = 4
_cmd$ = -24						; size = 4
_iter$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_nk_build PROC						; COMDAT

; 17493: {

	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 17494:     struct nk_window *iter = 0;

	mov	DWORD PTR _iter$[ebp], 0

; 17495:     struct nk_command *cmd = 0;

	mov	DWORD PTR _cmd$[ebp], 0

; 17496:     nk_byte *buffer = 0;

	mov	DWORD PTR _buffer$[ebp], 0

; 17497: 
; 17498:     /* draw cursor overlay */
; 17499:     if (!ctx->style.cursor_active)

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+392], 0
	jne	SHORT $LN16@nk_build

; 17500:         ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_ARROW];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+364]
	mov	DWORD PTR [edx+392], ecx
$LN16@nk_build:

; 17501:     if (ctx->style.cursor_active && !ctx->input.mouse.grabbed && ctx->style.cursor_visible) {

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+392], 0
	je	$LN15@nk_build
	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, BYTE PTR [eax+357]
	test	ecx, ecx
	jne	$LN15@nk_build
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+400], 0
	je	$LN15@nk_build

; 17502:         struct nk_rect mouse_bounds;
; 17503:         const struct nk_cursor *cursor = ctx->style.cursor_active;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+392]
	mov	DWORD PTR _cursor$4[ebp], ecx

; 17504:         nk_command_buffer_init(&ctx->overlay, &ctx->memory, NK_CLIPPING_OFF);

	push	0
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5748				; 00001674H
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 12840				; 00003228H
	push	ecx
	call	_nk_command_buffer_init
	add	esp, 12					; 0000000cH

; 17505:         nk_start_buffer(ctx, &ctx->overlay);

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 12840				; 00003228H
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_start_buffer
	add	esp, 8

; 17506: 
; 17507:         mouse_bounds.x = ctx->input.mouse.pos.x - cursor->offset.x;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _cursor$4[ebp]
	movss	xmm0, DWORD PTR [eax+324]
	subss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR _mouse_bounds$5[ebp], xmm0

; 17508:         mouse_bounds.y = ctx->input.mouse.pos.y - cursor->offset.y;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _cursor$4[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	subss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR _mouse_bounds$5[ebp+4], xmm0

; 17509:         mouse_bounds.w = cursor->size.x;

	mov	eax, DWORD PTR _cursor$4[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR _mouse_bounds$5[ebp+8], xmm0

; 17510:         mouse_bounds.h = cursor->size.y;

	mov	eax, DWORD PTR _cursor$4[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _mouse_bounds$5[ebp+12], xmm0

; 17511: 
; 17512:         nk_draw_image(&ctx->overlay, mouse_bounds, &cursor->img, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _cursor$4[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _mouse_bounds$5[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _mouse_bounds$5[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _mouse_bounds$5[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _mouse_bounds$5[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 12840				; 00003228H
	push	edx
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 17513:         nk_finish_buffer(ctx, &ctx->overlay);

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 12840				; 00003228H
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_finish_buffer
	add	esp, 8
$LN15@nk_build:

; 17514:     }
; 17515:     /* build one big draw command list out of all window buffers */
; 17516:     iter = ctx->begin;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12928]
	mov	DWORD PTR _iter$[ebp], ecx

; 17517:     buffer = (nk_byte*)ctx->memory.memory.ptr;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5780]
	mov	DWORD PTR _buffer$[ebp], ecx
$LN14@nk_build:

; 17518:     while (iter != 0) {

	cmp	DWORD PTR _iter$[ebp], 0
	je	$LN13@nk_build

; 17519:         struct nk_window *next = iter->next;

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+376]
	mov	DWORD PTR _next$3[ebp], ecx

; 17520:         if (iter->buffer.last == iter->buffer.begin || (iter->flags & NK_WINDOW_HIDDEN)||
; 17521:             iter->seq != ctx->seq)

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR _iter$[ebp]
	mov	edx, DWORD PTR [eax+136]
	cmp	edx, DWORD PTR [ecx+128]
	je	SHORT $LN11@nk_build
	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 8192				; 00002000H
	jne	SHORT $LN11@nk_build
	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+12952]
	je	SHORT $LN12@nk_build
$LN11@nk_build:

; 17522:             goto cont;

	jmp	SHORT $cont$22
$LN12@nk_build:

; 17523: 
; 17524:         cmd = nk_ptr_add(struct nk_command, buffer, iter->buffer.last);

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	add	ecx, DWORD PTR [eax+136]
	mov	DWORD PTR _cmd$[ebp], ecx
$LN10@nk_build:

; 17525:         while (next && ((next->buffer.last == next->buffer.begin) ||
; 17526:             (next->flags & NK_WINDOW_HIDDEN)))

	cmp	DWORD PTR _next$3[ebp], 0
	je	SHORT $LN9@nk_build
	mov	eax, DWORD PTR _next$3[ebp]
	mov	ecx, DWORD PTR _next$3[ebp]
	mov	edx, DWORD PTR [eax+136]
	cmp	edx, DWORD PTR [ecx+128]
	je	SHORT $LN8@nk_build
	mov	eax, DWORD PTR _next$3[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 8192				; 00002000H
	je	SHORT $LN9@nk_build
$LN8@nk_build:

; 17527:             next = next->next; /* skip empty command buffers */

	mov	eax, DWORD PTR _next$3[ebp]
	mov	ecx, DWORD PTR [eax+376]
	mov	DWORD PTR _next$3[ebp], ecx
	jmp	SHORT $LN10@nk_build
$LN9@nk_build:

; 17528: 
; 17529:         if (next) cmd->next = next->buffer.begin;

	cmp	DWORD PTR _next$3[ebp], 0
	je	SHORT $cont$22
	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _next$3[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	DWORD PTR [eax+4], edx
$cont$22:

; 17530:         cont: iter = next;

	mov	eax, DWORD PTR _next$3[ebp]
	mov	DWORD PTR _iter$[ebp], eax

; 17531:     }

	jmp	$LN14@nk_build
$LN13@nk_build:

; 17532:     /* append all popup draw commands into lists */
; 17533:     iter = ctx->begin;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12928]
	mov	DWORD PTR _iter$[ebp], ecx
$LN6@nk_build:

; 17534:     while (iter != 0) {

	cmp	DWORD PTR _iter$[ebp], 0
	je	SHORT $LN5@nk_build

; 17535:         struct nk_window *next = iter->next;

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+376]
	mov	DWORD PTR _next$2[ebp], ecx

; 17536:         struct nk_popup_buffer *buf;
; 17537:         if (!iter->popup.buf.active)

	mov	eax, DWORD PTR _iter$[ebp]
	cmp	DWORD PTR [eax+276], 0
	jne	SHORT $LN4@nk_build

; 17538:             goto skip;

	jmp	SHORT $skip$23
$LN4@nk_build:

; 17539: 
; 17540:         buf = &iter->popup.buf;

	mov	eax, DWORD PTR _iter$[ebp]
	add	eax, 260				; 00000104H
	mov	DWORD PTR _buf$1[ebp], eax

; 17541:         cmd->next = buf->begin;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _buf$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 17542:         cmd = nk_ptr_add(struct nk_command, buffer, buf->last);

	mov	eax, DWORD PTR _buf$1[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	add	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _cmd$[ebp], ecx

; 17543:         buf->active = nk_false;

	mov	eax, DWORD PTR _buf$1[ebp]
	mov	DWORD PTR [eax+16], 0
$skip$23:

; 17544:         skip: iter = next;

	mov	eax, DWORD PTR _next$2[ebp]
	mov	DWORD PTR _iter$[ebp], eax

; 17545:     }

	jmp	SHORT $LN6@nk_build
$LN5@nk_build:

; 17546:     /* append overlay commands */
; 17547:     if (cmd) {

	cmp	DWORD PTR _cmd$[ebp], 0
	je	SHORT $LN1@nk_build

; 17548:         if (ctx->overlay.end != ctx->overlay.begin)

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [eax+12872]
	cmp	edx, DWORD PTR [ecx+12868]
	je	SHORT $LN2@nk_build

; 17549:             cmd->next = ctx->overlay.begin;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+12868]
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN1@nk_build
$LN2@nk_build:

; 17550:         else cmd->next = ctx->memory.allocated;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	DWORD PTR [eax+4], edx
$LN1@nk_build:

; 17551:     }
; 17552: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@nk_build
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN21@nk_build:
	DD	1
	DD	$LN20@nk_build
$LN20@nk_build:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN19@nk_build
$LN19@nk_build:
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_build ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_finish
_TEXT	SEGMENT
_memory$ = -32						; size = 4
_parent_last$ = -20					; size = 4
_buf$ = -8						; size = 4
_ctx$ = 8						; size = 4
_win$ = 12						; size = 4
_nk_finish PROC						; COMDAT

; 17474: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17475:     struct nk_popup_buffer *buf;
; 17476:     struct nk_command *parent_last;
; 17477:     void *memory;
; 17478: 
; 17479:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_finish
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_finish@@9@9@ddf8d5d8
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_finish:

; 17480:     NK_ASSERT(win);

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN7@nk_finish
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_finish@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17MIEKGGLN@?$AAw?$AAi?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_finish:

; 17481:     if (!ctx || !win) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_finish
	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN3@nk_finish
$LN2@nk_finish:
	jmp	SHORT $LN4@nk_finish
$LN3@nk_finish:

; 17482:     nk_finish_buffer(ctx, &win->buffer);

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_finish_buffer
	add	esp, 8

; 17483:     if (!win->popup.buf.active) return;

	mov	eax, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [eax+276], 0
	jne	SHORT $LN1@nk_finish
	jmp	SHORT $LN4@nk_finish
$LN1@nk_finish:

; 17484: 
; 17485:     buf = &win->popup.buf;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 260				; 00000104H
	mov	DWORD PTR _buf$[ebp], eax

; 17486:     memory = ctx->memory.memory.ptr;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5780]
	mov	DWORD PTR _memory$[ebp], ecx

; 17487:     parent_last = nk_ptr_add(struct nk_command, memory, buf->parent);

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _memory$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _parent_last$[ebp], ecx

; 17488:     parent_last->next = buf->end;

	mov	eax, DWORD PTR _parent_last$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+4], edx
$LN4@nk_finish:

; 17489: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_finish ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_finish_buffer
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_buffer$ = 12						; size = 4
_nk_finish_buffer PROC					; COMDAT

; 17465: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17466:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_finish_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_finish_buffer@@9@9@ddf8d5d8
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_finish_:

; 17467:     NK_ASSERT(buffer);

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN6@nk_finish_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_finish_buffer@@9@9@ddf8d5d8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@KMGMBAKN@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_finish_:

; 17468:     if (!ctx || !buffer) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_finish_
	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN2@nk_finish_
$LN1@nk_finish_:
	jmp	SHORT $LN3@nk_finish_
$LN2@nk_finish_:

; 17469:     buffer->end = ctx->memory.allocated;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	DWORD PTR [eax+32], edx
$LN3@nk_finish_:

; 17470: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_finish_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_finish_popup
_TEXT	SEGMENT
_buf$ = -8						; size = 4
_ctx$ = 8						; size = 4
_win$ = 12						; size = 4
_nk_finish_popup PROC					; COMDAT

; 17452: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17453:     struct nk_popup_buffer *buf;
; 17454:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_finish_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_finish_popup@@9@9@ddf8d5d8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_finish_:

; 17455:     NK_ASSERT(win);

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN6@nk_finish_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_finish_popup@@9@9@ddf8d5d8
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17MIEKGGLN@?$AAw?$AAi?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_finish_:

; 17456:     if (!ctx || !win) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_finish_
	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN2@nk_finish_
$LN1@nk_finish_:
	jmp	SHORT $LN3@nk_finish_
$LN2@nk_finish_:

; 17457: 
; 17458:     buf = &win->popup.buf;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 260				; 00000104H
	mov	DWORD PTR _buf$[ebp], eax

; 17459:     buf->last = win->buffer.last;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR [eax+8], edx

; 17460:     buf->end = win->buffer.end;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR [eax+12], edx
$LN3@nk_finish_:

; 17461: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_finish_popup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_start_popup
_TEXT	SEGMENT
_buf$ = -8						; size = 4
_ctx$ = 8						; size = 4
_win$ = 12						; size = 4
_nk_start_popup PROC					; COMDAT

; 17435: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17436:     struct nk_popup_buffer *buf;
; 17437:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_start_p
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_start_popup@@9@9@ddf8d5d8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_start_p:

; 17438:     NK_ASSERT(win);

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN6@nk_start_p
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_start_popup@@9@9@ddf8d5d8
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17MIEKGGLN@?$AAw?$AAi?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_start_p:

; 17439:     if (!ctx || !win) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_start_p
	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN2@nk_start_p
$LN1@nk_start_p:
	jmp	SHORT $LN3@nk_start_p
$LN2@nk_start_p:

; 17440: 
; 17441:     /* save buffer fill state for popup */
; 17442:     buf = &win->popup.buf;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 260				; 00000104H
	mov	DWORD PTR _buf$[ebp], eax

; 17443:     buf->begin = win->buffer.end;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR [eax], edx

; 17444:     buf->end = win->buffer.end;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR [eax+12], edx

; 17445:     buf->parent = win->buffer.last;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR [eax+4], edx

; 17446:     buf->last = buf->begin;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx

; 17447:     buf->active = nk_true;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax+16], 1
$LN3@nk_start_p:

; 17448: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_start_popup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_start
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_win$ = 12						; size = 4
_nk_start PROC						; COMDAT

; 17427: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17428:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN3@nk_start
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_start@@9@9@ddf8d5d8
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@nk_start:

; 17429:     NK_ASSERT(win);

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN4@nk_start
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_start@@9@9@ddf8d5d8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17MIEKGGLN@?$AAw?$AAi?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_start:

; 17430:     nk_start_buffer(ctx, &win->buffer);

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_start_buffer
	add	esp, 8

; 17431: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_start ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_start_buffer
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_buffer$ = 12						; size = 4
_nk_start_buffer PROC					; COMDAT

; 17415: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17416:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_start_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_start_buffer@@9@9@ddf8d5d8
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_start_b:

; 17417:     NK_ASSERT(buffer);

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN6@nk_start_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_start_buffer@@9@9@ddf8d5d8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@KMGMBAKN@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_start_b:

; 17418:     if (!ctx || !buffer) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_start_b
	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN2@nk_start_b
$LN1@nk_start_b:
	jmp	SHORT $LN3@nk_start_b
$LN2@nk_start_b:

; 17419:     buffer->begin = ctx->memory.allocated;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	DWORD PTR [eax+28], edx

; 17420:     buffer->end = buffer->begin;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+32], edx

; 17421:     buffer->last = buffer->begin;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+36], edx

; 17422:     buffer->clip = nk_null_rect;

	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _nk_null_rect
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _nk_null_rect+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _nk_null_rect+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _nk_null_rect+12
	mov	DWORD PTR [eax+12], edx
$LN3@nk_start_b:

; 17423: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_start_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_setup
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_font$ = 12						; size = 4
_nk_setup PROC						; COMDAT

; 17238: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17239:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_setup
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_setup@@9@9@ddf8d5d8
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_setup:

; 17240:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_setup
	jmp	SHORT $LN3@nk_setup
$LN2@nk_setup:

; 17241:     nk_zero_struct(*ctx);

	push	12956					; 0000329cH
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 17242:     nk_style_default(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_style_default
	add	esp, 4

; 17243:     ctx->seq = 1;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+12952], 1

; 17244:     if (font) ctx->style.font = font;

	cmp	DWORD PTR _font$[ebp], 0
	je	SHORT $LN1@nk_setup
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax+360], ecx
$LN1@nk_setup:

; 17245: #ifdef NK_INCLUDE_VERTEX_BUFFER_OUTPUT
; 17246:     nk_draw_list_init(&ctx->draw_list);

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 7332				; 00001ca4H
	push	eax
	call	_nk_draw_list_init
	add	esp, 4
$LN3@nk_setup:

; 17247: #endif
; 17248: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_setup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_free_panel
_TEXT	SEGMENT
_pe$ = -20						; size = 4
_pd$ = -8						; size = 4
_ctx$ = 8						; size = 4
_pan$ = 12						; size = 4
_nk_free_panel PROC					; COMDAT

; 18274: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18275:     union nk_page_data *pd = NK_CONTAINER_OF(pan, union nk_page_data, pan);

	mov	eax, DWORD PTR _pan$[ebp]
	mov	DWORD PTR _pd$[ebp], eax

; 18276:     struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);

	mov	eax, DWORD PTR _pd$[ebp]
	mov	DWORD PTR _pe$[ebp], eax

; 18277:     nk_free_page_element(ctx, pe);

	mov	eax, DWORD PTR _pe$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_free_page_element
	add	esp, 8

; 18278: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_free_panel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_create_panel
_TEXT	SEGMENT
_elem$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_create_panel PROC					; COMDAT

; 18264: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18265:     struct nk_page_element *elem;
; 18266:     elem = nk_create_page_element(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_create_page_element
	add	esp, 4
	mov	DWORD PTR _elem$[ebp], eax

; 18267:     if (!elem) return 0;

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN1@nk_create_
	xor	eax, eax
	jmp	SHORT $LN2@nk_create_
$LN1@nk_create_:

; 18268:     nk_zero_struct(*elem);

	push	432					; 000001b0H
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 18269:     return &elem->data.pan;

	mov	eax, DWORD PTR _elem$[ebp]
$LN2@nk_create_:

; 18270: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_create_panel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_remove_table
_TEXT	SEGMENT
_win$ = 8						; size = 4
_tbl$ = 12						; size = 4
_nk_remove_table PROC					; COMDAT

; 18324: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18325:     if (win->tables == tbl)

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+368]
	cmp	ecx, DWORD PTR _tbl$[ebp]
	jne	SHORT $LN3@nk_remove_

; 18326:         win->tables = tbl->next;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _tbl$[ebp]
	mov	edx, DWORD PTR [ecx+416]
	mov	DWORD PTR [eax+368], edx
$LN3@nk_remove_:

; 18327:     if (tbl->next)

	mov	eax, DWORD PTR _tbl$[ebp]
	cmp	DWORD PTR [eax+416], 0
	je	SHORT $LN2@nk_remove_

; 18328:         tbl->next->prev = tbl->prev;

	mov	eax, DWORD PTR _tbl$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	mov	edx, DWORD PTR _tbl$[ebp]
	mov	eax, DWORD PTR [edx+420]
	mov	DWORD PTR [ecx+420], eax
$LN2@nk_remove_:

; 18329:     if (tbl->prev)

	mov	eax, DWORD PTR _tbl$[ebp]
	cmp	DWORD PTR [eax+420], 0
	je	SHORT $LN1@nk_remove_

; 18330:         tbl->prev->next = tbl->next;

	mov	eax, DWORD PTR _tbl$[ebp]
	mov	ecx, DWORD PTR [eax+420]
	mov	edx, DWORD PTR _tbl$[ebp]
	mov	eax, DWORD PTR [edx+416]
	mov	DWORD PTR [ecx+416], eax
$LN1@nk_remove_:

; 18331:     tbl->next = 0;

	mov	eax, DWORD PTR _tbl$[ebp]
	mov	DWORD PTR [eax+416], 0

; 18332:     tbl->prev = 0;

	mov	eax, DWORD PTR _tbl$[ebp]
	mov	DWORD PTR [eax+420], 0

; 18333: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_remove_table ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_free_table
_TEXT	SEGMENT
_pe$ = -20						; size = 4
_pd$ = -8						; size = 4
_ctx$ = 8						; size = 4
_tbl$ = 12						; size = 4
_nk_free_table PROC					; COMDAT

; 18297: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18298:     union nk_page_data *pd = NK_CONTAINER_OF(tbl, union nk_page_data, tbl);

	mov	eax, DWORD PTR _tbl$[ebp]
	mov	DWORD PTR _pd$[ebp], eax

; 18299:     struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);

	mov	eax, DWORD PTR _pd$[ebp]
	mov	DWORD PTR _pe$[ebp], eax

; 18300:     nk_free_page_element(ctx, pe);

	mov	eax, DWORD PTR _pe$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_free_page_element
	add	esp, 8

; 18301: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_free_table ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_free_window
_TEXT	SEGMENT
_pe$1 = -44						; size = 4
_pd$2 = -32						; size = 4
_n$3 = -20						; size = 4
_it$ = -8						; size = 4
_ctx$ = 8						; size = 4
_win$ = 12						; size = 4
_nk_free_window PROC					; COMDAT

; 18389: {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18390:     /* unlink windows from list */
; 18391:     struct nk_table *it = win->tables;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+368]
	mov	DWORD PTR _it$[ebp], ecx

; 18392:     if (win->popup.win) {

	mov	eax, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [eax+252], 0
	je	SHORT $LN4@nk_free_wi

; 18393:         nk_free_window(ctx, win->popup.win);

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_free_window
	add	esp, 8

; 18394:         win->popup.win = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+252], 0
$LN4@nk_free_wi:

; 18395:     }
; 18396:     win->next = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+376], 0

; 18397:     win->prev = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+380], 0
$LN3@nk_free_wi:

; 18398: 
; 18399:     while (it) {

	cmp	DWORD PTR _it$[ebp], 0
	je	SHORT $LN2@nk_free_wi

; 18400:         /*free window state tables */
; 18401:         struct nk_table *n = it->next;

	mov	eax, DWORD PTR _it$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	mov	DWORD PTR _n$3[ebp], ecx

; 18402:         nk_remove_table(win, it);

	mov	eax, DWORD PTR _it$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	call	_nk_remove_table
	add	esp, 8

; 18403:         nk_free_table(ctx, it);

	mov	eax, DWORD PTR _it$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_free_table
	add	esp, 8

; 18404:         if (it == win->tables)

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _it$[ebp]
	cmp	ecx, DWORD PTR [eax+368]
	jne	SHORT $LN1@nk_free_wi

; 18405:             win->tables = n;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _n$3[ebp]
	mov	DWORD PTR [eax+368], ecx
$LN1@nk_free_wi:

; 18406:         it = n;

	mov	eax, DWORD PTR _n$3[ebp]
	mov	DWORD PTR _it$[ebp], eax

; 18407:     }

	jmp	SHORT $LN3@nk_free_wi
$LN2@nk_free_wi:

; 18408: 
; 18409:     /* link windows into freelist */
; 18410:     {union nk_page_data *pd = NK_CONTAINER_OF(win, union nk_page_data, win);

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR _pd$2[ebp], eax

; 18411:     struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);

	mov	eax, DWORD PTR _pd$2[ebp]
	mov	DWORD PTR _pe$1[ebp], eax

; 18412:     nk_free_page_element(ctx, pe);}

	mov	eax, DWORD PTR _pe$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_free_page_element
	add	esp, 8

; 18413: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_free_window ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_remove_window
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_win$ = 12						; size = 4
_nk_remove_window PROC					; COMDAT

; 18484: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18485:     if (win == ctx->begin || win == ctx->end) {

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	cmp	ecx, DWORD PTR [eax+12928]
	je	SHORT $LN11@nk_remove_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	cmp	ecx, DWORD PTR [eax+12932]
	jne	$LN12@nk_remove_
$LN11@nk_remove_:

; 18486:         if (win == ctx->begin) {

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	cmp	ecx, DWORD PTR [eax+12928]
	jne	SHORT $LN10@nk_remove_

; 18487:             ctx->begin = win->next;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+376]
	mov	DWORD PTR [eax+12928], edx

; 18488:             if (win->next)

	mov	eax, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [eax+376], 0
	je	SHORT $LN10@nk_remove_

; 18489:                 win->next->prev = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+376]
	mov	DWORD PTR [ecx+380], 0
$LN10@nk_remove_:

; 18490:         }
; 18491:         if (win == ctx->end) {

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	cmp	ecx, DWORD PTR [eax+12932]
	jne	SHORT $LN8@nk_remove_

; 18492:             ctx->end = win->prev;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+380]
	mov	DWORD PTR [eax+12932], edx

; 18493:             if (win->prev)

	mov	eax, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [eax+380], 0
	je	SHORT $LN8@nk_remove_

; 18494:                 win->prev->next = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+380]
	mov	DWORD PTR [ecx+376], 0
$LN8@nk_remove_:

; 18495:         }
; 18496:     } else {

	jmp	SHORT $LN6@nk_remove_
$LN12@nk_remove_:

; 18497:         if (win->next)

	mov	eax, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [eax+376], 0
	je	SHORT $LN5@nk_remove_

; 18498:             win->next->prev = win->prev;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+376]
	mov	edx, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [edx+380]
	mov	DWORD PTR [ecx+380], eax
$LN5@nk_remove_:

; 18499:         if (win->prev)

	mov	eax, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [eax+380], 0
	je	SHORT $LN6@nk_remove_

; 18500:             win->prev->next = win->next;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+380]
	mov	edx, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [edx+376]
	mov	DWORD PTR [ecx+376], eax
$LN6@nk_remove_:

; 18501:     }
; 18502:     if (win == ctx->active || !ctx->active) {

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	cmp	ecx, DWORD PTR [eax+12936]
	je	SHORT $LN2@nk_remove_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12936], 0
	jne	SHORT $LN3@nk_remove_
$LN2@nk_remove_:

; 18503:         ctx->active = ctx->end;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+12932]
	mov	DWORD PTR [eax+12936], edx

; 18504:         if (ctx->end)

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12932], 0
	je	SHORT $LN3@nk_remove_

; 18505:             ctx->end->flags &= ~(nk_flags)NK_WINDOW_ROM;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12932]
	mov	edx, DWORD PTR [ecx+72]
	and	edx, -4097				; ffffefffH
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12932]
	mov	DWORD PTR [ecx+72], edx
$LN3@nk_remove_:

; 18506:     }
; 18507:     win->next = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+376], 0

; 18508:     win->prev = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+380], 0

; 18509:     ctx->count--;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12948]
	sub	ecx, 1
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+12948], ecx

; 18510: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_remove_window ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_create_window
_TEXT	SEGMENT
_elem$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_create_window PROC					; COMDAT

; 18379: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18380:     struct nk_page_element *elem;
; 18381:     elem = nk_create_page_element(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_create_page_element
	add	esp, 4
	mov	DWORD PTR _elem$[ebp], eax

; 18382:     if (!elem) return 0;

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN1@nk_create_
	xor	eax, eax
	jmp	SHORT $LN2@nk_create_
$LN1@nk_create_:

; 18383:     elem->data.win.seq = ctx->seq;

	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+12952]
	mov	DWORD PTR [eax], edx

; 18384:     return &elem->data.win;

	mov	eax, DWORD PTR _elem$[ebp]
$LN2@nk_create_:

; 18385: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_create_window ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_pool_alloc
_TEXT	SEGMENT
tv144 = -220						; size = 4
_size$1 = -20						; size = 4
_page$2 = -8						; size = 4
_pool$ = 8						; size = 4
_nk_pool_alloc PROC					; COMDAT

; 17200: {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17201:     if (!pool->pages || pool->pages->size >= pool->capacity) {

	mov	eax, DWORD PTR _pool$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN4@nk_pool_al
	mov	eax, DWORD PTR _pool$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _pool$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+28]
	jb	$LN5@nk_pool_al
$LN4@nk_pool_al:

; 17202:         /* allocate new page */
; 17203:         struct nk_page *page;
; 17204:         if (pool->type == NK_BUFFER_FIXED) {

	mov	eax, DWORD PTR _pool$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@nk_pool_al

; 17205:             if (!pool->pages) {

	mov	eax, DWORD PTR _pool$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN2@nk_pool_al

; 17206:                 NK_ASSERT(pool->pages);

	mov	eax, DWORD PTR _pool$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN8@nk_pool_al
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_pool_alloc@@9@9@ddf8d5d8
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BI@FCHHCIJM@?$AAp?$AAo?$AAo?$AAl?$AA?9?$AA?$DO?$AAp?$AAa?$AAg?$AAe?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_pool_al:

; 17207:                 return 0;

	xor	eax, eax
	jmp	$LN6@nk_pool_al
$LN2@nk_pool_al:

; 17208:             }
; 17209:             NK_ASSERT(pool->pages->size < pool->capacity);

	mov	eax, DWORD PTR _pool$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _pool$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+28]
	jb	SHORT $LN9@nk_pool_al
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_pool_alloc@@9@9@ddf8d5d8
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EG@GDCHEAAC@?$AAp?$AAo?$AAo?$AAl?$AA?9?$AA?$DO?$AAp?$AAa?$AAg?$AAe?$AAs?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AAp?$AAo?$AAo?$AAl?$AA?9?$AA?$DO?$AAc?$AAa?$AAp?$AAa?$AAc?$AAi@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_pool_al:

; 17210:             return 0;

	xor	eax, eax
	jmp	$LN6@nk_pool_al

; 17211:         } else {

	jmp	SHORT $LN5@nk_pool_al
$LN3@nk_pool_al:

; 17212:             nk_size size = sizeof(struct nk_page);

	mov	DWORD PTR _size$1[ebp], 440		; 000001b8H

; 17213:             size += NK_POOL_DEFAULT_CAPACITY * sizeof(union nk_page_data);

	mov	eax, DWORD PTR _size$1[ebp]
	add	eax, 6784				; 00001a80H
	mov	DWORD PTR _size$1[ebp], eax

; 17214:             page = (struct nk_page*)pool->alloc.alloc(pool->alloc.userdata,0, size);

	mov	esi, esp
	mov	eax, DWORD PTR _size$1[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pool$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _pool$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _page$2[ebp], eax

; 17215:             page->next = pool->pages;

	mov	eax, DWORD PTR _page$2[ebp]
	mov	ecx, DWORD PTR _pool$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+4], edx

; 17216:             pool->pages = page;

	mov	eax, DWORD PTR _pool$[ebp]
	mov	ecx, DWORD PTR _page$2[ebp]
	mov	DWORD PTR [eax+20], ecx

; 17217:             page->size = 0;

	mov	eax, DWORD PTR _page$2[ebp]
	mov	DWORD PTR [eax], 0
$LN5@nk_pool_al:

; 17218:         }
; 17219:     }
; 17220:     return &pool->pages->win[pool->pages->size++];

	mov	eax, DWORD PTR _pool$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _pool$[ebp]
	mov	eax, DWORD PTR [edx+20]
	imul	edx, DWORD PTR [eax], 432
	lea	eax, DWORD PTR [ecx+edx+8]
	mov	DWORD PTR tv144[ebp], eax
	mov	ecx, DWORD PTR _pool$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _pool$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR tv144[ebp]
$LN6@nk_pool_al:

; 17221: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_pool_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_pool_init_fixed
_TEXT	SEGMENT
_pool$ = 8						; size = 4
_memory$ = 12						; size = 4
_size$ = 16						; size = 4
_nk_pool_init_fixed PROC				; COMDAT

; 17188: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17189:     nk_zero(pool, sizeof(*pool));

	push	40					; 00000028H
	mov	eax, DWORD PTR _pool$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 17190:     NK_ASSERT(size >= sizeof(struct nk_page));

	cmp	DWORD PTR _size$[ebp], 440		; 000001b8H
	jae	SHORT $LN4@nk_pool_in
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_pool_init_fixed@@9@9@ddf8d5d8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1DO@HIJNMCBA@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAn?$AAk?$AA_?$AAp?$AAa?$AAg?$AAe?$AA?$CJ?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_pool_in:

; 17191:     if (size < sizeof(struct nk_page)) return;

	cmp	DWORD PTR _size$[ebp], 440		; 000001b8H
	jae	SHORT $LN1@nk_pool_in
	jmp	SHORT $LN2@nk_pool_in
$LN1@nk_pool_in:

; 17192:     pool->capacity = (unsigned)(size - sizeof(struct nk_page)) / sizeof(struct nk_page_element);

	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 440				; 000001b8H
	xor	edx, edx
	mov	ecx, 432				; 000001b0H
	div	ecx
	mov	edx, DWORD PTR _pool$[ebp]
	mov	DWORD PTR [edx+28], eax

; 17193:     pool->pages = (struct nk_page*)memory;

	mov	eax, DWORD PTR _pool$[ebp]
	mov	ecx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 17194:     pool->type = NK_BUFFER_FIXED;

	mov	eax, DWORD PTR _pool$[ebp]
	mov	DWORD PTR [eax+12], 0

; 17195:     pool->size = size;

	mov	eax, DWORD PTR _pool$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+32], ecx
$LN2@nk_pool_in:

; 17196: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_pool_init_fixed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_pool_free
_TEXT	SEGMENT
_next$1 = -20						; size = 4
_iter$ = -8						; size = 4
_pool$ = 8						; size = 4
_nk_pool_free PROC					; COMDAT

; 17175: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17176:     struct nk_page *iter = pool->pages;

	mov	eax, DWORD PTR _pool$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _iter$[ebp], ecx

; 17177:     if (!pool) return;

	cmp	DWORD PTR _pool$[ebp], 0
	jne	SHORT $LN4@nk_pool_fr
	jmp	SHORT $LN5@nk_pool_fr
$LN4@nk_pool_fr:

; 17178:     if (pool->type == NK_BUFFER_FIXED) return;

	mov	eax, DWORD PTR _pool$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN2@nk_pool_fr
	jmp	SHORT $LN5@nk_pool_fr
$LN2@nk_pool_fr:

; 17179:     while (iter) {

	cmp	DWORD PTR _iter$[ebp], 0
	je	SHORT $LN5@nk_pool_fr

; 17180:         struct nk_page *next = iter->next;

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _next$1[ebp], ecx

; 17181:         pool->alloc.free(pool->alloc.userdata, iter);

	mov	esi, esp
	mov	eax, DWORD PTR _iter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pool$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _pool$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 17182:         iter = next;

	mov	eax, DWORD PTR _next$1[ebp]
	mov	DWORD PTR _iter$[ebp], eax

; 17183:     }

	jmp	SHORT $LN2@nk_pool_fr
$LN5@nk_pool_fr:

; 17184: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_pool_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_pool_init
_TEXT	SEGMENT
_pool$ = 8						; size = 4
_alloc$ = 12						; size = 4
_capacity$ = 16						; size = 4
_nk_pool_init PROC					; COMDAT

; 17165: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17166:     nk_zero(pool, sizeof(*pool));

	push	40					; 00000028H
	mov	eax, DWORD PTR _pool$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 17167:     pool->alloc = *alloc;

	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR _pool$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 17168:     pool->capacity = capacity;

	mov	eax, DWORD PTR _pool$[ebp]
	mov	ecx, DWORD PTR _capacity$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 17169:     pool->type = NK_BUFFER_DYNAMIC;

	mov	eax, DWORD PTR _pool$[ebp]
	mov	DWORD PTR [eax+12], 1

; 17170:     pool->pages = 0;

	mov	eax, DWORD PTR _pool$[ebp]
	mov	DWORD PTR [eax+20], 0

; 17171: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_pool_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_do_color_picker
_TEXT	SEGMENT
tv152 = -296						; size = 4
tv144 = -296						; size = 4
_bar_w$ = -96						; size = 4
_alpha_bar$ = -84					; size = 16
_hue_bar$ = -60						; size = 16
_matrix$ = -36						; size = 16
_ret$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_out$ = 12						; size = 4
_color$ = 16						; size = 4
_fmt$ = 20						; size = 4
_bounds$ = 24						; size = 16
_padding$ = 40						; size = 8
_in$ = 48						; size = 4
_font$ = 52						; size = 4
_nk_do_color_picker PROC				; COMDAT

; 16361: {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 16362:     int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 16363:     struct nk_rect matrix;
; 16364:     struct nk_rect hue_bar;
; 16365:     struct nk_rect alpha_bar;
; 16366:     float bar_w;
; 16367: 
; 16368:     NK_ASSERT(out);

	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN5@nk_do_colo
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_color_picker@@9@9@ddf8d5d8
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17CMKEDJDI@?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_do_colo:

; 16369:     NK_ASSERT(color);

	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN6@nk_do_colo
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_color_picker@@9@9@ddf8d5d8
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@EENKLIPJ@?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_do_colo:

; 16370:     NK_ASSERT(state);

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN7@nk_do_colo
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_color_picker@@9@9@ddf8d5d8
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_do_colo:

; 16371:     NK_ASSERT(font);

	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN8@nk_do_colo
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_color_picker@@9@9@ddf8d5d8
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_do_colo:

; 16372:     if (!out || !color || !state || !font)

	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN1@nk_do_colo
	cmp	DWORD PTR _color$[ebp], 0
	je	SHORT $LN1@nk_do_colo
	cmp	DWORD PTR _state$[ebp], 0
	je	SHORT $LN1@nk_do_colo
	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN2@nk_do_colo
$LN1@nk_do_colo:

; 16373:         return ret;

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN3@nk_do_colo
$LN2@nk_do_colo:

; 16374: 
; 16375:     bar_w = font->height;

	mov	eax, DWORD PTR _font$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _bar_w$[ebp], xmm0

; 16376:     bounds.x += padding.x;

	movss	xmm0, DWORD PTR _bounds$[ebp]
	addss	xmm0, DWORD PTR _padding$[ebp]
	movss	DWORD PTR _bounds$[ebp], xmm0

; 16377:     bounds.y += padding.x;

	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	addss	xmm0, DWORD PTR _padding$[ebp]
	movss	DWORD PTR _bounds$[ebp+4], xmm0

; 16378:     bounds.w -= 2 * padding.x;

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _padding$[ebp]
	movss	xmm1, DWORD PTR _bounds$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _bounds$[ebp+8], xmm1

; 16379:     bounds.h -= 2 * padding.y;

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _padding$[ebp+4]
	movss	xmm1, DWORD PTR _bounds$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _bounds$[ebp+12], xmm1

; 16380: 
; 16381:     matrix.x = bounds.x;

	movss	xmm0, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR _matrix$[ebp], xmm0

; 16382:     matrix.y = bounds.y;

	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	movss	DWORD PTR _matrix$[ebp+4], xmm0

; 16383:     matrix.h = bounds.h;

	movss	xmm0, DWORD PTR _bounds$[ebp+12]
	movss	DWORD PTR _matrix$[ebp+12], xmm0

; 16384:     matrix.w = bounds.w - (3 * padding.x + 2 * bar_w);

	movss	xmm0, DWORD PTR __real@40400000
	mulss	xmm0, DWORD PTR _padding$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR _bar_w$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _bounds$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _matrix$[ebp+8], xmm1

; 16385: 
; 16386:     hue_bar.w = bar_w;

	movss	xmm0, DWORD PTR _bar_w$[ebp]
	movss	DWORD PTR _hue_bar$[ebp+8], xmm0

; 16387:     hue_bar.y = bounds.y;

	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	movss	DWORD PTR _hue_bar$[ebp+4], xmm0

; 16388:     hue_bar.h = matrix.h;

	movss	xmm0, DWORD PTR _matrix$[ebp+12]
	movss	DWORD PTR _hue_bar$[ebp+12], xmm0

; 16389:     hue_bar.x = matrix.x + matrix.w + padding.x;

	movss	xmm0, DWORD PTR _matrix$[ebp]
	addss	xmm0, DWORD PTR _matrix$[ebp+8]
	addss	xmm0, DWORD PTR _padding$[ebp]
	movss	DWORD PTR _hue_bar$[ebp], xmm0

; 16390: 
; 16391:     alpha_bar.x = hue_bar.x + hue_bar.w + padding.x;

	movss	xmm0, DWORD PTR _hue_bar$[ebp]
	addss	xmm0, DWORD PTR _hue_bar$[ebp+8]
	addss	xmm0, DWORD PTR _padding$[ebp]
	movss	DWORD PTR _alpha_bar$[ebp], xmm0

; 16392:     alpha_bar.y = bounds.y;

	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	movss	DWORD PTR _alpha_bar$[ebp+4], xmm0

; 16393:     alpha_bar.w = bar_w;

	movss	xmm0, DWORD PTR _bar_w$[ebp]
	movss	DWORD PTR _alpha_bar$[ebp+8], xmm0

; 16394:     alpha_bar.h = matrix.h;

	movss	xmm0, DWORD PTR _matrix$[ebp+12]
	movss	DWORD PTR _alpha_bar$[ebp+12], xmm0

; 16395: 
; 16396:     ret = nk_color_picker_behavior(state, &bounds, &matrix, &hue_bar,
; 16397:         (fmt == NK_RGBA) ? &alpha_bar:0, color, in);

	cmp	DWORD PTR _fmt$[ebp], 1
	jne	SHORT $LN9@nk_do_colo
	lea	eax, DWORD PTR _alpha_bar$[ebp]
	mov	DWORD PTR tv144[ebp], eax
	jmp	SHORT $LN10@nk_do_colo
$LN9@nk_do_colo:
	mov	DWORD PTR tv144[ebp], 0
$LN10@nk_do_colo:
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	push	edx
	mov	eax, DWORD PTR tv144[ebp]
	push	eax
	lea	ecx, DWORD PTR _hue_bar$[ebp]
	push	ecx
	lea	edx, DWORD PTR _matrix$[ebp]
	push	edx
	lea	eax, DWORD PTR _bounds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_nk_color_picker_behavior
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _ret$[ebp], eax

; 16398:     nk_draw_color_picker(out, &matrix, &hue_bar, (fmt == NK_RGBA) ? &alpha_bar:0, *color);

	cmp	DWORD PTR _fmt$[ebp], 1
	jne	SHORT $LN11@nk_do_colo
	lea	eax, DWORD PTR _alpha_bar$[ebp]
	mov	DWORD PTR tv152[ebp], eax
	jmp	SHORT $LN12@nk_do_colo
$LN11@nk_do_colo:
	mov	DWORD PTR tv152[ebp], 0
$LN12@nk_do_colo:
	mov	ecx, DWORD PTR _color$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR tv152[ebp]
	push	eax
	lea	ecx, DWORD PTR _hue_bar$[ebp]
	push	ecx
	lea	edx, DWORD PTR _matrix$[ebp]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_color_picker
	add	esp, 20					; 00000014H

; 16399:     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN3@nk_do_colo:

; 16400: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@nk_do_colo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN17@nk_do_colo:
	DD	3
	DD	$LN16@nk_do_colo
$LN16@nk_do_colo:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN13@nk_do_colo
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN14@nk_do_colo
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$LN15@nk_do_colo
$LN15@nk_do_colo:
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	0
$LN14@nk_do_colo:
	DB	104					; 00000068H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	0
$LN13@nk_do_colo:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
_nk_do_color_picker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_color_picker
_TEXT	SEGMENT
tv203 = -356						; size = 4
tv202 = -352						; size = 4
tv191 = -348						; size = 4
$T1 = -340						; size = 16
_V$2 = -124						; size = 4
_S$3 = -112						; size = 4
_p$4 = -100						; size = 8
_alpha$5 = -84						; size = 4
_i$ = -72						; size = 4
_line_y$ = -60						; size = 4
_hsva$ = -48						; size = 16
_temp$ = -24						; size = 4
_crosshair_size$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_o$ = 8							; size = 4
_matrix$ = 12						; size = 4
_hue_bar$ = 16						; size = 4
_alpha_bar$ = 20					; size = 4
_color$ = 24						; size = 4
_nk_draw_color_picker PROC				; COMDAT

; 16294: {

	push	ebp
	mov	ebp, esp
	sub	esp, 356				; 00000164H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-356]
	mov	ecx, 89					; 00000059H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 16295:     NK_STORAGE const struct nk_color black = {0,0,0,255};
; 16296:     NK_STORAGE const struct nk_color white = {255, 255, 255, 255};
; 16297:     NK_STORAGE const struct nk_color black_trans = {0,0,0,0};
; 16298: 
; 16299:     const float crosshair_size = 7.0f;

	movss	xmm0, DWORD PTR __real@40e00000
	movss	DWORD PTR _crosshair_size$[ebp], xmm0

; 16300:     struct nk_color temp;
; 16301:     float hsva[4];
; 16302:     float line_y;
; 16303:     int i;
; 16304: 
; 16305:     NK_ASSERT(o);

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN7@nk_draw_co
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_color_picker@@9@9@ddf8d5d8
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13LNPOMHLG@?$AAo?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_draw_co:

; 16306:     NK_ASSERT(matrix);

	cmp	DWORD PTR _matrix$[ebp], 0
	jne	SHORT $LN8@nk_draw_co
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_color_picker@@9@9@ddf8d5d8
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@DGDDDMMD@?$AAm?$AAa?$AAt?$AAr?$AAi?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_draw_co:

; 16307:     NK_ASSERT(hue_bar);

	cmp	DWORD PTR _hue_bar$[ebp], 0
	jne	SHORT $LN9@nk_draw_co
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_color_picker@@9@9@ddf8d5d8
	add	eax, 13					; 0000000dH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BA@FPGEKOLJ@?$AAh?$AAu?$AAe?$AA_?$AAb?$AAa?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_draw_co:

; 16308: 
; 16309:     /* draw hue bar */
; 16310:     nk_color_hsv_fv(hsva, color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	lea	ecx, DWORD PTR _hsva$[ebp]
	push	ecx
	call	_nk_color_hsv_fv
	add	esp, 8

; 16311:     for (i = 0; i < 6; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@nk_draw_co
$LN3@nk_draw_co:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@nk_draw_co:
	cmp	DWORD PTR _i$[ebp], 6
	jge	$LN2@nk_draw_co

; 16312:         NK_GLOBAL const struct nk_color hue_colors[] = {
; 16313:             {255, 0, 0, 255},
; 16314:             {255,255,0,255},
; 16315:             {0,255,0,255},
; 16316:             {0, 255,255,255},
; 16317:             {0,0,255,255},
; 16318:             {255, 0, 255, 255},
; 16319:             {255, 0, 0, 255}
; 16320:         };
; 16321:         nk_fill_rect_multi_color(o,
; 16322:             nk_rect(hue_bar->x, hue_bar->y + (float)i * (hue_bar->h/6.0f) + 0.5f,
; 16323:                 hue_bar->w, (hue_bar->h/6.0f) + 0.5f), hue_colors[i], hue_colors[i],
; 16324:                 hue_colors[i+1], hue_colors[i+1]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?hue_colors@?3??nk_draw_color_picker@@9@9[eax*4+4]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?hue_colors@?3??nk_draw_color_picker@@9@9[edx*4+4]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?hue_colors@?3??nk_draw_color_picker@@9@9[ecx*4]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?hue_colors@?3??nk_draw_color_picker@@9@9[eax*4]
	push	ecx
	mov	edx, DWORD PTR _hue_bar$[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	divss	xmm0, DWORD PTR __real@40c00000
	addss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _hue_bar$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _hue_bar$[ebp]
	movss	xmm1, DWORD PTR [ecx+12]
	divss	xmm1, DWORD PTR __real@40c00000
	mulss	xmm0, xmm1
	mov	edx, DWORD PTR _hue_bar$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _hue_bar$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_nk_rect
	add	esp, 4
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	call	_nk_fill_rect_multi_color
	add	esp, 36					; 00000024H

; 16325:     }

	jmp	$LN3@nk_draw_co
$LN2@nk_draw_co:

; 16326:     line_y = (float)(int)(hue_bar->y + hsva[0] * matrix->h + 0.5f);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR _hsva$[ebp+ecx]
	mulss	xmm0, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _hue_bar$[ebp]
	addss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si ecx, xmm0
	cvtsi2ss xmm0, ecx
	movss	DWORD PTR _line_y$[ebp], xmm0

; 16327:     nk_stroke_line(o, hue_bar->x-1, line_y, hue_bar->x + hue_bar->w + 2,
; 16328:         line_y, 1, nk_rgb(255,255,255));

	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _line_y$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _hue_bar$[ebp]
	mov	ecx, DWORD PTR _hue_bar$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _line_y$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _hue_bar$[ebp]
	movss	xmm0, DWORD PTR [edx]
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _o$[ebp]
	push	eax
	call	_nk_stroke_line
	add	esp, 28					; 0000001cH

; 16329: 
; 16330:     /* draw alpha bar */
; 16331:     if (alpha_bar) {

	cmp	DWORD PTR _alpha_bar$[ebp], 0
	je	$LN1@nk_draw_co

; 16332:         float alpha = NK_SATURATE((float)color.a/255.0f);

	movzx	eax, BYTE PTR _color$[ebp+3]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN10@nk_draw_co
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv191[ebp], xmm0
	jmp	SHORT $LN11@nk_draw_co
$LN10@nk_draw_co:
	movzx	ecx, BYTE PTR _color$[ebp+3]
	cvtsi2ss xmm0, ecx
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR tv191[ebp], xmm0
$LN11@nk_draw_co:
	movss	xmm0, DWORD PTR tv191[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN14@nk_draw_co
	movzx	edx, BYTE PTR _color$[ebp+3]
	cvtsi2ss xmm0, edx
	divss	xmm0, DWORD PTR __real@437f0000
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN12@nk_draw_co
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv202[ebp], xmm0
	jmp	SHORT $LN13@nk_draw_co
$LN12@nk_draw_co:
	movzx	eax, BYTE PTR _color$[ebp+3]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR tv202[ebp], xmm0
$LN13@nk_draw_co:
	movss	xmm0, DWORD PTR tv202[ebp]
	movss	DWORD PTR tv203[ebp], xmm0
	jmp	SHORT $LN15@nk_draw_co
$LN14@nk_draw_co:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv203[ebp], xmm0
$LN15@nk_draw_co:
	movss	xmm0, DWORD PTR tv203[ebp]
	movss	DWORD PTR _alpha$5[ebp], xmm0

; 16333:         line_y = (float)(int)(alpha_bar->y +  (1.0f - alpha) * matrix->h + 0.5f);

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _alpha$5[ebp]
	mov	eax, DWORD PTR _matrix$[ebp]
	mulss	xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _alpha_bar$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si edx, xmm0
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _line_y$[ebp], xmm0

; 16334: 
; 16335:         nk_fill_rect_multi_color(o, *alpha_bar, white, white, black, black);

	mov	eax, DWORD PTR ?black@?1??nk_draw_color_picker@@9@9
	push	eax
	mov	ecx, DWORD PTR ?black@?1??nk_draw_color_picker@@9@9
	push	ecx
	mov	edx, DWORD PTR ?white@?1??nk_draw_color_picker@@9@9
	push	edx
	mov	eax, DWORD PTR ?white@?1??nk_draw_color_picker@@9@9
	push	eax
	mov	ecx, DWORD PTR _alpha_bar$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _o$[ebp]
	push	edx
	call	_nk_fill_rect_multi_color
	add	esp, 36					; 00000024H

; 16336:         nk_stroke_line(o, alpha_bar->x-1, line_y, alpha_bar->x + alpha_bar->w + 2,
; 16337:             line_y, 1, nk_rgb(255,255,255));

	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _line_y$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _alpha_bar$[ebp]
	mov	ecx, DWORD PTR _alpha_bar$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _line_y$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _alpha_bar$[ebp]
	movss	xmm0, DWORD PTR [edx]
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _o$[ebp]
	push	eax
	call	_nk_stroke_line
	add	esp, 28					; 0000001cH
$LN1@nk_draw_co:

; 16338:     }
; 16339: 
; 16340:     /* draw color matrix */
; 16341:     temp = nk_hsv_f(hsva[0], 1.0f, 1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	ecx, eax, 0
	push	ecx
	movss	xmm0, DWORD PTR _hsva$[ebp+ecx]
	movss	DWORD PTR [esp], xmm0
	call	_nk_hsv_f
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _temp$[ebp], eax

; 16342:     nk_fill_rect_multi_color(o, *matrix, white, temp, temp, white);

	mov	eax, DWORD PTR ?white@?1??nk_draw_color_picker@@9@9
	push	eax
	mov	ecx, DWORD PTR _temp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _temp$[ebp]
	push	edx
	mov	eax, DWORD PTR ?white@?1??nk_draw_color_picker@@9@9
	push	eax
	mov	ecx, DWORD PTR _matrix$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _o$[ebp]
	push	edx
	call	_nk_fill_rect_multi_color
	add	esp, 36					; 00000024H

; 16343:     nk_fill_rect_multi_color(o, *matrix, black_trans, black_trans, black, black);

	mov	eax, DWORD PTR ?black@?1??nk_draw_color_picker@@9@9
	push	eax
	mov	ecx, DWORD PTR ?black@?1??nk_draw_color_picker@@9@9
	push	ecx
	mov	edx, DWORD PTR ?black_trans@?1??nk_draw_color_picker@@9@9
	push	edx
	mov	eax, DWORD PTR ?black_trans@?1??nk_draw_color_picker@@9@9
	push	eax
	mov	ecx, DWORD PTR _matrix$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _o$[ebp]
	push	edx
	call	_nk_fill_rect_multi_color
	add	esp, 36					; 00000024H

; 16344: 
; 16345:     /* draw cross-hair */
; 16346:     {struct nk_vec2 p; float S = hsva[1]; float V = hsva[2];

	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _hsva$[ebp+eax]
	movss	DWORD PTR _S$3[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _hsva$[ebp+eax]
	movss	DWORD PTR _V$2[ebp], xmm0

; 16347:     p.x = (float)(int)(matrix->x + S * matrix->w);

	mov	eax, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR _S$3[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _matrix$[ebp]
	addss	xmm0, DWORD PTR [ecx]
	cvttss2si edx, xmm0
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _p$4[ebp], xmm0

; 16348:     p.y = (float)(int)(matrix->y + (1.0f - V) * matrix->h);

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _V$2[ebp]
	mov	eax, DWORD PTR _matrix$[ebp]
	mulss	xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _matrix$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	cvttss2si edx, xmm0
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _p$4[ebp+4], xmm0

; 16349:     nk_stroke_line(o, p.x - crosshair_size, p.y, p.x-2, p.y, 1.0f, white);

	mov	eax, DWORD PTR ?white@?1??nk_draw_color_picker@@9@9
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$4[ebp+4]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _p$4[ebp]
	subss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$4[ebp+4]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _p$4[ebp]
	subss	xmm0, DWORD PTR _crosshair_size$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	call	_nk_stroke_line
	add	esp, 28					; 0000001cH

; 16350:     nk_stroke_line(o, p.x + crosshair_size + 1, p.y, p.x+3, p.y, 1.0f, white);

	mov	eax, DWORD PTR ?white@?1??nk_draw_color_picker@@9@9
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$4[ebp+4]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _p$4[ebp]
	addss	xmm0, DWORD PTR __real@40400000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$4[ebp+4]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _p$4[ebp]
	addss	xmm0, DWORD PTR _crosshair_size$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	call	_nk_stroke_line
	add	esp, 28					; 0000001cH

; 16351:     nk_stroke_line(o, p.x, p.y + crosshair_size + 1, p.x, p.y+3, 1.0f, white);

	mov	eax, DWORD PTR ?white@?1??nk_draw_color_picker@@9@9
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _p$4[ebp+4]
	addss	xmm0, DWORD PTR __real@40400000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$4[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _p$4[ebp+4]
	addss	xmm0, DWORD PTR _crosshair_size$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$4[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	call	_nk_stroke_line
	add	esp, 28					; 0000001cH

; 16352:     nk_stroke_line(o, p.x, p.y - crosshair_size, p.x, p.y-2, 1.0f, white);}

	mov	eax, DWORD PTR ?white@?1??nk_draw_color_picker@@9@9
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _p$4[ebp+4]
	subss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$4[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _p$4[ebp+4]
	subss	xmm0, DWORD PTR _crosshair_size$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p$4[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	call	_nk_stroke_line
	add	esp, 28					; 0000001cH

; 16353: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@nk_draw_co
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 356				; 00000164H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN20@nk_draw_co:
	DD	3
	DD	$LN19@nk_draw_co
$LN19@nk_draw_co:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN16@nk_draw_co
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN17@nk_draw_co
	DD	-100					; ffffff9cH
	DD	8
	DD	$LN18@nk_draw_co
$LN18@nk_draw_co:
	DB	112					; 00000070H
	DB	0
$LN17@nk_draw_co:
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	0
$LN16@nk_draw_co:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_nk_draw_color_picker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_picker_behavior
_TEXT	SEGMENT
tv317 = -256						; size = 4
tv266 = -256						; size = 4
tv215 = -256						; size = 4
tv171 = -256						; size = 4
tv316 = -252						; size = 4
tv265 = -252						; size = 4
tv214 = -252						; size = 4
tv170 = -252						; size = 4
tv295 = -248						; size = 4
tv244 = -248						; size = 4
tv193 = -248						; size = 4
tv149 = -248						; size = 4
_hsv_changed$ = -48					; size = 4
_value_changed$ = -36					; size = 4
_hsva$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_bounds$ = 12						; size = 4
_matrix$ = 16						; size = 4
_hue_bar$ = 20						; size = 4
_alpha_bar$ = 24					; size = 4
_color$ = 28						; size = 4
_in$ = 32						; size = 4
_nk_color_picker_behavior PROC				; COMDAT

; 16239: {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 16240:     float hsva[4];
; 16241:     int value_changed = 0;

	mov	DWORD PTR _value_changed$[ebp], 0

; 16242:     int hsv_changed = 0;

	mov	DWORD PTR _hsv_changed$[ebp], 0

; 16243: 
; 16244:     NK_ASSERT(state);

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN15@nk_color_p
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_color_picker_behavior@@9@9@ddf8d5d8
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@nk_color_p:

; 16245:     NK_ASSERT(matrix);

	cmp	DWORD PTR _matrix$[ebp], 0
	jne	SHORT $LN16@nk_color_p
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_color_picker_behavior@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@DGDDDMMD@?$AAm?$AAa?$AAt?$AAr?$AAi?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN16@nk_color_p:

; 16246:     NK_ASSERT(hue_bar);

	cmp	DWORD PTR _hue_bar$[ebp], 0
	jne	SHORT $LN17@nk_color_p
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_color_picker_behavior@@9@9@ddf8d5d8
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BA@FPGEKOLJ@?$AAh?$AAu?$AAe?$AA_?$AAb?$AAa?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN17@nk_color_p:

; 16247:     NK_ASSERT(color);

	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN18@nk_color_p
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_color_picker_behavior@@9@9@ddf8d5d8
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@EENKLIPJ@?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@nk_color_p:

; 16248: 
; 16249:     /* color matrix */
; 16250:     nk_color_hsva_fv(hsva, *color);

	mov	eax, DWORD PTR _color$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR _hsva$[ebp]
	push	edx
	call	_nk_color_hsva_fv
	add	esp, 8

; 16251:     if (nk_button_behavior(state, *matrix, in, NK_BUTTON_REPEATER)) {

	push	1
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _matrix$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_nk_button_behavior
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	$LN12@nk_color_p

; 16252:         hsva[1] = NK_SATURATE((in->mouse.pos.x - matrix->x) / (matrix->w-1));

	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [eax+324]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN19@nk_color_p
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv149[ebp], xmm0
	jmp	SHORT $LN20@nk_color_p
$LN19@nk_color_p:
	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [eax+324]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	movss	DWORD PTR tv149[ebp], xmm0
$LN20@nk_color_p:
	movss	xmm0, DWORD PTR tv149[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN23@nk_color_p
	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [eax+324]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN21@nk_color_p
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv170[ebp], xmm0
	jmp	SHORT $LN22@nk_color_p
$LN21@nk_color_p:
	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [eax+324]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	movss	DWORD PTR tv170[ebp], xmm0
$LN22@nk_color_p:
	movss	xmm0, DWORD PTR tv170[ebp]
	movss	DWORD PTR tv171[ebp], xmm0
	jmp	SHORT $LN24@nk_color_p
$LN23@nk_color_p:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv171[ebp], xmm0
$LN24@nk_color_p:
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR tv171[ebp]
	movss	DWORD PTR _hsva$[ebp+eax], xmm0

; 16253:         hsva[2] = 1.0f - NK_SATURATE((in->mouse.pos.y - matrix->y) / (matrix->h-1));

	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN25@nk_color_p
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv193[ebp], xmm0
	jmp	SHORT $LN26@nk_color_p
$LN25@nk_color_p:
	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	movss	DWORD PTR tv193[ebp], xmm0
$LN26@nk_color_p:
	movss	xmm0, DWORD PTR tv193[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN29@nk_color_p
	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN27@nk_color_p
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv214[ebp], xmm0
	jmp	SHORT $LN28@nk_color_p
$LN27@nk_color_p:
	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _matrix$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _matrix$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	movss	DWORD PTR tv214[ebp], xmm0
$LN28@nk_color_p:
	movss	xmm0, DWORD PTR tv214[ebp]
	movss	DWORD PTR tv215[ebp], xmm0
	jmp	SHORT $LN30@nk_color_p
$LN29@nk_color_p:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv215[ebp], xmm0
$LN30@nk_color_p:
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR tv215[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	DWORD PTR _hsva$[ebp+eax], xmm0

; 16254:         value_changed = hsv_changed = 1;

	mov	DWORD PTR _hsv_changed$[ebp], 1
	mov	eax, DWORD PTR _hsv_changed$[ebp]
	mov	DWORD PTR _value_changed$[ebp], eax
$LN12@nk_color_p:

; 16255:     }
; 16256: 
; 16257:     /* hue bar */
; 16258:     if (nk_button_behavior(state, *hue_bar, in, NK_BUTTON_REPEATER)) {

	push	1
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hue_bar$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_nk_button_behavior
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	$LN11@nk_color_p

; 16259:         hsva[0] = NK_SATURATE((in->mouse.pos.y - hue_bar->y) / (hue_bar->h-1));

	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _hue_bar$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _hue_bar$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN31@nk_color_p
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv244[ebp], xmm0
	jmp	SHORT $LN32@nk_color_p
$LN31@nk_color_p:
	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _hue_bar$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _hue_bar$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	movss	DWORD PTR tv244[ebp], xmm0
$LN32@nk_color_p:
	movss	xmm0, DWORD PTR tv244[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN35@nk_color_p
	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _hue_bar$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _hue_bar$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN33@nk_color_p
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv265[ebp], xmm0
	jmp	SHORT $LN34@nk_color_p
$LN33@nk_color_p:
	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _hue_bar$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _hue_bar$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	movss	DWORD PTR tv265[ebp], xmm0
$LN34@nk_color_p:
	movss	xmm0, DWORD PTR tv265[ebp]
	movss	DWORD PTR tv266[ebp], xmm0
	jmp	SHORT $LN36@nk_color_p
$LN35@nk_color_p:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv266[ebp], xmm0
$LN36@nk_color_p:
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR tv266[ebp]
	movss	DWORD PTR _hsva$[ebp+ecx], xmm0

; 16260:         value_changed = hsv_changed = 1;

	mov	DWORD PTR _hsv_changed$[ebp], 1
	mov	eax, DWORD PTR _hsv_changed$[ebp]
	mov	DWORD PTR _value_changed$[ebp], eax
$LN11@nk_color_p:

; 16261:     }
; 16262: 
; 16263:     /* alpha bar */
; 16264:     if (alpha_bar) {

	cmp	DWORD PTR _alpha_bar$[ebp], 0
	je	$LN9@nk_color_p

; 16265:         if (nk_button_behavior(state, *alpha_bar, in, NK_BUTTON_REPEATER)) {

	push	1
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alpha_bar$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_nk_button_behavior
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	$LN9@nk_color_p

; 16266:             hsva[3] = 1.0f - NK_SATURATE((in->mouse.pos.y - alpha_bar->y) / (alpha_bar->h-1));

	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _alpha_bar$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _alpha_bar$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN37@nk_color_p
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv295[ebp], xmm0
	jmp	SHORT $LN38@nk_color_p
$LN37@nk_color_p:
	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _alpha_bar$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _alpha_bar$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	movss	DWORD PTR tv295[ebp], xmm0
$LN38@nk_color_p:
	movss	xmm0, DWORD PTR tv295[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN41@nk_color_p
	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _alpha_bar$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _alpha_bar$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN39@nk_color_p
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv316[ebp], xmm0
	jmp	SHORT $LN40@nk_color_p
$LN39@nk_color_p:
	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _alpha_bar$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _alpha_bar$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	movss	DWORD PTR tv316[ebp], xmm0
$LN40@nk_color_p:
	movss	xmm0, DWORD PTR tv316[ebp]
	movss	DWORD PTR tv317[ebp], xmm0
	jmp	SHORT $LN42@nk_color_p
$LN41@nk_color_p:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv317[ebp], xmm0
$LN42@nk_color_p:
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR tv317[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	movss	DWORD PTR _hsva$[ebp+ecx], xmm0

; 16267:             value_changed = 1;

	mov	DWORD PTR _value_changed$[ebp], 1
$LN9@nk_color_p:

; 16268:         }
; 16269:     }
; 16270:     nk_widget_state_reset(state);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2
	je	SHORT $LN8@nk_color_p
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 6
	jmp	SHORT $LN7@nk_color_p
$LN8@nk_color_p:
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 4
$LN7@nk_color_p:

; 16271:     if (hsv_changed) {

	cmp	DWORD PTR _hsv_changed$[ebp], 0
	je	SHORT $LN6@nk_color_p

; 16272:         *color = nk_hsva_fv(hsva);

	lea	eax, DWORD PTR _hsva$[ebp]
	push	eax
	call	_nk_hsva_fv
	add	esp, 4
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR [ecx], eax

; 16273:         *state = NK_WIDGET_STATE_ACTIVE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 34			; 00000022H
$LN6@nk_color_p:

; 16274:     }
; 16275:     if (value_changed) {

	cmp	DWORD PTR _value_changed$[ebp], 0
	je	SHORT $LN5@nk_color_p

; 16276:         color->a = (nk_byte)(hsva[3] * 255.0f);

	mov	eax, 4
	imul	ecx, eax, 3
	movss	xmm0, DWORD PTR _hsva$[ebp+ecx]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _color$[ebp]
	mov	BYTE PTR [eax+3], dl

; 16277:         *state = NK_WIDGET_STATE_ACTIVE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 34			; 00000022H
$LN5@nk_color_p:

; 16278:     }
; 16279: 
; 16280:     /* set color picker widget state */
; 16281:     if (nk_input_is_mouse_hovering_rect(in, *bounds))

	mov	eax, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN4@nk_color_p

; 16282:         *state = NK_WIDGET_STATE_HOVERED;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H
$LN4@nk_color_p:

; 16283:     if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(in, *bounds))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 16					; 00000010H
	je	SHORT $LN3@nk_color_p
	mov	eax, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_nk_input_is_mouse_prev_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN3@nk_color_p

; 16284:         *state |= NK_WIDGET_STATE_ENTERED;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 8
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN1@nk_color_p
$LN3@nk_color_p:

; 16285:     else if (nk_input_is_mouse_prev_hovering_rect(in, *bounds))

	mov	eax, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_nk_input_is_mouse_prev_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@nk_color_p

; 16286:         *state |= NK_WIDGET_STATE_LEFT;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@nk_color_p:

; 16287:     return value_changed;

	mov	eax, DWORD PTR _value_changed$[ebp]

; 16288: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN45@nk_color_p
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN45@nk_color_p:
	DD	1
	DD	$LN44@nk_color_p
$LN44@nk_color_p:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN43@nk_color_p
$LN43@nk_color_p:
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	0
_nk_color_picker_behavior ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_do_property
_TEXT	SEGMENT
tv690 = -512						; size = 8
tv523 = -512						; size = 8
tv411 = -512						; size = 8
tv691 = -504						; size = 8
tv524 = -504						; size = 8
tv412 = -504						; size = 8
tv657 = -500						; size = 4
tv624 = -500						; size = 4
tv564 = -500						; size = 4
tv557 = -500						; size = 4
tv550 = -500						; size = 4
tv488 = -500						; size = 4
tv453 = -500						; size = 4
tv376 = -500						; size = 4
tv341 = -500						; size = 4
tv675 = -496						; size = 8
tv658 = -496						; size = 4
tv625 = -496						; size = 4
tv565 = -496						; size = 4
tv558 = -496						; size = 4
tv551 = -496						; size = 4
tv504 = -496						; size = 8
tv489 = -496						; size = 4
tv454 = -496						; size = 4
tv392 = -496						; size = 8
tv377 = -496						; size = 4
tv342 = -496						; size = 4
tv642 = -492						; size = 4
tv615 = -492						; size = 4
tv604 = -492						; size = 4
tv574 = -492						; size = 4
tv561 = -492						; size = 4
tv554 = -492						; size = 4
tv547 = -492						; size = 4
tv537 = -492						; size = 4
tv469 = -492						; size = 4
tv440 = -492						; size = 4
tv429 = -492						; size = 4
tv357 = -492						; size = 4
tv328 = -492						; size = 4
tv317 = -492						; size = 4
tv242 = -492						; size = 4
tv226 = -492						; size = 4
tv184 = -492						; size = 4
_empty$ = -292						; size = 16
_edit$ = -268						; size = 16
_label$ = -244						; size = 16
_right$ = -220						; size = 16
_left$ = -196						; size = 16
_length$ = -172						; size = 4
_dst$ = -160						; size = 4
_size$ = -148						; size = 4
_string$ = -136						; size = 64
_name_len$ = -64					; size = 4
_num_len$ = -52						; size = 4
_old$ = -40						; size = 4
_active$ = -28						; size = 4
_filters$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_ws$ = 8						; size = 4
_out$ = 12						; size = 4
_property$ = 16						; size = 16
_name$ = 32						; size = 4
_variant$ = 36						; size = 4
_inc_per_pixel$ = 40					; size = 4
_buffer$ = 44						; size = 4
_len$ = 48						; size = 4
_state$ = 52						; size = 4
_cursor$ = 56						; size = 4
_select_begin$ = 60					; size = 4
_select_end$ = 64					; size = 4
_style$ = 68						; size = 4
_filter$ = 72						; size = 4
_in$ = 76						; size = 4
_font$ = 80						; size = 4
_text_edit$ = 84					; size = 4
_behavior$ = 88						; size = 4
_nk_do_property PROC					; COMDAT

; 16063: {

	push	ebp
	mov	ebp, esp
	sub	esp, 512				; 00000200H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-512]
	mov	ecx, 128				; 00000080H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 16064:     const nk_plugin_filter filters[] = {
; 16065:         nk_filter_decimal,
; 16066:         nk_filter_float
; 16067:     };

	mov	DWORD PTR _filters$[ebp], OFFSET _nk_filter_decimal
	mov	DWORD PTR _filters$[ebp+4], OFFSET _nk_filter_float

; 16068:     int active, old;
; 16069:     int num_len, name_len;
; 16070:     char string[NK_MAX_NUMBER_BUFFER];
; 16071:     float size;
; 16072: 
; 16073:     char *dst = 0;

	mov	DWORD PTR _dst$[ebp], 0

; 16074:     int *length;
; 16075: 
; 16076:     struct nk_rect left;
; 16077:     struct nk_rect right;
; 16078:     struct nk_rect label;
; 16079:     struct nk_rect edit;
; 16080:     struct nk_rect empty;
; 16081: 
; 16082:     /* left decrement button */
; 16083:     left.h = font->height/2;

	mov	eax, DWORD PTR _font$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _left$[ebp+12], xmm0

; 16084:     left.w = left.h;

	movss	xmm0, DWORD PTR _left$[ebp+12]
	movss	DWORD PTR _left$[ebp+8], xmm0

; 16085:     left.x = property.x + style->border + style->padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _property$[ebp]
	addss	xmm0, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+92]
	movss	DWORD PTR _left$[ebp], xmm0

; 16086:     left.y = property.y + style->border + property.h/2.0f - left.h/2;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _property$[ebp+4]
	addss	xmm0, DWORD PTR [eax+84]
	movss	xmm1, DWORD PTR _property$[ebp+12]
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _left$[ebp+12]
	divss	xmm1, DWORD PTR __real@40000000
	subss	xmm0, xmm1
	movss	DWORD PTR _left$[ebp+4], xmm0

; 16087: 
; 16088:     /* text label */
; 16089:     name_len = nk_strlen(name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _name_len$[ebp], eax

; 16090:     size = font->width(font->userdata, font->height, name, name_len);

	mov	esi, esp
	mov	eax, DWORD PTR _name_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _size$[ebp]

; 16091:     label.x = left.x + left.w + style->padding.x;

	movss	xmm0, DWORD PTR _left$[ebp]
	addss	xmm0, DWORD PTR _left$[ebp+8]
	mov	eax, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [eax+92]
	movss	DWORD PTR _label$[ebp], xmm0

; 16092:     label.w = (float)size + 2 * style->padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+92]
	addss	xmm0, DWORD PTR _size$[ebp]
	movss	DWORD PTR _label$[ebp+8], xmm0

; 16093:     label.y = property.y + style->border + style->padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _property$[ebp+4]
	addss	xmm0, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+96]
	movss	DWORD PTR _label$[ebp+4], xmm0

; 16094:     label.h = property.h - (2 * style->border + 2 * style->padding.y);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx+96]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _property$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _label$[ebp+12], xmm1

; 16095: 
; 16096:     /* right increment button */
; 16097:     right.y = left.y;

	movss	xmm0, DWORD PTR _left$[ebp+4]
	movss	DWORD PTR _right$[ebp+4], xmm0

; 16098:     right.w = left.w;

	movss	xmm0, DWORD PTR _left$[ebp+8]
	movss	DWORD PTR _right$[ebp+8], xmm0

; 16099:     right.h = left.h;

	movss	xmm0, DWORD PTR _left$[ebp+12]
	movss	DWORD PTR _right$[ebp+12], xmm0

; 16100:     right.x = property.x + property.w - (right.w + style->padding.x);

	movss	xmm0, DWORD PTR _property$[ebp]
	addss	xmm0, DWORD PTR _property$[ebp+8]
	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR _right$[ebp+8]
	addss	xmm1, DWORD PTR [eax+92]
	subss	xmm0, xmm1
	movss	DWORD PTR _right$[ebp], xmm0

; 16101: 
; 16102:     /* edit */
; 16103:     if (*state == NK_PROPERTY_EDIT) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN34@nk_do_prop

; 16104:         size = font->width(font->userdata, font->height, buffer, *len);

	mov	esi, esp
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _size$[ebp]

; 16105:         size += style->edit.cursor_size;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _size$[ebp]
	addss	xmm0, DWORD PTR [eax+648]
	movss	DWORD PTR _size$[ebp], xmm0

; 16106:         length = len;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 16107:         dst = buffer;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _dst$[ebp], eax

; 16108:     } else {

	jmp	$LN33@nk_do_prop
$LN34@nk_do_prop:

; 16109:         switch (variant->kind) {

	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv184[ebp], ecx
	cmp	DWORD PTR tv184[ebp], 0
	je	SHORT $LN29@nk_do_prop
	cmp	DWORD PTR tv184[ebp], 1
	je	SHORT $LN28@nk_do_prop
	cmp	DWORD PTR tv184[ebp], 2
	je	SHORT $LN27@nk_do_prop

; 16110:         default: break;

	jmp	$LN31@nk_do_prop
$LN29@nk_do_prop:

; 16111:         case NK_PROPERTY_INT:
; 16112:             nk_itoa(string, variant->value.i);

	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	lea	edx, DWORD PTR _string$[ebp]
	push	edx
	call	_nk_itoa
	add	esp, 8

; 16113:             num_len = nk_strlen(string);

	lea	eax, DWORD PTR _string$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _num_len$[ebp], eax

; 16114:             break;

	jmp	SHORT $LN31@nk_do_prop
$LN28@nk_do_prop:

; 16115:         case NK_PROPERTY_FLOAT:
; 16116:             nk_dtoa(string, (double)variant->value.f);

	mov	eax, DWORD PTR _variant$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+8]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _string$[ebp]
	push	ecx
	call	_nk_dtoa
	add	esp, 12					; 0000000cH

; 16117:             num_len = nk_string_float_limit(string, NK_MAX_FLOAT_PRECISION);

	push	2
	lea	eax, DWORD PTR _string$[ebp]
	push	eax
	call	_nk_string_float_limit
	add	esp, 8
	mov	DWORD PTR _num_len$[ebp], eax

; 16118:             break;

	jmp	SHORT $LN31@nk_do_prop
$LN27@nk_do_prop:

; 16119:         case NK_PROPERTY_DOUBLE:
; 16120:             nk_dtoa(string, variant->value.d);

	mov	eax, DWORD PTR _variant$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _string$[ebp]
	push	ecx
	call	_nk_dtoa
	add	esp, 12					; 0000000cH

; 16121:             num_len = nk_string_float_limit(string, NK_MAX_FLOAT_PRECISION);

	push	2
	lea	eax, DWORD PTR _string$[ebp]
	push	eax
	call	_nk_string_float_limit
	add	esp, 8
	mov	DWORD PTR _num_len$[ebp], eax
$LN31@nk_do_prop:

; 16122:             break;
; 16123:         }
; 16124:         size = font->width(font->userdata, font->height, string, num_len);

	mov	esi, esp
	mov	eax, DWORD PTR _num_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _size$[ebp]

; 16125:         dst = string;

	lea	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR _dst$[ebp], eax

; 16126:         length = &num_len;

	lea	eax, DWORD PTR _num_len$[ebp]
	mov	DWORD PTR _length$[ebp], eax
$LN33@nk_do_prop:

; 16127:     }
; 16128: 
; 16129:     edit.w =  (float)size + 2 * style->padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+92]
	addss	xmm0, DWORD PTR _size$[ebp]
	movss	DWORD PTR _edit$[ebp+8], xmm0

; 16130:     edit.w = NK_MIN(edit.w, right.x - (label.x + label.w));

	movss	xmm0, DWORD PTR _label$[ebp]
	addss	xmm0, DWORD PTR _label$[ebp+8]
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, xmm0
	comiss	xmm1, DWORD PTR _edit$[ebp+8]
	jbe	SHORT $LN37@nk_do_prop
	movss	xmm0, DWORD PTR _edit$[ebp+8]
	movss	DWORD PTR tv226[ebp], xmm0
	jmp	SHORT $LN38@nk_do_prop
$LN37@nk_do_prop:
	movss	xmm0, DWORD PTR _label$[ebp]
	addss	xmm0, DWORD PTR _label$[ebp+8]
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR tv226[ebp], xmm1
$LN38@nk_do_prop:
	movss	xmm0, DWORD PTR tv226[ebp]
	movss	DWORD PTR _edit$[ebp+8], xmm0

; 16131:     edit.x = right.x - (edit.w + style->padding.x);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _edit$[ebp+8]
	addss	xmm0, DWORD PTR [eax+92]
	movss	xmm1, DWORD PTR _right$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _edit$[ebp], xmm1

; 16132:     edit.y = property.y + style->border;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _property$[ebp+4]
	addss	xmm0, DWORD PTR [eax+84]
	movss	DWORD PTR _edit$[ebp+4], xmm0

; 16133:     edit.h = property.h - (2 * style->border);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+84]
	movss	xmm1, DWORD PTR _property$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _edit$[ebp+12], xmm1

; 16134: 
; 16135:     /* empty left space activator */
; 16136:     empty.w = edit.x - (label.x + label.w);

	movss	xmm0, DWORD PTR _label$[ebp]
	addss	xmm0, DWORD PTR _label$[ebp+8]
	movss	xmm1, DWORD PTR _edit$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _empty$[ebp+8], xmm1

; 16137:     empty.x = label.x + label.w;

	movss	xmm0, DWORD PTR _label$[ebp]
	addss	xmm0, DWORD PTR _label$[ebp+8]
	movss	DWORD PTR _empty$[ebp], xmm0

; 16138:     empty.y = property.y;

	movss	xmm0, DWORD PTR _property$[ebp+4]
	movss	DWORD PTR _empty$[ebp+4], xmm0

; 16139:     empty.h = property.h;

	movss	xmm0, DWORD PTR _property$[ebp+12]
	movss	DWORD PTR _empty$[ebp+12], xmm0

; 16140: 
; 16141:     /* update property */
; 16142:     old = (*state == NK_PROPERTY_EDIT);

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN39@nk_do_prop
	mov	DWORD PTR tv242[ebp], 1
	jmp	SHORT $LN40@nk_do_prop
$LN39@nk_do_prop:
	mov	DWORD PTR tv242[ebp], 0
$LN40@nk_do_prop:
	mov	ecx, DWORD PTR tv242[ebp]
	mov	DWORD PTR _old$[ebp], ecx

; 16143:     nk_property_behavior(ws, in, property, label, edit, empty, state, variant, inc_per_pixel);

	push	ecx
	movss	xmm0, DWORD PTR _inc_per_pixel$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _variant$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _empty$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _empty$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _empty$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _empty$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _edit$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _edit$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _edit$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _label$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _label$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _label$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _label$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _property$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _property$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _property$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _property$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _ws$[ebp]
	push	eax
	call	_nk_property_behavior
	add	esp, 84					; 00000054H

; 16144: 
; 16145:     /* draw property */
; 16146:     if (style->draw_begin) style->draw_begin(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+932], 0
	je	SHORT $LN26@nk_do_prop
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN26@nk_do_prop:

; 16147:     nk_draw_property(out, style, &property, &label, *ws, name, name_len, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _ws$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR _label$[ebp]
	push	edx
	lea	eax, DWORD PTR _property$[ebp]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_draw_property
	add	esp, 32					; 00000020H

; 16148:     if (style->draw_end) style->draw_end(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+936], 0
	je	SHORT $LN25@nk_do_prop
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN25@nk_do_prop:

; 16149: 
; 16150:     /* execute right button  */
; 16151:     if (nk_do_button_symbol(ws, out, left, style->sym_left, behavior, &style->dec_button, in, font)) {

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	add	edx, 800				; 00000320H
	push	edx
	mov	eax, DWORD PTR _behavior$[ebp]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _left$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _left$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _left$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _left$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ws$[ebp]
	push	ecx
	call	_nk_do_button_symbol
	add	esp, 44					; 0000002cH
	test	eax, eax
	je	$LN22@nk_do_prop

; 16152:         switch (variant->kind) {

	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv317[ebp], ecx
	cmp	DWORD PTR tv317[ebp], 0
	je	SHORT $LN20@nk_do_prop
	cmp	DWORD PTR tv317[ebp], 1
	je	$LN19@nk_do_prop
	cmp	DWORD PTR tv317[ebp], 2
	je	$LN18@nk_do_prop

; 16153:         default: break;

	jmp	$LN22@nk_do_prop
$LN20@nk_do_prop:

; 16154:         case NK_PROPERTY_INT:
; 16155:             variant->value.i = NK_CLAMP(variant->min_value.i, variant->value.i - variant->step.i, variant->max_value.i); break;

	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _variant$[ebp]
	cmp	edx, DWORD PTR [eax+24]
	jge	SHORT $LN41@nk_do_prop
	mov	ecx, DWORD PTR _variant$[ebp]
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+32]
	mov	DWORD PTR tv328[ebp], eax
	jmp	SHORT $LN42@nk_do_prop
$LN41@nk_do_prop:
	mov	ecx, DWORD PTR _variant$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR tv328[ebp], edx
$LN42@nk_do_prop:
	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR tv328[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	SHORT $LN45@nk_do_prop
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR tv342[ebp], eax
	jmp	SHORT $LN46@nk_do_prop
$LN45@nk_do_prop:
	mov	ecx, DWORD PTR _variant$[ebp]
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _variant$[ebp]
	cmp	eax, DWORD PTR [ecx+24]
	jge	SHORT $LN43@nk_do_prop
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR tv341[ebp], ecx
	jmp	SHORT $LN44@nk_do_prop
$LN43@nk_do_prop:
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR tv341[ebp], eax
$LN44@nk_do_prop:
	mov	ecx, DWORD PTR tv341[ebp]
	mov	DWORD PTR tv342[ebp], ecx
$LN46@nk_do_prop:
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR tv342[ebp]
	mov	DWORD PTR [edx+8], eax
	jmp	$LN22@nk_do_prop
$LN19@nk_do_prop:

; 16156:         case NK_PROPERTY_FLOAT:
; 16157:             variant->value.f = NK_CLAMP(variant->min_value.f, variant->value.f - variant->step.f, variant->max_value.f); break;

	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _variant$[ebp]
	movss	xmm1, DWORD PTR [edx+24]
	comiss	xmm1, xmm0
	jbe	SHORT $LN47@nk_do_prop
	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR tv357[ebp], xmm0
	jmp	SHORT $LN48@nk_do_prop
$LN47@nk_do_prop:
	mov	edx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [edx+24]
	movss	DWORD PTR tv357[ebp], xmm0
$LN48@nk_do_prop:
	mov	eax, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	comiss	xmm0, DWORD PTR tv357[ebp]
	jbe	SHORT $LN51@nk_do_prop
	mov	ecx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR tv377[ebp], xmm0
	jmp	SHORT $LN52@nk_do_prop
$LN51@nk_do_prop:
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	subss	xmm0, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _variant$[ebp]
	movss	xmm1, DWORD PTR [ecx+24]
	comiss	xmm1, xmm0
	jbe	SHORT $LN49@nk_do_prop
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	subss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR tv376[ebp], xmm0
	jmp	SHORT $LN50@nk_do_prop
$LN49@nk_do_prop:
	mov	ecx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR tv376[ebp], xmm0
$LN50@nk_do_prop:
	movss	xmm0, DWORD PTR tv376[ebp]
	movss	DWORD PTR tv377[ebp], xmm0
$LN52@nk_do_prop:
	mov	edx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR tv377[ebp]
	movss	DWORD PTR [edx+8], xmm0
	jmp	$LN22@nk_do_prop
$LN18@nk_do_prop:

; 16158:         case NK_PROPERTY_DOUBLE:
; 16159:             variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d - variant->step.d, variant->max_value.d); break;

	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [eax+8]
	subsd	xmm0, QWORD PTR [ecx+32]
	mov	edx, DWORD PTR _variant$[ebp]
	movsd	xmm1, QWORD PTR [edx+24]
	comisd	xmm1, xmm0
	jbe	SHORT $LN53@nk_do_prop
	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [eax+8]
	subsd	xmm0, QWORD PTR [ecx+32]
	movsd	QWORD PTR tv392[ebp], xmm0
	jmp	SHORT $LN54@nk_do_prop
$LN53@nk_do_prop:
	mov	edx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [edx+24]
	movsd	QWORD PTR tv392[ebp], xmm0
$LN54@nk_do_prop:
	mov	eax, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [eax+16]
	comisd	xmm0, QWORD PTR tv392[ebp]
	jbe	SHORT $LN57@nk_do_prop
	mov	ecx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR tv412[ebp], xmm0
	jmp	SHORT $LN58@nk_do_prop
$LN57@nk_do_prop:
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [edx+8]
	subsd	xmm0, QWORD PTR [eax+32]
	mov	ecx, DWORD PTR _variant$[ebp]
	movsd	xmm1, QWORD PTR [ecx+24]
	comisd	xmm1, xmm0
	jbe	SHORT $LN55@nk_do_prop
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [edx+8]
	subsd	xmm0, QWORD PTR [eax+32]
	movsd	QWORD PTR tv411[ebp], xmm0
	jmp	SHORT $LN56@nk_do_prop
$LN55@nk_do_prop:
	mov	ecx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [ecx+24]
	movsd	QWORD PTR tv411[ebp], xmm0
$LN56@nk_do_prop:
	movsd	xmm0, QWORD PTR tv411[ebp]
	movsd	QWORD PTR tv412[ebp], xmm0
$LN58@nk_do_prop:
	mov	edx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR tv412[ebp]
	movsd	QWORD PTR [edx+8], xmm0
$LN22@nk_do_prop:

; 16160:         }
; 16161:     }
; 16162:     /* execute left button  */
; 16163:     if (nk_do_button_symbol(ws, out, right, style->sym_right, behavior, &style->inc_button, in, font)) {

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	add	edx, 672				; 000002a0H
	push	edx
	mov	eax, DWORD PTR _behavior$[ebp]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _right$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _right$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _right$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _right$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ws$[ebp]
	push	ecx
	call	_nk_do_button_symbol
	add	esp, 44					; 0000002cH
	test	eax, eax
	je	$LN15@nk_do_prop

; 16164:         switch (variant->kind) {

	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv429[ebp], ecx
	cmp	DWORD PTR tv429[ebp], 0
	je	SHORT $LN13@nk_do_prop
	cmp	DWORD PTR tv429[ebp], 1
	je	$LN12@nk_do_prop
	cmp	DWORD PTR tv429[ebp], 2
	je	$LN11@nk_do_prop

; 16165:         default: break;

	jmp	$LN15@nk_do_prop
$LN13@nk_do_prop:

; 16166:         case NK_PROPERTY_INT:
; 16167:             variant->value.i = NK_CLAMP(variant->min_value.i, variant->value.i + variant->step.i, variant->max_value.i); break;

	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _variant$[ebp]
	add	ecx, DWORD PTR [edx+32]
	mov	eax, DWORD PTR _variant$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN59@nk_do_prop
	mov	ecx, DWORD PTR _variant$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _variant$[ebp]
	add	edx, DWORD PTR [eax+32]
	mov	DWORD PTR tv440[ebp], edx
	jmp	SHORT $LN60@nk_do_prop
$LN59@nk_do_prop:
	mov	ecx, DWORD PTR _variant$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR tv440[ebp], edx
$LN60@nk_do_prop:
	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR tv440[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	SHORT $LN63@nk_do_prop
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR tv454[ebp], eax
	jmp	SHORT $LN64@nk_do_prop
$LN63@nk_do_prop:
	mov	ecx, DWORD PTR _variant$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _variant$[ebp]
	add	edx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _variant$[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	jge	SHORT $LN61@nk_do_prop
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _variant$[ebp]
	add	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR tv453[ebp], eax
	jmp	SHORT $LN62@nk_do_prop
$LN61@nk_do_prop:
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR tv453[ebp], eax
$LN62@nk_do_prop:
	mov	ecx, DWORD PTR tv453[ebp]
	mov	DWORD PTR tv454[ebp], ecx
$LN64@nk_do_prop:
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR tv454[ebp]
	mov	DWORD PTR [edx+8], eax
	jmp	$LN15@nk_do_prop
$LN12@nk_do_prop:

; 16168:         case NK_PROPERTY_FLOAT:
; 16169:             variant->value.f = NK_CLAMP(variant->min_value.f, variant->value.f + variant->step.f, variant->max_value.f); break;

	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _variant$[ebp]
	movss	xmm1, DWORD PTR [edx+24]
	comiss	xmm1, xmm0
	jbe	SHORT $LN65@nk_do_prop
	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR tv469[ebp], xmm0
	jmp	SHORT $LN66@nk_do_prop
$LN65@nk_do_prop:
	mov	edx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [edx+24]
	movss	DWORD PTR tv469[ebp], xmm0
$LN66@nk_do_prop:
	mov	eax, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	comiss	xmm0, DWORD PTR tv469[ebp]
	jbe	SHORT $LN69@nk_do_prop
	mov	ecx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR tv489[ebp], xmm0
	jmp	SHORT $LN70@nk_do_prop
$LN69@nk_do_prop:
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	addss	xmm0, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _variant$[ebp]
	movss	xmm1, DWORD PTR [ecx+24]
	comiss	xmm1, xmm0
	jbe	SHORT $LN67@nk_do_prop
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	addss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR tv488[ebp], xmm0
	jmp	SHORT $LN68@nk_do_prop
$LN67@nk_do_prop:
	mov	ecx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR tv488[ebp], xmm0
$LN68@nk_do_prop:
	movss	xmm0, DWORD PTR tv488[ebp]
	movss	DWORD PTR tv489[ebp], xmm0
$LN70@nk_do_prop:
	mov	edx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR tv489[ebp]
	movss	DWORD PTR [edx+8], xmm0
	jmp	$LN15@nk_do_prop
$LN11@nk_do_prop:

; 16170:         case NK_PROPERTY_DOUBLE:
; 16171:             variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d + variant->step.d, variant->max_value.d); break;

	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [eax+8]
	addsd	xmm0, QWORD PTR [ecx+32]
	mov	edx, DWORD PTR _variant$[ebp]
	movsd	xmm1, QWORD PTR [edx+24]
	comisd	xmm1, xmm0
	jbe	SHORT $LN71@nk_do_prop
	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [eax+8]
	addsd	xmm0, QWORD PTR [ecx+32]
	movsd	QWORD PTR tv504[ebp], xmm0
	jmp	SHORT $LN72@nk_do_prop
$LN71@nk_do_prop:
	mov	edx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [edx+24]
	movsd	QWORD PTR tv504[ebp], xmm0
$LN72@nk_do_prop:
	mov	eax, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [eax+16]
	comisd	xmm0, QWORD PTR tv504[ebp]
	jbe	SHORT $LN75@nk_do_prop
	mov	ecx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR tv524[ebp], xmm0
	jmp	SHORT $LN76@nk_do_prop
$LN75@nk_do_prop:
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [edx+8]
	addsd	xmm0, QWORD PTR [eax+32]
	mov	ecx, DWORD PTR _variant$[ebp]
	movsd	xmm1, QWORD PTR [ecx+24]
	comisd	xmm1, xmm0
	jbe	SHORT $LN73@nk_do_prop
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [edx+8]
	addsd	xmm0, QWORD PTR [eax+32]
	movsd	QWORD PTR tv523[ebp], xmm0
	jmp	SHORT $LN74@nk_do_prop
$LN73@nk_do_prop:
	mov	ecx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [ecx+24]
	movsd	QWORD PTR tv523[ebp], xmm0
$LN74@nk_do_prop:
	movsd	xmm0, QWORD PTR tv523[ebp]
	movsd	QWORD PTR tv524[ebp], xmm0
$LN76@nk_do_prop:
	mov	edx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR tv524[ebp]
	movsd	QWORD PTR [edx+8], xmm0
$LN15@nk_do_prop:

; 16172:         }
; 16173:     }
; 16174:     if (old != NK_PROPERTY_EDIT && (*state == NK_PROPERTY_EDIT)) {

	cmp	DWORD PTR _old$[ebp], 1
	je	SHORT $LN10@nk_do_prop
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN10@nk_do_prop

; 16175:         /* property has been activated so setup buffer */
; 16176:         NK_MEMCPY(buffer, dst, (nk_size)*length);

	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 16177:         *cursor = nk_utf_len(buffer, *length);

	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_nk_utf_len
	add	esp, 8
	mov	ecx, DWORD PTR _cursor$[ebp]
	mov	DWORD PTR [ecx], eax

; 16178:         *len = *length;

	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 16179:         length = len;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 16180:         dst = buffer;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _dst$[ebp], eax

; 16181:         active = 0;

	mov	DWORD PTR _active$[ebp], 0
	jmp	SHORT $LN9@nk_do_prop
$LN10@nk_do_prop:

; 16182:     } else active = (*state == NK_PROPERTY_EDIT);

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN77@nk_do_prop
	mov	DWORD PTR tv537[ebp], 1
	jmp	SHORT $LN78@nk_do_prop
$LN77@nk_do_prop:
	mov	DWORD PTR tv537[ebp], 0
$LN78@nk_do_prop:
	mov	ecx, DWORD PTR tv537[ebp]
	mov	DWORD PTR _active$[ebp], ecx
$LN9@nk_do_prop:

; 16183: 
; 16184:     /* execute and run text edit field */
; 16185:     nk_textedit_clear_state(text_edit, NK_TEXT_EDIT_SINGLE_LINE, filters[filter]);

	mov	eax, DWORD PTR _filter$[ebp]
	mov	ecx, DWORD PTR _filters$[ebp+eax*4]
	push	ecx
	push	0
	mov	edx, DWORD PTR _text_edit$[ebp]
	push	edx
	call	_nk_textedit_clear_state
	add	esp, 12					; 0000000cH

; 16186:     text_edit->active = (unsigned char)active;

	mov	eax, DWORD PTR _text_edit$[ebp]
	mov	cl, BYTE PTR _active$[ebp]
	mov	BYTE PTR [eax+105], cl

; 16187:     text_edit->string.len = *length;

	mov	eax, DWORD PTR _text_edit$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+72], edx

; 16188:     text_edit->cursor = NK_CLAMP(0, *cursor, *length);

	mov	eax, DWORD PTR _cursor$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN79@nk_do_prop
	mov	eax, DWORD PTR _cursor$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv547[ebp], ecx
	jmp	SHORT $LN80@nk_do_prop
$LN79@nk_do_prop:
	mov	edx, DWORD PTR _length$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv547[ebp], eax
$LN80@nk_do_prop:
	cmp	DWORD PTR tv547[ebp], 0
	jge	SHORT $LN83@nk_do_prop
	mov	DWORD PTR tv551[ebp], 0
	jmp	SHORT $LN84@nk_do_prop
$LN83@nk_do_prop:
	mov	ecx, DWORD PTR _cursor$[ebp]
	mov	edx, DWORD PTR _length$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN81@nk_do_prop
	mov	ecx, DWORD PTR _cursor$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv550[ebp], edx
	jmp	SHORT $LN82@nk_do_prop
$LN81@nk_do_prop:
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv550[ebp], ecx
$LN82@nk_do_prop:
	mov	edx, DWORD PTR tv550[ebp]
	mov	DWORD PTR tv551[ebp], edx
$LN84@nk_do_prop:
	mov	eax, DWORD PTR _text_edit$[ebp]
	mov	ecx, DWORD PTR tv551[ebp]
	mov	DWORD PTR [eax+88], ecx

; 16189:     text_edit->select_start = NK_CLAMP(0,*select_begin, *length);

	mov	eax, DWORD PTR _select_begin$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN85@nk_do_prop
	mov	eax, DWORD PTR _select_begin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv554[ebp], ecx
	jmp	SHORT $LN86@nk_do_prop
$LN85@nk_do_prop:
	mov	edx, DWORD PTR _length$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv554[ebp], eax
$LN86@nk_do_prop:
	cmp	DWORD PTR tv554[ebp], 0
	jge	SHORT $LN89@nk_do_prop
	mov	DWORD PTR tv558[ebp], 0
	jmp	SHORT $LN90@nk_do_prop
$LN89@nk_do_prop:
	mov	ecx, DWORD PTR _select_begin$[ebp]
	mov	edx, DWORD PTR _length$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN87@nk_do_prop
	mov	ecx, DWORD PTR _select_begin$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv557[ebp], edx
	jmp	SHORT $LN88@nk_do_prop
$LN87@nk_do_prop:
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv557[ebp], ecx
$LN88@nk_do_prop:
	mov	edx, DWORD PTR tv557[ebp]
	mov	DWORD PTR tv558[ebp], edx
$LN90@nk_do_prop:
	mov	eax, DWORD PTR _text_edit$[ebp]
	mov	ecx, DWORD PTR tv558[ebp]
	mov	DWORD PTR [eax+92], ecx

; 16190:     text_edit->select_end = NK_CLAMP(0,*select_end, *length);

	mov	eax, DWORD PTR _select_end$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN91@nk_do_prop
	mov	eax, DWORD PTR _select_end$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv561[ebp], ecx
	jmp	SHORT $LN92@nk_do_prop
$LN91@nk_do_prop:
	mov	edx, DWORD PTR _length$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv561[ebp], eax
$LN92@nk_do_prop:
	cmp	DWORD PTR tv561[ebp], 0
	jge	SHORT $LN95@nk_do_prop
	mov	DWORD PTR tv565[ebp], 0
	jmp	SHORT $LN96@nk_do_prop
$LN95@nk_do_prop:
	mov	ecx, DWORD PTR _select_end$[ebp]
	mov	edx, DWORD PTR _length$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN93@nk_do_prop
	mov	ecx, DWORD PTR _select_end$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv564[ebp], edx
	jmp	SHORT $LN94@nk_do_prop
$LN93@nk_do_prop:
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv564[ebp], ecx
$LN94@nk_do_prop:
	mov	edx, DWORD PTR tv564[ebp]
	mov	DWORD PTR tv565[ebp], edx
$LN96@nk_do_prop:
	mov	eax, DWORD PTR _text_edit$[ebp]
	mov	ecx, DWORD PTR tv565[ebp]
	mov	DWORD PTR [eax+96], ecx

; 16191:     text_edit->string.buffer.allocated = (nk_size)*length;

	mov	eax, DWORD PTR _text_edit$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+56], edx

; 16192:     text_edit->string.buffer.memory.size = NK_MAX_NUMBER_BUFFER;

	mov	eax, DWORD PTR _text_edit$[ebp]
	mov	DWORD PTR [eax+48], 64			; 00000040H

; 16193:     text_edit->string.buffer.memory.ptr = dst;

	mov	eax, DWORD PTR _text_edit$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	DWORD PTR [eax+44], ecx

; 16194:     text_edit->string.buffer.size = NK_MAX_NUMBER_BUFFER;

	mov	eax, DWORD PTR _text_edit$[ebp]
	mov	DWORD PTR [eax+68], 64			; 00000040H

; 16195:     text_edit->mode = NK_TEXT_EDIT_MODE_INSERT;

	mov	eax, DWORD PTR _text_edit$[ebp]
	mov	BYTE PTR [eax+100], 1

; 16196:     nk_do_edit(ws, out, edit, NK_EDIT_FIELD|NK_EDIT_AUTO_SELECT,
; 16197:         filters[filter], text_edit, &style->edit, (*state == NK_PROPERTY_EDIT) ? in: 0, font);

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN97@nk_do_prop
	mov	ecx, DWORD PTR _in$[ebp]
	mov	DWORD PTR tv574[ebp], ecx
	jmp	SHORT $LN98@nk_do_prop
$LN97@nk_do_prop:
	mov	DWORD PTR tv574[ebp], 0
$LN98@nk_do_prop:
	mov	edx, DWORD PTR _font$[ebp]
	push	edx
	mov	eax, DWORD PTR tv574[ebp]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR _text_edit$[ebp]
	push	edx
	mov	eax, DWORD PTR _filter$[ebp]
	mov	ecx, DWORD PTR _filters$[ebp+eax*4]
	push	ecx
	push	610					; 00000262H
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _edit$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _edit$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _edit$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _ws$[ebp]
	push	eax
	call	_nk_do_edit
	add	esp, 48					; 00000030H

; 16198: 
; 16199:     *length = text_edit->string.len;

	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _text_edit$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax], edx

; 16200:     *cursor = text_edit->cursor;

	mov	eax, DWORD PTR _cursor$[ebp]
	mov	ecx, DWORD PTR _text_edit$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax], edx

; 16201:     *select_begin = text_edit->select_start;

	mov	eax, DWORD PTR _select_begin$[ebp]
	mov	ecx, DWORD PTR _text_edit$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR [eax], edx

; 16202:     *select_end = text_edit->select_end;

	mov	eax, DWORD PTR _select_end$[ebp]
	mov	ecx, DWORD PTR _text_edit$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax], edx

; 16203:     if (text_edit->active && nk_input_is_key_pressed(in, NK_KEY_ENTER))

	mov	eax, DWORD PTR _text_edit$[ebp]
	movzx	ecx, BYTE PTR [eax+105]
	test	ecx, ecx
	je	SHORT $LN8@nk_do_prop
	push	4
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_key_pressed
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@nk_do_prop

; 16204:         text_edit->active = nk_false;

	mov	eax, DWORD PTR _text_edit$[ebp]
	mov	BYTE PTR [eax+105], 0
$LN8@nk_do_prop:

; 16205: 
; 16206:     if (active && !text_edit->active) {

	cmp	DWORD PTR _active$[ebp], 0
	je	$LN5@nk_do_prop
	mov	eax, DWORD PTR _text_edit$[ebp]
	movzx	ecx, BYTE PTR [eax+105]
	test	ecx, ecx
	jne	$LN5@nk_do_prop

; 16207:         /* property is now not active so convert edit text to value*/
; 16208:         *state = NK_PROPERTY_DEFAULT;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 0

; 16209:         buffer[*len] = '\0';

	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	BYTE PTR [edx+ecx], 0

; 16210:         switch (variant->kind) {

	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv604[ebp], ecx
	cmp	DWORD PTR tv604[ebp], 0
	je	SHORT $LN3@nk_do_prop
	cmp	DWORD PTR tv604[ebp], 1
	je	$LN2@nk_do_prop
	cmp	DWORD PTR tv604[ebp], 2
	je	$LN1@nk_do_prop

; 16211:         default: break;

	jmp	$LN5@nk_do_prop
$LN3@nk_do_prop:

; 16212:         case NK_PROPERTY_INT:
; 16213:             variant->value.i = nk_strtoi(buffer, 0);

	push	0
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_nk_strtoi
	add	esp, 8
	mov	ecx, DWORD PTR _variant$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 16214:             variant->value.i = NK_CLAMP(variant->min_value.i, variant->value.i, variant->max_value.i);

	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+24]
	jge	SHORT $LN99@nk_do_prop
	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv615[ebp], ecx
	jmp	SHORT $LN100@nk_do_prop
$LN99@nk_do_prop:
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR tv615[ebp], eax
$LN100@nk_do_prop:
	mov	ecx, DWORD PTR _variant$[ebp]
	mov	edx, DWORD PTR tv615[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jge	SHORT $LN103@nk_do_prop
	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv625[ebp], ecx
	jmp	SHORT $LN104@nk_do_prop
$LN103@nk_do_prop:
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN101@nk_do_prop
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv624[ebp], eax
	jmp	SHORT $LN102@nk_do_prop
$LN101@nk_do_prop:
	mov	ecx, DWORD PTR _variant$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR tv624[ebp], edx
$LN102@nk_do_prop:
	mov	eax, DWORD PTR tv624[ebp]
	mov	DWORD PTR tv625[ebp], eax
$LN104@nk_do_prop:
	mov	ecx, DWORD PTR _variant$[ebp]
	mov	edx, DWORD PTR tv625[ebp]
	mov	DWORD PTR [ecx+8], edx

; 16215:             break;

	jmp	$LN5@nk_do_prop
$LN2@nk_do_prop:

; 16216:         case NK_PROPERTY_FLOAT:
; 16217:             nk_string_float_limit(buffer, NK_MAX_FLOAT_PRECISION);

	push	2
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_nk_string_float_limit
	add	esp, 8

; 16218:             variant->value.f = nk_strtof(buffer, 0);

	push	0
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_nk_strtof
	add	esp, 8
	mov	ecx, DWORD PTR _variant$[ebp]
	fstp	DWORD PTR [ecx+8]

; 16219:             variant->value.f = NK_CLAMP(variant->min_value.f, variant->value.f, variant->max_value.f);

	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	comiss	xmm0, DWORD PTR [eax+8]
	jbe	SHORT $LN105@nk_do_prop
	mov	edx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR tv642[ebp], xmm0
	jmp	SHORT $LN106@nk_do_prop
$LN105@nk_do_prop:
	mov	eax, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR tv642[ebp], xmm0
$LN106@nk_do_prop:
	mov	ecx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	comiss	xmm0, DWORD PTR tv642[ebp]
	jbe	SHORT $LN109@nk_do_prop
	mov	edx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR tv658[ebp], xmm0
	jmp	SHORT $LN110@nk_do_prop
$LN109@nk_do_prop:
	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	comiss	xmm0, DWORD PTR [eax+8]
	jbe	SHORT $LN107@nk_do_prop
	mov	edx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR tv657[ebp], xmm0
	jmp	SHORT $LN108@nk_do_prop
$LN107@nk_do_prop:
	mov	eax, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR tv657[ebp], xmm0
$LN108@nk_do_prop:
	movss	xmm0, DWORD PTR tv657[ebp]
	movss	DWORD PTR tv658[ebp], xmm0
$LN110@nk_do_prop:
	mov	ecx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR tv658[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 16220:             break;

	jmp	$LN5@nk_do_prop
$LN1@nk_do_prop:

; 16221:         case NK_PROPERTY_DOUBLE:
; 16222:             nk_string_float_limit(buffer, NK_MAX_FLOAT_PRECISION);

	push	2
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_nk_string_float_limit
	add	esp, 8

; 16223:             variant->value.d = nk_strtod(buffer, 0);

	push	0
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_nk_strtod
	add	esp, 8
	mov	ecx, DWORD PTR _variant$[ebp]
	fstp	QWORD PTR [ecx+8]

; 16224:             variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d, variant->max_value.d);

	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [ecx+24]
	comisd	xmm0, QWORD PTR [eax+8]
	jbe	SHORT $LN111@nk_do_prop
	mov	edx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [edx+8]
	movsd	QWORD PTR tv675[ebp], xmm0
	jmp	SHORT $LN112@nk_do_prop
$LN111@nk_do_prop:
	mov	eax, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [eax+24]
	movsd	QWORD PTR tv675[ebp], xmm0
$LN112@nk_do_prop:
	mov	ecx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [ecx+16]
	comisd	xmm0, QWORD PTR tv675[ebp]
	jbe	SHORT $LN115@nk_do_prop
	mov	edx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [edx+16]
	movsd	QWORD PTR tv691[ebp], xmm0
	jmp	SHORT $LN116@nk_do_prop
$LN115@nk_do_prop:
	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [ecx+24]
	comisd	xmm0, QWORD PTR [eax+8]
	jbe	SHORT $LN113@nk_do_prop
	mov	edx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [edx+8]
	movsd	QWORD PTR tv690[ebp], xmm0
	jmp	SHORT $LN114@nk_do_prop
$LN113@nk_do_prop:
	mov	eax, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [eax+24]
	movsd	QWORD PTR tv690[ebp], xmm0
$LN114@nk_do_prop:
	movsd	xmm0, QWORD PTR tv690[ebp]
	movsd	QWORD PTR tv691[ebp], xmm0
$LN116@nk_do_prop:
	mov	ecx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR tv691[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
$LN5@nk_do_prop:

; 16225:             break;
; 16226:         }
; 16227:     }
; 16228: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN126@nk_do_prop
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 512				; 00000200H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN126@nk_do_prop:
	DD	8
	DD	$LN125@nk_do_prop
$LN125@nk_do_prop:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN117@nk_do_prop
	DD	-52					; ffffffccH
	DD	4
	DD	$LN118@nk_do_prop
	DD	-136					; ffffff78H
	DD	64					; 00000040H
	DD	$LN119@nk_do_prop
	DD	-196					; ffffff3cH
	DD	16					; 00000010H
	DD	$LN120@nk_do_prop
	DD	-220					; ffffff24H
	DD	16					; 00000010H
	DD	$LN121@nk_do_prop
	DD	-244					; ffffff0cH
	DD	16					; 00000010H
	DD	$LN122@nk_do_prop
	DD	-268					; fffffef4H
	DD	16					; 00000010H
	DD	$LN123@nk_do_prop
	DD	-292					; fffffedcH
	DD	16					; 00000010H
	DD	$LN124@nk_do_prop
$LN124@nk_do_prop:
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
$LN123@nk_do_prop:
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
$LN122@nk_do_prop:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN121@nk_do_prop:
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	0
$LN120@nk_do_prop:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN119@nk_do_prop:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN118@nk_do_prop:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN117@nk_do_prop:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
_nk_do_property ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_property
_TEXT	SEGMENT
_background$ = -36					; size = 4
_text$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_style$ = 12						; size = 4
_bounds$ = 16						; size = 4
_label$ = 20						; size = 4
_state$ = 24						; size = 4
_name$ = 28						; size = 4
_len$ = 32						; size = 4
_font$ = 36						; size = 4
_nk_draw_property PROC					; COMDAT

; 16022: {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 16023:     struct nk_text text;
; 16024:     const struct nk_style_item *background;
; 16025: 
; 16026:     /* select correct background and text color */
; 16027:     if (state & NK_WIDGET_STATE_ACTIVED) {

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN6@nk_draw_pr

; 16028:         background = &style->active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _background$[ebp], eax

; 16029:         text.text = style->label_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _text$[ebp+12], ecx
	jmp	SHORT $LN3@nk_draw_pr
$LN6@nk_draw_pr:

; 16030:     } else if (state & NK_WIDGET_STATE_HOVER) {

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN4@nk_draw_pr

; 16031:         background = &style->hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _background$[ebp], eax

; 16032:         text.text = style->label_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _text$[ebp+12], ecx

; 16033:     } else {

	jmp	SHORT $LN3@nk_draw_pr
$LN4@nk_draw_pr:

; 16034:         background = &style->normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	DWORD PTR _background$[ebp], eax

; 16035:         text.text = style->label_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _text$[ebp+12], ecx
$LN3@nk_draw_pr:

; 16036:     }
; 16037: 
; 16038:     /* draw background */
; 16039:     if (background->type == NK_STYLE_ITEM_IMAGE) {

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN2@nk_draw_pr

; 16040:         nk_draw_image(out, *bounds, &background->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _background$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 16041:         text.background = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	DWORD PTR _text$[ebp+8], eax

; 16042:     } else {

	jmp	$LN1@nk_draw_pr
$LN2@nk_draw_pr:

; 16043:         text.background = background->data.color;

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _text$[ebp+8], ecx

; 16044:         nk_fill_rect(out, *bounds, style->rounding, background->data.color);

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+88]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 16045:         nk_stroke_rect(out, *bounds, style->rounding, style->border, background->data.color);

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+84]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+88]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_stroke_rect
	add	esp, 32					; 00000020H
$LN1@nk_draw_pr:

; 16046:     }
; 16047: 
; 16048:     /* draw label */
; 16049:     text.padding = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _text$[ebp], eax
	mov	DWORD PTR _text$[ebp+4], edx

; 16050:     nk_widget_text(out, *label, name, len, &text, NK_TEXT_CENTERED, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	18					; 00000012H
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _label$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_widget_text
	add	esp, 40					; 00000028H

; 16051: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@nk_draw_pr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@nk_draw_pr:
	DD	1
	DD	$LN10@nk_draw_pr
$LN10@nk_draw_pr:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN9@nk_draw_pr
$LN9@nk_draw_pr:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_nk_draw_property ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_property_behavior
_TEXT	SEGMENT
_ws$ = 8						; size = 4
_in$ = 12						; size = 4
_property$ = 16						; size = 16
_label$ = 32						; size = 16
_edit$ = 48						; size = 16
_empty$ = 64						; size = 16
_state$ = 80						; size = 4
_variant$ = 84						; size = 4
_inc_per_pixel$ = 88					; size = 4
_nk_property_behavior PROC				; COMDAT

; 16003: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 16004:     if (in && *state == NK_PROPERTY_DEFAULT) {

	cmp	DWORD PTR _in$[ebp], 0
	je	$LN3@nk_propert
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN3@nk_propert

; 16005:         if (nk_button_behavior(ws, edit, in, NK_BUTTON_DEFAULT))

	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _edit$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _edit$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _edit$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ws$[ebp]
	push	ecx
	call	_nk_button_behavior
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN7@nk_propert

; 16006:             *state = NK_PROPERTY_EDIT;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 1
	jmp	SHORT $LN3@nk_propert
$LN7@nk_propert:

; 16007:         else if (nk_input_is_mouse_click_down_in_rect(in, NK_BUTTON_LEFT, label, nk_true))

	push	1
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _label$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _label$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _label$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _label$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_mouse_click_down_in_rect
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN5@nk_propert

; 16008:             *state = NK_PROPERTY_DRAG;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 2
	jmp	SHORT $LN3@nk_propert
$LN5@nk_propert:

; 16009:         else if (nk_input_is_mouse_click_down_in_rect(in, NK_BUTTON_LEFT, empty, nk_true))

	push	1
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _empty$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _empty$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _empty$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _empty$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_mouse_click_down_in_rect
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN3@nk_propert

; 16010:             *state = NK_PROPERTY_DRAG;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 2
$LN3@nk_propert:

; 16011:     }
; 16012:     if (*state == NK_PROPERTY_DRAG) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 2
	jne	SHORT $LN1@nk_propert

; 16013:         nk_drag_behavior(ws, in, property, variant, inc_per_pixel);

	push	ecx
	movss	xmm0, DWORD PTR _inc_per_pixel$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _variant$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _property$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _property$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _property$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _property$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ws$[ebp]
	push	edx
	call	_nk_drag_behavior
	add	esp, 32					; 00000020H

; 16014:         if (!(*ws & NK_WIDGET_STATE_ACTIVED)) *state = NK_PROPERTY_DEFAULT;

	mov	eax, DWORD PTR _ws$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 32					; 00000020H
	jne	SHORT $LN1@nk_propert
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 0
$LN1@nk_propert:

; 16015:     }
; 16016: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_property_behavior ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_drag_behavior
_TEXT	SEGMENT
tv203 = -264						; size = 8
tv204 = -256						; size = 8
tv172 = -252						; size = 4
tv142 = -252						; size = 4
tv188 = -248						; size = 8
tv173 = -248						; size = 4
tv143 = -248						; size = 4
tv157 = -244						; size = 4
tv133 = -244						; size = 4
tv90 = -244						; size = 4
tv78 = -244						; size = 4
tv70 = -244						; size = 4
_pixels$1 = -44						; size = 4
_delta$2 = -32						; size = 4
_left_mouse_click_in_cursor$ = -20			; size = 4
_left_mouse_down$ = -8					; size = 4
_state$ = 8						; size = 4
_in$ = 12						; size = 4
_drag$ = 16						; size = 16
_variant$ = 32						; size = 4
_inc_per_pixel$ = 36					; size = 4
_nk_drag_behavior PROC					; COMDAT

; 15962: {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 15963:     int left_mouse_down = in && in->mouse.buttons[NK_BUTTON_LEFT].down;

	cmp	DWORD PTR _in$[ebp], 0
	je	SHORT $LN16@nk_drag_be
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in$[ebp]
	cmp	DWORD PTR [edx+ecx+260], 0
	je	SHORT $LN16@nk_drag_be
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN17@nk_drag_be
$LN16@nk_drag_be:
	mov	DWORD PTR tv70[ebp], 0
$LN17@nk_drag_be:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR _left_mouse_down$[ebp], eax

; 15964:     int left_mouse_click_in_cursor = in &&
; 15965:         nk_input_has_mouse_click_down_in_rect(in, NK_BUTTON_LEFT, drag, nk_true);

	cmp	DWORD PTR _in$[ebp], 0
	je	SHORT $LN18@nk_drag_be
	push	1
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _drag$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _drag$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _drag$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _drag$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_has_mouse_click_down_in_rect
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN18@nk_drag_be
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN19@nk_drag_be
$LN18@nk_drag_be:
	mov	DWORD PTR tv78[ebp], 0
$LN19@nk_drag_be:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _left_mouse_click_in_cursor$[ebp], ecx

; 15966: 
; 15967:     nk_widget_state_reset(state);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2
	je	SHORT $LN13@nk_drag_be
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 6
	jmp	SHORT $LN12@nk_drag_be
$LN13@nk_drag_be:
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 4
$LN12@nk_drag_be:

; 15968:     if (nk_input_is_mouse_hovering_rect(in, drag))

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _drag$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _drag$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _drag$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _drag$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN11@nk_drag_be

; 15969:         *state = NK_WIDGET_STATE_HOVERED;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H
$LN11@nk_drag_be:

; 15970: 
; 15971:     if (left_mouse_down && left_mouse_click_in_cursor) {

	cmp	DWORD PTR _left_mouse_down$[ebp], 0
	je	$LN10@nk_drag_be
	cmp	DWORD PTR _left_mouse_click_in_cursor$[ebp], 0
	je	$LN10@nk_drag_be

; 15972:         float delta, pixels;
; 15973:         pixels = in->mouse.delta.x;

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+340]
	movss	DWORD PTR _pixels$1[ebp], xmm0

; 15974:         delta = pixels * inc_per_pixel;

	movss	xmm0, DWORD PTR _pixels$1[ebp]
	mulss	xmm0, DWORD PTR _inc_per_pixel$[ebp]
	movss	DWORD PTR _delta$2[ebp], xmm0

; 15975:         switch (variant->kind) {

	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv90[ebp], ecx
	cmp	DWORD PTR tv90[ebp], 0
	je	SHORT $LN6@nk_drag_be
	cmp	DWORD PTR tv90[ebp], 1
	je	$LN5@nk_drag_be
	cmp	DWORD PTR tv90[ebp], 2
	je	$LN4@nk_drag_be

; 15976:         default: break;

	jmp	$LN8@nk_drag_be
$LN6@nk_drag_be:

; 15977:         case NK_PROPERTY_INT:
; 15978:             variant->value.i = variant->value.i + (int)delta;

	cvttss2si eax, DWORD PTR _delta$2[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _variant$[ebp]
	mov	DWORD PTR [edx+8], eax

; 15979:             variant->value.i = NK_CLAMP(variant->min_value.i, variant->value.i, variant->max_value.i);

	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+24]
	jge	SHORT $LN20@nk_drag_be
	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv133[ebp], ecx
	jmp	SHORT $LN21@nk_drag_be
$LN20@nk_drag_be:
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR tv133[ebp], eax
$LN21@nk_drag_be:
	mov	ecx, DWORD PTR _variant$[ebp]
	mov	edx, DWORD PTR tv133[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jge	SHORT $LN24@nk_drag_be
	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv143[ebp], ecx
	jmp	SHORT $LN25@nk_drag_be
$LN24@nk_drag_be:
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN22@nk_drag_be
	mov	edx, DWORD PTR _variant$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv142[ebp], eax
	jmp	SHORT $LN23@nk_drag_be
$LN22@nk_drag_be:
	mov	ecx, DWORD PTR _variant$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR tv142[ebp], edx
$LN23@nk_drag_be:
	mov	eax, DWORD PTR tv142[ebp]
	mov	DWORD PTR tv143[ebp], eax
$LN25@nk_drag_be:
	mov	ecx, DWORD PTR _variant$[ebp]
	mov	edx, DWORD PTR tv143[ebp]
	mov	DWORD PTR [ecx+8], edx

; 15980:             break;

	jmp	$LN8@nk_drag_be
$LN5@nk_drag_be:

; 15981:         case NK_PROPERTY_FLOAT:
; 15982:             variant->value.f = variant->value.f + (float)delta;

	mov	eax, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR _delta$2[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 15983:             variant->value.f = NK_CLAMP(variant->min_value.f, variant->value.f, variant->max_value.f);

	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	comiss	xmm0, DWORD PTR [eax+8]
	jbe	SHORT $LN26@nk_drag_be
	mov	edx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR tv157[ebp], xmm0
	jmp	SHORT $LN27@nk_drag_be
$LN26@nk_drag_be:
	mov	eax, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR tv157[ebp], xmm0
$LN27@nk_drag_be:
	mov	ecx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	comiss	xmm0, DWORD PTR tv157[ebp]
	jbe	SHORT $LN30@nk_drag_be
	mov	edx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR tv173[ebp], xmm0
	jmp	SHORT $LN31@nk_drag_be
$LN30@nk_drag_be:
	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	comiss	xmm0, DWORD PTR [eax+8]
	jbe	SHORT $LN28@nk_drag_be
	mov	edx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR tv172[ebp], xmm0
	jmp	SHORT $LN29@nk_drag_be
$LN28@nk_drag_be:
	mov	eax, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR tv172[ebp], xmm0
$LN29@nk_drag_be:
	movss	xmm0, DWORD PTR tv172[ebp]
	movss	DWORD PTR tv173[ebp], xmm0
$LN31@nk_drag_be:
	mov	ecx, DWORD PTR _variant$[ebp]
	movss	xmm0, DWORD PTR tv173[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 15984:             break;

	jmp	$LN8@nk_drag_be
$LN4@nk_drag_be:

; 15985:         case NK_PROPERTY_DOUBLE:
; 15986:             variant->value.d = variant->value.d + (double)delta;

	cvtss2sd xmm0, DWORD PTR _delta$2[ebp]
	mov	eax, DWORD PTR _variant$[ebp]
	addsd	xmm0, QWORD PTR [eax+8]
	mov	ecx, DWORD PTR _variant$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0

; 15987:             variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d, variant->max_value.d);

	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [ecx+24]
	comisd	xmm0, QWORD PTR [eax+8]
	jbe	SHORT $LN32@nk_drag_be
	mov	edx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [edx+8]
	movsd	QWORD PTR tv188[ebp], xmm0
	jmp	SHORT $LN33@nk_drag_be
$LN32@nk_drag_be:
	mov	eax, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [eax+24]
	movsd	QWORD PTR tv188[ebp], xmm0
$LN33@nk_drag_be:
	mov	ecx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [ecx+16]
	comisd	xmm0, QWORD PTR tv188[ebp]
	jbe	SHORT $LN36@nk_drag_be
	mov	edx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [edx+16]
	movsd	QWORD PTR tv204[ebp], xmm0
	jmp	SHORT $LN37@nk_drag_be
$LN36@nk_drag_be:
	mov	eax, DWORD PTR _variant$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [ecx+24]
	comisd	xmm0, QWORD PTR [eax+8]
	jbe	SHORT $LN34@nk_drag_be
	mov	edx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [edx+8]
	movsd	QWORD PTR tv203[ebp], xmm0
	jmp	SHORT $LN35@nk_drag_be
$LN34@nk_drag_be:
	mov	eax, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR [eax+24]
	movsd	QWORD PTR tv203[ebp], xmm0
$LN35@nk_drag_be:
	movsd	xmm0, QWORD PTR tv203[ebp]
	movsd	QWORD PTR tv204[ebp], xmm0
$LN37@nk_drag_be:
	mov	ecx, DWORD PTR _variant$[ebp]
	movsd	xmm0, QWORD PTR tv204[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
$LN8@nk_drag_be:

; 15988:             break;
; 15989:         }
; 15990:         *state = NK_WIDGET_STATE_ACTIVE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 34			; 00000022H
$LN10@nk_drag_be:

; 15991:     }
; 15992:     if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(in, drag))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 16					; 00000010H
	je	SHORT $LN3@nk_drag_be
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _drag$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _drag$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _drag$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _drag$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_mouse_prev_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN3@nk_drag_be

; 15993:         *state |= NK_WIDGET_STATE_ENTERED;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 8
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN1@nk_drag_be
$LN3@nk_drag_be:

; 15994:     else if (nk_input_is_mouse_prev_hovering_rect(in, drag))

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _drag$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _drag$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _drag$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _drag$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_mouse_prev_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@nk_drag_be

; 15995:         *state |= NK_WIDGET_STATE_LEFT;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@nk_drag_be:

; 15996: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_drag_behavior ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_do_edit
_TEXT	SEGMENT
tv750 = -1380						; size = 4
tv736 = -1380						; size = 4
tv696 = -1380						; size = 4
tv639 = -1380						; size = 4
tv602 = -1380						; size = 4
tv527 = -1380						; size = 4
tv521 = -1380						; size = 4
tv500 = -1380						; size = 4
tv411 = -1380						; size = 4
tv409 = -1380						; size = 4
tv270 = -1380						; size = 4
tv262 = -1380						; size = 4
tv239 = -1380						; size = 4
tv230 = -1380						; size = 4
tv154 = -1380						; size = 4
tv148 = -1380						; size = 4
_text_color$1 = -1180					; size = 4
_background_color$2 = -1168				; size = 4
_background$3 = -1156					; size = 4
_begin$4 = -1144					; size = 4
_l$5 = -1132						; size = 4
_unicode$6 = -1120					; size = 4
_txt$7 = -1108						; size = 16
_label$8 = -1084					; size = 16
_glyph_len$9 = -1060					; size = 4
_cursor$10 = -1048					; size = 16
_end$11 = -1024						; size = 4
_begin$12 = -1012					; size = 4
_begin$13 = -1000					; size = 4
_begin$14 = -988					; size = 4
_l$15 = -976						; size = 4
_begin$16 = -964					; size = 4
_background$17 = -952					; size = 4
_cursor_text_color$18 = -940				; size = 4
_cursor_color$19 = -928					; size = 4
_sel_text_color$20 = -916				; size = 4
_sel_background_color$21 = -904				; size = 4
_text_color$22 = -892					; size = 4
_background_color$23 = -880				; size = 4
_scroll_inc$24 = -868					; size = 4
_scroll_step$25 = -856					; size = 4
_scroll_offset$26 = -844				; size = 4
_scroll_target$27 = -832				; size = 4
_scroll$28 = -820					; size = 16
_ws$29 = -796						; size = 4
_scroll_increment$30 = -784				; size = 4
_remaining$31 = -772					; size = 4
_row_size$32 = -760					; size = 8
_out_offset$33 = -744					; size = 8
_glyph_offset$34 = -728					; size = 4
_remaining$35 = -716					; size = 4
_row_size$36 = -704					; size = 8
_out_offset$37 = -688					; size = 8
_glyph_offset$38 = -672					; size = 4
_remaining$39 = -660					; size = 4
_row_size$40 = -648					; size = 8
_out_offset$41 = -632					; size = 8
_glyph_offset$42 = -616					; size = 4
_row_begin$43 = -604					; size = 4
_glyphs$44 = -592					; size = 4
_text_len$45 = -580					; size = 4
_unicode$46 = -568					; size = 4
_glyph_len$47 = -556					; size = 4
_glyph_width$48 = -544					; size = 4
_line_width$49 = -532					; size = 4
_selection_end$50 = -520				; size = 4
_selection_begin$51 = -508				; size = 4
_selection_offset_end$52 = -496				; size = 8
_selection_offset_start$53 = -480			; size = 8
_cursor_pos$54 = -464					; size = 8
_select_end_ptr$55 = -448				; size = 4
_select_begin_ptr$56 = -436				; size = 4
_cursor_ptr$57 = -424					; size = 4
_text_size$58 = -412					; size = 8
_total_lines$59 = -396					; size = 4
_background$60 = -384					; size = 4
_len$61 = -372						; size = 4
_text$62 = -360						; size = 4
_tab$63 = -348						; size = 4
_paste$64 = -336					; size = 4
_end$65 = -324						; size = 4
_begin$66 = -312					; size = 4
_e$67 = -300						; size = 4
_b$68 = -288						; size = 4
_text$69 = -276						; size = 4
_unicode$70 = -264					; size = 4
_glyph_len$71 = -252					; size = 4
_cut$72 = -240						; size = 4
_copy$73 = -228						; size = 4
_old_mode$74 = -216					; size = 4
_i$75 = -204						; size = 4
_mouse_y$76 = -192					; size = 4
_mouse_x$77 = -180					; size = 4
_shift_mod$78 = -168					; size = 4
_type$79 = -156						; size = 4
_clip$ = -144						; size = 16
_old_clip$ = -120					; size = 16
_cursor_follow$ = -93					; size = 1
_select_all$ = -81					; size = 1
_is_hovered$ = -69					; size = 1
_prev_state$ = -57					; size = 1
_row_height$ = -48					; size = 4
_ret$ = -36						; size = 4
_area$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_out$ = 12						; size = 4
_bounds$ = 16						; size = 16
_flags$ = 32						; size = 4
_filter$ = 36						; size = 4
_edit$ = 40						; size = 4
_style$ = 44						; size = 4
_in$ = 48						; size = 4
_font$ = 52						; size = 4
_nk_do_edit PROC					; COMDAT

; 15431: {

	push	ebp
	mov	ebp, esp
	sub	esp, 1380				; 00000564H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1380]
	mov	ecx, 345				; 00000159H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 15432:     struct nk_rect area;
; 15433:     nk_flags ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 15434:     float row_height;
; 15435:     char prev_state = 0;

	mov	BYTE PTR _prev_state$[ebp], 0

; 15436:     char is_hovered = 0;

	mov	BYTE PTR _is_hovered$[ebp], 0

; 15437:     char select_all = 0;

	mov	BYTE PTR _select_all$[ebp], 0

; 15438:     char cursor_follow = 0;

	mov	BYTE PTR _cursor_follow$[ebp], 0

; 15439:     struct nk_rect old_clip;
; 15440:     struct nk_rect clip;
; 15441: 
; 15442:     NK_ASSERT(state);

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN96@nk_do_edit
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_edit@@9@9@ddf8d5d8
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN96@nk_do_edit:

; 15443:     NK_ASSERT(out);

	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN97@nk_do_edit
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_edit@@9@9@ddf8d5d8
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17CMKEDJDI@?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN97@nk_do_edit:

; 15444:     NK_ASSERT(style);

	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN98@nk_do_edit
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_edit@@9@9@ddf8d5d8
	add	eax, 13					; 0000000dH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@OIINANNN@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN98@nk_do_edit:

; 15445:     if (!state || !out || !style)

	cmp	DWORD PTR _state$[ebp], 0
	je	SHORT $LN92@nk_do_edit
	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN92@nk_do_edit
	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN93@nk_do_edit
$LN92@nk_do_edit:

; 15446:         return ret;

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN94@nk_do_edit
$LN93@nk_do_edit:

; 15447: 
; 15448:     /* visible text area calculation */
; 15449:     area.x = bounds.x + style->padding.x + style->border;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _bounds$[ebp]
	addss	xmm0, DWORD PTR [eax+560]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+540]
	movss	DWORD PTR _area$[ebp], xmm0

; 15450:     area.y = bounds.y + style->padding.y + style->border;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	addss	xmm0, DWORD PTR [eax+564]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+540]
	movss	DWORD PTR _area$[ebp+4], xmm0

; 15451:     area.w = bounds.w - (2.0f * style->padding.x + 2 * style->border);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+560]
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx+540]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _bounds$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _area$[ebp+8], xmm1

; 15452:     area.h = bounds.h - (2.0f * style->padding.y + 2 * style->border);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+564]
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx+540]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _bounds$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _area$[ebp+12], xmm1

; 15453:     if (flags & NK_EDIT_MULTILINE)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 1024				; 00000400H
	je	SHORT $LN91@nk_do_edit

; 15454:         area.w = NK_MAX(0, area.w - style->scrollbar_size.x);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _area$[ebp+8]
	subss	xmm0, DWORD PTR [eax+552]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN99@nk_do_edit
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _area$[ebp+8]
	subss	xmm0, DWORD PTR [ecx+552]
	movss	DWORD PTR tv148[ebp], xmm0
	jmp	SHORT $LN100@nk_do_edit
$LN99@nk_do_edit:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv148[ebp], xmm0
$LN100@nk_do_edit:
	movss	xmm0, DWORD PTR tv148[ebp]
	movss	DWORD PTR _area$[ebp+8], xmm0
$LN91@nk_do_edit:

; 15455:     row_height = (flags & NK_EDIT_MULTILINE)? font->height + style->row_padding: area.h;

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 1024				; 00000400H
	je	SHORT $LN101@nk_do_edit
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR [edx+568]
	movss	DWORD PTR tv154[ebp], xmm0
	jmp	SHORT $LN102@nk_do_edit
$LN101@nk_do_edit:
	movss	xmm0, DWORD PTR _area$[ebp+12]
	movss	DWORD PTR tv154[ebp], xmm0
$LN102@nk_do_edit:
	movss	xmm0, DWORD PTR tv154[ebp]
	movss	DWORD PTR _row_height$[ebp], xmm0

; 15456: 
; 15457:     /* calculate clipping rectangle */
; 15458:     old_clip = out->clip;

	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _old_clip$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _old_clip$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _old_clip$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _old_clip$[ebp+12], edx

; 15459:     nk_unify(&clip, &old_clip, area.x, area.y, area.x + area.w, area.y + area.h);

	movss	xmm0, DWORD PTR _area$[ebp+4]
	addss	xmm0, DWORD PTR _area$[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _area$[ebp]
	addss	xmm0, DWORD PTR _area$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _area$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _area$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _old_clip$[ebp]
	push	eax
	lea	ecx, DWORD PTR _clip$[ebp]
	push	ecx
	call	_nk_unify
	add	esp, 24					; 00000018H

; 15460: 
; 15461:     /* update edit state */
; 15462:     prev_state = (char)edit->active;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	cl, BYTE PTR [eax+105]
	mov	BYTE PTR _prev_state$[ebp], cl

; 15463:     is_hovered = (char)nk_input_is_mouse_hovering_rect(in, bounds);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	mov	BYTE PTR _is_hovered$[ebp], al

; 15464:     if (in && in->mouse.buttons[NK_BUTTON_LEFT].clicked && in->mouse.buttons[NK_BUTTON_LEFT].down) {

	cmp	DWORD PTR _in$[ebp], 0
	je	$LN90@nk_do_edit
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in$[ebp]
	cmp	DWORD PTR [edx+ecx+264], 0
	je	$LN90@nk_do_edit
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in$[ebp]
	cmp	DWORD PTR [edx+ecx+260], 0
	je	SHORT $LN90@nk_do_edit

; 15465:         edit->active = NK_INBOX(in->mouse.pos.x, in->mouse.pos.y,
; 15466:                                 bounds.x, bounds.y, bounds.w, bounds.h);

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+324]
	comiss	xmm0, DWORD PTR _bounds$[ebp]
	jb	SHORT $LN103@nk_do_edit
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR _bounds$[ebp]
	addss	xmm0, DWORD PTR _bounds$[ebp+8]
	comiss	xmm0, DWORD PTR [ecx+324]
	jbe	SHORT $LN103@nk_do_edit
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+328]
	comiss	xmm0, DWORD PTR _bounds$[ebp+4]
	jb	SHORT $LN103@nk_do_edit
	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	addss	xmm0, DWORD PTR _bounds$[ebp+12]
	comiss	xmm0, DWORD PTR [eax+328]
	jbe	SHORT $LN103@nk_do_edit
	mov	DWORD PTR tv230[ebp], 1
	jmp	SHORT $LN105@nk_do_edit
$LN103@nk_do_edit:
	mov	DWORD PTR tv230[ebp], 0
$LN105@nk_do_edit:
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	dl, BYTE PTR tv230[ebp]
	mov	BYTE PTR [ecx+105], dl
$LN90@nk_do_edit:

; 15467:     }
; 15468: 
; 15469:     /* (de)activate text editor */
; 15470:     if (!prev_state && edit->active) {

	movsx	eax, BYTE PTR _prev_state$[ebp]
	test	eax, eax
	jne	$LN89@nk_do_edit
	mov	eax, DWORD PTR _edit$[ebp]
	movzx	ecx, BYTE PTR [eax+105]
	test	ecx, ecx
	je	SHORT $LN89@nk_do_edit

; 15471:         const enum nk_text_edit_type type = (flags & NK_EDIT_MULTILINE) ?
; 15472:             NK_TEXT_EDIT_MULTI_LINE: NK_TEXT_EDIT_SINGLE_LINE;

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 1024				; 00000400H
	je	SHORT $LN106@nk_do_edit
	mov	DWORD PTR tv239[ebp], 1
	jmp	SHORT $LN107@nk_do_edit
$LN106@nk_do_edit:
	mov	DWORD PTR tv239[ebp], 0
$LN107@nk_do_edit:
	mov	ecx, DWORD PTR tv239[ebp]
	mov	DWORD PTR _type$79[ebp], ecx

; 15473:         nk_textedit_clear_state(edit, type, filter);

	mov	eax, DWORD PTR _filter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$79[ebp]
	push	ecx
	mov	edx, DWORD PTR _edit$[ebp]
	push	edx
	call	_nk_textedit_clear_state
	add	esp, 12					; 0000000cH

; 15474:         if (flags & NK_EDIT_ALWAYS_INSERT_MODE)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 512				; 00000200H
	je	SHORT $LN88@nk_do_edit

; 15475:             edit->mode = NK_TEXT_EDIT_MODE_INSERT;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	BYTE PTR [eax+100], 1
$LN88@nk_do_edit:

; 15476:         if (flags & NK_EDIT_AUTO_SELECT)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 2
	je	SHORT $LN87@nk_do_edit

; 15477:             select_all = nk_true;

	mov	BYTE PTR _select_all$[ebp], 1
$LN87@nk_do_edit:

; 15478:         if (flags & NK_EDIT_GOTO_END_ON_ACTIVATE) {

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 2048				; 00000800H
	je	SHORT $LN86@nk_do_edit

; 15479:             edit->cursor = edit->string.len;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+88], edx

; 15480:             in = 0;

	mov	DWORD PTR _in$[ebp], 0
$LN86@nk_do_edit:

; 15481:         }

	jmp	SHORT $LN84@nk_do_edit
$LN89@nk_do_edit:

; 15482:     } else if (!edit->active) edit->mode = NK_TEXT_EDIT_MODE_VIEW;

	mov	eax, DWORD PTR _edit$[ebp]
	movzx	ecx, BYTE PTR [eax+105]
	test	ecx, ecx
	jne	SHORT $LN84@nk_do_edit
	mov	eax, DWORD PTR _edit$[ebp]
	mov	BYTE PTR [eax+100], 0
$LN84@nk_do_edit:

; 15483:     if (flags & NK_EDIT_READ_ONLY)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 1
	je	SHORT $LN83@nk_do_edit

; 15484:         edit->mode = NK_TEXT_EDIT_MODE_VIEW;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	BYTE PTR [eax+100], 0
$LN83@nk_do_edit:

; 15485: 
; 15486:     ret = (edit->active) ? NK_EDIT_ACTIVE: NK_EDIT_INACTIVE;

	mov	eax, DWORD PTR _edit$[ebp]
	movzx	ecx, BYTE PTR [eax+105]
	test	ecx, ecx
	je	SHORT $LN108@nk_do_edit
	mov	DWORD PTR tv262[ebp], 1
	jmp	SHORT $LN109@nk_do_edit
$LN108@nk_do_edit:
	mov	DWORD PTR tv262[ebp], 2
$LN109@nk_do_edit:
	mov	edx, DWORD PTR tv262[ebp]
	mov	DWORD PTR _ret$[ebp], edx

; 15487:     if (prev_state != edit->active)

	movsx	eax, BYTE PTR _prev_state$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	movzx	edx, BYTE PTR [ecx+105]
	cmp	eax, edx
	je	SHORT $LN82@nk_do_edit

; 15488:         ret |= (edit->active) ? NK_EDIT_ACTIVATED: NK_EDIT_DEACTIVATED;

	mov	eax, DWORD PTR _edit$[ebp]
	movzx	ecx, BYTE PTR [eax+105]
	test	ecx, ecx
	je	SHORT $LN110@nk_do_edit
	mov	DWORD PTR tv270[ebp], 4
	jmp	SHORT $LN111@nk_do_edit
$LN110@nk_do_edit:
	mov	DWORD PTR tv270[ebp], 8
$LN111@nk_do_edit:
	mov	edx, DWORD PTR _ret$[ebp]
	or	edx, DWORD PTR tv270[ebp]
	mov	DWORD PTR _ret$[ebp], edx
$LN82@nk_do_edit:

; 15489: 
; 15490:     /* handle user input */
; 15491:     if (edit->active && in)

	mov	eax, DWORD PTR _edit$[ebp]
	movzx	ecx, BYTE PTR [eax+105]
	test	ecx, ecx
	je	$LN54@nk_do_edit
	cmp	DWORD PTR _in$[ebp], 0
	je	$LN54@nk_do_edit

; 15492:     {
; 15493:         int shift_mod = in->keyboard.keys[NK_KEY_SHIFT].down;

	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _in$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _shift_mod$78[ebp], edx

; 15494:         const float mouse_x = (in->mouse.pos.x - area.x) + edit->scrollbar.x;

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+324]
	subss	xmm0, DWORD PTR _area$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	addss	xmm0, DWORD PTR [ecx+80]
	movss	DWORD PTR _mouse_x$77[ebp], xmm0

; 15495:         const float mouse_y = (in->mouse.pos.y - area.y) + edit->scrollbar.y;

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	subss	xmm0, DWORD PTR _area$[ebp+4]
	mov	ecx, DWORD PTR _edit$[ebp]
	addss	xmm0, DWORD PTR [ecx+84]
	movss	DWORD PTR _mouse_y$76[ebp], xmm0

; 15496: 
; 15497:         /* mouse click handler */
; 15498:         is_hovered = (char)nk_input_is_mouse_hovering_rect(in, area);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _area$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _area$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _area$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _area$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	mov	BYTE PTR _is_hovered$[ebp], al

; 15499:         if (select_all) {

	movsx	eax, BYTE PTR _select_all$[ebp]
	test	eax, eax
	je	SHORT $LN80@nk_do_edit

; 15500:             nk_textedit_select_all(edit);

	mov	eax, DWORD PTR _edit$[ebp]
	push	eax
	call	_nk_textedit_select_all
	add	esp, 4

; 15501:         } else if (is_hovered && in->mouse.buttons[NK_BUTTON_LEFT].down &&

	jmp	$LN73@nk_do_edit
$LN80@nk_do_edit:

; 15502:             in->mouse.buttons[NK_BUTTON_LEFT].clicked) {

	movsx	eax, BYTE PTR _is_hovered$[ebp]
	test	eax, eax
	je	SHORT $LN78@nk_do_edit
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in$[ebp]
	cmp	DWORD PTR [edx+ecx+260], 0
	je	SHORT $LN78@nk_do_edit
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in$[ebp]
	cmp	DWORD PTR [edx+ecx+264], 0
	je	SHORT $LN78@nk_do_edit

; 15503:             nk_textedit_click(edit, mouse_x, mouse_y, font, row_height);

	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _mouse_y$76[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mouse_x$77[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _edit$[ebp]
	push	ecx
	call	_nk_textedit_click
	add	esp, 20					; 00000014H

; 15504:         } else if (is_hovered && in->mouse.buttons[NK_BUTTON_LEFT].down &&

	jmp	$LN73@nk_do_edit
$LN78@nk_do_edit:

; 15505:             (in->mouse.delta.x != 0.0f || in->mouse.delta.y != 0.0f)) {

	movsx	eax, BYTE PTR _is_hovered$[ebp]
	test	eax, eax
	je	$LN76@nk_do_edit
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in$[ebp]
	cmp	DWORD PTR [edx+ecx+260], 0
	je	SHORT $LN76@nk_do_edit
	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+340]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN75@nk_do_edit
	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+344]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN76@nk_do_edit
$LN75@nk_do_edit:

; 15506:             nk_textedit_drag(edit, mouse_x, mouse_y, font, row_height);

	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _mouse_y$76[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mouse_x$77[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _edit$[ebp]
	push	ecx
	call	_nk_textedit_drag
	add	esp, 20					; 00000014H

; 15507:             cursor_follow = nk_true;

	mov	BYTE PTR _cursor_follow$[ebp], 1

; 15508:         } else if (is_hovered && in->mouse.buttons[NK_BUTTON_RIGHT].clicked &&

	jmp	SHORT $LN73@nk_do_edit
$LN76@nk_do_edit:

; 15509:             in->mouse.buttons[NK_BUTTON_RIGHT].down) {

	movsx	eax, BYTE PTR _is_hovered$[ebp]
	test	eax, eax
	je	SHORT $LN73@nk_do_edit
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _in$[ebp]
	cmp	DWORD PTR [ecx+eax+264], 0
	je	SHORT $LN73@nk_do_edit
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, DWORD PTR _in$[ebp]
	cmp	DWORD PTR [ecx+eax+260], 0
	je	SHORT $LN73@nk_do_edit

; 15510:             nk_textedit_key(edit, NK_KEY_TEXT_WORD_LEFT, nk_false, font, row_height);

	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	0
	push	24					; 00000018H
	mov	ecx, DWORD PTR _edit$[ebp]
	push	ecx
	call	_nk_textedit_key
	add	esp, 20					; 00000014H

; 15511:             nk_textedit_key(edit, NK_KEY_TEXT_WORD_RIGHT, nk_true, font, row_height);

	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	1
	push	25					; 00000019H
	mov	ecx, DWORD PTR _edit$[ebp]
	push	ecx
	call	_nk_textedit_key
	add	esp, 20					; 00000014H

; 15512:             cursor_follow = nk_true;

	mov	BYTE PTR _cursor_follow$[ebp], 1
$LN73@nk_do_edit:

; 15513:         }
; 15514: 
; 15515:         {int i; /* keyboard input */
; 15516:         int old_mode = edit->mode;

	mov	eax, DWORD PTR _edit$[ebp]
	movzx	ecx, BYTE PTR [eax+100]
	mov	DWORD PTR _old_mode$74[ebp], ecx

; 15517:         for (i = 0; i < NK_KEY_MAX; ++i) {

	mov	DWORD PTR _i$75[ebp], 0
	jmp	SHORT $LN72@nk_do_edit
$LN71@nk_do_edit:
	mov	eax, DWORD PTR _i$75[ebp]
	add	eax, 1
	mov	DWORD PTR _i$75[ebp], eax
$LN72@nk_do_edit:
	cmp	DWORD PTR _i$75[ebp], 30		; 0000001eH
	jge	SHORT $LN70@nk_do_edit

; 15518:             if (i == NK_KEY_ENTER || i == NK_KEY_TAB) continue; /* special case */

	cmp	DWORD PTR _i$75[ebp], 4
	je	SHORT $LN68@nk_do_edit
	cmp	DWORD PTR _i$75[ebp], 5
	jne	SHORT $LN69@nk_do_edit
$LN68@nk_do_edit:
	jmp	SHORT $LN71@nk_do_edit
$LN69@nk_do_edit:

; 15519:             if (nk_input_is_key_pressed(in, (enum nk_keys)i)) {

	mov	eax, DWORD PTR _i$75[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_nk_input_is_key_pressed
	add	esp, 8
	test	eax, eax
	je	SHORT $LN67@nk_do_edit

; 15520:                 nk_textedit_key(edit, (enum nk_keys)i, shift_mod, font, row_height);

	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shift_mod$78[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$75[ebp]
	push	edx
	mov	eax, DWORD PTR _edit$[ebp]
	push	eax
	call	_nk_textedit_key
	add	esp, 20					; 00000014H

; 15521:                 cursor_follow = nk_true;

	mov	BYTE PTR _cursor_follow$[ebp], 1
$LN67@nk_do_edit:

; 15522:             }
; 15523:         }

	jmp	SHORT $LN71@nk_do_edit
$LN70@nk_do_edit:

; 15524:         if (old_mode != edit->mode) {

	mov	eax, DWORD PTR _edit$[ebp]
	movzx	ecx, BYTE PTR [eax+100]
	cmp	DWORD PTR _old_mode$74[ebp], ecx
	je	SHORT $LN66@nk_do_edit

; 15525:             in->keyboard.text_len = 0;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR [eax+256], 0
$LN66@nk_do_edit:

; 15526:         }}
; 15527: 
; 15528:         /* text input */
; 15529:         edit->filter = filter;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _filter$[ebp]
	mov	DWORD PTR [eax+76], ecx

; 15530:         if (in->keyboard.text_len) {

	mov	eax, DWORD PTR _in$[ebp]
	cmp	DWORD PTR [eax+256], 0
	je	SHORT $LN65@nk_do_edit

; 15531:             nk_textedit_text(edit, in->keyboard.text, in->keyboard.text_len);

	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR [eax+256]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	add	edx, 240				; 000000f0H
	push	edx
	mov	eax, DWORD PTR _edit$[ebp]
	push	eax
	call	_nk_textedit_text
	add	esp, 12					; 0000000cH

; 15532:             cursor_follow = nk_true;

	mov	BYTE PTR _cursor_follow$[ebp], 1

; 15533:             in->keyboard.text_len = 0;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR [eax+256], 0
$LN65@nk_do_edit:

; 15534:         }
; 15535: 
; 15536:         /* enter key handler */
; 15537:         if (nk_input_is_key_pressed(in, NK_KEY_ENTER)) {

	push	4
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_key_pressed
	add	esp, 8
	test	eax, eax
	je	SHORT $LN60@nk_do_edit

; 15538:             cursor_follow = nk_true;

	mov	BYTE PTR _cursor_follow$[ebp], 1

; 15539:             if (flags & NK_EDIT_CTRL_ENTER_NEWLINE && shift_mod)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN63@nk_do_edit
	cmp	DWORD PTR _shift_mod$78[ebp], 0
	je	SHORT $LN63@nk_do_edit

; 15540:                 nk_textedit_text(edit, "\n", 1);

	push	1
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	eax, DWORD PTR _edit$[ebp]
	push	eax
	call	_nk_textedit_text
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN60@nk_do_edit
$LN63@nk_do_edit:

; 15541:             else if (flags & NK_EDIT_SIG_ENTER)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 4
	je	SHORT $LN61@nk_do_edit

; 15542:                 ret |= NK_EDIT_COMMITED;

	mov	eax, DWORD PTR _ret$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax
	jmp	SHORT $LN60@nk_do_edit
$LN61@nk_do_edit:

; 15543:             else nk_textedit_text(edit, "\n", 1);

	push	1
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	eax, DWORD PTR _edit$[ebp]
	push	eax
	call	_nk_textedit_text
	add	esp, 12					; 0000000cH
$LN60@nk_do_edit:

; 15544:         }
; 15545: 
; 15546:         /* cut & copy handler */
; 15547:         {int copy= nk_input_is_key_pressed(in, NK_KEY_COPY);

	push	7
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_key_pressed
	add	esp, 8
	mov	DWORD PTR _copy$73[ebp], eax

; 15548:         int cut = nk_input_is_key_pressed(in, NK_KEY_CUT);

	push	8
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_key_pressed
	add	esp, 8
	mov	DWORD PTR _cut$72[ebp], eax

; 15549:         if ((copy || cut) && (flags & NK_EDIT_CLIPBOARD))

	cmp	DWORD PTR _copy$73[ebp], 0
	jne	SHORT $LN58@nk_do_edit
	cmp	DWORD PTR _cut$72[ebp], 0
	je	$LN56@nk_do_edit
$LN58@nk_do_edit:
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 64					; 00000040H
	je	$LN56@nk_do_edit

; 15550:         {
; 15551:             int glyph_len;
; 15552:             nk_rune unicode;
; 15553:             const char *text;
; 15554:             int b = edit->select_start;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _b$68[ebp], ecx

; 15555:             int e = edit->select_end;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _e$67[ebp], ecx

; 15556: 
; 15557:             int begin = NK_MIN(b, e);

	mov	eax, DWORD PTR _b$68[ebp]
	cmp	eax, DWORD PTR _e$67[ebp]
	jge	SHORT $LN112@nk_do_edit
	mov	ecx, DWORD PTR _b$68[ebp]
	mov	DWORD PTR tv409[ebp], ecx
	jmp	SHORT $LN113@nk_do_edit
$LN112@nk_do_edit:
	mov	edx, DWORD PTR _e$67[ebp]
	mov	DWORD PTR tv409[ebp], edx
$LN113@nk_do_edit:
	mov	eax, DWORD PTR tv409[ebp]
	mov	DWORD PTR _begin$66[ebp], eax

; 15558:             int end = NK_MAX(b, e);

	mov	eax, DWORD PTR _b$68[ebp]
	cmp	eax, DWORD PTR _e$67[ebp]
	jge	SHORT $LN114@nk_do_edit
	mov	ecx, DWORD PTR _e$67[ebp]
	mov	DWORD PTR tv411[ebp], ecx
	jmp	SHORT $LN115@nk_do_edit
$LN114@nk_do_edit:
	mov	edx, DWORD PTR _b$68[ebp]
	mov	DWORD PTR tv411[ebp], edx
$LN115@nk_do_edit:
	mov	eax, DWORD PTR tv411[ebp]
	mov	DWORD PTR _end$65[ebp], eax

; 15559:             text = nk_str_at_const(&edit->string, begin, &unicode, &glyph_len);

	lea	eax, DWORD PTR _glyph_len$71[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$70[ebp]
	push	ecx
	mov	edx, DWORD PTR _begin$66[ebp]
	push	edx
	mov	eax, DWORD PTR _edit$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_at_const
	add	esp, 16					; 00000010H
	mov	DWORD PTR _text$69[ebp], eax

; 15560:             if (edit->clip.copy)

	mov	eax, DWORD PTR _edit$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN57@nk_do_edit

; 15561:                 edit->clip.copy(edit->clip.userdata, text, end - begin);

	mov	eax, DWORD PTR _end$65[ebp]
	sub	eax, DWORD PTR _begin$66[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _text$69[ebp]
	push	ecx
	mov	edx, DWORD PTR _edit$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN57@nk_do_edit:

; 15562:             if (cut && !(flags & NK_EDIT_READ_ONLY)){

	cmp	DWORD PTR _cut$72[ebp], 0
	je	SHORT $LN56@nk_do_edit
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 1
	jne	SHORT $LN56@nk_do_edit

; 15563:                 nk_textedit_cut(edit);

	mov	eax, DWORD PTR _edit$[ebp]
	push	eax
	call	_nk_textedit_cut
	add	esp, 4

; 15564:                 cursor_follow = nk_true;

	mov	BYTE PTR _cursor_follow$[ebp], 1
$LN56@nk_do_edit:

; 15565:             }
; 15566:         }}
; 15567: 
; 15568:         /* paste handler */
; 15569:         {int paste = nk_input_is_key_pressed(in, NK_KEY_PASTE);

	push	9
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_key_pressed
	add	esp, 8
	mov	DWORD PTR _paste$64[ebp], eax

; 15570:         if (paste && (flags & NK_EDIT_CLIPBOARD) && edit->clip.paste) {

	cmp	DWORD PTR _paste$64[ebp], 0
	je	SHORT $LN55@nk_do_edit
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 64					; 00000040H
	je	SHORT $LN55@nk_do_edit
	mov	eax, DWORD PTR _edit$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN55@nk_do_edit

; 15571:             edit->clip.paste(edit->clip.userdata, edit);

	mov	esi, esp
	mov	eax, DWORD PTR _edit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 15572:             cursor_follow = nk_true;

	mov	BYTE PTR _cursor_follow$[ebp], 1
$LN55@nk_do_edit:

; 15573:         }}
; 15574: 
; 15575:         /* tab handler */
; 15576:         {int tab = nk_input_is_key_pressed(in, NK_KEY_TAB);

	push	5
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_key_pressed
	add	esp, 8
	mov	DWORD PTR _tab$63[ebp], eax

; 15577:         if (tab && (flags & NK_EDIT_ALLOW_TAB)) {

	cmp	DWORD PTR _tab$63[ebp], 0
	je	SHORT $LN54@nk_do_edit
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 8
	je	SHORT $LN54@nk_do_edit

; 15578:             nk_textedit_text(edit, "    ", 4);

	push	4
	push	OFFSET ??_C@_04PFOHOKJK@?5?5?5?5?$AA@
	mov	eax, DWORD PTR _edit$[ebp]
	push	eax
	call	_nk_textedit_text
	add	esp, 12					; 0000000cH

; 15579:             cursor_follow = nk_true;

	mov	BYTE PTR _cursor_follow$[ebp], 1
$LN54@nk_do_edit:

; 15580:         }}
; 15581:     }
; 15582: 
; 15583:     /* set widget state */
; 15584:     if (edit->active)

	mov	eax, DWORD PTR _edit$[ebp]
	movzx	ecx, BYTE PTR [eax+105]
	test	ecx, ecx
	je	SHORT $LN53@nk_do_edit

; 15585:         *state = NK_WIDGET_STATE_ACTIVE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 34			; 00000022H
	jmp	SHORT $LN50@nk_do_edit
$LN53@nk_do_edit:

; 15586:     else nk_widget_state_reset(state);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2
	je	SHORT $LN51@nk_do_edit
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 6
	jmp	SHORT $LN50@nk_do_edit
$LN51@nk_do_edit:
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 4
$LN50@nk_do_edit:

; 15587: 
; 15588:     if (is_hovered)

	movsx	eax, BYTE PTR _is_hovered$[ebp]
	test	eax, eax
	je	SHORT $LN49@nk_do_edit

; 15589:         *state |= NK_WIDGET_STATE_HOVERED;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 18					; 00000012H
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
$LN49@nk_do_edit:

; 15590: 
; 15591:     /* DRAW EDIT */
; 15592:     {const char *text = nk_str_get_const(&edit->string);

	mov	eax, DWORD PTR _edit$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_get_const
	add	esp, 4
	mov	DWORD PTR _text$62[ebp], eax

; 15593:     int len = nk_str_len_char(&edit->string);

	mov	eax, DWORD PTR _edit$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_len_char
	add	esp, 4
	mov	DWORD PTR _len$61[ebp], eax

; 15594: 
; 15595:     {/* select background colors/images  */
; 15596:     const struct nk_style_item *background;
; 15597:     if (*state & NK_WIDGET_STATE_ACTIVED)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 32					; 00000020H
	je	SHORT $LN48@nk_do_edit

; 15598:         background = &style->active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _background$60[ebp], eax
	jmp	SHORT $LN45@nk_do_edit
$LN48@nk_do_edit:

; 15599:     else if (*state & NK_WIDGET_STATE_HOVER)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 16					; 00000010H
	je	SHORT $LN46@nk_do_edit

; 15600:         background = &style->hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _background$60[ebp], eax
	jmp	SHORT $LN45@nk_do_edit
$LN46@nk_do_edit:

; 15601:     else background = &style->normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	DWORD PTR _background$60[ebp], eax
$LN45@nk_do_edit:

; 15602: 
; 15603:     /* draw background frame */
; 15604:     if (background->type == NK_STYLE_ITEM_COLOR) {

	mov	eax, DWORD PTR _background$60[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN44@nk_do_edit

; 15605:         nk_stroke_rect(out, bounds, style->rounding, style->border, style->border_color);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+540]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+544]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_stroke_rect
	add	esp, 32					; 00000020H

; 15606:         nk_fill_rect(out, bounds, style->rounding, background->data.color);

	mov	eax, DWORD PTR _background$60[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+544]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH
	jmp	SHORT $LN43@nk_do_edit
$LN44@nk_do_edit:

; 15607:     } else nk_draw_image(out, bounds, &background->data.image, nk_white);}

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _background$60[ebp]
	add	ecx, 4
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_draw_image
	add	esp, 28					; 0000001cH
$LN43@nk_do_edit:

; 15608: 
; 15609:     area.w = NK_MAX(0, area.w - style->cursor_size);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _area$[ebp+8]
	subss	xmm0, DWORD PTR [eax+548]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN116@nk_do_edit
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _area$[ebp+8]
	subss	xmm0, DWORD PTR [ecx+548]
	movss	DWORD PTR tv500[ebp], xmm0
	jmp	SHORT $LN117@nk_do_edit
$LN116@nk_do_edit:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv500[ebp], xmm0
$LN117@nk_do_edit:
	movss	xmm0, DWORD PTR tv500[ebp]
	movss	DWORD PTR _area$[ebp+8], xmm0

; 15610:     if (edit->active)

	mov	eax, DWORD PTR _edit$[ebp]
	movzx	ecx, BYTE PTR [eax+105]
	test	ecx, ecx
	je	$LN42@nk_do_edit

; 15611:     {
; 15612:         int total_lines = 1;

	mov	DWORD PTR _total_lines$59[ebp], 1

; 15613:         struct nk_vec2 text_size = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _text_size$58[ebp], eax
	mov	DWORD PTR _text_size$58[ebp+4], edx

; 15614: 
; 15615:         /* text pointer positions */
; 15616:         const char *cursor_ptr = 0;

	mov	DWORD PTR _cursor_ptr$57[ebp], 0

; 15617:         const char *select_begin_ptr = 0;

	mov	DWORD PTR _select_begin_ptr$56[ebp], 0

; 15618:         const char *select_end_ptr = 0;

	mov	DWORD PTR _select_end_ptr$55[ebp], 0

; 15619: 
; 15620:         /* 2D pixel positions */
; 15621:         struct nk_vec2 cursor_pos = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _cursor_pos$54[ebp], eax
	mov	DWORD PTR _cursor_pos$54[ebp+4], edx

; 15622:         struct nk_vec2 selection_offset_start = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _selection_offset_start$53[ebp], eax
	mov	DWORD PTR _selection_offset_start$53[ebp+4], edx

; 15623:         struct nk_vec2 selection_offset_end = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _selection_offset_end$52[ebp], eax
	mov	DWORD PTR _selection_offset_end$52[ebp+4], edx

; 15624: 
; 15625:         int selection_begin = NK_MIN(edit->select_start, edit->select_end);

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	jge	SHORT $LN118@nk_do_edit
	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR tv521[ebp], ecx
	jmp	SHORT $LN119@nk_do_edit
$LN118@nk_do_edit:
	mov	edx, DWORD PTR _edit$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR tv521[ebp], eax
$LN119@nk_do_edit:
	mov	ecx, DWORD PTR tv521[ebp]
	mov	DWORD PTR _selection_begin$51[ebp], ecx

; 15626:         int selection_end = NK_MAX(edit->select_start, edit->select_end);

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	jge	SHORT $LN120@nk_do_edit
	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR tv527[ebp], ecx
	jmp	SHORT $LN121@nk_do_edit
$LN120@nk_do_edit:
	mov	edx, DWORD PTR _edit$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	DWORD PTR tv527[ebp], eax
$LN121@nk_do_edit:
	mov	ecx, DWORD PTR tv527[ebp]
	mov	DWORD PTR _selection_end$50[ebp], ecx

; 15627: 
; 15628:         /* calculate total line count + total space + cursor/selection position */
; 15629:         float line_width = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _line_width$49[ebp], xmm0

; 15630:         if (text && len)

	cmp	DWORD PTR _text$62[ebp], 0
	je	$LN34@nk_do_edit
	cmp	DWORD PTR _len$61[ebp], 0
	je	$LN34@nk_do_edit

; 15631:         {
; 15632:             /* utf8 encoding */
; 15633:             float glyph_width;
; 15634:             int glyph_len = 0;

	mov	DWORD PTR _glyph_len$47[ebp], 0

; 15635:             nk_rune unicode = 0;

	mov	DWORD PTR _unicode$46[ebp], 0

; 15636:             int text_len = 0;

	mov	DWORD PTR _text_len$45[ebp], 0

; 15637:             int glyphs = 0;

	mov	DWORD PTR _glyphs$44[ebp], 0

; 15638:             int row_begin = 0;

	mov	DWORD PTR _row_begin$43[ebp], 0

; 15639: 
; 15640:             glyph_len = nk_utf_decode(text, &unicode, len);

	mov	eax, DWORD PTR _len$61[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$46[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$62[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$47[ebp], eax

; 15641:             glyph_width = font->width(font->userdata, font->height, text, glyph_len);

	mov	esi, esp
	mov	eax, DWORD PTR _glyph_len$47[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$62[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _glyph_width$48[ebp]

; 15642:             line_width = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _line_width$49[ebp], xmm0
$LN136@nk_do_edit:

; 15643: 
; 15644:             /* iterate all lines */
; 15645:             while ((text_len < len) && glyph_len)

	mov	eax, DWORD PTR _text_len$45[ebp]
	cmp	eax, DWORD PTR _len$61[ebp]
	jge	$LN39@nk_do_edit
	cmp	DWORD PTR _glyph_len$47[ebp], 0
	je	$LN39@nk_do_edit

; 15646:             {
; 15647:                 /* set cursor 2D position and line */
; 15648:                 if (!cursor_ptr && glyphs == edit->cursor)

	cmp	DWORD PTR _cursor_ptr$57[ebp], 0
	jne	$LN38@nk_do_edit
	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _glyphs$44[ebp]
	cmp	ecx, DWORD PTR [eax+88]
	jne	$LN38@nk_do_edit

; 15649:                 {
; 15650:                     int glyph_offset;
; 15651:                     struct nk_vec2 out_offset;
; 15652:                     struct nk_vec2 row_size;
; 15653:                     const char *remaining;
; 15654: 
; 15655:                     /* calculate 2d position */
; 15656:                     cursor_pos.y = (float)(total_lines-1) * row_height;

	mov	eax, DWORD PTR _total_lines$59[ebp]
	sub	eax, 1
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR _cursor_pos$54[ebp+4], xmm0

; 15657:                     row_size = nk_text_calculate_text_bounds(font, text+row_begin,
; 15658:                                 text_len-row_begin, row_height, &remaining,
; 15659:                                 &out_offset, &glyph_offset, NK_STOP_ON_NEW_LINE);

	push	1
	lea	eax, DWORD PTR _glyph_offset$42[ebp]
	push	eax
	lea	ecx, DWORD PTR _out_offset$41[ebp]
	push	ecx
	lea	edx, DWORD PTR _remaining$39[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _text_len$45[ebp]
	sub	eax, DWORD PTR _row_begin$43[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$62[ebp]
	add	ecx, DWORD PTR _row_begin$43[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	edx
	call	_nk_text_calculate_text_bounds
	add	esp, 32					; 00000020H
	mov	DWORD PTR _row_size$40[ebp], eax
	mov	DWORD PTR _row_size$40[ebp+4], edx

; 15660:                     cursor_pos.x = row_size.x;

	movss	xmm0, DWORD PTR _row_size$40[ebp]
	movss	DWORD PTR _cursor_pos$54[ebp], xmm0

; 15661:                     cursor_ptr = text + text_len;

	mov	eax, DWORD PTR _text$62[ebp]
	add	eax, DWORD PTR _text_len$45[ebp]
	mov	DWORD PTR _cursor_ptr$57[ebp], eax
$LN38@nk_do_edit:

; 15662:                 }
; 15663: 
; 15664:                 /* set start selection 2D position and line */
; 15665:                 if (!select_begin_ptr && edit->select_start != edit->select_end &&
; 15666:                     glyphs == selection_begin)

	cmp	DWORD PTR _select_begin_ptr$56[ebp], 0
	jne	$LN37@nk_do_edit
	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	je	$LN37@nk_do_edit
	mov	eax, DWORD PTR _glyphs$44[ebp]
	cmp	eax, DWORD PTR _selection_begin$51[ebp]
	jne	$LN37@nk_do_edit

; 15667:                 {
; 15668:                     int glyph_offset;
; 15669:                     struct nk_vec2 out_offset;
; 15670:                     struct nk_vec2 row_size;
; 15671:                     const char *remaining;
; 15672: 
; 15673:                     /* calculate 2d position */
; 15674:                     selection_offset_start.y = (float)(NK_MAX(total_lines-1,0)) * row_height;

	mov	eax, DWORD PTR _total_lines$59[ebp]
	sub	eax, 1
	jns	SHORT $LN122@nk_do_edit
	mov	DWORD PTR tv602[ebp], 0
	jmp	SHORT $LN123@nk_do_edit
$LN122@nk_do_edit:
	mov	ecx, DWORD PTR _total_lines$59[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv602[ebp], ecx
$LN123@nk_do_edit:
	cvtsi2ss xmm0, DWORD PTR tv602[ebp]
	mulss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR _selection_offset_start$53[ebp+4], xmm0

; 15675:                     row_size = nk_text_calculate_text_bounds(font, text+row_begin,
; 15676:                                 text_len-row_begin, row_height, &remaining,
; 15677:                                 &out_offset, &glyph_offset, NK_STOP_ON_NEW_LINE);

	push	1
	lea	eax, DWORD PTR _glyph_offset$38[ebp]
	push	eax
	lea	ecx, DWORD PTR _out_offset$37[ebp]
	push	ecx
	lea	edx, DWORD PTR _remaining$35[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _text_len$45[ebp]
	sub	eax, DWORD PTR _row_begin$43[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$62[ebp]
	add	ecx, DWORD PTR _row_begin$43[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	edx
	call	_nk_text_calculate_text_bounds
	add	esp, 32					; 00000020H
	mov	DWORD PTR _row_size$36[ebp], eax
	mov	DWORD PTR _row_size$36[ebp+4], edx

; 15678:                     selection_offset_start.x = row_size.x;

	movss	xmm0, DWORD PTR _row_size$36[ebp]
	movss	DWORD PTR _selection_offset_start$53[ebp], xmm0

; 15679:                     select_begin_ptr = text + text_len;

	mov	eax, DWORD PTR _text$62[ebp]
	add	eax, DWORD PTR _text_len$45[ebp]
	mov	DWORD PTR _select_begin_ptr$56[ebp], eax
$LN37@nk_do_edit:

; 15680:                 }
; 15681: 
; 15682:                 /* set end selection 2D position and line */
; 15683:                 if (!select_end_ptr && edit->select_start != edit->select_end &&
; 15684:                     glyphs == selection_end)

	cmp	DWORD PTR _select_end_ptr$55[ebp], 0
	jne	$LN36@nk_do_edit
	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	je	$LN36@nk_do_edit
	mov	eax, DWORD PTR _glyphs$44[ebp]
	cmp	eax, DWORD PTR _selection_end$50[ebp]
	jne	$LN36@nk_do_edit

; 15685:                 {
; 15686:                     int glyph_offset;
; 15687:                     struct nk_vec2 out_offset;
; 15688:                     struct nk_vec2 row_size;
; 15689:                     const char *remaining;
; 15690: 
; 15691:                     /* calculate 2d position */
; 15692:                     selection_offset_end.y = (float)(total_lines-1) * row_height;

	mov	eax, DWORD PTR _total_lines$59[ebp]
	sub	eax, 1
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR _selection_offset_end$52[ebp+4], xmm0

; 15693:                     row_size = nk_text_calculate_text_bounds(font, text+row_begin,
; 15694:                                 text_len-row_begin, row_height, &remaining,
; 15695:                                 &out_offset, &glyph_offset, NK_STOP_ON_NEW_LINE);

	push	1
	lea	eax, DWORD PTR _glyph_offset$34[ebp]
	push	eax
	lea	ecx, DWORD PTR _out_offset$33[ebp]
	push	ecx
	lea	edx, DWORD PTR _remaining$31[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _text_len$45[ebp]
	sub	eax, DWORD PTR _row_begin$43[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$62[ebp]
	add	ecx, DWORD PTR _row_begin$43[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	edx
	call	_nk_text_calculate_text_bounds
	add	esp, 32					; 00000020H
	mov	DWORD PTR _row_size$32[ebp], eax
	mov	DWORD PTR _row_size$32[ebp+4], edx

; 15696:                     selection_offset_end.x = row_size.x;

	movss	xmm0, DWORD PTR _row_size$32[ebp]
	movss	DWORD PTR _selection_offset_end$52[ebp], xmm0

; 15697:                     select_end_ptr = text + text_len;

	mov	eax, DWORD PTR _text$62[ebp]
	add	eax, DWORD PTR _text_len$45[ebp]
	mov	DWORD PTR _select_end_ptr$55[ebp], eax
$LN36@nk_do_edit:

; 15698:                 }
; 15699:                 if (unicode == '\n') {

	cmp	DWORD PTR _unicode$46[ebp], 10		; 0000000aH
	jne	$LN35@nk_do_edit

; 15700:                     text_size.x = NK_MAX(text_size.x, line_width);

	movss	xmm0, DWORD PTR _line_width$49[ebp]
	comiss	xmm0, DWORD PTR _text_size$58[ebp]
	jbe	SHORT $LN124@nk_do_edit
	movss	xmm0, DWORD PTR _line_width$49[ebp]
	movss	DWORD PTR tv639[ebp], xmm0
	jmp	SHORT $LN125@nk_do_edit
$LN124@nk_do_edit:
	movss	xmm0, DWORD PTR _text_size$58[ebp]
	movss	DWORD PTR tv639[ebp], xmm0
$LN125@nk_do_edit:
	movss	xmm0, DWORD PTR tv639[ebp]
	movss	DWORD PTR _text_size$58[ebp], xmm0

; 15701:                     total_lines++;

	mov	eax, DWORD PTR _total_lines$59[ebp]
	add	eax, 1
	mov	DWORD PTR _total_lines$59[ebp], eax

; 15702:                     line_width = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _line_width$49[ebp], xmm0

; 15703:                     text_len++;

	mov	eax, DWORD PTR _text_len$45[ebp]
	add	eax, 1
	mov	DWORD PTR _text_len$45[ebp], eax

; 15704:                     glyphs++;

	mov	eax, DWORD PTR _glyphs$44[ebp]
	add	eax, 1
	mov	DWORD PTR _glyphs$44[ebp], eax

; 15705:                     row_begin = text_len;

	mov	eax, DWORD PTR _text_len$45[ebp]
	mov	DWORD PTR _row_begin$43[ebp], eax

; 15706:                     glyph_len = nk_utf_decode(text + text_len, &unicode, len-text_len);

	mov	eax, DWORD PTR _len$61[ebp]
	sub	eax, DWORD PTR _text_len$45[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$46[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$62[ebp]
	add	edx, DWORD PTR _text_len$45[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$47[ebp], eax

; 15707:                     glyph_width = font->width(font->userdata, font->height, text+text_len, glyph_len);

	mov	esi, esp
	mov	eax, DWORD PTR _glyph_len$47[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$62[ebp]
	add	ecx, DWORD PTR _text_len$45[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _glyph_width$48[ebp]

; 15708:                     continue;

	jmp	$LN136@nk_do_edit
$LN35@nk_do_edit:

; 15709:                 }
; 15710: 
; 15711:                 glyphs++;

	mov	eax, DWORD PTR _glyphs$44[ebp]
	add	eax, 1
	mov	DWORD PTR _glyphs$44[ebp], eax

; 15712:                 text_len += glyph_len;

	mov	eax, DWORD PTR _text_len$45[ebp]
	add	eax, DWORD PTR _glyph_len$47[ebp]
	mov	DWORD PTR _text_len$45[ebp], eax

; 15713:                 line_width += (float)glyph_width;

	movss	xmm0, DWORD PTR _line_width$49[ebp]
	addss	xmm0, DWORD PTR _glyph_width$48[ebp]
	movss	DWORD PTR _line_width$49[ebp], xmm0

; 15714: 
; 15715:                 glyph_len = nk_utf_decode(text + text_len, &unicode, len-text_len);

	mov	eax, DWORD PTR _len$61[ebp]
	sub	eax, DWORD PTR _text_len$45[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$46[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$62[ebp]
	add	edx, DWORD PTR _text_len$45[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$47[ebp], eax

; 15716:                 glyph_width = font->width(font->userdata, font->height,
; 15717:                     text+text_len, glyph_len);

	mov	esi, esp
	mov	eax, DWORD PTR _glyph_len$47[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$62[ebp]
	add	ecx, DWORD PTR _text_len$45[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _glyph_width$48[ebp]

; 15718:                 continue;

	jmp	$LN136@nk_do_edit

; 15719:             }

	jmp	$LN136@nk_do_edit
$LN39@nk_do_edit:

; 15720:             text_size.y = (float)total_lines * row_height;

	cvtsi2ss xmm0, DWORD PTR _total_lines$59[ebp]
	mulss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR _text_size$58[ebp+4], xmm0

; 15721: 
; 15722:             /* handle case when cursor is at end of text buffer */
; 15723:             if (!cursor_ptr && edit->cursor == edit->string.len) {

	cmp	DWORD PTR _cursor_ptr$57[ebp], 0
	jne	SHORT $LN34@nk_do_edit
	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [eax+88]
	cmp	edx, DWORD PTR [ecx+72]
	jne	SHORT $LN34@nk_do_edit

; 15724:                 cursor_pos.x = line_width;

	movss	xmm0, DWORD PTR _line_width$49[ebp]
	movss	DWORD PTR _cursor_pos$54[ebp], xmm0

; 15725:                 cursor_pos.y = text_size.y - row_height;

	movss	xmm0, DWORD PTR _text_size$58[ebp+4]
	subss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR _cursor_pos$54[ebp+4], xmm0
$LN34@nk_do_edit:

; 15726:             }
; 15727:         }
; 15728:         {
; 15729:             /* scrollbar */
; 15730:             if (cursor_follow)

	movsx	eax, BYTE PTR _cursor_follow$[ebp]
	test	eax, eax
	je	$LN25@nk_do_edit

; 15731:             {
; 15732:                 /* update scrollbar to follow cursor */
; 15733:                 if (!(flags & NK_EDIT_NO_HORIZONTAL_SCROLL)) {

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 256				; 00000100H
	jne	$LN32@nk_do_edit

; 15734:                     /* horizontal scroll */
; 15735:                     const float scroll_increment = area.w * 0.25f;

	movss	xmm0, DWORD PTR _area$[ebp+8]
	mulss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR _scroll_increment$30[ebp], xmm0

; 15736:                     if (cursor_pos.x < edit->scrollbar.x)

	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR [eax+80]
	comiss	xmm0, DWORD PTR _cursor_pos$54[ebp]
	jbe	SHORT $LN31@nk_do_edit

; 15737:                         edit->scrollbar.x = (float)(int)NK_MAX(0.0f, cursor_pos.x - scroll_increment);

	movss	xmm0, DWORD PTR _cursor_pos$54[ebp]
	subss	xmm0, DWORD PTR _scroll_increment$30[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN126@nk_do_edit
	movss	xmm0, DWORD PTR _cursor_pos$54[ebp]
	subss	xmm0, DWORD PTR _scroll_increment$30[ebp]
	movss	DWORD PTR tv696[ebp], xmm0
	jmp	SHORT $LN127@nk_do_edit
$LN126@nk_do_edit:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv696[ebp], xmm0
$LN127@nk_do_edit:
	cvttss2si eax, DWORD PTR tv696[ebp]
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _edit$[ebp]
	movss	DWORD PTR [ecx+80], xmm0
$LN31@nk_do_edit:

; 15738:                     if (cursor_pos.x >= edit->scrollbar.x + area.w)

	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR [eax+80]
	addss	xmm0, DWORD PTR _area$[ebp+8]
	movss	xmm1, DWORD PTR _cursor_pos$54[ebp]
	comiss	xmm1, xmm0
	jb	SHORT $LN30@nk_do_edit

; 15739:                         edit->scrollbar.x = (float)(int)NK_MAX(0.0f, cursor_pos.x);

	movss	xmm0, DWORD PTR _cursor_pos$54[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN128@nk_do_edit
	movss	xmm0, DWORD PTR _cursor_pos$54[ebp]
	movss	DWORD PTR tv736[ebp], xmm0
	jmp	SHORT $LN129@nk_do_edit
$LN128@nk_do_edit:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv736[ebp], xmm0
$LN129@nk_do_edit:
	cvttss2si eax, DWORD PTR tv736[ebp]
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _edit$[ebp]
	movss	DWORD PTR [ecx+80], xmm0
$LN30@nk_do_edit:

; 15740:                 } else edit->scrollbar.x = 0;

	jmp	SHORT $LN29@nk_do_edit
$LN32@nk_do_edit:
	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+80], xmm0
$LN29@nk_do_edit:

; 15741: 
; 15742:                 if (flags & NK_EDIT_MULTILINE) {

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 1024				; 00000400H
	je	$LN28@nk_do_edit

; 15743:                     /* vertical scroll */
; 15744:                     if (cursor_pos.y < edit->scrollbar.y)

	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR [eax+84]
	comiss	xmm0, DWORD PTR _cursor_pos$54[ebp+4]
	jbe	SHORT $LN27@nk_do_edit

; 15745:                         edit->scrollbar.y = NK_MAX(0.0f, cursor_pos.y - row_height);

	movss	xmm0, DWORD PTR _cursor_pos$54[ebp+4]
	subss	xmm0, DWORD PTR _row_height$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN130@nk_do_edit
	movss	xmm0, DWORD PTR _cursor_pos$54[ebp+4]
	subss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR tv750[ebp], xmm0
	jmp	SHORT $LN131@nk_do_edit
$LN130@nk_do_edit:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv750[ebp], xmm0
$LN131@nk_do_edit:
	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR tv750[ebp]
	movss	DWORD PTR [eax+84], xmm0
$LN27@nk_do_edit:

; 15746:                     if (cursor_pos.y >= edit->scrollbar.y + area.h)

	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR [eax+84]
	addss	xmm0, DWORD PTR _area$[ebp+12]
	movss	xmm1, DWORD PTR _cursor_pos$54[ebp+4]
	comiss	xmm1, xmm0
	jb	SHORT $LN26@nk_do_edit

; 15747:                         edit->scrollbar.y = edit->scrollbar.y + row_height;

	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR [eax+84]
	addss	xmm0, DWORD PTR _row_height$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	movss	DWORD PTR [ecx+84], xmm0
$LN26@nk_do_edit:

; 15748:                 } else edit->scrollbar.y = 0;

	jmp	SHORT $LN25@nk_do_edit
$LN28@nk_do_edit:
	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+84], xmm0
$LN25@nk_do_edit:

; 15749:             }
; 15750: 
; 15751:             /* scrollbar widget */
; 15752:             if (flags & NK_EDIT_MULTILINE)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 1024				; 00000400H
	je	$LN24@nk_do_edit

; 15753:             {
; 15754:                 nk_flags ws;
; 15755:                 struct nk_rect scroll;
; 15756:                 float scroll_target;
; 15757:                 float scroll_offset;
; 15758:                 float scroll_step;
; 15759:                 float scroll_inc;
; 15760: 
; 15761:                 scroll = area;

	mov	eax, DWORD PTR _area$[ebp]
	mov	DWORD PTR _scroll$28[ebp], eax
	mov	ecx, DWORD PTR _area$[ebp+4]
	mov	DWORD PTR _scroll$28[ebp+4], ecx
	mov	edx, DWORD PTR _area$[ebp+8]
	mov	DWORD PTR _scroll$28[ebp+8], edx
	mov	eax, DWORD PTR _area$[ebp+12]
	mov	DWORD PTR _scroll$28[ebp+12], eax

; 15762:                 scroll.x = (bounds.x + bounds.w - style->border) - style->scrollbar_size.x;

	movss	xmm0, DWORD PTR _bounds$[ebp]
	addss	xmm0, DWORD PTR _bounds$[ebp+8]
	mov	eax, DWORD PTR _style$[ebp]
	subss	xmm0, DWORD PTR [eax+540]
	mov	ecx, DWORD PTR _style$[ebp]
	subss	xmm0, DWORD PTR [ecx+552]
	movss	DWORD PTR _scroll$28[ebp], xmm0

; 15763:                 scroll.w = style->scrollbar_size.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR [eax+552]
	movss	DWORD PTR _scroll$28[ebp+8], xmm0

; 15764: 
; 15765:                 scroll_offset = edit->scrollbar.y;

	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR [eax+84]
	movss	DWORD PTR _scroll_offset$26[ebp], xmm0

; 15766:                 scroll_step = scroll.h * 0.10f;

	movss	xmm0, DWORD PTR _scroll$28[ebp+12]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _scroll_step$25[ebp], xmm0

; 15767:                 scroll_inc = scroll.h * 0.01f;

	movss	xmm0, DWORD PTR _scroll$28[ebp+12]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR _scroll_inc$24[ebp], xmm0

; 15768:                 scroll_target = text_size.y;

	movss	xmm0, DWORD PTR _text_size$58[ebp+4]
	movss	DWORD PTR _scroll_target$27[ebp], xmm0

; 15769:                 edit->scrollbar.y = nk_do_scrollbarv(&ws, out, scroll, 0,
; 15770:                         scroll_offset, scroll_target, scroll_step, scroll_inc,
; 15771:                         &style->scrollbar, in, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _scroll_inc$24[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scroll_step$25[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scroll_target$27[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scroll_offset$26[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _scroll$28[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _scroll$28[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _scroll$28[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _scroll$28[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ws$29[ebp]
	push	ecx
	call	_nk_do_scrollbarv
	add	esp, 56					; 00000038H
	mov	edx, DWORD PTR _edit$[ebp]
	fstp	DWORD PTR [edx+84]
$LN24@nk_do_edit:

; 15772:             }
; 15773:         }
; 15774: 
; 15775:         /* draw text */
; 15776:         {struct nk_color background_color;
; 15777:         struct nk_color text_color;
; 15778:         struct nk_color sel_background_color;
; 15779:         struct nk_color sel_text_color;
; 15780:         struct nk_color cursor_color;
; 15781:         struct nk_color cursor_text_color;
; 15782:         const struct nk_style_item *background;
; 15783:         nk_push_scissor(out, clip);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _clip$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _clip$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _clip$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _clip$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_push_scissor
	add	esp, 20					; 00000014H

; 15784: 
; 15785:         /* select correct colors to draw */
; 15786:         if (*state & NK_WIDGET_STATE_ACTIVED) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 32					; 00000020H
	je	SHORT $LN23@nk_do_edit

; 15787:             background = &style->active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _background$17[ebp], eax

; 15788:             text_color = style->text_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	DWORD PTR _text_color$22[ebp], ecx

; 15789:             sel_text_color = style->selected_text_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+536]
	mov	DWORD PTR _sel_text_color$20[ebp], ecx

; 15790:             sel_background_color = style->selected_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	DWORD PTR _sel_background_color$21[ebp], ecx

; 15791:             cursor_color = style->cursor_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+500]
	mov	DWORD PTR _cursor_color$19[ebp], ecx

; 15792:             cursor_text_color = style->cursor_text_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+508]
	mov	DWORD PTR _cursor_text_color$18[ebp], ecx
	jmp	$LN20@nk_do_edit
$LN23@nk_do_edit:

; 15793:         } else if (*state & NK_WIDGET_STATE_HOVER) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 16					; 00000010H
	je	SHORT $LN21@nk_do_edit

; 15794:             background = &style->hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _background$17[ebp], eax

; 15795:             text_color = style->text_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	DWORD PTR _text_color$22[ebp], ecx

; 15796:             sel_text_color = style->selected_text_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+536]
	mov	DWORD PTR _sel_text_color$20[ebp], ecx

; 15797:             sel_background_color = style->selected_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	DWORD PTR _sel_background_color$21[ebp], ecx

; 15798:             cursor_text_color = style->cursor_text_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+508]
	mov	DWORD PTR _cursor_text_color$18[ebp], ecx

; 15799:             cursor_color = style->cursor_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+500]
	mov	DWORD PTR _cursor_color$19[ebp], ecx

; 15800:         } else {

	jmp	SHORT $LN20@nk_do_edit
$LN21@nk_do_edit:

; 15801:             background = &style->normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	DWORD PTR _background$17[ebp], eax

; 15802:             text_color = style->text_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+512]
	mov	DWORD PTR _text_color$22[ebp], ecx

; 15803:             sel_text_color = style->selected_text_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	DWORD PTR _sel_text_color$20[ebp], ecx

; 15804:             sel_background_color = style->selected_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+524]
	mov	DWORD PTR _sel_background_color$21[ebp], ecx

; 15805:             cursor_color = style->cursor_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+496]
	mov	DWORD PTR _cursor_color$19[ebp], ecx

; 15806:             cursor_text_color = style->cursor_text_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+504]
	mov	DWORD PTR _cursor_text_color$18[ebp], ecx
$LN20@nk_do_edit:

; 15807:         }
; 15808:         if (background->type == NK_STYLE_ITEM_IMAGE)

	mov	eax, DWORD PTR _background$17[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN19@nk_do_edit

; 15809:             background_color = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	DWORD PTR _background_color$23[ebp], eax
	jmp	SHORT $LN18@nk_do_edit
$LN19@nk_do_edit:

; 15810:         else background_color = background->data.color;

	mov	eax, DWORD PTR _background$17[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _background_color$23[ebp], ecx
$LN18@nk_do_edit:

; 15811: 
; 15812: 
; 15813:         if (edit->select_start == edit->select_end) {

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	jne	$LN17@nk_do_edit

; 15814:             /* no selection so just draw the complete text */
; 15815:             const char *begin = nk_str_get_const(&edit->string);

	mov	eax, DWORD PTR _edit$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_get_const
	add	esp, 4
	mov	DWORD PTR _begin$16[ebp], eax

; 15816:             int l = nk_str_len_char(&edit->string);

	mov	eax, DWORD PTR _edit$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_len_char
	add	esp, 4
	mov	DWORD PTR _l$15[ebp], eax

; 15817:             nk_edit_draw_text(out, style, area.x - edit->scrollbar.x,
; 15818:                 area.y - edit->scrollbar.y, 0, begin, l, row_height, font,
; 15819:                 background_color, text_color, nk_false);

	push	0
	mov	eax, DWORD PTR _text_color$22[ebp]
	push	eax
	mov	ecx, DWORD PTR _background_color$23[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _l$15[ebp]
	push	eax
	mov	ecx, DWORD PTR _begin$16[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR _area$[ebp+4]
	subss	xmm0, DWORD PTR [edx+84]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR _area$[ebp]
	subss	xmm0, DWORD PTR [eax+80]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _style$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_edit_draw_text
	add	esp, 48					; 00000030H

; 15820:         } else {

	jmp	$LN12@nk_do_edit
$LN17@nk_do_edit:

; 15821:             /* edit has selection so draw 1-3 text chunks */
; 15822:             if (edit->select_start != edit->select_end && selection_begin > 0){

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	je	$LN15@nk_do_edit
	cmp	DWORD PTR _selection_begin$51[ebp], 0
	jle	$LN15@nk_do_edit

; 15823:                 /* draw unselected text before selection */
; 15824:                 const char *begin = nk_str_get_const(&edit->string);

	mov	eax, DWORD PTR _edit$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_get_const
	add	esp, 4
	mov	DWORD PTR _begin$14[ebp], eax

; 15825:                 NK_ASSERT(select_begin_ptr);

	cmp	DWORD PTR _select_begin_ptr$56[ebp], 0
	jne	SHORT $LN132@nk_do_edit
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_edit@@9@9@ddf8d5d8
	add	eax, 394				; 0000018aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CC@DELOPEMK@?$AAs?$AAe?$AAl?$AAe?$AAc?$AAt?$AA_?$AAb?$AAe?$AAg?$AAi?$AAn?$AA_?$AAp?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN132@nk_do_edit:

; 15826:                 nk_edit_draw_text(out, style, area.x - edit->scrollbar.x,
; 15827:                     area.y - edit->scrollbar.y, 0, begin, (int)(select_begin_ptr - begin),
; 15828:                     row_height, font, background_color, text_color, nk_false);

	push	0
	mov	eax, DWORD PTR _text_color$22[ebp]
	push	eax
	mov	ecx, DWORD PTR _background_color$23[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _select_begin_ptr$56[ebp]
	sub	eax, DWORD PTR _begin$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _begin$14[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR _area$[ebp+4]
	subss	xmm0, DWORD PTR [edx+84]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR _area$[ebp]
	subss	xmm0, DWORD PTR [eax+80]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _style$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_edit_draw_text
	add	esp, 48					; 00000030H
$LN15@nk_do_edit:

; 15829:             }
; 15830:             if (edit->select_start != edit->select_end) {

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	je	$LN14@nk_do_edit

; 15831:                 /* draw selected text */
; 15832:                 NK_ASSERT(select_begin_ptr);

	cmp	DWORD PTR _select_begin_ptr$56[ebp], 0
	jne	SHORT $LN133@nk_do_edit
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_edit@@9@9@ddf8d5d8
	add	eax, 401				; 00000191H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CC@DELOPEMK@?$AAs?$AAe?$AAl?$AAe?$AAc?$AAt?$AA_?$AAb?$AAe?$AAg?$AAi?$AAn?$AA_?$AAp?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN133@nk_do_edit:

; 15833:                 if (!select_end_ptr) {

	cmp	DWORD PTR _select_end_ptr$55[ebp], 0
	jne	SHORT $LN13@nk_do_edit

; 15834:                     const char *begin = nk_str_get_const(&edit->string);

	mov	eax, DWORD PTR _edit$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_get_const
	add	esp, 4
	mov	DWORD PTR _begin$13[ebp], eax

; 15835:                     select_end_ptr = begin + nk_str_len_char(&edit->string);

	mov	eax, DWORD PTR _edit$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_len_char
	add	esp, 4
	add	eax, DWORD PTR _begin$13[ebp]
	mov	DWORD PTR _select_end_ptr$55[ebp], eax
$LN13@nk_do_edit:

; 15836:                 }
; 15837:                 nk_edit_draw_text(out, style,
; 15838:                     area.x - edit->scrollbar.x,
; 15839:                     area.y + selection_offset_start.y - edit->scrollbar.y,
; 15840:                     selection_offset_start.x,
; 15841:                     select_begin_ptr, (int)(select_end_ptr - select_begin_ptr),
; 15842:                     row_height, font, sel_background_color, sel_text_color, nk_true);

	push	1
	mov	eax, DWORD PTR _sel_text_color$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _sel_background_color$21[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _select_end_ptr$55[ebp]
	sub	eax, DWORD PTR _select_begin_ptr$56[ebp]
	push	eax
	mov	ecx, DWORD PTR _select_begin_ptr$56[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _selection_offset_start$53[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _area$[ebp+4]
	addss	xmm0, DWORD PTR _selection_offset_start$53[ebp+4]
	mov	edx, DWORD PTR _edit$[ebp]
	subss	xmm0, DWORD PTR [edx+84]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR _area$[ebp]
	subss	xmm0, DWORD PTR [eax+80]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _style$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_edit_draw_text
	add	esp, 48					; 00000030H
$LN14@nk_do_edit:

; 15843:             }
; 15844:             if ((edit->select_start != edit->select_end &&
; 15845:                 selection_end < edit->string.len))

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	je	$LN12@nk_do_edit
	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _selection_end$50[ebp]
	cmp	ecx, DWORD PTR [eax+72]
	jge	$LN12@nk_do_edit

; 15846:             {
; 15847:                 /* draw unselected text after selected text */
; 15848:                 const char *begin = select_end_ptr;

	mov	eax, DWORD PTR _select_end_ptr$55[ebp]
	mov	DWORD PTR _begin$12[ebp], eax

; 15849:                 const char *end = nk_str_get_const(&edit->string) +
; 15850:                                     nk_str_len_char(&edit->string);

	mov	eax, DWORD PTR _edit$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_get_const
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _edit$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_nk_str_len_char
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _end$11[ebp], esi

; 15851:                 NK_ASSERT(select_end_ptr);

	cmp	DWORD PTR _select_end_ptr$55[ebp], 0
	jne	SHORT $LN134@nk_do_edit
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_edit@@9@9@ddf8d5d8
	add	eax, 420				; 000001a4H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BO@GIIBLKDM@?$AAs?$AAe?$AAl?$AAe?$AAc?$AAt?$AA_?$AAe?$AAn?$AAd?$AA_?$AAp?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN134@nk_do_edit:

; 15852:                 nk_edit_draw_text(out, style,
; 15853:                     area.x - edit->scrollbar.x,
; 15854:                     area.y + selection_offset_end.y - edit->scrollbar.y,
; 15855:                     selection_offset_end.x,
; 15856:                     begin, (int)(end - begin), row_height, font,
; 15857:                     background_color, text_color, nk_true);

	push	1
	mov	eax, DWORD PTR _text_color$22[ebp]
	push	eax
	mov	ecx, DWORD PTR _background_color$23[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _end$11[ebp]
	sub	eax, DWORD PTR _begin$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _begin$12[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _selection_offset_end$52[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _area$[ebp+4]
	addss	xmm0, DWORD PTR _selection_offset_end$52[ebp+4]
	mov	edx, DWORD PTR _edit$[ebp]
	subss	xmm0, DWORD PTR [edx+84]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR _area$[ebp]
	subss	xmm0, DWORD PTR [eax+80]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _style$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_edit_draw_text
	add	esp, 48					; 00000030H
$LN12@nk_do_edit:

; 15858:             }
; 15859:         }
; 15860: 
; 15861:         /* cursor */
; 15862:         if (edit->select_start == edit->select_end)

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	jne	$LN8@nk_do_edit

; 15863:         {
; 15864:             if (edit->cursor >= nk_str_len(&edit->string) ||
; 15865:                 (cursor_ptr && *cursor_ptr == '\n')) {

	mov	eax, DWORD PTR _edit$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_len
	add	esp, 4
	mov	ecx, DWORD PTR _edit$[ebp]
	cmp	DWORD PTR [ecx+88], eax
	jge	SHORT $LN9@nk_do_edit
	cmp	DWORD PTR _cursor_ptr$57[ebp], 0
	je	$LN10@nk_do_edit
	mov	eax, DWORD PTR _cursor_ptr$57[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jne	$LN10@nk_do_edit
$LN9@nk_do_edit:

; 15866:                 /* draw cursor at end of line */
; 15867:                 struct nk_rect cursor;
; 15868:                 cursor.w = style->cursor_size;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR [eax+548]
	movss	DWORD PTR _cursor$10[ebp+8], xmm0

; 15869:                 cursor.h = font->height;

	mov	eax, DWORD PTR _font$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _cursor$10[ebp+12], xmm0

; 15870:                 cursor.x = area.x + cursor_pos.x - edit->scrollbar.x;

	movss	xmm0, DWORD PTR _area$[ebp]
	addss	xmm0, DWORD PTR _cursor_pos$54[ebp]
	mov	eax, DWORD PTR _edit$[ebp]
	subss	xmm0, DWORD PTR [eax+80]
	movss	DWORD PTR _cursor$10[ebp], xmm0

; 15871:                 cursor.y = area.y + cursor_pos.y + row_height/2.0f - cursor.h/2.0f;

	movss	xmm0, DWORD PTR _area$[ebp+4]
	addss	xmm0, DWORD PTR _cursor_pos$54[ebp+4]
	movss	xmm1, DWORD PTR _row_height$[ebp]
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _cursor$10[ebp+12]
	divss	xmm1, DWORD PTR __real@40000000
	subss	xmm0, xmm1
	movss	DWORD PTR _cursor$10[ebp+4], xmm0

; 15872:                 cursor.y -= edit->scrollbar.y;

	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR _cursor$10[ebp+4]
	subss	xmm0, DWORD PTR [eax+84]
	movss	DWORD PTR _cursor$10[ebp+4], xmm0

; 15873:                 nk_fill_rect(out, cursor, 0, cursor_color);

	mov	eax, DWORD PTR _cursor_color$19[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _cursor$10[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _cursor$10[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _cursor$10[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _cursor$10[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 15874:             } else {

	jmp	$LN8@nk_do_edit
$LN10@nk_do_edit:

; 15875:                 /* draw cursor inside text */
; 15876:                 int glyph_len;
; 15877:                 struct nk_rect label;
; 15878:                 struct nk_text txt;
; 15879: 
; 15880:                 nk_rune unicode;
; 15881:                 NK_ASSERT(cursor_ptr);

	cmp	DWORD PTR _cursor_ptr$57[ebp], 0
	jne	SHORT $LN135@nk_do_edit
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_edit@@9@9@ddf8d5d8
	add	eax, 450				; 000001c2H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BG@FFNHGOHN@?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA_?$AAp?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN135@nk_do_edit:

; 15882:                 glyph_len = nk_utf_decode(cursor_ptr, &unicode, 4);

	push	4
	lea	eax, DWORD PTR _unicode$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _cursor_ptr$57[ebp]
	push	ecx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$9[ebp], eax

; 15883: 
; 15884:                 label.x = area.x + cursor_pos.x - edit->scrollbar.x;

	movss	xmm0, DWORD PTR _area$[ebp]
	addss	xmm0, DWORD PTR _cursor_pos$54[ebp]
	mov	eax, DWORD PTR _edit$[ebp]
	subss	xmm0, DWORD PTR [eax+80]
	movss	DWORD PTR _label$8[ebp], xmm0

; 15885:                 label.y = area.y + cursor_pos.y - edit->scrollbar.y;

	movss	xmm0, DWORD PTR _area$[ebp+4]
	addss	xmm0, DWORD PTR _cursor_pos$54[ebp+4]
	mov	eax, DWORD PTR _edit$[ebp]
	subss	xmm0, DWORD PTR [eax+84]
	movss	DWORD PTR _label$8[ebp+4], xmm0

; 15886:                 label.w = font->width(font->userdata, font->height, cursor_ptr, glyph_len);

	mov	esi, esp
	mov	eax, DWORD PTR _glyph_len$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _cursor_ptr$57[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _label$8[ebp+8]

; 15887:                 label.h = row_height;

	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR _label$8[ebp+12], xmm0

; 15888: 
; 15889:                 txt.padding = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _txt$7[ebp], eax
	mov	DWORD PTR _txt$7[ebp+4], edx

; 15890:                 txt.background = cursor_color;;

	mov	eax, DWORD PTR _cursor_color$19[ebp]
	mov	DWORD PTR _txt$7[ebp+8], eax

; 15891:                 txt.text = cursor_text_color;

	mov	eax, DWORD PTR _cursor_text_color$18[ebp]
	mov	DWORD PTR _txt$7[ebp+12], eax

; 15892:                 nk_fill_rect(out, label, 0, cursor_color);

	mov	eax, DWORD PTR _cursor_color$19[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _label$8[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _label$8[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _label$8[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _label$8[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 15893:                 nk_widget_text(out, label, cursor_ptr, glyph_len, &txt, NK_TEXT_LEFT, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	17					; 00000011H
	lea	ecx, DWORD PTR _txt$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph_len$9[ebp]
	push	edx
	mov	eax, DWORD PTR _cursor_ptr$57[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _label$8[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _label$8[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _label$8[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _label$8[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_widget_text
	add	esp, 40					; 00000028H
$LN8@nk_do_edit:

; 15894:             }
; 15895:         }}
; 15896:     } else {

	jmp	$LN7@nk_do_edit
$LN42@nk_do_edit:

; 15897:         /* not active so just draw text */
; 15898:         int l = nk_str_len_char(&edit->string);

	mov	eax, DWORD PTR _edit$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_len_char
	add	esp, 4
	mov	DWORD PTR _l$5[ebp], eax

; 15899:         const char *begin = nk_str_get_const(&edit->string);

	mov	eax, DWORD PTR _edit$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_get_const
	add	esp, 4
	mov	DWORD PTR _begin$4[ebp], eax

; 15900: 
; 15901:         const struct nk_style_item *background;
; 15902:         struct nk_color background_color;
; 15903:         struct nk_color text_color;
; 15904:         nk_push_scissor(out, clip);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _clip$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _clip$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _clip$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _clip$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_push_scissor
	add	esp, 20					; 00000014H

; 15905:         if (*state & NK_WIDGET_STATE_ACTIVED) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 32					; 00000020H
	je	SHORT $LN6@nk_do_edit

; 15906:             background = &style->active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _background$3[ebp], eax

; 15907:             text_color = style->text_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	DWORD PTR _text_color$1[ebp], ecx
	jmp	SHORT $LN3@nk_do_edit
$LN6@nk_do_edit:

; 15908:         } else if (*state & NK_WIDGET_STATE_HOVER) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 16					; 00000010H
	je	SHORT $LN4@nk_do_edit

; 15909:             background = &style->hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _background$3[ebp], eax

; 15910:             text_color = style->text_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	DWORD PTR _text_color$1[ebp], ecx

; 15911:         } else {

	jmp	SHORT $LN3@nk_do_edit
$LN4@nk_do_edit:

; 15912:             background = &style->normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	DWORD PTR _background$3[ebp], eax

; 15913:             text_color = style->text_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+512]
	mov	DWORD PTR _text_color$1[ebp], ecx
$LN3@nk_do_edit:

; 15914:         }
; 15915:         if (background->type == NK_STYLE_ITEM_IMAGE)

	mov	eax, DWORD PTR _background$3[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN2@nk_do_edit

; 15916:             background_color = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	DWORD PTR _background_color$2[ebp], eax
	jmp	SHORT $LN1@nk_do_edit
$LN2@nk_do_edit:

; 15917:         else background_color = background->data.color;

	mov	eax, DWORD PTR _background$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _background_color$2[ebp], ecx
$LN1@nk_do_edit:

; 15918:         nk_edit_draw_text(out, style, area.x - edit->scrollbar.x,
; 15919:             area.y - edit->scrollbar.y, 0, begin, l, row_height, font,
; 15920:             background_color, text_color, nk_false);

	push	0
	mov	eax, DWORD PTR _text_color$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _background_color$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _l$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _begin$4[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR _area$[ebp+4]
	subss	xmm0, DWORD PTR [edx+84]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR _area$[ebp]
	subss	xmm0, DWORD PTR [eax+80]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _style$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_edit_draw_text
	add	esp, 48					; 00000030H
$LN7@nk_do_edit:

; 15921:     }
; 15922:     nk_push_scissor(out, old_clip);}

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _old_clip$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _old_clip$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _old_clip$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _old_clip$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_push_scissor
	add	esp, 20					; 00000014H

; 15923:     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN94@nk_do_edit:

; 15924: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN174@nk_do_edit
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1380				; 00000564H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN174@nk_do_edit:
	DD	36					; 00000024H
	DD	$LN173@nk_do_edit
$LN173@nk_do_edit:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN137@nk_do_edit
	DD	-120					; ffffff88H
	DD	16					; 00000010H
	DD	$LN138@nk_do_edit
	DD	-144					; ffffff70H
	DD	16					; 00000010H
	DD	$LN139@nk_do_edit
	DD	-252					; ffffff04H
	DD	4
	DD	$LN140@nk_do_edit
	DD	-264					; fffffef8H
	DD	4
	DD	$LN141@nk_do_edit
	DD	-412					; fffffe64H
	DD	8
	DD	$LN142@nk_do_edit
	DD	-464					; fffffe30H
	DD	8
	DD	$LN143@nk_do_edit
	DD	-480					; fffffe20H
	DD	8
	DD	$LN144@nk_do_edit
	DD	-496					; fffffe10H
	DD	8
	DD	$LN145@nk_do_edit
	DD	-568					; fffffdc8H
	DD	4
	DD	$LN146@nk_do_edit
	DD	-616					; fffffd98H
	DD	4
	DD	$LN147@nk_do_edit
	DD	-632					; fffffd88H
	DD	8
	DD	$LN148@nk_do_edit
	DD	-648					; fffffd78H
	DD	8
	DD	$LN149@nk_do_edit
	DD	-660					; fffffd6cH
	DD	4
	DD	$LN150@nk_do_edit
	DD	-672					; fffffd60H
	DD	4
	DD	$LN151@nk_do_edit
	DD	-688					; fffffd50H
	DD	8
	DD	$LN152@nk_do_edit
	DD	-704					; fffffd40H
	DD	8
	DD	$LN153@nk_do_edit
	DD	-716					; fffffd34H
	DD	4
	DD	$LN154@nk_do_edit
	DD	-728					; fffffd28H
	DD	4
	DD	$LN155@nk_do_edit
	DD	-744					; fffffd18H
	DD	8
	DD	$LN156@nk_do_edit
	DD	-760					; fffffd08H
	DD	8
	DD	$LN157@nk_do_edit
	DD	-772					; fffffcfcH
	DD	4
	DD	$LN158@nk_do_edit
	DD	-796					; fffffce4H
	DD	4
	DD	$LN159@nk_do_edit
	DD	-820					; fffffcccH
	DD	16					; 00000010H
	DD	$LN160@nk_do_edit
	DD	-880					; fffffc90H
	DD	4
	DD	$LN161@nk_do_edit
	DD	-892					; fffffc84H
	DD	4
	DD	$LN162@nk_do_edit
	DD	-904					; fffffc78H
	DD	4
	DD	$LN163@nk_do_edit
	DD	-916					; fffffc6cH
	DD	4
	DD	$LN164@nk_do_edit
	DD	-928					; fffffc60H
	DD	4
	DD	$LN165@nk_do_edit
	DD	-940					; fffffc54H
	DD	4
	DD	$LN166@nk_do_edit
	DD	-1048					; fffffbe8H
	DD	16					; 00000010H
	DD	$LN167@nk_do_edit
	DD	-1084					; fffffbc4H
	DD	16					; 00000010H
	DD	$LN168@nk_do_edit
	DD	-1108					; fffffbacH
	DD	16					; 00000010H
	DD	$LN169@nk_do_edit
	DD	-1120					; fffffba0H
	DD	4
	DD	$LN170@nk_do_edit
	DD	-1168					; fffffb70H
	DD	4
	DD	$LN171@nk_do_edit
	DD	-1180					; fffffb64H
	DD	4
	DD	$LN172@nk_do_edit
$LN172@nk_do_edit:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN171@nk_do_edit:
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN170@nk_do_edit:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN169@nk_do_edit:
	DB	116					; 00000074H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN168@nk_do_edit:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN167@nk_do_edit:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN166@nk_do_edit:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN165@nk_do_edit:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN164@nk_do_edit:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN163@nk_do_edit:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN162@nk_do_edit:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN161@nk_do_edit:
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN160@nk_do_edit:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	0
$LN159@nk_do_edit:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	0
$LN158@nk_do_edit:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN157@nk_do_edit:
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN156@nk_do_edit:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN155@nk_do_edit:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN154@nk_do_edit:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN153@nk_do_edit:
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN152@nk_do_edit:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN151@nk_do_edit:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN150@nk_do_edit:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN149@nk_do_edit:
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN148@nk_do_edit:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN147@nk_do_edit:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN146@nk_do_edit:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN145@nk_do_edit:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN144@nk_do_edit:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$LN143@nk_do_edit:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN142@nk_do_edit:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN141@nk_do_edit:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN140@nk_do_edit:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN139@nk_do_edit:
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	0
$LN138@nk_do_edit:
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	0
$LN137@nk_do_edit:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	0
_nk_do_edit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_edit_draw_text
_TEXT	SEGMENT
_label$1 = -168						; size = 16
_label$2 = -144						; size = 16
_txt$3 = -120						; size = 16
_line_count$4 = -96					; size = 4
_line_offset$5 = -84					; size = 4
_line$6 = -72						; size = 4
_glyph_width$7 = -60					; size = 4
_line_width$8 = -48					; size = 4
_text_len$9 = -36					; size = 4
_unicode$10 = -24					; size = 4
_glyph_len$11 = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_style$ = 12						; size = 4
_pos_x$ = 16						; size = 4
_pos_y$ = 20						; size = 4
_x_offset$ = 24						; size = 4
_text$ = 28						; size = 4
_byte_len$ = 32						; size = 4
_row_height$ = 36					; size = 4
_font$ = 40						; size = 4
_background$ = 44					; size = 4
_foreground$ = 48					; size = 4
_is_selected$ = 52					; size = 4
_nk_edit_draw_text PROC					; COMDAT

; 15351: {

	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 15352:     NK_ASSERT(out);

	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN15@nk_edit_dr
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_edit_draw_text@@9@9@ddf8d5d8
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17CMKEDJDI@?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@nk_edit_dr:

; 15353:     NK_ASSERT(font);

	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN16@nk_edit_dr
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_edit_draw_text@@9@9@ddf8d5d8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN16@nk_edit_dr:

; 15354:     NK_ASSERT(style);

	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN17@nk_edit_dr
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_edit_draw_text@@9@9@ddf8d5d8
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@OIINANNN@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN17@nk_edit_dr:

; 15355:     if (!text || !byte_len || !out || !style) return;

	cmp	DWORD PTR _text$[ebp], 0
	je	SHORT $LN11@nk_edit_dr
	cmp	DWORD PTR _byte_len$[ebp], 0
	je	SHORT $LN11@nk_edit_dr
	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN11@nk_edit_dr
	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN12@nk_edit_dr
$LN11@nk_edit_dr:
	jmp	$LN3@nk_edit_dr
$LN12@nk_edit_dr:

; 15356: 
; 15357:     {int glyph_len = 0;

	mov	DWORD PTR _glyph_len$11[ebp], 0

; 15358:     nk_rune unicode = 0;

	mov	DWORD PTR _unicode$10[ebp], 0

; 15359:     int text_len = 0;

	mov	DWORD PTR _text_len$9[ebp], 0

; 15360:     float line_width = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _line_width$8[ebp], xmm0

; 15361:     float glyph_width;
; 15362:     const char *line = text;

	mov	eax, DWORD PTR _text$[ebp]
	mov	DWORD PTR _line$6[ebp], eax

; 15363:     float line_offset = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _line_offset$5[ebp], xmm0

; 15364:     int line_count = 0;

	mov	DWORD PTR _line_count$4[ebp], 0

; 15365: 
; 15366:     struct nk_text txt;
; 15367:     txt.padding = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _txt$3[ebp], eax
	mov	DWORD PTR _txt$3[ebp+4], edx

; 15368:     txt.background = background;

	mov	eax, DWORD PTR _background$[ebp]
	mov	DWORD PTR _txt$3[ebp+8], eax

; 15369:     txt.text = foreground;

	mov	eax, DWORD PTR _foreground$[ebp]
	mov	DWORD PTR _txt$3[ebp+12], eax

; 15370: 
; 15371:     glyph_len = nk_utf_decode(text+text_len, &unicode, byte_len-text_len);

	mov	eax, DWORD PTR _byte_len$[ebp]
	sub	eax, DWORD PTR _text_len$9[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	add	edx, DWORD PTR _text_len$9[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$11[ebp], eax

; 15372:     if (!glyph_len) return;

	cmp	DWORD PTR _glyph_len$11[ebp], 0
	jne	SHORT $LN10@nk_edit_dr
	jmp	$LN3@nk_edit_dr
$LN10@nk_edit_dr:

; 15373:     while ((text_len < byte_len) && glyph_len)

	mov	eax, DWORD PTR _text_len$9[ebp]
	cmp	eax, DWORD PTR _byte_len$[ebp]
	jge	$LN8@nk_edit_dr
	cmp	DWORD PTR _glyph_len$11[ebp], 0
	je	$LN8@nk_edit_dr

; 15374:     {
; 15375:         if (unicode == '\n') {

	cmp	DWORD PTR _unicode$10[ebp], 10		; 0000000aH
	jne	$LN7@nk_edit_dr

; 15376:             /* new line separator so draw previous line */
; 15377:             struct nk_rect label;
; 15378:             label.y = pos_y + line_offset;

	movss	xmm0, DWORD PTR _pos_y$[ebp]
	addss	xmm0, DWORD PTR _line_offset$5[ebp]
	movss	DWORD PTR _label$2[ebp+4], xmm0

; 15379:             label.h = row_height;

	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR _label$2[ebp+12], xmm0

; 15380:             label.w = line_width;

	movss	xmm0, DWORD PTR _line_width$8[ebp]
	movss	DWORD PTR _label$2[ebp+8], xmm0

; 15381:             label.x = pos_x;

	movss	xmm0, DWORD PTR _pos_x$[ebp]
	movss	DWORD PTR _label$2[ebp], xmm0

; 15382:             if (!line_count)

	cmp	DWORD PTR _line_count$4[ebp], 0
	jne	SHORT $LN6@nk_edit_dr

; 15383:                 label.x += x_offset;

	movss	xmm0, DWORD PTR _label$2[ebp]
	addss	xmm0, DWORD PTR _x_offset$[ebp]
	movss	DWORD PTR _label$2[ebp], xmm0
$LN6@nk_edit_dr:

; 15384: 
; 15385:             if (is_selected) /* selection needs to draw different background color */

	cmp	DWORD PTR _is_selected$[ebp], 0
	je	SHORT $LN5@nk_edit_dr

; 15386:                 nk_fill_rect(out, label, 0, background);

	mov	eax, DWORD PTR _background$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _label$2[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _label$2[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _label$2[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _label$2[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH
$LN5@nk_edit_dr:

; 15387:             nk_widget_text(out, label, line, (int)((text + text_len) - line),
; 15388:                 &txt, NK_TEXT_CENTERED, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	18					; 00000012H
	lea	ecx, DWORD PTR _txt$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	add	edx, DWORD PTR _text_len$9[ebp]
	sub	edx, DWORD PTR _line$6[ebp]
	push	edx
	mov	eax, DWORD PTR _line$6[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _label$2[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _label$2[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _label$2[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _label$2[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_widget_text
	add	esp, 40					; 00000028H

; 15389: 
; 15390:             text_len++;

	mov	eax, DWORD PTR _text_len$9[ebp]
	add	eax, 1
	mov	DWORD PTR _text_len$9[ebp], eax

; 15391:             line_count++;

	mov	eax, DWORD PTR _line_count$4[ebp]
	add	eax, 1
	mov	DWORD PTR _line_count$4[ebp], eax

; 15392:             line_width = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _line_width$8[ebp], xmm0

; 15393:             line = text + text_len;

	mov	eax, DWORD PTR _text$[ebp]
	add	eax, DWORD PTR _text_len$9[ebp]
	mov	DWORD PTR _line$6[ebp], eax

; 15394:             line_offset += row_height;

	movss	xmm0, DWORD PTR _line_offset$5[ebp]
	addss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR _line_offset$5[ebp], xmm0

; 15395:             glyph_len = nk_utf_decode(text + text_len, &unicode, (int)(byte_len-text_len));

	mov	eax, DWORD PTR _byte_len$[ebp]
	sub	eax, DWORD PTR _text_len$9[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	add	edx, DWORD PTR _text_len$9[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$11[ebp], eax

; 15396:             continue;

	jmp	$LN10@nk_edit_dr
$LN7@nk_edit_dr:

; 15397:         }
; 15398:         if (unicode == '\r') {

	cmp	DWORD PTR _unicode$10[ebp], 13		; 0000000dH
	jne	SHORT $LN4@nk_edit_dr

; 15399:             text_len++;

	mov	eax, DWORD PTR _text_len$9[ebp]
	add	eax, 1
	mov	DWORD PTR _text_len$9[ebp], eax

; 15400:             glyph_len = nk_utf_decode(text + text_len, &unicode, byte_len-text_len);

	mov	eax, DWORD PTR _byte_len$[ebp]
	sub	eax, DWORD PTR _text_len$9[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	add	edx, DWORD PTR _text_len$9[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$11[ebp], eax

; 15401:             continue;

	jmp	$LN10@nk_edit_dr
$LN4@nk_edit_dr:

; 15402:         }
; 15403:         glyph_width = font->width(font->userdata, font->height, text+text_len, glyph_len);

	mov	esi, esp
	mov	eax, DWORD PTR _glyph_len$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	add	ecx, DWORD PTR _text_len$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _glyph_width$7[ebp]

; 15404:         line_width += (float)glyph_width;

	movss	xmm0, DWORD PTR _line_width$8[ebp]
	addss	xmm0, DWORD PTR _glyph_width$7[ebp]
	movss	DWORD PTR _line_width$8[ebp], xmm0

; 15405:         text_len += glyph_len;

	mov	eax, DWORD PTR _text_len$9[ebp]
	add	eax, DWORD PTR _glyph_len$11[ebp]
	mov	DWORD PTR _text_len$9[ebp], eax

; 15406:         glyph_len = nk_utf_decode(text + text_len, &unicode, byte_len-text_len);

	mov	eax, DWORD PTR _byte_len$[ebp]
	sub	eax, DWORD PTR _text_len$9[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	add	edx, DWORD PTR _text_len$9[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$11[ebp], eax

; 15407:         continue;

	jmp	$LN10@nk_edit_dr

; 15408:     }

	jmp	$LN10@nk_edit_dr
$LN8@nk_edit_dr:

; 15409:     if (line_width > 0) {

	movss	xmm0, DWORD PTR _line_width$8[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN3@nk_edit_dr

; 15410:         /* draw last line */
; 15411:         struct nk_rect label;
; 15412:         label.y = pos_y + line_offset;

	movss	xmm0, DWORD PTR _pos_y$[ebp]
	addss	xmm0, DWORD PTR _line_offset$5[ebp]
	movss	DWORD PTR _label$1[ebp+4], xmm0

; 15413:         label.h = row_height;

	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR _label$1[ebp+12], xmm0

; 15414:         label.w = line_width;

	movss	xmm0, DWORD PTR _line_width$8[ebp]
	movss	DWORD PTR _label$1[ebp+8], xmm0

; 15415:         label.x = pos_x;

	movss	xmm0, DWORD PTR _pos_x$[ebp]
	movss	DWORD PTR _label$1[ebp], xmm0

; 15416:         if (!line_count)

	cmp	DWORD PTR _line_count$4[ebp], 0
	jne	SHORT $LN2@nk_edit_dr

; 15417:             label.x += x_offset;

	movss	xmm0, DWORD PTR _label$1[ebp]
	addss	xmm0, DWORD PTR _x_offset$[ebp]
	movss	DWORD PTR _label$1[ebp], xmm0
$LN2@nk_edit_dr:

; 15418: 
; 15419:         if (is_selected)

	cmp	DWORD PTR _is_selected$[ebp], 0
	je	SHORT $LN1@nk_edit_dr

; 15420:             nk_fill_rect(out, label, 0, background);

	mov	eax, DWORD PTR _background$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _label$1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _label$1[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _label$1[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _label$1[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH
$LN1@nk_edit_dr:

; 15421:         nk_widget_text(out, label, line, (int)((text + text_len) - line),
; 15422:             &txt, NK_TEXT_LEFT, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	17					; 00000011H
	lea	ecx, DWORD PTR _txt$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	add	edx, DWORD PTR _text_len$9[ebp]
	sub	edx, DWORD PTR _line$6[ebp]
	push	edx
	mov	eax, DWORD PTR _line$6[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _label$1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _label$1[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _label$1[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _label$1[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_widget_text
	add	esp, 40					; 00000028H
$LN3@nk_edit_dr:

; 15423:     }}
; 15424: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@nk_edit_dr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN25@nk_edit_dr:
	DD	4
	DD	$LN24@nk_edit_dr
$LN24@nk_edit_dr:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN20@nk_edit_dr
	DD	-120					; ffffff88H
	DD	16					; 00000010H
	DD	$LN21@nk_edit_dr
	DD	-144					; ffffff70H
	DD	16					; 00000010H
	DD	$LN22@nk_edit_dr
	DD	-168					; ffffff58H
	DD	16					; 00000010H
	DD	$LN23@nk_edit_dr
$LN23@nk_edit_dr:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN22@nk_edit_dr:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN21@nk_edit_dr:
	DB	116					; 00000074H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN20@nk_edit_dr:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_nk_edit_draw_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_do_scrollbarh
_TEXT	SEGMENT
tv168 = -376						; size = 4
tv169 = -372						; size = 4
tv161 = -368						; size = 4
tv155 = -368						; size = 4
tv92 = -368						; size = 4
tv85 = -368						; size = 4
tv79 = -368						; size = 4
_button$1 = -168					; size = 16
_scroll_w$2 = -144					; size = 4
_ws$3 = -132						; size = 4
_scroll_ratio$ = -120					; size = 4
_scroll_off$ = -108					; size = 4
_scroll_offset$ = -96					; size = 4
_scroll_step$ = -84					; size = 4
_empty_east$ = -72					; size = 16
_empty_west$ = -48					; size = 16
_cursor$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_out$ = 12						; size = 4
_scroll$ = 16						; size = 16
_has_scrolling$ = 32					; size = 4
_offset$ = 36						; size = 4
_target$ = 40						; size = 4
_step$ = 44						; size = 4
_button_pixel_inc$ = 48					; size = 4
_style$ = 52						; size = 4
_in$ = 56						; size = 4
_font$ = 60						; size = 4
_nk_do_scrollbarh PROC					; COMDAT

; 15194: {

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 15195:     struct nk_rect cursor;
; 15196:     struct nk_rect empty_west;
; 15197:     struct nk_rect empty_east;
; 15198: 
; 15199:     float scroll_step;
; 15200:     float scroll_offset;
; 15201:     float scroll_off;
; 15202:     float scroll_ratio;
; 15203: 
; 15204:     NK_ASSERT(out);

	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN11@nk_do_scro
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_scrollbarh@@9@9@ddf8d5d8
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17CMKEDJDI@?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_do_scro:

; 15205:     NK_ASSERT(style);

	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN12@nk_do_scro
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_scrollbarh@@9@9@ddf8d5d8
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@OIINANNN@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_do_scro:

; 15206:     if (!out || !style) return 0;

	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN7@nk_do_scro
	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN8@nk_do_scro
$LN7@nk_do_scro:
	fldz
	jmp	$LN9@nk_do_scro
$LN8@nk_do_scro:

; 15207: 
; 15208:     /* scrollbar background */
; 15209:     scroll.h = NK_MAX(scroll.h, 1);

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _scroll$[ebp+12]
	jbe	SHORT $LN13@nk_do_scro
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv79[ebp], xmm0
	jmp	SHORT $LN14@nk_do_scro
$LN13@nk_do_scro:
	movss	xmm0, DWORD PTR _scroll$[ebp+12]
	movss	DWORD PTR tv79[ebp], xmm0
$LN14@nk_do_scro:
	movss	xmm0, DWORD PTR tv79[ebp]
	movss	DWORD PTR _scroll$[ebp+12], xmm0

; 15210:     scroll.w = NK_MAX(scroll.w, 2 * scroll.h);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _scroll$[ebp+12]
	comiss	xmm0, DWORD PTR _scroll$[ebp+8]
	jbe	SHORT $LN15@nk_do_scro
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _scroll$[ebp+12]
	movss	DWORD PTR tv85[ebp], xmm0
	jmp	SHORT $LN16@nk_do_scro
$LN15@nk_do_scro:
	movss	xmm0, DWORD PTR _scroll$[ebp+8]
	movss	DWORD PTR tv85[ebp], xmm0
$LN16@nk_do_scro:
	movss	xmm0, DWORD PTR tv85[ebp]
	movss	DWORD PTR _scroll$[ebp+8], xmm0

; 15211:     if (target <= scroll.w) return 0;

	movss	xmm0, DWORD PTR _scroll$[ebp+8]
	comiss	xmm0, DWORD PTR _target$[ebp]
	jb	SHORT $LN6@nk_do_scro
	fldz
	jmp	$LN9@nk_do_scro
$LN6@nk_do_scro:

; 15212: 
; 15213:     /* optional scrollbar buttons */
; 15214:     if (style->show_buttons) {

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	$LN5@nk_do_scro

; 15215:         nk_flags ws;
; 15216:         float scroll_w;
; 15217:         struct nk_rect button;
; 15218:         button.y = scroll.y;

	movss	xmm0, DWORD PTR _scroll$[ebp+4]
	movss	DWORD PTR _button$1[ebp+4], xmm0

; 15219:         button.w = scroll.h;

	movss	xmm0, DWORD PTR _scroll$[ebp+12]
	movss	DWORD PTR _button$1[ebp+8], xmm0

; 15220:         button.h = scroll.h;

	movss	xmm0, DWORD PTR _scroll$[ebp+12]
	movss	DWORD PTR _button$1[ebp+12], xmm0

; 15221: 
; 15222:         scroll_w = scroll.w - 2 * button.w;

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _button$1[ebp+8]
	movss	xmm1, DWORD PTR _scroll$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _scroll_w$2[ebp], xmm1

; 15223:         scroll_step = NK_MIN(step, button_pixel_inc);

	movss	xmm0, DWORD PTR _button_pixel_inc$[ebp]
	comiss	xmm0, DWORD PTR _step$[ebp]
	jbe	SHORT $LN17@nk_do_scro
	movss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR tv92[ebp], xmm0
	jmp	SHORT $LN18@nk_do_scro
$LN17@nk_do_scro:
	movss	xmm0, DWORD PTR _button_pixel_inc$[ebp]
	movss	DWORD PTR tv92[ebp], xmm0
$LN18@nk_do_scro:
	movss	xmm0, DWORD PTR tv92[ebp]
	movss	DWORD PTR _scroll_step$[ebp], xmm0

; 15224: 
; 15225:         /* decrement button */
; 15226:         button.x = scroll.x;

	movss	xmm0, DWORD PTR _scroll$[ebp]
	movss	DWORD PTR _button$1[ebp], xmm0

; 15227:         if (nk_do_button_symbol(&ws, out, button, style->dec_symbol,
; 15228:             NK_BUTTON_REPEATER, &style->dec_button, in, font))

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	add	edx, 284				; 0000011cH
	push	edx
	push	1
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _button$1[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _button$1[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _button$1[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _button$1[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	lea	eax, DWORD PTR _ws$3[ebp]
	push	eax
	call	_nk_do_button_symbol
	add	esp, 44					; 0000002cH
	test	eax, eax
	je	SHORT $LN4@nk_do_scro

; 15229:             offset = offset - scroll_step;

	movss	xmm0, DWORD PTR _offset$[ebp]
	subss	xmm0, DWORD PTR _scroll_step$[ebp]
	movss	DWORD PTR _offset$[ebp], xmm0
$LN4@nk_do_scro:

; 15230: 
; 15231:         /* increment button */
; 15232:         button.x = scroll.x + scroll.w - button.w;

	movss	xmm0, DWORD PTR _scroll$[ebp]
	addss	xmm0, DWORD PTR _scroll$[ebp+8]
	subss	xmm0, DWORD PTR _button$1[ebp+8]
	movss	DWORD PTR _button$1[ebp], xmm0

; 15233:         if (nk_do_button_symbol(&ws, out, button, style->inc_symbol,
; 15234:             NK_BUTTON_REPEATER, &style->inc_button, in, font))

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	add	edx, 156				; 0000009cH
	push	edx
	push	1
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _button$1[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _button$1[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _button$1[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _button$1[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	lea	eax, DWORD PTR _ws$3[ebp]
	push	eax
	call	_nk_do_button_symbol
	add	esp, 44					; 0000002cH
	test	eax, eax
	je	SHORT $LN3@nk_do_scro

; 15235:             offset = offset + scroll_step;

	movss	xmm0, DWORD PTR _offset$[ebp]
	addss	xmm0, DWORD PTR _scroll_step$[ebp]
	movss	DWORD PTR _offset$[ebp], xmm0
$LN3@nk_do_scro:

; 15236: 
; 15237:         scroll.x = scroll.x + button.w;

	movss	xmm0, DWORD PTR _scroll$[ebp]
	addss	xmm0, DWORD PTR _button$1[ebp+8]
	movss	DWORD PTR _scroll$[ebp], xmm0

; 15238:         scroll.w = scroll_w;

	movss	xmm0, DWORD PTR _scroll_w$2[ebp]
	movss	DWORD PTR _scroll$[ebp+8], xmm0
$LN5@nk_do_scro:

; 15239:     }
; 15240: 
; 15241:     /* calculate scrollbar constants */
; 15242:     scroll_step = NK_MIN(step, scroll.w);

	movss	xmm0, DWORD PTR _scroll$[ebp+8]
	comiss	xmm0, DWORD PTR _step$[ebp]
	jbe	SHORT $LN19@nk_do_scro
	movss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR tv155[ebp], xmm0
	jmp	SHORT $LN20@nk_do_scro
$LN19@nk_do_scro:
	movss	xmm0, DWORD PTR _scroll$[ebp+8]
	movss	DWORD PTR tv155[ebp], xmm0
$LN20@nk_do_scro:
	movss	xmm0, DWORD PTR tv155[ebp]
	movss	DWORD PTR _scroll_step$[ebp], xmm0

; 15243:     scroll_offset = NK_CLAMP(0, offset, target - scroll.w);

	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR _scroll$[ebp+8]
	comiss	xmm0, DWORD PTR _offset$[ebp]
	jbe	SHORT $LN21@nk_do_scro
	movss	xmm0, DWORD PTR _offset$[ebp]
	movss	DWORD PTR tv161[ebp], xmm0
	jmp	SHORT $LN22@nk_do_scro
$LN21@nk_do_scro:
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR _scroll$[ebp+8]
	movss	DWORD PTR tv161[ebp], xmm0
$LN22@nk_do_scro:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv161[ebp]
	jbe	SHORT $LN25@nk_do_scro
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv169[ebp], xmm0
	jmp	SHORT $LN26@nk_do_scro
$LN25@nk_do_scro:
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR _scroll$[ebp+8]
	comiss	xmm0, DWORD PTR _offset$[ebp]
	jbe	SHORT $LN23@nk_do_scro
	movss	xmm0, DWORD PTR _offset$[ebp]
	movss	DWORD PTR tv168[ebp], xmm0
	jmp	SHORT $LN24@nk_do_scro
$LN23@nk_do_scro:
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR _scroll$[ebp+8]
	movss	DWORD PTR tv168[ebp], xmm0
$LN24@nk_do_scro:
	movss	xmm0, DWORD PTR tv168[ebp]
	movss	DWORD PTR tv169[ebp], xmm0
$LN26@nk_do_scro:
	movss	xmm0, DWORD PTR tv169[ebp]
	movss	DWORD PTR _scroll_offset$[ebp], xmm0

; 15244:     scroll_ratio = scroll.w / target;

	movss	xmm0, DWORD PTR _scroll$[ebp+8]
	divss	xmm0, DWORD PTR _target$[ebp]
	movss	DWORD PTR _scroll_ratio$[ebp], xmm0

; 15245:     scroll_off = scroll_offset / target;

	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	divss	xmm0, DWORD PTR _target$[ebp]
	movss	DWORD PTR _scroll_off$[ebp], xmm0

; 15246: 
; 15247:     /* calculate cursor bounds */
; 15248:     cursor.w = (scroll_ratio * scroll.w) - (2*style->border + 2*style->padding.x);

	movss	xmm0, DWORD PTR _scroll_ratio$[ebp]
	mulss	xmm0, DWORD PTR _scroll$[ebp+8]
	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [eax+128]
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm2, DWORD PTR __real@40000000
	mulss	xmm2, DWORD PTR [ecx+144]
	addss	xmm1, xmm2
	subss	xmm0, xmm1
	movss	DWORD PTR _cursor$[ebp+8], xmm0

; 15249:     cursor.x = scroll.x + (scroll_off * scroll.w) + style->border + style->padding.x;

	movss	xmm0, DWORD PTR _scroll_off$[ebp]
	mulss	xmm0, DWORD PTR _scroll$[ebp+8]
	addss	xmm0, DWORD PTR _scroll$[ebp]
	mov	eax, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [eax+128]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+144]
	movss	DWORD PTR _cursor$[ebp], xmm0

; 15250:     cursor.h = scroll.h - (2 * style->border + 2 * style->padding.y);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+128]
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx+148]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _scroll$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _cursor$[ebp+12], xmm1

; 15251:     cursor.y = scroll.y + style->border + style->padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _scroll$[ebp+4]
	addss	xmm0, DWORD PTR [eax+128]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+148]
	movss	DWORD PTR _cursor$[ebp+4], xmm0

; 15252: 
; 15253:     /* calculate empty space around cursor */
; 15254:     empty_west.x = scroll.x;

	movss	xmm0, DWORD PTR _scroll$[ebp]
	movss	DWORD PTR _empty_west$[ebp], xmm0

; 15255:     empty_west.y = scroll.y;

	movss	xmm0, DWORD PTR _scroll$[ebp+4]
	movss	DWORD PTR _empty_west$[ebp+4], xmm0

; 15256:     empty_west.w = cursor.x - scroll.x;

	movss	xmm0, DWORD PTR _cursor$[ebp]
	subss	xmm0, DWORD PTR _scroll$[ebp]
	movss	DWORD PTR _empty_west$[ebp+8], xmm0

; 15257:     empty_west.h = scroll.h;

	movss	xmm0, DWORD PTR _scroll$[ebp+12]
	movss	DWORD PTR _empty_west$[ebp+12], xmm0

; 15258: 
; 15259:     empty_east.x = cursor.x + cursor.w;

	movss	xmm0, DWORD PTR _cursor$[ebp]
	addss	xmm0, DWORD PTR _cursor$[ebp+8]
	movss	DWORD PTR _empty_east$[ebp], xmm0

; 15260:     empty_east.y = scroll.y;

	movss	xmm0, DWORD PTR _scroll$[ebp+4]
	movss	DWORD PTR _empty_east$[ebp+4], xmm0

; 15261:     empty_east.w = (scroll.x + scroll.w) - (cursor.x + cursor.w);

	movss	xmm0, DWORD PTR _scroll$[ebp]
	addss	xmm0, DWORD PTR _scroll$[ebp+8]
	movss	xmm1, DWORD PTR _cursor$[ebp]
	addss	xmm1, DWORD PTR _cursor$[ebp+8]
	subss	xmm0, xmm1
	movss	DWORD PTR _empty_east$[ebp+8], xmm0

; 15262:     empty_east.h = scroll.h;

	movss	xmm0, DWORD PTR _scroll$[ebp+12]
	movss	DWORD PTR _empty_east$[ebp+12], xmm0

; 15263: 
; 15264:     /* update scrollbar */
; 15265:     scroll_offset = nk_scrollbar_behavior(state, in, has_scrolling, &scroll, &cursor,
; 15266:         &empty_west, &empty_east, scroll_offset, target, scroll_step, NK_HORIZONTAL);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR _scroll_step$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _target$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _empty_east$[ebp]
	push	eax
	lea	ecx, DWORD PTR _empty_west$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cursor$[ebp]
	push	edx
	lea	eax, DWORD PTR _scroll$[ebp]
	push	eax
	mov	ecx, DWORD PTR _has_scrolling$[ebp]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_scrollbar_behavior
	add	esp, 44					; 0000002cH
	fstp	DWORD PTR _scroll_offset$[ebp]

; 15267:     scroll_off = scroll_offset / target;

	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	divss	xmm0, DWORD PTR _target$[ebp]
	movss	DWORD PTR _scroll_off$[ebp], xmm0

; 15268:     cursor.x = scroll.x + (scroll_off * scroll.w);

	movss	xmm0, DWORD PTR _scroll_off$[ebp]
	mulss	xmm0, DWORD PTR _scroll$[ebp+8]
	addss	xmm0, DWORD PTR _scroll$[ebp]
	movss	DWORD PTR _cursor$[ebp], xmm0

; 15269: 
; 15270:     /* draw scrollbar */
; 15271:     if (style->draw_begin) style->draw_begin(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+424], 0
	je	SHORT $LN2@nk_do_scro
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+420]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+424]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@nk_do_scro:

; 15272:     nk_draw_scrollbar(out, *state, style, &scroll, &cursor);

	lea	eax, DWORD PTR _cursor$[ebp]
	push	eax
	lea	ecx, DWORD PTR _scroll$[ebp]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_draw_scrollbar
	add	esp, 20					; 00000014H

; 15273:     if (style->draw_end) style->draw_end(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+428], 0
	je	SHORT $LN1@nk_do_scro
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+420]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+428]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@nk_do_scro:

; 15274:     return scroll_offset;

	fld	DWORD PTR _scroll_offset$[ebp]
$LN9@nk_do_scro:

; 15275: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@nk_do_scro
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN33@nk_do_scro:
	DD	5
	DD	$LN32@nk_do_scro
$LN32@nk_do_scro:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN27@nk_do_scro
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN28@nk_do_scro
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN29@nk_do_scro
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN30@nk_do_scro
	DD	-168					; ffffff58H
	DD	16					; 00000010H
	DD	$LN31@nk_do_scro
$LN31@nk_do_scro:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN30@nk_do_scro:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	0
$LN29@nk_do_scro:
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN28@nk_do_scro:
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN27@nk_do_scro:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_nk_do_scrollbarh ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_do_scrollbarv
_TEXT	SEGMENT
tv176 = -376						; size = 4
tv177 = -372						; size = 4
tv272 = -368						; size = 4
tv257 = -368						; size = 4
tv233 = -368						; size = 4
tv169 = -368						; size = 4
tv163 = -368						; size = 4
tv132 = -368						; size = 4
tv130 = -368						; size = 4
tv87 = -368						; size = 4
tv85 = -368						; size = 4
_button$1 = -168					; size = 16
_scroll_h$2 = -144					; size = 4
_ws$3 = -132						; size = 4
_scroll_ratio$ = -120					; size = 4
_scroll_off$ = -108					; size = 4
_scroll_offset$ = -96					; size = 4
_scroll_step$ = -84					; size = 4
_cursor$ = -72						; size = 16
_empty_south$ = -48					; size = 16
_empty_north$ = -24					; size = 16
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_out$ = 12						; size = 4
_scroll$ = 16						; size = 16
_has_scrolling$ = 32					; size = 4
_offset$ = 36						; size = 4
_target$ = 40						; size = 4
_step$ = 44						; size = 4
_button_pixel_inc$ = 48					; size = 4
_style$ = 52						; size = 4
_in$ = 56						; size = 4
_font$ = 60						; size = 4
_nk_do_scrollbarv PROC					; COMDAT

; 15104: {

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 15105:     struct nk_rect empty_north;
; 15106:     struct nk_rect empty_south;
; 15107:     struct nk_rect cursor;
; 15108: 
; 15109:     float scroll_step;
; 15110:     float scroll_offset;
; 15111:     float scroll_off;
; 15112:     float scroll_ratio;
; 15113: 
; 15114:     NK_ASSERT(out);

	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN11@nk_do_scro
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_scrollbarv@@9@9@ddf8d5d8
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17CMKEDJDI@?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_do_scro:

; 15115:     NK_ASSERT(style);

	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN12@nk_do_scro
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_scrollbarv@@9@9@ddf8d5d8
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@OIINANNN@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_do_scro:

; 15116:     NK_ASSERT(state);

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN13@nk_do_scro
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_scrollbarv@@9@9@ddf8d5d8
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_do_scro:

; 15117:     if (!out || !style) return 0;

	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN7@nk_do_scro
	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN8@nk_do_scro
$LN7@nk_do_scro:
	fldz
	jmp	$LN9@nk_do_scro
$LN8@nk_do_scro:

; 15118: 
; 15119:     scroll.w = NK_MAX(scroll.w, 1);

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _scroll$[ebp+8]
	jbe	SHORT $LN14@nk_do_scro
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv85[ebp], xmm0
	jmp	SHORT $LN15@nk_do_scro
$LN14@nk_do_scro:
	movss	xmm0, DWORD PTR _scroll$[ebp+8]
	movss	DWORD PTR tv85[ebp], xmm0
$LN15@nk_do_scro:
	movss	xmm0, DWORD PTR tv85[ebp]
	movss	DWORD PTR _scroll$[ebp+8], xmm0

; 15120:     scroll.h = NK_MAX(scroll.h, 0);

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _scroll$[ebp+12]
	jbe	SHORT $LN16@nk_do_scro
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv87[ebp], xmm0
	jmp	SHORT $LN17@nk_do_scro
$LN16@nk_do_scro:
	movss	xmm0, DWORD PTR _scroll$[ebp+12]
	movss	DWORD PTR tv87[ebp], xmm0
$LN17@nk_do_scro:
	movss	xmm0, DWORD PTR tv87[ebp]
	movss	DWORD PTR _scroll$[ebp+12], xmm0

; 15121:     if (target <= scroll.h) return 0;

	movss	xmm0, DWORD PTR _scroll$[ebp+12]
	comiss	xmm0, DWORD PTR _target$[ebp]
	jb	SHORT $LN6@nk_do_scro
	fldz
	jmp	$LN9@nk_do_scro
$LN6@nk_do_scro:

; 15122: 
; 15123:     /* optional scrollbar buttons */
; 15124:     if (style->show_buttons) {

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	$LN5@nk_do_scro

; 15125:         nk_flags ws;
; 15126:         float scroll_h;
; 15127:         struct nk_rect button;
; 15128: 
; 15129:         button.x = scroll.x;

	movss	xmm0, DWORD PTR _scroll$[ebp]
	movss	DWORD PTR _button$1[ebp], xmm0

; 15130:         button.w = scroll.w;

	movss	xmm0, DWORD PTR _scroll$[ebp+8]
	movss	DWORD PTR _button$1[ebp+8], xmm0

; 15131:         button.h = scroll.w;

	movss	xmm0, DWORD PTR _scroll$[ebp+8]
	movss	DWORD PTR _button$1[ebp+12], xmm0

; 15132: 
; 15133:         scroll_h = NK_MAX(scroll.h - 2 * button.h,0);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _button$1[ebp+12]
	movss	xmm1, DWORD PTR _scroll$[ebp+12]
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, xmm1
	jbe	SHORT $LN18@nk_do_scro
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv130[ebp], xmm0
	jmp	SHORT $LN19@nk_do_scro
$LN18@nk_do_scro:
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _button$1[ebp+12]
	movss	xmm1, DWORD PTR _scroll$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR tv130[ebp], xmm1
$LN19@nk_do_scro:
	movss	xmm0, DWORD PTR tv130[ebp]
	movss	DWORD PTR _scroll_h$2[ebp], xmm0

; 15134:         scroll_step = NK_MIN(step, button_pixel_inc);

	movss	xmm0, DWORD PTR _button_pixel_inc$[ebp]
	comiss	xmm0, DWORD PTR _step$[ebp]
	jbe	SHORT $LN20@nk_do_scro
	movss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR tv132[ebp], xmm0
	jmp	SHORT $LN21@nk_do_scro
$LN20@nk_do_scro:
	movss	xmm0, DWORD PTR _button_pixel_inc$[ebp]
	movss	DWORD PTR tv132[ebp], xmm0
$LN21@nk_do_scro:
	movss	xmm0, DWORD PTR tv132[ebp]
	movss	DWORD PTR _scroll_step$[ebp], xmm0

; 15135: 
; 15136:         /* decrement button */
; 15137:         button.y = scroll.y;

	movss	xmm0, DWORD PTR _scroll$[ebp+4]
	movss	DWORD PTR _button$1[ebp+4], xmm0

; 15138:         if (nk_do_button_symbol(&ws, out, button, style->dec_symbol,
; 15139:             NK_BUTTON_REPEATER, &style->dec_button, in, font))

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	add	edx, 284				; 0000011cH
	push	edx
	push	1
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _button$1[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _button$1[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _button$1[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _button$1[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	lea	eax, DWORD PTR _ws$3[ebp]
	push	eax
	call	_nk_do_button_symbol
	add	esp, 44					; 0000002cH
	test	eax, eax
	je	SHORT $LN4@nk_do_scro

; 15140:             offset = offset - scroll_step;

	movss	xmm0, DWORD PTR _offset$[ebp]
	subss	xmm0, DWORD PTR _scroll_step$[ebp]
	movss	DWORD PTR _offset$[ebp], xmm0
$LN4@nk_do_scro:

; 15141: 
; 15142:         /* increment button */
; 15143:         button.y = scroll.y + scroll.h - button.h;

	movss	xmm0, DWORD PTR _scroll$[ebp+4]
	addss	xmm0, DWORD PTR _scroll$[ebp+12]
	subss	xmm0, DWORD PTR _button$1[ebp+12]
	movss	DWORD PTR _button$1[ebp+4], xmm0

; 15144:         if (nk_do_button_symbol(&ws, out, button, style->inc_symbol,
; 15145:             NK_BUTTON_REPEATER, &style->inc_button, in, font))

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	add	edx, 156				; 0000009cH
	push	edx
	push	1
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _button$1[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _button$1[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _button$1[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _button$1[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	lea	eax, DWORD PTR _ws$3[ebp]
	push	eax
	call	_nk_do_button_symbol
	add	esp, 44					; 0000002cH
	test	eax, eax
	je	SHORT $LN3@nk_do_scro

; 15146:             offset = offset + scroll_step;

	movss	xmm0, DWORD PTR _offset$[ebp]
	addss	xmm0, DWORD PTR _scroll_step$[ebp]
	movss	DWORD PTR _offset$[ebp], xmm0
$LN3@nk_do_scro:

; 15147: 
; 15148:         scroll.y = scroll.y + button.h;

	movss	xmm0, DWORD PTR _scroll$[ebp+4]
	addss	xmm0, DWORD PTR _button$1[ebp+12]
	movss	DWORD PTR _scroll$[ebp+4], xmm0

; 15149:         scroll.h = scroll_h;

	movss	xmm0, DWORD PTR _scroll_h$2[ebp]
	movss	DWORD PTR _scroll$[ebp+12], xmm0
$LN5@nk_do_scro:

; 15150:     }
; 15151: 
; 15152:     /* calculate scrollbar constants */
; 15153:     scroll_step = NK_MIN(step, scroll.h);

	movss	xmm0, DWORD PTR _scroll$[ebp+12]
	comiss	xmm0, DWORD PTR _step$[ebp]
	jbe	SHORT $LN22@nk_do_scro
	movss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR tv163[ebp], xmm0
	jmp	SHORT $LN23@nk_do_scro
$LN22@nk_do_scro:
	movss	xmm0, DWORD PTR _scroll$[ebp+12]
	movss	DWORD PTR tv163[ebp], xmm0
$LN23@nk_do_scro:
	movss	xmm0, DWORD PTR tv163[ebp]
	movss	DWORD PTR _scroll_step$[ebp], xmm0

; 15154:     scroll_offset = NK_CLAMP(0, offset, target - scroll.h);

	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR _scroll$[ebp+12]
	comiss	xmm0, DWORD PTR _offset$[ebp]
	jbe	SHORT $LN24@nk_do_scro
	movss	xmm0, DWORD PTR _offset$[ebp]
	movss	DWORD PTR tv169[ebp], xmm0
	jmp	SHORT $LN25@nk_do_scro
$LN24@nk_do_scro:
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR _scroll$[ebp+12]
	movss	DWORD PTR tv169[ebp], xmm0
$LN25@nk_do_scro:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv169[ebp]
	jbe	SHORT $LN28@nk_do_scro
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv177[ebp], xmm0
	jmp	SHORT $LN29@nk_do_scro
$LN28@nk_do_scro:
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR _scroll$[ebp+12]
	comiss	xmm0, DWORD PTR _offset$[ebp]
	jbe	SHORT $LN26@nk_do_scro
	movss	xmm0, DWORD PTR _offset$[ebp]
	movss	DWORD PTR tv176[ebp], xmm0
	jmp	SHORT $LN27@nk_do_scro
$LN26@nk_do_scro:
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR _scroll$[ebp+12]
	movss	DWORD PTR tv176[ebp], xmm0
$LN27@nk_do_scro:
	movss	xmm0, DWORD PTR tv176[ebp]
	movss	DWORD PTR tv177[ebp], xmm0
$LN29@nk_do_scro:
	movss	xmm0, DWORD PTR tv177[ebp]
	movss	DWORD PTR _scroll_offset$[ebp], xmm0

; 15155:     scroll_ratio = scroll.h / target;

	movss	xmm0, DWORD PTR _scroll$[ebp+12]
	divss	xmm0, DWORD PTR _target$[ebp]
	movss	DWORD PTR _scroll_ratio$[ebp], xmm0

; 15156:     scroll_off = scroll_offset / target;

	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	divss	xmm0, DWORD PTR _target$[ebp]
	movss	DWORD PTR _scroll_off$[ebp], xmm0

; 15157: 
; 15158:     /* calculate scrollbar cursor bounds */
; 15159:     cursor.h = NK_MAX((scroll_ratio * scroll.h) - (2*style->border + 2*style->padding.y), 0);

	movss	xmm0, DWORD PTR _scroll_ratio$[ebp]
	mulss	xmm0, DWORD PTR _scroll$[ebp+12]
	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [eax+128]
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm2, DWORD PTR __real@40000000
	mulss	xmm2, DWORD PTR [ecx+148]
	addss	xmm1, xmm2
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN30@nk_do_scro
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv233[ebp], xmm0
	jmp	SHORT $LN31@nk_do_scro
$LN30@nk_do_scro:
	movss	xmm0, DWORD PTR _scroll_ratio$[ebp]
	mulss	xmm0, DWORD PTR _scroll$[ebp+12]
	mov	edx, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [edx+128]
	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm2, DWORD PTR __real@40000000
	mulss	xmm2, DWORD PTR [eax+148]
	addss	xmm1, xmm2
	subss	xmm0, xmm1
	movss	DWORD PTR tv233[ebp], xmm0
$LN31@nk_do_scro:
	movss	xmm0, DWORD PTR tv233[ebp]
	movss	DWORD PTR _cursor$[ebp+12], xmm0

; 15160:     cursor.y = scroll.y + (scroll_off * scroll.h) + style->border + style->padding.y;

	movss	xmm0, DWORD PTR _scroll_off$[ebp]
	mulss	xmm0, DWORD PTR _scroll$[ebp+12]
	addss	xmm0, DWORD PTR _scroll$[ebp+4]
	mov	eax, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [eax+128]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+148]
	movss	DWORD PTR _cursor$[ebp+4], xmm0

; 15161:     cursor.w = scroll.w - (2 * style->border + 2 * style->padding.x);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+128]
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx+144]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _scroll$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _cursor$[ebp+8], xmm1

; 15162:     cursor.x = scroll.x + style->border + style->padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _scroll$[ebp]
	addss	xmm0, DWORD PTR [eax+128]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+144]
	movss	DWORD PTR _cursor$[ebp], xmm0

; 15163: 
; 15164:     /* calculate empty space around cursor */
; 15165:     empty_north.x = scroll.x;

	movss	xmm0, DWORD PTR _scroll$[ebp]
	movss	DWORD PTR _empty_north$[ebp], xmm0

; 15166:     empty_north.y = scroll.y;

	movss	xmm0, DWORD PTR _scroll$[ebp+4]
	movss	DWORD PTR _empty_north$[ebp+4], xmm0

; 15167:     empty_north.w = scroll.w;

	movss	xmm0, DWORD PTR _scroll$[ebp+8]
	movss	DWORD PTR _empty_north$[ebp+8], xmm0

; 15168:     empty_north.h = NK_MAX(cursor.y - scroll.y, 0);

	movss	xmm0, DWORD PTR _cursor$[ebp+4]
	subss	xmm0, DWORD PTR _scroll$[ebp+4]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN32@nk_do_scro
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv257[ebp], xmm0
	jmp	SHORT $LN33@nk_do_scro
$LN32@nk_do_scro:
	movss	xmm0, DWORD PTR _cursor$[ebp+4]
	subss	xmm0, DWORD PTR _scroll$[ebp+4]
	movss	DWORD PTR tv257[ebp], xmm0
$LN33@nk_do_scro:
	movss	xmm0, DWORD PTR tv257[ebp]
	movss	DWORD PTR _empty_north$[ebp+12], xmm0

; 15169: 
; 15170:     empty_south.x = scroll.x;

	movss	xmm0, DWORD PTR _scroll$[ebp]
	movss	DWORD PTR _empty_south$[ebp], xmm0

; 15171:     empty_south.y = cursor.y + cursor.h;

	movss	xmm0, DWORD PTR _cursor$[ebp+4]
	addss	xmm0, DWORD PTR _cursor$[ebp+12]
	movss	DWORD PTR _empty_south$[ebp+4], xmm0

; 15172:     empty_south.w = scroll.w;

	movss	xmm0, DWORD PTR _scroll$[ebp+8]
	movss	DWORD PTR _empty_south$[ebp+8], xmm0

; 15173:     empty_south.h = NK_MAX((scroll.y + scroll.h) - (cursor.y + cursor.h), 0);

	movss	xmm0, DWORD PTR _scroll$[ebp+4]
	addss	xmm0, DWORD PTR _scroll$[ebp+12]
	movss	xmm1, DWORD PTR _cursor$[ebp+4]
	addss	xmm1, DWORD PTR _cursor$[ebp+12]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN34@nk_do_scro
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv272[ebp], xmm0
	jmp	SHORT $LN35@nk_do_scro
$LN34@nk_do_scro:
	movss	xmm0, DWORD PTR _scroll$[ebp+4]
	addss	xmm0, DWORD PTR _scroll$[ebp+12]
	movss	xmm1, DWORD PTR _cursor$[ebp+4]
	addss	xmm1, DWORD PTR _cursor$[ebp+12]
	subss	xmm0, xmm1
	movss	DWORD PTR tv272[ebp], xmm0
$LN35@nk_do_scro:
	movss	xmm0, DWORD PTR tv272[ebp]
	movss	DWORD PTR _empty_south$[ebp+12], xmm0

; 15174: 
; 15175:     /* update scrollbar */
; 15176:     scroll_offset = nk_scrollbar_behavior(state, in, has_scrolling, &scroll, &cursor,
; 15177:         &empty_north, &empty_south, scroll_offset, target, scroll_step, NK_VERTICAL);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR _scroll_step$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _target$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _empty_south$[ebp]
	push	eax
	lea	ecx, DWORD PTR _empty_north$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cursor$[ebp]
	push	edx
	lea	eax, DWORD PTR _scroll$[ebp]
	push	eax
	mov	ecx, DWORD PTR _has_scrolling$[ebp]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_scrollbar_behavior
	add	esp, 44					; 0000002cH
	fstp	DWORD PTR _scroll_offset$[ebp]

; 15178:     scroll_off = scroll_offset / target;

	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	divss	xmm0, DWORD PTR _target$[ebp]
	movss	DWORD PTR _scroll_off$[ebp], xmm0

; 15179:     cursor.y = scroll.y + (scroll_off * scroll.h) + style->border_cursor + style->padding.y;

	movss	xmm0, DWORD PTR _scroll_off$[ebp]
	mulss	xmm0, DWORD PTR _scroll$[ebp+12]
	addss	xmm0, DWORD PTR _scroll$[ebp+4]
	mov	eax, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [eax+136]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+148]
	movss	DWORD PTR _cursor$[ebp+4], xmm0

; 15180: 
; 15181:     /* draw scrollbar */
; 15182:     if (style->draw_begin) style->draw_begin(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+424], 0
	je	SHORT $LN2@nk_do_scro
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+420]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+424]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@nk_do_scro:

; 15183:     nk_draw_scrollbar(out, *state, style, &scroll, &cursor);

	lea	eax, DWORD PTR _cursor$[ebp]
	push	eax
	lea	ecx, DWORD PTR _scroll$[ebp]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_draw_scrollbar
	add	esp, 20					; 00000014H

; 15184:     if (style->draw_end) style->draw_end(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+428], 0
	je	SHORT $LN1@nk_do_scro
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+420]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+428]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@nk_do_scro:

; 15185:     return scroll_offset;

	fld	DWORD PTR _scroll_offset$[ebp]
$LN9@nk_do_scro:

; 15186: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN42@nk_do_scro
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN42@nk_do_scro:
	DD	5
	DD	$LN41@nk_do_scro
$LN41@nk_do_scro:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN36@nk_do_scro
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN37@nk_do_scro
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN38@nk_do_scro
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN39@nk_do_scro
	DD	-168					; ffffff58H
	DD	16					; 00000010H
	DD	$LN40@nk_do_scro
$LN40@nk_do_scro:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN39@nk_do_scro:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	0
$LN38@nk_do_scro:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN37@nk_do_scro:
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN36@nk_do_scro:
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
_nk_do_scrollbarv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_scrollbar
_TEXT	SEGMENT
_cursor$ = -20						; size = 4
_background$ = -8					; size = 4
_out$ = 8						; size = 4
_state$ = 12						; size = 4
_style$ = 16						; size = 4
_bounds$ = 20						; size = 4
_scroll$ = 24						; size = 4
_nk_draw_scrollbar PROC					; COMDAT

; 15067: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 15068:     const struct nk_style_item *background;
; 15069:     const struct nk_style_item *cursor;
; 15070: 
; 15071:     /* select correct colors/images to draw */
; 15072:     if (state & NK_WIDGET_STATE_ACTIVED) {

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN8@nk_draw_sc

; 15073:         background = &style->active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _background$[ebp], eax

; 15074:         cursor = &style->cursor_active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 104				; 00000068H
	mov	DWORD PTR _cursor$[ebp], eax
	jmp	SHORT $LN5@nk_draw_sc
$LN8@nk_draw_sc:

; 15075:     } else if (state & NK_WIDGET_STATE_HOVER) {

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN6@nk_draw_sc

; 15076:         background = &style->hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _background$[ebp], eax

; 15077:         cursor = &style->cursor_hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 84					; 00000054H
	mov	DWORD PTR _cursor$[ebp], eax

; 15078:     } else {

	jmp	SHORT $LN5@nk_draw_sc
$LN6@nk_draw_sc:

; 15079:         background = &style->normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	DWORD PTR _background$[ebp], eax

; 15080:         cursor = &style->cursor_normal;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _cursor$[ebp], eax
$LN5@nk_draw_sc:

; 15081:     }
; 15082: 
; 15083:     /* draw background */
; 15084:     if (background->type == NK_STYLE_ITEM_COLOR) {

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN4@nk_draw_sc

; 15085:         nk_fill_rect(out, *bounds, style->rounding, background->data.color);

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+132]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 15086:         nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+128]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+132]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_stroke_rect
	add	esp, 32					; 00000020H

; 15087:     } else {

	jmp	SHORT $LN3@nk_draw_sc
$LN4@nk_draw_sc:

; 15088:         nk_draw_image(out, *bounds, &background->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _background$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_image
	add	esp, 28					; 0000001cH
$LN3@nk_draw_sc:

; 15089:     }
; 15090: 
; 15091:     /* draw cursor */
; 15092:     if (background->type == NK_STYLE_ITEM_COLOR) {

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN2@nk_draw_sc

; 15093:         nk_fill_rect(out, *scroll, style->rounding_cursor, cursor->data.color);

	mov	eax, DWORD PTR _cursor$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+140]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _scroll$[ebp]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 15094:         nk_stroke_rect(out, *scroll, style->rounding_cursor, style->border_cursor, style->cursor_border_color);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+136]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+140]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _scroll$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_stroke_rect
	add	esp, 32					; 00000020H
	jmp	SHORT $LN1@nk_draw_sc
$LN2@nk_draw_sc:

; 15095:     } else nk_draw_image(out, *scroll, &cursor->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _cursor$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _scroll$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_image
	add	esp, 28					; 0000001cH
$LN1@nk_draw_sc:

; 15096: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_scrollbar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_scrollbar_behavior
_TEXT	SEGMENT
tv321 = -300						; size = 4
tv303 = -300						; size = 4
tv193 = -300						; size = 4
tv148 = -300						; size = 4
tv322 = -296						; size = 4
tv304 = -296						; size = 4
tv194 = -296						; size = 4
tv149 = -296						; size = 4
tv312 = -292						; size = 4
tv294 = -292						; size = 4
tv278 = -292						; size = 4
tv264 = -292						; size = 4
tv237 = -292						; size = 4
tv229 = -292						; size = 4
tv180 = -292						; size = 4
tv135 = -292						; size = 4
tv83 = -292						; size = 4
_cursor_x$1 = -92					; size = 4
_cursor_y$2 = -80					; size = 4
_delta$3 = -68						; size = 4
_pixel$4 = -56						; size = 4
_scroll_delta$ = -44					; size = 4
_left_mouse_click_in_cursor$ = -32			; size = 4
_left_mouse_down$ = -20					; size = 4
_ws$ = -8						; size = 4
_state$ = 8						; size = 4
_in$ = 12						; size = 4
_has_scrolling$ = 16					; size = 4
_scroll$ = 20						; size = 4
_cursor$ = 24						; size = 4
_empty0$ = 28						; size = 4
_empty1$ = 32						; size = 4
_scroll_offset$ = 36					; size = 4
_target$ = 40						; size = 4
_scroll_step$ = 44					; size = 4
_o$ = 48						; size = 4
_nk_scrollbar_behavior PROC				; COMDAT

; 14994: {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 14995:     nk_flags ws = 0;

	mov	DWORD PTR _ws$[ebp], 0

; 14996:     int left_mouse_down;
; 14997:     int left_mouse_click_in_cursor;
; 14998:     float scroll_delta;
; 14999: 
; 15000:     nk_widget_state_reset(state);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2
	je	SHORT $LN34@nk_scrollb
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 6
	jmp	SHORT $LN33@nk_scrollb
$LN34@nk_scrollb:
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 4
$LN33@nk_scrollb:

; 15001:     if (!in) return scroll_offset;

	cmp	DWORD PTR _in$[ebp], 0
	jne	SHORT $LN32@nk_scrollb
	fld	DWORD PTR _scroll_offset$[ebp]
	jmp	$LN35@nk_scrollb
$LN32@nk_scrollb:

; 15002: 
; 15003:     left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in$[ebp]
	mov	eax, DWORD PTR [edx+ecx+260]
	mov	DWORD PTR _left_mouse_down$[ebp], eax

; 15004:     left_mouse_click_in_cursor = nk_input_has_mouse_click_down_in_rect(in,
; 15005:         NK_BUTTON_LEFT, *cursor, nk_true);

	push	1
	mov	eax, DWORD PTR _cursor$[ebp]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	push	0
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_nk_input_has_mouse_click_down_in_rect
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _left_mouse_click_in_cursor$[ebp], eax

; 15006:     if (nk_input_is_mouse_hovering_rect(in, *scroll))

	mov	eax, DWORD PTR _scroll$[ebp]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN31@nk_scrollb

; 15007:         *state = NK_WIDGET_STATE_HOVERED;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H
$LN31@nk_scrollb:

; 15008: 
; 15009:     scroll_delta = (o == NK_VERTICAL) ? in->mouse.scroll_delta.y: in->mouse.scroll_delta.x;

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN37@nk_scrollb
	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+352]
	movss	DWORD PTR tv83[ebp], xmm0
	jmp	SHORT $LN38@nk_scrollb
$LN37@nk_scrollb:
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [ecx+348]
	movss	DWORD PTR tv83[ebp], xmm0
$LN38@nk_scrollb:
	movss	xmm0, DWORD PTR tv83[ebp]
	movss	DWORD PTR _scroll_delta$[ebp], xmm0

; 15010:     if (left_mouse_down && left_mouse_click_in_cursor) {

	cmp	DWORD PTR _left_mouse_down$[ebp], 0
	je	$LN30@nk_scrollb
	cmp	DWORD PTR _left_mouse_click_in_cursor$[ebp], 0
	je	$LN30@nk_scrollb

; 15011:         /* update cursor by mouse dragging */
; 15012:         float pixel, delta;
; 15013:         *state = NK_WIDGET_STATE_ACTIVE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 34			; 00000022H

; 15014:         if (o == NK_VERTICAL) {

	cmp	DWORD PTR _o$[ebp], 0
	jne	$LN29@nk_scrollb

; 15015:             float cursor_y;
; 15016:             pixel = in->mouse.delta.y;

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+344]
	movss	DWORD PTR _pixel$4[ebp], xmm0

; 15017:             delta = (pixel / scroll->h) * target;

	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _pixel$4[ebp]
	divss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _target$[ebp]
	movss	DWORD PTR _delta$3[ebp], xmm0

; 15018:             scroll_offset = NK_CLAMP(0, scroll_offset + delta, target - scroll->h);

	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	addss	xmm0, DWORD PTR _delta$3[ebp]
	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm1, DWORD PTR _target$[ebp]
	subss	xmm1, DWORD PTR [eax+12]
	comiss	xmm1, xmm0
	jbe	SHORT $LN39@nk_scrollb
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	addss	xmm0, DWORD PTR _delta$3[ebp]
	movss	DWORD PTR tv135[ebp], xmm0
	jmp	SHORT $LN40@nk_scrollb
$LN39@nk_scrollb:
	mov	ecx, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR tv135[ebp], xmm0
$LN40@nk_scrollb:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv135[ebp]
	jbe	SHORT $LN43@nk_scrollb
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv149[ebp], xmm0
	jmp	SHORT $LN44@nk_scrollb
$LN43@nk_scrollb:
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	addss	xmm0, DWORD PTR _delta$3[ebp]
	mov	edx, DWORD PTR _scroll$[ebp]
	movss	xmm1, DWORD PTR _target$[ebp]
	subss	xmm1, DWORD PTR [edx+12]
	comiss	xmm1, xmm0
	jbe	SHORT $LN41@nk_scrollb
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	addss	xmm0, DWORD PTR _delta$3[ebp]
	movss	DWORD PTR tv148[ebp], xmm0
	jmp	SHORT $LN42@nk_scrollb
$LN41@nk_scrollb:
	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR tv148[ebp], xmm0
$LN42@nk_scrollb:
	movss	xmm0, DWORD PTR tv148[ebp]
	movss	DWORD PTR tv149[ebp], xmm0
$LN44@nk_scrollb:
	movss	xmm0, DWORD PTR tv149[ebp]
	movss	DWORD PTR _scroll_offset$[ebp], xmm0

; 15019:             cursor_y = scroll->y + ((scroll_offset/target) * scroll->h);

	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	divss	xmm0, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR _scroll$[ebp]
	mulss	xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _scroll$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _cursor_y$2[ebp], xmm0

; 15020:             in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y = cursor_y + cursor->h/2.0f;

	mov	eax, DWORD PTR _cursor$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR _cursor_y$2[ebp]
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _in$[ebp]
	movss	DWORD PTR [eax+edx+272], xmm0

; 15021:         } else {

	jmp	$LN28@nk_scrollb
$LN29@nk_scrollb:

; 15022:             float cursor_x;
; 15023:             pixel = in->mouse.delta.x;

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+340]
	movss	DWORD PTR _pixel$4[ebp], xmm0

; 15024:             delta = (pixel / scroll->w) * target;

	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _pixel$4[ebp]
	divss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _target$[ebp]
	movss	DWORD PTR _delta$3[ebp], xmm0

; 15025:             scroll_offset = NK_CLAMP(0, scroll_offset + delta, target - scroll->w);

	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	addss	xmm0, DWORD PTR _delta$3[ebp]
	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm1, DWORD PTR _target$[ebp]
	subss	xmm1, DWORD PTR [eax+8]
	comiss	xmm1, xmm0
	jbe	SHORT $LN45@nk_scrollb
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	addss	xmm0, DWORD PTR _delta$3[ebp]
	movss	DWORD PTR tv180[ebp], xmm0
	jmp	SHORT $LN46@nk_scrollb
$LN45@nk_scrollb:
	mov	ecx, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR tv180[ebp], xmm0
$LN46@nk_scrollb:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv180[ebp]
	jbe	SHORT $LN49@nk_scrollb
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv194[ebp], xmm0
	jmp	SHORT $LN50@nk_scrollb
$LN49@nk_scrollb:
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	addss	xmm0, DWORD PTR _delta$3[ebp]
	mov	edx, DWORD PTR _scroll$[ebp]
	movss	xmm1, DWORD PTR _target$[ebp]
	subss	xmm1, DWORD PTR [edx+8]
	comiss	xmm1, xmm0
	jbe	SHORT $LN47@nk_scrollb
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	addss	xmm0, DWORD PTR _delta$3[ebp]
	movss	DWORD PTR tv193[ebp], xmm0
	jmp	SHORT $LN48@nk_scrollb
$LN47@nk_scrollb:
	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR tv193[ebp], xmm0
$LN48@nk_scrollb:
	movss	xmm0, DWORD PTR tv193[ebp]
	movss	DWORD PTR tv194[ebp], xmm0
$LN50@nk_scrollb:
	movss	xmm0, DWORD PTR tv194[ebp]
	movss	DWORD PTR _scroll_offset$[ebp], xmm0

; 15026:             cursor_x = scroll->x + ((scroll_offset/target) * scroll->w);

	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	divss	xmm0, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR _scroll$[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _scroll$[ebp]
	addss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _cursor_x$1[ebp], xmm0

; 15027:             in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = cursor_x + cursor->w/2.0f;

	mov	eax, DWORD PTR _cursor$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR _cursor_x$1[ebp]
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _in$[ebp]
	movss	DWORD PTR [eax+edx+268], xmm0
$LN28@nk_scrollb:

; 15028:         }
; 15029:     } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_UP) && o == NK_VERTICAL && has_scrolling)||

	jmp	$LN4@nk_scrollb
$LN30@nk_scrollb:

; 15030:             nk_button_behavior(&ws, *empty0, in, NK_BUTTON_DEFAULT)) {

	push	29					; 0000001dH
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_key_pressed
	add	esp, 8
	test	eax, eax
	je	SHORT $LN24@nk_scrollb
	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN24@nk_scrollb
	cmp	DWORD PTR _has_scrolling$[ebp], 0
	jne	SHORT $LN25@nk_scrollb
$LN24@nk_scrollb:
	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _empty0$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	lea	edx, DWORD PTR _ws$[ebp]
	push	edx
	call	_nk_button_behavior
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	$LN26@nk_scrollb
$LN25@nk_scrollb:

; 15031:         /* scroll page up by click on empty space or shortcut */
; 15032:         if (o == NK_VERTICAL)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN23@nk_scrollb

; 15033:             scroll_offset = NK_MAX(0, scroll_offset - scroll->h);

	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	subss	xmm0, DWORD PTR [eax+12]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN51@nk_scrollb
	mov	ecx, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	subss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR tv229[ebp], xmm0
	jmp	SHORT $LN52@nk_scrollb
$LN51@nk_scrollb:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv229[ebp], xmm0
$LN52@nk_scrollb:
	movss	xmm0, DWORD PTR tv229[ebp]
	movss	DWORD PTR _scroll_offset$[ebp], xmm0
	jmp	SHORT $LN22@nk_scrollb
$LN23@nk_scrollb:

; 15034:         else scroll_offset = NK_MAX(0, scroll_offset - scroll->w);

	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	subss	xmm0, DWORD PTR [eax+8]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN53@nk_scrollb
	mov	ecx, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	subss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR tv237[ebp], xmm0
	jmp	SHORT $LN54@nk_scrollb
$LN53@nk_scrollb:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv237[ebp], xmm0
$LN54@nk_scrollb:
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR _scroll_offset$[ebp], xmm0
$LN22@nk_scrollb:

; 15035:     } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_DOWN) && o == NK_VERTICAL && has_scrolling) ||

	jmp	$LN4@nk_scrollb
$LN26@nk_scrollb:

; 15036:         nk_button_behavior(&ws, *empty1, in, NK_BUTTON_DEFAULT)) {

	push	28					; 0000001cH
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_key_pressed
	add	esp, 8
	test	eax, eax
	je	SHORT $LN18@nk_scrollb
	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN18@nk_scrollb
	cmp	DWORD PTR _has_scrolling$[ebp], 0
	jne	SHORT $LN19@nk_scrollb
$LN18@nk_scrollb:
	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _empty1$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	lea	edx, DWORD PTR _ws$[ebp]
	push	edx
	call	_nk_button_behavior
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	$LN20@nk_scrollb
$LN19@nk_scrollb:

; 15037:         /* scroll page down by click on empty space or shortcut */
; 15038:         if (o == NK_VERTICAL)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN17@nk_scrollb

; 15039:             scroll_offset = NK_MIN(scroll_offset + scroll->h, target - scroll->h);

	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	addss	xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _scroll$[ebp]
	movss	xmm1, DWORD PTR _target$[ebp]
	subss	xmm1, DWORD PTR [ecx+12]
	comiss	xmm1, xmm0
	jbe	SHORT $LN55@nk_scrollb
	mov	edx, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	addss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR tv264[ebp], xmm0
	jmp	SHORT $LN56@nk_scrollb
$LN55@nk_scrollb:
	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR tv264[ebp], xmm0
$LN56@nk_scrollb:
	movss	xmm0, DWORD PTR tv264[ebp]
	movss	DWORD PTR _scroll_offset$[ebp], xmm0
	jmp	SHORT $LN16@nk_scrollb
$LN17@nk_scrollb:

; 15040:         else scroll_offset = NK_MIN(scroll_offset + scroll->w, target - scroll->w);

	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	addss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _scroll$[ebp]
	movss	xmm1, DWORD PTR _target$[ebp]
	subss	xmm1, DWORD PTR [ecx+8]
	comiss	xmm1, xmm0
	jbe	SHORT $LN57@nk_scrollb
	mov	edx, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	addss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR tv278[ebp], xmm0
	jmp	SHORT $LN58@nk_scrollb
$LN57@nk_scrollb:
	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR tv278[ebp], xmm0
$LN58@nk_scrollb:
	movss	xmm0, DWORD PTR tv278[ebp]
	movss	DWORD PTR _scroll_offset$[ebp], xmm0
$LN16@nk_scrollb:

; 15041:     } else if (has_scrolling) {

	jmp	$LN4@nk_scrollb
$LN20@nk_scrollb:
	cmp	DWORD PTR _has_scrolling$[ebp], 0
	je	$LN4@nk_scrollb

; 15042:         if ((scroll_delta < 0 || (scroll_delta > 0))) {

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _scroll_delta$[ebp]
	ja	SHORT $LN12@nk_scrollb
	movss	xmm0, DWORD PTR _scroll_delta$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN13@nk_scrollb
$LN12@nk_scrollb:

; 15043:             /* update cursor by mouse scrolling */
; 15044:             scroll_offset = scroll_offset + scroll_step * (-scroll_delta);

	movss	xmm0, DWORD PTR _scroll_delta$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scroll_step$[ebp]
	addss	xmm0, DWORD PTR _scroll_offset$[ebp]
	movss	DWORD PTR _scroll_offset$[ebp], xmm0

; 15045:             if (o == NK_VERTICAL)

	cmp	DWORD PTR _o$[ebp], 0
	jne	$LN11@nk_scrollb

; 15046:                 scroll_offset = NK_CLAMP(0, scroll_offset, target - scroll->h);

	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR [eax+12]
	comiss	xmm0, DWORD PTR _scroll_offset$[ebp]
	jbe	SHORT $LN59@nk_scrollb
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	movss	DWORD PTR tv294[ebp], xmm0
	jmp	SHORT $LN60@nk_scrollb
$LN59@nk_scrollb:
	mov	ecx, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR tv294[ebp], xmm0
$LN60@nk_scrollb:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv294[ebp]
	jbe	SHORT $LN63@nk_scrollb
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv304[ebp], xmm0
	jmp	SHORT $LN64@nk_scrollb
$LN63@nk_scrollb:
	mov	edx, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR [edx+12]
	comiss	xmm0, DWORD PTR _scroll_offset$[ebp]
	jbe	SHORT $LN61@nk_scrollb
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	movss	DWORD PTR tv303[ebp], xmm0
	jmp	SHORT $LN62@nk_scrollb
$LN61@nk_scrollb:
	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR tv303[ebp], xmm0
$LN62@nk_scrollb:
	movss	xmm0, DWORD PTR tv303[ebp]
	movss	DWORD PTR tv304[ebp], xmm0
$LN64@nk_scrollb:
	movss	xmm0, DWORD PTR tv304[ebp]
	movss	DWORD PTR _scroll_offset$[ebp], xmm0
	jmp	$LN10@nk_scrollb
$LN11@nk_scrollb:

; 15047:             else scroll_offset = NK_CLAMP(0, scroll_offset, target - scroll->w);

	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR [eax+8]
	comiss	xmm0, DWORD PTR _scroll_offset$[ebp]
	jbe	SHORT $LN65@nk_scrollb
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	movss	DWORD PTR tv312[ebp], xmm0
	jmp	SHORT $LN66@nk_scrollb
$LN65@nk_scrollb:
	mov	ecx, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR tv312[ebp], xmm0
$LN66@nk_scrollb:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv312[ebp]
	jbe	SHORT $LN69@nk_scrollb
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv322[ebp], xmm0
	jmp	SHORT $LN70@nk_scrollb
$LN69@nk_scrollb:
	mov	edx, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR [edx+8]
	comiss	xmm0, DWORD PTR _scroll_offset$[ebp]
	jbe	SHORT $LN67@nk_scrollb
	movss	xmm0, DWORD PTR _scroll_offset$[ebp]
	movss	DWORD PTR tv321[ebp], xmm0
	jmp	SHORT $LN68@nk_scrollb
$LN67@nk_scrollb:
	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR tv321[ebp], xmm0
$LN68@nk_scrollb:
	movss	xmm0, DWORD PTR tv321[ebp]
	movss	DWORD PTR tv322[ebp], xmm0
$LN70@nk_scrollb:
	movss	xmm0, DWORD PTR tv322[ebp]
	movss	DWORD PTR _scroll_offset$[ebp], xmm0
$LN10@nk_scrollb:

; 15048:         } else if (nk_input_is_key_pressed(in, NK_KEY_SCROLL_START)) {

	jmp	SHORT $LN4@nk_scrollb
$LN13@nk_scrollb:
	push	26					; 0000001aH
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_key_pressed
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@nk_scrollb

; 15049:             /* update cursor to the beginning  */
; 15050:             if (o == NK_VERTICAL) scroll_offset = 0;

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN7@nk_scrollb
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _scroll_offset$[ebp], xmm0
$LN7@nk_scrollb:

; 15051:         } else if (nk_input_is_key_pressed(in, NK_KEY_SCROLL_END)) {

	jmp	SHORT $LN4@nk_scrollb
$LN8@nk_scrollb:
	push	27					; 0000001bH
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_key_pressed
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@nk_scrollb

; 15052:             /* update cursor to the end */
; 15053:             if (o == NK_VERTICAL) scroll_offset = target - scroll->h;

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN4@nk_scrollb
	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR _target$[ebp]
	subss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _scroll_offset$[ebp], xmm0
$LN4@nk_scrollb:

; 15054:         }
; 15055:     }
; 15056:     if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(in, *scroll))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 16					; 00000010H
	je	SHORT $LN3@nk_scrollb
	mov	eax, DWORD PTR _scroll$[ebp]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_nk_input_is_mouse_prev_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN3@nk_scrollb

; 15057:         *state |= NK_WIDGET_STATE_ENTERED;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 8
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN1@nk_scrollb
$LN3@nk_scrollb:

; 15058:     else if (nk_input_is_mouse_prev_hovering_rect(in, *scroll))

	mov	eax, DWORD PTR _scroll$[ebp]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_nk_input_is_mouse_prev_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@nk_scrollb

; 15059:         *state |= NK_WIDGET_STATE_LEFT;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@nk_scrollb:

; 15060:     return scroll_offset;

	fld	DWORD PTR _scroll_offset$[ebp]
$LN35@nk_scrollb:

; 15061: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN73@nk_scrollb
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN73@nk_scrollb:
	DD	1
	DD	$LN72@nk_scrollb
$LN72@nk_scrollb:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN71@nk_scrollb
$LN71@nk_scrollb:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	0
_nk_scrollbar_behavior ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_do_progress
_TEXT	SEGMENT
tv296 = -292						; size = 8
tv292 = -284						; size = 4
tv255 = -280						; size = 8
tv251 = -272						; size = 4
tv159 = -272						; size = 4
tv137 = -272						; size = 4
tv91 = -272						; size = 4
$T1 = -264						; size = 16
_cursor$ = -48						; size = 16
_prog_value$ = -24					; size = 4
_prog_scale$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_out$ = 12						; size = 4
_bounds$ = 16						; size = 16
_value$ = 32						; size = 4
_max$ = 36						; size = 4
_modifiable$ = 40					; size = 4
_style$ = 44						; size = 4
_in$ = 48						; size = 4
_nk_do_progress PROC					; COMDAT

; 14956: {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 14957:     float prog_scale;
; 14958:     nk_size prog_value;
; 14959:     struct nk_rect cursor;
; 14960: 
; 14961:     NK_ASSERT(style);

	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN7@nk_do_prog
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_progress@@9@9@ddf8d5d8
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@OIINANNN@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_do_prog:

; 14962:     NK_ASSERT(out);

	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN8@nk_do_prog
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_progress@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17CMKEDJDI@?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_do_prog:

; 14963:     if (!out || !style) return 0;

	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN3@nk_do_prog
	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN4@nk_do_prog
$LN3@nk_do_prog:
	xor	eax, eax
	jmp	$LN5@nk_do_prog
$LN4@nk_do_prog:

; 14964: 
; 14965:     /* calculate progressbar cursor */
; 14966:     cursor.w = NK_MAX(bounds.w, 2 * style->padding.x + 2 * style->border);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+144]
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx+132]
	addss	xmm0, xmm1
	comiss	xmm0, DWORD PTR _bounds$[ebp+8]
	jbe	SHORT $LN9@nk_do_prog
	mov	edx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+144]
	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [eax+132]
	addss	xmm0, xmm1
	movss	DWORD PTR tv91[ebp], xmm0
	jmp	SHORT $LN10@nk_do_prog
$LN9@nk_do_prog:
	movss	xmm0, DWORD PTR _bounds$[ebp+8]
	movss	DWORD PTR tv91[ebp], xmm0
$LN10@nk_do_prog:
	movss	xmm0, DWORD PTR tv91[ebp]
	movss	DWORD PTR _cursor$[ebp+8], xmm0

; 14967:     cursor.h = NK_MAX(bounds.h, 2 * style->padding.y + 2 * style->border);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+148]
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx+132]
	addss	xmm0, xmm1
	comiss	xmm0, DWORD PTR _bounds$[ebp+12]
	jbe	SHORT $LN11@nk_do_prog
	mov	edx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+148]
	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [eax+132]
	addss	xmm0, xmm1
	movss	DWORD PTR tv137[ebp], xmm0
	jmp	SHORT $LN12@nk_do_prog
$LN11@nk_do_prog:
	movss	xmm0, DWORD PTR _bounds$[ebp+12]
	movss	DWORD PTR tv137[ebp], xmm0
$LN12@nk_do_prog:
	movss	xmm0, DWORD PTR tv137[ebp]
	movss	DWORD PTR _cursor$[ebp+12], xmm0

; 14968:     cursor = nk_pad_rect(bounds, nk_vec2(style->padding.x + style->border, style->padding.y + style->border));

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR [eax+148]
	addss	xmm0, DWORD PTR [ecx+132]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR [edx+144]
	addss	xmm0, DWORD PTR [eax+132]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_nk_pad_rect
	add	esp, 28					; 0000001cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _cursor$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cursor$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _cursor$[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _cursor$[ebp+12], eax

; 14969:     prog_scale = (float)value / (float)max;

	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR tv251[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv251[ebp]
	mov	ecx, DWORD PTR tv251[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv255[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv255[ebp]
	mov	edx, DWORD PTR _max$[ebp]
	mov	DWORD PTR tv292[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv292[ebp]
	mov	eax, DWORD PTR tv292[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv296[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv296[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _prog_scale$[ebp], xmm0

; 14970:     cursor.w = (bounds.w - 2) * prog_scale;

	movss	xmm0, DWORD PTR _bounds$[ebp+8]
	subss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _prog_scale$[ebp]
	movss	DWORD PTR _cursor$[ebp+8], xmm0

; 14971: 
; 14972:     /* update progressbar */
; 14973:     prog_value = NK_MIN(value, max);

	mov	eax, DWORD PTR _value$[ebp]
	cmp	eax, DWORD PTR _max$[ebp]
	jae	SHORT $LN13@nk_do_prog
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR tv159[ebp], ecx
	jmp	SHORT $LN14@nk_do_prog
$LN13@nk_do_prog:
	mov	edx, DWORD PTR _max$[ebp]
	mov	DWORD PTR tv159[ebp], edx
$LN14@nk_do_prog:
	mov	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR _prog_value$[ebp], eax

; 14974:     prog_value = nk_progress_behavior(state, in, bounds, max, prog_value, modifiable);

	mov	eax, DWORD PTR _modifiable$[ebp]
	push	eax
	mov	ecx, DWORD PTR _prog_value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _max$[ebp]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_nk_progress_behavior
	add	esp, 36					; 00000024H
	mov	DWORD PTR _prog_value$[ebp], eax

; 14975: 
; 14976:     /* draw progressbar */
; 14977:     if (style->draw_begin) style->draw_begin(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+156], 0
	je	SHORT $LN2@nk_do_prog
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@nk_do_prog:

; 14978:     nk_draw_progress(out, *state, style, &bounds, &cursor, value, max);

	mov	eax, DWORD PTR _max$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cursor$[ebp]
	push	edx
	lea	eax, DWORD PTR _bounds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_draw_progress
	add	esp, 28					; 0000001cH

; 14979:     if (style->draw_end) style->draw_end(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+160], 0
	je	SHORT $LN1@nk_do_prog
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@nk_do_prog:

; 14980:     return prog_value;

	mov	eax, DWORD PTR _prog_value$[ebp]
$LN5@nk_do_prog:

; 14981: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@nk_do_prog
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN17@nk_do_prog:
	DD	1
	DD	$LN16@nk_do_prog
$LN16@nk_do_prog:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN15@nk_do_prog
$LN15@nk_do_prog:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_nk_do_progress ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_progress
_TEXT	SEGMENT
_cursor$ = -20						; size = 4
_background$ = -8					; size = 4
_out$ = 8						; size = 4
_state$ = 12						; size = 4
_style$ = 16						; size = 4
_bounds$ = 20						; size = 4
_scursor$ = 24						; size = 4
_value$ = 28						; size = 4
_max$ = 32						; size = 4
_nk_draw_progress PROC					; COMDAT

; 14919: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 14920:     const struct nk_style_item *background;
; 14921:     const struct nk_style_item *cursor;
; 14922: 
; 14923:     NK_UNUSED(max);
; 14924:     NK_UNUSED(value);
; 14925: 
; 14926:     /* select correct colors/images to draw */
; 14927:     if (state & NK_WIDGET_STATE_ACTIVED) {

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN8@nk_draw_pr

; 14928:         background = &style->active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _background$[ebp], eax

; 14929:         cursor = &style->cursor_active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 104				; 00000068H
	mov	DWORD PTR _cursor$[ebp], eax
	jmp	SHORT $LN5@nk_draw_pr
$LN8@nk_draw_pr:

; 14930:     } else if (state & NK_WIDGET_STATE_HOVER){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN6@nk_draw_pr

; 14931:         background = &style->hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _background$[ebp], eax

; 14932:         cursor = &style->cursor_hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 84					; 00000054H
	mov	DWORD PTR _cursor$[ebp], eax

; 14933:     } else {

	jmp	SHORT $LN5@nk_draw_pr
$LN6@nk_draw_pr:

; 14934:         background = &style->normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	DWORD PTR _background$[ebp], eax

; 14935:         cursor = &style->cursor_normal;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _cursor$[ebp], eax
$LN5@nk_draw_pr:

; 14936:     }
; 14937: 
; 14938:     /* draw background */
; 14939:     if (background->type == NK_STYLE_ITEM_COLOR) {

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN4@nk_draw_pr

; 14940:         nk_fill_rect(out, *bounds, style->rounding, background->data.color);

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+128]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 14941:         nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+132]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+128]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_stroke_rect
	add	esp, 32					; 00000020H
	jmp	SHORT $LN3@nk_draw_pr
$LN4@nk_draw_pr:

; 14942:     } else nk_draw_image(out, *bounds, &background->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _background$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_image
	add	esp, 28					; 0000001cH
$LN3@nk_draw_pr:

; 14943: 
; 14944:     /* draw cursor */
; 14945:     if (background->type == NK_STYLE_ITEM_COLOR) {

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN2@nk_draw_pr

; 14946:         nk_fill_rect(out, *scursor, style->rounding, cursor->data.color);

	mov	eax, DWORD PTR _cursor$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+128]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _scursor$[ebp]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 14947:         nk_stroke_rect(out, *scursor, style->rounding, style->border, style->border_color);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+132]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+128]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _scursor$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_stroke_rect
	add	esp, 32					; 00000020H
	jmp	SHORT $LN1@nk_draw_pr
$LN2@nk_draw_pr:

; 14948:     } else nk_draw_image(out, *scursor, &cursor->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _cursor$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _scursor$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_image
	add	esp, 28					; 0000001cH
$LN1@nk_draw_pr:

; 14949: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_progress ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_progress_behavior
_TEXT	SEGMENT
tv135 = -256						; size = 4
tv206 = -252						; size = 8
tv202 = -244						; size = 4
tv197 = -240						; size = 8
tv193 = -232						; size = 4
tv151 = -232						; size = 4
tv92 = -232						; size = 4
_ratio$1 = -32						; size = 4
_left_mouse_click_in_cursor$2 = -20			; size = 4
_left_mouse_down$3 = -8					; size = 4
_state$ = 8						; size = 4
_in$ = 12						; size = 4
_r$ = 16						; size = 16
_max$ = 32						; size = 4
_value$ = 36						; size = 4
_modifiable$ = 40					; size = 4
_nk_progress_behavior PROC				; COMDAT

; 14890: {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 14891:     nk_widget_state_reset(state);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2
	je	SHORT $LN9@nk_progres
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 6
	jmp	SHORT $LN8@nk_progres
$LN9@nk_progres:
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 4
$LN8@nk_progres:

; 14892:     if (in && modifiable && nk_input_is_mouse_hovering_rect(in, r)) {

	cmp	DWORD PTR _in$[ebp], 0
	je	$LN5@nk_progres
	cmp	DWORD PTR _modifiable$[ebp], 0
	je	$LN5@nk_progres
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN5@nk_progres

; 14893:         int left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in$[ebp]
	mov	eax, DWORD PTR [edx+ecx+260]
	mov	DWORD PTR _left_mouse_down$3[ebp], eax

; 14894:         int left_mouse_click_in_cursor = nk_input_has_mouse_click_down_in_rect(in,
; 14895:             NK_BUTTON_LEFT, r, nk_true);

	push	1
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_has_mouse_click_down_in_rect
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _left_mouse_click_in_cursor$2[ebp], eax

; 14896: 
; 14897:         if (left_mouse_down && left_mouse_click_in_cursor) {

	cmp	DWORD PTR _left_mouse_down$3[ebp], 0
	je	$LN6@nk_progres
	cmp	DWORD PTR _left_mouse_click_in_cursor$2[ebp], 0
	je	$LN6@nk_progres

; 14898:             float ratio = NK_MAX(0, (float)(in->mouse.pos.x - r.x)) / (float)r.w;

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+324]
	subss	xmm0, DWORD PTR _r$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN12@nk_progres
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [ecx+324]
	subss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR tv92[ebp], xmm0
	jmp	SHORT $LN13@nk_progres
$LN12@nk_progres:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv92[ebp], xmm0
$LN13@nk_progres:
	movss	xmm0, DWORD PTR tv92[ebp]
	divss	xmm0, DWORD PTR _r$[ebp+8]
	movss	DWORD PTR _ratio$1[ebp], xmm0

; 14899:             value = (nk_size)NK_MAX(0,((float)max * ratio));

	mov	eax, DWORD PTR _max$[ebp]
	mov	DWORD PTR tv193[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv193[ebp]
	mov	ecx, DWORD PTR tv193[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv197[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv197[ebp]
	mulss	xmm0, DWORD PTR _ratio$1[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN14@nk_progres
	mov	edx, DWORD PTR _max$[ebp]
	mov	DWORD PTR tv202[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv202[ebp]
	mov	eax, DWORD PTR tv202[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv206[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv206[ebp]
	mulss	xmm0, DWORD PTR _ratio$1[ebp]
	movss	DWORD PTR tv135[ebp], xmm0
	jmp	SHORT $LN15@nk_progres
$LN14@nk_progres:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv135[ebp], xmm0
$LN15@nk_progres:
	movss	xmm0, DWORD PTR tv135[ebp]
	call	__ftoui3
	mov	DWORD PTR _value$[ebp], eax

; 14900:             *state = NK_WIDGET_STATE_ACTIVE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 34			; 00000022H
	jmp	SHORT $LN5@nk_progres
$LN6@nk_progres:

; 14901:         } else *state = NK_WIDGET_STATE_HOVERED;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H
$LN5@nk_progres:

; 14902:     }
; 14903: 
; 14904:     /* set progressbar widget state */
; 14905:     if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(in, r))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 16					; 00000010H
	je	SHORT $LN4@nk_progres
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_mouse_prev_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN4@nk_progres

; 14906:         *state |= NK_WIDGET_STATE_ENTERED;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 8
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@nk_progres
$LN4@nk_progres:

; 14907:     else if (nk_input_is_mouse_prev_hovering_rect(in, r))

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_mouse_prev_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN2@nk_progres

; 14908:         *state |= NK_WIDGET_STATE_LEFT;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
$LN2@nk_progres:

; 14909: 
; 14910:     if (!max) return value;

	cmp	DWORD PTR _max$[ebp], 0
	jne	SHORT $LN1@nk_progres
	mov	eax, DWORD PTR _value$[ebp]
	jmp	SHORT $LN10@nk_progres
$LN1@nk_progres:

; 14911:     value = NK_MIN(value, max);

	mov	eax, DWORD PTR _value$[ebp]
	cmp	eax, DWORD PTR _max$[ebp]
	jae	SHORT $LN16@nk_progres
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR tv151[ebp], ecx
	jmp	SHORT $LN17@nk_progres
$LN16@nk_progres:
	mov	edx, DWORD PTR _max$[ebp]
	mov	DWORD PTR tv151[ebp], edx
$LN17@nk_progres:
	mov	eax, DWORD PTR tv151[ebp]
	mov	DWORD PTR _value$[ebp], eax

; 14912:     return value;

	mov	eax, DWORD PTR _value$[ebp]
$LN10@nk_progres:

; 14913: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_progress_behavior ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_do_slider
_TEXT	SEGMENT
tv193 = -364						; size = 4
tv194 = -360						; size = 4
tv190 = -356						; size = 4
tv188 = -356						; size = 4
tv186 = -356						; size = 4
tv133 = -356						; size = 4
tv89 = -356						; size = 4
_button$1 = -156					; size = 16
_ws$2 = -132						; size = 4
_logical_cursor$ = -120					; size = 16
_visual_cursor$ = -96					; size = 16
_cursor_offset$ = -72					; size = 4
_slider_steps$ = -60					; size = 4
_slider_value$ = -48					; size = 4
_slider_max$ = -36					; size = 4
_slider_min$ = -24					; size = 4
_slider_range$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_out$ = 12						; size = 4
_bounds$ = 16						; size = 16
_min$ = 32						; size = 4
_val$ = 36						; size = 4
_max$ = 40						; size = 4
_step$ = 44						; size = 4
_style$ = 48						; size = 4
_in$ = 52						; size = 4
_font$ = 56						; size = 4
_nk_do_slider PROC					; COMDAT

; 14798: {

	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 14799:     float slider_range;
; 14800:     float slider_min;
; 14801:     float slider_max;
; 14802:     float slider_value;
; 14803:     float slider_steps;
; 14804:     float cursor_offset;
; 14805: 
; 14806:     struct nk_rect visual_cursor;
; 14807:     struct nk_rect logical_cursor;
; 14808: 
; 14809:     NK_ASSERT(style);

	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN10@nk_do_slid
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_slider@@9@9@ddf8d5d8
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@OIINANNN@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_do_slid:

; 14810:     NK_ASSERT(out);

	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN11@nk_do_slid
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_slider@@9@9@ddf8d5d8
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17CMKEDJDI@?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_do_slid:

; 14811:     if (!out || !style)

	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN6@nk_do_slid
	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN7@nk_do_slid
$LN6@nk_do_slid:

; 14812:         return 0;

	fldz
	jmp	$LN8@nk_do_slid
$LN7@nk_do_slid:

; 14813: 
; 14814:     /* remove padding from slider bounds */
; 14815:     bounds.x = bounds.x + style->padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _bounds$[ebp]
	addss	xmm0, DWORD PTR [eax+152]
	movss	DWORD PTR _bounds$[ebp], xmm0

; 14816:     bounds.y = bounds.y + style->padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	addss	xmm0, DWORD PTR [eax+156]
	movss	DWORD PTR _bounds$[ebp+4], xmm0

; 14817:     bounds.h = NK_MAX(bounds.h, 2*style->padding.y);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+156]
	comiss	xmm0, DWORD PTR _bounds$[ebp+12]
	jbe	SHORT $LN12@nk_do_slid
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+156]
	movss	DWORD PTR tv89[ebp], xmm0
	jmp	SHORT $LN13@nk_do_slid
$LN12@nk_do_slid:
	movss	xmm0, DWORD PTR _bounds$[ebp+12]
	movss	DWORD PTR tv89[ebp], xmm0
$LN13@nk_do_slid:
	movss	xmm0, DWORD PTR tv89[ebp]
	movss	DWORD PTR _bounds$[ebp+12], xmm0

; 14818:     bounds.w = NK_MAX(bounds.w, 2*style->padding.x + style->cursor_size.x);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+152]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+168]
	comiss	xmm0, DWORD PTR _bounds$[ebp+8]
	jbe	SHORT $LN14@nk_do_slid
	mov	edx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+152]
	mov	eax, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [eax+168]
	movss	DWORD PTR tv133[ebp], xmm0
	jmp	SHORT $LN15@nk_do_slid
$LN14@nk_do_slid:
	movss	xmm0, DWORD PTR _bounds$[ebp+8]
	movss	DWORD PTR tv133[ebp], xmm0
$LN15@nk_do_slid:
	movss	xmm0, DWORD PTR tv133[ebp]
	movss	DWORD PTR _bounds$[ebp+8], xmm0

; 14819:     bounds.w -= 2 * style->padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+152]
	movss	xmm1, DWORD PTR _bounds$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _bounds$[ebp+8], xmm1

; 14820:     bounds.h -= 2 * style->padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+156]
	movss	xmm1, DWORD PTR _bounds$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _bounds$[ebp+12], xmm1

; 14821: 
; 14822:     /* optional buttons */
; 14823:     if (style->show_buttons) {

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+176], 0
	je	$LN5@nk_do_slid

; 14824:         nk_flags ws;
; 14825:         struct nk_rect button;
; 14826:         button.y = bounds.y;

	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	movss	DWORD PTR _button$1[ebp+4], xmm0

; 14827:         button.w = bounds.h;

	movss	xmm0, DWORD PTR _bounds$[ebp+12]
	movss	DWORD PTR _button$1[ebp+8], xmm0

; 14828:         button.h = bounds.h;

	movss	xmm0, DWORD PTR _bounds$[ebp+12]
	movss	DWORD PTR _button$1[ebp+12], xmm0

; 14829: 
; 14830:         /* decrement button */
; 14831:         button.x = bounds.x;

	movss	xmm0, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR _button$1[ebp], xmm0

; 14832:         if (nk_do_button_symbol(&ws, out, button, style->dec_symbol, NK_BUTTON_DEFAULT,
; 14833:             &style->dec_button, in, font))

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	add	edx, 308				; 00000134H
	push	edx
	push	0
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+440]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _button$1[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _button$1[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _button$1[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _button$1[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	lea	eax, DWORD PTR _ws$2[ebp]
	push	eax
	call	_nk_do_button_symbol
	add	esp, 44					; 0000002cH
	test	eax, eax
	je	SHORT $LN4@nk_do_slid

; 14834:             val -= step;

	movss	xmm0, DWORD PTR _val$[ebp]
	subss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0
$LN4@nk_do_slid:

; 14835: 
; 14836:         /* increment button */
; 14837:         button.x = (bounds.x + bounds.w) - button.w;

	movss	xmm0, DWORD PTR _bounds$[ebp]
	addss	xmm0, DWORD PTR _bounds$[ebp+8]
	subss	xmm0, DWORD PTR _button$1[ebp+8]
	movss	DWORD PTR _button$1[ebp], xmm0

; 14838:         if (nk_do_button_symbol(&ws, out, button, style->inc_symbol, NK_BUTTON_DEFAULT,
; 14839:             &style->inc_button, in, font))

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	add	edx, 180				; 000000b4H
	push	edx
	push	0
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+436]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _button$1[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _button$1[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _button$1[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _button$1[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	lea	eax, DWORD PTR _ws$2[ebp]
	push	eax
	call	_nk_do_button_symbol
	add	esp, 44					; 0000002cH
	test	eax, eax
	je	SHORT $LN3@nk_do_slid

; 14840:             val += step;

	movss	xmm0, DWORD PTR _val$[ebp]
	addss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR _val$[ebp], xmm0
$LN3@nk_do_slid:

; 14841: 
; 14842:         bounds.x = bounds.x + button.w + style->spacing.x;

	movss	xmm0, DWORD PTR _bounds$[ebp]
	addss	xmm0, DWORD PTR _button$1[ebp+8]
	mov	eax, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [eax+160]
	movss	DWORD PTR _bounds$[ebp], xmm0

; 14843:         bounds.w = bounds.w - (2*button.w + 2*style->spacing.x);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _button$1[ebp+8]
	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [eax+160]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _bounds$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _bounds$[ebp+8], xmm1
$LN5@nk_do_slid:

; 14844:     }
; 14845: 
; 14846:     /* remove one cursor size to support visual cursor */
; 14847:     bounds.x += style->cursor_size.x*0.5f;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR [eax+168]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR _bounds$[ebp], xmm0

; 14848:     bounds.w -= style->cursor_size.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _bounds$[ebp+8]
	subss	xmm0, DWORD PTR [eax+168]
	movss	DWORD PTR _bounds$[ebp+8], xmm0

; 14849: 
; 14850:     /* make sure the provided values are correct */
; 14851:     slider_max = NK_MAX(min, max);

	movss	xmm0, DWORD PTR _max$[ebp]
	comiss	xmm0, DWORD PTR _min$[ebp]
	jbe	SHORT $LN16@nk_do_slid
	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR tv186[ebp], xmm0
	jmp	SHORT $LN17@nk_do_slid
$LN16@nk_do_slid:
	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR tv186[ebp], xmm0
$LN17@nk_do_slid:
	movss	xmm0, DWORD PTR tv186[ebp]
	movss	DWORD PTR _slider_max$[ebp], xmm0

; 14852:     slider_min = NK_MIN(min, max);

	movss	xmm0, DWORD PTR _max$[ebp]
	comiss	xmm0, DWORD PTR _min$[ebp]
	jbe	SHORT $LN18@nk_do_slid
	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR tv188[ebp], xmm0
	jmp	SHORT $LN19@nk_do_slid
$LN18@nk_do_slid:
	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR tv188[ebp], xmm0
$LN19@nk_do_slid:
	movss	xmm0, DWORD PTR tv188[ebp]
	movss	DWORD PTR _slider_min$[ebp], xmm0

; 14853:     slider_value = NK_CLAMP(slider_min, val, slider_max);

	movss	xmm0, DWORD PTR _slider_max$[ebp]
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN20@nk_do_slid
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR tv190[ebp], xmm0
	jmp	SHORT $LN21@nk_do_slid
$LN20@nk_do_slid:
	movss	xmm0, DWORD PTR _slider_max$[ebp]
	movss	DWORD PTR tv190[ebp], xmm0
$LN21@nk_do_slid:
	movss	xmm0, DWORD PTR _slider_min$[ebp]
	comiss	xmm0, DWORD PTR tv190[ebp]
	jbe	SHORT $LN24@nk_do_slid
	movss	xmm0, DWORD PTR _slider_min$[ebp]
	movss	DWORD PTR tv194[ebp], xmm0
	jmp	SHORT $LN25@nk_do_slid
$LN24@nk_do_slid:
	movss	xmm0, DWORD PTR _slider_max$[ebp]
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN22@nk_do_slid
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR tv193[ebp], xmm0
	jmp	SHORT $LN23@nk_do_slid
$LN22@nk_do_slid:
	movss	xmm0, DWORD PTR _slider_max$[ebp]
	movss	DWORD PTR tv193[ebp], xmm0
$LN23@nk_do_slid:
	movss	xmm0, DWORD PTR tv193[ebp]
	movss	DWORD PTR tv194[ebp], xmm0
$LN25@nk_do_slid:
	movss	xmm0, DWORD PTR tv194[ebp]
	movss	DWORD PTR _slider_value$[ebp], xmm0

; 14854:     slider_range = slider_max - slider_min;

	movss	xmm0, DWORD PTR _slider_max$[ebp]
	subss	xmm0, DWORD PTR _slider_min$[ebp]
	movss	DWORD PTR _slider_range$[ebp], xmm0

; 14855:     slider_steps = slider_range / step;

	movss	xmm0, DWORD PTR _slider_range$[ebp]
	divss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR _slider_steps$[ebp], xmm0

; 14856:     cursor_offset = (slider_value - slider_min) / step;

	movss	xmm0, DWORD PTR _slider_value$[ebp]
	subss	xmm0, DWORD PTR _slider_min$[ebp]
	divss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR _cursor_offset$[ebp], xmm0

; 14857: 
; 14858:     /* calculate cursor
; 14859:     Basically you have two cursors. One for visual representation and interaction
; 14860:     and one for updating the actual cursor value. */
; 14861:     logical_cursor.h = bounds.h;

	movss	xmm0, DWORD PTR _bounds$[ebp+12]
	movss	DWORD PTR _logical_cursor$[ebp+12], xmm0

; 14862:     logical_cursor.w = bounds.w / slider_steps;

	movss	xmm0, DWORD PTR _bounds$[ebp+8]
	divss	xmm0, DWORD PTR _slider_steps$[ebp]
	movss	DWORD PTR _logical_cursor$[ebp+8], xmm0

; 14863:     logical_cursor.x = bounds.x + (logical_cursor.w * cursor_offset);

	movss	xmm0, DWORD PTR _logical_cursor$[ebp+8]
	mulss	xmm0, DWORD PTR _cursor_offset$[ebp]
	addss	xmm0, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR _logical_cursor$[ebp], xmm0

; 14864:     logical_cursor.y = bounds.y;

	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	movss	DWORD PTR _logical_cursor$[ebp+4], xmm0

; 14865: 
; 14866:     visual_cursor.h = style->cursor_size.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR [eax+172]
	movss	DWORD PTR _visual_cursor$[ebp+12], xmm0

; 14867:     visual_cursor.w = style->cursor_size.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR [eax+168]
	movss	DWORD PTR _visual_cursor$[ebp+8], xmm0

; 14868:     visual_cursor.y = (bounds.y + bounds.h*0.5f) - visual_cursor.h*0.5f;

	movss	xmm0, DWORD PTR _bounds$[ebp+12]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR _bounds$[ebp+4]
	movss	xmm1, DWORD PTR _visual_cursor$[ebp+12]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm0, xmm1
	movss	DWORD PTR _visual_cursor$[ebp+4], xmm0

; 14869:     visual_cursor.x = logical_cursor.x - visual_cursor.w*0.5f;

	movss	xmm0, DWORD PTR _visual_cursor$[ebp+8]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR _logical_cursor$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _visual_cursor$[ebp], xmm1

; 14870: 
; 14871:     slider_value = nk_slider_behavior(state, &logical_cursor, &visual_cursor,
; 14872:         in, bounds, slider_min, slider_max, slider_value, step, slider_steps);

	push	ecx
	movss	xmm0, DWORD PTR _slider_steps$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _slider_value$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _slider_max$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _slider_min$[ebp]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _visual_cursor$[ebp]
	push	ecx
	lea	edx, DWORD PTR _logical_cursor$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_slider_behavior
	add	esp, 52					; 00000034H
	fstp	DWORD PTR _slider_value$[ebp]

; 14873:     visual_cursor.x = logical_cursor.x - visual_cursor.w*0.5f;

	movss	xmm0, DWORD PTR _visual_cursor$[ebp+8]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR _logical_cursor$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _visual_cursor$[ebp], xmm1

; 14874: 
; 14875:     /* draw slider */
; 14876:     if (style->draw_begin) style->draw_begin(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+448], 0
	je	SHORT $LN2@nk_do_slid
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+444]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+448]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@nk_do_slid:

; 14877:     nk_draw_slider(out, *state, style, &bounds, &visual_cursor, slider_min, slider_value, slider_max);

	push	ecx
	movss	xmm0, DWORD PTR _slider_max$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _slider_value$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _slider_min$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _visual_cursor$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_draw_slider
	add	esp, 32					; 00000020H

; 14878:     if (style->draw_end) style->draw_end(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+452], 0
	je	SHORT $LN1@nk_do_slid
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+444]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+452]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@nk_do_slid:

; 14879:     return slider_value;

	fld	DWORD PTR _slider_value$[ebp]
$LN8@nk_do_slid:

; 14880: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@nk_do_slid
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN31@nk_do_slid:
	DD	4
	DD	$LN30@nk_do_slid
$LN30@nk_do_slid:
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN26@nk_do_slid
	DD	-120					; ffffff88H
	DD	16					; 00000010H
	DD	$LN27@nk_do_slid
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN28@nk_do_slid
	DD	-156					; ffffff64H
	DD	16					; 00000010H
	DD	$LN29@nk_do_slid
$LN29@nk_do_slid:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN28@nk_do_slid:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	0
$LN27@nk_do_slid:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN26@nk_do_slid:
	DB	118					; 00000076H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_nk_do_slider ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_slider
_TEXT	SEGMENT
_cursor$ = -84						; size = 4
_bar_color$ = -72					; size = 4
_background$ = -60					; size = 4
_bar$ = -48						; size = 16
_fill$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_state$ = 12						; size = 4
_style$ = 16						; size = 4
_bounds$ = 20						; size = 4
_visual_cursor$ = 24					; size = 4
_min$ = 28						; size = 4
_value$ = 32						; size = 4
_max$ = 36						; size = 4
_nk_draw_slider PROC					; COMDAT

; 14735: {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 14736:     struct nk_rect fill;
; 14737:     struct nk_rect bar;
; 14738:     const struct nk_style_item *background;
; 14739: 
; 14740:     /* select correct slider images/colors */
; 14741:     struct nk_color bar_color;
; 14742:     const struct nk_style_item *cursor;
; 14743: 
; 14744:     NK_UNUSED(min);
; 14745:     NK_UNUSED(max);
; 14746:     NK_UNUSED(value);
; 14747: 
; 14748:     if (state & NK_WIDGET_STATE_ACTIVED) {

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN8@nk_draw_sl

; 14749:         background = &style->active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _background$[ebp], eax

; 14750:         bar_color = style->bar_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _bar_color$[ebp], ecx

; 14751:         cursor = &style->cursor_active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 120				; 00000078H
	mov	DWORD PTR _cursor$[ebp], eax
	jmp	SHORT $LN5@nk_draw_sl
$LN8@nk_draw_sl:

; 14752:     } else if (state & NK_WIDGET_STATE_HOVER) {

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN6@nk_draw_sl

; 14753:         background = &style->hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _background$[ebp], eax

; 14754:         bar_color = style->bar_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _bar_color$[ebp], ecx

; 14755:         cursor = &style->cursor_hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 100				; 00000064H
	mov	DWORD PTR _cursor$[ebp], eax

; 14756:     } else {

	jmp	SHORT $LN5@nk_draw_sl
$LN6@nk_draw_sl:

; 14757:         background = &style->normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	DWORD PTR _background$[ebp], eax

; 14758:         bar_color = style->bar_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _bar_color$[ebp], ecx

; 14759:         cursor = &style->cursor_normal;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 80					; 00000050H
	mov	DWORD PTR _cursor$[ebp], eax
$LN5@nk_draw_sl:

; 14760:     }
; 14761: 
; 14762:     /* calculate slider background bar */
; 14763:     bar.x = bounds->x;

	mov	eax, DWORD PTR _bounds$[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _bar$[ebp], xmm0

; 14764:     bar.y = (visual_cursor->y + visual_cursor->h/2) - bounds->h/12;

	mov	eax, DWORD PTR _visual_cursor$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	divss	xmm0, DWORD PTR __real@40000000
	mov	ecx, DWORD PTR _visual_cursor$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _bounds$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	divss	xmm1, DWORD PTR __real@41400000
	subss	xmm0, xmm1
	movss	DWORD PTR _bar$[ebp+4], xmm0

; 14765:     bar.w = bounds->w;

	mov	eax, DWORD PTR _bounds$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _bar$[ebp+8], xmm0

; 14766:     bar.h = bounds->h/6;

	mov	eax, DWORD PTR _bounds$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	divss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR _bar$[ebp+12], xmm0

; 14767: 
; 14768:     /* filled background bar style */
; 14769:     fill.w = (visual_cursor->x + (visual_cursor->w/2.0f)) - bar.x;

	mov	eax, DWORD PTR _visual_cursor$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	divss	xmm0, DWORD PTR __real@40000000
	mov	ecx, DWORD PTR _visual_cursor$[ebp]
	addss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR _bar$[ebp]
	movss	DWORD PTR _fill$[ebp+8], xmm0

; 14770:     fill.x = bar.x;

	movss	xmm0, DWORD PTR _bar$[ebp]
	movss	DWORD PTR _fill$[ebp], xmm0

; 14771:     fill.y = bar.y;

	movss	xmm0, DWORD PTR _bar$[ebp+4]
	movss	DWORD PTR _fill$[ebp+4], xmm0

; 14772:     fill.h = bar.h;

	movss	xmm0, DWORD PTR _bar$[ebp+12]
	movss	DWORD PTR _fill$[ebp+12], xmm0

; 14773: 
; 14774:     /* draw background */
; 14775:     if (background->type == NK_STYLE_ITEM_IMAGE) {

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN4@nk_draw_sl

; 14776:         nk_draw_image(out, *bounds, &background->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _background$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 14777:     } else {

	jmp	$LN3@nk_draw_sl
$LN4@nk_draw_sl:

; 14778:         nk_fill_rect(out, *bounds, style->rounding, background->data.color);

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+144]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 14779:         nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+140]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+144]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_stroke_rect
	add	esp, 32					; 00000020H
$LN3@nk_draw_sl:

; 14780:     }
; 14781: 
; 14782:     /* draw slider bar */
; 14783:     nk_fill_rect(out, bar, style->rounding, bar_color);

	mov	eax, DWORD PTR _bar_color$[ebp]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+144]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _bar$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _bar$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _bar$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _bar$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 14784:     nk_fill_rect(out, fill, style->rounding, style->bar_filled);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+144]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _fill$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _fill$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _fill$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _fill$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 14785: 
; 14786:     /* draw cursor */
; 14787:     if (cursor->type == NK_STYLE_ITEM_IMAGE)

	mov	eax, DWORD PTR _cursor$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN2@nk_draw_sl

; 14788:         nk_draw_image(out, *visual_cursor, &cursor->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _cursor$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _visual_cursor$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_image
	add	esp, 28					; 0000001cH
	jmp	SHORT $LN1@nk_draw_sl
$LN2@nk_draw_sl:

; 14789:     else nk_fill_circle(out, *visual_cursor, cursor->data.color);

	mov	eax, DWORD PTR _cursor$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _visual_cursor$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_fill_circle
	add	esp, 24					; 00000018H
$LN1@nk_draw_sl:

; 14790: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@nk_draw_sl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@nk_draw_sl:
	DD	3
	DD	$LN14@nk_draw_sl
$LN14@nk_draw_sl:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN11@nk_draw_sl
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN12@nk_draw_sl
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN13@nk_draw_sl
$LN13@nk_draw_sl:
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN12@nk_draw_sl:
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	0
$LN11@nk_draw_sl:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	0
_nk_draw_slider ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_slider_behavior
_TEXT	SEGMENT
tv146 = -276						; size = 4
tv147 = -272						; size = 4
tv143 = -268						; size = 4
tv140 = -268						; size = 4
tv129 = -268						; size = 4
tv93 = -268						; size = 4
tv80 = -268						; size = 4
tv72 = -268						; size = 4
_steps$1 = -68						; size = 4
_pxstep$2 = -56						; size = 4
_d$3 = -44						; size = 4
_ratio$4 = -32						; size = 4
_left_mouse_click_in_cursor$ = -20			; size = 4
_left_mouse_down$ = -8					; size = 4
_state$ = 8						; size = 4
_logical_cursor$ = 12					; size = 4
_visual_cursor$ = 16					; size = 4
_in$ = 20						; size = 4
_bounds$ = 24						; size = 16
_slider_min$ = 40					; size = 4
_slider_max$ = 44					; size = 4
_slider_value$ = 48					; size = 4
_slider_step$ = 52					; size = 4
_slider_steps$ = 56					; size = 4
_nk_slider_behavior PROC				; COMDAT

; 14692: {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 14693:     int left_mouse_down;
; 14694:     int left_mouse_click_in_cursor;
; 14695: 
; 14696:     /* check if visual cursor is being dragged */
; 14697:     nk_widget_state_reset(state);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2
	je	SHORT $LN8@nk_slider_
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 6
	jmp	SHORT $LN7@nk_slider_
$LN8@nk_slider_:
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 4
$LN7@nk_slider_:

; 14698:     left_mouse_down = in && in->mouse.buttons[NK_BUTTON_LEFT].down;

	cmp	DWORD PTR _in$[ebp], 0
	je	SHORT $LN11@nk_slider_
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in$[ebp]
	cmp	DWORD PTR [edx+ecx+260], 0
	je	SHORT $LN11@nk_slider_
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN12@nk_slider_
$LN11@nk_slider_:
	mov	DWORD PTR tv72[ebp], 0
$LN12@nk_slider_:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR _left_mouse_down$[ebp], eax

; 14699:     left_mouse_click_in_cursor = in && nk_input_has_mouse_click_down_in_rect(in,
; 14700:             NK_BUTTON_LEFT, *visual_cursor, nk_true);

	cmp	DWORD PTR _in$[ebp], 0
	je	SHORT $LN13@nk_slider_
	push	1
	mov	eax, DWORD PTR _visual_cursor$[ebp]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	push	0
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_nk_input_has_mouse_click_down_in_rect
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN13@nk_slider_
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN14@nk_slider_
$LN13@nk_slider_:
	mov	DWORD PTR tv80[ebp], 0
$LN14@nk_slider_:
	mov	edx, DWORD PTR tv80[ebp]
	mov	DWORD PTR _left_mouse_click_in_cursor$[ebp], edx

; 14701: 
; 14702:     if (left_mouse_down && left_mouse_click_in_cursor)

	cmp	DWORD PTR _left_mouse_down$[ebp], 0
	je	$LN5@nk_slider_
	cmp	DWORD PTR _left_mouse_click_in_cursor$[ebp], 0
	je	$LN5@nk_slider_

; 14703:     {
; 14704:         float ratio = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ratio$4[ebp], xmm0

; 14705:         const float d = in->mouse.pos.x - (visual_cursor->x+visual_cursor->w*0.5f);

	mov	eax, DWORD PTR _visual_cursor$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _visual_cursor$[ebp]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm1, DWORD PTR [edx+324]
	subss	xmm1, xmm0
	movss	DWORD PTR _d$3[ebp], xmm1

; 14706:         const float pxstep = bounds.w / slider_steps;

	movss	xmm0, DWORD PTR _bounds$[ebp+8]
	divss	xmm0, DWORD PTR _slider_steps$[ebp]
	movss	DWORD PTR _pxstep$2[ebp], xmm0

; 14707: 
; 14708:         /* only update value if the next slider step is reached */
; 14709:         *state = NK_WIDGET_STATE_ACTIVE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 34			; 00000022H

; 14710:         if (NK_ABS(d) >= pxstep) {

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _d$3[ebp]
	jbe	SHORT $LN15@nk_slider_
	movss	xmm0, DWORD PTR _d$3[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv93[ebp], xmm0
	jmp	SHORT $LN16@nk_slider_
$LN15@nk_slider_:
	movss	xmm0, DWORD PTR _d$3[ebp]
	movss	DWORD PTR tv93[ebp], xmm0
$LN16@nk_slider_:
	movss	xmm0, DWORD PTR tv93[ebp]
	comiss	xmm0, DWORD PTR _pxstep$2[ebp]
	jb	$LN5@nk_slider_

; 14711:             const float steps = (float)((int)(NK_ABS(d) / pxstep));

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _d$3[ebp]
	jbe	SHORT $LN17@nk_slider_
	movss	xmm0, DWORD PTR _d$3[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv129[ebp], xmm0
	jmp	SHORT $LN18@nk_slider_
$LN17@nk_slider_:
	movss	xmm0, DWORD PTR _d$3[ebp]
	movss	DWORD PTR tv129[ebp], xmm0
$LN18@nk_slider_:
	movss	xmm0, DWORD PTR tv129[ebp]
	divss	xmm0, DWORD PTR _pxstep$2[ebp]
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _steps$1[ebp], xmm0

; 14712:             slider_value += (d > 0) ? (slider_step*steps) : -(slider_step*steps);

	movss	xmm0, DWORD PTR _d$3[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN19@nk_slider_
	movss	xmm0, DWORD PTR _slider_step$[ebp]
	mulss	xmm0, DWORD PTR _steps$1[ebp]
	movss	DWORD PTR tv140[ebp], xmm0
	jmp	SHORT $LN20@nk_slider_
$LN19@nk_slider_:
	movss	xmm0, DWORD PTR _slider_step$[ebp]
	mulss	xmm0, DWORD PTR _steps$1[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv140[ebp], xmm0
$LN20@nk_slider_:
	movss	xmm0, DWORD PTR _slider_value$[ebp]
	addss	xmm0, DWORD PTR tv140[ebp]
	movss	DWORD PTR _slider_value$[ebp], xmm0

; 14713:             slider_value = NK_CLAMP(slider_min, slider_value, slider_max);

	movss	xmm0, DWORD PTR _slider_max$[ebp]
	comiss	xmm0, DWORD PTR _slider_value$[ebp]
	jbe	SHORT $LN21@nk_slider_
	movss	xmm0, DWORD PTR _slider_value$[ebp]
	movss	DWORD PTR tv143[ebp], xmm0
	jmp	SHORT $LN22@nk_slider_
$LN21@nk_slider_:
	movss	xmm0, DWORD PTR _slider_max$[ebp]
	movss	DWORD PTR tv143[ebp], xmm0
$LN22@nk_slider_:
	movss	xmm0, DWORD PTR _slider_min$[ebp]
	comiss	xmm0, DWORD PTR tv143[ebp]
	jbe	SHORT $LN25@nk_slider_
	movss	xmm0, DWORD PTR _slider_min$[ebp]
	movss	DWORD PTR tv147[ebp], xmm0
	jmp	SHORT $LN26@nk_slider_
$LN25@nk_slider_:
	movss	xmm0, DWORD PTR _slider_max$[ebp]
	comiss	xmm0, DWORD PTR _slider_value$[ebp]
	jbe	SHORT $LN23@nk_slider_
	movss	xmm0, DWORD PTR _slider_value$[ebp]
	movss	DWORD PTR tv146[ebp], xmm0
	jmp	SHORT $LN24@nk_slider_
$LN23@nk_slider_:
	movss	xmm0, DWORD PTR _slider_max$[ebp]
	movss	DWORD PTR tv146[ebp], xmm0
$LN24@nk_slider_:
	movss	xmm0, DWORD PTR tv146[ebp]
	movss	DWORD PTR tv147[ebp], xmm0
$LN26@nk_slider_:
	movss	xmm0, DWORD PTR tv147[ebp]
	movss	DWORD PTR _slider_value$[ebp], xmm0

; 14714:             ratio = (slider_value - slider_min)/slider_step;

	movss	xmm0, DWORD PTR _slider_value$[ebp]
	subss	xmm0, DWORD PTR _slider_min$[ebp]
	divss	xmm0, DWORD PTR _slider_step$[ebp]
	movss	DWORD PTR _ratio$4[ebp], xmm0

; 14715:             logical_cursor->x = bounds.x + (logical_cursor->w * ratio);

	mov	eax, DWORD PTR _logical_cursor$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _ratio$4[ebp]
	addss	xmm0, DWORD PTR _bounds$[ebp]
	mov	ecx, DWORD PTR _logical_cursor$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 14716:             in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = logical_cursor->x;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in$[ebp]
	mov	eax, DWORD PTR _logical_cursor$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx+268], eax
$LN5@nk_slider_:

; 14717:         }
; 14718:     }
; 14719: 
; 14720:     /* slider widget state */
; 14721:     if (nk_input_is_mouse_hovering_rect(in, bounds))

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN4@nk_slider_

; 14722:         *state = NK_WIDGET_STATE_HOVERED;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H
$LN4@nk_slider_:

; 14723:     if (*state & NK_WIDGET_STATE_HOVER &&
; 14724:         !nk_input_is_mouse_prev_hovering_rect(in, bounds))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 16					; 00000010H
	je	SHORT $LN3@nk_slider_
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_mouse_prev_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN3@nk_slider_

; 14725:         *state |= NK_WIDGET_STATE_ENTERED;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 8
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN1@nk_slider_
$LN3@nk_slider_:

; 14726:     else if (nk_input_is_mouse_prev_hovering_rect(in, bounds))

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_mouse_prev_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@nk_slider_

; 14727:         *state |= NK_WIDGET_STATE_LEFT;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@nk_slider_:

; 14728:     return slider_value;

	fld	DWORD PTR _slider_value$[ebp]

; 14729: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_slider_behavior ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_do_selectable_image
_TEXT	SEGMENT
tv248 = -260						; size = 4
tv178 = -260						; size = 4
tv162 = -260						; size = 4
_icon$ = -60						; size = 16
_touch$ = -36						; size = 16
_old_value$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_out$ = 12						; size = 4
_bounds$ = 16						; size = 16
_str$ = 32						; size = 4
_len$ = 36						; size = 4
_align$ = 40						; size = 4
_value$ = 44						; size = 4
_img$ = 48						; size = 4
_style$ = 52						; size = 4
_in$ = 56						; size = 4
_font$ = 60						; size = 4
_nk_do_selectable_image PROC				; COMDAT

; 14638: {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 14639:     int old_value;
; 14640:     struct nk_rect touch;
; 14641:     struct nk_rect icon;
; 14642: 
; 14643:     NK_ASSERT(state);

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN10@nk_do_sele
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_selectable_image@@9@9@ddf8d5d8
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_do_sele:

; 14644:     NK_ASSERT(out);

	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN11@nk_do_sele
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_selectable_image@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17CMKEDJDI@?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_do_sele:

; 14645:     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN12@nk_do_sele
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_selectable_image@@9@9@ddf8d5d8
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_do_sele:

; 14646:     NK_ASSERT(len);

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN13@nk_do_sele
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_selectable_image@@9@9@ddf8d5d8
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17JOFJILLL@?$AAl?$AAe?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_do_sele:

; 14647:     NK_ASSERT(value);

	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN14@nk_do_sele
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_selectable_image@@9@9@ddf8d5d8
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KBCLFMHN@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_do_sele:

; 14648:     NK_ASSERT(style);

	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN15@nk_do_sele
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_selectable_image@@9@9@ddf8d5d8
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@OIINANNN@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@nk_do_sele:

; 14649:     NK_ASSERT(font);

	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN16@nk_do_sele
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_selectable_image@@9@9@ddf8d5d8
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN16@nk_do_sele:

; 14650: 
; 14651:     if (!state || !out || !str || !len || !value || !style || !font) return 0;

	cmp	DWORD PTR _state$[ebp], 0
	je	SHORT $LN6@nk_do_sele
	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN6@nk_do_sele
	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN6@nk_do_sele
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN6@nk_do_sele
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN6@nk_do_sele
	cmp	DWORD PTR _style$[ebp], 0
	je	SHORT $LN6@nk_do_sele
	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN7@nk_do_sele
$LN6@nk_do_sele:
	xor	eax, eax
	jmp	$LN8@nk_do_sele
$LN7@nk_do_sele:

; 14652:     old_value = *value;

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _old_value$[ebp], ecx

; 14653: 
; 14654:     /* toggle behavior */
; 14655:     touch.x = bounds.x - style->touch_padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _bounds$[ebp]
	subss	xmm0, DWORD PTR [eax+164]
	movss	DWORD PTR _touch$[ebp], xmm0

; 14656:     touch.y = bounds.y - style->touch_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	subss	xmm0, DWORD PTR [eax+168]
	movss	DWORD PTR _touch$[ebp+4], xmm0

; 14657:     touch.w = bounds.w + style->touch_padding.x * 2;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR [eax+164]
	mulss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR _bounds$[ebp+8]
	movss	DWORD PTR _touch$[ebp+8], xmm0

; 14658:     touch.h = bounds.h + style->touch_padding.y * 2;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR [eax+168]
	mulss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR _bounds$[ebp+12]
	movss	DWORD PTR _touch$[ebp+12], xmm0

; 14659:     if (nk_button_behavior(state, touch, in, NK_BUTTON_DEFAULT))

	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _touch$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _touch$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _touch$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _touch$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_nk_button_behavior
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN5@nk_do_sele

; 14660:         *value = !(*value);

	mov	eax, DWORD PTR _value$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN17@nk_do_sele
	mov	DWORD PTR tv162[ebp], 1
	jmp	SHORT $LN18@nk_do_sele
$LN17@nk_do_sele:
	mov	DWORD PTR tv162[ebp], 0
$LN18@nk_do_sele:
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR tv162[ebp]
	mov	DWORD PTR [ecx], edx
$LN5@nk_do_sele:

; 14661: 
; 14662:     icon.y = bounds.y + style->padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	addss	xmm0, DWORD PTR [eax+160]
	movss	DWORD PTR _icon$[ebp+4], xmm0

; 14663:     icon.w = icon.h = bounds.h - 2 * style->padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+160]
	movss	xmm1, DWORD PTR _bounds$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _icon$[ebp+12], xmm1
	movss	xmm0, DWORD PTR _icon$[ebp+12]
	movss	DWORD PTR _icon$[ebp+8], xmm0

; 14664:     if (align & NK_TEXT_ALIGN_LEFT) {

	mov	eax, DWORD PTR _align$[ebp]
	and	eax, 1
	je	SHORT $LN4@nk_do_sele

; 14665:         icon.x = (bounds.x + bounds.w) - (2 * style->padding.x + icon.w);

	movss	xmm0, DWORD PTR _bounds$[ebp]
	addss	xmm0, DWORD PTR _bounds$[ebp+8]
	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [eax+156]
	addss	xmm1, DWORD PTR _icon$[ebp+8]
	subss	xmm0, xmm1
	movss	DWORD PTR _icon$[ebp], xmm0

; 14666:         icon.x = NK_MAX(icon.x, 0);

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _icon$[ebp]
	jbe	SHORT $LN19@nk_do_sele
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv178[ebp], xmm0
	jmp	SHORT $LN20@nk_do_sele
$LN19@nk_do_sele:
	movss	xmm0, DWORD PTR _icon$[ebp]
	movss	DWORD PTR tv178[ebp], xmm0
$LN20@nk_do_sele:
	movss	xmm0, DWORD PTR tv178[ebp]
	movss	DWORD PTR _icon$[ebp], xmm0
	jmp	SHORT $LN3@nk_do_sele
$LN4@nk_do_sele:

; 14667:     } else icon.x = bounds.x + 2 * style->padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+156]
	addss	xmm0, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR _icon$[ebp], xmm0
$LN3@nk_do_sele:

; 14668: 
; 14669:     icon.x += style->image_padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _icon$[ebp]
	addss	xmm0, DWORD PTR [eax+172]
	movss	DWORD PTR _icon$[ebp], xmm0

; 14670:     icon.y += style->image_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _icon$[ebp+4]
	addss	xmm0, DWORD PTR [eax+176]
	movss	DWORD PTR _icon$[ebp+4], xmm0

; 14671:     icon.w -= 2 * style->image_padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+172]
	movss	xmm1, DWORD PTR _icon$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _icon$[ebp+8], xmm1

; 14672:     icon.h -= 2 * style->image_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+176]
	movss	xmm1, DWORD PTR _icon$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _icon$[ebp+12], xmm1

; 14673: 
; 14674:     /* draw selectable */
; 14675:     if (style->draw_begin) style->draw_begin(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+184], 0
	je	SHORT $LN2@nk_do_sele
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+184]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@nk_do_sele:

; 14676:     nk_draw_selectable(out, *state, style, *value, &bounds, &icon, img, str, len, align, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _align$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _img$[ebp]
	push	ecx
	lea	edx, DWORD PTR _icon$[ebp]
	push	edx
	lea	eax, DWORD PTR _bounds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_selectable
	add	esp, 44					; 0000002cH

; 14677:     if (style->draw_end) style->draw_end(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+188], 0
	je	SHORT $LN1@nk_do_sele
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@nk_do_sele:

; 14678:     return old_value != *value;

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _old_value$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN21@nk_do_sele
	mov	DWORD PTR tv248[ebp], 1
	jmp	SHORT $LN22@nk_do_sele
$LN21@nk_do_sele:
	mov	DWORD PTR tv248[ebp], 0
$LN22@nk_do_sele:
	mov	eax, DWORD PTR tv248[ebp]
$LN8@nk_do_sele:

; 14679: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@nk_do_sele
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN26@nk_do_sele:
	DD	2
	DD	$LN25@nk_do_sele
$LN25@nk_do_sele:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN23@nk_do_sele
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN24@nk_do_sele
$LN24@nk_do_sele:
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN23@nk_do_sele:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_nk_do_selectable_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_do_selectable
_TEXT	SEGMENT
tv187 = -236						; size = 4
tv162 = -236						; size = 4
_touch$ = -36						; size = 16
_old_value$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_out$ = 12						; size = 4
_bounds$ = 16						; size = 16
_str$ = 32						; size = 4
_len$ = 36						; size = 4
_align$ = 40						; size = 4
_value$ = 44						; size = 4
_style$ = 48						; size = 4
_in$ = 52						; size = 4
_font$ = 56						; size = 4
_nk_do_selectable PROC					; COMDAT

; 14601: {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 14602:     int old_value;
; 14603:     struct nk_rect touch;
; 14604: 
; 14605:     NK_ASSERT(state);

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN8@nk_do_sele
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_selectable@@9@9@ddf8d5d8
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_do_sele:

; 14606:     NK_ASSERT(out);

	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN9@nk_do_sele
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_selectable@@9@9@ddf8d5d8
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17CMKEDJDI@?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_do_sele:

; 14607:     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN10@nk_do_sele
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_selectable@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_do_sele:

; 14608:     NK_ASSERT(len);

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN11@nk_do_sele
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_selectable@@9@9@ddf8d5d8
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17JOFJILLL@?$AAl?$AAe?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_do_sele:

; 14609:     NK_ASSERT(value);

	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN12@nk_do_sele
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_selectable@@9@9@ddf8d5d8
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KBCLFMHN@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_do_sele:

; 14610:     NK_ASSERT(style);

	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN13@nk_do_sele
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_selectable@@9@9@ddf8d5d8
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@OIINANNN@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_do_sele:

; 14611:     NK_ASSERT(font);

	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN14@nk_do_sele
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_selectable@@9@9@ddf8d5d8
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_do_sele:

; 14612: 
; 14613:     if (!state || !out || !str || !len || !value || !style || !font) return 0;

	cmp	DWORD PTR _state$[ebp], 0
	je	SHORT $LN4@nk_do_sele
	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN4@nk_do_sele
	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN4@nk_do_sele
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN4@nk_do_sele
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN4@nk_do_sele
	cmp	DWORD PTR _style$[ebp], 0
	je	SHORT $LN4@nk_do_sele
	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN5@nk_do_sele
$LN4@nk_do_sele:
	xor	eax, eax
	jmp	$LN6@nk_do_sele
$LN5@nk_do_sele:

; 14614:     old_value = *value;

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _old_value$[ebp], ecx

; 14615: 
; 14616:     /* remove padding */
; 14617:     touch.x = bounds.x - style->touch_padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _bounds$[ebp]
	subss	xmm0, DWORD PTR [eax+164]
	movss	DWORD PTR _touch$[ebp], xmm0

; 14618:     touch.y = bounds.y - style->touch_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	subss	xmm0, DWORD PTR [eax+168]
	movss	DWORD PTR _touch$[ebp+4], xmm0

; 14619:     touch.w = bounds.w + style->touch_padding.x * 2;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR [eax+164]
	mulss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR _bounds$[ebp+8]
	movss	DWORD PTR _touch$[ebp+8], xmm0

; 14620:     touch.h = bounds.h + style->touch_padding.y * 2;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR [eax+168]
	mulss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR _bounds$[ebp+12]
	movss	DWORD PTR _touch$[ebp+12], xmm0

; 14621: 
; 14622:     /* update button */
; 14623:     if (nk_button_behavior(state, touch, in, NK_BUTTON_DEFAULT))

	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _touch$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _touch$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _touch$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _touch$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_nk_button_behavior
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN3@nk_do_sele

; 14624:         *value = !(*value);

	mov	eax, DWORD PTR _value$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN15@nk_do_sele
	mov	DWORD PTR tv162[ebp], 1
	jmp	SHORT $LN16@nk_do_sele
$LN15@nk_do_sele:
	mov	DWORD PTR tv162[ebp], 0
$LN16@nk_do_sele:
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR tv162[ebp]
	mov	DWORD PTR [ecx], edx
$LN3@nk_do_sele:

; 14625: 
; 14626:     /* draw selectable */
; 14627:     if (style->draw_begin) style->draw_begin(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+184], 0
	je	SHORT $LN2@nk_do_sele
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+184]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@nk_do_sele:

; 14628:     nk_draw_selectable(out, *state, style, *value, &bounds, 0,0, str, len, align, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _align$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	push	0
	push	0
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_draw_selectable
	add	esp, 44					; 0000002cH

; 14629:     if (style->draw_end) style->draw_end(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+188], 0
	je	SHORT $LN1@nk_do_sele
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@nk_do_sele:

; 14630:     return old_value != *value;

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _old_value$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN17@nk_do_sele
	mov	DWORD PTR tv187[ebp], 1
	jmp	SHORT $LN18@nk_do_sele
$LN17@nk_do_sele:
	mov	DWORD PTR tv187[ebp], 0
$LN18@nk_do_sele:
	mov	eax, DWORD PTR tv187[ebp]
$LN6@nk_do_sele:

; 14631: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@nk_do_sele
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN21@nk_do_sele:
	DD	1
	DD	$LN20@nk_do_sele
$LN20@nk_do_sele:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN19@nk_do_sele
$LN19@nk_do_sele:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_nk_do_selectable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_selectable
_TEXT	SEGMENT
_text$ = -36						; size = 16
_background$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_state$ = 12						; size = 4
_style$ = 16						; size = 4
_active$ = 20						; size = 4
_bounds$ = 24						; size = 4
_icon$ = 28						; size = 4
_img$ = 32						; size = 4
_string$ = 36						; size = 4
_len$ = 40						; size = 4
_align$ = 44						; size = 4
_font$ = 48						; size = 4
_nk_draw_selectable PROC				; COMDAT

; 14553: {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 14554:     const struct nk_style_item *background;
; 14555:     struct nk_text text;
; 14556:     text.padding = style->padding;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR [eax+160]
	mov	DWORD PTR _text$[ebp], ecx
	mov	DWORD PTR _text$[ebp+4], edx

; 14557: 
; 14558:     /* select correct colors/images */
; 14559:     if (!active) {

	cmp	DWORD PTR _active$[ebp], 0
	jne	SHORT $LN13@nk_draw_se

; 14560:         if (state & NK_WIDGET_STATE_ACTIVED) {

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN12@nk_draw_se

; 14561:             background = &style->pressed;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _background$[ebp], eax

; 14562:             text.text = style->text_pressed;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR _text$[ebp+12], ecx
	jmp	SHORT $LN9@nk_draw_se
$LN12@nk_draw_se:

; 14563:         } else if (state & NK_WIDGET_STATE_HOVER) {

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN10@nk_draw_se

; 14564:             background = &style->hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _background$[ebp], eax

; 14565:             text.text = style->text_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	DWORD PTR _text$[ebp+12], ecx

; 14566:         } else {

	jmp	SHORT $LN9@nk_draw_se
$LN10@nk_draw_se:

; 14567:             background = &style->normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	DWORD PTR _background$[ebp], eax

; 14568:             text.text = style->text_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR _text$[ebp+12], ecx
$LN9@nk_draw_se:

; 14569:         }
; 14570:     } else {

	jmp	SHORT $LN4@nk_draw_se
$LN13@nk_draw_se:

; 14571:         if (state & NK_WIDGET_STATE_ACTIVED) {

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN7@nk_draw_se

; 14572:             background = &style->pressed_active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 100				; 00000064H
	mov	DWORD PTR _background$[ebp], eax

; 14573:             text.text = style->text_pressed_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _text$[ebp+12], ecx
	jmp	SHORT $LN4@nk_draw_se
$LN7@nk_draw_se:

; 14574:         } else if (state & NK_WIDGET_STATE_HOVER) {

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN5@nk_draw_se

; 14575:             background = &style->hover_active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 80					; 00000050H
	mov	DWORD PTR _background$[ebp], eax

; 14576:             text.text = style->text_hover_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	DWORD PTR _text$[ebp+12], ecx

; 14577:         } else {

	jmp	SHORT $LN4@nk_draw_se
$LN5@nk_draw_se:

; 14578:             background = &style->normal_active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 60					; 0000003cH
	mov	DWORD PTR _background$[ebp], eax

; 14579:             text.text = style->text_normal_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR _text$[ebp+12], ecx
$LN4@nk_draw_se:

; 14580:         }
; 14581:     }
; 14582: 
; 14583: 
; 14584:     /* draw selectable background and text */
; 14585:     if (background->type == NK_STYLE_ITEM_IMAGE) {

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN3@nk_draw_se

; 14586:         nk_draw_image(out, *bounds, &background->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _background$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 14587:         text.background = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	DWORD PTR _text$[ebp+8], eax

; 14588:     } else {

	jmp	SHORT $LN2@nk_draw_se
$LN3@nk_draw_se:

; 14589:         nk_fill_rect(out, *bounds, style->rounding, background->data.color);

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+152]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 14590:         text.background = background->data.color;

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _text$[ebp+8], ecx
$LN2@nk_draw_se:

; 14591:     }
; 14592:     if (img && icon) nk_draw_image(out, *icon, img, nk_white);

	cmp	DWORD PTR _img$[ebp], 0
	je	SHORT $LN1@nk_draw_se
	cmp	DWORD PTR _icon$[ebp], 0
	je	SHORT $LN1@nk_draw_se
	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _img$[ebp]
	push	ecx
	mov	edx, DWORD PTR _icon$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_image
	add	esp, 28					; 0000001cH
$LN1@nk_draw_se:

; 14593:     nk_widget_text(out, *bounds, string, len, &text, align, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _align$[ebp]
	push	ecx
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_widget_text
	add	esp, 40					; 00000028H

; 14594: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@nk_draw_se
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN18@nk_draw_se:
	DD	1
	DD	$LN17@nk_draw_se
$LN17@nk_draw_se:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN16@nk_draw_se
$LN16@nk_draw_se:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_nk_draw_selectable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_do_toggle
_TEXT	SEGMENT
tv260 = -308						; size = 4
tv219 = -308						; size = 4
tv141 = -308						; size = 4
tv129 = -308						; size = 4
_label$ = -108						; size = 16
_cursor$ = -84						; size = 16
_select$ = -60						; size = 16
_bounds$ = -36						; size = 16
_was_active$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_out$ = 12						; size = 4
_r$ = 16						; size = 16
_active$ = 32						; size = 4
_str$ = 36						; size = 4
_len$ = 40						; size = 4
_type$ = 44						; size = 4
_style$ = 48						; size = 4
_in$ = 52						; size = 4
_font$ = 56						; size = 4
_nk_do_toggle PROC					; COMDAT

; 14486: {

	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 14487:     int was_active;
; 14488:     struct nk_rect bounds;
; 14489:     struct nk_rect select;
; 14490:     struct nk_rect cursor;
; 14491:     struct nk_rect label;
; 14492: 
; 14493:     NK_ASSERT(style);

	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN9@nk_do_togg
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_toggle@@9@9@ddf8d5d8
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@OIINANNN@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_do_togg:

; 14494:     NK_ASSERT(out);

	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN10@nk_do_togg
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_toggle@@9@9@ddf8d5d8
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17CMKEDJDI@?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_do_togg:

; 14495:     NK_ASSERT(font);

	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN11@nk_do_togg
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_toggle@@9@9@ddf8d5d8
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_do_togg:

; 14496:     if (!out || !style || !font || !active)

	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN5@nk_do_togg
	cmp	DWORD PTR _style$[ebp], 0
	je	SHORT $LN5@nk_do_togg
	cmp	DWORD PTR _font$[ebp], 0
	je	SHORT $LN5@nk_do_togg
	cmp	DWORD PTR _active$[ebp], 0
	jne	SHORT $LN6@nk_do_togg
$LN5@nk_do_togg:

; 14497:         return 0;

	xor	eax, eax
	jmp	$LN7@nk_do_togg
$LN6@nk_do_togg:

; 14498: 
; 14499:     r.w = NK_MAX(r.w, font->height + 2 * style->padding.x);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+124]
	mov	ecx, DWORD PTR _font$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	comiss	xmm0, DWORD PTR _r$[ebp+8]
	jbe	SHORT $LN12@nk_do_togg
	mov	edx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+124]
	mov	eax, DWORD PTR _font$[ebp]
	addss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR tv129[ebp], xmm0
	jmp	SHORT $LN13@nk_do_togg
$LN12@nk_do_togg:
	movss	xmm0, DWORD PTR _r$[ebp+8]
	movss	DWORD PTR tv129[ebp], xmm0
$LN13@nk_do_togg:
	movss	xmm0, DWORD PTR tv129[ebp]
	movss	DWORD PTR _r$[ebp+8], xmm0

; 14500:     r.h = NK_MAX(r.h, font->height + 2 * style->padding.y);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+128]
	mov	ecx, DWORD PTR _font$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	comiss	xmm0, DWORD PTR _r$[ebp+12]
	jbe	SHORT $LN14@nk_do_togg
	mov	edx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+128]
	mov	eax, DWORD PTR _font$[ebp]
	addss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR tv141[ebp], xmm0
	jmp	SHORT $LN15@nk_do_togg
$LN14@nk_do_togg:
	movss	xmm0, DWORD PTR _r$[ebp+12]
	movss	DWORD PTR tv141[ebp], xmm0
$LN15@nk_do_togg:
	movss	xmm0, DWORD PTR tv141[ebp]
	movss	DWORD PTR _r$[ebp+12], xmm0

; 14501: 
; 14502:     /* add additional touch padding for touch screen devices */
; 14503:     bounds.x = r.x - style->touch_padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _r$[ebp]
	subss	xmm0, DWORD PTR [eax+132]
	movss	DWORD PTR _bounds$[ebp], xmm0

; 14504:     bounds.y = r.y - style->touch_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _r$[ebp+4]
	subss	xmm0, DWORD PTR [eax+136]
	movss	DWORD PTR _bounds$[ebp+4], xmm0

; 14505:     bounds.w = r.w + 2 * style->touch_padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+132]
	addss	xmm0, DWORD PTR _r$[ebp+8]
	movss	DWORD PTR _bounds$[ebp+8], xmm0

; 14506:     bounds.h = r.h + 2 * style->touch_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+136]
	addss	xmm0, DWORD PTR _r$[ebp+12]
	movss	DWORD PTR _bounds$[ebp+12], xmm0

; 14507: 
; 14508:     /* calculate the selector space */
; 14509:     select.w = font->height;

	mov	eax, DWORD PTR _font$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _select$[ebp+8], xmm0

; 14510:     select.h = select.w;

	movss	xmm0, DWORD PTR _select$[ebp+8]
	movss	DWORD PTR _select$[ebp+12], xmm0

; 14511:     select.y = r.y + r.h/2.0f - select.h/2.0f;

	movss	xmm0, DWORD PTR _r$[ebp+12]
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR _r$[ebp+4]
	movss	xmm1, DWORD PTR _select$[ebp+12]
	divss	xmm1, DWORD PTR __real@40000000
	subss	xmm0, xmm1
	movss	DWORD PTR _select$[ebp+4], xmm0

; 14512:     select.x = r.x;

	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR _select$[ebp], xmm0

; 14513: 
; 14514:     /* calculate the bounds of the cursor inside the selector */
; 14515:     cursor.x = select.x + style->padding.x + style->border;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _select$[ebp]
	addss	xmm0, DWORD PTR [eax+124]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+144]
	movss	DWORD PTR _cursor$[ebp], xmm0

; 14516:     cursor.y = select.y + style->padding.y + style->border;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _select$[ebp+4]
	addss	xmm0, DWORD PTR [eax+128]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+144]
	movss	DWORD PTR _cursor$[ebp+4], xmm0

; 14517:     cursor.w = select.w - (2 * style->padding.x + 2 * style->border);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+124]
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx+144]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _select$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _cursor$[ebp+8], xmm1

; 14518:     cursor.h = select.h - (2 * style->padding.y + 2 * style->border);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+128]
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx+144]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _select$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _cursor$[ebp+12], xmm1

; 14519: 
; 14520:     /* label behind the selector */
; 14521:     label.x = select.x + select.w + style->spacing;

	movss	xmm0, DWORD PTR _select$[ebp]
	addss	xmm0, DWORD PTR _select$[ebp+8]
	mov	eax, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [eax+140]
	movss	DWORD PTR _label$[ebp], xmm0

; 14522:     label.y = select.y;

	movss	xmm0, DWORD PTR _select$[ebp+4]
	movss	DWORD PTR _label$[ebp+4], xmm0

; 14523:     label.w = NK_MAX(r.x + r.w, label.x) - label.x;

	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp+8]
	movss	xmm1, DWORD PTR _label$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN16@nk_do_togg
	movss	xmm0, DWORD PTR _label$[ebp]
	movss	DWORD PTR tv219[ebp], xmm0
	jmp	SHORT $LN17@nk_do_togg
$LN16@nk_do_togg:
	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp+8]
	movss	DWORD PTR tv219[ebp], xmm0
$LN17@nk_do_togg:
	movss	xmm0, DWORD PTR tv219[ebp]
	subss	xmm0, DWORD PTR _label$[ebp]
	movss	DWORD PTR _label$[ebp+8], xmm0

; 14524:     label.h = select.w;

	movss	xmm0, DWORD PTR _select$[ebp+8]
	movss	DWORD PTR _label$[ebp+12], xmm0

; 14525: 
; 14526:     /* update selector */
; 14527:     was_active = *active;

	mov	eax, DWORD PTR _active$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _was_active$[ebp], ecx

; 14528:     *active = nk_toggle_behavior(in, bounds, state, *active);

	mov	eax, DWORD PTR _active$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_toggle_behavior
	add	esp, 28					; 0000001cH
	mov	ecx, DWORD PTR _active$[ebp]
	mov	DWORD PTR [ecx], eax

; 14529: 
; 14530:     /* draw selector */
; 14531:     if (style->draw_begin)

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	SHORT $LN4@nk_do_togg

; 14532:         style->draw_begin(out, style->userdata);

	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@nk_do_togg:

; 14533:     if (type == NK_TOGGLE_CHECK) {

	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN3@nk_do_togg

; 14534:         nk_draw_checkbox(out, *state, style, *active, &label, &select, &cursor, str, len, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	lea	eax, DWORD PTR _cursor$[ebp]
	push	eax
	lea	ecx, DWORD PTR _select$[ebp]
	push	ecx
	lea	edx, DWORD PTR _label$[ebp]
	push	edx
	mov	eax, DWORD PTR _active$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_draw_checkbox
	add	esp, 40					; 00000028H

; 14535:     } else {

	jmp	SHORT $LN2@nk_do_togg
$LN3@nk_do_togg:

; 14536:         nk_draw_option(out, *state, style, *active, &label, &select, &cursor, str, len, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	lea	eax, DWORD PTR _cursor$[ebp]
	push	eax
	lea	ecx, DWORD PTR _select$[ebp]
	push	ecx
	lea	edx, DWORD PTR _label$[ebp]
	push	edx
	mov	eax, DWORD PTR _active$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_draw_option
	add	esp, 40					; 00000028H
$LN2@nk_do_togg:

; 14537:     }
; 14538:     if (style->draw_end)

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+156], 0
	je	SHORT $LN1@nk_do_togg

; 14539:         style->draw_end(out, style->userdata);

	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@nk_do_togg:

; 14540:     return (was_active != *active);

	mov	eax, DWORD PTR _active$[ebp]
	mov	ecx, DWORD PTR _was_active$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN18@nk_do_togg
	mov	DWORD PTR tv260[ebp], 1
	jmp	SHORT $LN19@nk_do_togg
$LN18@nk_do_togg:
	mov	DWORD PTR tv260[ebp], 0
$LN19@nk_do_togg:
	mov	eax, DWORD PTR tv260[ebp]
$LN7@nk_do_togg:

; 14541: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@nk_do_togg
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN25@nk_do_togg:
	DD	4
	DD	$LN24@nk_do_togg
$LN24@nk_do_togg:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN20@nk_do_togg
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN21@nk_do_togg
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$LN22@nk_do_togg
	DD	-108					; ffffff94H
	DD	16					; 00000010H
	DD	$LN23@nk_do_togg
$LN23@nk_do_togg:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN22@nk_do_togg:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN21@nk_do_togg:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN20@nk_do_togg:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_do_toggle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_option
_TEXT	SEGMENT
$T1 = -264						; size = 16
_text$ = -48						; size = 16
_cursor$ = -24						; size = 4
_background$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_state$ = 12						; size = 4
_style$ = 16						; size = 4
_active$ = 20						; size = 4
_label$ = 24						; size = 4
_selector$ = 28						; size = 4
_cursors$ = 32						; size = 4
_string$ = 36						; size = 4
_len$ = 40						; size = 4
_font$ = 44						; size = 4
_nk_draw_option PROC					; COMDAT

; 14443: {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 14444:     const struct nk_style_item *background;
; 14445:     const struct nk_style_item *cursor;
; 14446:     struct nk_text text;
; 14447: 
; 14448:     /* select correct colors/images */
; 14449:     if (state & NK_WIDGET_STATE_HOVER) {

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN9@nk_draw_op

; 14450:         background = &style->hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _background$[ebp], eax

; 14451:         cursor = &style->cursor_hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 84					; 00000054H
	mov	DWORD PTR _cursor$[ebp], eax

; 14452:         text.text = style->text_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR _text$[ebp+12], ecx
	jmp	SHORT $LN6@nk_draw_op
$LN9@nk_draw_op:

; 14453:     } else if (state & NK_WIDGET_STATE_ACTIVED) {

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN7@nk_draw_op

; 14454:         background = &style->hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _background$[ebp], eax

; 14455:         cursor = &style->cursor_hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 84					; 00000054H
	mov	DWORD PTR _cursor$[ebp], eax

; 14456:         text.text = style->text_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR _text$[ebp+12], ecx

; 14457:     } else {

	jmp	SHORT $LN6@nk_draw_op
$LN7@nk_draw_op:

; 14458:         background = &style->normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	DWORD PTR _background$[ebp], eax

; 14459:         cursor = &style->cursor_normal;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _cursor$[ebp], eax

; 14460:         text.text = style->text_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _text$[ebp+12], ecx
$LN6@nk_draw_op:

; 14461:     }
; 14462: 
; 14463:     /* draw background and cursor */
; 14464:     if (background->type == NK_STYLE_ITEM_COLOR) {

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN5@nk_draw_op

; 14465:         nk_fill_circle(out, *selector, style->border_color);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _selector$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_fill_circle
	add	esp, 24					; 00000018H

; 14466:         nk_fill_circle(out, nk_shrink_rect(*selector, style->border), background->data.color);

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+144]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _selector$[ebp]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_nk_shrink_rect
	add	esp, 8
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_circle
	add	esp, 24					; 00000018H
	jmp	SHORT $LN4@nk_draw_op
$LN5@nk_draw_op:

; 14467:     } else nk_draw_image(out, *selector, &background->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _background$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _selector$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_image
	add	esp, 28					; 0000001cH
$LN4@nk_draw_op:

; 14468:     if (active) {

	cmp	DWORD PTR _active$[ebp], 0
	je	SHORT $LN1@nk_draw_op

; 14469:         if (cursor->type == NK_STYLE_ITEM_IMAGE)

	mov	eax, DWORD PTR _cursor$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN2@nk_draw_op

; 14470:             nk_draw_image(out, *cursors, &cursor->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _cursor$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _cursors$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_image
	add	esp, 28					; 0000001cH
	jmp	SHORT $LN1@nk_draw_op
$LN2@nk_draw_op:

; 14471:         else nk_fill_circle(out, *cursors, cursor->data.color);

	mov	eax, DWORD PTR _cursor$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _cursors$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_fill_circle
	add	esp, 24					; 00000018H
$LN1@nk_draw_op:

; 14472:     }
; 14473: 
; 14474:     text.padding.x = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _text$[ebp], xmm0

; 14475:     text.padding.y = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _text$[ebp+4], xmm0

; 14476:     text.background = style->text_background;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	DWORD PTR _text$[ebp+8], ecx

; 14477:     nk_widget_text(out, *label, string, len, &text, NK_TEXT_LEFT, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	17					; 00000011H
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _label$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_widget_text
	add	esp, 40					; 00000028H

; 14478: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_draw_op
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@nk_draw_op:
	DD	1
	DD	$LN13@nk_draw_op
$LN13@nk_draw_op:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN12@nk_draw_op
$LN12@nk_draw_op:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_nk_draw_option ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_checkbox
_TEXT	SEGMENT
$T1 = -264						; size = 16
_text$ = -48						; size = 16
_cursor$ = -24						; size = 4
_background$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_state$ = 12						; size = 4
_style$ = 16						; size = 4
_active$ = 20						; size = 4
_label$ = 24						; size = 4
_selector$ = 28						; size = 4
_cursors$ = 32						; size = 4
_string$ = 36						; size = 4
_len$ = 40						; size = 4
_font$ = 44						; size = 4
_nk_draw_checkbox PROC					; COMDAT

; 14400: {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 14401:     const struct nk_style_item *background;
; 14402:     const struct nk_style_item *cursor;
; 14403:     struct nk_text text;
; 14404: 
; 14405:     /* select correct colors/images */
; 14406:     if (state & NK_WIDGET_STATE_HOVER) {

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN9@nk_draw_ch

; 14407:         background = &style->hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _background$[ebp], eax

; 14408:         cursor = &style->cursor_hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 84					; 00000054H
	mov	DWORD PTR _cursor$[ebp], eax

; 14409:         text.text = style->text_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR _text$[ebp+12], ecx
	jmp	SHORT $LN6@nk_draw_ch
$LN9@nk_draw_ch:

; 14410:     } else if (state & NK_WIDGET_STATE_ACTIVED) {

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN7@nk_draw_ch

; 14411:         background = &style->hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _background$[ebp], eax

; 14412:         cursor = &style->cursor_hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 84					; 00000054H
	mov	DWORD PTR _cursor$[ebp], eax

; 14413:         text.text = style->text_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR _text$[ebp+12], ecx

; 14414:     } else {

	jmp	SHORT $LN6@nk_draw_ch
$LN7@nk_draw_ch:

; 14415:         background = &style->normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	DWORD PTR _background$[ebp], eax

; 14416:         cursor = &style->cursor_normal;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _cursor$[ebp], eax

; 14417:         text.text = style->text_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _text$[ebp+12], ecx
$LN6@nk_draw_ch:

; 14418:     }
; 14419: 
; 14420:     /* draw background and cursor */
; 14421:     if (background->type == NK_STYLE_ITEM_COLOR) {

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN5@nk_draw_ch

; 14422:         nk_fill_rect(out, *selector, 0, style->border_color);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _selector$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 14423:         nk_fill_rect(out, nk_shrink_rect(*selector, style->border), 0, background->data.color);

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+144]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _selector$[ebp]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_nk_shrink_rect
	add	esp, 8
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH
	jmp	SHORT $LN4@nk_draw_ch
$LN5@nk_draw_ch:

; 14424:     } else nk_draw_image(out, *selector, &background->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _background$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _selector$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_image
	add	esp, 28					; 0000001cH
$LN4@nk_draw_ch:

; 14425:     if (active) {

	cmp	DWORD PTR _active$[ebp], 0
	je	$LN1@nk_draw_ch

; 14426:         if (cursor->type == NK_STYLE_ITEM_IMAGE)

	mov	eax, DWORD PTR _cursor$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN2@nk_draw_ch

; 14427:             nk_draw_image(out, *cursors, &cursor->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _cursor$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _cursors$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_image
	add	esp, 28					; 0000001cH
	jmp	SHORT $LN1@nk_draw_ch
$LN2@nk_draw_ch:

; 14428:         else nk_fill_rect(out, *cursors, 0, cursor->data.color);

	mov	eax, DWORD PTR _cursor$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _cursors$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH
$LN1@nk_draw_ch:

; 14429:     }
; 14430: 
; 14431:     text.padding.x = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _text$[ebp], xmm0

; 14432:     text.padding.y = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _text$[ebp+4], xmm0

; 14433:     text.background = style->text_background;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	DWORD PTR _text$[ebp+8], ecx

; 14434:     nk_widget_text(out, *label, string, len, &text, NK_TEXT_LEFT, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	17					; 00000011H
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _label$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_widget_text
	add	esp, 40					; 00000028H

; 14435: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_draw_ch
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@nk_draw_ch:
	DD	1
	DD	$LN13@nk_draw_ch
$LN13@nk_draw_ch:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN12@nk_draw_ch
$LN12@nk_draw_ch:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_nk_draw_checkbox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_toggle_behavior
_TEXT	SEGMENT
tv73 = -196						; size = 4
_in$ = 8						; size = 4
_select$ = 12						; size = 16
_state$ = 28						; size = 4
_active$ = 32						; size = 4
_nk_toggle_behavior PROC				; COMDAT

; 14381: {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 14382:     nk_widget_state_reset(state);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2
	je	SHORT $LN6@nk_toggle_
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 6
	jmp	SHORT $LN5@nk_toggle_
$LN6@nk_toggle_:
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 4
$LN5@nk_toggle_:

; 14383:     if (nk_button_behavior(state, select, in, NK_BUTTON_DEFAULT)) {

	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _select$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _select$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _select$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _select$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_nk_button_behavior
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN4@nk_toggle_

; 14384:         *state = NK_WIDGET_STATE_ACTIVE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 34			; 00000022H

; 14385:         active = !active;

	cmp	DWORD PTR _active$[ebp], 0
	jne	SHORT $LN9@nk_toggle_
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN10@nk_toggle_
$LN9@nk_toggle_:
	mov	DWORD PTR tv73[ebp], 0
$LN10@nk_toggle_:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR _active$[ebp], eax
$LN4@nk_toggle_:

; 14386:     }
; 14387:     if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(in, select))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 16					; 00000010H
	je	SHORT $LN3@nk_toggle_
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _select$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _select$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _select$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _select$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_mouse_prev_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN3@nk_toggle_

; 14388:         *state |= NK_WIDGET_STATE_ENTERED;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 8
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@nk_toggle_
$LN3@nk_toggle_:

; 14389:     else if (nk_input_is_mouse_prev_hovering_rect(in, select))

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _select$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _select$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _select$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _select$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_nk_input_is_mouse_prev_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN2@nk_toggle_

; 14390:         *state |= NK_WIDGET_STATE_LEFT;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
$LN2@nk_toggle_:

; 14391:     return active;

	mov	eax, DWORD PTR _active$[ebp]

; 14392: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_toggle_behavior ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_do_button_text_image
_TEXT	SEGMENT
tv147 = -260						; size = 4
_content$ = -60						; size = 16
_icon$ = -36						; size = 16
_ret$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_out$ = 12						; size = 4
_bounds$ = 16						; size = 16
_img$ = 32						; size = 16
_str$ = 48						; size = 4
_len$ = 52						; size = 4
_align$ = 56						; size = 4
_behavior$ = 60						; size = 4
_style$ = 64						; size = 4
_font$ = 68						; size = 4
_in$ = 72						; size = 4
_nk_do_button_text_image PROC				; COMDAT

; 14337: {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 14338:     int ret;
; 14339:     struct nk_rect icon;
; 14340:     struct nk_rect content;
; 14341: 
; 14342:     NK_ASSERT(style);

	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN9@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button_text_image@@9@9@ddf8d5d8
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@OIINANNN@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_do_butt:

; 14343:     NK_ASSERT(state);

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN10@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button_text_image@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_do_butt:

; 14344:     NK_ASSERT(font);

	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN11@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button_text_image@@9@9@ddf8d5d8
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_do_butt:

; 14345:     NK_ASSERT(out);

	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN12@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button_text_image@@9@9@ddf8d5d8
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17CMKEDJDI@?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_do_butt:

; 14346:     if (!out || !font || !style || !str)

	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN5@nk_do_butt
	cmp	DWORD PTR _font$[ebp], 0
	je	SHORT $LN5@nk_do_butt
	cmp	DWORD PTR _style$[ebp], 0
	je	SHORT $LN5@nk_do_butt
	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN6@nk_do_butt
$LN5@nk_do_butt:

; 14347:         return nk_false;

	xor	eax, eax
	jmp	$LN7@nk_do_butt
$LN6@nk_do_butt:

; 14348: 
; 14349:     ret = nk_do_button(state, out, bounds, style, in, behavior, &content);

	lea	eax, DWORD PTR _content$[ebp]
	push	eax
	mov	ecx, DWORD PTR _behavior$[ebp]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_nk_do_button
	add	esp, 40					; 00000028H
	mov	DWORD PTR _ret$[ebp], eax

; 14350:     icon.y = bounds.y + style->padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	addss	xmm0, DWORD PTR [eax+96]
	movss	DWORD PTR _icon$[ebp+4], xmm0

; 14351:     icon.w = icon.h = bounds.h - 2 * style->padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+96]
	movss	xmm1, DWORD PTR _bounds$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _icon$[ebp+12], xmm1
	movss	xmm0, DWORD PTR _icon$[ebp+12]
	movss	DWORD PTR _icon$[ebp+8], xmm0

; 14352:     if (align & NK_TEXT_ALIGN_LEFT) {

	mov	eax, DWORD PTR _align$[ebp]
	and	eax, 1
	je	SHORT $LN4@nk_do_butt

; 14353:         icon.x = (bounds.x + bounds.w) - (2 * style->padding.x + icon.w);

	movss	xmm0, DWORD PTR _bounds$[ebp]
	addss	xmm0, DWORD PTR _bounds$[ebp+8]
	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [eax+92]
	addss	xmm1, DWORD PTR _icon$[ebp+8]
	subss	xmm0, xmm1
	movss	DWORD PTR _icon$[ebp], xmm0

; 14354:         icon.x = NK_MAX(icon.x, 0);

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _icon$[ebp]
	jbe	SHORT $LN13@nk_do_butt
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv147[ebp], xmm0
	jmp	SHORT $LN14@nk_do_butt
$LN13@nk_do_butt:
	movss	xmm0, DWORD PTR _icon$[ebp]
	movss	DWORD PTR tv147[ebp], xmm0
$LN14@nk_do_butt:
	movss	xmm0, DWORD PTR tv147[ebp]
	movss	DWORD PTR _icon$[ebp], xmm0
	jmp	SHORT $LN3@nk_do_butt
$LN4@nk_do_butt:

; 14355:     } else icon.x = bounds.x + 2 * style->padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+92]
	addss	xmm0, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR _icon$[ebp], xmm0
$LN3@nk_do_butt:

; 14356: 
; 14357:     icon.x += style->image_padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _icon$[ebp]
	addss	xmm0, DWORD PTR [eax+100]
	movss	DWORD PTR _icon$[ebp], xmm0

; 14358:     icon.y += style->image_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _icon$[ebp+4]
	addss	xmm0, DWORD PTR [eax+104]
	movss	DWORD PTR _icon$[ebp+4], xmm0

; 14359:     icon.w -= 2 * style->image_padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+100]
	movss	xmm1, DWORD PTR _icon$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _icon$[ebp+8], xmm1

; 14360:     icon.h -= 2 * style->image_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+104]
	movss	xmm1, DWORD PTR _icon$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _icon$[ebp+12], xmm1

; 14361: 
; 14362:     if (style->draw_begin) style->draw_begin(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+120], 0
	je	SHORT $LN2@nk_do_butt
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@nk_do_butt:

; 14363:     nk_draw_button_text_image(out, &bounds, &content, &icon, *state, style, str, len, font, &img);

	lea	eax, DWORD PTR _img$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR _icon$[ebp]
	push	ecx
	lea	edx, DWORD PTR _content$[ebp]
	push	edx
	lea	eax, DWORD PTR _bounds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_draw_button_text_image
	add	esp, 40					; 00000028H

; 14364:     if (style->draw_end) style->draw_end(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+124], 0
	je	SHORT $LN1@nk_do_butt
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@nk_do_butt:

; 14365:     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN7@nk_do_butt:

; 14366: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@nk_do_butt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN18@nk_do_butt:
	DD	2
	DD	$LN17@nk_do_butt
$LN17@nk_do_butt:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN15@nk_do_butt
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN16@nk_do_butt
$LN16@nk_do_butt:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN15@nk_do_butt:
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
_nk_do_button_text_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_button_text_image
_TEXT	SEGMENT
_background$ = -36					; size = 4
_text$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_bounds$ = 12						; size = 4
_label$ = 16						; size = 4
_image$ = 20						; size = 4
_state$ = 24						; size = 4
_style$ = 28						; size = 4
_str$ = 32						; size = 4
_len$ = 36						; size = 4
_font$ = 40						; size = 4
_img$ = 44						; size = 4
_nk_draw_button_text_image PROC				; COMDAT

; 14311: {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 14312:     struct nk_text text;
; 14313:     const struct nk_style_item *background;
; 14314:     background = nk_draw_button(out, bounds, state, style);

	mov	eax, DWORD PTR _style$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bounds$[ebp]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_button
	add	esp, 16					; 00000010H
	mov	DWORD PTR _background$[ebp], eax

; 14315: 
; 14316:     /* select correct colors */
; 14317:     if (background->type == NK_STYLE_ITEM_COLOR)

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN6@nk_draw_bu

; 14318:         text.background = background->data.color;

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _text$[ebp+8], ecx
	jmp	SHORT $LN5@nk_draw_bu
$LN6@nk_draw_bu:

; 14319:     else text.background = style->text_background;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _text$[ebp+8], ecx
$LN5@nk_draw_bu:

; 14320:     if (state & NK_WIDGET_STATE_HOVER)

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN4@nk_draw_bu

; 14321:         text.text = style->text_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _text$[ebp+12], ecx
	jmp	SHORT $LN1@nk_draw_bu
$LN4@nk_draw_bu:

; 14322:     else if (state & NK_WIDGET_STATE_ACTIVED)

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN2@nk_draw_bu

; 14323:         text.text = style->text_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _text$[ebp+12], ecx
	jmp	SHORT $LN1@nk_draw_bu
$LN2@nk_draw_bu:

; 14324:     else text.text = style->text_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _text$[ebp+12], ecx
$LN1@nk_draw_bu:

; 14325: 
; 14326:     text.padding = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _text$[ebp], eax
	mov	DWORD PTR _text$[ebp+4], edx

; 14327:     nk_widget_text(out, *label, str, len, &text, NK_TEXT_CENTERED, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	18					; 00000012H
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _label$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_widget_text
	add	esp, 40					; 00000028H

; 14328:     nk_draw_image(out, *image, img, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _img$[ebp]
	push	ecx
	mov	edx, DWORD PTR _image$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 14329: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@nk_draw_bu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@nk_draw_bu:
	DD	1
	DD	$LN10@nk_draw_bu
$LN10@nk_draw_bu:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN9@nk_draw_bu
$LN9@nk_draw_bu:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_nk_draw_button_text_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_do_button_text_symbol
_TEXT	SEGMENT
tv143 = -260						; size = 4
_content$ = -60						; size = 16
_tri$ = -36						; size = 16
_ret$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_out$ = 12						; size = 4
_bounds$ = 16						; size = 16
_symbol$ = 32						; size = 4
_str$ = 36						; size = 4
_len$ = 40						; size = 4
_align$ = 44						; size = 4
_behavior$ = 48						; size = 4
_style$ = 52						; size = 4
_font$ = 56						; size = 4
_in$ = 60						; size = 4
_nk_do_button_text_symbol PROC				; COMDAT

; 14278: {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 14279:     int ret;
; 14280:     struct nk_rect tri = {0,0,0,0};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _tri$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _tri$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _tri$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _tri$[ebp+12], xmm0

; 14281:     struct nk_rect content;
; 14282: 
; 14283:     NK_ASSERT(style);

	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN9@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button_text_symbol@@9@9@ddf8d5d8
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@OIINANNN@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_do_butt:

; 14284:     NK_ASSERT(out);

	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN10@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button_text_symbol@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17CMKEDJDI@?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_do_butt:

; 14285:     NK_ASSERT(font);

	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN11@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button_text_symbol@@9@9@ddf8d5d8
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_do_butt:

; 14286:     if (!out || !style || !font)

	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN5@nk_do_butt
	cmp	DWORD PTR _style$[ebp], 0
	je	SHORT $LN5@nk_do_butt
	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN6@nk_do_butt
$LN5@nk_do_butt:

; 14287:         return nk_false;

	xor	eax, eax
	jmp	$LN7@nk_do_butt
$LN6@nk_do_butt:

; 14288: 
; 14289:     ret = nk_do_button(state, out, bounds, style, in, behavior, &content);

	lea	eax, DWORD PTR _content$[ebp]
	push	eax
	mov	ecx, DWORD PTR _behavior$[ebp]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_nk_do_button
	add	esp, 40					; 00000028H
	mov	DWORD PTR _ret$[ebp], eax

; 14290:     tri.y = content.y + (content.h/2) - font->height/2;

	movss	xmm0, DWORD PTR _content$[ebp+12]
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR _content$[ebp+4]
	mov	eax, DWORD PTR _font$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	divss	xmm1, DWORD PTR __real@40000000
	subss	xmm0, xmm1
	movss	DWORD PTR _tri$[ebp+4], xmm0

; 14291:     tri.w = font->height; tri.h = font->height;

	mov	eax, DWORD PTR _font$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _tri$[ebp+8], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _tri$[ebp+12], xmm0

; 14292:     if (align & NK_TEXT_ALIGN_LEFT) {

	mov	eax, DWORD PTR _align$[ebp]
	and	eax, 1
	je	SHORT $LN4@nk_do_butt

; 14293:         tri.x = (content.x + content.w) - (2 * style->padding.x + tri.w);

	movss	xmm0, DWORD PTR _content$[ebp]
	addss	xmm0, DWORD PTR _content$[ebp+8]
	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [eax+92]
	addss	xmm1, DWORD PTR _tri$[ebp+8]
	subss	xmm0, xmm1
	movss	DWORD PTR _tri$[ebp], xmm0

; 14294:         tri.x = NK_MAX(tri.x, 0);

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _tri$[ebp]
	jbe	SHORT $LN12@nk_do_butt
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv143[ebp], xmm0
	jmp	SHORT $LN13@nk_do_butt
$LN12@nk_do_butt:
	movss	xmm0, DWORD PTR _tri$[ebp]
	movss	DWORD PTR tv143[ebp], xmm0
$LN13@nk_do_butt:
	movss	xmm0, DWORD PTR tv143[ebp]
	movss	DWORD PTR _tri$[ebp], xmm0
	jmp	SHORT $LN3@nk_do_butt
$LN4@nk_do_butt:

; 14295:     } else tri.x = content.x + 2 * style->padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+92]
	addss	xmm0, DWORD PTR _content$[ebp]
	movss	DWORD PTR _tri$[ebp], xmm0
$LN3@nk_do_butt:

; 14296: 
; 14297:     /* draw button */
; 14298:     if (style->draw_begin) style->draw_begin(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+120], 0
	je	SHORT $LN2@nk_do_butt
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@nk_do_butt:

; 14299:     nk_draw_button_text_symbol(out, &bounds, &content, &tri,
; 14300:         *state, style, str, len, symbol, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _symbol$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR _tri$[ebp]
	push	ecx
	lea	edx, DWORD PTR _content$[ebp]
	push	edx
	lea	eax, DWORD PTR _bounds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_draw_button_text_symbol
	add	esp, 40					; 00000028H

; 14301:     if (style->draw_end) style->draw_end(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+124], 0
	je	SHORT $LN1@nk_do_butt
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@nk_do_butt:

; 14302:     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN7@nk_do_butt:

; 14303: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@nk_do_butt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN17@nk_do_butt:
	DD	2
	DD	$LN16@nk_do_butt
$LN16@nk_do_butt:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN14@nk_do_butt
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN15@nk_do_butt
$LN15@nk_do_butt:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN14@nk_do_butt:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	0
_nk_do_button_text_symbol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_button_text_symbol
_TEXT	SEGMENT
_background$ = -48					; size = 4
_text$ = -36						; size = 16
_sym$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_bounds$ = 12						; size = 4
_label$ = 16						; size = 4
_symbol$ = 20						; size = 4
_state$ = 24						; size = 4
_style$ = 28						; size = 4
_str$ = 32						; size = 4
_len$ = 36						; size = 4
_type$ = 40						; size = 4
_font$ = 44						; size = 4
_nk_draw_button_text_symbol PROC			; COMDAT

; 14244: {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 14245:     struct nk_color sym;
; 14246:     struct nk_text text;
; 14247:     const struct nk_style_item *background;
; 14248: 
; 14249:     /* select correct background colors/images */
; 14250:     background = nk_draw_button(out, bounds, state, style);

	mov	eax, DWORD PTR _style$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bounds$[ebp]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_button
	add	esp, 16					; 00000010H
	mov	DWORD PTR _background$[ebp], eax

; 14251:     if (background->type == NK_STYLE_ITEM_COLOR)

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN6@nk_draw_bu

; 14252:         text.background = background->data.color;

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _text$[ebp+8], ecx
	jmp	SHORT $LN5@nk_draw_bu
$LN6@nk_draw_bu:

; 14253:     else text.background = style->text_background;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _text$[ebp+8], ecx
$LN5@nk_draw_bu:

; 14254: 
; 14255:     /* select correct text colors */
; 14256:     if (state & NK_WIDGET_STATE_HOVER) {

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN4@nk_draw_bu

; 14257:         sym = style->text_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _sym$[ebp], ecx

; 14258:         text.text = style->text_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _text$[ebp+12], ecx
	jmp	SHORT $LN1@nk_draw_bu
$LN4@nk_draw_bu:

; 14259:     } else if (state & NK_WIDGET_STATE_ACTIVED) {

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN2@nk_draw_bu

; 14260:         sym = style->text_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _sym$[ebp], ecx

; 14261:         text.text = style->text_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _text$[ebp+12], ecx

; 14262:     } else {

	jmp	SHORT $LN1@nk_draw_bu
$LN2@nk_draw_bu:

; 14263:         sym = style->text_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _sym$[ebp], ecx

; 14264:         text.text = style->text_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _text$[ebp+12], ecx
$LN1@nk_draw_bu:

; 14265:     }
; 14266: 
; 14267:     text.padding = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _text$[ebp], eax
	mov	DWORD PTR _text$[ebp+4], edx

; 14268:     nk_draw_symbol(out, type, *symbol, style->text_background, sym, 0, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _sym$[ebp]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	mov	ecx, DWORD PTR _symbol$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_symbol
	add	esp, 40					; 00000028H

; 14269:     nk_widget_text(out, *label, str, len, &text, NK_TEXT_CENTERED, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	18					; 00000012H
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _label$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_widget_text
	add	esp, 40					; 00000028H

; 14270: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@nk_draw_bu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@nk_draw_bu:
	DD	2
	DD	$LN11@nk_draw_bu
$LN11@nk_draw_bu:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN9@nk_draw_bu
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN10@nk_draw_bu
$LN10@nk_draw_bu:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN9@nk_draw_bu:
	DB	115					; 00000073H
	DB	121					; 00000079H
	DB	109					; 0000006dH
	DB	0
_nk_draw_button_text_symbol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_do_button_image
_TEXT	SEGMENT
_content$ = -36						; size = 16
_ret$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_out$ = 12						; size = 4
_bounds$ = 16						; size = 16
_img$ = 32						; size = 16
_b$ = 48						; size = 4
_style$ = 52						; size = 4
_in$ = 56						; size = 4
_nk_do_button_image PROC				; COMDAT

; 14216: {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 14217:     int ret;
; 14218:     struct nk_rect content;
; 14219: 
; 14220:     NK_ASSERT(state);

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN7@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button_image@@9@9@ddf8d5d8
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_do_butt:

; 14221:     NK_ASSERT(style);

	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN8@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button_image@@9@9@ddf8d5d8
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@OIINANNN@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_do_butt:

; 14222:     NK_ASSERT(out);

	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN9@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button_image@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17CMKEDJDI@?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_do_butt:

; 14223:     if (!out || !style || !state)

	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN3@nk_do_butt
	cmp	DWORD PTR _style$[ebp], 0
	je	SHORT $LN3@nk_do_butt
	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN4@nk_do_butt
$LN3@nk_do_butt:

; 14224:         return nk_false;

	xor	eax, eax
	jmp	$LN5@nk_do_butt
$LN4@nk_do_butt:

; 14225: 
; 14226:     ret = nk_do_button(state, out, bounds, style, in, b, &content);

	lea	eax, DWORD PTR _content$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_nk_do_button
	add	esp, 40					; 00000028H
	mov	DWORD PTR _ret$[ebp], eax

; 14227:     content.x += style->image_padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _content$[ebp]
	addss	xmm0, DWORD PTR [eax+100]
	movss	DWORD PTR _content$[ebp], xmm0

; 14228:     content.y += style->image_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _content$[ebp+4]
	addss	xmm0, DWORD PTR [eax+104]
	movss	DWORD PTR _content$[ebp+4], xmm0

; 14229:     content.w -= 2 * style->image_padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+100]
	movss	xmm1, DWORD PTR _content$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _content$[ebp+8], xmm1

; 14230:     content.h -= 2 * style->image_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+104]
	movss	xmm1, DWORD PTR _content$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _content$[ebp+12], xmm1

; 14231: 
; 14232:     if (style->draw_begin) style->draw_begin(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+120], 0
	je	SHORT $LN2@nk_do_butt
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@nk_do_butt:

; 14233:     nk_draw_button_image(out, &bounds, &content, *state, style, &img);

	lea	eax, DWORD PTR _img$[ebp]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR _content$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bounds$[ebp]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_button_image
	add	esp, 24					; 00000018H

; 14234:     if (style->draw_end) style->draw_end(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+124], 0
	je	SHORT $LN1@nk_do_butt
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@nk_do_butt:

; 14235:     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN5@nk_do_butt:

; 14236: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@nk_do_butt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@nk_do_butt:
	DD	1
	DD	$LN11@nk_do_butt
$LN11@nk_do_butt:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN10@nk_do_butt
$LN10@nk_do_butt:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_nk_do_button_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_button_image
_TEXT	SEGMENT
_out$ = 8						; size = 4
_bounds$ = 12						; size = 4
_content$ = 16						; size = 4
_state$ = 20						; size = 4
_style$ = 24						; size = 4
_img$ = 28						; size = 4
_nk_draw_button_image PROC				; COMDAT

; 14206: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 14207:     nk_draw_button(out, bounds, state, style);

	mov	eax, DWORD PTR _style$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bounds$[ebp]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_button
	add	esp, 16					; 00000010H

; 14208:     nk_draw_image(out, *content, img, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _img$[ebp]
	push	ecx
	mov	edx, DWORD PTR _content$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 14209: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_button_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_do_button_symbol
_TEXT	SEGMENT
_content$ = -36						; size = 16
_ret$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_out$ = 12						; size = 4
_bounds$ = 16						; size = 16
_symbol$ = 32						; size = 4
_behavior$ = 36						; size = 4
_style$ = 40						; size = 4
_in$ = 44						; size = 4
_font$ = 48						; size = 4
_nk_do_button_symbol PROC				; COMDAT

; 14184: {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 14185:     int ret;
; 14186:     struct nk_rect content;
; 14187: 
; 14188:     NK_ASSERT(state);

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN7@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button_symbol@@9@9@ddf8d5d8
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_do_butt:

; 14189:     NK_ASSERT(style);

	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN8@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button_symbol@@9@9@ddf8d5d8
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@OIINANNN@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_do_butt:

; 14190:     NK_ASSERT(font);

	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN9@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button_symbol@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_do_butt:

; 14191:     NK_ASSERT(out);

	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN10@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button_symbol@@9@9@ddf8d5d8
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17CMKEDJDI@?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_do_butt:

; 14192:     if (!out || !style || !font || !state)

	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN3@nk_do_butt
	cmp	DWORD PTR _style$[ebp], 0
	je	SHORT $LN3@nk_do_butt
	cmp	DWORD PTR _font$[ebp], 0
	je	SHORT $LN3@nk_do_butt
	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN4@nk_do_butt
$LN3@nk_do_butt:

; 14193:         return nk_false;

	xor	eax, eax
	jmp	$LN5@nk_do_butt
$LN4@nk_do_butt:

; 14194: 
; 14195:     ret = nk_do_button(state, out, bounds, style, in, behavior, &content);

	lea	eax, DWORD PTR _content$[ebp]
	push	eax
	mov	ecx, DWORD PTR _behavior$[ebp]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_nk_do_button
	add	esp, 40					; 00000028H
	mov	DWORD PTR _ret$[ebp], eax

; 14196:     if (style->draw_begin) style->draw_begin(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+120], 0
	je	SHORT $LN2@nk_do_butt
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@nk_do_butt:

; 14197:     nk_draw_button_symbol(out, &bounds, &content, *state, style, symbol, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _symbol$[ebp]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR _content$[ebp]
	push	edx
	lea	eax, DWORD PTR _bounds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_draw_button_symbol
	add	esp, 28					; 0000001cH

; 14198:     if (style->draw_end) style->draw_end(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+124], 0
	je	SHORT $LN1@nk_do_butt
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@nk_do_butt:

; 14199:     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN5@nk_do_butt:

; 14200: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@nk_do_butt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@nk_do_butt:
	DD	1
	DD	$LN12@nk_do_butt
$LN12@nk_do_butt:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN11@nk_do_butt
$LN11@nk_do_butt:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_nk_do_button_symbol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_button_symbol
_TEXT	SEGMENT
_background$ = -32					; size = 4
_bg$ = -20						; size = 4
_sym$ = -8						; size = 4
_out$ = 8						; size = 4
_bounds$ = 12						; size = 4
_content$ = 16						; size = 4
_state$ = 20						; size = 4
_style$ = 24						; size = 4
_type$ = 28						; size = 4
_font$ = 32						; size = 4
_nk_draw_button_symbol PROC				; COMDAT

; 14160: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 14161:     struct nk_color sym, bg;
; 14162:     const struct nk_style_item *background;
; 14163: 
; 14164:     /* select correct colors/images */
; 14165:     background = nk_draw_button(out, bounds, state, style);

	mov	eax, DWORD PTR _style$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bounds$[ebp]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_button
	add	esp, 16					; 00000010H
	mov	DWORD PTR _background$[ebp], eax

; 14166:     if (background->type == NK_STYLE_ITEM_COLOR)

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN6@nk_draw_bu

; 14167:         bg = background->data.color;

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _bg$[ebp], ecx
	jmp	SHORT $LN5@nk_draw_bu
$LN6@nk_draw_bu:

; 14168:     else bg = style->text_background;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _bg$[ebp], ecx
$LN5@nk_draw_bu:

; 14169: 
; 14170:     if (state & NK_WIDGET_STATE_HOVER)

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN4@nk_draw_bu

; 14171:         sym = style->text_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _sym$[ebp], ecx
	jmp	SHORT $LN1@nk_draw_bu
$LN4@nk_draw_bu:

; 14172:     else if (state & NK_WIDGET_STATE_ACTIVED)

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN2@nk_draw_bu

; 14173:         sym = style->text_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _sym$[ebp], ecx
	jmp	SHORT $LN1@nk_draw_bu
$LN2@nk_draw_bu:

; 14174:     else sym = style->text_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _sym$[ebp], ecx
$LN1@nk_draw_bu:

; 14175:     nk_draw_symbol(out, type, *content, bg, sym, 1, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _sym$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bg$[ebp]
	push	edx
	mov	eax, DWORD PTR _content$[ebp]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_draw_symbol
	add	esp, 40					; 00000028H

; 14176: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@nk_draw_bu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@nk_draw_bu:
	DD	2
	DD	$LN11@nk_draw_bu
$LN11@nk_draw_bu:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN9@nk_draw_bu
	DD	-20					; ffffffecH
	DD	4
	DD	$LN10@nk_draw_bu
$LN10@nk_draw_bu:
	DB	98					; 00000062H
	DB	103					; 00000067H
	DB	0
$LN9@nk_draw_bu:
	DB	115					; 00000073H
	DB	121					; 00000079H
	DB	109					; 0000006dH
	DB	0
_nk_draw_button_symbol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_do_button_text
_TEXT	SEGMENT
_ret$ = -36						; size = 4
_content$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_out$ = 12						; size = 4
_bounds$ = 16						; size = 16
_string$ = 32						; size = 4
_len$ = 36						; size = 4
_align$ = 40						; size = 4
_behavior$ = 44						; size = 4
_style$ = 48						; size = 4
_in$ = 52						; size = 4
_font$ = 56						; size = 4
_nk_do_button_text PROC					; COMDAT

; 14136: {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 14137:     struct nk_rect content;
; 14138:     int ret = nk_false;

	mov	DWORD PTR _ret$[ebp], 0

; 14139: 
; 14140:     NK_ASSERT(state);

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN7@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button_text@@9@9@ddf8d5d8
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_do_butt:

; 14141:     NK_ASSERT(style);

	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN8@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button_text@@9@9@ddf8d5d8
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@OIINANNN@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_do_butt:

; 14142:     NK_ASSERT(out);

	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN9@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button_text@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17CMKEDJDI@?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_do_butt:

; 14143:     NK_ASSERT(string);

	cmp	DWORD PTR _string$[ebp], 0
	jne	SHORT $LN10@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button_text@@9@9@ddf8d5d8
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@DGBBOFII@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_do_butt:

; 14144:     NK_ASSERT(font);

	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN11@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button_text@@9@9@ddf8d5d8
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_do_butt:

; 14145:     if (!out || !style || !font || !string)

	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN3@nk_do_butt
	cmp	DWORD PTR _style$[ebp], 0
	je	SHORT $LN3@nk_do_butt
	cmp	DWORD PTR _font$[ebp], 0
	je	SHORT $LN3@nk_do_butt
	cmp	DWORD PTR _string$[ebp], 0
	jne	SHORT $LN4@nk_do_butt
$LN3@nk_do_butt:

; 14146:         return nk_false;

	xor	eax, eax
	jmp	$LN5@nk_do_butt
$LN4@nk_do_butt:

; 14147: 
; 14148:     ret = nk_do_button(state, out, bounds, style, in, behavior, &content);

	lea	eax, DWORD PTR _content$[ebp]
	push	eax
	mov	ecx, DWORD PTR _behavior$[ebp]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_nk_do_button
	add	esp, 40					; 00000028H
	mov	DWORD PTR _ret$[ebp], eax

; 14149:     if (style->draw_begin) style->draw_begin(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+120], 0
	je	SHORT $LN2@nk_do_butt
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@nk_do_butt:

; 14150:     nk_draw_button_text(out, &bounds, &content, *state, style, string, len, align, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _align$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR _content$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bounds$[ebp]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_button_text
	add	esp, 36					; 00000024H

; 14151:     if (style->draw_end) style->draw_end(out, style->userdata);

	mov	eax, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [eax+124], 0
	je	SHORT $LN1@nk_do_butt
	mov	esi, esp
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@nk_do_butt:

; 14152:     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN5@nk_do_butt:

; 14153: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_do_butt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@nk_do_butt:
	DD	1
	DD	$LN13@nk_do_butt
$LN13@nk_do_butt:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN12@nk_do_butt
$LN12@nk_do_butt:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_nk_do_button_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_button_text
_TEXT	SEGMENT
_background$ = -36					; size = 4
_text$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_bounds$ = 12						; size = 4
_content$ = 16						; size = 4
_state$ = 20						; size = 4
_style$ = 24						; size = 4
_txt$ = 28						; size = 4
_len$ = 32						; size = 4
_text_alignment$ = 36					; size = 4
_font$ = 40						; size = 4
_nk_draw_button_text PROC				; COMDAT

; 14111: {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 14112:     struct nk_text text;
; 14113:     const struct nk_style_item *background;
; 14114:     background = nk_draw_button(out, bounds, state, style);

	mov	eax, DWORD PTR _style$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bounds$[ebp]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_button
	add	esp, 16					; 00000010H
	mov	DWORD PTR _background$[ebp], eax

; 14115: 
; 14116:     /* select correct colors/images */
; 14117:     if (background->type == NK_STYLE_ITEM_COLOR)

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN6@nk_draw_bu

; 14118:         text.background = background->data.color;

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _text$[ebp+8], ecx
	jmp	SHORT $LN5@nk_draw_bu
$LN6@nk_draw_bu:

; 14119:     else text.background = style->text_background;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _text$[ebp+8], ecx
$LN5@nk_draw_bu:

; 14120:     if (state & NK_WIDGET_STATE_HOVER)

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN4@nk_draw_bu

; 14121:         text.text = style->text_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _text$[ebp+12], ecx
	jmp	SHORT $LN1@nk_draw_bu
$LN4@nk_draw_bu:

; 14122:     else if (state & NK_WIDGET_STATE_ACTIVED)

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN2@nk_draw_bu

; 14123:         text.text = style->text_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _text$[ebp+12], ecx
	jmp	SHORT $LN1@nk_draw_bu
$LN2@nk_draw_bu:

; 14124:     else text.text = style->text_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _text$[ebp+12], ecx
$LN1@nk_draw_bu:

; 14125: 
; 14126:     text.padding = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _text$[ebp], eax
	mov	DWORD PTR _text$[ebp+4], edx

; 14127:     nk_widget_text(out, *content, txt, len, &text, text_alignment, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text_alignment$[ebp]
	push	ecx
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _txt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _content$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_widget_text
	add	esp, 40					; 00000028H

; 14128: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@nk_draw_bu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN11@nk_draw_bu:
	DD	1
	DD	$LN10@nk_draw_bu
$LN10@nk_draw_bu:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN9@nk_draw_bu
$LN9@nk_draw_bu:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_nk_draw_button_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_do_button
_TEXT	SEGMENT
_bounds$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_out$ = 12						; size = 4
_r$ = 16						; size = 16
_style$ = 32						; size = 4
_in$ = 36						; size = 4
_behavior$ = 40						; size = 4
_content$ = 44						; size = 4
_nk_do_button PROC					; COMDAT

; 14084: {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 14085:     struct nk_rect bounds;
; 14086:     NK_ASSERT(style);

	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN5@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button@@9@9@ddf8d5d8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@OIINANNN@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_do_butt:

; 14087:     NK_ASSERT(state);

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN6@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button@@9@9@ddf8d5d8
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_do_butt:

; 14088:     NK_ASSERT(out);

	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN7@nk_do_butt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_do_button@@9@9@ddf8d5d8
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17CMKEDJDI@?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_do_butt:

; 14089:     if (!out || !style)

	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN1@nk_do_butt
	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN2@nk_do_butt
$LN1@nk_do_butt:

; 14090:         return nk_false;

	xor	eax, eax
	jmp	$LN3@nk_do_butt
$LN2@nk_do_butt:

; 14091: 
; 14092:     /* calculate button content space */
; 14093:     content->x = r.x + style->padding.x + style->border + style->rounding;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR [eax+92]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+84]
	mov	edx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [edx+88]
	mov	eax, DWORD PTR _content$[ebp]
	movss	DWORD PTR [eax], xmm0

; 14094:     content->y = r.y + style->padding.y + style->border + style->rounding;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _r$[ebp+4]
	addss	xmm0, DWORD PTR [eax+96]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+84]
	mov	edx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [edx+88]
	mov	eax, DWORD PTR _content$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 14095:     content->w = r.w - (2 * style->padding.x + style->border + style->rounding*2);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+92]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+84]
	mov	edx, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR [edx+88]
	mulss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _r$[ebp+8]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _content$[ebp]
	movss	DWORD PTR [eax+8], xmm1

; 14096:     content->h = r.h - (2 * style->padding.y + style->border + style->rounding*2);

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+96]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+84]
	mov	edx, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR [edx+88]
	mulss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _r$[ebp+12]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _content$[ebp]
	movss	DWORD PTR [eax+12], xmm1

; 14097: 
; 14098:     /* execute button behavior */
; 14099:     bounds.x = r.x - style->touch_padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _r$[ebp]
	subss	xmm0, DWORD PTR [eax+108]
	movss	DWORD PTR _bounds$[ebp], xmm0

; 14100:     bounds.y = r.y - style->touch_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _r$[ebp+4]
	subss	xmm0, DWORD PTR [eax+112]
	movss	DWORD PTR _bounds$[ebp+4], xmm0

; 14101:     bounds.w = r.w + 2 * style->touch_padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+108]
	addss	xmm0, DWORD PTR _r$[ebp+8]
	movss	DWORD PTR _bounds$[ebp+8], xmm0

; 14102:     bounds.h = r.h + 2 * style->touch_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+112]
	addss	xmm0, DWORD PTR _r$[ebp+12]
	movss	DWORD PTR _bounds$[ebp+12], xmm0

; 14103:     return nk_button_behavior(state, bounds, in, behavior);

	mov	eax, DWORD PTR _behavior$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_nk_button_behavior
	add	esp, 28					; 0000001cH
$LN3@nk_do_butt:

; 14104: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@nk_do_butt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@nk_do_butt:
	DD	1
	DD	$LN9@nk_do_butt
$LN9@nk_do_butt:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN8@nk_do_butt
$LN8@nk_do_butt:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_do_button ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_button
_TEXT	SEGMENT
_background$ = -8					; size = 4
_out$ = 8						; size = 4
_bounds$ = 12						; size = 4
_state$ = 16						; size = 4
_style$ = 20						; size = 4
_nk_draw_button PROC					; COMDAT

; 14063: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 14064:     const struct nk_style_item *background;
; 14065:     if (state & NK_WIDGET_STATE_HOVER)

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN6@nk_draw_bu

; 14066:         background = &style->hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _background$[ebp], eax
	jmp	SHORT $LN3@nk_draw_bu
$LN6@nk_draw_bu:

; 14067:     else if (state & NK_WIDGET_STATE_ACTIVED)

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN4@nk_draw_bu

; 14068:         background = &style->active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _background$[ebp], eax
	jmp	SHORT $LN3@nk_draw_bu
$LN4@nk_draw_bu:

; 14069:     else background = &style->normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	DWORD PTR _background$[ebp], eax
$LN3@nk_draw_bu:

; 14070: 
; 14071:     if (background->type == NK_STYLE_ITEM_IMAGE) {

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN2@nk_draw_bu

; 14072:         nk_draw_image(out, *bounds, &background->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _background$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 14073:     } else {

	jmp	$LN1@nk_draw_bu
$LN2@nk_draw_bu:

; 14074:         nk_fill_rect(out, *bounds, style->rounding, background->data.color);

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+88]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 14075:         nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+84]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+88]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _bounds$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_stroke_rect
	add	esp, 32					; 00000020H
$LN1@nk_draw_bu:

; 14076:     }
; 14077:     return background;

	mov	eax, DWORD PTR _background$[ebp]

; 14078: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_button ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_behavior
_TEXT	SEGMENT
tv87 = -208						; size = 4
_ret$ = -8						; size = 4
_state$ = 8						; size = 4
_r$ = 12						; size = 16
_i$ = 28						; size = 4
_behavior$ = 32						; size = 4
_nk_button_behavior PROC				; COMDAT

; 14034: {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 14035:     int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 14036:     nk_widget_state_reset(state);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2
	je	SHORT $LN9@nk_button_
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 6
	jmp	SHORT $LN8@nk_button_
$LN9@nk_button_:
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 4
$LN8@nk_button_:

; 14037:     if (!i) return 0;

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN7@nk_button_
	xor	eax, eax
	jmp	$LN10@nk_button_
$LN7@nk_button_:

; 14038:     if (nk_input_is_mouse_hovering_rect(i, r)) {

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN6@nk_button_

; 14039:         *state = NK_WIDGET_STATE_HOVERED;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H

; 14040:         if (nk_input_is_mouse_down(i, NK_BUTTON_LEFT))

	push	0
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_nk_input_is_mouse_down
	add	esp, 8
	test	eax, eax
	je	SHORT $LN5@nk_button_

; 14041:             *state = NK_WIDGET_STATE_ACTIVE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 34			; 00000022H
$LN5@nk_button_:

; 14042:         if (nk_input_has_mouse_click_in_rect(i, NK_BUTTON_LEFT, r)) {

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	push	0
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_nk_input_has_mouse_click_in_rect
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN6@nk_button_

; 14043:             ret = (behavior != NK_BUTTON_DEFAULT) ?
; 14044:                 nk_input_is_mouse_down(i, NK_BUTTON_LEFT):
; 14045: #ifdef NK_BUTTON_TRIGGER_ON_RELEASE
; 14046:                 nk_input_is_mouse_released(i, NK_BUTTON_LEFT);
; 14047: #else
; 14048:                 nk_input_is_mouse_pressed(i, NK_BUTTON_LEFT);

	cmp	DWORD PTR _behavior$[ebp], 0
	je	SHORT $LN12@nk_button_
	push	0
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_nk_input_is_mouse_down
	add	esp, 8
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN13@nk_button_
$LN12@nk_button_:
	push	0
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_nk_input_is_mouse_pressed
	add	esp, 8
	mov	DWORD PTR tv87[ebp], eax
$LN13@nk_button_:
	mov	edx, DWORD PTR tv87[ebp]
	mov	DWORD PTR _ret$[ebp], edx
$LN6@nk_button_:

; 14049: #endif
; 14050:         }
; 14051:     }
; 14052:     if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(i, r))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 16					; 00000010H
	je	SHORT $LN3@nk_button_
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_nk_input_is_mouse_prev_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN3@nk_button_

; 14053:         *state |= NK_WIDGET_STATE_ENTERED;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 8
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@nk_button_
$LN3@nk_button_:

; 14054:     else if (nk_input_is_mouse_prev_hovering_rect(i, r))

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_nk_input_is_mouse_prev_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN2@nk_button_

; 14055:         *state |= NK_WIDGET_STATE_LEFT;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
$LN2@nk_button_:

; 14056:     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN10@nk_button_:

; 14057: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_button_behavior ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_symbol
_TEXT	SEGMENT
tv142 = -336						; size = 4
tv68 = -336						; size = 4
tv143 = -332						; size = 4
tv69 = -332						; size = 4
tv144 = -328						; size = 4
tv70 = -328						; size = 4
tv64 = -328						; size = 4
$T1 = -320						; size = 16
$T2 = -296						; size = 16
_points$3 = -80						; size = 24
_heading$4 = -48					; size = 4
_text$5 = -36						; size = 16
_X$6 = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_type$ = 12						; size = 4
_content$ = 16						; size = 16
_background$ = 32					; size = 4
_foreground$ = 36					; size = 4
_border_width$ = 40					; size = 4
_font$ = 44						; size = 4
_nk_draw_symbol PROC					; COMDAT

; 13981: {

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 13982:     switch (type) {

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 11			; 0000000bH
	ja	$LN1@nk_draw_sy
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN26@nk_draw_sy[edx]
	jmp	DWORD PTR $LN31@nk_draw_sy[eax*4]
$LN9@nk_draw_sy:

; 13983:     case NK_SYMBOL_X:
; 13984:     case NK_SYMBOL_UNDERSCORE:
; 13985:     case NK_SYMBOL_PLUS:
; 13986:     case NK_SYMBOL_MINUS: {
; 13987:         /* single character text symbol */
; 13988:         const char *X = (type == NK_SYMBOL_X) ? "x":
; 13989:             (type == NK_SYMBOL_UNDERSCORE) ? "_":
; 13990:             (type == NK_SYMBOL_PLUS) ? "+": "-";

	cmp	DWORD PTR _type$[ebp], 1
	jne	SHORT $LN18@nk_draw_sy
	mov	DWORD PTR tv70[ebp], OFFSET ??_C@_01FJMABOPO@x?$AA@
	jmp	SHORT $LN19@nk_draw_sy
$LN18@nk_draw_sy:
	cmp	DWORD PTR _type$[ebp], 2
	jne	SHORT $LN16@nk_draw_sy
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_01IDAFKMJL@_?$AA@
	jmp	SHORT $LN17@nk_draw_sy
$LN16@nk_draw_sy:
	cmp	DWORD PTR _type$[ebp], 11		; 0000000bH
	jne	SHORT $LN14@nk_draw_sy
	mov	DWORD PTR tv68[ebp], OFFSET ??_C@_01MIFGBAGJ@?$CL?$AA@
	jmp	SHORT $LN15@nk_draw_sy
$LN14@nk_draw_sy:
	mov	DWORD PTR tv68[ebp], OFFSET ??_C@_01JOAMLHOP@?9?$AA@
$LN15@nk_draw_sy:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], eax
$LN17@nk_draw_sy:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], ecx
$LN19@nk_draw_sy:
	mov	edx, DWORD PTR tv70[ebp]
	mov	DWORD PTR _X$6[ebp], edx

; 13991:         struct nk_text text;
; 13992:         text.padding = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _text$5[ebp], eax
	mov	DWORD PTR _text$5[ebp+4], edx

; 13993:         text.background = background;

	mov	eax, DWORD PTR _background$[ebp]
	mov	DWORD PTR _text$5[ebp+8], eax

; 13994:         text.text = foreground;

	mov	eax, DWORD PTR _foreground$[ebp]
	mov	DWORD PTR _text$5[ebp+12], eax

; 13995:         nk_widget_text(out, content, X, 1, &text, NK_TEXT_CENTERED, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	18					; 00000012H
	lea	ecx, DWORD PTR _text$5[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _X$6[ebp]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _content$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _content$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _content$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _content$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_widget_text
	add	esp, 40					; 00000028H

; 13996:     } break;

	jmp	$LN10@nk_draw_sy
$LN8@nk_draw_sy:

; 13997:     case NK_SYMBOL_CIRCLE_SOLID:
; 13998:     case NK_SYMBOL_CIRCLE_OUTLINE:
; 13999:     case NK_SYMBOL_RECT_SOLID:
; 14000:     case NK_SYMBOL_RECT_OUTLINE: {
; 14001:         /* simple empty/filled shapes */
; 14002:         if (type == NK_SYMBOL_RECT_SOLID || type == NK_SYMBOL_RECT_OUTLINE) {

	cmp	DWORD PTR _type$[ebp], 5
	je	SHORT $LN6@nk_draw_sy
	cmp	DWORD PTR _type$[ebp], 6
	jne	$LN7@nk_draw_sy
$LN6@nk_draw_sy:

; 14003:             nk_fill_rect(out, content,  0, foreground);

	mov	eax, DWORD PTR _foreground$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _content$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _content$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _content$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _content$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 14004:             if (type == NK_SYMBOL_RECT_OUTLINE)

	cmp	DWORD PTR _type$[ebp], 6
	jne	SHORT $LN5@nk_draw_sy

; 14005:                 nk_fill_rect(out, nk_shrink_rect(content, border_width), 0, background);

	mov	eax, DWORD PTR _background$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _border_width$[ebp]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _content$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _content$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _content$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _content$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_nk_shrink_rect
	add	esp, 8
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH
$LN5@nk_draw_sy:

; 14006:         } else {

	jmp	$LN3@nk_draw_sy
$LN7@nk_draw_sy:

; 14007:             nk_fill_circle(out, content, foreground);

	mov	eax, DWORD PTR _foreground$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _content$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _content$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _content$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _content$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_circle
	add	esp, 24					; 00000018H

; 14008:             if (type == NK_SYMBOL_CIRCLE_OUTLINE)

	cmp	DWORD PTR _type$[ebp], 4
	jne	SHORT $LN3@nk_draw_sy

; 14009:                 nk_fill_circle(out, nk_shrink_rect(content, 1), background);

	mov	eax, DWORD PTR _background$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _content$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _content$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _content$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _content$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	_nk_shrink_rect
	add	esp, 8
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_fill_circle
	add	esp, 24					; 00000018H
$LN3@nk_draw_sy:

; 14010:         }
; 14011:     } break;

	jmp	$LN10@nk_draw_sy
$LN2@nk_draw_sy:

; 14012:     case NK_SYMBOL_TRIANGLE_UP:
; 14013:     case NK_SYMBOL_TRIANGLE_DOWN:
; 14014:     case NK_SYMBOL_TRIANGLE_LEFT:
; 14015:     case NK_SYMBOL_TRIANGLE_RIGHT: {
; 14016:         enum nk_heading heading;
; 14017:         struct nk_vec2 points[3];
; 14018:         heading = (type == NK_SYMBOL_TRIANGLE_RIGHT) ? NK_RIGHT :
; 14019:             (type == NK_SYMBOL_TRIANGLE_LEFT) ? NK_LEFT:
; 14020:             (type == NK_SYMBOL_TRIANGLE_UP) ? NK_UP: NK_DOWN;

	cmp	DWORD PTR _type$[ebp], 10		; 0000000aH
	jne	SHORT $LN24@nk_draw_sy
	mov	DWORD PTR tv144[ebp], 1
	jmp	SHORT $LN25@nk_draw_sy
$LN24@nk_draw_sy:
	cmp	DWORD PTR _type$[ebp], 9
	jne	SHORT $LN22@nk_draw_sy
	mov	DWORD PTR tv143[ebp], 3
	jmp	SHORT $LN23@nk_draw_sy
$LN22@nk_draw_sy:
	cmp	DWORD PTR _type$[ebp], 7
	jne	SHORT $LN20@nk_draw_sy
	mov	DWORD PTR tv142[ebp], 0
	jmp	SHORT $LN21@nk_draw_sy
$LN20@nk_draw_sy:
	mov	DWORD PTR tv142[ebp], 2
$LN21@nk_draw_sy:
	mov	eax, DWORD PTR tv142[ebp]
	mov	DWORD PTR tv143[ebp], eax
$LN23@nk_draw_sy:
	mov	ecx, DWORD PTR tv143[ebp]
	mov	DWORD PTR tv144[ebp], ecx
$LN25@nk_draw_sy:
	mov	edx, DWORD PTR tv144[ebp]
	mov	DWORD PTR _heading$4[ebp], edx

; 14021:         nk_triangle_from_direction(points, content, 0, 0, heading);

	mov	eax, DWORD PTR _heading$4[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _content$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _content$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _content$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _content$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR _points$3[ebp]
	push	ecx
	call	_nk_triangle_from_direction
	add	esp, 32					; 00000020H

; 14022:         nk_fill_triangle(out, points[0].x, points[0].y, points[1].x, points[1].y,
; 14023:             points[2].x, points[2].y, foreground);

	mov	eax, DWORD PTR _foreground$[ebp]
	push	eax
	mov	ecx, 8
	shl	ecx, 1
	push	ecx
	movss	xmm0, DWORD PTR _points$3[ebp+ecx+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 1
	push	ecx
	movss	xmm0, DWORD PTR _points$3[ebp+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR _points$3[ebp+eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR _points$3[ebp+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	eax, edx, 0
	push	ecx
	movss	xmm0, DWORD PTR _points$3[ebp+eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	imul	edx, ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR _points$3[ebp+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_fill_triangle
	add	esp, 32					; 00000020H
$LN1@nk_draw_sy:
$LN10@nk_draw_sy:

; 14024:     } break;
; 14025:     default:
; 14026:     case NK_SYMBOL_NONE:
; 14027:     case NK_SYMBOL_MAX: break;
; 14028:     }
; 14029: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@nk_draw_sy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN30@nk_draw_sy:
	DD	2
	DD	$LN29@nk_draw_sy
$LN29@nk_draw_sy:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN27@nk_draw_sy
	DD	-80					; ffffffb0H
	DD	24					; 00000018H
	DD	$LN28@nk_draw_sy
$LN28@nk_draw_sy:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN27@nk_draw_sy:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN31@nk_draw_sy:
	DD	$LN9@nk_draw_sy
	DD	$LN8@nk_draw_sy
	DD	$LN2@nk_draw_sy
$LN26@nk_draw_sy:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	0
_nk_draw_symbol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_widget_text_wrap
_TEXT	SEGMENT
tv132 = -296						; size = 4
tv92 = -296						; size = 4
_text$ = -96						; size = 16
_line$ = -72						; size = 16
_done$ = -48						; size = 4
_fitting$ = -36						; size = 4
_glyphs$ = -24						; size = 4
_width$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_o$ = 8							; size = 4
_b$ = 12						; size = 16
_string$ = 28						; size = 4
_len$ = 32						; size = 4
_t$ = 36						; size = 4
_f$ = 40						; size = 4
_nk_widget_text_wrap PROC				; COMDAT

; 13936: {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 13937:     float width;
; 13938:     int glyphs = 0;

	mov	DWORD PTR _glyphs$[ebp], 0

; 13939:     int fitting = 0;

	mov	DWORD PTR _fitting$[ebp], 0

; 13940:     int done = 0;

	mov	DWORD PTR _done$[ebp], 0

; 13941:     struct nk_rect line;
; 13942:     struct nk_text text;
; 13943:     NK_INTERN nk_rune seperator[] = {' '};
; 13944: 
; 13945:     NK_ASSERT(o);

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN9@nk_widget_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_widget_text_wrap@@9@9@ddf8d5d8
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13LNPOMHLG@?$AAo?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_widget_:

; 13946:     NK_ASSERT(t);

	cmp	DWORD PTR _t$[ebp], 0
	jne	SHORT $LN10@nk_widget_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_widget_text_wrap@@9@9@ddf8d5d8
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13DKOGBHCI@?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_widget_:

; 13947:     if (!o || !t) return;

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN5@nk_widget_
	cmp	DWORD PTR _t$[ebp], 0
	jne	SHORT $LN6@nk_widget_
$LN5@nk_widget_:
	jmp	$LN3@nk_widget_
$LN6@nk_widget_:

; 13948: 
; 13949:     text.padding = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _text$[ebp], eax
	mov	DWORD PTR _text$[ebp+4], edx

; 13950:     text.background = t->background;

	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _text$[ebp+8], ecx

; 13951:     text.text = t->text;

	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _text$[ebp+12], ecx

; 13952: 
; 13953:     b.w = NK_MAX(b.w, 2 * t->padding.x);

	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR _b$[ebp+8]
	jbe	SHORT $LN11@nk_widget_
	mov	ecx, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR tv92[ebp], xmm0
	jmp	SHORT $LN12@nk_widget_
$LN11@nk_widget_:
	movss	xmm0, DWORD PTR _b$[ebp+8]
	movss	DWORD PTR tv92[ebp], xmm0
$LN12@nk_widget_:
	movss	xmm0, DWORD PTR tv92[ebp]
	movss	DWORD PTR _b$[ebp+8], xmm0

; 13954:     b.h = NK_MAX(b.h, 2 * t->padding.y);

	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4]
	comiss	xmm0, DWORD PTR _b$[ebp+12]
	jbe	SHORT $LN13@nk_widget_
	mov	ecx, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR tv132[ebp], xmm0
	jmp	SHORT $LN14@nk_widget_
$LN13@nk_widget_:
	movss	xmm0, DWORD PTR _b$[ebp+12]
	movss	DWORD PTR tv132[ebp], xmm0
$LN14@nk_widget_:
	movss	xmm0, DWORD PTR tv132[ebp]
	movss	DWORD PTR _b$[ebp+12], xmm0

; 13955:     b.h = b.h - 2 * t->padding.y;

	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4]
	movss	xmm1, DWORD PTR _b$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _b$[ebp+12], xmm1

; 13956: 
; 13957:     line.x = b.x + t->padding.x;

	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR _b$[ebp]
	addss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _line$[ebp], xmm0

; 13958:     line.y = b.y + t->padding.y;

	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR _b$[ebp+4]
	addss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _line$[ebp+4], xmm0

; 13959:     line.w = b.w - 2 * t->padding.x;

	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR _b$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _line$[ebp+8], xmm1

; 13960:     line.h = 2 * t->padding.y + f->height;

	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _f$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _line$[ebp+12], xmm0

; 13961: 
; 13962:     fitting = nk_text_clamp(f, string, len, line.w, &glyphs, &width, seperator,NK_LEN(seperator));

	push	1
	push	OFFSET ?seperator@?1??nk_widget_text_wrap@@9@9
	lea	eax, DWORD PTR _width$[ebp]
	push	eax
	lea	ecx, DWORD PTR _glyphs$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _line$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	call	_nk_text_clamp
	add	esp, 32					; 00000020H
	mov	DWORD PTR _fitting$[ebp], eax
$LN4@nk_widget_:

; 13963:     while (done < len) {

	mov	eax, DWORD PTR _done$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	$LN3@nk_widget_

; 13964:         if (!fitting || line.y + line.h >= (b.y + b.h)) break;

	cmp	DWORD PTR _fitting$[ebp], 0
	je	SHORT $LN1@nk_widget_
	movss	xmm0, DWORD PTR _line$[ebp+4]
	addss	xmm0, DWORD PTR _line$[ebp+12]
	movss	xmm1, DWORD PTR _b$[ebp+4]
	addss	xmm1, DWORD PTR _b$[ebp+12]
	comiss	xmm0, xmm1
	jb	SHORT $LN2@nk_widget_
$LN1@nk_widget_:
	jmp	$LN3@nk_widget_
$LN2@nk_widget_:

; 13965:         nk_widget_text(o, line, &string[done], fitting, &text, NK_TEXT_LEFT, f);

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	push	17					; 00000011H
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fitting$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	add	eax, DWORD PTR _done$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _line$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _line$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _line$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _line$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	call	_nk_widget_text
	add	esp, 40					; 00000028H

; 13966:         done += fitting;

	mov	eax, DWORD PTR _done$[ebp]
	add	eax, DWORD PTR _fitting$[ebp]
	mov	DWORD PTR _done$[ebp], eax

; 13967:         line.y += f->height + 2 * t->padding.y;

	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _f$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR _line$[ebp+4]
	movss	DWORD PTR _line$[ebp+4], xmm0

; 13968:         fitting = nk_text_clamp(f, &string[done], len - done, line.w, &glyphs, &width, seperator,NK_LEN(seperator));

	push	1
	push	OFFSET ?seperator@?1??nk_widget_text_wrap@@9@9
	lea	eax, DWORD PTR _width$[ebp]
	push	eax
	lea	ecx, DWORD PTR _glyphs$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _line$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, DWORD PTR _done$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	add	eax, DWORD PTR _done$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	call	_nk_text_clamp
	add	esp, 32					; 00000020H
	mov	DWORD PTR _fitting$[ebp], eax

; 13969:     }

	jmp	$LN4@nk_widget_
$LN3@nk_widget_:

; 13970: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@nk_widget_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN20@nk_widget_:
	DD	4
	DD	$LN19@nk_widget_
$LN19@nk_widget_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN15@nk_widget_
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN16@nk_widget_
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN17@nk_widget_
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN18@nk_widget_
$LN18@nk_widget_:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN17@nk_widget_:
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
$LN16@nk_widget_:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	0
$LN15@nk_widget_:
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
_nk_widget_text_wrap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_widget_text
_TEXT	SEGMENT
tv258 = -236						; size = 4
tv228 = -236						; size = 4
tv200 = -236						; size = 4
tv190 = -236						; size = 4
tv171 = -236						; size = 4
tv159 = -236						; size = 4
tv133 = -236						; size = 4
tv85 = -236						; size = 4
_text_width$ = -36					; size = 4
_label$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_o$ = 8							; size = 4
_b$ = 12						; size = 16
_string$ = 28						; size = 4
_len$ = 32						; size = 4
_t$ = 36						; size = 4
_a$ = 40						; size = 4
_f$ = 44						; size = 4
_nk_widget_text PROC					; COMDAT

; 13889: {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 13890:     struct nk_rect label;
; 13891:     float text_width;
; 13892: 
; 13893:     NK_ASSERT(o);

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN15@nk_widget_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_widget_text@@9@9@ddf8d5d8
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13LNPOMHLG@?$AAo?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@nk_widget_:

; 13894:     NK_ASSERT(t);

	cmp	DWORD PTR _t$[ebp], 0
	jne	SHORT $LN16@nk_widget_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_widget_text@@9@9@ddf8d5d8
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13DKOGBHCI@?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN16@nk_widget_:

; 13895:     if (!o || !t) return;

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN11@nk_widget_
	cmp	DWORD PTR _t$[ebp], 0
	jne	SHORT $LN12@nk_widget_
$LN11@nk_widget_:
	jmp	$LN13@nk_widget_
$LN12@nk_widget_:

; 13896: 
; 13897:     b.h = NK_MAX(b.h, 2 * t->padding.y);

	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4]
	comiss	xmm0, DWORD PTR _b$[ebp+12]
	jbe	SHORT $LN17@nk_widget_
	mov	ecx, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR tv85[ebp], xmm0
	jmp	SHORT $LN18@nk_widget_
$LN17@nk_widget_:
	movss	xmm0, DWORD PTR _b$[ebp+12]
	movss	DWORD PTR tv85[ebp], xmm0
$LN18@nk_widget_:
	movss	xmm0, DWORD PTR tv85[ebp]
	movss	DWORD PTR _b$[ebp+12], xmm0

; 13898:     label.x = 0; label.w = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _label$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _label$[ebp+8], xmm0

; 13899:     label.y = b.y + t->padding.y;

	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR _b$[ebp+4]
	addss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _label$[ebp+4], xmm0

; 13900:     label.h = NK_MIN(f->height, b.h - 2 * t->padding.y);

	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+4]
	movss	xmm1, DWORD PTR _b$[ebp+12]
	subss	xmm1, xmm0
	comiss	xmm1, DWORD PTR [eax+4]
	jbe	SHORT $LN19@nk_widget_
	mov	edx, DWORD PTR _f$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR tv133[ebp], xmm0
	jmp	SHORT $LN20@nk_widget_
$LN19@nk_widget_:
	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4]
	movss	xmm1, DWORD PTR _b$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR tv133[ebp], xmm1
$LN20@nk_widget_:
	movss	xmm0, DWORD PTR tv133[ebp]
	movss	DWORD PTR _label$[ebp+12], xmm0

; 13901: 
; 13902:     text_width = f->width(f->userdata, f->height, (const char*)string, len);

	mov	esi, esp
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _text_width$[ebp]

; 13903:     text_width += (2.0f * t->padding.x);

	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _text_width$[ebp]
	movss	DWORD PTR _text_width$[ebp], xmm0

; 13904: 
; 13905:     /* align in x-axis */
; 13906:     if (a & NK_TEXT_ALIGN_LEFT) {

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 1
	je	SHORT $LN10@nk_widget_

; 13907:         label.x = b.x + t->padding.x;

	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR _b$[ebp]
	addss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _label$[ebp], xmm0

; 13908:         label.w = NK_MAX(0, b.w - 2 * t->padding.x);

	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR _b$[ebp+8]
	subss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@00000000
	jbe	SHORT $LN21@nk_widget_
	mov	ecx, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR _b$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR tv159[ebp], xmm1
	jmp	SHORT $LN22@nk_widget_
$LN21@nk_widget_:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv159[ebp], xmm0
$LN22@nk_widget_:
	movss	xmm0, DWORD PTR tv159[ebp]
	movss	DWORD PTR _label$[ebp+8], xmm0
	jmp	$LN4@nk_widget_
$LN10@nk_widget_:

; 13909:     } else if (a & NK_TEXT_ALIGN_CENTERED) {

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 2
	je	$LN8@nk_widget_

; 13910:         label.w = NK_MAX(1, 2 * t->padding.x + (float)text_width);

	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _text_width$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN23@nk_widget_
	mov	ecx, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR _text_width$[ebp]
	movss	DWORD PTR tv171[ebp], xmm0
	jmp	SHORT $LN24@nk_widget_
$LN23@nk_widget_:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv171[ebp], xmm0
$LN24@nk_widget_:
	movss	xmm0, DWORD PTR tv171[ebp]
	movss	DWORD PTR _label$[ebp+8], xmm0

; 13911:         label.x = (b.x + t->padding.x + ((b.w - 2 * t->padding.x) - label.w) / 2);

	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR _b$[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _t$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx]
	movss	xmm2, DWORD PTR _b$[ebp+8]
	subss	xmm2, xmm1
	subss	xmm2, DWORD PTR _label$[ebp+8]
	divss	xmm2, DWORD PTR __real@40000000
	addss	xmm0, xmm2
	movss	DWORD PTR _label$[ebp], xmm0

; 13912:         label.x = NK_MAX(b.x + t->padding.x, label.x);

	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR _b$[ebp]
	addss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR _label$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN25@nk_widget_
	movss	xmm0, DWORD PTR _label$[ebp]
	movss	DWORD PTR tv190[ebp], xmm0
	jmp	SHORT $LN26@nk_widget_
$LN25@nk_widget_:
	mov	ecx, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR _b$[ebp]
	addss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR tv190[ebp], xmm0
$LN26@nk_widget_:
	movss	xmm0, DWORD PTR tv190[ebp]
	movss	DWORD PTR _label$[ebp], xmm0

; 13913:         label.w = NK_MIN(b.x + b.w, label.x + label.w);

	movss	xmm0, DWORD PTR _b$[ebp]
	addss	xmm0, DWORD PTR _b$[ebp+8]
	movss	xmm1, DWORD PTR _label$[ebp]
	addss	xmm1, DWORD PTR _label$[ebp+8]
	comiss	xmm1, xmm0
	jbe	SHORT $LN27@nk_widget_
	movss	xmm0, DWORD PTR _b$[ebp]
	addss	xmm0, DWORD PTR _b$[ebp+8]
	movss	DWORD PTR tv200[ebp], xmm0
	jmp	SHORT $LN28@nk_widget_
$LN27@nk_widget_:
	movss	xmm0, DWORD PTR _label$[ebp]
	addss	xmm0, DWORD PTR _label$[ebp+8]
	movss	DWORD PTR tv200[ebp], xmm0
$LN28@nk_widget_:
	movss	xmm0, DWORD PTR tv200[ebp]
	movss	DWORD PTR _label$[ebp+8], xmm0

; 13914:         if (label.w >= label.x) label.w -= label.x;

	movss	xmm0, DWORD PTR _label$[ebp+8]
	comiss	xmm0, DWORD PTR _label$[ebp]
	jb	SHORT $LN7@nk_widget_
	movss	xmm0, DWORD PTR _label$[ebp+8]
	subss	xmm0, DWORD PTR _label$[ebp]
	movss	DWORD PTR _label$[ebp+8], xmm0
$LN7@nk_widget_:

; 13915:     } else if (a & NK_TEXT_ALIGN_RIGHT) {

	jmp	$LN4@nk_widget_
$LN8@nk_widget_:
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 4
	je	$LN5@nk_widget_

; 13916:         label.x = NK_MAX(b.x + t->padding.x, (b.x + b.w) - (2 * t->padding.x + (float)text_width));

	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR _b$[ebp]
	addss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR _b$[ebp]
	addss	xmm1, DWORD PTR _b$[ebp+8]
	mov	ecx, DWORD PTR _t$[ebp]
	movss	xmm2, DWORD PTR __real@40000000
	mulss	xmm2, DWORD PTR [ecx]
	addss	xmm2, DWORD PTR _text_width$[ebp]
	subss	xmm1, xmm2
	comiss	xmm1, xmm0
	jbe	SHORT $LN29@nk_widget_
	movss	xmm0, DWORD PTR _b$[ebp]
	addss	xmm0, DWORD PTR _b$[ebp+8]
	mov	edx, DWORD PTR _t$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [edx]
	addss	xmm1, DWORD PTR _text_width$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR tv228[ebp], xmm0
	jmp	SHORT $LN30@nk_widget_
$LN29@nk_widget_:
	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR _b$[ebp]
	addss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR tv228[ebp], xmm0
$LN30@nk_widget_:
	movss	xmm0, DWORD PTR tv228[ebp]
	movss	DWORD PTR _label$[ebp], xmm0

; 13917:         label.w = (float)text_width + 2 * t->padding.x;

	mov	eax, DWORD PTR _t$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _text_width$[ebp]
	movss	DWORD PTR _label$[ebp+8], xmm0

; 13918:     } else return;

	jmp	SHORT $LN4@nk_widget_
$LN5@nk_widget_:
	jmp	$LN13@nk_widget_
$LN4@nk_widget_:

; 13919: 
; 13920:     /* align in y-axis */
; 13921:     if (a & NK_TEXT_ALIGN_MIDDLE) {

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 16					; 00000010H
	je	$LN3@nk_widget_

; 13922:         label.y = b.y + b.h/2.0f - (float)f->height/2.0f;

	movss	xmm0, DWORD PTR _b$[ebp+12]
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR _b$[ebp+4]
	mov	eax, DWORD PTR _f$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	divss	xmm1, DWORD PTR __real@40000000
	subss	xmm0, xmm1
	movss	DWORD PTR _label$[ebp+4], xmm0

; 13923:         label.h = NK_MAX(b.h/2.0f, b.h - (b.h/2.0f + f->height/2.0f));

	movss	xmm0, DWORD PTR _b$[ebp+12]
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR _b$[ebp+12]
	divss	xmm1, DWORD PTR __real@40000000
	mov	eax, DWORD PTR _f$[ebp]
	movss	xmm2, DWORD PTR [eax+4]
	divss	xmm2, DWORD PTR __real@40000000
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR _b$[ebp+12]
	subss	xmm2, xmm1
	comiss	xmm2, xmm0
	jbe	SHORT $LN31@nk_widget_
	movss	xmm0, DWORD PTR _b$[ebp+12]
	divss	xmm0, DWORD PTR __real@40000000
	mov	ecx, DWORD PTR _f$[ebp]
	movss	xmm1, DWORD PTR [ecx+4]
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _b$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR tv258[ebp], xmm1
	jmp	SHORT $LN32@nk_widget_
$LN31@nk_widget_:
	movss	xmm0, DWORD PTR _b$[ebp+12]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv258[ebp], xmm0
$LN32@nk_widget_:
	movss	xmm0, DWORD PTR tv258[ebp]
	movss	DWORD PTR _label$[ebp+12], xmm0
	jmp	SHORT $LN1@nk_widget_
$LN3@nk_widget_:

; 13924:     } else if (a & NK_TEXT_ALIGN_BOTTOM) {

	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN1@nk_widget_

; 13925:         label.y = b.y + b.h - f->height;

	movss	xmm0, DWORD PTR _b$[ebp+4]
	addss	xmm0, DWORD PTR _b$[ebp+12]
	mov	eax, DWORD PTR _f$[ebp]
	subss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _label$[ebp+4], xmm0

; 13926:         label.h = f->height;

	mov	eax, DWORD PTR _f$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _label$[ebp+12], xmm0
$LN1@nk_widget_:

; 13927:     }
; 13928:     nk_draw_text(o, label, (const char*)string,
; 13929:         len, f, t->background, t->text);

	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _label$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _label$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _label$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _label$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	call	_nk_draw_text
	add	esp, 40					; 00000028H
$LN13@nk_widget_:

; 13930: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN35@nk_widget_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN35@nk_widget_:
	DD	1
	DD	$LN34@nk_widget_
$LN34@nk_widget_:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN33@nk_widget_
$LN33@nk_widget_:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
_nk_widget_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_clear_state
_TEXT	SEGMENT
tv77 = -193						; size = 1
_state$ = 8						; size = 4
_type$ = 12						; size = 4
_filter$ = 16						; size = 4
_nk_textedit_clear_state PROC				; COMDAT

; 13801: {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13802:     /* reset the state to default */
; 13803:    state->undo.undo_point = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	WORD PTR [ecx+5296], ax

; 13804:    state->undo.undo_char_point = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	WORD PTR [ecx+5300], ax

; 13805:    state->undo.redo_point = NK_TEXTEDIT_UNDOSTATECOUNT;

	mov	eax, 99					; 00000063H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	WORD PTR [ecx+5298], ax

; 13806:    state->undo.redo_char_point = NK_TEXTEDIT_UNDOCHARCOUNT;

	mov	eax, 999				; 000003e7H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	WORD PTR [ecx+5302], ax

; 13807:    state->select_end = state->select_start = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+92], 0
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+96], 0

; 13808:    state->cursor = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+88], 0

; 13809:    state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0

; 13810:    state->preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+108], xmm0

; 13811:    state->cursor_at_end_of_line = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+101], 0

; 13812:    state->initialized = 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+102], 1

; 13813:    state->single_line = (unsigned char)(type == NK_TEXT_EDIT_SINGLE_LINE);

	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN3@nk_textedi
	mov	BYTE PTR tv77[ebp], 1
	jmp	SHORT $LN4@nk_textedi
$LN3@nk_textedi:
	mov	BYTE PTR tv77[ebp], 0
$LN4@nk_textedi:
	mov	eax, DWORD PTR _state$[ebp]
	mov	cl, BYTE PTR tv77[ebp]
	mov	BYTE PTR [eax+104], cl

; 13814:    state->mode = NK_TEXT_EDIT_MODE_VIEW;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+100], 0

; 13815:    state->filter = filter;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _filter$[ebp]
	mov	DWORD PTR [eax+76], ecx

; 13816:    state->scrollbar = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+80], eax
	mov	DWORD PTR [ecx+84], edx

; 13817: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_clear_state ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_createundo
_TEXT	SEGMENT
_r$ = -8						; size = 4
_state$ = 8						; size = 4
_pos$ = 12						; size = 4
_insert_len$ = 16					; size = 4
_delete_len$ = 20					; size = 4
_nk_textedit_createundo PROC				; COMDAT

; 13632: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13633:     struct nk_text_undo_record *r = nk_textedit_create_undo_record(state, insert_len);

	mov	eax, DWORD PTR _insert_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_nk_textedit_create_undo_record
	add	esp, 8
	mov	DWORD PTR _r$[ebp], eax

; 13634:     if (r == 0)

	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN3@nk_textedi

; 13635:         return 0;

	xor	eax, eax
	jmp	SHORT $LN4@nk_textedi
$LN3@nk_textedi:

; 13636: 
; 13637:     r->where = pos;

	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax], ecx

; 13638:     r->insert_length = (short) insert_len;

	mov	eax, DWORD PTR _r$[ebp]
	mov	cx, WORD PTR _insert_len$[ebp]
	mov	WORD PTR [eax+4], cx

; 13639:     r->delete_length = (short) delete_len;

	mov	eax, DWORD PTR _r$[ebp]
	mov	cx, WORD PTR _delete_len$[ebp]
	mov	WORD PTR [eax+6], cx

; 13640: 
; 13641:     if (insert_len == 0) {

	cmp	DWORD PTR _insert_len$[ebp], 0
	jne	SHORT $LN2@nk_textedi

; 13642:         r->char_storage = -1;

	or	eax, -1
	mov	ecx, DWORD PTR _r$[ebp]
	mov	WORD PTR [ecx+8], ax

; 13643:         return 0;

	xor	eax, eax
	jmp	SHORT $LN4@nk_textedi

; 13644:     } else {

	jmp	SHORT $LN4@nk_textedi
$LN2@nk_textedi:

; 13645:         r->char_storage = state->undo_char_point;

	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	dx, WORD PTR [ecx+5188]
	mov	WORD PTR [eax+8], dx

; 13646:         state->undo_char_point = (short)(state->undo_char_point +  insert_len);

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, WORD PTR [eax+5188]
	add	ecx, DWORD PTR _insert_len$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	WORD PTR [edx+5188], cx

; 13647:         return &state->undo_char[r->char_storage];

	mov	eax, DWORD PTR _r$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+1188]
$LN4@nk_textedi:

; 13648:     }
; 13649: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_createundo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_create_undo_record
_TEXT	SEGMENT
tv85 = -196						; size = 4
_state$ = 8						; size = 4
_numchars$ = 12						; size = 4
_nk_textedit_create_undo_record PROC			; COMDAT

; 13605: {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13606:     /* any time we create a new undo record, we discard redo*/
; 13607:     nk_textedit_flush_redo(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_flush_redo
	add	esp, 4

; 13608: 
; 13609:     /* if we have no free records, we have to make room,
; 13610:      * by sliding the existing records down */
; 13611:     if (state->undo_point == NK_TEXTEDIT_UNDOSTATECOUNT)

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, WORD PTR [eax+5184]
	cmp	ecx, 99					; 00000063H
	jne	SHORT $LN4@nk_textedi

; 13612:         nk_textedit_discard_undo(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_discard_undo
	add	esp, 4
$LN4@nk_textedi:

; 13613: 
; 13614:     /* if the characters to store won't possibly fit in the buffer,
; 13615:      * we can't undo */
; 13616:     if (numchars > NK_TEXTEDIT_UNDOCHARCOUNT) {

	cmp	DWORD PTR _numchars$[ebp], 999		; 000003e7H
	jle	SHORT $LN2@nk_textedi

; 13617:         state->undo_point = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	WORD PTR [ecx+5184], ax

; 13618:         state->undo_char_point = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	WORD PTR [ecx+5188], ax

; 13619:         return 0;

	xor	eax, eax
	jmp	SHORT $LN5@nk_textedi
$LN2@nk_textedi:

; 13620:     }
; 13621: 
; 13622:     /* if we don't have enough free characters in the buffer,
; 13623:      * we have to make room */
; 13624:     while (state->undo_char_point + numchars > NK_TEXTEDIT_UNDOCHARCOUNT)

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, WORD PTR [eax+5188]
	add	ecx, DWORD PTR _numchars$[ebp]
	cmp	ecx, 999				; 000003e7H
	jle	SHORT $LN1@nk_textedi

; 13625:         nk_textedit_discard_undo(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_discard_undo
	add	esp, 4
	jmp	SHORT $LN2@nk_textedi
$LN1@nk_textedi:

; 13626:     return &state->undo_rec[state->undo_point++];

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, WORD PTR [eax+5184]
	imul	edx, ecx, 12
	add	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR tv85[ebp], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	cx, WORD PTR [eax+5184]
	add	cx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	WORD PTR [edx+5184], cx
	mov	eax, DWORD PTR tv85[ebp]
$LN5@nk_textedi:

; 13627: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_create_undo_record ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_discard_redo
_TEXT	SEGMENT
_i$1 = -44						; size = 4
_n$2 = -32						; size = 4
_k$ = -20						; size = 4
_num$ = -8						; size = 4
_state$ = 8						; size = 4
_nk_textedit_discard_redo PROC				; COMDAT

; 13573: {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13574: /*  discard the oldest entry in the redo list--it's bad if this
; 13575:     ever happens, but because undo & redo have to store the actual
; 13576:     characters in different cases, the redo character buffer can
; 13577:     fill up even though the undo buffer didn't */
; 13578:     nk_size num;
; 13579:     int k = NK_TEXTEDIT_UNDOSTATECOUNT-1;

	mov	DWORD PTR _k$[ebp], 98			; 00000062H

; 13580:     if (state->redo_point <= k) {

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, WORD PTR [eax+5186]
	cmp	ecx, DWORD PTR _k$[ebp]
	jg	$LN8@nk_textedi

; 13581:         /* if the k'th undo state has characters, clean those up */
; 13582:         if (state->undo_rec[k].char_storage >= 0) {

	imul	eax, DWORD PTR _k$[ebp], 12
	mov	ecx, DWORD PTR _state$[ebp]
	movsx	edx, WORD PTR [ecx+eax+8]
	test	edx, edx
	jl	$LN6@nk_textedi

; 13583:             int n = state->undo_rec[k].insert_length, i;

	imul	eax, DWORD PTR _k$[ebp], 12
	mov	ecx, DWORD PTR _state$[ebp]
	movsx	edx, WORD PTR [ecx+eax+4]
	mov	DWORD PTR _n$2[ebp], edx

; 13584:             /* delete n characters from all other records */
; 13585:             state->redo_char_point = (short)(state->redo_char_point + n);

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, WORD PTR [eax+5190]
	add	ecx, DWORD PTR _n$2[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	WORD PTR [edx+5190], cx

; 13586:             num = (nk_size)(NK_TEXTEDIT_UNDOCHARCOUNT - state->redo_char_point);

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, WORD PTR [eax+5190]
	mov	edx, 999				; 000003e7H
	sub	edx, ecx
	mov	DWORD PTR _num$[ebp], edx

; 13587:             NK_MEMCPY(state->undo_char + state->redo_char_point,
; 13588:                 state->undo_char + state->redo_char_point-n, num * sizeof(char));

	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	movsx	edx, WORD PTR [ecx+5190]
	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+1188]
	mov	edx, DWORD PTR _n$2[ebp]
	shl	edx, 2
	sub	ecx, edx
	push	ecx
	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, WORD PTR [eax+5190]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+1188]
	push	eax
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 13589:             for (i = state->redo_point; i < k; ++i) {

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, WORD PTR [eax+5186]
	mov	DWORD PTR _i$1[ebp], ecx
	jmp	SHORT $LN5@nk_textedi
$LN4@nk_textedi:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN5@nk_textedi:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _k$[ebp]
	jge	SHORT $LN6@nk_textedi

; 13590:                 if (state->undo_rec[i].char_storage >= 0) {

	imul	eax, DWORD PTR _i$1[ebp], 12
	mov	ecx, DWORD PTR _state$[ebp]
	movsx	edx, WORD PTR [ecx+eax+8]
	test	edx, edx
	jl	SHORT $LN2@nk_textedi

; 13591:                     state->undo_rec[i].char_storage = (short)
; 13592:                         (state->undo_rec[i].char_storage + n);

	imul	eax, DWORD PTR _i$1[ebp], 12
	mov	ecx, DWORD PTR _state$[ebp]
	movsx	edx, WORD PTR [ecx+eax+8]
	add	edx, DWORD PTR _n$2[ebp]
	imul	eax, DWORD PTR _i$1[ebp], 12
	mov	ecx, DWORD PTR _state$[ebp]
	mov	WORD PTR [ecx+eax+8], dx
$LN2@nk_textedi:

; 13593:                 }
; 13594:             }

	jmp	SHORT $LN4@nk_textedi
$LN6@nk_textedi:

; 13595:         }
; 13596:         ++state->redo_point;

	mov	eax, DWORD PTR _state$[ebp]
	mov	cx, WORD PTR [eax+5186]
	add	cx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	WORD PTR [edx+5186], cx

; 13597:         num = (nk_size)(NK_TEXTEDIT_UNDOSTATECOUNT - state->redo_point);

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, WORD PTR [eax+5186]
	mov	edx, 99					; 00000063H
	sub	edx, ecx
	mov	DWORD PTR _num$[ebp], edx

; 13598:         if (num) NK_MEMCPY(state->undo_rec + state->redo_point-1,

	je	SHORT $LN8@nk_textedi

; 13599:             state->undo_rec + state->redo_point, num * sizeof(state->undo_rec[0]));

	imul	eax, DWORD PTR _num$[ebp], 12
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	movsx	edx, WORD PTR [ecx+5186]
	imul	eax, edx, 12
	add	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	movsx	edx, WORD PTR [ecx+5186]
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax-12]
	push	edx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH
$LN8@nk_textedi:

; 13600:     }
; 13601: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_discard_redo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_discard_undo
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_n$2 = -8						; size = 4
_state$ = 8						; size = 4
_nk_textedit_discard_undo PROC				; COMDAT

; 13549: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13550:     /* discard the oldest entry in the undo list */
; 13551:     if (state->undo_point > 0) {

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, WORD PTR [eax+5184]
	test	ecx, ecx
	jle	$LN7@nk_textedi

; 13552:         /* if the 0th undo state has characters, clean those up */
; 13553:         if (state->undo_rec[0].char_storage >= 0) {

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _state$[ebp]
	movsx	eax, WORD PTR [edx+ecx+8]
	test	eax, eax
	jl	$LN5@nk_textedi

; 13554:             int n = state->undo_rec[0].insert_length, i;

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _state$[ebp]
	movsx	eax, WORD PTR [edx+ecx+4]
	mov	DWORD PTR _n$2[ebp], eax

; 13555:             /* delete n characters from all other records */
; 13556:             state->undo_char_point = (short)(state->undo_char_point - n);

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, WORD PTR [eax+5188]
	sub	ecx, DWORD PTR _n$2[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	WORD PTR [edx+5188], cx

; 13557:             NK_MEMCPY(state->undo_char, state->undo_char + n,
; 13558:                 (nk_size)state->undo_char_point*sizeof(nk_rune));

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, WORD PTR [eax+5188]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _n$2[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+1188]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 1188				; 000004a4H
	push	edx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 13559:             for (i=0; i < state->undo_point; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@nk_textedi
$LN3@nk_textedi:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@nk_textedi:
	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, WORD PTR [eax+5184]
	cmp	DWORD PTR _i$1[ebp], ecx
	jge	SHORT $LN5@nk_textedi

; 13560:                 if (state->undo_rec[i].char_storage >= 0)

	imul	eax, DWORD PTR _i$1[ebp], 12
	mov	ecx, DWORD PTR _state$[ebp]
	movsx	edx, WORD PTR [ecx+eax+8]
	test	edx, edx
	jl	SHORT $LN1@nk_textedi

; 13561:                 state->undo_rec[i].char_storage = (short)
; 13562:                     (state->undo_rec[i].char_storage - n);

	imul	eax, DWORD PTR _i$1[ebp], 12
	mov	ecx, DWORD PTR _state$[ebp]
	movsx	edx, WORD PTR [ecx+eax+8]
	sub	edx, DWORD PTR _n$2[ebp]
	imul	eax, DWORD PTR _i$1[ebp], 12
	mov	ecx, DWORD PTR _state$[ebp]
	mov	WORD PTR [ecx+eax+8], dx
$LN1@nk_textedi:

; 13563:             }

	jmp	SHORT $LN3@nk_textedi
$LN5@nk_textedi:

; 13564:         }
; 13565:         --state->undo_point;

	mov	eax, DWORD PTR _state$[ebp]
	mov	cx, WORD PTR [eax+5184]
	sub	cx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	WORD PTR [edx+5184], cx

; 13566:         NK_MEMCPY(state->undo_rec, state->undo_rec+1,
; 13567:             (nk_size)((nk_size)state->undo_point * sizeof(state->undo_rec[0])));

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, WORD PTR [eax+5184]
	imul	edx, ecx, 12
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH
$LN7@nk_textedi:

; 13568:     }
; 13569: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_discard_undo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_flush_redo
_TEXT	SEGMENT
_state$ = 8						; size = 4
_nk_textedit_flush_redo PROC				; COMDAT

; 13542: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13543:     state->redo_point = NK_TEXTEDIT_UNDOSTATECOUNT;

	mov	eax, 99					; 00000063H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	WORD PTR [ecx+5186], ax

; 13544:     state->redo_char_point = NK_TEXTEDIT_UNDOCHARCOUNT;

	mov	eax, 999				; 000003e7H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	WORD PTR [ecx+5190], ax

; 13545: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_flush_redo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_key
_TEXT	SEGMENT
tv271 = -600						; size = 4
tv219 = -600						; size = 4
tv64 = -600						; size = 4
_find$1 = -400						; size = 24
_find$2 = -368						; size = 24
_find$3 = -336						; size = 24
_find$4 = -304						; size = 24
_n$5 = -272						; size = 4
_dx$6 = -260						; size = 4
_goal_x$7 = -248					; size = 4
_x$8 = -236						; size = 4
_sel$9 = -224						; size = 4
_i$10 = -212						; size = 4
_row$11 = -200						; size = 24
_find$12 = -168						; size = 24
_dx$13 = -136						; size = 4
_start$14 = -124					; size = 4
_goal_x$15 = -112					; size = 4
_x$16 = -100						; size = 4
_sel$17 = -88						; size = 4
_i$18 = -76						; size = 4
_row$19 = -64						; size = 24
_find$20 = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_key$ = 12						; size = 4
_shift_mod$ = 16					; size = 4
_font$ = 20						; size = 4
_row_height$ = 24					; size = 4
_nk_textedit_key PROC					; COMDAT

; 13232: {

	push	ebp
	mov	ebp, esp
	sub	esp, 600				; 00000258H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-600]
	mov	ecx, 150				; 00000096H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
$retry$104:

; 13233: retry:
; 13234:     switch (key)

	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 3
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 22			; 00000016H
	ja	SHORT $LN83@nk_textedi
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN103@nk_textedi[edx*4]
$LN83@nk_textedi:

; 13235:     {
; 13236:     case NK_KEY_NONE:
; 13237:     case NK_KEY_CTRL:
; 13238:     case NK_KEY_ENTER:
; 13239:     case NK_KEY_SHIFT:
; 13240:     case NK_KEY_TAB:
; 13241:     case NK_KEY_COPY:
; 13242:     case NK_KEY_CUT:
; 13243:     case NK_KEY_PASTE:
; 13244:     case NK_KEY_MAX:
; 13245:     default: break;

	jmp	$LN84@nk_textedi
$LN82@nk_textedi:

; 13246:     case NK_KEY_TEXT_UNDO:
; 13247:          nk_textedit_undo(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_undo
	add	esp, 4

; 13248:          state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0

; 13249:          break;

	jmp	$LN84@nk_textedi
$LN81@nk_textedi:

; 13250: 
; 13251:     case NK_KEY_TEXT_REDO:
; 13252:         nk_textedit_redo(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_redo
	add	esp, 4

; 13253:         state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0

; 13254:         break;

	jmp	$LN84@nk_textedi
$LN80@nk_textedi:

; 13255: 
; 13256:     case NK_KEY_TEXT_SELECT_ALL:
; 13257:         nk_textedit_select_all(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_select_all
	add	esp, 4

; 13258:         state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0

; 13259:         break;

	jmp	$LN84@nk_textedi
$LN79@nk_textedi:

; 13260: 
; 13261:     case NK_KEY_TEXT_INSERT_MODE:
; 13262:         if (state->mode == NK_TEXT_EDIT_MODE_VIEW)

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax+100]
	test	ecx, ecx
	jne	SHORT $LN78@nk_textedi

; 13263:             state->mode = NK_TEXT_EDIT_MODE_INSERT;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+100], 1
$LN78@nk_textedi:

; 13264:         break;

	jmp	$LN84@nk_textedi
$LN77@nk_textedi:

; 13265:     case NK_KEY_TEXT_REPLACE_MODE:
; 13266:         if (state->mode == NK_TEXT_EDIT_MODE_VIEW)

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax+100]
	test	ecx, ecx
	jne	SHORT $LN76@nk_textedi

; 13267:             state->mode = NK_TEXT_EDIT_MODE_REPLACE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+100], 2
$LN76@nk_textedi:

; 13268:         break;

	jmp	$LN84@nk_textedi
$LN75@nk_textedi:

; 13269:     case NK_KEY_TEXT_RESET_MODE:
; 13270:         if (state->mode == NK_TEXT_EDIT_MODE_INSERT ||
; 13271:             state->mode == NK_TEXT_EDIT_MODE_REPLACE)

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax+100]
	cmp	ecx, 1
	je	SHORT $LN73@nk_textedi
	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax+100]
	cmp	ecx, 2
	jne	SHORT $LN74@nk_textedi
$LN73@nk_textedi:

; 13272:             state->mode = NK_TEXT_EDIT_MODE_VIEW;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+100], 0
$LN74@nk_textedi:

; 13273:         break;

	jmp	$LN84@nk_textedi
$LN72@nk_textedi:

; 13274: 
; 13275:     case NK_KEY_LEFT:
; 13276:         if (shift_mod) {

	cmp	DWORD PTR _shift_mod$[ebp], 0
	je	SHORT $LN71@nk_textedi

; 13277:             nk_textedit_clamp(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clamp
	add	esp, 4

; 13278:             nk_textedit_prep_selection_at_cursor(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_prep_selection_at_cursor
	add	esp, 4

; 13279:             /* move selection left */
; 13280:             if (state->select_end > 0)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+96], 0
	jle	SHORT $LN70@nk_textedi

; 13281:                 --state->select_end;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	sub	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+96], ecx
$LN70@nk_textedi:

; 13282:             state->cursor = state->select_end;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+88], edx

; 13283:             state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0

; 13284:         } else {

	jmp	SHORT $LN69@nk_textedi
$LN71@nk_textedi:

; 13285:             /* if currently there's a selection,
; 13286:              * move cursor to start of selection */
; 13287:             if (NK_TEXT_HAS_SELECTION(state))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	je	SHORT $LN68@nk_textedi

; 13288:                 nk_textedit_move_to_first(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_move_to_first
	add	esp, 4
	jmp	SHORT $LN66@nk_textedi
$LN68@nk_textedi:

; 13289:             else if (state->cursor > 0)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+88], 0
	jle	SHORT $LN66@nk_textedi

; 13290:                --state->cursor;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	sub	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+88], ecx
$LN66@nk_textedi:

; 13291:             state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0
$LN69@nk_textedi:

; 13292:         } break;

	jmp	$LN84@nk_textedi
$LN65@nk_textedi:

; 13293: 
; 13294:     case NK_KEY_RIGHT:
; 13295:         if (shift_mod) {

	cmp	DWORD PTR _shift_mod$[ebp], 0
	je	SHORT $LN64@nk_textedi

; 13296:             nk_textedit_prep_selection_at_cursor(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_prep_selection_at_cursor
	add	esp, 4

; 13297:             /* move selection right */
; 13298:             ++state->select_end;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	add	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+96], ecx

; 13299:             nk_textedit_clamp(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clamp
	add	esp, 4

; 13300:             state->cursor = state->select_end;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+88], edx

; 13301:             state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0

; 13302:         } else {

	jmp	SHORT $LN63@nk_textedi
$LN64@nk_textedi:

; 13303:             /* if currently there's a selection,
; 13304:              * move cursor to end of selection */
; 13305:             if (NK_TEXT_HAS_SELECTION(state))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	je	SHORT $LN62@nk_textedi

; 13306:                 nk_textedit_move_to_last(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_move_to_last
	add	esp, 4
	jmp	SHORT $LN61@nk_textedi
$LN62@nk_textedi:

; 13307:             else ++state->cursor;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	add	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+88], ecx
$LN61@nk_textedi:

; 13308:             nk_textedit_clamp(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clamp
	add	esp, 4

; 13309:             state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0
$LN63@nk_textedi:

; 13310:         } break;

	jmp	$LN84@nk_textedi
$LN60@nk_textedi:

; 13311: 
; 13312:     case NK_KEY_TEXT_WORD_LEFT:
; 13313:         if (shift_mod) {

	cmp	DWORD PTR _shift_mod$[ebp], 0
	je	SHORT $LN59@nk_textedi

; 13314:             if( !NK_TEXT_HAS_SELECTION( state ) )

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	jne	SHORT $LN58@nk_textedi

; 13315:             nk_textedit_prep_selection_at_cursor(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_prep_selection_at_cursor
	add	esp, 4
$LN58@nk_textedi:

; 13316:             state->cursor = nk_textedit_move_to_word_previous(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_move_to_word_previous
	add	esp, 4
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+88], eax

; 13317:             state->select_end = state->cursor;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+96], edx

; 13318:             nk_textedit_clamp(state );

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clamp
	add	esp, 4

; 13319:         } else {

	jmp	SHORT $LN55@nk_textedi
$LN59@nk_textedi:

; 13320:             if (NK_TEXT_HAS_SELECTION(state))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	je	SHORT $LN56@nk_textedi

; 13321:                 nk_textedit_move_to_first(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_move_to_first
	add	esp, 4

; 13322:             else {

	jmp	SHORT $LN55@nk_textedi
$LN56@nk_textedi:

; 13323:                 state->cursor = nk_textedit_move_to_word_previous(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_move_to_word_previous
	add	esp, 4
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+88], eax

; 13324:                 nk_textedit_clamp(state );

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clamp
	add	esp, 4
$LN55@nk_textedi:

; 13325:             }
; 13326:         } break;

	jmp	$LN84@nk_textedi
$LN54@nk_textedi:

; 13327: 
; 13328:     case NK_KEY_TEXT_WORD_RIGHT:
; 13329:         if (shift_mod) {

	cmp	DWORD PTR _shift_mod$[ebp], 0
	je	SHORT $LN53@nk_textedi

; 13330:             if( !NK_TEXT_HAS_SELECTION( state ) )

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	jne	SHORT $LN52@nk_textedi

; 13331:                 nk_textedit_prep_selection_at_cursor(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_prep_selection_at_cursor
	add	esp, 4
$LN52@nk_textedi:

; 13332:             state->cursor = nk_textedit_move_to_word_next(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_move_to_word_next
	add	esp, 4
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+88], eax

; 13333:             state->select_end = state->cursor;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+96], edx

; 13334:             nk_textedit_clamp(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clamp
	add	esp, 4

; 13335:         } else {

	jmp	SHORT $LN49@nk_textedi
$LN53@nk_textedi:

; 13336:             if (NK_TEXT_HAS_SELECTION(state))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	je	SHORT $LN50@nk_textedi

; 13337:                 nk_textedit_move_to_last(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_move_to_last
	add	esp, 4

; 13338:             else {

	jmp	SHORT $LN49@nk_textedi
$LN50@nk_textedi:

; 13339:                 state->cursor = nk_textedit_move_to_word_next(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_move_to_word_next
	add	esp, 4
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+88], eax

; 13340:                 nk_textedit_clamp(state );

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clamp
	add	esp, 4
$LN49@nk_textedi:

; 13341:             }
; 13342:         } break;

	jmp	$LN84@nk_textedi
$LN48@nk_textedi:

; 13343: 
; 13344:     case NK_KEY_DOWN: {
; 13345:         struct nk_text_find find;
; 13346:         struct nk_text_edit_row row;
; 13347:         int i, sel = shift_mod;

	mov	eax, DWORD PTR _shift_mod$[ebp]
	mov	DWORD PTR _sel$17[ebp], eax

; 13348: 
; 13349:         if (state->single_line) {

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax+104]
	test	ecx, ecx
	je	SHORT $LN47@nk_textedi

; 13350:             /* on windows, up&down in single-line behave like left&right */
; 13351:             key = NK_KEY_RIGHT;

	mov	DWORD PTR _key$[ebp], 13		; 0000000dH

; 13352:             goto retry;

	jmp	$retry$104
$LN47@nk_textedi:

; 13353:         }
; 13354: 
; 13355:         if (sel)

	cmp	DWORD PTR _sel$17[ebp], 0
	je	SHORT $LN46@nk_textedi

; 13356:             nk_textedit_prep_selection_at_cursor(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_prep_selection_at_cursor
	add	esp, 4
	jmp	SHORT $LN44@nk_textedi
$LN46@nk_textedi:

; 13357:         else if (NK_TEXT_HAS_SELECTION(state))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	je	SHORT $LN44@nk_textedi

; 13358:             nk_textedit_move_to_last(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_move_to_last
	add	esp, 4
$LN44@nk_textedi:

; 13359: 
; 13360:         /* compute current position of cursor point */
; 13361:         nk_textedit_clamp(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clamp
	add	esp, 4

; 13362:         nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
; 13363:             font, row_height);

	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, BYTE PTR [ecx+104]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	lea	eax, DWORD PTR _find$20[ebp]
	push	eax
	call	_nk_textedit_find_charpos
	add	esp, 24					; 00000018H

; 13364: 
; 13365:         /* now find character position down a row */
; 13366:         if (find.length)

	cmp	DWORD PTR _find$20[ebp+16], 0
	je	$LN38@nk_textedi

; 13367:         {
; 13368:             float x;
; 13369:             float goal_x = state->has_preferred_x ? state->preferred_x : find.x;

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax+103]
	test	ecx, ecx
	je	SHORT $LN88@nk_textedi
	mov	edx, DWORD PTR _state$[ebp]
	movss	xmm0, DWORD PTR [edx+108]
	movss	DWORD PTR tv219[ebp], xmm0
	jmp	SHORT $LN89@nk_textedi
$LN88@nk_textedi:
	movss	xmm0, DWORD PTR _find$20[ebp]
	movss	DWORD PTR tv219[ebp], xmm0
$LN89@nk_textedi:
	movss	xmm0, DWORD PTR tv219[ebp]
	movss	DWORD PTR _goal_x$15[ebp], xmm0

; 13370:             int start = find.first_char + find.length;

	mov	eax, DWORD PTR _find$20[ebp+12]
	add	eax, DWORD PTR _find$20[ebp+16]
	mov	DWORD PTR _start$14[ebp], eax

; 13371: 
; 13372:             state->cursor = start;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _start$14[ebp]
	mov	DWORD PTR [eax+88], ecx

; 13373:             nk_textedit_layout_row(&row, state, state->cursor, row_height, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	lea	ecx, DWORD PTR _row$19[ebp]
	push	ecx
	call	_nk_textedit_layout_row
	add	esp, 20					; 00000014H

; 13374:             x = row.x0;

	movss	xmm0, DWORD PTR _row$19[ebp]
	movss	DWORD PTR _x$16[ebp], xmm0

; 13375: 
; 13376:             for (i=0; i < row.num_chars && x < row.x1; ++i) {

	mov	DWORD PTR _i$18[ebp], 0
	jmp	SHORT $LN42@nk_textedi
$LN41@nk_textedi:
	mov	eax, DWORD PTR _i$18[ebp]
	add	eax, 1
	mov	DWORD PTR _i$18[ebp], eax
$LN42@nk_textedi:
	mov	eax, DWORD PTR _i$18[ebp]
	cmp	eax, DWORD PTR _row$19[ebp+20]
	jge	SHORT $LN40@nk_textedi
	movss	xmm0, DWORD PTR _row$19[ebp+4]
	comiss	xmm0, DWORD PTR _x$16[ebp]
	jbe	SHORT $LN40@nk_textedi

; 13377:                 float dx = nk_textedit_get_width(state, start, i, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$18[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$14[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_get_width
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _dx$13[ebp]

; 13378:                 x += dx;

	movss	xmm0, DWORD PTR _x$16[ebp]
	addss	xmm0, DWORD PTR _dx$13[ebp]
	movss	DWORD PTR _x$16[ebp], xmm0

; 13379:                 if (x > goal_x)

	movss	xmm0, DWORD PTR _x$16[ebp]
	comiss	xmm0, DWORD PTR _goal_x$15[ebp]
	jbe	SHORT $LN39@nk_textedi

; 13380:                     break;

	jmp	SHORT $LN40@nk_textedi
$LN39@nk_textedi:

; 13381:                 ++state->cursor;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	add	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+88], ecx

; 13382:             }

	jmp	SHORT $LN41@nk_textedi
$LN40@nk_textedi:

; 13383:             nk_textedit_clamp(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clamp
	add	esp, 4

; 13384: 
; 13385:             state->has_preferred_x = 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 1

; 13386:             state->preferred_x = goal_x;

	mov	eax, DWORD PTR _state$[ebp]
	movss	xmm0, DWORD PTR _goal_x$15[ebp]
	movss	DWORD PTR [eax+108], xmm0

; 13387:             if (sel)

	cmp	DWORD PTR _sel$17[ebp], 0
	je	SHORT $LN38@nk_textedi

; 13388:                 state->select_end = state->cursor;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+96], edx
$LN38@nk_textedi:

; 13389:         }
; 13390:     } break;

	jmp	$LN84@nk_textedi
$LN37@nk_textedi:

; 13391: 
; 13392:     case NK_KEY_UP: {
; 13393:         struct nk_text_find find;
; 13394:         struct nk_text_edit_row row;
; 13395:         int i, sel = shift_mod;

	mov	eax, DWORD PTR _shift_mod$[ebp]
	mov	DWORD PTR _sel$9[ebp], eax

; 13396: 
; 13397:         if (state->single_line) {

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax+104]
	test	ecx, ecx
	je	SHORT $LN36@nk_textedi

; 13398:             /* on windows, up&down become left&right */
; 13399:             key = NK_KEY_LEFT;

	mov	DWORD PTR _key$[ebp], 12		; 0000000cH

; 13400:             goto retry;

	jmp	$retry$104
$LN36@nk_textedi:

; 13401:         }
; 13402: 
; 13403:         if (sel)

	cmp	DWORD PTR _sel$9[ebp], 0
	je	SHORT $LN35@nk_textedi

; 13404:             nk_textedit_prep_selection_at_cursor(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_prep_selection_at_cursor
	add	esp, 4
	jmp	SHORT $LN33@nk_textedi
$LN35@nk_textedi:

; 13405:         else if (NK_TEXT_HAS_SELECTION(state))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	je	SHORT $LN33@nk_textedi

; 13406:             nk_textedit_move_to_first(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_move_to_first
	add	esp, 4
$LN33@nk_textedi:

; 13407: 
; 13408:          /* compute current position of cursor point */
; 13409:          nk_textedit_clamp(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clamp
	add	esp, 4

; 13410:          nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
; 13411:                 font, row_height);

	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, BYTE PTR [ecx+104]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	lea	eax, DWORD PTR _find$12[ebp]
	push	eax
	call	_nk_textedit_find_charpos
	add	esp, 24					; 00000018H

; 13412: 
; 13413:          /* can only go up if there's a previous row */
; 13414:          if (find.prev_first != find.first_char) {

	mov	eax, DWORD PTR _find$12[ebp+20]
	cmp	eax, DWORD PTR _find$12[ebp+12]
	je	$LN27@nk_textedi

; 13415:             /* now find character position up a row */
; 13416:             float x;
; 13417:             float goal_x = state->has_preferred_x ? state->preferred_x : find.x;

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax+103]
	test	ecx, ecx
	je	SHORT $LN90@nk_textedi
	mov	edx, DWORD PTR _state$[ebp]
	movss	xmm0, DWORD PTR [edx+108]
	movss	DWORD PTR tv271[ebp], xmm0
	jmp	SHORT $LN91@nk_textedi
$LN90@nk_textedi:
	movss	xmm0, DWORD PTR _find$12[ebp]
	movss	DWORD PTR tv271[ebp], xmm0
$LN91@nk_textedi:
	movss	xmm0, DWORD PTR tv271[ebp]
	movss	DWORD PTR _goal_x$7[ebp], xmm0

; 13418: 
; 13419:             state->cursor = find.prev_first;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _find$12[ebp+20]
	mov	DWORD PTR [eax+88], ecx

; 13420:             nk_textedit_layout_row(&row, state, state->cursor, row_height, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	lea	ecx, DWORD PTR _row$11[ebp]
	push	ecx
	call	_nk_textedit_layout_row
	add	esp, 20					; 00000014H

; 13421:             x = row.x0;

	movss	xmm0, DWORD PTR _row$11[ebp]
	movss	DWORD PTR _x$8[ebp], xmm0

; 13422: 
; 13423:             for (i=0; i < row.num_chars && x < row.x1; ++i) {

	mov	DWORD PTR _i$10[ebp], 0
	jmp	SHORT $LN31@nk_textedi
$LN30@nk_textedi:
	mov	eax, DWORD PTR _i$10[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10[ebp], eax
$LN31@nk_textedi:
	mov	eax, DWORD PTR _i$10[ebp]
	cmp	eax, DWORD PTR _row$11[ebp+20]
	jge	SHORT $LN29@nk_textedi
	movss	xmm0, DWORD PTR _row$11[ebp+4]
	comiss	xmm0, DWORD PTR _x$8[ebp]
	jbe	SHORT $LN29@nk_textedi

; 13424:                 float dx = nk_textedit_get_width(state, find.prev_first, i, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _find$12[ebp+20]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_get_width
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _dx$6[ebp]

; 13425:                 x += dx;

	movss	xmm0, DWORD PTR _x$8[ebp]
	addss	xmm0, DWORD PTR _dx$6[ebp]
	movss	DWORD PTR _x$8[ebp], xmm0

; 13426:                 if (x > goal_x)

	movss	xmm0, DWORD PTR _x$8[ebp]
	comiss	xmm0, DWORD PTR _goal_x$7[ebp]
	jbe	SHORT $LN28@nk_textedi

; 13427:                     break;

	jmp	SHORT $LN29@nk_textedi
$LN28@nk_textedi:

; 13428:                 ++state->cursor;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	add	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+88], ecx

; 13429:             }

	jmp	$LN30@nk_textedi
$LN29@nk_textedi:

; 13430:             nk_textedit_clamp(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clamp
	add	esp, 4

; 13431: 
; 13432:             state->has_preferred_x = 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 1

; 13433:             state->preferred_x = goal_x;

	mov	eax, DWORD PTR _state$[ebp]
	movss	xmm0, DWORD PTR _goal_x$7[ebp]
	movss	DWORD PTR [eax+108], xmm0

; 13434:             if (sel) state->select_end = state->cursor;

	cmp	DWORD PTR _sel$9[ebp], 0
	je	SHORT $LN27@nk_textedi
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+96], edx
$LN27@nk_textedi:

; 13435:          }
; 13436:       } break;

	jmp	$LN84@nk_textedi
$LN26@nk_textedi:

; 13437: 
; 13438:     case NK_KEY_DEL:
; 13439:         if (state->mode == NK_TEXT_EDIT_MODE_VIEW)

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax+100]
	test	ecx, ecx
	jne	SHORT $LN25@nk_textedi

; 13440:             break;

	jmp	$LN84@nk_textedi
$LN25@nk_textedi:

; 13441:         if (NK_TEXT_HAS_SELECTION(state))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	je	SHORT $LN24@nk_textedi

; 13442:             nk_textedit_delete_selection(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_delete_selection
	add	esp, 4

; 13443:         else {

	jmp	SHORT $LN22@nk_textedi
$LN24@nk_textedi:

; 13444:             int n = state->string.len;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _n$5[ebp], ecx

; 13445:             if (state->cursor < n)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	cmp	ecx, DWORD PTR _n$5[ebp]
	jge	SHORT $LN22@nk_textedi

; 13446:                 nk_textedit_delete(state, state->cursor, 1);

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_nk_textedit_delete
	add	esp, 12					; 0000000cH
$LN22@nk_textedi:

; 13447:          }
; 13448:          state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0

; 13449:          break;

	jmp	$LN84@nk_textedi
$LN21@nk_textedi:

; 13450: 
; 13451:     case NK_KEY_BACKSPACE:
; 13452:         if (state->mode == NK_TEXT_EDIT_MODE_VIEW)

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax+100]
	test	ecx, ecx
	jne	SHORT $LN20@nk_textedi

; 13453:             break;

	jmp	$LN84@nk_textedi
$LN20@nk_textedi:

; 13454:         if (NK_TEXT_HAS_SELECTION(state))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	je	SHORT $LN19@nk_textedi

; 13455:             nk_textedit_delete_selection(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_delete_selection
	add	esp, 4

; 13456:         else {

	jmp	SHORT $LN17@nk_textedi
$LN19@nk_textedi:

; 13457:             nk_textedit_clamp(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clamp
	add	esp, 4

; 13458:             if (state->cursor > 0) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+88], 0
	jle	SHORT $LN17@nk_textedi

; 13459:                 nk_textedit_delete(state, state->cursor-1, 1);

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_nk_textedit_delete
	add	esp, 12					; 0000000cH

; 13460:                 --state->cursor;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	sub	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+88], ecx
$LN17@nk_textedi:

; 13461:             }
; 13462:          }
; 13463:          state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0

; 13464:          break;

	jmp	$LN84@nk_textedi
$LN16@nk_textedi:

; 13465: 
; 13466:     case NK_KEY_TEXT_START:
; 13467:          if (shift_mod) {

	cmp	DWORD PTR _shift_mod$[ebp], 0
	je	SHORT $LN15@nk_textedi

; 13468:             nk_textedit_prep_selection_at_cursor(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_prep_selection_at_cursor
	add	esp, 4

; 13469:             state->cursor = state->select_end = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+96], 0
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+88], 0

; 13470:             state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0

; 13471:          } else {

	jmp	SHORT $LN14@nk_textedi
$LN15@nk_textedi:

; 13472:             state->cursor = state->select_start = state->select_end = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+96], 0
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+92], 0
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+88], 0

; 13473:             state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0
$LN14@nk_textedi:

; 13474:          }
; 13475:          break;

	jmp	$LN84@nk_textedi
$LN13@nk_textedi:

; 13476: 
; 13477:     case NK_KEY_TEXT_END:
; 13478:          if (shift_mod) {

	cmp	DWORD PTR _shift_mod$[ebp], 0
	je	SHORT $LN12@nk_textedi

; 13479:             nk_textedit_prep_selection_at_cursor(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_prep_selection_at_cursor
	add	esp, 4

; 13480:             state->cursor = state->select_end = state->string.len;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+96], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+88], edx

; 13481:             state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0

; 13482:          } else {

	jmp	SHORT $LN11@nk_textedi
$LN12@nk_textedi:

; 13483:             state->cursor = state->string.len;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+88], edx

; 13484:             state->select_start = state->select_end = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+96], 0
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+92], 0

; 13485:             state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0
$LN11@nk_textedi:

; 13486:          }
; 13487:          break;

	jmp	$LN84@nk_textedi
$LN10@nk_textedi:

; 13488: 
; 13489:     case NK_KEY_TEXT_LINE_START: {
; 13490:         if (shift_mod) {

	cmp	DWORD PTR _shift_mod$[ebp], 0
	je	$LN9@nk_textedi

; 13491:             struct nk_text_find find;
; 13492:            nk_textedit_clamp(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clamp
	add	esp, 4

; 13493:             nk_textedit_prep_selection_at_cursor(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_prep_selection_at_cursor
	add	esp, 4

; 13494:             if (state->string.len && state->cursor == state->string.len)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN8@nk_textedi
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+88]
	cmp	edx, DWORD PTR [ecx+72]
	jne	SHORT $LN8@nk_textedi

; 13495:                 --state->cursor;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	sub	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+88], ecx
$LN8@nk_textedi:

; 13496:             nk_textedit_find_charpos(&find, state,state->cursor, state->single_line,
; 13497:                 font, row_height);

	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, BYTE PTR [ecx+104]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	lea	eax, DWORD PTR _find$4[ebp]
	push	eax
	call	_nk_textedit_find_charpos
	add	esp, 24					; 00000018H

; 13498:             state->cursor = state->select_end = find.first_char;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _find$4[ebp+12]
	mov	DWORD PTR [eax+96], ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _find$4[ebp+12]
	mov	DWORD PTR [edx+88], eax

; 13499:             state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0

; 13500:         } else {

	jmp	$LN7@nk_textedi
$LN9@nk_textedi:

; 13501:             struct nk_text_find find;
; 13502:             if (state->string.len && state->cursor == state->string.len)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN6@nk_textedi
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+88]
	cmp	edx, DWORD PTR [ecx+72]
	jne	SHORT $LN6@nk_textedi

; 13503:                 --state->cursor;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	sub	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+88], ecx
$LN6@nk_textedi:

; 13504:             nk_textedit_clamp(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clamp
	add	esp, 4

; 13505:             nk_textedit_move_to_first(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_move_to_first
	add	esp, 4

; 13506:             nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
; 13507:                 font, row_height);

	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, BYTE PTR [ecx+104]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	lea	eax, DWORD PTR _find$3[ebp]
	push	eax
	call	_nk_textedit_find_charpos
	add	esp, 24					; 00000018H

; 13508:             state->cursor = find.first_char;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _find$3[ebp+12]
	mov	DWORD PTR [eax+88], ecx

; 13509:             state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0
$LN7@nk_textedi:

; 13510:         }
; 13511:       } break;

	jmp	$LN84@nk_textedi
$LN5@nk_textedi:

; 13512: 
; 13513:     case NK_KEY_TEXT_LINE_END: {
; 13514:         if (shift_mod) {

	cmp	DWORD PTR _shift_mod$[ebp], 0
	je	$LN4@nk_textedi

; 13515:             struct nk_text_find find;
; 13516:             nk_textedit_clamp(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clamp
	add	esp, 4

; 13517:             nk_textedit_prep_selection_at_cursor(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_prep_selection_at_cursor
	add	esp, 4

; 13518:             nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
; 13519:                 font, row_height);

	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, BYTE PTR [ecx+104]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	lea	eax, DWORD PTR _find$2[ebp]
	push	eax
	call	_nk_textedit_find_charpos
	add	esp, 24					; 00000018H

; 13520:             state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0

; 13521:             state->cursor = find.first_char + find.length;

	mov	eax, DWORD PTR _find$2[ebp+12]
	add	eax, DWORD PTR _find$2[ebp+16]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+88], eax

; 13522:             if (find.length > 0 && nk_str_rune_at(&state->string, state->cursor-1) == '\n')

	cmp	DWORD PTR _find$2[ebp+16], 0
	jle	SHORT $LN3@nk_textedi
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_nk_str_rune_at
	add	esp, 8
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN3@nk_textedi

; 13523:                 --state->cursor;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	sub	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+88], ecx
$LN3@nk_textedi:

; 13524:             state->select_end = state->cursor;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+96], edx

; 13525:         } else {

	jmp	$LN1@nk_textedi
$LN4@nk_textedi:

; 13526:             struct nk_text_find find;
; 13527:             nk_textedit_clamp(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clamp
	add	esp, 4

; 13528:             nk_textedit_move_to_first(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_move_to_first
	add	esp, 4

; 13529:             nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
; 13530:                 font, row_height);

	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, BYTE PTR [ecx+104]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	lea	eax, DWORD PTR _find$1[ebp]
	push	eax
	call	_nk_textedit_find_charpos
	add	esp, 24					; 00000018H

; 13531: 
; 13532:             state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0

; 13533:             state->cursor = find.first_char + find.length;

	mov	eax, DWORD PTR _find$1[ebp+12]
	add	eax, DWORD PTR _find$1[ebp+16]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+88], eax

; 13534:             if (find.length > 0 && nk_str_rune_at(&state->string, state->cursor-1) == '\n')

	cmp	DWORD PTR _find$1[ebp+16], 0
	jle	SHORT $LN1@nk_textedi
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_nk_str_rune_at
	add	esp, 8
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN1@nk_textedi

; 13535:                 --state->cursor;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	sub	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+88], ecx
$LN1@nk_textedi:
$LN84@nk_textedi:

; 13536:         }} break;
; 13537:     }
; 13538: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN102@nk_textedi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 600				; 00000258H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN102@nk_textedi:
	DD	8
	DD	$LN101@nk_textedi
$LN101@nk_textedi:
	DD	-32					; ffffffe0H
	DD	24					; 00000018H
	DD	$LN93@nk_textedi
	DD	-64					; ffffffc0H
	DD	24					; 00000018H
	DD	$LN94@nk_textedi
	DD	-168					; ffffff58H
	DD	24					; 00000018H
	DD	$LN95@nk_textedi
	DD	-200					; ffffff38H
	DD	24					; 00000018H
	DD	$LN96@nk_textedi
	DD	-304					; fffffed0H
	DD	24					; 00000018H
	DD	$LN97@nk_textedi
	DD	-336					; fffffeb0H
	DD	24					; 00000018H
	DD	$LN98@nk_textedi
	DD	-368					; fffffe90H
	DD	24					; 00000018H
	DD	$LN99@nk_textedi
	DD	-400					; fffffe70H
	DD	24					; 00000018H
	DD	$LN100@nk_textedi
$LN100@nk_textedi:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN99@nk_textedi:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN98@nk_textedi:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN97@nk_textedi:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN96@nk_textedi:
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
$LN95@nk_textedi:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN94@nk_textedi:
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
$LN93@nk_textedi:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
	npad	2
$LN103@nk_textedi:
	DD	$LN26@nk_textedi
	DD	$LN83@nk_textedi
	DD	$LN83@nk_textedi
	DD	$LN21@nk_textedi
	DD	$LN83@nk_textedi
	DD	$LN83@nk_textedi
	DD	$LN83@nk_textedi
	DD	$LN37@nk_textedi
	DD	$LN48@nk_textedi
	DD	$LN72@nk_textedi
	DD	$LN65@nk_textedi
	DD	$LN79@nk_textedi
	DD	$LN77@nk_textedi
	DD	$LN75@nk_textedi
	DD	$LN10@nk_textedi
	DD	$LN5@nk_textedi
	DD	$LN16@nk_textedi
	DD	$LN13@nk_textedi
	DD	$LN82@nk_textedi
	DD	$LN81@nk_textedi
	DD	$LN80@nk_textedi
	DD	$LN60@nk_textedi
	DD	$LN54@nk_textedi
_nk_textedit_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_prep_selection_at_cursor
_TEXT	SEGMENT
_state$ = 8						; size = 4
_nk_textedit_prep_selection_at_cursor PROC		; COMDAT

; 13132: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13133:     /* update selection and cursor to match each other */
; 13134:     if (!NK_TEXT_HAS_SELECTION(state))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	jne	SHORT $LN2@nk_textedi

; 13135:         state->select_start = state->select_end = state->cursor;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+96], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+92], edx
	jmp	SHORT $LN3@nk_textedi
$LN2@nk_textedi:

; 13136:     else state->cursor = state->select_end;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+88], edx
$LN3@nk_textedi:

; 13137: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_prep_selection_at_cursor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_move_to_word_next
_TEXT	SEGMENT
_c$ = -20						; size = 4
_len$ = -8						; size = 4
_state$ = 8						; size = 4
_nk_textedit_move_to_word_next PROC			; COMDAT

; 13118: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13119:    const int len = state->string.len;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _len$[ebp], ecx

; 13120:    int c = state->cursor+1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx
$LN3@nk_textedi:

; 13121:    while( c < len && !nk_is_word_boundary(state, c))

	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN2@nk_textedi
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_nk_is_word_boundary
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@nk_textedi

; 13122:       ++c;

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
	jmp	SHORT $LN3@nk_textedi
$LN2@nk_textedi:

; 13123: 
; 13124:    if( c > len )

	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jle	SHORT $LN1@nk_textedi

; 13125:       c = len;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _c$[ebp], eax
$LN1@nk_textedi:

; 13126: 
; 13127:    return c;

	mov	eax, DWORD PTR _c$[ebp]

; 13128: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_move_to_word_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_move_to_word_previous
_TEXT	SEGMENT
_c$ = -8						; size = 4
_state$ = 8						; size = 4
_nk_textedit_move_to_word_previous PROC			; COMDAT

; 13105: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13106:    int c = state->cursor - 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	sub	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx
$LN3@nk_textedi:

; 13107:    while( c >= 0 && !nk_is_word_boundary(state, c))

	cmp	DWORD PTR _c$[ebp], 0
	jl	SHORT $LN2@nk_textedi
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_nk_is_word_boundary
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@nk_textedi

; 13108:       --c;

	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 1
	mov	DWORD PTR _c$[ebp], eax
	jmp	SHORT $LN3@nk_textedi
$LN2@nk_textedi:

; 13109: 
; 13110:    if( c < 0 )

	cmp	DWORD PTR _c$[ebp], 0
	jge	SHORT $LN1@nk_textedi

; 13111:       c = 0;

	mov	DWORD PTR _c$[ebp], 0
$LN1@nk_textedi:

; 13112: 
; 13113:    return c;

	mov	eax, DWORD PTR _c$[ebp]

; 13114: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_move_to_word_previous ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_is_word_boundary
_TEXT	SEGMENT
tv84 = -220						; size = 4
_c$ = -20						; size = 4
_len$ = -8						; size = 4
_state$ = 8						; size = 4
_idx$ = 12						; size = 4
_nk_is_word_boundary PROC				; COMDAT

; 13093: {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13094:     int len;
; 13095:     nk_rune c;
; 13096:     if (idx <= 0) return 1;

	cmp	DWORD PTR _idx$[ebp], 0
	jg	SHORT $LN2@nk_is_word
	mov	eax, 1
	jmp	$LN3@nk_is_word
$LN2@nk_is_word:

; 13097:     if (!nk_str_at_rune(&state->string, idx, &c, &len)) return 1;

	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _idx$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_at_rune
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN1@nk_is_word
	mov	eax, 1
	jmp	SHORT $LN3@nk_is_word
$LN1@nk_is_word:

; 13098:     return (c == ' ' || c == '\t' ||c == 0x3000 || c == ',' || c == ';' ||
; 13099:             c == '(' || c == ')' || c == '{' || c == '}' || c == '[' || c == ']' ||
; 13100:             c == '|');

	cmp	DWORD PTR _c$[ebp], 32			; 00000020H
	je	SHORT $LN5@nk_is_word
	cmp	DWORD PTR _c$[ebp], 9
	je	SHORT $LN5@nk_is_word
	cmp	DWORD PTR _c$[ebp], 12288		; 00003000H
	je	SHORT $LN5@nk_is_word
	cmp	DWORD PTR _c$[ebp], 44			; 0000002cH
	je	SHORT $LN5@nk_is_word
	cmp	DWORD PTR _c$[ebp], 59			; 0000003bH
	je	SHORT $LN5@nk_is_word
	cmp	DWORD PTR _c$[ebp], 40			; 00000028H
	je	SHORT $LN5@nk_is_word
	cmp	DWORD PTR _c$[ebp], 41			; 00000029H
	je	SHORT $LN5@nk_is_word
	cmp	DWORD PTR _c$[ebp], 123			; 0000007bH
	je	SHORT $LN5@nk_is_word
	cmp	DWORD PTR _c$[ebp], 125			; 0000007dH
	je	SHORT $LN5@nk_is_word
	cmp	DWORD PTR _c$[ebp], 91			; 0000005bH
	je	SHORT $LN5@nk_is_word
	cmp	DWORD PTR _c$[ebp], 93			; 0000005dH
	je	SHORT $LN5@nk_is_word
	cmp	DWORD PTR _c$[ebp], 124			; 0000007cH
	je	SHORT $LN5@nk_is_word
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN6@nk_is_word
$LN5@nk_is_word:
	mov	DWORD PTR tv84[ebp], 1
$LN6@nk_is_word:
	mov	eax, DWORD PTR tv84[ebp]
$LN3@nk_is_word:

; 13101: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@nk_is_word
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@nk_is_word:
	DD	2
	DD	$LN9@nk_is_word
$LN9@nk_is_word:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN7@nk_is_word
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@nk_is_word
$LN8@nk_is_word:
	DB	99					; 00000063H
	DB	0
$LN7@nk_is_word:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_nk_is_word_boundary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_move_to_last
_TEXT	SEGMENT
_state$ = 8						; size = 4
_nk_textedit_move_to_last PROC				; COMDAT

; 13080: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13081:     /* move cursor to last character of selection */
; 13082:     if (NK_TEXT_HAS_SELECTION(state)) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	je	SHORT $LN2@nk_textedi

; 13083:         nk_textedit_sortselection(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_sortselection
	add	esp, 4

; 13084:         nk_textedit_clamp(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clamp
	add	esp, 4

; 13085:         state->cursor = state->select_end;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+88], edx

; 13086:         state->select_start = state->select_end;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+92], edx

; 13087:         state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0
$LN2@nk_textedi:

; 13088:     }
; 13089: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_move_to_last ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_move_to_first
_TEXT	SEGMENT
_state$ = 8						; size = 4
_nk_textedit_move_to_first PROC				; COMDAT

; 13068: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13069:     /* move cursor to first character of selection */
; 13070:     if (NK_TEXT_HAS_SELECTION(state)) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	je	SHORT $LN2@nk_textedi

; 13071:         nk_textedit_sortselection(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_sortselection
	add	esp, 4

; 13072:         state->cursor = state->select_start;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR [eax+88], edx

; 13073:         state->select_end = state->select_start;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR [eax+96], edx

; 13074:         state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0
$LN2@nk_textedi:

; 13075:     }
; 13076: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_move_to_first ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_sortselection
_TEXT	SEGMENT
_temp$1 = -8						; size = 4
_state$ = 8						; size = 4
_nk_textedit_sortselection PROC				; COMDAT

; 13057: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13058:     /* canonicalize the selection so start <= end */
; 13059:     if (state->select_end < state->select_start) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+96]
	cmp	edx, DWORD PTR [ecx+92]
	jge	SHORT $LN2@nk_textedi

; 13060:         int temp = state->select_end;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _temp$1[ebp], ecx

; 13061:         state->select_end = state->select_start;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR [eax+96], edx

; 13062:         state->select_start = temp;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _temp$1[ebp]
	mov	DWORD PTR [eax+92], ecx
$LN2@nk_textedi:

; 13063:     }
; 13064: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_sortselection ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_clamp
_TEXT	SEGMENT
_n$ = -8						; size = 4
_state$ = 8						; size = 4
_nk_textedit_clamp PROC					; COMDAT

; 13014: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13015:     /* make the selection/cursor state valid if client altered the string */
; 13016:     int n = state->string.len;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _n$[ebp], ecx

; 13017:     if (NK_TEXT_HAS_SELECTION(state)) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	je	SHORT $LN5@nk_textedi

; 13018:         if (state->select_start > n) state->select_start = n;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	cmp	ecx, DWORD PTR _n$[ebp]
	jle	SHORT $LN4@nk_textedi
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+92], ecx
$LN4@nk_textedi:

; 13019:         if (state->select_end   > n) state->select_end = n;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	cmp	ecx, DWORD PTR _n$[ebp]
	jle	SHORT $LN3@nk_textedi
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+96], ecx
$LN3@nk_textedi:

; 13020:         /* if clamping forced them to be equal, move the cursor to match */
; 13021:         if (state->select_start == state->select_end)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	jne	SHORT $LN5@nk_textedi

; 13022:             state->cursor = state->select_start;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR [eax+88], edx
$LN5@nk_textedi:

; 13023:     }
; 13024:     if (state->cursor > n) state->cursor = n;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	cmp	ecx, DWORD PTR _n$[ebp]
	jle	SHORT $LN6@nk_textedi
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+88], ecx
$LN6@nk_textedi:

; 13025: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_clamp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_find_charpos
_TEXT	SEGMENT
tv218 = -280						; size = 4
_first$ = -80						; size = 4
_i$ = -68						; size = 4
_z$ = -56						; size = 4
_prev_start$ = -44					; size = 4
_r$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_find$ = 8						; size = 4
_state$ = 12						; size = 4
_n$ = 16						; size = 4
_single_line$ = 20					; size = 4
_font$ = 24						; size = 4
_row_height$ = 28					; size = 4
_nk_textedit_find_charpos PROC				; COMDAT

; 12957: {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 12958:     /* find the x/y location of a character, and remember info about the previous
; 12959:      * row in case we get a move-up event (for page up, we'll have to rescan) */
; 12960:     struct nk_text_edit_row r;
; 12961:     int prev_start = 0;

	mov	DWORD PTR _prev_start$[ebp], 0

; 12962:     int z = state->string.len;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _z$[ebp], ecx

; 12963:     int i=0, first;

	mov	DWORD PTR _i$[ebp], 0

; 12964: 
; 12965:     nk_zero_struct(r);

	push	24					; 00000018H
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 12966:     if (n == z) {

	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _z$[ebp]
	jne	$LN11@nk_textedi

; 12967:         /* if it's at the end, then find the last line -- simpler than trying to
; 12968:         explicitly handle this case in the regular code */
; 12969:         nk_textedit_layout_row(&r, state, 0, row_height, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	call	_nk_textedit_layout_row
	add	esp, 20					; 00000014H

; 12970:         if (single_line) {

	cmp	DWORD PTR _single_line$[ebp], 0
	je	SHORT $LN10@nk_textedi

; 12971:             find->first_char = 0;

	mov	eax, DWORD PTR _find$[ebp]
	mov	DWORD PTR [eax+12], 0

; 12972:             find->length = z;

	mov	eax, DWORD PTR _find$[ebp]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 12973:         } else {

	jmp	SHORT $LN9@nk_textedi
$LN10@nk_textedi:

; 12974:             while (i < z) {

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _z$[ebp]
	jge	SHORT $LN7@nk_textedi

; 12975:                 prev_start = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _prev_start$[ebp], eax

; 12976:                 i += r.num_chars;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _r$[ebp+20]
	mov	DWORD PTR _i$[ebp], eax

; 12977:                 nk_textedit_layout_row(&r, state, i, row_height, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	call	_nk_textedit_layout_row
	add	esp, 20					; 00000014H

; 12978:             }

	jmp	SHORT $LN10@nk_textedi
$LN7@nk_textedi:

; 12979: 
; 12980:             find->first_char = i;

	mov	eax, DWORD PTR _find$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 12981:             find->length = r.num_chars;

	mov	eax, DWORD PTR _find$[ebp]
	mov	ecx, DWORD PTR _r$[ebp+20]
	mov	DWORD PTR [eax+16], ecx
$LN9@nk_textedi:

; 12982:         }
; 12983:         find->x = r.x1;

	mov	eax, DWORD PTR _find$[ebp]
	movss	xmm0, DWORD PTR _r$[ebp+4]
	movss	DWORD PTR [eax], xmm0

; 12984:         find->y = r.ymin;

	mov	eax, DWORD PTR _find$[ebp]
	movss	xmm0, DWORD PTR _r$[ebp+12]
	movss	DWORD PTR [eax+4], xmm0

; 12985:         find->height = r.ymax - r.ymin;

	movss	xmm0, DWORD PTR _r$[ebp+16]
	subss	xmm0, DWORD PTR _r$[ebp+12]
	mov	eax, DWORD PTR _find$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 12986:         find->prev_first = prev_start;

	mov	eax, DWORD PTR _find$[ebp]
	mov	ecx, DWORD PTR _prev_start$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 12987:         return;

	jmp	$LN1@nk_textedi
$LN11@nk_textedi:

; 12988:     }
; 12989: 
; 12990:     /* search rows to find the one that straddles character n */
; 12991:     find->y = 0;

	mov	eax, DWORD PTR _find$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+4], xmm0
$LN6@nk_textedi:

; 12992: 
; 12993:     for(;;) {
; 12994:         nk_textedit_layout_row(&r, state, i, row_height, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	call	_nk_textedit_layout_row
	add	esp, 20					; 00000014H

; 12995:         if (n < i + r.num_chars) break;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _r$[ebp+20]
	cmp	DWORD PTR _n$[ebp], eax
	jge	SHORT $LN4@nk_textedi
	jmp	SHORT $LN5@nk_textedi
$LN4@nk_textedi:

; 12996:         prev_start = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _prev_start$[ebp], eax

; 12997:         i += r.num_chars;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _r$[ebp+20]
	mov	DWORD PTR _i$[ebp], eax

; 12998:         find->y += r.baseline_y_delta;

	mov	eax, DWORD PTR _find$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR _r$[ebp+8]
	mov	ecx, DWORD PTR _find$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 12999:     }

	jmp	SHORT $LN6@nk_textedi
$LN5@nk_textedi:

; 13000: 
; 13001:     find->first_char = first = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _first$[ebp], eax
	mov	ecx, DWORD PTR _find$[ebp]
	mov	edx, DWORD PTR _first$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 13002:     find->length = r.num_chars;

	mov	eax, DWORD PTR _find$[ebp]
	mov	ecx, DWORD PTR _r$[ebp+20]
	mov	DWORD PTR [eax+16], ecx

; 13003:     find->height = r.ymax - r.ymin;

	movss	xmm0, DWORD PTR _r$[ebp+16]
	subss	xmm0, DWORD PTR _r$[ebp+12]
	mov	eax, DWORD PTR _find$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 13004:     find->prev_first = prev_start;

	mov	eax, DWORD PTR _find$[ebp]
	mov	ecx, DWORD PTR _prev_start$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 13005: 
; 13006:     /* now scan to find xpos */
; 13007:     find->x = r.x0;

	mov	eax, DWORD PTR _find$[ebp]
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [eax], xmm0

; 13008:     for (i=0; first+i < n; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_textedi
$LN2@nk_textedi:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_textedi:
	mov	eax, DWORD PTR _first$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN1@nk_textedi

; 13009:         find->x += nk_textedit_get_width(state, first, i, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _first$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_get_width
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv218[ebp]
	mov	ecx, DWORD PTR _find$[ebp]
	movss	xmm0, DWORD PTR tv218[ebp]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _find$[ebp]
	movss	DWORD PTR [edx], xmm0
	jmp	SHORT $LN2@nk_textedi
$LN1@nk_textedi:

; 13010: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@nk_textedi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@nk_textedi:
	DD	1
	DD	$LN15@nk_textedi
$LN15@nk_textedi:
	DD	-32					; ffffffe0H
	DD	24					; 00000018H
	DD	$LN14@nk_textedi
$LN14@nk_textedi:
	DB	114					; 00000072H
	DB	0
_nk_textedit_find_charpos ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_drag
_TEXT	SEGMENT
_p$ = -8						; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_font$ = 20						; size = 4
_row_height$ = 24					; size = 4
_nk_textedit_drag PROC					; COMDAT

; 12945: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12946:     /* API drag: on mouse drag, move the cursor and selection endpoint
; 12947:      * to the clicked location */
; 12948:     int p = nk_textedit_locate_coord(state, x, y, font, row_height);

	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_nk_textedit_locate_coord
	add	esp, 20					; 00000014H
	mov	DWORD PTR _p$[ebp], eax

; 12949:     if (state->select_start == state->select_end)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	jne	SHORT $LN1@nk_textedi

; 12950:         state->select_start = state->cursor;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+92], edx
$LN1@nk_textedi:

; 12951:     state->cursor = state->select_end = p;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+96], ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+88], eax

; 12952: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_drag ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_click
_TEXT	SEGMENT
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_font$ = 20						; size = 4
_row_height$ = 24					; size = 4
_nk_textedit_click PROC					; COMDAT

; 12933: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12934:     /* API click: on mouse down, move the cursor to the clicked location,
; 12935:      * and reset the selection */
; 12936:     state->cursor = nk_textedit_locate_coord(state, x, y, font, row_height);

	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_nk_textedit_locate_coord
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+88], eax

; 12937:     state->select_start = state->cursor;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+92], edx

; 12938:     state->select_end = state->cursor;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+96], edx

; 12939:     state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0

; 12940: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_click ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_locate_coord
_TEXT	SEGMENT
_w$1 = -104						; size = 4
_k$ = -92						; size = 4
_i$ = -80						; size = 4
_prev_x$ = -68						; size = 4
_base_y$ = -56						; size = 4
_n$ = -44						; size = 4
_r$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_edit$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_font$ = 20						; size = 4
_row_height$ = 24					; size = 4
_nk_textedit_locate_coord PROC				; COMDAT

; 12872: {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 12873:     struct nk_text_edit_row r;
; 12874:     int n = edit->string.len;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _n$[ebp], ecx

; 12875:     float base_y = 0, prev_x;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _base_y$[ebp], xmm0

; 12876:     int i=0, k;

	mov	DWORD PTR _i$[ebp], 0

; 12877: 
; 12878:     r.x0 = r.x1 = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _r$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _r$[ebp+4]
	movss	DWORD PTR _r$[ebp], xmm0

; 12879:     r.ymin = r.ymax = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _r$[ebp+16], xmm0
	movss	xmm0, DWORD PTR _r$[ebp+16]
	movss	DWORD PTR _r$[ebp+12], xmm0

; 12880:     r.num_chars = 0;

	mov	DWORD PTR _r$[ebp+20], 0
$LN16@nk_textedi:

; 12881: 
; 12882:     /* search rows to find one that straddles 'y' */
; 12883:     while (i < n) {

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN15@nk_textedi

; 12884:         nk_textedit_layout_row(&r, edit, i, row_height, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _edit$[ebp]
	push	edx
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	call	_nk_textedit_layout_row
	add	esp, 20					; 00000014H

; 12885:         if (r.num_chars <= 0)

	cmp	DWORD PTR _r$[ebp+20], 0
	jg	SHORT $LN14@nk_textedi

; 12886:             return n;

	mov	eax, DWORD PTR _n$[ebp]
	jmp	$LN1@nk_textedi
$LN14@nk_textedi:

; 12887: 
; 12888:         if (i==0 && y < base_y + r.ymin)

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN13@nk_textedi
	movss	xmm0, DWORD PTR _base_y$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp+12]
	comiss	xmm0, DWORD PTR _y$[ebp]
	jbe	SHORT $LN13@nk_textedi

; 12889:             return 0;

	xor	eax, eax
	jmp	$LN1@nk_textedi
$LN13@nk_textedi:

; 12890: 
; 12891:         if (y < base_y + r.ymax)

	movss	xmm0, DWORD PTR _base_y$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp+16]
	comiss	xmm0, DWORD PTR _y$[ebp]
	jbe	SHORT $LN12@nk_textedi

; 12892:             break;

	jmp	SHORT $LN15@nk_textedi
$LN12@nk_textedi:

; 12893: 
; 12894:         i += r.num_chars;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _r$[ebp+20]
	mov	DWORD PTR _i$[ebp], eax

; 12895:         base_y += r.baseline_y_delta;

	movss	xmm0, DWORD PTR _base_y$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp+8]
	movss	DWORD PTR _base_y$[ebp], xmm0

; 12896:     }

	jmp	$LN16@nk_textedi
$LN15@nk_textedi:

; 12897: 
; 12898:     /* below all text, return 'after' last character */
; 12899:     if (i >= n)

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jl	SHORT $LN11@nk_textedi

; 12900:         return n;

	mov	eax, DWORD PTR _n$[ebp]
	jmp	$LN1@nk_textedi
$LN11@nk_textedi:

; 12901: 
; 12902:     /* check if it's before the beginning of the line */
; 12903:     if (x < r.x0)

	movss	xmm0, DWORD PTR _r$[ebp]
	comiss	xmm0, DWORD PTR _x$[ebp]
	jbe	SHORT $LN10@nk_textedi

; 12904:         return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	$LN1@nk_textedi
$LN10@nk_textedi:

; 12905: 
; 12906:     /* check if it's before the end of the line */
; 12907:     if (x < r.x1) {

	movss	xmm0, DWORD PTR _r$[ebp+4]
	comiss	xmm0, DWORD PTR _x$[ebp]
	jbe	$LN6@nk_textedi

; 12908:         /* search characters in row for one that straddles 'x' */
; 12909:         k = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _k$[ebp], eax

; 12910:         prev_x = r.x0;

	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR _prev_x$[ebp], xmm0

; 12911:         for (i=0; i < r.num_chars; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@nk_textedi
$LN7@nk_textedi:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@nk_textedi:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _r$[ebp+20]
	jge	SHORT $LN6@nk_textedi

; 12912:             float w = nk_textedit_get_width(edit, k, i, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	mov	eax, DWORD PTR _edit$[ebp]
	push	eax
	call	_nk_textedit_get_width
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _w$1[ebp]

; 12913:             if (x < prev_x+w) {

	movss	xmm0, DWORD PTR _prev_x$[ebp]
	addss	xmm0, DWORD PTR _w$1[ebp]
	comiss	xmm0, DWORD PTR _x$[ebp]
	jbe	SHORT $LN3@nk_textedi

; 12914:                 if (x < prev_x+w/2)

	movss	xmm0, DWORD PTR _w$1[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR _prev_x$[ebp]
	comiss	xmm0, DWORD PTR _x$[ebp]
	jbe	SHORT $LN4@nk_textedi

; 12915:                     return k+i;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN1@nk_textedi
	jmp	SHORT $LN3@nk_textedi
$LN4@nk_textedi:

; 12916:                 else return k+i+1;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [ecx+eax+1]
	jmp	SHORT $LN1@nk_textedi
$LN3@nk_textedi:

; 12917:             }
; 12918:             prev_x += w;

	movss	xmm0, DWORD PTR _prev_x$[ebp]
	addss	xmm0, DWORD PTR _w$1[ebp]
	movss	DWORD PTR _prev_x$[ebp], xmm0

; 12919:         }

	jmp	SHORT $LN7@nk_textedi
$LN6@nk_textedi:

; 12920:         /* shouldn't happen, but if it does, fall through to end-of-line case */
; 12921:     }
; 12922: 
; 12923:     /* if the last character is a newline, return that.
; 12924:      * otherwise return 'after' the last character */
; 12925:     if (nk_str_rune_at(&edit->string, i+r.num_chars-1) == '\n')

	mov	eax, DWORD PTR _r$[ebp+20]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _edit$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_rune_at
	add	esp, 8
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN2@nk_textedi

; 12926:         return i+r.num_chars-1;

	mov	eax, DWORD PTR _r$[ebp+20]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	jmp	SHORT $LN1@nk_textedi
	jmp	SHORT $LN1@nk_textedi
$LN2@nk_textedi:

; 12927:     else return i+r.num_chars;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _r$[ebp+20]
$LN1@nk_textedi:

; 12928: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@nk_textedi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN21@nk_textedi:
	DD	1
	DD	$LN20@nk_textedi
$LN20@nk_textedi:
	DD	-32					; ffffffe0H
	DD	24					; 00000018H
	DD	$LN19@nk_textedi
$LN19@nk_textedi:
	DB	114					; 00000072H
	DB	0
_nk_textedit_locate_coord ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_layout_row
_TEXT	SEGMENT
_size$ = -96						; size = 8
_text$ = -80						; size = 4
_end$ = -68						; size = 4
_len$ = -56						; size = 4
_remaining$ = -44					; size = 4
_unicode$ = -32						; size = 4
_glyphs$ = -20						; size = 4
_l$ = -8						; size = 4
_r$ = 8							; size = 4
_edit$ = 12						; size = 4
_line_start_id$ = 16					; size = 4
_row_height$ = 20					; size = 4
_font$ = 24						; size = 4
_nk_textedit_layout_row PROC				; COMDAT

; 12850: {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12851:     int l;
; 12852:     int glyphs = 0;

	mov	DWORD PTR _glyphs$[ebp], 0

; 12853:     nk_rune unicode;
; 12854:     const char *remaining;
; 12855:     int len = nk_str_len_char(&edit->string);

	mov	eax, DWORD PTR _edit$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_len_char
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax

; 12856:     const char *end = nk_str_get_const(&edit->string) + len;

	mov	eax, DWORD PTR _edit$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_get_const
	add	esp, 4
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _end$[ebp], eax

; 12857:     const char *text = nk_str_at_const(&edit->string, line_start_id, &unicode, &l);

	lea	eax, DWORD PTR _l$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _line_start_id$[ebp]
	push	edx
	mov	eax, DWORD PTR _edit$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_at_const
	add	esp, 16					; 00000010H
	mov	DWORD PTR _text$[ebp], eax

; 12858:     const struct nk_vec2 size = nk_text_calculate_text_bounds(font,
; 12859:         text, (int)(end - text), row_height, &remaining, 0, &glyphs, NK_STOP_ON_NEW_LINE);

	push	1
	lea	eax, DWORD PTR _glyphs$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _remaining$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _end$[ebp]
	sub	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	push	ecx
	call	_nk_text_calculate_text_bounds
	add	esp, 32					; 00000020H
	mov	DWORD PTR _size$[ebp], eax
	mov	DWORD PTR _size$[ebp+4], edx

; 12860: 
; 12861:     r->x0 = 0.0f;

	mov	eax, DWORD PTR _r$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 12862:     r->x1 = size.x;

	mov	eax, DWORD PTR _r$[ebp]
	movss	xmm0, DWORD PTR _size$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 12863:     r->baseline_y_delta = size.y;

	mov	eax, DWORD PTR _r$[ebp]
	movss	xmm0, DWORD PTR _size$[ebp+4]
	movss	DWORD PTR [eax+8], xmm0

; 12864:     r->ymin = 0.0f;

	mov	eax, DWORD PTR _r$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+12], xmm0

; 12865:     r->ymax = size.y;

	mov	eax, DWORD PTR _r$[ebp]
	movss	xmm0, DWORD PTR _size$[ebp+4]
	movss	DWORD PTR [eax+16], xmm0

; 12866:     r->num_chars = glyphs;

	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _glyphs$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 12867: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@nk_textedi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@nk_textedi:
	DD	5
	DD	$LN8@nk_textedi
$LN8@nk_textedi:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@nk_textedi
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@nk_textedi
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@nk_textedi
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN6@nk_textedi
	DD	-96					; ffffffa0H
	DD	8
	DD	$LN7@nk_textedi
$LN7@nk_textedi:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN6@nk_textedi:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN5@nk_textedi:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN4@nk_textedi:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	0
$LN3@nk_textedi:
	DB	108					; 0000006cH
	DB	0
_nk_textedit_layout_row ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_get_width
_TEXT	SEGMENT
_str$ = -32						; size = 4
_unicode$ = -20						; size = 4
_len$ = -8						; size = 4
_edit$ = 8						; size = 4
_line_start$ = 12					; size = 4
_char_id$ = 16						; size = 4
_font$ = 20						; size = 4
_nk_textedit_get_width PROC				; COMDAT

; 12840: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12841:     int len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 12842:     nk_rune unicode = 0;

	mov	DWORD PTR _unicode$[ebp], 0

; 12843:     const char *str = nk_str_at_const(&edit->string, line_start + char_id, &unicode, &len);

	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _line_start$[ebp]
	add	edx, DWORD PTR _char_id$[ebp]
	push	edx
	mov	eax, DWORD PTR _edit$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_at_const
	add	esp, 16					; 00000010H
	mov	DWORD PTR _str$[ebp], eax

; 12844:     return font->width(font->userdata, font->height, str, len);

	mov	esi, esp
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 12845: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@nk_textedi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@nk_textedi:
	DD	2
	DD	$LN5@nk_textedi
$LN5@nk_textedi:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@nk_textedi
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@nk_textedi
$LN4@nk_textedi:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN3@nk_textedi:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_nk_textedit_get_width ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_makeundo_replace
_TEXT	SEGMENT
_p$ = -20						; size = 4
_i$ = -8						; size = 4
_state$ = 8						; size = 4
_where$ = 12						; size = 4
_old_length$ = 16					; size = 4
_new_length$ = 20					; size = 4
_nk_textedit_makeundo_replace PROC			; COMDAT

; 13789: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13790:     int i;
; 13791:     nk_rune *p = nk_textedit_createundo(&state->undo, where, old_length, new_length);

	mov	eax, DWORD PTR _new_length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _old_length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _where$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	call	_nk_textedit_createundo
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax

; 13792:     if (p) {

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN5@nk_textedi

; 13793:         for (i=0; i < old_length; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_textedi
$LN2@nk_textedi:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_textedi:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _old_length$[ebp]
	jge	SHORT $LN5@nk_textedi

; 13794:             p[i] = nk_str_rune_at(&state->string, where+i);

	mov	eax, DWORD PTR _where$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_nk_str_rune_at
	add	esp, 8
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
	jmp	SHORT $LN2@nk_textedi
$LN5@nk_textedi:

; 13795:     }
; 13796: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_makeundo_replace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_makeundo_insert
_TEXT	SEGMENT
_state$ = 8						; size = 4
_where$ = 12						; size = 4
_length$ = 16						; size = 4
_nk_textedit_makeundo_insert PROC			; COMDAT

; 13771: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13772:     nk_textedit_createundo(&state->undo, where, 0, length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _where$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	call	_nk_textedit_createundo
	add	esp, 16					; 00000010H

; 13773: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_makeundo_insert ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_makeundo_delete
_TEXT	SEGMENT
_p$ = -20						; size = 4
_i$ = -8						; size = 4
_state$ = 8						; size = 4
_where$ = 12						; size = 4
_length$ = 16						; size = 4
_nk_textedit_makeundo_delete PROC			; COMDAT

; 13777: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13778:     int i;
; 13779:     nk_rune *p = nk_textedit_createundo(&state->undo, where, length, 0);

	push	0
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _where$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	call	_nk_textedit_createundo
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax

; 13780:     if (p) {

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN5@nk_textedi

; 13781:         for (i=0; i < length; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_textedi
$LN2@nk_textedi:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_textedi:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN5@nk_textedi

; 13782:             p[i] = nk_str_rune_at(&state->string, where+i);

	mov	eax, DWORD PTR _where$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_nk_str_rune_at
	add	esp, 8
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
	jmp	SHORT $LN2@nk_textedi
$LN5@nk_textedi:

; 13783:     }
; 13784: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_makeundo_delete ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_decode_85
_TEXT	SEGMENT
tv187 = -208						; size = 4
_tmp$1 = -8						; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_nk_decode_85 PROC					; COMDAT

; 12014: {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@nk_decode_:

; 12015:     while (*src)

	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN3@nk_decode_

; 12016:     {
; 12017:         unsigned int tmp =
; 12018:             nk_decode_85_byte((char)src[0]) +
; 12019:             85 * (nk_decode_85_byte((char)src[1]) +
; 12020:             85 * (nk_decode_85_byte((char)src[2]) +
; 12021:             85 * (nk_decode_85_byte((char)src[3]) +
; 12022:             85 * nk_decode_85_byte((char)src[4]))));

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _src$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	push	eax
	call	_nk_decode_85_byte
	add	esp, 4
	mov	esi, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _src$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	push	eax
	call	_nk_decode_85_byte
	add	esp, 4
	mov	edi, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _src$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	push	eax
	call	_nk_decode_85_byte
	add	esp, 4
	mov	ebx, eax
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	push	ecx
	call	_nk_decode_85_byte
	add	esp, 4
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	push	edx
	mov	DWORD PTR tv187[ebp], eax
	call	_nk_decode_85_byte
	add	esp, 4
	imul	eax, eax, 85
	mov	ecx, DWORD PTR tv187[ebp]
	add	ecx, eax
	imul	ecx, ecx, 85
	add	ebx, ecx
	imul	edx, ebx, 85
	add	edi, edx
	imul	eax, edi, 85
	add	esi, eax
	mov	DWORD PTR _tmp$1[ebp], esi

; 12023: 
; 12024:         /* we can't assume little-endianess. */
; 12025:         dst[0] = (unsigned char)((tmp >> 0) & 0xFF);

	mov	eax, DWORD PTR _tmp$1[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	BYTE PTR [ecx+edx], al

; 12026:         dst[1] = (unsigned char)((tmp >> 8) & 0xFF);

	mov	eax, DWORD PTR _tmp$1[ebp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _dst$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 12027:         dst[2] = (unsigned char)((tmp >> 16) & 0xFF);

	mov	eax, DWORD PTR _tmp$1[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _dst$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 12028:         dst[3] = (unsigned char)((tmp >> 24) & 0xFF);

	mov	eax, DWORD PTR _tmp$1[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	BYTE PTR [ecx+edx], al

; 12029: 
; 12030:         src += 5;

	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 5
	mov	DWORD PTR _src$[ebp], eax

; 12031:         dst += 4;

	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 4
	mov	DWORD PTR _dst$[ebp], eax

; 12032:     }

	jmp	$LN2@nk_decode_
$LN3@nk_decode_:

; 12033: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_decode_85 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_decode_85_byte
_TEXT	SEGMENT
tv70 = -196						; size = 4
_c$ = 8							; size = 1
_nk_decode_85_byte PROC					; COMDAT

; 12010: { return (unsigned int)((c >= '\\') ? c-36 : c-35); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 92					; 0000005cH
	jl	SHORT $LN3@nk_decode_
	movsx	ecx, BYTE PTR _c$[ebp]
	sub	ecx, 36					; 00000024H
	mov	DWORD PTR tv70[ebp], ecx
	jmp	SHORT $LN4@nk_decode_
$LN3@nk_decode_:
	movsx	edx, BYTE PTR _c$[ebp]
	sub	edx, 35					; 00000023H
	mov	DWORD PTR tv70[ebp], edx
$LN4@nk_decode_:
	mov	eax, DWORD PTR tv70[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_decode_85_byte ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_decompress
_TEXT	SEGMENT
_old_i$1 = -20						; size = 4
_olen$ = -8						; size = 4
_output$ = 8						; size = 4
_i$ = 12						; size = 4
_length$ = 16						; size = 4
_nk_decompress PROC					; COMDAT

; 11975: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11976:     unsigned int olen;
; 11977:     if (nk__in4(0) != 0x57bC0000) return 0;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 16					; 00000010H
	mov	edx, 1
	shl	edx, 1
	mov	esi, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [esi+edx]
	shl	edx, 8
	mov	esi, 1
	imul	esi, esi, 3
	mov	edi, DWORD PTR _i$[ebp]
	movzx	esi, BYTE PTR [edi+esi]
	add	edx, esi
	add	ecx, edx
	add	eax, ecx
	cmp	eax, 1471938560				; 57bc0000H
	je	SHORT $LN10@nk_decompr
	xor	eax, eax
	jmp	$LN11@nk_decompr
$LN10@nk_decompr:

; 11978:     if (nk__in4(4) != 0)          return 0; /* error! stream is > 4GB */

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	imul	ecx, eax, 5
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 16					; 00000010H
	mov	eax, 1
	imul	eax, eax, 6
	mov	esi, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [esi+eax]
	shl	eax, 8
	mov	esi, 1
	imul	esi, esi, 7
	mov	edi, DWORD PTR _i$[ebp]
	movzx	esi, BYTE PTR [edi+esi]
	add	eax, esi
	add	ecx, eax
	add	edx, ecx
	je	SHORT $LN9@nk_decompr
	xor	eax, eax
	jmp	$LN11@nk_decompr
$LN9@nk_decompr:

; 11979:     olen = nk_decompress_length(i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_nk_decompress_length
	add	esp, 4
	mov	DWORD PTR _olen$[ebp], eax

; 11980:     nk__barrier2 = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _nk__barrier2, eax

; 11981:     nk__barrier3 = i+length;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _nk__barrier3, eax

; 11982:     nk__barrier = output + olen;

	mov	eax, DWORD PTR _output$[ebp]
	add	eax, DWORD PTR _olen$[ebp]
	mov	DWORD PTR _nk__barrier, eax

; 11983:     nk__barrier4 = output;

	mov	eax, DWORD PTR _output$[ebp]
	mov	DWORD PTR _nk__barrier4, eax

; 11984:     i += 16;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _i$[ebp], eax

; 11985: 
; 11986:     nk__dout = output;

	mov	eax, DWORD PTR _output$[ebp]
	mov	DWORD PTR _nk__dout, eax
$LN8@nk_decompr:

; 11987:     for (;;) {
; 11988:         unsigned char *old_i = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _old_i$1[ebp], eax

; 11989:         i = nk_decompress_token(i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_nk_decompress_token
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 11990:         if (i == old_i) {

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _old_i$1[ebp]
	jne	$LN6@nk_decompr

; 11991:             if (*i == 0x05 && i[1] == 0xfa) {

	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 5
	jne	$LN5@nk_decompr
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 250				; 000000faH
	jne	$LN5@nk_decompr

; 11992:                 NK_ASSERT(nk__dout == output + olen);

	mov	eax, DWORD PTR _output$[ebp]
	add	eax, DWORD PTR _olen$[ebp]
	cmp	DWORD PTR _nk__dout, eax
	je	SHORT $LN13@nk_decompr
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_decompress@@9@9@ddf8d5d8
	add	ecx, 17					; 00000011H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1DE@KBBHGLFN@?$AAn?$AAk?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAo?$AAl?$AAe?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_decompr:

; 11993:                 if (nk__dout != output + olen) return 0;

	mov	eax, DWORD PTR _output$[ebp]
	add	eax, DWORD PTR _olen$[ebp]
	cmp	DWORD PTR _nk__dout, eax
	je	SHORT $LN4@nk_decompr
	xor	eax, eax
	jmp	$LN11@nk_decompr
$LN4@nk_decompr:

; 11994:                 if (nk_adler32(1, output, olen) != (unsigned int) nk__in4(2))

	mov	eax, DWORD PTR _olen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	push	1
	call	_nk_adler32
	add	esp, 12					; 0000000cH
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 24					; 00000018H
	mov	ecx, 1
	imul	ecx, ecx, 3
	mov	esi, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [esi+ecx]
	shl	ecx, 16					; 00000010H
	mov	esi, 1
	shl	esi, 2
	mov	edi, DWORD PTR _i$[ebp]
	movzx	esi, BYTE PTR [edi+esi]
	shl	esi, 8
	mov	edi, 1
	imul	edi, edi, 5
	mov	ebx, DWORD PTR _i$[ebp]
	movzx	edi, BYTE PTR [ebx+edi]
	add	esi, edi
	add	ecx, esi
	add	edx, ecx
	cmp	eax, edx
	je	SHORT $LN3@nk_decompr

; 11995:                     return 0;

	xor	eax, eax
	jmp	SHORT $LN11@nk_decompr
$LN3@nk_decompr:

; 11996:                 return olen;

	mov	eax, DWORD PTR _olen$[ebp]
	jmp	SHORT $LN11@nk_decompr

; 11997:             } else {

	jmp	SHORT $LN6@nk_decompr
$LN5@nk_decompr:

; 11998:                 NK_ASSERT(0); /* NOTREACHED */

	xor	eax, eax
	jne	SHORT $LN14@nk_decompr
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_decompress@@9@9@ddf8d5d8
	add	ecx, 23					; 00000017H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_decompr:

; 11999:                 return 0;

	xor	eax, eax
	jmp	SHORT $LN11@nk_decompr
$LN6@nk_decompr:

; 12000:             }
; 12001:         }
; 12002:         NK_ASSERT(nk__dout <= output + olen);

	mov	eax, DWORD PTR _output$[ebp]
	add	eax, DWORD PTR _olen$[ebp]
	cmp	DWORD PTR _nk__dout, eax
	jbe	SHORT $LN15@nk_decompr
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_decompress@@9@9@ddf8d5d8
	add	ecx, 27					; 0000001bH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1DE@IFJFDKGL@?$AAn?$AAk?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAo?$AAl?$AAe?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@nk_decompr:

; 12003:         if (nk__dout > output + olen)

	mov	eax, DWORD PTR _output$[ebp]
	add	eax, DWORD PTR _olen$[ebp]
	cmp	DWORD PTR _nk__dout, eax
	jbe	SHORT $LN1@nk_decompr

; 12004:             return 0;

	xor	eax, eax
	jmp	SHORT $LN11@nk_decompr
$LN1@nk_decompr:

; 12005:     }

	jmp	$LN8@nk_decompr
$LN11@nk_decompr:

; 12006: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_decompress ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_adler32
_TEXT	SEGMENT
_i$ = -56						; size = 4
_blocklen$ = -44					; size = 4
_s2$ = -32						; size = 4
_s1$ = -20						; size = 4
_ADLER_MOD$ = -8					; size = 4
_adler32$ = 8						; size = 4
_buffer$ = 12						; size = 4
_buflen$ = 16						; size = 4
_nk_adler32 PROC					; COMDAT

; 11944: {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11945:     const unsigned long ADLER_MOD = 65521;

	mov	DWORD PTR _ADLER_MOD$[ebp], 65521	; 0000fff1H

; 11946:     unsigned long s1 = adler32 & 0xffff, s2 = adler32 >> 16;

	mov	eax, DWORD PTR _adler32$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	DWORD PTR _s1$[ebp], eax
	mov	eax, DWORD PTR _adler32$[ebp]
	shr	eax, 16					; 00000010H
	mov	DWORD PTR _s2$[ebp], eax

; 11947:     unsigned long blocklen, i;
; 11948: 
; 11949:     blocklen = buflen % 5552;

	mov	eax, DWORD PTR _buflen$[ebp]
	xor	edx, edx
	mov	ecx, 5552				; 000015b0H
	div	ecx
	mov	DWORD PTR _blocklen$[ebp], edx
$LN8@nk_adler32:

; 11950:     while (buflen) {

	cmp	DWORD PTR _buflen$[ebp], 0
	je	$LN7@nk_adler32

; 11951:         for (i=0; i + 7 < blocklen; i += 8) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@nk_adler32
$LN5@nk_adler32:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 8
	mov	DWORD PTR _i$[ebp], eax
$LN6@nk_adler32:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 7
	cmp	eax, DWORD PTR _blocklen$[ebp]
	jae	$LN4@nk_adler32

; 11952:             s1 += buffer[0]; s2 += s1;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _buffer$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], eax
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], eax

; 11953:             s1 += buffer[1]; s2 += s1;

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _buffer$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	add	edx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], edx
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], eax

; 11954:             s1 += buffer[2]; s2 += s1;

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _buffer$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	add	edx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], edx
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], eax

; 11955:             s1 += buffer[3]; s2 += s1;

	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _buffer$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], eax
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], eax

; 11956:             s1 += buffer[4]; s2 += s1;

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _buffer$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	add	edx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], edx
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], eax

; 11957:             s1 += buffer[5]; s2 += s1;

	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _buffer$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], eax
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], eax

; 11958:             s1 += buffer[6]; s2 += s1;

	mov	eax, 1
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _buffer$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], eax
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], eax

; 11959:             s1 += buffer[7]; s2 += s1;

	mov	eax, 1
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _buffer$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], eax
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], eax

; 11960:             buffer += 8;

	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, 8
	mov	DWORD PTR _buffer$[ebp], eax

; 11961:         }

	jmp	$LN5@nk_adler32
$LN4@nk_adler32:

; 11962:         for (; i < blocklen; ++i) {

	jmp	SHORT $LN3@nk_adler32
$LN2@nk_adler32:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_adler32:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _blocklen$[ebp]
	jae	SHORT $LN1@nk_adler32

; 11963:             s1 += *buffer++; s2 += s1;

	mov	eax, DWORD PTR _buffer$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 1
	mov	DWORD PTR _buffer$[ebp], edx
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], eax

; 11964:         }

	jmp	SHORT $LN2@nk_adler32
$LN1@nk_adler32:

; 11965: 
; 11966:         s1 %= ADLER_MOD; s2 %= ADLER_MOD;

	mov	eax, DWORD PTR _s1$[ebp]
	xor	edx, edx
	div	DWORD PTR _ADLER_MOD$[ebp]
	mov	DWORD PTR _s1$[ebp], edx
	mov	eax, DWORD PTR _s2$[ebp]
	xor	edx, edx
	div	DWORD PTR _ADLER_MOD$[ebp]
	mov	DWORD PTR _s2$[ebp], edx

; 11967:         buflen -= (unsigned int)blocklen;

	mov	eax, DWORD PTR _buflen$[ebp]
	sub	eax, DWORD PTR _blocklen$[ebp]
	mov	DWORD PTR _buflen$[ebp], eax

; 11968:         blocklen = 5552;

	mov	DWORD PTR _blocklen$[ebp], 5552		; 000015b0H

; 11969:     }

	jmp	$LN8@nk_adler32
$LN7@nk_adler32:

; 11970:     return (unsigned int)(s2 << 16) + (unsigned int)s1;

	mov	eax, DWORD PTR _s2$[ebp]
	shl	eax, 16					; 00000010H
	add	eax, DWORD PTR _s1$[ebp]

; 11971: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_adler32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_decompress_token
_TEXT	SEGMENT
_i$ = 8							; size = 4
_nk_decompress_token PROC				; COMDAT

; 11926: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11927:     if (*i >= 0x20) { /* use fewer if's for cases that expand small */

	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jl	$LN17@nk_decompr

; 11928:         if (*i >= 0x80)       nk__match(nk__dout-i[1]-1, (unsigned int)i[0] - 0x80 + 1), i += 2;

	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 128				; 00000080H
	jl	SHORT $LN16@nk_decompr
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	sub	eax, 127				; 0000007fH
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _nk__dout
	sub	ecx, eax
	sub	ecx, 1
	push	ecx
	call	_nk__match
	add	esp, 8
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 2
	mov	DWORD PTR _i$[ebp], edx
	jmp	$LN15@nk_decompr
$LN16@nk_decompr:

; 11929:         else if (*i >= 0x40)  nk__match(nk__dout-(nk__in2(0) - 0x4000 + 1), (unsigned int)i[2]+1), i += 3;

	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 64					; 00000040H
	jl	SHORT $LN14@nk_decompr
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	add	edx, 1
	push	edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	lea	edx, DWORD PTR [eax+ecx-16383]
	mov	eax, DWORD PTR _nk__dout
	sub	eax, edx
	push	eax
	call	_nk__match
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 3
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN15@nk_decompr
$LN14@nk_decompr:

; 11930:         else /* *i >= 0x20 */ nk__lit(i+1, (unsigned int)i[0] - 0x20 + 1), i += 1 + (i[0] - 0x20 + 1);

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	sub	eax, 31					; 0000001fH
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	push	ecx
	call	_nk__lit
	add	esp, 8
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [eax+edx-30]
	mov	DWORD PTR _i$[ebp], ecx
$LN15@nk_decompr:

; 11931:     } else { /* more ifs for cases that expand large, since overhead is amortized */

	jmp	$LN12@nk_decompr
$LN17@nk_decompr:

; 11932:         if (*i >= 0x18)       nk__match(nk__dout-(unsigned int)(nk__in3(0) - 0x180000 + 1), (unsigned int)i[3]+1), i += 4;

	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 24					; 00000018H
	jl	SHORT $LN11@nk_decompr
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	add	eax, 1
	push	eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 16					; 00000010H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 1
	mov	esi, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [esi+eax]
	add	edx, eax
	lea	ecx, DWORD PTR [ecx+edx-1572863]
	mov	edx, DWORD PTR _nk__dout
	sub	edx, ecx
	push	edx
	call	_nk__match
	add	esp, 8
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 4
	mov	DWORD PTR _i$[ebp], eax
	jmp	$LN12@nk_decompr
$LN11@nk_decompr:

; 11933:         else if (*i >= 0x10)  nk__match(nk__dout-(unsigned int)(nk__in3(0) - 0x100000 + 1), (unsigned int)nk__in2(3)+1), i += 5;

	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 16					; 00000010H
	jl	$LN9@nk_decompr
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	lea	edx, DWORD PTR [eax+ecx+1]
	push	edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 16					; 00000010H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 1
	mov	esi, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [esi+edx]
	add	ecx, edx
	lea	eax, DWORD PTR [eax+ecx-1048575]
	mov	ecx, DWORD PTR _nk__dout
	sub	ecx, eax
	push	ecx
	call	_nk__match
	add	esp, 8
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 5
	mov	DWORD PTR _i$[ebp], edx
	jmp	$LN12@nk_decompr
$LN9@nk_decompr:

; 11934:         else if (*i >= 0x08)  nk__lit(i+2, (unsigned int)nk__in2(0) - 0x0800 + 1), i += 2 + (nk__in2(0) - 0x0800 + 1);

	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 8
	jl	SHORT $LN7@nk_decompr
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	lea	edx, DWORD PTR [eax+ecx-2047]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 2
	push	eax
	call	_nk__lit
	add	esp, 8
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	add	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [edx+ecx-2045]
	mov	DWORD PTR _i$[ebp], eax
	jmp	$LN12@nk_decompr
$LN7@nk_decompr:

; 11935:         else if (*i == 0x07)  nk__lit(i+3, (unsigned int)nk__in2(1) + 1), i += 3 + (nk__in2(1) + 1);

	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 7
	jne	SHORT $LN5@nk_decompr
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	lea	ecx, DWORD PTR [edx+eax+1]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 3
	push	edx
	call	_nk__lit
	add	esp, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	add	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	$LN12@nk_decompr
$LN5@nk_decompr:

; 11936:         else if (*i == 0x06)  nk__match(nk__dout-(unsigned int)(nk__in3(1)+1), i[4]+1u), i += 5;

	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 6
	jne	SHORT $LN3@nk_decompr
	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	add	edx, 1
	push	edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 16					; 00000010H
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	shl	eax, 8
	mov	ecx, 1
	imul	ecx, ecx, 3
	mov	esi, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [esi+ecx]
	add	eax, ecx
	lea	edx, DWORD PTR [edx+eax+1]
	mov	eax, DWORD PTR _nk__dout
	sub	eax, edx
	push	eax
	call	_nk__match
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 5
	mov	DWORD PTR _i$[ebp], ecx
	jmp	$LN12@nk_decompr
$LN3@nk_decompr:

; 11937:         else if (*i == 0x04)  nk__match(nk__dout-(unsigned int)(nk__in3(1)+1), (unsigned int)nk__in2(4)+1u), i += 6;

	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 4
	jne	SHORT $LN12@nk_decompr
	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	imul	ecx, eax, 5
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	lea	edx, DWORD PTR [edx+ecx+1]
	push	edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 16					; 00000010H
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	shl	eax, 8
	mov	ecx, 1
	imul	ecx, ecx, 3
	mov	esi, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [esi+ecx]
	add	eax, ecx
	lea	edx, DWORD PTR [edx+eax+1]
	mov	eax, DWORD PTR _nk__dout
	sub	eax, edx
	push	eax
	call	_nk__match
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 6
	mov	DWORD PTR _i$[ebp], ecx
$LN12@nk_decompr:

; 11938:     }
; 11939:     return i;

	mov	eax, DWORD PTR _i$[ebp]

; 11940: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_decompress_token ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk__lit
_TEXT	SEGMENT
_data$ = 8						; size = 4
_length$ = 12						; size = 4
_nk__lit PROC						; COMDAT

; 11912: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11913:     NK_ASSERT (nk__dout + length <= nk__barrier);

	mov	eax, DWORD PTR _nk__dout
	add	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _nk__barrier
	jbe	SHORT $LN5@nk__lit
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk__lit@@9@9@ddf8d5d8
	add	ecx, 1
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EC@MLCFIANA@?$AAn?$AAk?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAn?$AAk?$AA_?$AA_?$AAb?$AAa?$AAr?$AAr?$AAi?$AAe?$AAr@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk__lit:

; 11914:     if (nk__dout + length > nk__barrier) { nk__dout += length; return; }

	mov	eax, DWORD PTR _nk__dout
	add	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _nk__barrier
	jbe	SHORT $LN2@nk__lit
	mov	eax, DWORD PTR _nk__dout
	add	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _nk__dout, eax
	jmp	SHORT $LN3@nk__lit
$LN2@nk__lit:

; 11915:     if (data < nk__barrier2) { nk__dout = nk__barrier+1; return; }

	mov	eax, DWORD PTR _data$[ebp]
	cmp	eax, DWORD PTR _nk__barrier2
	jae	SHORT $LN1@nk__lit
	mov	eax, DWORD PTR _nk__barrier
	add	eax, 1
	mov	DWORD PTR _nk__dout, eax
	jmp	SHORT $LN3@nk__lit
$LN1@nk__lit:

; 11916:     NK_MEMCPY(nk__dout, data, length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nk__dout
	push	edx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 11917:     nk__dout += length;

	mov	eax, DWORD PTR _nk__dout
	add	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _nk__dout, eax
$LN3@nk__lit:

; 11918: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk__lit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk__match
_TEXT	SEGMENT
tv77 = -196						; size = 4
_data$ = 8						; size = 4
_length$ = 12						; size = 4
_nk__match PROC						; COMDAT

; 11902: {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11903:     /* INVERSE of memmove... write each byte before copying the next...*/
; 11904:     NK_ASSERT (nk__dout + length <= nk__barrier);

	mov	eax, DWORD PTR _nk__dout
	add	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _nk__barrier
	jbe	SHORT $LN7@nk__match
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk__match@@9@9@ddf8d5d8
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EC@MLCFIANA@?$AAn?$AAk?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAn?$AAk?$AA_?$AA_?$AAb?$AAa?$AAr?$AAr?$AAi?$AAe?$AAr@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk__match:

; 11905:     if (nk__dout + length > nk__barrier) { nk__dout += length; return; }

	mov	eax, DWORD PTR _nk__dout
	add	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _nk__barrier
	jbe	SHORT $LN4@nk__match
	mov	eax, DWORD PTR _nk__dout
	add	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _nk__dout, eax
	jmp	SHORT $LN5@nk__match
$LN4@nk__match:

; 11906:     if (data < nk__barrier4) { nk__dout = nk__barrier+1; return; }

	mov	eax, DWORD PTR _data$[ebp]
	cmp	eax, DWORD PTR _nk__barrier4
	jae	SHORT $LN2@nk__match
	mov	eax, DWORD PTR _nk__barrier
	add	eax, 1
	mov	DWORD PTR _nk__dout, eax
	jmp	SHORT $LN5@nk__match
$LN2@nk__match:

; 11907:     while (length--) *nk__dout++ = *data++;

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR _length$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _length$[ebp], ecx
	cmp	DWORD PTR tv77[ebp], 0
	je	SHORT $LN5@nk__match
	mov	eax, DWORD PTR _nk__dout
	mov	ecx, DWORD PTR _data$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _nk__dout
	add	eax, 1
	mov	DWORD PTR _nk__dout, eax
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 1
	mov	DWORD PTR _data$[ebp], ecx
	jmp	SHORT $LN2@nk__match
$LN5@nk__match:

; 11908: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk__match ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_decompress_length
_TEXT	SEGMENT
_input$ = 8						; size = 4
_nk_decompress_length PROC				; COMDAT

; 11890: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11891:     return (unsigned int)((input[8] << 24) + (input[9] << 16) + (input[10] << 8) + input[11]);

	mov	eax, 1
	shl	eax, 3
	mov	ecx, DWORD PTR _input$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	shl	eax, 24					; 00000018H
	mov	edx, 1
	imul	ecx, edx, 9
	mov	edx, DWORD PTR _input$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 16					; 00000010H
	add	eax, ecx
	mov	edx, 1
	imul	ecx, edx, 10
	mov	edx, DWORD PTR _input$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 8
	add	eax, ecx
	mov	edx, 1
	imul	ecx, edx, 11
	mov	edx, DWORD PTR _input$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	add	eax, ecx

; 11892: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_decompress_length ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_init
_TEXT	SEGMENT
_baked$ = -28						; size = 24
_font$ = 8						; size = 4
_pixel_height$ = 12					; size = 4
_fallback_codepoint$ = 16				; size = 4
_glyphs$ = 20						; size = 4
_baked_font$ = 24					; size = 4
_atlas$ = 28						; size = 4
_nk_font_init PROC					; COMDAT

; 11714: {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11715:     struct nk_baked_font baked;
; 11716:     NK_ASSERT(font);

	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN5@nk_font_in
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_init@@9@9@ddf8d5d8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_font_in:

; 11717:     NK_ASSERT(glyphs);

	cmp	DWORD PTR _glyphs$[ebp], 0
	jne	SHORT $LN6@nk_font_in
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_init@@9@9@ddf8d5d8
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@NBCNDPNP@?$AAg?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_font_in:

; 11718:     NK_ASSERT(baked_font);

	cmp	DWORD PTR _baked_font$[ebp], 0
	jne	SHORT $LN7@nk_font_in
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_init@@9@9@ddf8d5d8
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BG@PADPEMOB@?$AAb?$AAa?$AAk?$AAe?$AAd?$AA_?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_font_in:

; 11719:     if (!font || !glyphs || !baked_font)

	cmp	DWORD PTR _font$[ebp], 0
	je	SHORT $LN1@nk_font_in
	cmp	DWORD PTR _glyphs$[ebp], 0
	je	SHORT $LN1@nk_font_in
	cmp	DWORD PTR _baked_font$[ebp], 0
	jne	SHORT $LN2@nk_font_in
$LN1@nk_font_in:

; 11720:         return;

	jmp	$LN3@nk_font_in
$LN2@nk_font_in:

; 11721: 
; 11722:     baked = *baked_font;

	mov	eax, DWORD PTR _baked_font$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _baked$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _baked$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _baked$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _baked$[ebp+12], edx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _baked$[ebp+16], ecx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR _baked$[ebp+20], edx

; 11723:     font->fallback = 0;

	mov	eax, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax+56], 0

; 11724:     font->info = baked;

	mov	eax, DWORD PTR _font$[ebp]
	add	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _baked$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _baked$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _baked$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _baked$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _baked$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _baked$[ebp+20]
	mov	DWORD PTR [eax+20], edx

; 11725:     font->scale = (float)pixel_height / (float)font->info.height;

	mov	eax, DWORD PTR _font$[ebp]
	movss	xmm0, DWORD PTR _pixel_height$[ebp]
	divss	xmm0, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _font$[ebp]
	movss	DWORD PTR [ecx+48], xmm0

; 11726:     font->glyphs = &glyphs[baked_font->glyph_offset];

	mov	eax, DWORD PTR _baked_font$[ebp]
	imul	ecx, DWORD PTR [eax+12], 48
	add	ecx, DWORD PTR _glyphs$[ebp]
	mov	edx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [edx+52], ecx

; 11727:     font->texture = atlas;

	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [eax+64], ecx

; 11728:     font->fallback_codepoint = fallback_codepoint;

	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR _fallback_codepoint$[ebp]
	mov	DWORD PTR [eax+60], ecx

; 11729:     font->fallback = nk_font_find_glyph(font, fallback_codepoint);

	mov	eax, DWORD PTR _fallback_codepoint$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	push	ecx
	call	_nk_font_find_glyph
	add	esp, 8
	mov	edx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [edx+56], eax

; 11730: 
; 11731:     font->handle.height = font->info.height * font->scale;

	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR _font$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _font$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 11732:     font->handle.width = nk_font_text_width;

	mov	eax, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax+12], OFFSET _nk_font_text_width

; 11733:     font->handle.userdata.ptr = font;

	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 11734: #ifdef NK_INCLUDE_VERTEX_BUFFER_OUTPUT
; 11735:     font->handle.query = nk_font_query_font_glyph;

	mov	eax, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _nk_font_query_font_glyph

; 11736:     font->handle.texture = font->texture;

	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN3@nk_font_in:

; 11737: #endif
; 11738: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@nk_font_in
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@nk_font_in:
	DD	1
	DD	$LN9@nk_font_in
$LN9@nk_font_in:
	DD	-28					; ffffffe4H
	DD	24					; 00000018H
	DD	$LN8@nk_font_in
$LN8@nk_font_in:
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
_nk_font_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_query_font_glyph
_TEXT	SEGMENT
_font$ = -32						; size = 4
_g$ = -20						; size = 4
_scale$ = -8						; size = 4
_handle$ = 8						; size = 4
_height$ = 12						; size = 4
_glyph$ = 16						; size = 4
_codepoint$ = 20					; size = 4
_next_codepoint$ = 24					; size = 4
_nk_font_query_font_glyph PROC				; COMDAT

; 11659: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11660:     float scale;
; 11661:     const struct nk_font_glyph *g;
; 11662:     struct nk_font *font;
; 11663: 
; 11664:     NK_ASSERT(glyph);

	cmp	DWORD PTR _glyph$[ebp], 0
	jne	SHORT $LN5@nk_font_qu
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_query_font_glyph@@9@9@ddf8d5d8
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@FFJEAAHP@?$AAg?$AAl?$AAy?$AAp?$AAh?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_font_qu:

; 11665:     NK_UNUSED(next_codepoint);
; 11666: 
; 11667:     font = (struct nk_font*)handle.ptr;

	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _font$[ebp], eax

; 11668:     NK_ASSERT(font);

	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN6@nk_font_qu
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_query_font_glyph@@9@9@ddf8d5d8
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_font_qu:

; 11669:     NK_ASSERT(font->glyphs);

	mov	eax, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN7@nk_font_qu
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_query_font_glyph@@9@9@ddf8d5d8
	add	ecx, 10					; 0000000aH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@JHIPEEHJ@?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAg?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_font_qu:

; 11670:     if (!font || !glyph)

	cmp	DWORD PTR _font$[ebp], 0
	je	SHORT $LN1@nk_font_qu
	cmp	DWORD PTR _glyph$[ebp], 0
	jne	SHORT $LN2@nk_font_qu
$LN1@nk_font_qu:

; 11671:         return;

	jmp	$LN3@nk_font_qu
$LN2@nk_font_qu:

; 11672: 
; 11673:     scale = height/font->info.height;

	mov	eax, DWORD PTR _font$[ebp]
	movss	xmm0, DWORD PTR _height$[ebp]
	divss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR _scale$[ebp], xmm0

; 11674:     g = nk_font_find_glyph(font, codepoint);

	mov	eax, DWORD PTR _codepoint$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	push	ecx
	call	_nk_font_find_glyph
	add	esp, 8
	mov	DWORD PTR _g$[ebp], eax

; 11675:     glyph->width = (g->x1 - g->x0) * scale;

	mov	eax, DWORD PTR _g$[ebp]
	mov	ecx, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	subss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, DWORD PTR _glyph$[ebp]
	movss	DWORD PTR [edx+24], xmm0

; 11676:     glyph->height = (g->y1 - g->y0) * scale;

	mov	eax, DWORD PTR _g$[ebp]
	mov	ecx, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	subss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, DWORD PTR _glyph$[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 11677:     glyph->offset = nk_vec2(g->x0 * scale, g->y0 * scale);

	mov	eax, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx

; 11678:     glyph->xadvance = (g->xadvance * scale);

	mov	eax, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR _glyph$[ebp]
	movss	DWORD PTR [ecx+32], xmm0

; 11679:     glyph->uv[0] = nk_vec2(g->u0, g->v0);

	mov	eax, DWORD PTR _g$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _g$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	imul	ecx, ecx, 0
	mov	esi, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx

; 11680:     glyph->uv[1] = nk_vec2(g->u1, g->v1);

	mov	eax, DWORD PTR _g$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+44]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _g$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+40]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	shl	ecx, 0
	mov	esi, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx
$LN3@nk_font_qu:

; 11681: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_query_font_glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_text_width
_TEXT	SEGMENT
_g$1 = -80						; size = 4
_font$ = -68						; size = 4
_scale$ = -56						; size = 4
_glyph_len$ = -44					; size = 4
_text_width$ = -32					; size = 4
_text_len$ = -20					; size = 4
_unicode$ = -8						; size = 4
_handle$ = 8						; size = 4
_height$ = 12						; size = 4
_text$ = 16						; size = 4
_len$ = 20						; size = 4
_nk_font_text_width PROC				; COMDAT

; 11624: {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11625:     nk_rune unicode;
; 11626:     int text_len  = 0;

	mov	DWORD PTR _text_len$[ebp], 0

; 11627:     float text_width = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _text_width$[ebp], xmm0

; 11628:     int glyph_len = 0;

	mov	DWORD PTR _glyph_len$[ebp], 0

; 11629:     float scale = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _scale$[ebp], xmm0

; 11630: 
; 11631:     struct nk_font *font = (struct nk_font*)handle.ptr;

	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _font$[ebp], eax

; 11632:     NK_ASSERT(font);

	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN9@nk_font_te
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_text_width@@9@9@ddf8d5d8
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_font_te:

; 11633:     NK_ASSERT(font->glyphs);

	mov	eax, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN10@nk_font_te
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_text_width@@9@9@ddf8d5d8
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@JHIPEEHJ@?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAg?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_font_te:

; 11634:     if (!font || !text || !len)

	cmp	DWORD PTR _font$[ebp], 0
	je	SHORT $LN5@nk_font_te
	cmp	DWORD PTR _text$[ebp], 0
	je	SHORT $LN5@nk_font_te
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN6@nk_font_te
$LN5@nk_font_te:

; 11635:         return 0;

	fldz
	jmp	$LN7@nk_font_te
$LN6@nk_font_te:

; 11636: 
; 11637:     scale = height/font->info.height;

	mov	eax, DWORD PTR _font$[ebp]
	movss	xmm0, DWORD PTR _height$[ebp]
	divss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR _scale$[ebp], xmm0

; 11638:     glyph_len = text_len = nk_utf_decode(text, &unicode, (int)len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _text_len$[ebp], eax
	mov	eax, DWORD PTR _text_len$[ebp]
	mov	DWORD PTR _glyph_len$[ebp], eax

; 11639:     if (!glyph_len) return 0;

	cmp	DWORD PTR _glyph_len$[ebp], 0
	jne	SHORT $LN4@nk_font_te
	fldz
	jmp	SHORT $LN7@nk_font_te
$LN4@nk_font_te:

; 11640:     while (text_len <= (int)len && glyph_len) {

	mov	eax, DWORD PTR _text_len$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jg	SHORT $LN2@nk_font_te
	cmp	DWORD PTR _glyph_len$[ebp], 0
	je	SHORT $LN2@nk_font_te

; 11641:         const struct nk_font_glyph *g;
; 11642:         if (unicode == NK_UTF_INVALID) break;

	cmp	DWORD PTR _unicode$[ebp], 65533		; 0000fffdH
	jne	SHORT $LN1@nk_font_te
	jmp	SHORT $LN2@nk_font_te
$LN1@nk_font_te:

; 11643: 
; 11644:         /* query currently drawn glyph information */
; 11645:         g = nk_font_find_glyph(font, unicode);

	mov	eax, DWORD PTR _unicode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	push	ecx
	call	_nk_font_find_glyph
	add	esp, 8
	mov	DWORD PTR _g$1[ebp], eax

; 11646:         text_width += g->xadvance * scale;

	mov	eax, DWORD PTR _g$1[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	addss	xmm0, DWORD PTR _text_width$[ebp]
	movss	DWORD PTR _text_width$[ebp], xmm0

; 11647: 
; 11648:         /* offset next glyph */
; 11649:         glyph_len = nk_utf_decode(text + text_len, &unicode, (int)len - text_len);

	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR _text_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	add	edx, DWORD PTR _text_len$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax

; 11650:         text_len += glyph_len;

	mov	eax, DWORD PTR _text_len$[ebp]
	add	eax, DWORD PTR _glyph_len$[ebp]
	mov	DWORD PTR _text_len$[ebp], eax

; 11651:     }

	jmp	SHORT $LN4@nk_font_te
$LN2@nk_font_te:

; 11652:     return text_width;

	fld	DWORD PTR _text_width$[ebp]
$LN7@nk_font_te:

; 11653: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@nk_font_te
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@nk_font_te:
	DD	1
	DD	$LN12@nk_font_te
$LN12@nk_font_te:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN11@nk_font_te
$LN11@nk_font_te:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_nk_font_text_width ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_bake_convert
_TEXT	SEGMENT
_src$ = -32						; size = 4
_dst$ = -20						; size = 4
_n$ = -8						; size = 4
_out_memory$ = 8					; size = 4
_img_width$ = 12					; size = 4
_img_height$ = 16					; size = 4
_in_memory$ = 20					; size = 4
_nk_font_bake_convert PROC				; COMDAT

; 11600: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11601:     int n = 0;

	mov	DWORD PTR _n$[ebp], 0

; 11602:     nk_rune *dst;
; 11603:     const nk_byte *src;
; 11604: 
; 11605:     NK_ASSERT(out_memory);

	cmp	DWORD PTR _out_memory$[ebp], 0
	jne	SHORT $LN8@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake_convert@@9@9@ddf8d5d8
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BG@FPHPBKAN@?$AAo?$AAu?$AAt?$AA_?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_font_ba:

; 11606:     NK_ASSERT(in_memory);

	cmp	DWORD PTR _in_memory$[ebp], 0
	jne	SHORT $LN9@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake_convert@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BE@GJBOJGHN@?$AAi?$AAn?$AA_?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_font_ba:

; 11607:     NK_ASSERT(img_width);

	cmp	DWORD PTR _img_width$[ebp], 0
	jne	SHORT $LN10@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake_convert@@9@9@ddf8d5d8
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BE@MBHFANAC@?$AAi?$AAm?$AAg?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_font_ba:

; 11608:     NK_ASSERT(img_height);

	cmp	DWORD PTR _img_height$[ebp], 0
	jne	SHORT $LN11@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake_convert@@9@9@ddf8d5d8
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BG@JKDMJAOC@?$AAi?$AAm?$AAg?$AA_?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_font_ba:

; 11609:     if (!out_memory || !in_memory || !img_height || !img_width) return;

	cmp	DWORD PTR _out_memory$[ebp], 0
	je	SHORT $LN4@nk_font_ba
	cmp	DWORD PTR _in_memory$[ebp], 0
	je	SHORT $LN4@nk_font_ba
	cmp	DWORD PTR _img_height$[ebp], 0
	je	SHORT $LN4@nk_font_ba
	cmp	DWORD PTR _img_width$[ebp], 0
	jne	SHORT $LN5@nk_font_ba
$LN4@nk_font_ba:
	jmp	SHORT $LN6@nk_font_ba
$LN5@nk_font_ba:

; 11610: 
; 11611:     dst = (nk_rune*)out_memory;

	mov	eax, DWORD PTR _out_memory$[ebp]
	mov	DWORD PTR _dst$[ebp], eax

; 11612:     src = (const nk_byte*)in_memory;

	mov	eax, DWORD PTR _in_memory$[ebp]
	mov	DWORD PTR _src$[ebp], eax

; 11613:     for (n = (int)(img_width * img_height); n > 0; n--)

	mov	eax, DWORD PTR _img_width$[ebp]
	imul	eax, DWORD PTR _img_height$[ebp]
	mov	DWORD PTR _n$[ebp], eax
	jmp	SHORT $LN3@nk_font_ba
$LN2@nk_font_ba:
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN3@nk_font_ba:
	cmp	DWORD PTR _n$[ebp], 0
	jle	SHORT $LN6@nk_font_ba

; 11614:         *dst++ = ((nk_rune)(*src++) << 24) | 0x00FFFFFF;

	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	or	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _dst$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 4
	mov	DWORD PTR _dst$[ebp], eax
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 1
	mov	DWORD PTR _src$[ebp], ecx
	jmp	SHORT $LN2@nk_font_ba
$LN6@nk_font_ba:

; 11615: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_bake_convert ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_bake_custom_data
_TEXT	SEGMENT
tv153 = -268						; size = 4
tv144 = -268						; size = 4
_off1$1 = -68						; size = 4
_off0$2 = -56						; size = 4
_n$ = -44						; size = 4
_x$ = -32						; size = 4
_y$ = -20						; size = 4
_pixels$ = -8						; size = 4
_img_memory$ = 8					; size = 4
_img_width$ = 12					; size = 4
_img_height$ = 16					; size = 4
_img_dst$ = 20						; size = 8
_texture_data_mask$ = 28				; size = 4
_tex_width$ = 32					; size = 4
_tex_height$ = 36					; size = 4
_white$ = 40						; size = 1
_black$ = 44						; size = 1
_nk_font_bake_custom_data PROC				; COMDAT

; 11572: {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11573:     nk_byte *pixels;
; 11574:     int y = 0;

	mov	DWORD PTR _y$[ebp], 0

; 11575:     int x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 11576:     int n = 0;

	mov	DWORD PTR _n$[ebp], 0

; 11577: 
; 11578:     NK_ASSERT(img_memory);

	cmp	DWORD PTR _img_memory$[ebp], 0
	jne	SHORT $LN11@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake_custom_data@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BG@JELGLMGA@?$AAi?$AAm?$AAg?$AA_?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_font_ba:

; 11579:     NK_ASSERT(img_width);

	cmp	DWORD PTR _img_width$[ebp], 0
	jne	SHORT $LN12@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake_custom_data@@9@9@ddf8d5d8
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BE@MBHFANAC@?$AAi?$AAm?$AAg?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_font_ba:

; 11580:     NK_ASSERT(img_height);

	cmp	DWORD PTR _img_height$[ebp], 0
	jne	SHORT $LN13@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake_custom_data@@9@9@ddf8d5d8
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BG@JKDMJAOC@?$AAi?$AAm?$AAg?$AA_?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_font_ba:

; 11581:     NK_ASSERT(texture_data_mask);

	cmp	DWORD PTR _texture_data_mask$[ebp], 0
	jne	SHORT $LN14@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake_custom_data@@9@9@ddf8d5d8
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CE@JMKMBGAG@?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA_?$AAd?$AAa?$AAt?$AAa?$AA_?$AAm?$AAa?$AAs?$AAk?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_font_ba:

; 11582:     NK_UNUSED(tex_height);
; 11583:     if (!img_memory || !img_width || !img_height || !texture_data_mask)

	cmp	DWORD PTR _img_memory$[ebp], 0
	je	SHORT $LN7@nk_font_ba
	cmp	DWORD PTR _img_width$[ebp], 0
	je	SHORT $LN7@nk_font_ba
	cmp	DWORD PTR _img_height$[ebp], 0
	je	SHORT $LN7@nk_font_ba
	cmp	DWORD PTR _texture_data_mask$[ebp], 0
	jne	SHORT $LN8@nk_font_ba
$LN7@nk_font_ba:

; 11584:         return;

	jmp	$LN9@nk_font_ba
$LN8@nk_font_ba:

; 11585: 
; 11586:     pixels = (nk_byte*)img_memory;

	mov	eax, DWORD PTR _img_memory$[ebp]
	mov	DWORD PTR _pixels$[ebp], eax

; 11587:     for (y = 0, n = 0; y < tex_height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN6@nk_font_ba
$LN5@nk_font_ba:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN6@nk_font_ba:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _tex_height$[ebp]
	jge	$LN9@nk_font_ba

; 11588:         for (x = 0; x < tex_width; ++x, ++n) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN3@nk_font_ba
$LN2@nk_font_ba:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN3@nk_font_ba:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _tex_width$[ebp]
	jge	$LN1@nk_font_ba

; 11589:             const int off0 = ((img_dst.x + x) + (img_dst.y + y) * img_width);

	movsx	eax, WORD PTR _img_dst$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	movsx	ecx, WORD PTR _img_dst$[ebp+2]
	add	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR _img_width$[ebp]
	add	eax, ecx
	mov	DWORD PTR _off0$2[ebp], eax

; 11590:             const int off1 = off0 + 1 + tex_width;

	mov	eax, DWORD PTR _tex_width$[ebp]
	mov	ecx, DWORD PTR _off0$2[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _off1$1[ebp], edx

; 11591:             pixels[off0] = (texture_data_mask[n] == white) ? 0xFF : 0x00;

	mov	eax, DWORD PTR _texture_data_mask$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR _white$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN15@nk_font_ba
	mov	DWORD PTR tv144[ebp], 255		; 000000ffH
	jmp	SHORT $LN16@nk_font_ba
$LN15@nk_font_ba:
	mov	DWORD PTR tv144[ebp], 0
$LN16@nk_font_ba:
	mov	eax, DWORD PTR _pixels$[ebp]
	add	eax, DWORD PTR _off0$2[ebp]
	mov	cl, BYTE PTR tv144[ebp]
	mov	BYTE PTR [eax], cl

; 11592:             pixels[off1] = (texture_data_mask[n] == black) ? 0xFF : 0x00;

	mov	eax, DWORD PTR _texture_data_mask$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR _black$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN17@nk_font_ba
	mov	DWORD PTR tv153[ebp], 255		; 000000ffH
	jmp	SHORT $LN18@nk_font_ba
$LN17@nk_font_ba:
	mov	DWORD PTR tv153[ebp], 0
$LN18@nk_font_ba:
	mov	eax, DWORD PTR _pixels$[ebp]
	add	eax, DWORD PTR _off1$1[ebp]
	mov	cl, BYTE PTR tv153[ebp]
	mov	BYTE PTR [eax], cl

; 11593:         }

	jmp	$LN2@nk_font_ba
$LN1@nk_font_ba:

; 11594:     }

	jmp	$LN5@nk_font_ba
$LN9@nk_font_ba:

; 11595: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_bake_custom_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_bake
_TEXT	SEGMENT
_pc$1 = -292						; size = 4
_glyph$2 = -280						; size = 4
_q$3 = -268						; size = 32
_dummy_y$4 = -228					; size = 4
_dummy_x$5 = -216					; size = 4
_codepoint$6 = -204					; size = 4
_range$7 = -192						; size = 4
_unscaled_line_gap$8 = -180				; size = 4
_unscaled_descent$9 = -168				; size = 4
_unscaled_ascent$10 = -156				; size = 4
_font_scale$11 = -144					; size = 4
_dst_font$12 = -132					; size = 4
_tmp$13 = -120						; size = 4
_cfg$14 = -108						; size = 4
_glyph_count$15 = -96					; size = 4
_char_idx$16 = -84					; size = 4
_i$17 = -72						; size = 4
_tmp$18 = -60						; size = 4
_cfg$19 = -48						; size = 4
_config_iter$ = -36					; size = 4
_glyph_n$ = -24						; size = 4
_input_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_baker$ = 8						; size = 4
_image_memory$ = 12					; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_glyphs$ = 24						; size = 4
_glyphs_count$ = 28					; size = 4
_config_list$ = 32					; size = 4
_font_count$ = 36					; size = 4
_nk_font_bake PROC					; COMDAT

; 11462: {

	push	ebp
	mov	ebp, esp
	sub	esp, 488				; 000001e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-488]
	mov	ecx, 122				; 0000007aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 11463:     int input_i = 0;

	mov	DWORD PTR _input_i$[ebp], 0

; 11464:     nk_rune glyph_n = 0;

	mov	DWORD PTR _glyph_n$[ebp], 0

; 11465:     const struct nk_font_config *config_iter;
; 11466: 
; 11467:     NK_ASSERT(image_memory);

	cmp	DWORD PTR _image_memory$[ebp], 0
	jne	SHORT $LN22@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake@@9@9@ddf8d5d8
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@GDOOMBLP@?$AAi?$AAm?$AAa?$AAg?$AAe?$AA_?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN22@nk_font_ba:

; 11468:     NK_ASSERT(width);

	cmp	DWORD PTR _width$[ebp], 0
	jne	SHORT $LN23@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@MDIKEACL@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN23@nk_font_ba:

; 11469:     NK_ASSERT(height);

	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN24@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake@@9@9@ddf8d5d8
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@NGBHDANL@?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN24@nk_font_ba:

; 11470:     NK_ASSERT(config_list);

	cmp	DWORD PTR _config_list$[ebp], 0
	jne	SHORT $LN25@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake@@9@9@ddf8d5d8
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BI@LDHLIKNE@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN25@nk_font_ba:

; 11471:     NK_ASSERT(baker);

	cmp	DWORD PTR _baker$[ebp], 0
	jne	SHORT $LN26@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake@@9@9@ddf8d5d8
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@GKOIOOFK@?$AAb?$AAa?$AAk?$AAe?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN26@nk_font_ba:

; 11472:     NK_ASSERT(font_count);

	cmp	DWORD PTR _font_count$[ebp], 0
	jne	SHORT $LN27@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake@@9@9@ddf8d5d8
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BG@PNHAFIJL@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN27@nk_font_ba:

; 11473:     NK_ASSERT(glyphs_count);

	cmp	DWORD PTR _glyphs_count$[ebp], 0
	jne	SHORT $LN28@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake@@9@9@ddf8d5d8
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@BAMJJACG@?$AAg?$AAl?$AAy?$AAp?$AAh?$AAs?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN28@nk_font_ba:

; 11474:     if (!image_memory || !width || !height || !config_list ||
; 11475:         !font_count || !glyphs || !glyphs_count)

	cmp	DWORD PTR _image_memory$[ebp], 0
	je	SHORT $LN18@nk_font_ba
	cmp	DWORD PTR _width$[ebp], 0
	je	SHORT $LN18@nk_font_ba
	cmp	DWORD PTR _height$[ebp], 0
	je	SHORT $LN18@nk_font_ba
	cmp	DWORD PTR _config_list$[ebp], 0
	je	SHORT $LN18@nk_font_ba
	cmp	DWORD PTR _font_count$[ebp], 0
	je	SHORT $LN18@nk_font_ba
	cmp	DWORD PTR _glyphs$[ebp], 0
	je	SHORT $LN18@nk_font_ba
	cmp	DWORD PTR _glyphs_count$[ebp], 0
	jne	SHORT $LN19@nk_font_ba
$LN18@nk_font_ba:

; 11476:         return;

	jmp	$LN12@nk_font_ba
$LN19@nk_font_ba:

; 11477: 
; 11478:     /* second font pass: render glyphs */
; 11479:     nk_zero(image_memory, (nk_size)((nk_size)width * (nk_size)height));

	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _image_memory$[ebp]
	push	ecx
	call	_nk_zero
	add	esp, 8

; 11480:     baker->spc.pixels = (unsigned char*)image_memory;

	mov	eax, DWORD PTR _baker$[ebp]
	mov	ecx, DWORD PTR _image_memory$[ebp]
	mov	DWORD PTR [eax+40], ecx

; 11481:     baker->spc.height = (int)height;

	mov	eax, DWORD PTR _baker$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 11482:     for (input_i = 0, config_iter = config_list; input_i < font_count && config_iter;
; 11483:         ++input_i, config_iter = config_iter->next)

	mov	DWORD PTR _input_i$[ebp], 0
	mov	eax, DWORD PTR _config_list$[ebp]
	mov	DWORD PTR _config_iter$[ebp], eax
	jmp	SHORT $LN17@nk_font_ba
$LN16@nk_font_ba:
	mov	eax, DWORD PTR _input_i$[ebp]
	add	eax, 1
	mov	DWORD PTR _input_i$[ebp], eax
	mov	ecx, DWORD PTR _config_iter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _config_iter$[ebp], edx
$LN17@nk_font_ba:
	mov	eax, DWORD PTR _input_i$[ebp]
	cmp	eax, DWORD PTR _font_count$[ebp]
	jge	SHORT $LN15@nk_font_ba
	cmp	DWORD PTR _config_iter$[ebp], 0
	je	SHORT $LN15@nk_font_ba

; 11484:     {
; 11485:         const struct nk_font_config *cfg = config_iter;

	mov	eax, DWORD PTR _config_iter$[ebp]
	mov	DWORD PTR _cfg$19[ebp], eax

; 11486:         struct nk_font_bake_data *tmp = &baker->build[input_i];

	imul	eax, DWORD PTR _input_i$[ebp], 56
	mov	ecx, DWORD PTR _baker$[ebp]
	add	eax, DWORD PTR [ecx+48]
	mov	DWORD PTR _tmp$18[ebp], eax

; 11487:         nk_tt_PackSetOversampling(&baker->spc, cfg->oversample_h, cfg->oversample_v);

	mov	eax, DWORD PTR _cfg$19[ebp]
	movzx	ecx, BYTE PTR [eax+15]
	push	ecx
	mov	edx, DWORD PTR _cfg$19[ebp]
	movzx	eax, BYTE PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _baker$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_nk_tt_PackSetOversampling
	add	esp, 12					; 0000000cH

; 11488:         nk_tt_PackFontRangesRenderIntoRects(&baker->spc, &tmp->info, tmp->ranges,
; 11489:             (int)tmp->range_count, tmp->rects, &baker->alloc);

	mov	eax, DWORD PTR _baker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tmp$18[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _tmp$18[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _tmp$18[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _tmp$18[ebp]
	push	ecx
	mov	edx, DWORD PTR _baker$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_nk_tt_PackFontRangesRenderIntoRects
	add	esp, 24					; 00000018H

; 11490:     }

	jmp	SHORT $LN16@nk_font_ba
$LN15@nk_font_ba:

; 11491:     nk_tt_PackEnd(&baker->spc, &baker->alloc);

	mov	eax, DWORD PTR _baker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _baker$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_nk_tt_PackEnd
	add	esp, 8

; 11492: 
; 11493:     /* third pass: setup font and glyphs */
; 11494:     for (input_i = 0, config_iter = config_list; input_i < font_count && config_iter;
; 11495:         ++input_i, config_iter = config_iter->next)

	mov	DWORD PTR _input_i$[ebp], 0
	mov	eax, DWORD PTR _config_list$[ebp]
	mov	DWORD PTR _config_iter$[ebp], eax
	jmp	SHORT $LN14@nk_font_ba
$LN13@nk_font_ba:
	mov	eax, DWORD PTR _input_i$[ebp]
	add	eax, 1
	mov	DWORD PTR _input_i$[ebp], eax
	mov	ecx, DWORD PTR _config_iter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _config_iter$[ebp], edx
$LN14@nk_font_ba:
	mov	eax, DWORD PTR _input_i$[ebp]
	cmp	eax, DWORD PTR _font_count$[ebp]
	jge	$LN12@nk_font_ba
	cmp	DWORD PTR _config_iter$[ebp], 0
	je	$LN12@nk_font_ba

; 11496:     {
; 11497:         nk_size i = 0;

	mov	DWORD PTR _i$17[ebp], 0

; 11498:         int char_idx = 0;

	mov	DWORD PTR _char_idx$16[ebp], 0

; 11499:         nk_rune glyph_count = 0;

	mov	DWORD PTR _glyph_count$15[ebp], 0

; 11500:         const struct nk_font_config *cfg = config_iter;

	mov	eax, DWORD PTR _config_iter$[ebp]
	mov	DWORD PTR _cfg$14[ebp], eax

; 11501:         struct nk_font_bake_data *tmp = &baker->build[input_i];

	imul	eax, DWORD PTR _input_i$[ebp], 56
	mov	ecx, DWORD PTR _baker$[ebp]
	add	eax, DWORD PTR [ecx+48]
	mov	DWORD PTR _tmp$13[ebp], eax

; 11502:         struct nk_baked_font *dst_font = cfg->font;

	mov	eax, DWORD PTR _cfg$14[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _dst_font$12[ebp], ecx

; 11503: 
; 11504:         float font_scale = nk_tt_ScaleForPixelHeight(&tmp->info, cfg->size);

	mov	eax, DWORD PTR _cfg$14[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _tmp$13[ebp]
	push	ecx
	call	_nk_tt_ScaleForPixelHeight
	add	esp, 8
	fstp	DWORD PTR _font_scale$11[ebp]

; 11505:         int unscaled_ascent, unscaled_descent, unscaled_line_gap;
; 11506:         nk_tt_GetFontVMetrics(&tmp->info, &unscaled_ascent, &unscaled_descent,
; 11507:                                 &unscaled_line_gap);

	lea	eax, DWORD PTR _unscaled_line_gap$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _unscaled_descent$9[ebp]
	push	ecx
	lea	edx, DWORD PTR _unscaled_ascent$10[ebp]
	push	edx
	mov	eax, DWORD PTR _tmp$13[ebp]
	push	eax
	call	_nk_tt_GetFontVMetrics
	add	esp, 16					; 00000010H

; 11508: 
; 11509:         /* fill baked font */
; 11510:         if (!cfg->merge_mode) {

	mov	eax, DWORD PTR _cfg$14[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN11@nk_font_ba

; 11511:             dst_font->ranges = cfg->range;

	mov	eax, DWORD PTR _dst_font$12[ebp]
	mov	ecx, DWORD PTR _cfg$14[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+20], edx

; 11512:             dst_font->height = cfg->size;

	mov	eax, DWORD PTR _dst_font$12[ebp]
	mov	ecx, DWORD PTR _cfg$14[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax], edx

; 11513:             dst_font->ascent = ((float)unscaled_ascent * font_scale);

	cvtsi2ss xmm0, DWORD PTR _unscaled_ascent$10[ebp]
	mulss	xmm0, DWORD PTR _font_scale$11[ebp]
	mov	eax, DWORD PTR _dst_font$12[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 11514:             dst_font->descent = ((float)unscaled_descent * font_scale);

	cvtsi2ss xmm0, DWORD PTR _unscaled_descent$9[ebp]
	mulss	xmm0, DWORD PTR _font_scale$11[ebp]
	mov	eax, DWORD PTR _dst_font$12[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 11515:             dst_font->glyph_offset = glyph_n;

	mov	eax, DWORD PTR _dst_font$12[ebp]
	mov	ecx, DWORD PTR _glyph_n$[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN11@nk_font_ba:

; 11516:         }
; 11517: 
; 11518:         /* fill own baked font glyph array */
; 11519:         for (i = 0; i < tmp->range_count; ++i)

	mov	DWORD PTR _i$17[ebp], 0
	jmp	SHORT $LN10@nk_font_ba
$LN9@nk_font_ba:
	mov	eax, DWORD PTR _i$17[ebp]
	add	eax, 1
	mov	DWORD PTR _i$17[ebp], eax
$LN10@nk_font_ba:
	mov	eax, DWORD PTR _tmp$13[ebp]
	mov	ecx, DWORD PTR _i$17[ebp]
	cmp	ecx, DWORD PTR [eax+52]
	jae	$LN8@nk_font_ba

; 11520:         {
; 11521:             struct nk_tt_pack_range *range = &tmp->ranges[i];

	imul	eax, DWORD PTR _i$17[ebp], 24
	mov	ecx, DWORD PTR _tmp$13[ebp]
	add	eax, DWORD PTR [ecx+48]
	mov	DWORD PTR _range$7[ebp], eax

; 11522:             for (char_idx = 0; char_idx < range->num_chars; char_idx++)

	mov	DWORD PTR _char_idx$16[ebp], 0
	jmp	SHORT $LN7@nk_font_ba
$LN6@nk_font_ba:
	mov	eax, DWORD PTR _char_idx$16[ebp]
	add	eax, 1
	mov	DWORD PTR _char_idx$16[ebp], eax
$LN7@nk_font_ba:
	mov	eax, DWORD PTR _range$7[ebp]
	mov	ecx, DWORD PTR _char_idx$16[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	$LN5@nk_font_ba

; 11523:             {
; 11524:                 nk_rune codepoint = 0;

	mov	DWORD PTR _codepoint$6[ebp], 0

; 11525:                 float dummy_x = 0, dummy_y = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dummy_x$5[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dummy_y$4[ebp], xmm0

; 11526:                 struct nk_tt_aligned_quad q;
; 11527:                 struct nk_font_glyph *glyph;
; 11528: 
; 11529:                 /* query glyph bounds from stb_truetype */
; 11530:                 const struct nk_tt_packedchar *pc = &range->chardata_for_range[char_idx];

	imul	eax, DWORD PTR _char_idx$16[ebp], 28
	mov	ecx, DWORD PTR _range$7[ebp]
	add	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR _pc$1[ebp], eax

; 11531:                 if (!pc->x0 && !pc->x1 && !pc->y0 && !pc->y1) continue;

	mov	eax, DWORD PTR _pc$1[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN4@nk_font_ba
	mov	eax, DWORD PTR _pc$1[ebp]
	movzx	ecx, WORD PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN4@nk_font_ba
	mov	eax, DWORD PTR _pc$1[ebp]
	movzx	ecx, WORD PTR [eax+2]
	test	ecx, ecx
	jne	SHORT $LN4@nk_font_ba
	mov	eax, DWORD PTR _pc$1[ebp]
	movzx	ecx, WORD PTR [eax+6]
	test	ecx, ecx
	jne	SHORT $LN4@nk_font_ba
	jmp	$LN6@nk_font_ba
$LN4@nk_font_ba:

; 11532:                 codepoint = (nk_rune)(range->first_unicode_codepoint_in_range + char_idx);

	mov	eax, DWORD PTR _range$7[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _char_idx$16[ebp]
	mov	DWORD PTR _codepoint$6[ebp], ecx

; 11533:                 nk_tt_GetPackedQuad(range->chardata_for_range, (int)width,
; 11534:                     (int)height, char_idx, &dummy_x, &dummy_y, &q, 0);

	push	0
	lea	eax, DWORD PTR _q$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _dummy_y$4[ebp]
	push	ecx
	lea	edx, DWORD PTR _dummy_x$5[ebp]
	push	edx
	mov	eax, DWORD PTR _char_idx$16[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _range$7[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_nk_tt_GetPackedQuad
	add	esp, 32					; 00000020H

; 11535: 
; 11536:                 /* fill own glyph type with data */
; 11537:                 glyph = &glyphs[dst_font->glyph_offset + (unsigned int)glyph_count];

	mov	eax, DWORD PTR _dst_font$12[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _glyph_count$15[ebp]
	imul	edx, ecx, 48
	add	edx, DWORD PTR _glyphs$[ebp]
	mov	DWORD PTR _glyph$2[ebp], edx

; 11538:                 glyph->codepoint = codepoint;

	mov	eax, DWORD PTR _glyph$2[ebp]
	mov	ecx, DWORD PTR _codepoint$6[ebp]
	mov	DWORD PTR [eax], ecx

; 11539:                 glyph->x0 = q.x0; glyph->y0 = q.y0;

	mov	eax, DWORD PTR _glyph$2[ebp]
	movss	xmm0, DWORD PTR _q$3[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _glyph$2[ebp]
	movss	xmm0, DWORD PTR _q$3[ebp+4]
	movss	DWORD PTR [eax+12], xmm0

; 11540:                 glyph->x1 = q.x1; glyph->y1 = q.y1;

	mov	eax, DWORD PTR _glyph$2[ebp]
	movss	xmm0, DWORD PTR _q$3[ebp+16]
	movss	DWORD PTR [eax+16], xmm0
	mov	eax, DWORD PTR _glyph$2[ebp]
	movss	xmm0, DWORD PTR _q$3[ebp+20]
	movss	DWORD PTR [eax+20], xmm0

; 11541:                 glyph->y0 += (dst_font->ascent + 0.5f);

	mov	eax, DWORD PTR _dst_font$12[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _glyph$2[ebp]
	addss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _glyph$2[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 11542:                 glyph->y1 += (dst_font->ascent + 0.5f);

	mov	eax, DWORD PTR _dst_font$12[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _glyph$2[ebp]
	addss	xmm0, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _glyph$2[ebp]
	movss	DWORD PTR [edx+20], xmm0

; 11543:                 glyph->w = glyph->x1 - glyph->x0 + 0.5f;

	mov	eax, DWORD PTR _glyph$2[ebp]
	mov	ecx, DWORD PTR _glyph$2[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	subss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _glyph$2[ebp]
	movss	DWORD PTR [edx+24], xmm0

; 11544:                 glyph->h = glyph->y1 - glyph->y0;

	mov	eax, DWORD PTR _glyph$2[ebp]
	mov	ecx, DWORD PTR _glyph$2[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	subss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _glyph$2[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 11545: 
; 11546:                 if (cfg->coord_type == NK_COORD_PIXEL) {

	mov	eax, DWORD PTR _cfg$14[ebp]
	cmp	DWORD PTR [eax+24], 1
	jne	SHORT $LN3@nk_font_ba

; 11547:                     glyph->u0 = q.s0 * (float)width;

	cvtsi2ss xmm0, DWORD PTR _width$[ebp]
	mulss	xmm0, DWORD PTR _q$3[ebp+8]
	mov	eax, DWORD PTR _glyph$2[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 11548:                     glyph->v0 = q.t0 * (float)height;

	cvtsi2ss xmm0, DWORD PTR _height$[ebp]
	mulss	xmm0, DWORD PTR _q$3[ebp+12]
	mov	eax, DWORD PTR _glyph$2[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 11549:                     glyph->u1 = q.s1 * (float)width;

	cvtsi2ss xmm0, DWORD PTR _width$[ebp]
	mulss	xmm0, DWORD PTR _q$3[ebp+24]
	mov	eax, DWORD PTR _glyph$2[ebp]
	movss	DWORD PTR [eax+40], xmm0

; 11550:                     glyph->v1 = q.t1 * (float)height;

	cvtsi2ss xmm0, DWORD PTR _height$[ebp]
	mulss	xmm0, DWORD PTR _q$3[ebp+28]
	mov	eax, DWORD PTR _glyph$2[ebp]
	movss	DWORD PTR [eax+44], xmm0

; 11551:                 } else {

	jmp	SHORT $LN2@nk_font_ba
$LN3@nk_font_ba:

; 11552:                     glyph->u0 = q.s0;

	mov	eax, DWORD PTR _glyph$2[ebp]
	movss	xmm0, DWORD PTR _q$3[ebp+8]
	movss	DWORD PTR [eax+32], xmm0

; 11553:                     glyph->v0 = q.t0;

	mov	eax, DWORD PTR _glyph$2[ebp]
	movss	xmm0, DWORD PTR _q$3[ebp+12]
	movss	DWORD PTR [eax+36], xmm0

; 11554:                     glyph->u1 = q.s1;

	mov	eax, DWORD PTR _glyph$2[ebp]
	movss	xmm0, DWORD PTR _q$3[ebp+24]
	movss	DWORD PTR [eax+40], xmm0

; 11555:                     glyph->v1 = q.t1;

	mov	eax, DWORD PTR _glyph$2[ebp]
	movss	xmm0, DWORD PTR _q$3[ebp+28]
	movss	DWORD PTR [eax+44], xmm0
$LN2@nk_font_ba:

; 11556:                 }
; 11557:                 glyph->xadvance = (pc->xadvance + cfg->spacing.x);

	mov	eax, DWORD PTR _pc$1[ebp]
	mov	ecx, DWORD PTR _cfg$14[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	addss	xmm0, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _glyph$2[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 11558:                 if (cfg->pixel_snap)

	mov	eax, DWORD PTR _cfg$14[ebp]
	movzx	ecx, BYTE PTR [eax+14]
	test	ecx, ecx
	je	SHORT $LN1@nk_font_ba

; 11559:                     glyph->xadvance = (float)(int)(glyph->xadvance + 0.5f);

	mov	eax, DWORD PTR _glyph$2[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si ecx, xmm0
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _glyph$2[ebp]
	movss	DWORD PTR [edx+4], xmm0
$LN1@nk_font_ba:

; 11560:                 glyph_count++;

	mov	eax, DWORD PTR _glyph_count$15[ebp]
	add	eax, 1
	mov	DWORD PTR _glyph_count$15[ebp], eax

; 11561:             }

	jmp	$LN6@nk_font_ba
$LN5@nk_font_ba:

; 11562:         }

	jmp	$LN9@nk_font_ba
$LN8@nk_font_ba:

; 11563:         dst_font->glyph_count = glyph_count;

	mov	eax, DWORD PTR _dst_font$12[ebp]
	mov	ecx, DWORD PTR _glyph_count$15[ebp]
	mov	DWORD PTR [eax+16], ecx

; 11564:         glyph_n += dst_font->glyph_count;

	mov	eax, DWORD PTR _dst_font$12[ebp]
	mov	ecx, DWORD PTR _glyph_n$[ebp]
	add	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _glyph_n$[ebp], ecx

; 11565:     }

	jmp	$LN13@nk_font_ba
$LN12@nk_font_ba:

; 11566: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@nk_font_ba
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 488				; 000001e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN36@nk_font_ba:
	DD	6
	DD	$LN35@nk_font_ba
$LN35@nk_font_ba:
	DD	-156					; ffffff64H
	DD	4
	DD	$LN29@nk_font_ba
	DD	-168					; ffffff58H
	DD	4
	DD	$LN30@nk_font_ba
	DD	-180					; ffffff4cH
	DD	4
	DD	$LN31@nk_font_ba
	DD	-216					; ffffff28H
	DD	4
	DD	$LN32@nk_font_ba
	DD	-228					; ffffff1cH
	DD	4
	DD	$LN33@nk_font_ba
	DD	-268					; fffffef4H
	DD	32					; 00000020H
	DD	$LN34@nk_font_ba
$LN34@nk_font_ba:
	DB	113					; 00000071H
	DB	0
$LN33@nk_font_ba:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	121					; 00000079H
	DB	0
$LN32@nk_font_ba:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	120					; 00000078H
	DB	0
$LN31@nk_font_ba:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	103					; 00000067H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
$LN30@nk_font_ba:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN29@nk_font_ba:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_nk_font_bake ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_bake_pack
_TEXT	SEGMENT
tv363 = -404						; size = 4
tv199 = -404						; size = 4
tv163 = -404						; size = 4
tv159 = -404						; size = 4
_tmp$1 = -204						; size = 4
_cfg$2 = -192						; size = 4
_in_range$3 = -180					; size = 4
_glyph_count$4 = -168					; size = 4
_n$5 = -156						; size = 4
_custom_space$6 = -144					; size = 16
_char_n$7 = -120					; size = 4
_rect_n$8 = -108					; size = 4
_range_n$9 = -96					; size = 4
_input_i$10 = -84					; size = 4
_cfg$11 = -72						; size = 4
_i$ = -60						; size = 4
_range_count$ = -48					; size = 4
_total_range_count$ = -36				; size = 4
_total_glyph_count$ = -24				; size = 4
_config_iter$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_baker$ = 8						; size = 4
_image_memory$ = 12					; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_custom$ = 24						; size = 4
_config_list$ = 28					; size = 4
_count$ = 32						; size = 4
_alloc$ = 36						; size = 4
_nk_font_bake_pack PROC					; COMDAT

; 11350: {

	push	ebp
	mov	ebp, esp
	sub	esp, 404				; 00000194H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-404]
	mov	ecx, 101				; 00000065H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 11351:     NK_STORAGE const nk_size max_height = 1024 * 32;
; 11352:     const struct nk_font_config *config_iter;
; 11353:     int total_glyph_count = 0;

	mov	DWORD PTR _total_glyph_count$[ebp], 0

; 11354:     int total_range_count = 0;

	mov	DWORD PTR _total_range_count$[ebp], 0

; 11355:     int range_count = 0;

	mov	DWORD PTR _range_count$[ebp], 0

; 11356:     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 11357: 
; 11358:     NK_ASSERT(image_memory);

	cmp	DWORD PTR _image_memory$[ebp], 0
	jne	SHORT $LN26@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake_pack@@9@9@ddf8d5d8
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@GDOOMBLP@?$AAi?$AAm?$AAa?$AAg?$AAe?$AA_?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN26@nk_font_ba:

; 11359:     NK_ASSERT(width);

	cmp	DWORD PTR _width$[ebp], 0
	jne	SHORT $LN27@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake_pack@@9@9@ddf8d5d8
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@MDIKEACL@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN27@nk_font_ba:

; 11360:     NK_ASSERT(height);

	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN28@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake_pack@@9@9@ddf8d5d8
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@NGBHDANL@?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN28@nk_font_ba:

; 11361:     NK_ASSERT(config_list);

	cmp	DWORD PTR _config_list$[ebp], 0
	jne	SHORT $LN29@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake_pack@@9@9@ddf8d5d8
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BI@LDHLIKNE@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN29@nk_font_ba:

; 11362:     NK_ASSERT(count);

	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN30@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake_pack@@9@9@ddf8d5d8
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@MJBJBOIA@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN30@nk_font_ba:

; 11363:     NK_ASSERT(alloc);

	cmp	DWORD PTR _alloc$[ebp], 0
	jne	SHORT $LN31@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_bake_pack@@9@9@ddf8d5d8
	add	eax, 13					; 0000000dH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KLHDKNJP@?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN31@nk_font_ba:

; 11364: 
; 11365:     if (!image_memory || !width || !height || !config_list || !count) return nk_false;

	cmp	DWORD PTR _image_memory$[ebp], 0
	je	SHORT $LN22@nk_font_ba
	cmp	DWORD PTR _width$[ebp], 0
	je	SHORT $LN22@nk_font_ba
	cmp	DWORD PTR _height$[ebp], 0
	je	SHORT $LN22@nk_font_ba
	cmp	DWORD PTR _config_list$[ebp], 0
	je	SHORT $LN22@nk_font_ba
	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN23@nk_font_ba
$LN22@nk_font_ba:
	xor	eax, eax
	jmp	$LN24@nk_font_ba
$LN23@nk_font_ba:

; 11366:     for (config_iter = config_list; config_iter; config_iter = config_iter->next) {

	mov	eax, DWORD PTR _config_list$[ebp]
	mov	DWORD PTR _config_iter$[ebp], eax
	jmp	SHORT $LN21@nk_font_ba
$LN20@nk_font_ba:
	mov	eax, DWORD PTR _config_iter$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _config_iter$[ebp], ecx
$LN21@nk_font_ba:
	cmp	DWORD PTR _config_iter$[ebp], 0
	je	SHORT $LN19@nk_font_ba

; 11367:         range_count = nk_range_count(config_iter->range);

	mov	eax, DWORD PTR _config_iter$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_nk_range_count
	add	esp, 4
	mov	DWORD PTR _range_count$[ebp], eax

; 11368:         total_range_count += range_count;

	mov	eax, DWORD PTR _total_range_count$[ebp]
	add	eax, DWORD PTR _range_count$[ebp]
	mov	DWORD PTR _total_range_count$[ebp], eax

; 11369:         total_glyph_count += nk_range_glyph_count(config_iter->range, range_count);

	mov	eax, DWORD PTR _range_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _config_iter$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_nk_range_glyph_count
	add	esp, 8
	add	eax, DWORD PTR _total_glyph_count$[ebp]
	mov	DWORD PTR _total_glyph_count$[ebp], eax

; 11370:     }

	jmp	SHORT $LN20@nk_font_ba
$LN19@nk_font_ba:

; 11371: 
; 11372:     /* setup font baker from temporary memory */
; 11373:     for (config_iter = config_list; config_iter; config_iter = config_iter->next) {

	mov	eax, DWORD PTR _config_list$[ebp]
	mov	DWORD PTR _config_iter$[ebp], eax
	jmp	SHORT $LN18@nk_font_ba
$LN17@nk_font_ba:
	mov	eax, DWORD PTR _config_iter$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _config_iter$[ebp], ecx
$LN18@nk_font_ba:
	cmp	DWORD PTR _config_iter$[ebp], 0
	je	SHORT $LN16@nk_font_ba

; 11374:         const struct nk_font_config *cfg = config_iter;

	mov	eax, DWORD PTR _config_iter$[ebp]
	mov	DWORD PTR _cfg$11[ebp], eax

; 11375:         if (!nk_tt_InitFont(&baker->build[i++].info, (const unsigned char*)cfg->ttf_blob, 0))

	imul	eax, DWORD PTR _i$[ebp], 56
	mov	ecx, DWORD PTR _baker$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	add	edx, eax
	mov	DWORD PTR tv159[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	push	0
	mov	ecx, DWORD PTR _cfg$11[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR tv159[ebp]
	push	eax
	call	_nk_tt_InitFont
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN15@nk_font_ba

; 11376:             return nk_false;

	xor	eax, eax
	jmp	$LN24@nk_font_ba
$LN15@nk_font_ba:

; 11377:     }

	jmp	SHORT $LN17@nk_font_ba
$LN16@nk_font_ba:

; 11378: 
; 11379:     *height = 0;

	mov	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR [eax], 0

; 11380:     *width = (total_glyph_count > 1000) ? 1024 : 512;

	cmp	DWORD PTR _total_glyph_count$[ebp], 1000 ; 000003e8H
	jle	SHORT $LN32@nk_font_ba
	mov	DWORD PTR tv163[ebp], 1024		; 00000400H
	jmp	SHORT $LN33@nk_font_ba
$LN32@nk_font_ba:
	mov	DWORD PTR tv163[ebp], 512		; 00000200H
$LN33@nk_font_ba:
	mov	eax, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR tv163[ebp]
	mov	DWORD PTR [eax], ecx

; 11381:     nk_tt_PackBegin(&baker->spc, 0, (int)*width, (int)max_height, 0, 1, alloc);

	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR ?max_height@?1??nk_font_bake_pack@@9@9
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	0
	mov	ecx, DWORD PTR _baker$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_nk_tt_PackBegin
	add	esp, 28					; 0000001cH

; 11382:     {
; 11383:         int input_i = 0;

	mov	DWORD PTR _input_i$10[ebp], 0

; 11384:         int range_n = 0;

	mov	DWORD PTR _range_n$9[ebp], 0

; 11385:         int rect_n = 0;

	mov	DWORD PTR _rect_n$8[ebp], 0

; 11386:         int char_n = 0;

	mov	DWORD PTR _char_n$7[ebp], 0

; 11387: 
; 11388:         if (custom) {

	cmp	DWORD PTR _custom$[ebp], 0
	je	$LN14@nk_font_ba

; 11389:             /* pack custom user data first so it will be in the upper left corner*/
; 11390:             struct nk_rp_rect custom_space;
; 11391:             nk_zero(&custom_space, sizeof(custom_space));

	push	16					; 00000010H
	lea	eax, DWORD PTR _custom_space$6[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 11392:             custom_space.w = (nk_rp_coord)((custom->w * 2) + 1);

	mov	eax, DWORD PTR _custom$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+ecx+1]
	mov	WORD PTR _custom_space$6[ebp+4], dx

; 11393:             custom_space.h = (nk_rp_coord)(custom->h + 1);

	mov	eax, DWORD PTR _custom$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	add	ecx, 1
	mov	WORD PTR _custom_space$6[ebp+6], cx

; 11394: 
; 11395:             nk_tt_PackSetOversampling(&baker->spc, 1, 1);

	push	1
	push	1
	mov	eax, DWORD PTR _baker$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_tt_PackSetOversampling
	add	esp, 12					; 0000000cH

; 11396:             nk_rp_pack_rects((struct nk_rp_context*)baker->spc.pack_info, &custom_space, 1);

	push	1
	lea	eax, DWORD PTR _custom_space$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _baker$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_nk_rp_pack_rects
	add	esp, 12					; 0000000cH

; 11397:             *height = NK_MAX(*height, (int)(custom_space.y + custom_space.h));

	movzx	eax, WORD PTR _custom_space$6[ebp+10]
	movzx	ecx, WORD PTR _custom_space$6[ebp+6]
	add	eax, ecx
	mov	edx, DWORD PTR _height$[ebp]
	cmp	DWORD PTR [edx], eax
	jge	SHORT $LN34@nk_font_ba
	movzx	eax, WORD PTR _custom_space$6[ebp+10]
	movzx	ecx, WORD PTR _custom_space$6[ebp+6]
	add	eax, ecx
	mov	DWORD PTR tv199[ebp], eax
	jmp	SHORT $LN35@nk_font_ba
$LN34@nk_font_ba:
	mov	edx, DWORD PTR _height$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv199[ebp], eax
$LN35@nk_font_ba:
	mov	ecx, DWORD PTR _height$[ebp]
	mov	edx, DWORD PTR tv199[ebp]
	mov	DWORD PTR [ecx], edx

; 11398: 
; 11399:             custom->x = (short)custom_space.x;

	mov	eax, DWORD PTR _custom$[ebp]
	mov	cx, WORD PTR _custom_space$6[ebp+8]
	mov	WORD PTR [eax], cx

; 11400:             custom->y = (short)custom_space.y;

	mov	eax, DWORD PTR _custom$[ebp]
	mov	cx, WORD PTR _custom_space$6[ebp+10]
	mov	WORD PTR [eax+2], cx

; 11401:             custom->w = (short)custom_space.w;

	mov	eax, DWORD PTR _custom$[ebp]
	mov	cx, WORD PTR _custom_space$6[ebp+4]
	mov	WORD PTR [eax+4], cx

; 11402:             custom->h = (short)custom_space.h;

	mov	eax, DWORD PTR _custom$[ebp]
	mov	cx, WORD PTR _custom_space$6[ebp+6]
	mov	WORD PTR [eax+6], cx
$LN14@nk_font_ba:

; 11403:         }
; 11404: 
; 11405:         /* first font pass: pack all glyphs */
; 11406:         for (input_i = 0, config_iter = config_list; input_i < count && config_iter;
; 11407:             input_i++, config_iter = config_iter->next)

	mov	DWORD PTR _input_i$10[ebp], 0
	mov	eax, DWORD PTR _config_list$[ebp]
	mov	DWORD PTR _config_iter$[ebp], eax
	jmp	SHORT $LN13@nk_font_ba
$LN12@nk_font_ba:
	mov	eax, DWORD PTR _input_i$10[ebp]
	add	eax, 1
	mov	DWORD PTR _input_i$10[ebp], eax
	mov	ecx, DWORD PTR _config_iter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _config_iter$[ebp], edx
$LN13@nk_font_ba:
	mov	eax, DWORD PTR _input_i$10[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	$LN11@nk_font_ba
	cmp	DWORD PTR _config_iter$[ebp], 0
	je	$LN11@nk_font_ba

; 11408:         {
; 11409:             int n = 0;

	mov	DWORD PTR _n$5[ebp], 0

; 11410:             int glyph_count;
; 11411:             const nk_rune *in_range;
; 11412:             const struct nk_font_config *cfg = config_iter;

	mov	eax, DWORD PTR _config_iter$[ebp]
	mov	DWORD PTR _cfg$2[ebp], eax

; 11413:             struct nk_font_bake_data *tmp = &baker->build[input_i];

	imul	eax, DWORD PTR _input_i$10[ebp], 56
	mov	ecx, DWORD PTR _baker$[ebp]
	add	eax, DWORD PTR [ecx+48]
	mov	DWORD PTR _tmp$1[ebp], eax

; 11414: 
; 11415:             /* count glyphs + ranges in current font */
; 11416:             glyph_count = 0; range_count = 0;

	mov	DWORD PTR _glyph_count$4[ebp], 0
	mov	DWORD PTR _range_count$[ebp], 0

; 11417:             for (in_range = cfg->range; in_range[0] && in_range[1]; in_range += 2) {

	mov	eax, DWORD PTR _cfg$2[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _in_range$3[ebp], ecx
	jmp	SHORT $LN10@nk_font_ba
$LN9@nk_font_ba:
	mov	eax, DWORD PTR _in_range$3[ebp]
	add	eax, 8
	mov	DWORD PTR _in_range$3[ebp], eax
$LN10@nk_font_ba:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _in_range$3[ebp]
	cmp	DWORD PTR [edx+ecx], 0
	je	SHORT $LN8@nk_font_ba
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _in_range$3[ebp]
	cmp	DWORD PTR [ecx+eax], 0
	je	SHORT $LN8@nk_font_ba

; 11418:                 glyph_count += (int)(in_range[1] - in_range[0]) + 1;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _in_range$3[ebp]
	mov	esi, DWORD PTR _in_range$3[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	sub	eax, DWORD PTR [esi+edx]
	mov	ecx, DWORD PTR _glyph_count$4[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _glyph_count$4[ebp], edx

; 11419:                 range_count++;

	mov	eax, DWORD PTR _range_count$[ebp]
	add	eax, 1
	mov	DWORD PTR _range_count$[ebp], eax

; 11420:             }

	jmp	SHORT $LN9@nk_font_ba
$LN8@nk_font_ba:

; 11421: 
; 11422:             /* setup ranges  */
; 11423:             tmp->ranges = baker->ranges + range_n;

	imul	eax, DWORD PTR _range_n$9[ebp], 24
	mov	ecx, DWORD PTR _baker$[ebp]
	add	eax, DWORD PTR [ecx+60]
	mov	edx, DWORD PTR _tmp$1[ebp]
	mov	DWORD PTR [edx+48], eax

; 11424:             tmp->range_count = (nk_rune)range_count;

	mov	eax, DWORD PTR _tmp$1[ebp]
	mov	ecx, DWORD PTR _range_count$[ebp]
	mov	DWORD PTR [eax+52], ecx

; 11425:             range_n += range_count;

	mov	eax, DWORD PTR _range_n$9[ebp]
	add	eax, DWORD PTR _range_count$[ebp]
	mov	DWORD PTR _range_n$9[ebp], eax

; 11426:             for (i = 0; i < range_count; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@nk_font_ba
$LN6@nk_font_ba:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@nk_font_ba:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _range_count$[ebp]
	jge	$LN5@nk_font_ba

; 11427:                 in_range = &cfg->range[i * 2];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _cfg$2[ebp]
	mov	edx, DWORD PTR [ecx+36]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _in_range$3[ebp], eax

; 11428:                 tmp->ranges[i].font_size = cfg->size;

	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, DWORD PTR _tmp$1[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	ecx, DWORD PTR _cfg$2[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+eax], ecx

; 11429:                 tmp->ranges[i].first_unicode_codepoint_in_range = (int)in_range[0];

	mov	eax, 4
	imul	ecx, eax, 0
	imul	edx, DWORD PTR _i$[ebp], 24
	mov	eax, DWORD PTR _tmp$1[ebp]
	mov	eax, DWORD PTR [eax+48]
	mov	esi, DWORD PTR _in_range$3[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx+4], ecx

; 11430:                 tmp->ranges[i].num_chars = (int)(in_range[1]- in_range[0]) + 1;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _in_range$3[ebp]
	mov	esi, DWORD PTR _in_range$3[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	sub	eax, DWORD PTR [esi+edx]
	add	eax, 1
	imul	ecx, DWORD PTR _i$[ebp], 24
	mov	edx, DWORD PTR _tmp$1[ebp]
	mov	edx, DWORD PTR [edx+48]
	mov	DWORD PTR [edx+ecx+12], eax

; 11431:                 tmp->ranges[i].chardata_for_range = baker->packed_chars + char_n;

	imul	eax, DWORD PTR _char_n$7[ebp], 28
	mov	ecx, DWORD PTR _baker$[ebp]
	add	eax, DWORD PTR [ecx+52]
	imul	edx, DWORD PTR _i$[ebp], 24
	mov	ecx, DWORD PTR _tmp$1[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	mov	DWORD PTR [ecx+edx+16], eax

; 11432:                 char_n += tmp->ranges[i].num_chars;

	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, DWORD PTR _tmp$1[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	ecx, DWORD PTR _char_n$7[ebp]
	add	ecx, DWORD PTR [edx+eax+12]
	mov	DWORD PTR _char_n$7[ebp], ecx

; 11433:             }

	jmp	$LN6@nk_font_ba
$LN5@nk_font_ba:

; 11434: 
; 11435:             /* pack */
; 11436:             tmp->rects = baker->rects + rect_n;

	mov	eax, DWORD PTR _rect_n$8[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _baker$[ebp]
	add	eax, DWORD PTR [ecx+56]
	mov	edx, DWORD PTR _tmp$1[ebp]
	mov	DWORD PTR [edx+44], eax

; 11437:             rect_n += glyph_count;

	mov	eax, DWORD PTR _rect_n$8[ebp]
	add	eax, DWORD PTR _glyph_count$4[ebp]
	mov	DWORD PTR _rect_n$8[ebp], eax

; 11438:             nk_tt_PackSetOversampling(&baker->spc, cfg->oversample_h, cfg->oversample_v);

	mov	eax, DWORD PTR _cfg$2[ebp]
	movzx	ecx, BYTE PTR [eax+15]
	push	ecx
	mov	edx, DWORD PTR _cfg$2[ebp]
	movzx	eax, BYTE PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _baker$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_nk_tt_PackSetOversampling
	add	esp, 12					; 0000000cH

; 11439:             n = nk_tt_PackFontRangesGatherRects(&baker->spc, &tmp->info,
; 11440:                 tmp->ranges, (int)tmp->range_count, tmp->rects);

	mov	eax, DWORD PTR _tmp$1[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _tmp$1[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR _tmp$1[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _tmp$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _baker$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_nk_tt_PackFontRangesGatherRects
	add	esp, 20					; 00000014H
	mov	DWORD PTR _n$5[ebp], eax

; 11441:             nk_rp_pack_rects((struct nk_rp_context*)baker->spc.pack_info, tmp->rects, (int)n);

	mov	eax, DWORD PTR _n$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _tmp$1[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _baker$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_nk_rp_pack_rects
	add	esp, 12					; 0000000cH

; 11442: 
; 11443:             /* texture height */
; 11444:             for (i = 0; i < n; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@nk_font_ba
$LN3@nk_font_ba:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@nk_font_ba:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _n$5[ebp]
	jge	$LN2@nk_font_ba

; 11445:                 if (tmp->rects[i].was_packed)

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _tmp$1[ebp]
	mov	edx, DWORD PTR [ecx+44]
	cmp	DWORD PTR [edx+eax+12], 0
	je	SHORT $LN1@nk_font_ba

; 11446:                     *height = NK_MAX(*height, tmp->rects[i].y + tmp->rects[i].h);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _tmp$1[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movzx	eax, WORD PTR [edx+eax+10]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _tmp$1[ebp]
	mov	edx, DWORD PTR [edx+44]
	movzx	ecx, WORD PTR [edx+ecx+6]
	add	eax, ecx
	mov	edx, DWORD PTR _height$[ebp]
	cmp	DWORD PTR [edx], eax
	jge	SHORT $LN36@nk_font_ba
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _tmp$1[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movzx	eax, WORD PTR [edx+eax+10]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _tmp$1[ebp]
	mov	edx, DWORD PTR [edx+44]
	movzx	ecx, WORD PTR [edx+ecx+6]
	add	eax, ecx
	mov	DWORD PTR tv363[ebp], eax
	jmp	SHORT $LN37@nk_font_ba
$LN36@nk_font_ba:
	mov	edx, DWORD PTR _height$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv363[ebp], eax
$LN37@nk_font_ba:
	mov	ecx, DWORD PTR _height$[ebp]
	mov	edx, DWORD PTR tv363[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@nk_font_ba:

; 11447:             }

	jmp	$LN3@nk_font_ba
$LN2@nk_font_ba:

; 11448:         }

	jmp	$LN12@nk_font_ba
$LN11@nk_font_ba:

; 11449:         NK_ASSERT(rect_n == total_glyph_count);

	mov	eax, DWORD PTR _rect_n$8[ebp]
	cmp	eax, DWORD PTR _total_glyph_count$[ebp]
	je	SHORT $LN38@nk_font_ba
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_bake_pack@@9@9@ddf8d5d8
	add	ecx, 99					; 00000063H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1DI@IJAOEFPO@?$AAr?$AAe?$AAc?$AAt?$AA_?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA_?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN38@nk_font_ba:

; 11450:         NK_ASSERT(char_n == total_glyph_count);

	mov	eax, DWORD PTR _char_n$7[ebp]
	cmp	eax, DWORD PTR _total_glyph_count$[ebp]
	je	SHORT $LN39@nk_font_ba
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_bake_pack@@9@9@ddf8d5d8
	add	ecx, 100				; 00000064H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1DI@OBHIIPHI@?$AAc?$AAh?$AAa?$AAr?$AA_?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA_?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN39@nk_font_ba:

; 11451:         NK_ASSERT(range_n == total_range_count);

	mov	eax, DWORD PTR _range_n$9[ebp]
	cmp	eax, DWORD PTR _total_range_count$[ebp]
	je	SHORT $LN40@nk_font_ba
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_bake_pack@@9@9@ddf8d5d8
	add	ecx, 101				; 00000065H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1DK@MJIDLFCD@?$AAr?$AAa?$AAn?$AAg?$AAe?$AA_?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA_?$AAr?$AAa?$AAn?$AAg?$AAe?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN40@nk_font_ba:

; 11452:     }
; 11453:     *height = (int)nk_round_up_pow2((nk_uint)*height);

	mov	eax, DWORD PTR _height$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_nk_round_up_pow2
	add	esp, 4
	mov	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR [edx], eax

; 11454:     *image_memory = (nk_size)(*width) * (nk_size)(*height);

	mov	eax, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	mov	edx, DWORD PTR [eax]
	imul	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _image_memory$[ebp]
	mov	DWORD PTR [eax], edx

; 11455:     return nk_true;

	mov	eax, 1
$LN24@nk_font_ba:

; 11456: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN43@nk_font_ba
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 404				; 00000194H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN43@nk_font_ba:
	DD	1
	DD	$LN42@nk_font_ba
$LN42@nk_font_ba:
	DD	-144					; ffffff70H
	DD	16					; 00000010H
	DD	$LN41@nk_font_ba
$LN41@nk_font_ba:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
_nk_font_bake_pack ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_baker
_TEXT	SEGMENT
_baker$ = -8						; size = 4
_memory$ = 8						; size = 4
_glyph_count$ = 12					; size = 4
_count$ = 16						; size = 4
_alloc$ = 20						; size = 4
_nk_font_baker PROC					; COMDAT

; 11332: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11333:     struct nk_font_baker *baker;
; 11334:     if (!memory) return 0;

	cmp	DWORD PTR _memory$[ebp], 0
	jne	SHORT $LN1@nk_font_ba
	xor	eax, eax
	jmp	$LN2@nk_font_ba
$LN1@nk_font_ba:

; 11335:     /* setup baker inside a memory block  */
; 11336:     baker = (struct nk_font_baker*)NK_ALIGN_PTR(memory, nk_baker_align);

	mov	eax, DWORD PTR _nk_baker_align
	mov	ecx, DWORD PTR _memory$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	eax, DWORD PTR _nk_baker_align
	sub	eax, 1
	not	eax
	and	edx, eax
	mov	DWORD PTR _baker$[ebp], edx

; 11337:     baker->build = (struct nk_font_bake_data*)NK_ALIGN_PTR((baker + 1), nk_build_align);

	mov	eax, DWORD PTR _nk_build_align
	mov	ecx, DWORD PTR _baker$[ebp]
	lea	edx, DWORD PTR [ecx+eax+63]
	mov	eax, DWORD PTR _nk_build_align
	sub	eax, 1
	not	eax
	and	edx, eax
	mov	ecx, DWORD PTR _baker$[ebp]
	mov	DWORD PTR [ecx+48], edx

; 11338:     baker->packed_chars = (struct nk_tt_packedchar*)NK_ALIGN_PTR((baker->build + count), nk_char_align);

	imul	eax, DWORD PTR _count$[ebp], 56
	mov	ecx, DWORD PTR _baker$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	add	edx, eax
	mov	eax, DWORD PTR _nk_char_align
	lea	ecx, DWORD PTR [edx+eax-1]
	mov	edx, DWORD PTR _nk_char_align
	sub	edx, 1
	not	edx
	and	ecx, edx
	mov	eax, DWORD PTR _baker$[ebp]
	mov	DWORD PTR [eax+52], ecx

; 11339:     baker->rects = (struct nk_rp_rect*)NK_ALIGN_PTR((baker->packed_chars + glyph_count), nk_rect_align);

	imul	eax, DWORD PTR _glyph_count$[ebp], 28
	mov	ecx, DWORD PTR _baker$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	add	edx, eax
	mov	eax, DWORD PTR _nk_rect_align
	lea	ecx, DWORD PTR [edx+eax-1]
	mov	edx, DWORD PTR _nk_rect_align
	sub	edx, 1
	not	edx
	and	ecx, edx
	mov	eax, DWORD PTR _baker$[ebp]
	mov	DWORD PTR [eax+56], ecx

; 11340:     baker->ranges = (struct nk_tt_pack_range*)NK_ALIGN_PTR((baker->rects + glyph_count), nk_range_align);

	mov	eax, DWORD PTR _glyph_count$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _baker$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	add	edx, eax
	mov	eax, DWORD PTR _nk_range_align
	lea	ecx, DWORD PTR [edx+eax-1]
	mov	edx, DWORD PTR _nk_range_align
	sub	edx, 1
	not	edx
	and	ecx, edx
	mov	eax, DWORD PTR _baker$[ebp]
	mov	DWORD PTR [eax+60], ecx

; 11341:     baker->alloc = *alloc;

	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR _baker$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 11342:     return baker;

	mov	eax, DWORD PTR _baker$[ebp]
$LN2@nk_font_ba:

; 11343: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_baker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_baker_memory
_TEXT	SEGMENT
_iter$ = -32						; size = 4
_total_range_count$ = -20				; size = 4
_range_count$ = -8					; size = 4
_temp$ = 8						; size = 4
_glyph_count$ = 12					; size = 4
_config_list$ = 16					; size = 4
_count$ = 20						; size = 4
_nk_font_baker_memory PROC				; COMDAT

; 11299: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11300:     int range_count = 0;

	mov	DWORD PTR _range_count$[ebp], 0

; 11301:     int total_range_count = 0;

	mov	DWORD PTR _total_range_count$[ebp], 0

; 11302:     struct nk_font_config *iter;
; 11303: 
; 11304:     NK_ASSERT(config_list);

	cmp	DWORD PTR _config_list$[ebp], 0
	jne	SHORT $LN8@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_baker_memory@@9@9@ddf8d5d8
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BI@LDHLIKNE@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_font_ba:

; 11305:     NK_ASSERT(glyph_count);

	cmp	DWORD PTR _glyph_count$[ebp], 0
	jne	SHORT $LN9@nk_font_ba
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_baker_memory@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BI@JKPHGKFE@?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_font_ba:

; 11306:     if (!config_list) {

	cmp	DWORD PTR _config_list$[ebp], 0
	jne	SHORT $LN5@nk_font_ba

; 11307:         *temp = 0;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], 0

; 11308:         *glyph_count = 0;

	mov	eax, DWORD PTR _glyph_count$[ebp]
	mov	DWORD PTR [eax], 0

; 11309:         return;

	jmp	$LN6@nk_font_ba
$LN5@nk_font_ba:

; 11310:     }
; 11311: 
; 11312:     *glyph_count = 0;

	mov	eax, DWORD PTR _glyph_count$[ebp]
	mov	DWORD PTR [eax], 0

; 11313:     if (!config_list->range)

	mov	eax, DWORD PTR _config_list$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN4@nk_font_ba

; 11314:         config_list->range = nk_font_default_glyph_ranges();

	call	_nk_font_default_glyph_ranges
	mov	ecx, DWORD PTR _config_list$[ebp]
	mov	DWORD PTR [ecx+36], eax
$LN4@nk_font_ba:

; 11315:     for (iter = config_list; iter; iter = iter->next) {

	mov	eax, DWORD PTR _config_list$[ebp]
	mov	DWORD PTR _iter$[ebp], eax
	jmp	SHORT $LN3@nk_font_ba
$LN2@nk_font_ba:
	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _iter$[ebp], ecx
$LN3@nk_font_ba:
	cmp	DWORD PTR _iter$[ebp], 0
	je	SHORT $LN1@nk_font_ba

; 11316:         range_count = nk_range_count(iter->range);

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_nk_range_count
	add	esp, 4
	mov	DWORD PTR _range_count$[ebp], eax

; 11317:         total_range_count += range_count;

	mov	eax, DWORD PTR _total_range_count$[ebp]
	add	eax, DWORD PTR _range_count$[ebp]
	mov	DWORD PTR _total_range_count$[ebp], eax

; 11318:         *glyph_count += nk_range_glyph_count(iter->range, range_count);

	mov	eax, DWORD PTR _range_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iter$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_nk_range_glyph_count
	add	esp, 8
	mov	ecx, DWORD PTR _glyph_count$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _glyph_count$[ebp]
	mov	DWORD PTR [edx], eax

; 11319:     }

	jmp	SHORT $LN2@nk_font_ba
$LN1@nk_font_ba:

; 11320: 
; 11321:     *temp = (nk_size)*glyph_count * sizeof(struct nk_rp_rect);

	mov	eax, DWORD PTR _glyph_count$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [edx], ecx

; 11322:     *temp += (nk_size)total_range_count * sizeof(struct nk_tt_pack_range);

	imul	eax, DWORD PTR _total_range_count$[ebp], 24
	mov	ecx, DWORD PTR _temp$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [edx], eax

; 11323:     *temp += (nk_size)*glyph_count * sizeof(struct nk_tt_packedchar);

	mov	eax, DWORD PTR _glyph_count$[ebp]
	imul	ecx, DWORD PTR [eax], 28
	mov	edx, DWORD PTR _temp$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx

; 11324:     *temp += (nk_size)count * sizeof(struct nk_font_bake_data);

	imul	eax, DWORD PTR _count$[ebp], 56
	mov	ecx, DWORD PTR _temp$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [edx], eax

; 11325:     *temp += sizeof(struct nk_font_baker);

	mov	eax, DWORD PTR _temp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [edx], ecx

; 11326:     *temp += nk_rect_align + nk_range_align + nk_char_align;

	mov	eax, DWORD PTR _nk_rect_align
	add	eax, DWORD PTR _nk_range_align
	add	eax, DWORD PTR _nk_char_align
	mov	ecx, DWORD PTR _temp$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [edx], eax

; 11327:     *temp += nk_build_align + nk_baker_align;

	mov	eax, DWORD PTR _nk_build_align
	add	eax, DWORD PTR _nk_baker_align
	mov	ecx, DWORD PTR _temp$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [edx], eax
$LN6@nk_font_ba:

; 11328: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_baker_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_range_glyph_count
_TEXT	SEGMENT
_t$1 = -56						; size = 4
_f$2 = -44						; size = 4
_diff$3 = -32						; size = 4
_total_glyphs$ = -20					; size = 4
_i$ = -8						; size = 4
_range$ = 8						; size = 4
_count$ = 12						; size = 4
_nk_range_glyph_count PROC				; COMDAT

; 11236: {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11237:     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 11238:     int total_glyphs = 0;

	mov	DWORD PTR _total_glyphs$[ebp], 0

; 11239:     for (i = 0; i < count; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_range_g
$LN2@nk_range_g:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_range_g:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN1@nk_range_g

; 11240:         int diff;
; 11241:         nk_rune f = range[(i*2)+0];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _range$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _f$2[ebp], edx

; 11242:         nk_rune t = range[(i*2)+1];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _range$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _t$1[ebp], edx

; 11243:         NK_ASSERT(t >= f);

	mov	eax, DWORD PTR _t$1[ebp]
	cmp	eax, DWORD PTR _f$2[ebp]
	jae	SHORT $LN6@nk_range_g
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_range_glyph_count@@9@9@ddf8d5d8
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@LEKFDIFA@?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_range_g:

; 11244:         diff = (int)((t - f) + 1);

	mov	eax, DWORD PTR _t$1[ebp]
	sub	eax, DWORD PTR _f$2[ebp]
	add	eax, 1
	mov	DWORD PTR _diff$3[ebp], eax

; 11245:         total_glyphs += diff;

	mov	eax, DWORD PTR _total_glyphs$[ebp]
	add	eax, DWORD PTR _diff$3[ebp]
	mov	DWORD PTR _total_glyphs$[ebp], eax

; 11246:     }

	jmp	SHORT $LN2@nk_range_g
$LN1@nk_range_g:

; 11247:     return total_glyphs;

	mov	eax, DWORD PTR _total_glyphs$[ebp]

; 11248: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_range_glyph_count ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_range_count
_TEXT	SEGMENT
tv74 = -212						; size = 4
tv80 = -208						; size = 4
tv73 = -208						; size = 4
_iter$ = -8						; size = 4
_range$ = 8						; size = 4
_nk_range_count PROC					; COMDAT

; 11226: {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11227:     const nk_rune *iter = range;

	mov	eax, DWORD PTR _range$[ebp]
	mov	DWORD PTR _iter$[ebp], eax

; 11228:     NK_ASSERT(range);

	cmp	DWORD PTR _range$[ebp], 0
	jne	SHORT $LN6@nk_range_c
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_range_count@@9@9@ddf8d5d8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KOBGMDOP@?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_range_c:

; 11229:     if (!range) return 0;

	cmp	DWORD PTR _range$[ebp], 0
	jne	SHORT $LN2@nk_range_c
	xor	eax, eax
	jmp	SHORT $LN4@nk_range_c
$LN2@nk_range_c:

; 11230:     while (*(iter++) != 0);

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv73[ebp], ecx
	mov	edx, DWORD PTR _iter$[ebp]
	add	edx, 4
	mov	DWORD PTR _iter$[ebp], edx
	cmp	DWORD PTR tv73[ebp], 0
	je	SHORT $LN7@nk_range_c
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN8@nk_range_c
$LN7@nk_range_c:
	mov	DWORD PTR tv74[ebp], 0
$LN8@nk_range_c:
	cmp	DWORD PTR tv74[ebp], 0
	je	SHORT $LN1@nk_range_c
	jmp	SHORT $LN2@nk_range_c
$LN1@nk_range_c:

; 11231:     return (iter == range) ? 0 : (int)((iter - range)/2);

	mov	eax, DWORD PTR _iter$[ebp]
	cmp	eax, DWORD PTR _range$[ebp]
	jne	SHORT $LN9@nk_range_c
	mov	DWORD PTR tv80[ebp], 0
	jmp	SHORT $LN10@nk_range_c
$LN9@nk_range_c:
	mov	eax, DWORD PTR _iter$[ebp]
	sub	eax, DWORD PTR _range$[ebp]
	sar	eax, 2
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv80[ebp], eax
$LN10@nk_range_c:
	mov	eax, DWORD PTR tv80[ebp]
$LN4@nk_range_c:

; 11232: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_range_count ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_GetPackedQuad
_TEXT	SEGMENT
_y$1 = -80						; size = 4
_x$2 = -68						; size = 4
_ty$3 = -56						; size = 4
_tx$4 = -44						; size = 4
_b$ = -32						; size = 4
_iph$ = -20						; size = 4
_ipw$ = -8						; size = 4
_chardata$ = 8						; size = 4
_pw$ = 12						; size = 4
_ph$ = 16						; size = 4
_char_index$ = 20					; size = 4
_xpos$ = 24						; size = 4
_ypos$ = 28						; size = 4
_q$ = 32						; size = 4
_align_to_integer$ = 36					; size = 4
_nk_tt_GetPackedQuad PROC				; COMDAT

; 11170: {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11171:     float ipw = 1.0f / (float)pw, iph = 1.0f / (float)ph;

	cvtsi2ss xmm0, DWORD PTR _pw$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movss	DWORD PTR _ipw$[ebp], xmm1
	cvtsi2ss xmm0, DWORD PTR _ph$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movss	DWORD PTR _iph$[ebp], xmm1

; 11172:     struct nk_tt_packedchar *b = (struct nk_tt_packedchar*)(chardata + char_index);

	imul	eax, DWORD PTR _char_index$[ebp], 28
	add	eax, DWORD PTR _chardata$[ebp]
	mov	DWORD PTR _b$[ebp], eax

; 11173:     if (align_to_integer) {

	cmp	DWORD PTR _align_to_integer$[ebp], 0
	je	$LN2@nk_tt_GetP

; 11174:         int tx = nk_ifloorf((*xpos + b->xoff) + 0.5f);

	mov	eax, DWORD PTR _xpos$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_ifloorf
	add	esp, 4
	mov	DWORD PTR _tx$4[ebp], eax

; 11175:         int ty = nk_ifloorf((*ypos + b->yoff) + 0.5f);

	mov	eax, DWORD PTR _ypos$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+12]
	addss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_ifloorf
	add	esp, 4
	mov	DWORD PTR _ty$3[ebp], eax

; 11176: 
; 11177:         float x = (float)tx;

	cvtsi2ss xmm0, DWORD PTR _tx$4[ebp]
	movss	DWORD PTR _x$2[ebp], xmm0

; 11178:         float y = (float)ty;

	cvtsi2ss xmm0, DWORD PTR _ty$3[ebp]
	movss	DWORD PTR _y$1[ebp], xmm0

; 11179: 
; 11180:         q->x0 = x;

	mov	eax, DWORD PTR _q$[ebp]
	movss	xmm0, DWORD PTR _x$2[ebp]
	movss	DWORD PTR [eax], xmm0

; 11181:         q->y0 = y;

	mov	eax, DWORD PTR _q$[ebp]
	movss	xmm0, DWORD PTR _y$1[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 11182:         q->x1 = x + b->xoff2 - b->xoff;

	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR _x$2[ebp]
	addss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _b$[ebp]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _q$[ebp]
	movss	DWORD PTR [edx+16], xmm0

; 11183:         q->y1 = y + b->yoff2 - b->yoff;

	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR _y$1[ebp]
	addss	xmm0, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _b$[ebp]
	subss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _q$[ebp]
	movss	DWORD PTR [edx+20], xmm0

; 11184:     } else {

	jmp	SHORT $LN1@nk_tt_GetP
$LN2@nk_tt_GetP:

; 11185:         q->x0 = *xpos + b->xoff;

	mov	eax, DWORD PTR _xpos$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _q$[ebp]
	movss	DWORD PTR [edx], xmm0

; 11186:         q->y0 = *ypos + b->yoff;

	mov	eax, DWORD PTR _ypos$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _q$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 11187:         q->x1 = *xpos + b->xoff2;

	mov	eax, DWORD PTR _xpos$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _q$[ebp]
	movss	DWORD PTR [edx+16], xmm0

; 11188:         q->y1 = *ypos + b->yoff2;

	mov	eax, DWORD PTR _ypos$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _q$[ebp]
	movss	DWORD PTR [edx+20], xmm0
$LN1@nk_tt_GetP:

; 11189:     }
; 11190:     q->s0 = b->x0 * ipw;

	mov	eax, DWORD PTR _b$[ebp]
	movzx	ecx, WORD PTR [eax]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR _ipw$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 11191:     q->t0 = b->y0 * iph;

	mov	eax, DWORD PTR _b$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR _iph$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 11192:     q->s1 = b->x1 * ipw;

	mov	eax, DWORD PTR _b$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR _ipw$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	movss	DWORD PTR [edx+24], xmm0

; 11193:     q->t1 = b->y1 * iph;

	mov	eax, DWORD PTR _b$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR _iph$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 11194:     *xpos += b->xadvance;

	mov	eax, DWORD PTR _xpos$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _xpos$[ebp]
	movss	DWORD PTR [edx], xmm0

; 11195: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt_GetPackedQuad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_PackFontRangesRenderIntoRects
_TEXT	SEGMENT
tv508 = -492						; size = 8
tv478 = -492						; size = 8
tv504 = -484						; size = 4
tv474 = -484						; size = 4
tv497 = -480						; size = 8
tv467 = -480						; size = 8
tv419 = -480						; size = 8
tv408 = -480						; size = 8
tv493 = -472						; size = 4
tv463 = -472						; size = 4
tv415 = -472						; size = 4
tv404 = -472						; size = 4
tv161 = -472						; size = 4
tv79 = -472						; size = 4
_pad$1 = -272						; size = 2
_glyph$2 = -260						; size = 4
_codepoint$3 = -248					; size = 4
_y1$4 = -236						; size = 4
_x1$5 = -224						; size = 4
_y0$6 = -212						; size = 4
_x0$7 = -200						; size = 4
_lsb$8 = -188						; size = 4
_advance$9 = -176					; size = 4
_bc$10 = -164						; size = 4
_r$11 = -152						; size = 4
_scale$12 = -140					; size = 4
_sub_y$13 = -128					; size = 4
_sub_x$14 = -116					; size = 4
_recip_v$15 = -104					; size = 4
_recip_h$16 = -92					; size = 4
_fh$17 = -80						; size = 4
_old_v_over$ = -68					; size = 4
_old_h_over$ = -56					; size = 4
_return_value$ = -44					; size = 4
_k$ = -32						; size = 4
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_spc$ = 8						; size = 4
_info$ = 12						; size = 4
_ranges$ = 16						; size = 4
_num_ranges$ = 20					; size = 4
_rects$ = 24						; size = 4
_alloc$ = 28						; size = 4
_nk_tt_PackFontRangesRenderIntoRects PROC		; COMDAT

; 11086: {

	push	ebp
	mov	ebp, esp
	sub	esp, 492				; 000001ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-492]
	mov	ecx, 123				; 0000007bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11087:     int i,j,k, return_value = 1;

	mov	DWORD PTR _return_value$[ebp], 1

; 11088:     /* save current values */
; 11089:     int old_h_over = (int)spc->h_oversample;

	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _old_h_over$[ebp], ecx

; 11090:     int old_v_over = (int)spc->v_oversample;

	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _old_v_over$[ebp], ecx

; 11091:     /* rects array must be big enough to accommodate all characters in the given ranges */
; 11092: 
; 11093:     k = 0;

	mov	DWORD PTR _k$[ebp], 0

; 11094:     for (i=0; i < num_ranges; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@nk_tt_Pack
$LN9@nk_tt_Pack:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@nk_tt_Pack:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_ranges$[ebp]
	jge	$LN8@nk_tt_Pack

; 11095:     {
; 11096:         float fh = ranges[i].font_size;

	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, DWORD PTR _ranges$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR _fh$17[ebp], xmm0

; 11097:         float recip_h,recip_v,sub_x,sub_y;
; 11098:         float scale = fh > 0 ? nk_tt_ScaleForPixelHeight(info, fh):
; 11099:             nk_tt_ScaleForMappingEmToPixels(info, -fh);

	movss	xmm0, DWORD PTR _fh$17[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN13@nk_tt_Pack
	push	ecx
	movss	xmm0, DWORD PTR _fh$17[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _info$[ebp]
	push	eax
	call	_nk_tt_ScaleForPixelHeight
	add	esp, 8
	fstp	DWORD PTR tv79[ebp]
	jmp	SHORT $LN14@nk_tt_Pack
$LN13@nk_tt_Pack:
	movss	xmm0, DWORD PTR _fh$17[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _info$[ebp]
	push	ecx
	call	_nk_tt_ScaleForMappingEmToPixels
	add	esp, 8
	fstp	DWORD PTR tv79[ebp]
$LN14@nk_tt_Pack:
	movss	xmm0, DWORD PTR tv79[ebp]
	movss	DWORD PTR _scale$12[ebp], xmm0

; 11100: 
; 11101:         spc->h_oversample = ranges[i].h_oversample;

	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, DWORD PTR _ranges$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+20]
	mov	eax, DWORD PTR _spc$[ebp]
	mov	DWORD PTR [eax+20], edx

; 11102:         spc->v_oversample = ranges[i].v_oversample;

	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, DWORD PTR _ranges$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+21]
	mov	eax, DWORD PTR _spc$[ebp]
	mov	DWORD PTR [eax+24], edx

; 11103: 
; 11104:         recip_h = 1.0f / (float)spc->h_oversample;

	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR tv404[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv404[ebp]
	mov	edx, DWORD PTR tv404[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv408[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv408[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movss	DWORD PTR _recip_h$16[ebp], xmm1

; 11105:         recip_v = 1.0f / (float)spc->v_oversample;

	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv415[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv415[ebp]
	mov	edx, DWORD PTR tv415[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv419[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv419[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movss	DWORD PTR _recip_v$15[ebp], xmm1

; 11106: 
; 11107:         sub_x = nk_tt__oversample_shift((int)spc->h_oversample);

	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_nk_tt__oversample_shift
	add	esp, 4
	fstp	DWORD PTR _sub_x$14[ebp]

; 11108:         sub_y = nk_tt__oversample_shift((int)spc->v_oversample);

	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_nk_tt__oversample_shift
	add	esp, 4
	fstp	DWORD PTR _sub_y$13[ebp]

; 11109: 
; 11110:         for (j=0; j < ranges[i].num_chars; ++j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@nk_tt_Pack
$LN6@nk_tt_Pack:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@nk_tt_Pack:
	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, DWORD PTR _ranges$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR [ecx+eax+12]
	jge	$LN5@nk_tt_Pack

; 11111:         {
; 11112:             struct nk_rp_rect *r = &rects[k];

	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _rects$[ebp]
	mov	DWORD PTR _r$11[ebp], eax

; 11113:             if (r->was_packed)

	mov	eax, DWORD PTR _r$11[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	$LN4@nk_tt_Pack

; 11114:             {
; 11115:                 struct nk_tt_packedchar *bc = &ranges[i].chardata_for_range[j];

	imul	eax, DWORD PTR _i$[ebp], 24
	imul	ecx, DWORD PTR _j$[ebp], 28
	mov	edx, DWORD PTR _ranges$[ebp]
	add	ecx, DWORD PTR [edx+eax+16]
	mov	DWORD PTR _bc$10[ebp], ecx

; 11116:                 int advance, lsb, x0,y0,x1,y1;
; 11117:                 int codepoint = ranges[i].first_unicode_codepoint_in_range ?
; 11118:                     ranges[i].first_unicode_codepoint_in_range + j :
; 11119:                     ranges[i].array_of_unicode_codepoints[j];

	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, DWORD PTR _ranges$[ebp]
	cmp	DWORD PTR [ecx+eax+4], 0
	je	SHORT $LN15@nk_tt_Pack
	imul	edx, DWORD PTR _i$[ebp], 24
	mov	eax, DWORD PTR _ranges$[ebp]
	mov	ecx, DWORD PTR [eax+edx+4]
	add	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR tv161[ebp], ecx
	jmp	SHORT $LN16@nk_tt_Pack
$LN15@nk_tt_Pack:
	imul	edx, DWORD PTR _i$[ebp], 24
	mov	eax, DWORD PTR _ranges$[ebp]
	mov	ecx, DWORD PTR [eax+edx+8]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR tv161[ebp], eax
$LN16@nk_tt_Pack:
	mov	ecx, DWORD PTR tv161[ebp]
	mov	DWORD PTR _codepoint$3[ebp], ecx

; 11120:                 int glyph = nk_tt_FindGlyphIndex(info, codepoint);

	mov	eax, DWORD PTR _codepoint$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _info$[ebp]
	push	ecx
	call	_nk_tt_FindGlyphIndex
	add	esp, 8
	mov	DWORD PTR _glyph$2[ebp], eax

; 11121:                 nk_rp_coord pad = (nk_rp_coord) spc->padding;

	mov	eax, DWORD PTR _spc$[ebp]
	mov	cx, WORD PTR [eax+16]
	mov	WORD PTR _pad$1[ebp], cx

; 11122: 
; 11123:                 /* pad on left and top */
; 11124:                 r->x = (nk_rp_coord)((int)r->x + (int)pad);

	mov	eax, DWORD PTR _r$11[ebp]
	movzx	ecx, WORD PTR [eax+8]
	movzx	edx, WORD PTR _pad$1[ebp]
	add	ecx, edx
	mov	eax, DWORD PTR _r$11[ebp]
	mov	WORD PTR [eax+8], cx

; 11125:                 r->y = (nk_rp_coord)((int)r->y + (int)pad);

	mov	eax, DWORD PTR _r$11[ebp]
	movzx	ecx, WORD PTR [eax+10]
	movzx	edx, WORD PTR _pad$1[ebp]
	add	ecx, edx
	mov	eax, DWORD PTR _r$11[ebp]
	mov	WORD PTR [eax+10], cx

; 11126:                 r->w = (nk_rp_coord)((int)r->w - (int)pad);

	mov	eax, DWORD PTR _r$11[ebp]
	movzx	ecx, WORD PTR [eax+4]
	movzx	edx, WORD PTR _pad$1[ebp]
	sub	ecx, edx
	mov	eax, DWORD PTR _r$11[ebp]
	mov	WORD PTR [eax+4], cx

; 11127:                 r->h = (nk_rp_coord)((int)r->h - (int)pad);

	mov	eax, DWORD PTR _r$11[ebp]
	movzx	ecx, WORD PTR [eax+6]
	movzx	edx, WORD PTR _pad$1[ebp]
	sub	ecx, edx
	mov	eax, DWORD PTR _r$11[ebp]
	mov	WORD PTR [eax+6], cx

; 11128: 
; 11129:                 nk_tt_GetGlyphHMetrics(info, glyph, &advance, &lsb);

	lea	eax, DWORD PTR _lsb$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _advance$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph$2[ebp]
	push	edx
	mov	eax, DWORD PTR _info$[ebp]
	push	eax
	call	_nk_tt_GetGlyphHMetrics
	add	esp, 16					; 00000010H

; 11130:                 nk_tt_GetGlyphBitmapBox(info, glyph, scale * (float)spc->h_oversample,
; 11131:                         (scale * (float)spc->v_oversample), &x0,&y0,&x1,&y1);

	lea	eax, DWORD PTR _y1$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _x1$5[ebp]
	push	ecx
	lea	edx, DWORD PTR _y0$6[ebp]
	push	edx
	lea	eax, DWORD PTR _x0$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _spc$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR tv463[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv463[ebp]
	mov	eax, DWORD PTR tv463[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv467[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv467[ebp]
	mulss	xmm0, DWORD PTR _scale$12[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _spc$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR tv474[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv474[ebp]
	mov	eax, DWORD PTR tv474[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv478[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv478[ebp]
	mulss	xmm0, DWORD PTR _scale$12[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _glyph$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _info$[ebp]
	push	edx
	call	_nk_tt_GetGlyphBitmapBox
	add	esp, 32					; 00000020H

; 11132:                 nk_tt_MakeGlyphBitmapSubpixel(info, spc->pixels + r->x + r->y*spc->stride_in_bytes,
; 11133:                     (int)(r->w - spc->h_oversample+1), (int)(r->h - spc->v_oversample+1),
; 11134:                     spc->stride_in_bytes, scale * (float)spc->h_oversample,
; 11135:                     scale * (float)spc->v_oversample, 0,0, glyph, alloc);

	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$2[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _spc$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR tv493[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv493[ebp]
	mov	ecx, DWORD PTR tv493[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv497[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv497[ebp]
	mulss	xmm0, DWORD PTR _scale$12[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _spc$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR tv504[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv504[ebp]
	mov	ecx, DWORD PTR tv504[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv508[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv508[ebp]
	mulss	xmm0, DWORD PTR _scale$12[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _spc$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _r$11[ebp]
	movzx	edx, WORD PTR [ecx+6]
	mov	eax, DWORD PTR _spc$[ebp]
	sub	edx, DWORD PTR [eax+24]
	add	edx, 1
	push	edx
	mov	ecx, DWORD PTR _r$11[ebp]
	movzx	edx, WORD PTR [ecx+4]
	mov	eax, DWORD PTR _spc$[ebp]
	sub	edx, DWORD PTR [eax+20]
	add	edx, 1
	push	edx
	mov	ecx, DWORD PTR _r$11[ebp]
	movzx	edx, WORD PTR [ecx+8]
	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, edx
	mov	edx, DWORD PTR _r$11[ebp]
	movzx	eax, WORD PTR [edx+10]
	mov	edx, DWORD PTR _spc$[ebp]
	imul	eax, DWORD PTR [edx+12]
	add	ecx, eax
	push	ecx
	mov	eax, DWORD PTR _info$[ebp]
	push	eax
	call	_nk_tt_MakeGlyphBitmapSubpixel
	add	esp, 44					; 0000002cH

; 11136: 
; 11137:                 if (spc->h_oversample > 1)

	mov	eax, DWORD PTR _spc$[ebp]
	cmp	DWORD PTR [eax+20], 1
	jbe	SHORT $LN3@nk_tt_Pack

; 11138:                    nk_tt__h_prefilter(spc->pixels + r->x + r->y*spc->stride_in_bytes,
; 11139:                         r->w, r->h, spc->stride_in_bytes, (int)spc->h_oversample);

	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _spc$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _r$11[ebp]
	movzx	edx, WORD PTR [ecx+6]
	push	edx
	mov	eax, DWORD PTR _r$11[ebp]
	movzx	ecx, WORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _r$11[ebp]
	movzx	eax, WORD PTR [edx+8]
	mov	ecx, DWORD PTR _spc$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	add	edx, eax
	mov	eax, DWORD PTR _r$11[ebp]
	movzx	ecx, WORD PTR [eax+10]
	mov	eax, DWORD PTR _spc$[ebp]
	imul	ecx, DWORD PTR [eax+12]
	add	edx, ecx
	push	edx
	call	_nk_tt__h_prefilter
	add	esp, 20					; 00000014H
$LN3@nk_tt_Pack:

; 11140: 
; 11141:                 if (spc->v_oversample > 1)

	mov	eax, DWORD PTR _spc$[ebp]
	cmp	DWORD PTR [eax+24], 1
	jbe	SHORT $LN2@nk_tt_Pack

; 11142:                    nk_tt__v_prefilter(spc->pixels + r->x + r->y*spc->stride_in_bytes,
; 11143:                         r->w, r->h, spc->stride_in_bytes, (int)spc->v_oversample);

	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _spc$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _r$11[ebp]
	movzx	edx, WORD PTR [ecx+6]
	push	edx
	mov	eax, DWORD PTR _r$11[ebp]
	movzx	ecx, WORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _r$11[ebp]
	movzx	eax, WORD PTR [edx+8]
	mov	ecx, DWORD PTR _spc$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	add	edx, eax
	mov	eax, DWORD PTR _r$11[ebp]
	movzx	ecx, WORD PTR [eax+10]
	mov	eax, DWORD PTR _spc$[ebp]
	imul	ecx, DWORD PTR [eax+12]
	add	edx, ecx
	push	edx
	call	_nk_tt__v_prefilter
	add	esp, 20					; 00000014H
$LN2@nk_tt_Pack:

; 11144: 
; 11145:                 bc->x0       = (nk_ushort)  r->x;

	mov	eax, DWORD PTR _bc$10[ebp]
	mov	ecx, DWORD PTR _r$11[ebp]
	mov	dx, WORD PTR [ecx+8]
	mov	WORD PTR [eax], dx

; 11146:                 bc->y0       = (nk_ushort)  r->y;

	mov	eax, DWORD PTR _bc$10[ebp]
	mov	ecx, DWORD PTR _r$11[ebp]
	mov	dx, WORD PTR [ecx+10]
	mov	WORD PTR [eax+2], dx

; 11147:                 bc->x1       = (nk_ushort) (r->x + r->w);

	mov	eax, DWORD PTR _r$11[ebp]
	movzx	ecx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _r$11[ebp]
	movzx	eax, WORD PTR [edx+4]
	add	ecx, eax
	mov	edx, DWORD PTR _bc$10[ebp]
	mov	WORD PTR [edx+4], cx

; 11148:                 bc->y1       = (nk_ushort) (r->y + r->h);

	mov	eax, DWORD PTR _r$11[ebp]
	movzx	ecx, WORD PTR [eax+10]
	mov	edx, DWORD PTR _r$11[ebp]
	movzx	eax, WORD PTR [edx+6]
	add	ecx, eax
	mov	edx, DWORD PTR _bc$10[ebp]
	mov	WORD PTR [edx+6], cx

; 11149:                 bc->xadvance = scale * (float)advance;

	cvtsi2ss xmm0, DWORD PTR _advance$9[ebp]
	mulss	xmm0, DWORD PTR _scale$12[ebp]
	mov	eax, DWORD PTR _bc$10[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 11150:                 bc->xoff     = (float)  x0 * recip_h + sub_x;

	cvtsi2ss xmm0, DWORD PTR _x0$7[ebp]
	mulss	xmm0, DWORD PTR _recip_h$16[ebp]
	addss	xmm0, DWORD PTR _sub_x$14[ebp]
	mov	eax, DWORD PTR _bc$10[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 11151:                 bc->yoff     = (float)  y0 * recip_v + sub_y;

	cvtsi2ss xmm0, DWORD PTR _y0$6[ebp]
	mulss	xmm0, DWORD PTR _recip_v$15[ebp]
	addss	xmm0, DWORD PTR _sub_y$13[ebp]
	mov	eax, DWORD PTR _bc$10[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 11152:                 bc->xoff2    = ((float)x0 + r->w) * recip_h + sub_x;

	cvtsi2ss xmm0, DWORD PTR _x0$7[ebp]
	mov	eax, DWORD PTR _r$11[ebp]
	movzx	ecx, WORD PTR [eax+4]
	cvtsi2ss xmm1, ecx
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _recip_h$16[ebp]
	addss	xmm0, DWORD PTR _sub_x$14[ebp]
	mov	edx, DWORD PTR _bc$10[ebp]
	movss	DWORD PTR [edx+20], xmm0

; 11153:                 bc->yoff2    = ((float)y0 + r->h) * recip_v + sub_y;

	cvtsi2ss xmm0, DWORD PTR _y0$6[ebp]
	mov	eax, DWORD PTR _r$11[ebp]
	movzx	ecx, WORD PTR [eax+6]
	cvtsi2ss xmm1, ecx
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _recip_v$15[ebp]
	addss	xmm0, DWORD PTR _sub_y$13[ebp]
	mov	edx, DWORD PTR _bc$10[ebp]
	movss	DWORD PTR [edx+24], xmm0

; 11154:             } else {

	jmp	SHORT $LN1@nk_tt_Pack
$LN4@nk_tt_Pack:

; 11155:                 return_value = 0; /* if any fail, report failure */

	mov	DWORD PTR _return_value$[ebp], 0
$LN1@nk_tt_Pack:

; 11156:             }
; 11157:             ++k;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 11158:         }

	jmp	$LN6@nk_tt_Pack
$LN5@nk_tt_Pack:

; 11159:     }

	jmp	$LN9@nk_tt_Pack
$LN8@nk_tt_Pack:

; 11160:     /* restore original values */
; 11161:     spc->h_oversample = (unsigned int)old_h_over;

	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR _old_h_over$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 11162:     spc->v_oversample = (unsigned int)old_v_over;

	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR _old_v_over$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 11163:     return return_value;

	mov	eax, DWORD PTR _return_value$[ebp]

; 11164: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@nk_tt_Pack
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 492				; 000001ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN24@nk_tt_Pack:
	DD	6
	DD	$LN23@nk_tt_Pack
$LN23@nk_tt_Pack:
	DD	-176					; ffffff50H
	DD	4
	DD	$LN17@nk_tt_Pack
	DD	-188					; ffffff44H
	DD	4
	DD	$LN18@nk_tt_Pack
	DD	-200					; ffffff38H
	DD	4
	DD	$LN19@nk_tt_Pack
	DD	-212					; ffffff2cH
	DD	4
	DD	$LN20@nk_tt_Pack
	DD	-224					; ffffff20H
	DD	4
	DD	$LN21@nk_tt_Pack
	DD	-236					; ffffff14H
	DD	4
	DD	$LN22@nk_tt_Pack
$LN22@nk_tt_Pack:
	DB	121					; 00000079H
	DB	49					; 00000031H
	DB	0
$LN21@nk_tt_Pack:
	DB	120					; 00000078H
	DB	49					; 00000031H
	DB	0
$LN20@nk_tt_Pack:
	DB	121					; 00000079H
	DB	48					; 00000030H
	DB	0
$LN19@nk_tt_Pack:
	DB	120					; 00000078H
	DB	48					; 00000030H
	DB	0
$LN18@nk_tt_Pack:
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	98					; 00000062H
	DB	0
$LN17@nk_tt_Pack:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
_nk_tt_PackFontRangesRenderIntoRects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_PackFontRangesGatherRects
_TEXT	SEGMENT
tv234 = -348						; size = 8
tv230 = -340						; size = 4
tv223 = -336						; size = 8
tv219 = -328						; size = 4
tv136 = -328						; size = 4
tv77 = -328						; size = 4
_glyph$1 = -128						; size = 4
_codepoint$2 = -116					; size = 4
_y1$3 = -104						; size = 4
_x1$4 = -92						; size = 4
_y0$5 = -80						; size = 4
_x0$6 = -68						; size = 4
_scale$7 = -56						; size = 4
_fh$8 = -44						; size = 4
_k$ = -32						; size = 4
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_spc$ = 8						; size = 4
_info$ = 12						; size = 4
_ranges$ = 16						; size = 4
_num_ranges$ = 20					; size = 4
_rects$ = 24						; size = 4
_nk_tt_PackFontRangesGatherRects PROC			; COMDAT

; 11055: {

	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-348]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11056:     int i,j,k;
; 11057:     k = 0;

	mov	DWORD PTR _k$[ebp], 0

; 11058: 
; 11059:     for (i=0; i < num_ranges; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@nk_tt_Pack
$LN5@nk_tt_Pack:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@nk_tt_Pack:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_ranges$[ebp]
	jge	$LN4@nk_tt_Pack

; 11060:         float fh = ranges[i].font_size;

	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, DWORD PTR _ranges$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR _fh$8[ebp], xmm0

; 11061:         float scale = (fh > 0) ? nk_tt_ScaleForPixelHeight(info, fh):
; 11062:             nk_tt_ScaleForMappingEmToPixels(info, -fh);

	movss	xmm0, DWORD PTR _fh$8[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN9@nk_tt_Pack
	push	ecx
	movss	xmm0, DWORD PTR _fh$8[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _info$[ebp]
	push	eax
	call	_nk_tt_ScaleForPixelHeight
	add	esp, 8
	fstp	DWORD PTR tv77[ebp]
	jmp	SHORT $LN10@nk_tt_Pack
$LN9@nk_tt_Pack:
	movss	xmm0, DWORD PTR _fh$8[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _info$[ebp]
	push	ecx
	call	_nk_tt_ScaleForMappingEmToPixels
	add	esp, 8
	fstp	DWORD PTR tv77[ebp]
$LN10@nk_tt_Pack:
	movss	xmm0, DWORD PTR tv77[ebp]
	movss	DWORD PTR _scale$7[ebp], xmm0

; 11063:         ranges[i].h_oversample = (unsigned char) spc->h_oversample;

	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, DWORD PTR _ranges$[ebp]
	mov	edx, DWORD PTR _spc$[ebp]
	mov	dl, BYTE PTR [edx+20]
	mov	BYTE PTR [ecx+eax+20], dl

; 11064:         ranges[i].v_oversample = (unsigned char) spc->v_oversample;

	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, DWORD PTR _ranges$[ebp]
	mov	edx, DWORD PTR _spc$[ebp]
	mov	dl, BYTE PTR [edx+24]
	mov	BYTE PTR [ecx+eax+21], dl

; 11065:         for (j=0; j < ranges[i].num_chars; ++j) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@nk_tt_Pack
$LN2@nk_tt_Pack:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@nk_tt_Pack:
	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, DWORD PTR _ranges$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR [ecx+eax+12]
	jge	$LN1@nk_tt_Pack

; 11066:             int x0,y0,x1,y1;
; 11067:             int codepoint = ranges[i].first_unicode_codepoint_in_range ?
; 11068:                 ranges[i].first_unicode_codepoint_in_range + j :
; 11069:                 ranges[i].array_of_unicode_codepoints[j];

	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, DWORD PTR _ranges$[ebp]
	cmp	DWORD PTR [ecx+eax+4], 0
	je	SHORT $LN11@nk_tt_Pack
	imul	edx, DWORD PTR _i$[ebp], 24
	mov	eax, DWORD PTR _ranges$[ebp]
	mov	ecx, DWORD PTR [eax+edx+4]
	add	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR tv136[ebp], ecx
	jmp	SHORT $LN12@nk_tt_Pack
$LN11@nk_tt_Pack:
	imul	edx, DWORD PTR _i$[ebp], 24
	mov	eax, DWORD PTR _ranges$[ebp]
	mov	ecx, DWORD PTR [eax+edx+8]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR tv136[ebp], eax
$LN12@nk_tt_Pack:
	mov	ecx, DWORD PTR tv136[ebp]
	mov	DWORD PTR _codepoint$2[ebp], ecx

; 11070: 
; 11071:             int glyph = nk_tt_FindGlyphIndex(info, codepoint);

	mov	eax, DWORD PTR _codepoint$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _info$[ebp]
	push	ecx
	call	_nk_tt_FindGlyphIndex
	add	esp, 8
	mov	DWORD PTR _glyph$1[ebp], eax

; 11072:             nk_tt_GetGlyphBitmapBoxSubpixel(info,glyph, scale * (float)spc->h_oversample,
; 11073:                 scale * (float)spc->v_oversample, 0,0, &x0,&y0,&x1,&y1);

	lea	eax, DWORD PTR _y1$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _x1$4[ebp]
	push	ecx
	lea	edx, DWORD PTR _y0$5[ebp]
	push	edx
	lea	eax, DWORD PTR _x0$6[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _spc$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR tv219[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv219[ebp]
	mov	eax, DWORD PTR tv219[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv223[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv223[ebp]
	mulss	xmm0, DWORD PTR _scale$7[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _spc$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR tv230[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv230[ebp]
	mov	eax, DWORD PTR tv230[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv234[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv234[ebp]
	mulss	xmm0, DWORD PTR _scale$7[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _glyph$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _info$[ebp]
	push	edx
	call	_nk_tt_GetGlyphBitmapBoxSubpixel
	add	esp, 40					; 00000028H

; 11074:             rects[k].w = (nk_rp_coord) (x1-x0 + spc->padding + (int)spc->h_oversample-1);

	mov	eax, DWORD PTR _x1$4[ebp]
	sub	eax, DWORD PTR _x0$6[ebp]
	mov	ecx, DWORD PTR _spc$[ebp]
	add	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	lea	edx, DWORD PTR [eax+ecx-1]
	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _rects$[ebp]
	mov	WORD PTR [ecx+eax+4], dx

; 11075:             rects[k].h = (nk_rp_coord) (y1-y0 + spc->padding + (int)spc->v_oversample-1);

	mov	eax, DWORD PTR _y1$3[ebp]
	sub	eax, DWORD PTR _y0$5[ebp]
	mov	ecx, DWORD PTR _spc$[ebp]
	add	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	lea	edx, DWORD PTR [eax+ecx-1]
	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _rects$[ebp]
	mov	WORD PTR [ecx+eax+6], dx

; 11076:             ++k;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax

; 11077:         }

	jmp	$LN2@nk_tt_Pack
$LN1@nk_tt_Pack:

; 11078:     }

	jmp	$LN5@nk_tt_Pack
$LN4@nk_tt_Pack:

; 11079:     return k;

	mov	eax, DWORD PTR _k$[ebp]

; 11080: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@nk_tt_Pack
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 348				; 0000015cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN18@nk_tt_Pack:
	DD	4
	DD	$LN17@nk_tt_Pack
$LN17@nk_tt_Pack:
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN13@nk_tt_Pack
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN14@nk_tt_Pack
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN15@nk_tt_Pack
	DD	-104					; ffffff98H
	DD	4
	DD	$LN16@nk_tt_Pack
$LN16@nk_tt_Pack:
	DB	121					; 00000079H
	DB	49					; 00000031H
	DB	0
$LN15@nk_tt_Pack:
	DB	120					; 00000078H
	DB	49					; 00000031H
	DB	0
$LN14@nk_tt_Pack:
	DB	121					; 00000079H
	DB	48					; 00000030H
	DB	0
$LN13@nk_tt_Pack:
	DB	120					; 00000078H
	DB	48					; 00000030H
	DB	0
_nk_tt_PackFontRangesGatherRects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt__oversample_shift
_TEXT	SEGMENT
tv76 = -196						; size = 4
_oversample$ = 8					; size = 4
_nk_tt__oversample_shift PROC				; COMDAT

; 11039: {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11040:     if (!oversample)

	cmp	DWORD PTR _oversample$[ebp], 0
	jne	SHORT $LN1@nk_tt__ove

; 11041:         return 0.0f;

	fldz
	jmp	SHORT $LN2@nk_tt__ove
$LN1@nk_tt__ove:

; 11042: 
; 11043:     /* The prefilter is a box filter of width "oversample", */
; 11044:     /* which shifts phase by (oversample - 1)/2 pixels in */
; 11045:     /* oversampled space. We want to shift in the opposite */
; 11046:     /* direction to counter this. */
; 11047:     return (float)-(oversample - 1) / (2.0f * (float)oversample);

	mov	eax, DWORD PTR _oversample$[ebp]
	sub	eax, 1
	neg	eax
	cvtsi2ss xmm0, eax
	cvtsi2ss xmm1, DWORD PTR _oversample$[ebp]
	mulss	xmm1, DWORD PTR __real@40000000
	divss	xmm0, xmm1
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
$LN2@nk_tt__ove:

; 11048: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt__oversample_shift ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt__v_prefilter
_TEXT	SEGMENT
tv70 = -264						; size = 4
_total$1 = -64						; size = 4
_i$2 = -52						; size = 4
_j$ = -40						; size = 4
_safe_h$ = -28						; size = 4
_buffer$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_pixels$ = 8						; size = 4
_w$ = 12						; size = 4
_h$ = 16						; size = 4
_stride_in_bytes$ = 20					; size = 4
_kernel_width$ = 24					; size = 4
_nk_tt__v_prefilter PROC				; COMDAT

; 10976: {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 10977:     unsigned char buffer[NK_TT_MAX_OVERSAMPLE];
; 10978:     int safe_h = h - kernel_width;

	mov	eax, DWORD PTR _h$[ebp]
	sub	eax, DWORD PTR _kernel_width$[ebp]
	mov	DWORD PTR _safe_h$[ebp], eax

; 10979:     int j;
; 10980: 
; 10981:     for (j=0; j < w; ++j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN28@nk_tt__v_p
$LN27@nk_tt__v_p:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN28@nk_tt__v_p:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	$LN29@nk_tt__v_p

; 10982:     {
; 10983:         int i;
; 10984:         unsigned int total;
; 10985:         NK_MEMSET(buffer, 0, (nk_size)kernel_width);

	mov	eax, DWORD PTR _kernel_width$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_nk_memset
	add	esp, 12					; 0000000cH

; 10986: 
; 10987:         total = 0;

	mov	DWORD PTR _total$1[ebp], 0

; 10988: 
; 10989:         /* make kernel_width a constant in common cases so compiler can optimize out the divide */
; 10990:         switch (kernel_width) {

	mov	eax, DWORD PTR _kernel_width$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	mov	ecx, DWORD PTR tv70[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv70[ebp], ecx
	cmp	DWORD PTR tv70[ebp], 3
	ja	$LN7@nk_tt__v_p
	mov	edx, DWORD PTR tv70[ebp]
	jmp	DWORD PTR $LN35@nk_tt__v_p[edx*4]
$LN23@nk_tt__v_p:

; 10991:         case 2:
; 10992:             for (i=0; i <= safe_h; ++i) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN22@nk_tt__v_p
$LN21@nk_tt__v_p:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN22@nk_tt__v_p:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _safe_h$[ebp]
	jg	SHORT $LN20@nk_tt__v_p

; 10993:                 total += (unsigned int)(pixels[i*stride_in_bytes] - buffer[i & NK_TT__OVER_MASK]);

	mov	eax, DWORD PTR _i$2[ebp]
	imul	eax, DWORD PTR _stride_in_bytes$[ebp]
	mov	ecx, DWORD PTR _pixels$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _i$2[ebp]
	and	eax, 7
	movzx	ecx, BYTE PTR _buffer$[ebp+eax]
	sub	edx, ecx
	add	edx, DWORD PTR _total$1[ebp]
	mov	DWORD PTR _total$1[ebp], edx

; 10994:                 buffer[(i+kernel_width) & NK_TT__OVER_MASK] = pixels[i*stride_in_bytes];

	mov	eax, DWORD PTR _i$2[ebp]
	imul	eax, DWORD PTR _stride_in_bytes$[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, DWORD PTR _kernel_width$[ebp]
	and	ecx, 7
	mov	edx, DWORD PTR _pixels$[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR _buffer$[ebp+ecx], al

; 10995:                 pixels[i*stride_in_bytes] = (unsigned char) (total / 2);

	mov	eax, DWORD PTR _total$1[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR _i$2[ebp]
	imul	ecx, DWORD PTR _stride_in_bytes$[ebp]
	mov	edx, DWORD PTR _pixels$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 10996:             }

	jmp	SHORT $LN21@nk_tt__v_p
$LN20@nk_tt__v_p:

; 10997:             break;

	jmp	$LN24@nk_tt__v_p
$LN19@nk_tt__v_p:

; 10998:          case 3:
; 10999:             for (i=0; i <= safe_h; ++i) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN18@nk_tt__v_p
$LN17@nk_tt__v_p:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN18@nk_tt__v_p:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _safe_h$[ebp]
	jg	SHORT $LN16@nk_tt__v_p

; 11000:                 total += (unsigned int)(pixels[i*stride_in_bytes] - buffer[i & NK_TT__OVER_MASK]);

	mov	eax, DWORD PTR _i$2[ebp]
	imul	eax, DWORD PTR _stride_in_bytes$[ebp]
	mov	ecx, DWORD PTR _pixels$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _i$2[ebp]
	and	eax, 7
	movzx	ecx, BYTE PTR _buffer$[ebp+eax]
	sub	edx, ecx
	add	edx, DWORD PTR _total$1[ebp]
	mov	DWORD PTR _total$1[ebp], edx

; 11001:                 buffer[(i+kernel_width) & NK_TT__OVER_MASK] = pixels[i*stride_in_bytes];

	mov	eax, DWORD PTR _i$2[ebp]
	imul	eax, DWORD PTR _stride_in_bytes$[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, DWORD PTR _kernel_width$[ebp]
	and	ecx, 7
	mov	edx, DWORD PTR _pixels$[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR _buffer$[ebp+ecx], al

; 11002:                 pixels[i*stride_in_bytes] = (unsigned char) (total / 3);

	mov	eax, DWORD PTR _total$1[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _i$2[ebp]
	imul	edx, DWORD PTR _stride_in_bytes$[ebp]
	mov	ecx, DWORD PTR _pixels$[ebp]
	mov	BYTE PTR [ecx+edx], al

; 11003:             }

	jmp	SHORT $LN17@nk_tt__v_p
$LN16@nk_tt__v_p:

; 11004:             break;

	jmp	$LN24@nk_tt__v_p
$LN15@nk_tt__v_p:

; 11005:          case 4:
; 11006:             for (i=0; i <= safe_h; ++i) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN14@nk_tt__v_p
$LN13@nk_tt__v_p:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN14@nk_tt__v_p:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _safe_h$[ebp]
	jg	SHORT $LN12@nk_tt__v_p

; 11007:                 total += (unsigned int)(pixels[i*stride_in_bytes] - buffer[i & NK_TT__OVER_MASK]);

	mov	eax, DWORD PTR _i$2[ebp]
	imul	eax, DWORD PTR _stride_in_bytes$[ebp]
	mov	ecx, DWORD PTR _pixels$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _i$2[ebp]
	and	eax, 7
	movzx	ecx, BYTE PTR _buffer$[ebp+eax]
	sub	edx, ecx
	add	edx, DWORD PTR _total$1[ebp]
	mov	DWORD PTR _total$1[ebp], edx

; 11008:                 buffer[(i+kernel_width) & NK_TT__OVER_MASK] = pixels[i*stride_in_bytes];

	mov	eax, DWORD PTR _i$2[ebp]
	imul	eax, DWORD PTR _stride_in_bytes$[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, DWORD PTR _kernel_width$[ebp]
	and	ecx, 7
	mov	edx, DWORD PTR _pixels$[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR _buffer$[ebp+ecx], al

; 11009:                 pixels[i*stride_in_bytes] = (unsigned char) (total / 4);

	mov	eax, DWORD PTR _total$1[ebp]
	shr	eax, 2
	mov	ecx, DWORD PTR _i$2[ebp]
	imul	ecx, DWORD PTR _stride_in_bytes$[ebp]
	mov	edx, DWORD PTR _pixels$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 11010:             }

	jmp	SHORT $LN13@nk_tt__v_p
$LN12@nk_tt__v_p:

; 11011:             break;

	jmp	$LN24@nk_tt__v_p
$LN11@nk_tt__v_p:

; 11012:          case 5:
; 11013:             for (i=0; i <= safe_h; ++i) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN10@nk_tt__v_p
$LN9@nk_tt__v_p:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN10@nk_tt__v_p:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _safe_h$[ebp]
	jg	SHORT $LN8@nk_tt__v_p

; 11014:                 total += (unsigned int)(pixels[i*stride_in_bytes] - buffer[i & NK_TT__OVER_MASK]);

	mov	eax, DWORD PTR _i$2[ebp]
	imul	eax, DWORD PTR _stride_in_bytes$[ebp]
	mov	ecx, DWORD PTR _pixels$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _i$2[ebp]
	and	eax, 7
	movzx	ecx, BYTE PTR _buffer$[ebp+eax]
	sub	edx, ecx
	add	edx, DWORD PTR _total$1[ebp]
	mov	DWORD PTR _total$1[ebp], edx

; 11015:                 buffer[(i+kernel_width) & NK_TT__OVER_MASK] = pixels[i*stride_in_bytes];

	mov	eax, DWORD PTR _i$2[ebp]
	imul	eax, DWORD PTR _stride_in_bytes$[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, DWORD PTR _kernel_width$[ebp]
	and	ecx, 7
	mov	edx, DWORD PTR _pixels$[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR _buffer$[ebp+ecx], al

; 11016:                 pixels[i*stride_in_bytes] = (unsigned char) (total / 5);

	mov	eax, DWORD PTR _total$1[ebp]
	xor	edx, edx
	mov	ecx, 5
	div	ecx
	mov	edx, DWORD PTR _i$2[ebp]
	imul	edx, DWORD PTR _stride_in_bytes$[ebp]
	mov	ecx, DWORD PTR _pixels$[ebp]
	mov	BYTE PTR [ecx+edx], al

; 11017:             }

	jmp	SHORT $LN9@nk_tt__v_p
$LN8@nk_tt__v_p:

; 11018:             break;

	jmp	SHORT $LN24@nk_tt__v_p
$LN7@nk_tt__v_p:

; 11019:          default:
; 11020:             for (i=0; i <= safe_h; ++i) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN6@nk_tt__v_p
$LN5@nk_tt__v_p:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN6@nk_tt__v_p:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _safe_h$[ebp]
	jg	SHORT $LN24@nk_tt__v_p

; 11021:                 total += (unsigned int)(pixels[i*stride_in_bytes] - buffer[i & NK_TT__OVER_MASK]);

	mov	eax, DWORD PTR _i$2[ebp]
	imul	eax, DWORD PTR _stride_in_bytes$[ebp]
	mov	ecx, DWORD PTR _pixels$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _i$2[ebp]
	and	eax, 7
	movzx	ecx, BYTE PTR _buffer$[ebp+eax]
	sub	edx, ecx
	add	edx, DWORD PTR _total$1[ebp]
	mov	DWORD PTR _total$1[ebp], edx

; 11022:                 buffer[(i+kernel_width) & NK_TT__OVER_MASK] = pixels[i*stride_in_bytes];

	mov	eax, DWORD PTR _i$2[ebp]
	imul	eax, DWORD PTR _stride_in_bytes$[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, DWORD PTR _kernel_width$[ebp]
	and	ecx, 7
	mov	edx, DWORD PTR _pixels$[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR _buffer$[ebp+ecx], al

; 11023:                 pixels[i*stride_in_bytes] = (unsigned char) (total / (unsigned int)kernel_width);

	mov	eax, DWORD PTR _total$1[ebp]
	xor	edx, edx
	div	DWORD PTR _kernel_width$[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	imul	ecx, DWORD PTR _stride_in_bytes$[ebp]
	mov	edx, DWORD PTR _pixels$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 11024:             }

	jmp	SHORT $LN5@nk_tt__v_p
$LN24@nk_tt__v_p:

; 11025:             break;
; 11026:         }
; 11027: 
; 11028:         for (; i < h; ++i) {

	jmp	SHORT $LN3@nk_tt__v_p
$LN2@nk_tt__v_p:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@nk_tt__v_p:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _h$[ebp]
	jge	SHORT $LN1@nk_tt__v_p

; 11029:             NK_ASSERT(pixels[i*stride_in_bytes] == 0);

	mov	eax, DWORD PTR _i$2[ebp]
	imul	eax, DWORD PTR _stride_in_bytes$[ebp]
	mov	ecx, DWORD PTR _pixels$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	je	SHORT $LN31@nk_tt__v_p
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_tt__v_prefilter@@9@9@ddf8d5d8
	add	eax, 53					; 00000035H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1DO@LAPBLJ@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$CK?$AAs?$AAt?$AAr?$AAi?$AAd?$AAe?$AA_?$AAi?$AAn?$AA_?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN31@nk_tt__v_p:

; 11030:             total -= (unsigned int)(buffer[i & NK_TT__OVER_MASK]);

	mov	eax, DWORD PTR _i$2[ebp]
	and	eax, 7
	movzx	ecx, BYTE PTR _buffer$[ebp+eax]
	mov	edx, DWORD PTR _total$1[ebp]
	sub	edx, ecx
	mov	DWORD PTR _total$1[ebp], edx

; 11031:             pixels[i*stride_in_bytes] = (unsigned char) (total / (unsigned int)kernel_width);

	mov	eax, DWORD PTR _total$1[ebp]
	xor	edx, edx
	div	DWORD PTR _kernel_width$[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	imul	ecx, DWORD PTR _stride_in_bytes$[ebp]
	mov	edx, DWORD PTR _pixels$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 11032:         }

	jmp	SHORT $LN2@nk_tt__v_p
$LN1@nk_tt__v_p:

; 11033:         pixels += 1;

	mov	eax, DWORD PTR _pixels$[ebp]
	add	eax, 1
	mov	DWORD PTR _pixels$[ebp], eax

; 11034:     }

	jmp	$LN27@nk_tt__v_p
$LN29@nk_tt__v_p:

; 11035: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@nk_tt__v_p
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN34@nk_tt__v_p:
	DD	1
	DD	$LN33@nk_tt__v_p
$LN33@nk_tt__v_p:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN32@nk_tt__v_p
$LN32@nk_tt__v_p:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
	npad	1
$LN35@nk_tt__v_p:
	DD	$LN23@nk_tt__v_p
	DD	$LN19@nk_tt__v_p
	DD	$LN15@nk_tt__v_p
	DD	$LN11@nk_tt__v_p
_nk_tt__v_prefilter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt__h_prefilter
_TEXT	SEGMENT
tv70 = -264						; size = 4
_total$1 = -64						; size = 4
_i$2 = -52						; size = 4
_j$ = -40						; size = 4
_safe_w$ = -28						; size = 4
_buffer$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_pixels$ = 8						; size = 4
_w$ = 12						; size = 4
_h$ = 16						; size = 4
_stride_in_bytes$ = 20					; size = 4
_kernel_width$ = 24					; size = 4
_nk_tt__h_prefilter PROC				; COMDAT

; 10912: {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 10913:     unsigned char buffer[NK_TT_MAX_OVERSAMPLE];
; 10914:     int safe_w = w - kernel_width;

	mov	eax, DWORD PTR _w$[ebp]
	sub	eax, DWORD PTR _kernel_width$[ebp]
	mov	DWORD PTR _safe_w$[ebp], eax

; 10915:     int j;
; 10916: 
; 10917:     for (j=0; j < h; ++j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN28@nk_tt__h_p
$LN27@nk_tt__h_p:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN28@nk_tt__h_p:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _h$[ebp]
	jge	$LN29@nk_tt__h_p

; 10918:     {
; 10919:         int i;
; 10920:         unsigned int total;
; 10921:         NK_MEMSET(buffer, 0, (nk_size)kernel_width);

	mov	eax, DWORD PTR _kernel_width$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_nk_memset
	add	esp, 12					; 0000000cH

; 10922: 
; 10923:         total = 0;

	mov	DWORD PTR _total$1[ebp], 0

; 10924: 
; 10925:         /* make kernel_width a constant in common cases so compiler can optimize out the divide */
; 10926:         switch (kernel_width) {

	mov	eax, DWORD PTR _kernel_width$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	mov	ecx, DWORD PTR tv70[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv70[ebp], ecx
	cmp	DWORD PTR tv70[ebp], 3
	ja	$LN7@nk_tt__h_p
	mov	edx, DWORD PTR tv70[ebp]
	jmp	DWORD PTR $LN35@nk_tt__h_p[edx*4]
$LN23@nk_tt__h_p:

; 10927:         case 2:
; 10928:             for (i=0; i <= safe_w; ++i) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN22@nk_tt__h_p
$LN21@nk_tt__h_p:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN22@nk_tt__h_p:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _safe_w$[ebp]
	jg	SHORT $LN20@nk_tt__h_p

; 10929:                 total += (unsigned int)(pixels[i] - buffer[i & NK_TT__OVER_MASK]);

	mov	eax, DWORD PTR _pixels$[ebp]
	add	eax, DWORD PTR _i$2[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	and	edx, 7
	movzx	eax, BYTE PTR _buffer$[ebp+edx]
	sub	ecx, eax
	add	ecx, DWORD PTR _total$1[ebp]
	mov	DWORD PTR _total$1[ebp], ecx

; 10930:                 buffer[(i+kernel_width) & NK_TT__OVER_MASK] = pixels[i];

	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, DWORD PTR _kernel_width$[ebp]
	and	eax, 7
	mov	ecx, DWORD PTR _pixels$[ebp]
	add	ecx, DWORD PTR _i$2[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _buffer$[ebp+eax], dl

; 10931:                 pixels[i] = (unsigned char) (total / 2);

	mov	eax, DWORD PTR _total$1[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR _pixels$[ebp]
	add	ecx, DWORD PTR _i$2[ebp]
	mov	BYTE PTR [ecx], al

; 10932:             }

	jmp	SHORT $LN21@nk_tt__h_p
$LN20@nk_tt__h_p:

; 10933:             break;

	jmp	$LN24@nk_tt__h_p
$LN19@nk_tt__h_p:

; 10934:         case 3:
; 10935:             for (i=0; i <= safe_w; ++i) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN18@nk_tt__h_p
$LN17@nk_tt__h_p:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN18@nk_tt__h_p:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _safe_w$[ebp]
	jg	SHORT $LN16@nk_tt__h_p

; 10936:                 total += (unsigned int)(pixels[i] - buffer[i & NK_TT__OVER_MASK]);

	mov	eax, DWORD PTR _pixels$[ebp]
	add	eax, DWORD PTR _i$2[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	and	edx, 7
	movzx	eax, BYTE PTR _buffer$[ebp+edx]
	sub	ecx, eax
	add	ecx, DWORD PTR _total$1[ebp]
	mov	DWORD PTR _total$1[ebp], ecx

; 10937:                 buffer[(i+kernel_width) & NK_TT__OVER_MASK] = pixels[i];

	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, DWORD PTR _kernel_width$[ebp]
	and	eax, 7
	mov	ecx, DWORD PTR _pixels$[ebp]
	add	ecx, DWORD PTR _i$2[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _buffer$[ebp+eax], dl

; 10938:                 pixels[i] = (unsigned char) (total / 3);

	mov	eax, DWORD PTR _total$1[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _pixels$[ebp]
	add	edx, DWORD PTR _i$2[ebp]
	mov	BYTE PTR [edx], al

; 10939:             }

	jmp	SHORT $LN17@nk_tt__h_p
$LN16@nk_tt__h_p:

; 10940:             break;

	jmp	$LN24@nk_tt__h_p
$LN15@nk_tt__h_p:

; 10941:         case 4:
; 10942:             for (i=0; i <= safe_w; ++i) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN14@nk_tt__h_p
$LN13@nk_tt__h_p:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN14@nk_tt__h_p:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _safe_w$[ebp]
	jg	SHORT $LN12@nk_tt__h_p

; 10943:                 total += (unsigned int)pixels[i] - buffer[i & NK_TT__OVER_MASK];

	mov	eax, DWORD PTR _pixels$[ebp]
	add	eax, DWORD PTR _i$2[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	and	edx, 7
	movzx	eax, BYTE PTR _buffer$[ebp+edx]
	sub	ecx, eax
	add	ecx, DWORD PTR _total$1[ebp]
	mov	DWORD PTR _total$1[ebp], ecx

; 10944:                 buffer[(i+kernel_width) & NK_TT__OVER_MASK] = pixels[i];

	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, DWORD PTR _kernel_width$[ebp]
	and	eax, 7
	mov	ecx, DWORD PTR _pixels$[ebp]
	add	ecx, DWORD PTR _i$2[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _buffer$[ebp+eax], dl

; 10945:                 pixels[i] = (unsigned char) (total / 4);

	mov	eax, DWORD PTR _total$1[ebp]
	shr	eax, 2
	mov	ecx, DWORD PTR _pixels$[ebp]
	add	ecx, DWORD PTR _i$2[ebp]
	mov	BYTE PTR [ecx], al

; 10946:             }

	jmp	SHORT $LN13@nk_tt__h_p
$LN12@nk_tt__h_p:

; 10947:             break;

	jmp	$LN24@nk_tt__h_p
$LN11@nk_tt__h_p:

; 10948:         case 5:
; 10949:             for (i=0; i <= safe_w; ++i) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN10@nk_tt__h_p
$LN9@nk_tt__h_p:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN10@nk_tt__h_p:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _safe_w$[ebp]
	jg	SHORT $LN8@nk_tt__h_p

; 10950:                 total += (unsigned int)(pixels[i] - buffer[i & NK_TT__OVER_MASK]);

	mov	eax, DWORD PTR _pixels$[ebp]
	add	eax, DWORD PTR _i$2[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	and	edx, 7
	movzx	eax, BYTE PTR _buffer$[ebp+edx]
	sub	ecx, eax
	add	ecx, DWORD PTR _total$1[ebp]
	mov	DWORD PTR _total$1[ebp], ecx

; 10951:                 buffer[(i+kernel_width) & NK_TT__OVER_MASK] = pixels[i];

	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, DWORD PTR _kernel_width$[ebp]
	and	eax, 7
	mov	ecx, DWORD PTR _pixels$[ebp]
	add	ecx, DWORD PTR _i$2[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _buffer$[ebp+eax], dl

; 10952:                 pixels[i] = (unsigned char) (total / 5);

	mov	eax, DWORD PTR _total$1[ebp]
	xor	edx, edx
	mov	ecx, 5
	div	ecx
	mov	edx, DWORD PTR _pixels$[ebp]
	add	edx, DWORD PTR _i$2[ebp]
	mov	BYTE PTR [edx], al

; 10953:             }

	jmp	SHORT $LN9@nk_tt__h_p
$LN8@nk_tt__h_p:

; 10954:             break;

	jmp	SHORT $LN24@nk_tt__h_p
$LN7@nk_tt__h_p:

; 10955:         default:
; 10956:             for (i=0; i <= safe_w; ++i) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN6@nk_tt__h_p
$LN5@nk_tt__h_p:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN6@nk_tt__h_p:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _safe_w$[ebp]
	jg	SHORT $LN24@nk_tt__h_p

; 10957:                 total += (unsigned int)(pixels[i] - buffer[i & NK_TT__OVER_MASK]);

	mov	eax, DWORD PTR _pixels$[ebp]
	add	eax, DWORD PTR _i$2[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	and	edx, 7
	movzx	eax, BYTE PTR _buffer$[ebp+edx]
	sub	ecx, eax
	add	ecx, DWORD PTR _total$1[ebp]
	mov	DWORD PTR _total$1[ebp], ecx

; 10958:                 buffer[(i+kernel_width) & NK_TT__OVER_MASK] = pixels[i];

	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, DWORD PTR _kernel_width$[ebp]
	and	eax, 7
	mov	ecx, DWORD PTR _pixels$[ebp]
	add	ecx, DWORD PTR _i$2[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _buffer$[ebp+eax], dl

; 10959:                 pixels[i] = (unsigned char) (total / (unsigned int)kernel_width);

	mov	eax, DWORD PTR _total$1[ebp]
	xor	edx, edx
	div	DWORD PTR _kernel_width$[ebp]
	mov	ecx, DWORD PTR _pixels$[ebp]
	add	ecx, DWORD PTR _i$2[ebp]
	mov	BYTE PTR [ecx], al

; 10960:             }

	jmp	SHORT $LN5@nk_tt__h_p
$LN24@nk_tt__h_p:

; 10961:             break;
; 10962:         }
; 10963: 
; 10964:         for (; i < w; ++i) {

	jmp	SHORT $LN3@nk_tt__h_p
$LN2@nk_tt__h_p:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@nk_tt__h_p:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	SHORT $LN1@nk_tt__h_p

; 10965:             NK_ASSERT(pixels[i] == 0);

	mov	eax, DWORD PTR _pixels$[ebp]
	add	eax, DWORD PTR _i$2[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN31@nk_tt__h_p
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_tt__h_prefilter@@9@9@ddf8d5d8
	add	edx, 53					; 00000035H
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BO@BDJAMAMF@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN31@nk_tt__h_p:

; 10966:             total -= (unsigned int)(buffer[i & NK_TT__OVER_MASK]);

	mov	eax, DWORD PTR _i$2[ebp]
	and	eax, 7
	movzx	ecx, BYTE PTR _buffer$[ebp+eax]
	mov	edx, DWORD PTR _total$1[ebp]
	sub	edx, ecx
	mov	DWORD PTR _total$1[ebp], edx

; 10967:             pixels[i] = (unsigned char) (total / (unsigned int)kernel_width);

	mov	eax, DWORD PTR _total$1[ebp]
	xor	edx, edx
	div	DWORD PTR _kernel_width$[ebp]
	mov	ecx, DWORD PTR _pixels$[ebp]
	add	ecx, DWORD PTR _i$2[ebp]
	mov	BYTE PTR [ecx], al

; 10968:         }

	jmp	SHORT $LN2@nk_tt__h_p
$LN1@nk_tt__h_p:

; 10969:         pixels += stride_in_bytes;

	mov	eax, DWORD PTR _pixels$[ebp]
	add	eax, DWORD PTR _stride_in_bytes$[ebp]
	mov	DWORD PTR _pixels$[ebp], eax

; 10970:     }

	jmp	$LN27@nk_tt__h_p
$LN29@nk_tt__h_p:

; 10971: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@nk_tt__h_p
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN34@nk_tt__h_p:
	DD	1
	DD	$LN33@nk_tt__h_p
$LN33@nk_tt__h_p:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN32@nk_tt__h_p
$LN32@nk_tt__h_p:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
	npad	1
$LN35@nk_tt__h_p:
	DD	$LN23@nk_tt__h_p
	DD	$LN19@nk_tt__h_p
	DD	$LN15@nk_tt__h_p
	DD	$LN11@nk_tt__h_p
_nk_tt__h_prefilter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_PackSetOversampling
_TEXT	SEGMENT
_spc$ = 8						; size = 4
_h_oversample$ = 12					; size = 4
_v_oversample$ = 16					; size = 4
_nk_tt_PackSetOversampling PROC				; COMDAT

; 10900: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10901:    NK_ASSERT(h_oversample <= NK_TT_MAX_OVERSAMPLE);

	cmp	DWORD PTR _h_oversample$[ebp], 8
	jbe	SHORT $LN5@nk_tt_Pack
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_tt_PackSetOversampling@@9@9@ddf8d5d8
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CE@OKIIJOOA@?$AAh?$AA_?$AAo?$AAv?$AAe?$AAr?$AAs?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA8?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_tt_Pack:

; 10902:    NK_ASSERT(v_oversample <= NK_TT_MAX_OVERSAMPLE);

	cmp	DWORD PTR _v_oversample$[ebp], 8
	jbe	SHORT $LN6@nk_tt_Pack
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_tt_PackSetOversampling@@9@9@ddf8d5d8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CE@LCKJLKGO@?$AAv?$AA_?$AAo?$AAv?$AAe?$AAr?$AAs?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA8?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_tt_Pack:

; 10903:    if (h_oversample <= NK_TT_MAX_OVERSAMPLE)

	cmp	DWORD PTR _h_oversample$[ebp], 8
	ja	SHORT $LN2@nk_tt_Pack

; 10904:       spc->h_oversample = h_oversample;

	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR _h_oversample$[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN2@nk_tt_Pack:

; 10905:    if (v_oversample <= NK_TT_MAX_OVERSAMPLE)

	cmp	DWORD PTR _v_oversample$[ebp], 8
	ja	SHORT $LN3@nk_tt_Pack

; 10906:       spc->v_oversample = v_oversample;

	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR _v_oversample$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN3@nk_tt_Pack:

; 10907: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt_PackSetOversampling ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_PackEnd
_TEXT	SEGMENT
_spc$ = 8						; size = 4
_alloc$ = 12						; size = 4
_nk_tt_PackEnd PROC					; COMDAT

; 10892: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10893:     alloc->free(alloc->userdata, spc->nodes);

	mov	esi, esp
	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 10894:     alloc->free(alloc->userdata, spc->pack_info);

	mov	esi, esp
	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 10895: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt_PackEnd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_PackBegin
_TEXT	SEGMENT
tv130 = -232						; size = 4
_nodes$ = -32						; size = 4
_context$ = -20						; size = 4
_num_nodes$ = -8					; size = 4
_spc$ = 8						; size = 4
_pixels$ = 12						; size = 4
_pw$ = 16						; size = 4
_ph$ = 20						; size = 4
_stride_in_bytes$ = 24					; size = 4
_padding$ = 28						; size = 4
_alloc$ = 32						; size = 4
_nk_tt_PackBegin PROC					; COMDAT

; 10861: {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10862:     int num_nodes = pw - padding;

	mov	eax, DWORD PTR _pw$[ebp]
	sub	eax, DWORD PTR _padding$[ebp]
	mov	DWORD PTR _num_nodes$[ebp], eax

; 10863:     struct nk_rp_context *context = (struct nk_rp_context *)
; 10864:         alloc->alloc(alloc->userdata,0, sizeof(*context));

	mov	esi, esp
	push	48					; 00000030H
	push	0
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _context$[ebp], eax

; 10865:     struct nk_rp_node *nodes = (struct nk_rp_node*)
; 10866:         alloc->alloc(alloc->userdata,0, (sizeof(*nodes  ) * (nk_size)num_nodes));

	mov	eax, DWORD PTR _num_nodes$[ebp]
	shl	eax, 3
	mov	esi, esp
	push	eax
	push	0
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nodes$[ebp], eax

; 10867: 
; 10868:     if (context == 0 || nodes == 0) {

	cmp	DWORD PTR _context$[ebp], 0
	je	SHORT $LN4@nk_tt_Pack
	cmp	DWORD PTR _nodes$[ebp], 0
	jne	SHORT $LN5@nk_tt_Pack
$LN4@nk_tt_Pack:

; 10869:         if (context != 0) alloc->free(alloc->userdata, context);

	cmp	DWORD PTR _context$[ebp], 0
	je	SHORT $LN3@nk_tt_Pack
	mov	esi, esp
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@nk_tt_Pack:

; 10870:         if (nodes   != 0) alloc->free(alloc->userdata, nodes);

	cmp	DWORD PTR _nodes$[ebp], 0
	je	SHORT $LN2@nk_tt_Pack
	mov	esi, esp
	mov	eax, DWORD PTR _nodes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@nk_tt_Pack:

; 10871:         return 0;

	xor	eax, eax
	jmp	$LN6@nk_tt_Pack
$LN5@nk_tt_Pack:

; 10872:     }
; 10873: 
; 10874:     spc->width = pw;

	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR _pw$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 10875:     spc->height = ph;

	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR _ph$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 10876:     spc->pixels = pixels;

	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR _pixels$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 10877:     spc->pack_info = context;

	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR _context$[ebp]
	mov	DWORD PTR [eax], ecx

; 10878:     spc->nodes = nodes;

	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR _nodes$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 10879:     spc->padding = padding;

	mov	eax, DWORD PTR _spc$[ebp]
	mov	ecx, DWORD PTR _padding$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 10880:     spc->stride_in_bytes = (stride_in_bytes != 0) ? stride_in_bytes : pw;

	cmp	DWORD PTR _stride_in_bytes$[ebp], 0
	je	SHORT $LN8@nk_tt_Pack
	mov	eax, DWORD PTR _stride_in_bytes$[ebp]
	mov	DWORD PTR tv130[ebp], eax
	jmp	SHORT $LN9@nk_tt_Pack
$LN8@nk_tt_Pack:
	mov	ecx, DWORD PTR _pw$[ebp]
	mov	DWORD PTR tv130[ebp], ecx
$LN9@nk_tt_Pack:
	mov	edx, DWORD PTR _spc$[ebp]
	mov	eax, DWORD PTR tv130[ebp]
	mov	DWORD PTR [edx+12], eax

; 10881:     spc->h_oversample = 1;

	mov	eax, DWORD PTR _spc$[ebp]
	mov	DWORD PTR [eax+20], 1

; 10882:     spc->v_oversample = 1;

	mov	eax, DWORD PTR _spc$[ebp]
	mov	DWORD PTR [eax+24], 1

; 10883: 
; 10884:     nk_rp_init_target(context, pw-padding, ph-padding, nodes, num_nodes);

	mov	eax, DWORD PTR _num_nodes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nodes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ph$[ebp]
	sub	edx, DWORD PTR _padding$[ebp]
	push	edx
	mov	eax, DWORD PTR _pw$[ebp]
	sub	eax, DWORD PTR _padding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	call	_nk_rp_init_target
	add	esp, 20					; 00000014H

; 10885:     if (pixels)

	cmp	DWORD PTR _pixels$[ebp], 0
	je	SHORT $LN1@nk_tt_Pack

; 10886:         NK_MEMSET(pixels, 0, (nk_size)(pw*ph)); /* background of 0 around pixels */

	mov	eax, DWORD PTR _pw$[ebp]
	imul	eax, DWORD PTR _ph$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pixels$[ebp]
	push	ecx
	call	_nk_memset
	add	esp, 12					; 0000000cH
$LN1@nk_tt_Pack:

; 10887:     return 1;

	mov	eax, 1
$LN6@nk_tt_Pack:

; 10888: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt_PackBegin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_MakeGlyphBitmapSubpixel
_TEXT	SEGMENT
_gbm$ = -68						; size = 16
_num_verts$ = -44					; size = 4
_vertices$ = -32					; size = 4
_iy0$ = -20						; size = 4
_ix0$ = -8						; size = 4
_info$ = 8						; size = 4
_output$ = 12						; size = 4
_out_w$ = 16						; size = 4
_out_h$ = 20						; size = 4
_out_stride$ = 24					; size = 4
_scale_x$ = 28						; size = 4
_scale_y$ = 32						; size = 4
_shift_x$ = 36						; size = 4
_shift_y$ = 40						; size = 4
_glyph$ = 44						; size = 4
_alloc$ = 48						; size = 4
_nk_tt_MakeGlyphBitmapSubpixel PROC			; COMDAT

; 10836: {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10837:     int ix0,iy0;
; 10838:     struct nk_tt_vertex *vertices;
; 10839:     int num_verts = nk_tt_GetGlyphShape(info, alloc, glyph, &vertices);

	lea	eax, DWORD PTR _vertices$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _info$[ebp]
	push	eax
	call	_nk_tt_GetGlyphShape
	add	esp, 16					; 00000010H
	mov	DWORD PTR _num_verts$[ebp], eax

; 10840:     struct nk_tt__bitmap gbm;
; 10841: 
; 10842:     nk_tt_GetGlyphBitmapBoxSubpixel(info, glyph, scale_x, scale_y, shift_x,
; 10843:         shift_y, &ix0,&iy0,0,0);

	push	0
	push	0
	lea	eax, DWORD PTR _iy0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ix0$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _shift_y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _shift_x$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scale_y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scale_x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _glyph$[ebp]
	push	edx
	mov	eax, DWORD PTR _info$[ebp]
	push	eax
	call	_nk_tt_GetGlyphBitmapBoxSubpixel
	add	esp, 40					; 00000028H

; 10844:     gbm.pixels = output;

	mov	eax, DWORD PTR _output$[ebp]
	mov	DWORD PTR _gbm$[ebp+12], eax

; 10845:     gbm.w = out_w;

	mov	eax, DWORD PTR _out_w$[ebp]
	mov	DWORD PTR _gbm$[ebp], eax

; 10846:     gbm.h = out_h;

	mov	eax, DWORD PTR _out_h$[ebp]
	mov	DWORD PTR _gbm$[ebp+4], eax

; 10847:     gbm.stride = out_stride;

	mov	eax, DWORD PTR _out_stride$[ebp]
	mov	DWORD PTR _gbm$[ebp+8], eax

; 10848: 
; 10849:     if (gbm.w && gbm.h)

	cmp	DWORD PTR _gbm$[ebp], 0
	je	SHORT $LN1@nk_tt_Make
	cmp	DWORD PTR _gbm$[ebp+4], 0
	je	SHORT $LN1@nk_tt_Make

; 10850:         nk_tt_Rasterize(&gbm, 0.35f, vertices, num_verts, scale_x, scale_y,
; 10851:             shift_x, shift_y, ix0,iy0, 1, alloc);

	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _iy0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ix0$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _shift_y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _shift_x$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scale_y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scale_x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _num_verts$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vertices$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@3eb33333
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _gbm$[ebp]
	push	edx
	call	_nk_tt_Rasterize
	add	esp, 48					; 00000030H
$LN1@nk_tt_Make:

; 10852:     alloc->free(alloc->userdata, vertices);

	mov	esi, esp
	mov	eax, DWORD PTR _vertices$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 10853: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@nk_tt_Make
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@nk_tt_Make:
	DD	4
	DD	$LN8@nk_tt_Make
$LN8@nk_tt_Make:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@nk_tt_Make
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@nk_tt_Make
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN6@nk_tt_Make
	DD	-68					; ffffffbcH
	DD	16					; 00000010H
	DD	$LN7@nk_tt_Make
$LN7@nk_tt_Make:
	DB	103					; 00000067H
	DB	98					; 00000062H
	DB	109					; 0000006dH
	DB	0
$LN6@nk_tt_Make:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN5@nk_tt_Make:
	DB	105					; 00000069H
	DB	121					; 00000079H
	DB	48					; 00000030H
	DB	0
$LN4@nk_tt_Make:
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	48					; 00000030H
	DB	0
_nk_tt_MakeGlyphBitmapSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_Rasterize
_TEXT	SEGMENT
tv65 = -244						; size = 4
_windings$ = -44					; size = 4
_winding_lengths$ = -32					; size = 4
_winding_count$ = -20					; size = 4
_scale$ = -8						; size = 4
_result$ = 8						; size = 4
_flatness_in_pixels$ = 12				; size = 4
_vertices$ = 16						; size = 4
_num_verts$ = 20					; size = 4
_scale_x$ = 24						; size = 4
_scale_y$ = 28						; size = 4
_shift_x$ = 32						; size = 4
_shift_y$ = 36						; size = 4
_x_off$ = 40						; size = 4
_y_off$ = 44						; size = 4
_invert$ = 48						; size = 4
_alloc$ = 52						; size = 4
_nk_tt_Rasterize PROC					; COMDAT

; 10817: {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10818:     float scale = scale_x > scale_y ? scale_y : scale_x;

	movss	xmm0, DWORD PTR _scale_x$[ebp]
	comiss	xmm0, DWORD PTR _scale_y$[ebp]
	jbe	SHORT $LN4@nk_tt_Rast
	movss	xmm0, DWORD PTR _scale_y$[ebp]
	movss	DWORD PTR tv65[ebp], xmm0
	jmp	SHORT $LN5@nk_tt_Rast
$LN4@nk_tt_Rast:
	movss	xmm0, DWORD PTR _scale_x$[ebp]
	movss	DWORD PTR tv65[ebp], xmm0
$LN5@nk_tt_Rast:
	movss	xmm0, DWORD PTR tv65[ebp]
	movss	DWORD PTR _scale$[ebp], xmm0

; 10819:     int winding_count, *winding_lengths;
; 10820:     struct nk_tt__point *windings = nk_tt_FlattenCurves(vertices, num_verts,
; 10821:         flatness_in_pixels / scale, &winding_lengths, &winding_count, alloc);

	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	lea	ecx, DWORD PTR _winding_count$[ebp]
	push	ecx
	lea	edx, DWORD PTR _winding_lengths$[ebp]
	push	edx
	movss	xmm0, DWORD PTR _flatness_in_pixels$[ebp]
	divss	xmm0, DWORD PTR _scale$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _num_verts$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vertices$[ebp]
	push	ecx
	call	_nk_tt_FlattenCurves
	add	esp, 24					; 00000018H
	mov	DWORD PTR _windings$[ebp], eax

; 10822: 
; 10823:     NK_ASSERT(alloc);

	cmp	DWORD PTR _alloc$[ebp], 0
	jne	SHORT $LN6@nk_tt_Rast
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_tt_Rasterize@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KLHDKNJP@?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_tt_Rast:

; 10824:     if (windings) {

	cmp	DWORD PTR _windings$[ebp], 0
	je	$LN1@nk_tt_Rast

; 10825:         nk_tt__rasterize(result, windings, winding_lengths, winding_count,
; 10826:             scale_x, scale_y, shift_x, shift_y, x_off, y_off, invert, alloc);

	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _invert$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_off$[ebp]
	push	edx
	mov	eax, DWORD PTR _x_off$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _shift_y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _shift_x$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scale_y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scale_x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _winding_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _winding_lengths$[ebp]
	push	edx
	mov	eax, DWORD PTR _windings$[ebp]
	push	eax
	mov	ecx, DWORD PTR _result$[ebp]
	push	ecx
	call	_nk_tt__rasterize
	add	esp, 48					; 00000030H

; 10827:         alloc->free(alloc->userdata, winding_lengths);

	mov	esi, esp
	mov	eax, DWORD PTR _winding_lengths$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 10828:         alloc->free(alloc->userdata, windings);

	mov	esi, esp
	mov	eax, DWORD PTR _windings$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@nk_tt_Rast:

; 10829:     }
; 10830: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@nk_tt_Rast
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@nk_tt_Rast:
	DD	2
	DD	$LN9@nk_tt_Rast
$LN9@nk_tt_Rast:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN7@nk_tt_Rast
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@nk_tt_Rast
$LN8@nk_tt_Rast:
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	0
$LN7@nk_tt_Rast:
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_nk_tt_Rasterize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_FlattenCurves
_TEXT	SEGMENT
tv166 = -304						; size = 4
tv150 = -304						; size = 4
tv131 = -304						; size = 4
_y$1 = -104						; size = 4
_x$2 = -92						; size = 4
_pass$ = -80						; size = 4
_start$ = -68						; size = 4
_n$ = -56						; size = 4
_i$ = -44						; size = 4
_objspace_flatness_squared$ = -32			; size = 4
_num_points$ = -20					; size = 4
_points$ = -8						; size = 4
_vertices$ = 8						; size = 4
_num_verts$ = 12					; size = 4
_objspace_flatness$ = 16				; size = 4
_contour_lengths$ = 20					; size = 4
_num_contours$ = 24					; size = 4
_alloc$ = 28						; size = 4
_nk_tt_FlattenCurves PROC				; COMDAT

; 10738: {

	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10739:     struct nk_tt__point *points=0;

	mov	DWORD PTR _points$[ebp], 0

; 10740:     int num_points=0;

	mov	DWORD PTR _num_points$[ebp], 0

; 10741:     float objspace_flatness_squared = objspace_flatness * objspace_flatness;

	movss	xmm0, DWORD PTR _objspace_flatness$[ebp]
	mulss	xmm0, DWORD PTR _objspace_flatness$[ebp]
	movss	DWORD PTR _objspace_flatness_squared$[ebp], xmm0

; 10742:     int i;
; 10743:     int n=0;

	mov	DWORD PTR _n$[ebp], 0

; 10744:     int start=0;

	mov	DWORD PTR _start$[ebp], 0

; 10745:     int pass;
; 10746: 
; 10747:     /* count how many "moves" there are to get the contour count */
; 10748:     for (i=0; i < num_verts; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN21@nk_tt_Flat
$LN20@nk_tt_Flat:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN21@nk_tt_Flat:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_verts$[ebp]
	jge	SHORT $LN19@nk_tt_Flat

; 10749:         if (vertices[i].type == NK_TT_vmove) ++n;

	imul	eax, DWORD PTR _i$[ebp], 10
	mov	ecx, DWORD PTR _vertices$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+8]
	cmp	edx, 1
	jne	SHORT $LN18@nk_tt_Flat
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN18@nk_tt_Flat:

; 10750: 
; 10751:     *num_contours = n;

	jmp	SHORT $LN20@nk_tt_Flat
$LN19@nk_tt_Flat:
	mov	eax, DWORD PTR _num_contours$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax], ecx

; 10752:     if (n == 0) return 0;

	cmp	DWORD PTR _n$[ebp], 0
	jne	SHORT $LN17@nk_tt_Flat
	xor	eax, eax
	jmp	$LN22@nk_tt_Flat
$LN17@nk_tt_Flat:

; 10753: 
; 10754:     *contour_lengths = (int *)
; 10755:         alloc->alloc(alloc->userdata,0, (sizeof(**contour_lengths) * (nk_size)n));

	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	push	0
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _contour_lengths$[ebp]
	mov	DWORD PTR [edx], eax

; 10756:     if (*contour_lengths == 0) {

	mov	eax, DWORD PTR _contour_lengths$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN16@nk_tt_Flat

; 10757:         *num_contours = 0;

	mov	eax, DWORD PTR _num_contours$[ebp]
	mov	DWORD PTR [eax], 0

; 10758:         return 0;

	xor	eax, eax
	jmp	$LN22@nk_tt_Flat
$LN16@nk_tt_Flat:

; 10759:     }
; 10760: 
; 10761:     /* make two passes through the points so we don't need to realloc */
; 10762:     for (pass=0; pass < 2; ++pass)

	mov	DWORD PTR _pass$[ebp], 0
	jmp	SHORT $LN15@nk_tt_Flat
$LN14@nk_tt_Flat:
	mov	eax, DWORD PTR _pass$[ebp]
	add	eax, 1
	mov	DWORD PTR _pass$[ebp], eax
$LN15@nk_tt_Flat:
	cmp	DWORD PTR _pass$[ebp], 2
	jge	$LN13@nk_tt_Flat

; 10763:     {
; 10764:         float x=0,y=0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _x$2[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _y$1[ebp], xmm0

; 10765:         if (pass == 1) {

	cmp	DWORD PTR _pass$[ebp], 1
	jne	SHORT $LN11@nk_tt_Flat

; 10766:             points = (struct nk_tt__point *)
; 10767:                 alloc->alloc(alloc->userdata,0, (nk_size)num_points * sizeof(points[0]));

	mov	eax, DWORD PTR _num_points$[ebp]
	shl	eax, 3
	mov	esi, esp
	push	eax
	push	0
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _points$[ebp], eax

; 10768:             if (points == 0) goto error;

	cmp	DWORD PTR _points$[ebp], 0
	jne	SHORT $LN11@nk_tt_Flat
	jmp	$error$27
$LN11@nk_tt_Flat:

; 10769:         }
; 10770:         num_points = 0;

	mov	DWORD PTR _num_points$[ebp], 0

; 10771:         n= -1;

	mov	DWORD PTR _n$[ebp], -1

; 10772: 
; 10773:         for (i=0; i < num_verts; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@nk_tt_Flat
$LN9@nk_tt_Flat:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@nk_tt_Flat:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_verts$[ebp]
	jge	$LN8@nk_tt_Flat

; 10774:         {
; 10775:             switch (vertices[i].type) {

	imul	eax, DWORD PTR _i$[ebp], 10
	mov	ecx, DWORD PTR _vertices$[ebp]
	mov	dl, BYTE PTR [ecx+eax+8]
	mov	BYTE PTR tv131[ebp], dl
	cmp	BYTE PTR tv131[ebp], 1
	je	SHORT $LN5@nk_tt_Flat
	cmp	BYTE PTR tv131[ebp], 2
	je	$LN3@nk_tt_Flat
	cmp	BYTE PTR tv131[ebp], 3
	je	$LN2@nk_tt_Flat
	jmp	$LN1@nk_tt_Flat
$LN5@nk_tt_Flat:

; 10776:             case NK_TT_vmove:
; 10777:                 /* start the next contour */
; 10778:                 if (n >= 0)

	cmp	DWORD PTR _n$[ebp], 0
	jl	SHORT $LN4@nk_tt_Flat

; 10779:                 (*contour_lengths)[n] = num_points - start;

	mov	eax, DWORD PTR _num_points$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _contour_lengths$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN4@nk_tt_Flat:

; 10780:                 ++n;

	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax

; 10781:                 start = num_points;

	mov	eax, DWORD PTR _num_points$[ebp]
	mov	DWORD PTR _start$[ebp], eax

; 10782: 
; 10783:                 x = vertices[i].x, y = vertices[i].y;

	imul	eax, DWORD PTR _i$[ebp], 10
	mov	ecx, DWORD PTR _vertices$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _x$2[ebp], xmm0
	imul	eax, DWORD PTR _i$[ebp], 10
	mov	ecx, DWORD PTR _vertices$[ebp]
	movsx	edx, WORD PTR [ecx+eax+2]
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _y$1[ebp], xmm0

; 10784:                 nk_tt__add_point(points, num_points++, x,y);

	mov	eax, DWORD PTR _num_points$[ebp]
	mov	DWORD PTR tv150[ebp], eax
	mov	ecx, DWORD PTR _num_points$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num_points$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _y$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$2[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR tv150[ebp]
	push	edx
	mov	eax, DWORD PTR _points$[ebp]
	push	eax
	call	_nk_tt__add_point
	add	esp, 16					; 00000010H

; 10785:                 break;

	jmp	$LN6@nk_tt_Flat
$LN3@nk_tt_Flat:

; 10786:             case NK_TT_vline:
; 10787:                x = vertices[i].x, y = vertices[i].y;

	imul	eax, DWORD PTR _i$[ebp], 10
	mov	ecx, DWORD PTR _vertices$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _x$2[ebp], xmm0
	imul	eax, DWORD PTR _i$[ebp], 10
	mov	ecx, DWORD PTR _vertices$[ebp]
	movsx	edx, WORD PTR [ecx+eax+2]
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _y$1[ebp], xmm0

; 10788:                nk_tt__add_point(points, num_points++, x, y);

	mov	eax, DWORD PTR _num_points$[ebp]
	mov	DWORD PTR tv166[ebp], eax
	mov	ecx, DWORD PTR _num_points$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num_points$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _y$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$2[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR tv166[ebp]
	push	edx
	mov	eax, DWORD PTR _points$[ebp]
	push	eax
	call	_nk_tt__add_point
	add	esp, 16					; 00000010H

; 10789:                break;

	jmp	$LN6@nk_tt_Flat
$LN2@nk_tt_Flat:

; 10790:             case NK_TT_vcurve:
; 10791:                nk_tt__tesselate_curve(points, &num_points, x,y,
; 10792:                                         vertices[i].cx, vertices[i].cy,
; 10793:                                         vertices[i].x,  vertices[i].y,
; 10794:                                         objspace_flatness_squared, 0);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR _objspace_flatness_squared$[ebp]
	movss	DWORD PTR [esp], xmm0
	imul	eax, DWORD PTR _i$[ebp], 10
	mov	ecx, DWORD PTR _vertices$[ebp]
	movsx	edx, WORD PTR [ecx+eax+2]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	imul	eax, DWORD PTR _i$[ebp], 10
	mov	ecx, DWORD PTR _vertices$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	imul	eax, DWORD PTR _i$[ebp], 10
	mov	ecx, DWORD PTR _vertices$[ebp]
	movsx	edx, WORD PTR [ecx+eax+6]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	imul	eax, DWORD PTR _i$[ebp], 10
	mov	ecx, DWORD PTR _vertices$[ebp]
	movsx	edx, WORD PTR [ecx+eax+4]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$2[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _num_points$[ebp]
	push	eax
	mov	ecx, DWORD PTR _points$[ebp]
	push	ecx
	call	_nk_tt__tesselate_curve
	add	esp, 40					; 00000028H

; 10795:                x = vertices[i].x, y = vertices[i].y;

	imul	eax, DWORD PTR _i$[ebp], 10
	mov	ecx, DWORD PTR _vertices$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _x$2[ebp], xmm0
	imul	eax, DWORD PTR _i$[ebp], 10
	mov	ecx, DWORD PTR _vertices$[ebp]
	movsx	edx, WORD PTR [ecx+eax+2]
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _y$1[ebp], xmm0
$LN1@nk_tt_Flat:
$LN6@nk_tt_Flat:

; 10796:                break;
; 10797:             default: break;
; 10798:          }
; 10799:       }

	jmp	$LN9@nk_tt_Flat
$LN8@nk_tt_Flat:

; 10800:       (*contour_lengths)[n] = num_points - start;

	mov	eax, DWORD PTR _num_points$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _contour_lengths$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 10801:    }

	jmp	$LN14@nk_tt_Flat
$LN13@nk_tt_Flat:

; 10802:    return points;

	mov	eax, DWORD PTR _points$[ebp]
	jmp	SHORT $LN22@nk_tt_Flat
$error$27:

; 10803: 
; 10804: error:
; 10805:    alloc->free(alloc->userdata, points);

	mov	esi, esp
	mov	eax, DWORD PTR _points$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 10806:    alloc->free(alloc->userdata, *contour_lengths);

	mov	esi, esp
	mov	eax, DWORD PTR _contour_lengths$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 10807:    *contour_lengths = 0;

	mov	eax, DWORD PTR _contour_lengths$[ebp]
	mov	DWORD PTR [eax], 0

; 10808:    *num_contours = 0;

	mov	eax, DWORD PTR _num_contours$[ebp]
	mov	DWORD PTR [eax], 0

; 10809:    return 0;

	xor	eax, eax
$LN22@nk_tt_Flat:

; 10810: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@nk_tt_Flat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@nk_tt_Flat:
	DD	1
	DD	$LN25@nk_tt_Flat
$LN25@nk_tt_Flat:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN24@nk_tt_Flat
$LN24@nk_tt_Flat:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_nk_tt_FlattenCurves ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt__tesselate_curve
_TEXT	SEGMENT
_dy$ = -44						; size = 4
_dx$ = -32						; size = 4
_my$ = -20						; size = 4
_mx$ = -8						; size = 4
_points$ = 8						; size = 4
_num_points$ = 12					; size = 4
_x0$ = 16						; size = 4
_y0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_x2$ = 32						; size = 4
_y2$ = 36						; size = 4
_objspace_flatness_squared$ = 40			; size = 4
_n$ = 44						; size = 4
_nk_tt__tesselate_curve PROC				; COMDAT

; 10708: {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10709:     /* tesselate until threshold p is happy...
; 10710:      * @TODO warped to compensate for non-linear stretching */
; 10711:     /* midpoint */
; 10712:     float mx = (x0 + 2*x1 + x2)/4;

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _x1$[ebp]
	addss	xmm0, DWORD PTR _x0$[ebp]
	addss	xmm0, DWORD PTR _x2$[ebp]
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR _mx$[ebp], xmm0

; 10713:     float my = (y0 + 2*y1 + y2)/4;

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _y1$[ebp]
	addss	xmm0, DWORD PTR _y0$[ebp]
	addss	xmm0, DWORD PTR _y2$[ebp]
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR _my$[ebp], xmm0

; 10714:     /* versus directly drawn line */
; 10715:     float dx = (x0+x2)/2 - mx;

	movss	xmm0, DWORD PTR _x0$[ebp]
	addss	xmm0, DWORD PTR _x2$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR _mx$[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 10716:     float dy = (y0+y2)/2 - my;

	movss	xmm0, DWORD PTR _y0$[ebp]
	addss	xmm0, DWORD PTR _y2$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR _my$[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 10717:     if (n > 16) /* 65536 segments on one curve better be enough! */

	cmp	DWORD PTR _n$[ebp], 16			; 00000010H
	jle	SHORT $LN3@nk_tt__tes

; 10718:         return 1;

	mov	eax, 1
	jmp	$LN4@nk_tt__tes
$LN3@nk_tt__tes:

; 10719: 
; 10720:     /* half-pixel error allowed... need to be smaller if AA */
; 10721:     if (dx*dx+dy*dy > objspace_flatness_squared) {

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	comiss	xmm0, DWORD PTR _objspace_flatness_squared$[ebp]
	jbe	$LN2@nk_tt__tes

; 10722:         nk_tt__tesselate_curve(points, num_points, x0,y0,
; 10723:             (x0+x1)/2.0f,(y0+y1)/2.0f, mx,my, objspace_flatness_squared,n+1);

	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _objspace_flatness_squared$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _my$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mx$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	addss	xmm0, DWORD PTR _y1$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x0$[ebp]
	addss	xmm0, DWORD PTR _x1$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y0$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x0$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _num_points$[ebp]
	push	ecx
	mov	edx, DWORD PTR _points$[ebp]
	push	edx
	call	_nk_tt__tesselate_curve
	add	esp, 40					; 00000028H

; 10724:         nk_tt__tesselate_curve(points, num_points, mx,my,
; 10725:             (x1+x2)/2.0f,(y1+y2)/2.0f, x2,y2, objspace_flatness_squared,n+1);

	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _objspace_flatness_squared$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x2$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _y1$[ebp]
	addss	xmm0, DWORD PTR _y2$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x1$[ebp]
	addss	xmm0, DWORD PTR _x2$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _my$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _num_points$[ebp]
	push	ecx
	mov	edx, DWORD PTR _points$[ebp]
	push	edx
	call	_nk_tt__tesselate_curve
	add	esp, 40					; 00000028H

; 10726:     } else {

	jmp	SHORT $LN1@nk_tt__tes
$LN2@nk_tt__tes:

; 10727:         nk_tt__add_point(points, *num_points,x2,y2);

	push	ecx
	movss	xmm0, DWORD PTR _y2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x2$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _num_points$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _points$[ebp]
	push	edx
	call	_nk_tt__add_point
	add	esp, 16					; 00000010H

; 10728:         *num_points = *num_points+1;

	mov	eax, DWORD PTR _num_points$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _num_points$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@nk_tt__tes:

; 10729:     }
; 10730:     return 1;

	mov	eax, 1
$LN4@nk_tt__tes:

; 10731: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt__tesselate_curve ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt__add_point
_TEXT	SEGMENT
_points$ = 8						; size = 4
_n$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_nk_tt__add_point PROC					; COMDAT

; 10698: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10699:     if (!points) return; /* during first pass, it's unallocated */

	cmp	DWORD PTR _points$[ebp], 0
	jne	SHORT $LN1@nk_tt__add
	jmp	SHORT $LN2@nk_tt__add
$LN1@nk_tt__add:

; 10700:     points[n].x = x;

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [ecx+eax*8], xmm0

; 10701:     points[n].y = y;

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx+eax*8+4], xmm0
$LN2@nk_tt__add:

; 10702: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt__add_point ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt__rasterize
_TEXT	SEGMENT
tv151 = -336						; size = 4
tv154 = -332						; size = 4
tv152 = -328						; size = 4
tv66 = -328						; size = 4
_b$1 = -128						; size = 4
_a$2 = -116						; size = 4
_p$3 = -104						; size = 4
_vsubsample$ = -92					; size = 4
_m$ = -80						; size = 4
_k$ = -68						; size = 4
_j$ = -56						; size = 4
_i$ = -44						; size = 4
_n$ = -32						; size = 4
_e$ = -20						; size = 4
_y_scale_inv$ = -8					; size = 4
_result$ = 8						; size = 4
_pts$ = 12						; size = 4
_wcount$ = 16						; size = 4
_windings$ = 20						; size = 4
_scale_x$ = 24						; size = 4
_scale_y$ = 28						; size = 4
_shift_x$ = 32						; size = 4
_shift_y$ = 36						; size = 4
_off_x$ = 40						; size = 4
_off_y$ = 44						; size = 4
_invert$ = 48						; size = 4
_alloc$ = 52						; size = 4
_nk_tt__rasterize PROC					; COMDAT

; 10645: {

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10646:     float y_scale_inv = invert ? -scale_y : scale_y;

	cmp	DWORD PTR _invert$[ebp], 0
	je	SHORT $LN15@nk_tt__ras
	movss	xmm0, DWORD PTR _scale_y$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[ebp], xmm0
	jmp	SHORT $LN16@nk_tt__ras
$LN15@nk_tt__ras:
	movss	xmm0, DWORD PTR _scale_y$[ebp]
	movss	DWORD PTR tv66[ebp], xmm0
$LN16@nk_tt__ras:
	movss	xmm0, DWORD PTR tv66[ebp]
	movss	DWORD PTR _y_scale_inv$[ebp], xmm0

; 10647:     struct nk_tt__edge *e;
; 10648:     int n,i,j,k,m;
; 10649:     int vsubsample = 1;

	mov	DWORD PTR _vsubsample$[ebp], 1

; 10650:     /* vsubsample should divide 255 evenly; otherwise we won't reach full opacity */
; 10651: 
; 10652:     /* now we have to blow out the windings into explicit edge lists */
; 10653:     n = 0;

	mov	DWORD PTR _n$[ebp], 0

; 10654:     for (i=0; i < windings; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@nk_tt__ras
$LN11@nk_tt__ras:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@nk_tt__ras:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _windings$[ebp]
	jge	SHORT $LN10@nk_tt__ras

; 10655:         n += wcount[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _wcount$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _n$[ebp], edx
	jmp	SHORT $LN11@nk_tt__ras
$LN10@nk_tt__ras:

; 10656: 
; 10657:     e = (struct nk_tt__edge*)
; 10658:        alloc->alloc(alloc->userdata, 0,(sizeof(*e) * (nk_size)(n+1)));

	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	imul	ecx, eax, 20
	mov	esi, esp
	push	ecx
	push	0
	mov	edx, DWORD PTR _alloc$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _e$[ebp], eax

; 10659:     if (e == 0) return;

	cmp	DWORD PTR _e$[ebp], 0
	jne	SHORT $LN9@nk_tt__ras
	jmp	$LN13@nk_tt__ras
$LN9@nk_tt__ras:

; 10660:     n = 0;

	mov	DWORD PTR _n$[ebp], 0

; 10661: 
; 10662:     m=0;

	mov	DWORD PTR _m$[ebp], 0

; 10663:     for (i=0; i < windings; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@nk_tt__ras
$LN7@nk_tt__ras:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@nk_tt__ras:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _windings$[ebp]
	jge	$LN6@nk_tt__ras

; 10664:     {
; 10665:         struct nk_tt__point *p = pts + m;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _pts$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _p$3[ebp], edx

; 10666:         m += wcount[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _wcount$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _m$[ebp], edx

; 10667:         j = wcount[i]-1;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _wcount$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx

; 10668:         for (k=0; k < wcount[i]; j=k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN5@nk_tt__ras
$LN4@nk_tt__ras:
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx
$LN5@nk_tt__ras:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _wcount$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	cmp	edx, DWORD PTR [ecx+eax*4]
	jge	$LN3@nk_tt__ras

; 10669:             int a=k,b=j;

	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _a$2[ebp], eax
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _b$1[ebp], eax

; 10670:             /* skip the edge if horizontal */
; 10671:             if (p[j].y == p[k].y)

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _p$3[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	esi, DWORD PTR _p$3[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	ucomiss	xmm0, DWORD PTR [esi+edx*8+4]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@nk_tt__ras

; 10672:                 continue;

	jmp	SHORT $LN4@nk_tt__ras
$LN2@nk_tt__ras:

; 10673: 
; 10674:             /* add edge from j to k to the list */
; 10675:             e[n].invert = 0;

	imul	eax, DWORD PTR _n$[ebp], 20
	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR [ecx+eax+16], 0

; 10676:             if (invert ? p[j].y > p[k].y : p[j].y < p[k].y) {

	cmp	DWORD PTR _invert$[ebp], 0
	je	SHORT $LN21@nk_tt__ras
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _p$3[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	esi, DWORD PTR _p$3[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	comiss	xmm0, DWORD PTR [esi+edx*8+4]
	jbe	SHORT $LN19@nk_tt__ras
	mov	DWORD PTR tv152[ebp], 1
	jmp	SHORT $LN20@nk_tt__ras
$LN19@nk_tt__ras:
	mov	DWORD PTR tv152[ebp], 0
$LN20@nk_tt__ras:
	mov	eax, DWORD PTR tv152[ebp]
	mov	DWORD PTR tv154[ebp], eax
	jmp	SHORT $LN22@nk_tt__ras
$LN21@nk_tt__ras:
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _p$3[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _p$3[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*8+4]
	comiss	xmm0, DWORD PTR [esi+eax*8+4]
	jbe	SHORT $LN17@nk_tt__ras
	mov	DWORD PTR tv151[ebp], 1
	jmp	SHORT $LN18@nk_tt__ras
$LN17@nk_tt__ras:
	mov	DWORD PTR tv151[ebp], 0
$LN18@nk_tt__ras:
	mov	ecx, DWORD PTR tv151[ebp]
	mov	DWORD PTR tv154[ebp], ecx
$LN22@nk_tt__ras:
	cmp	DWORD PTR tv154[ebp], 0
	je	SHORT $LN1@nk_tt__ras

; 10677:                 e[n].invert = 1;

	imul	eax, DWORD PTR _n$[ebp], 20
	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR [ecx+eax+16], 1

; 10678:                 a=j,b=k;

	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _a$2[ebp], eax
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _b$1[ebp], ecx
$LN1@nk_tt__ras:

; 10679:             }
; 10680:             e[n].x0 = p[a].x * scale_x + shift_x;

	mov	eax, DWORD PTR _a$2[ebp]
	mov	ecx, DWORD PTR _p$3[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8]
	mulss	xmm0, DWORD PTR _scale_x$[ebp]
	addss	xmm0, DWORD PTR _shift_x$[ebp]
	imul	edx, DWORD PTR _n$[ebp], 20
	mov	eax, DWORD PTR _e$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 10681:             e[n].y0 = (p[a].y * y_scale_inv + shift_y) * (float)vsubsample;

	mov	eax, DWORD PTR _a$2[ebp]
	mov	ecx, DWORD PTR _p$3[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	mulss	xmm0, DWORD PTR _y_scale_inv$[ebp]
	addss	xmm0, DWORD PTR _shift_y$[ebp]
	cvtsi2ss xmm1, DWORD PTR _vsubsample$[ebp]
	mulss	xmm0, xmm1
	imul	edx, DWORD PTR _n$[ebp], 20
	mov	eax, DWORD PTR _e$[ebp]
	movss	DWORD PTR [eax+edx+4], xmm0

; 10682:             e[n].x1 = p[b].x * scale_x + shift_x;

	mov	eax, DWORD PTR _b$1[ebp]
	mov	ecx, DWORD PTR _p$3[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8]
	mulss	xmm0, DWORD PTR _scale_x$[ebp]
	addss	xmm0, DWORD PTR _shift_x$[ebp]
	imul	edx, DWORD PTR _n$[ebp], 20
	mov	eax, DWORD PTR _e$[ebp]
	movss	DWORD PTR [eax+edx+8], xmm0

; 10683:             e[n].y1 = (p[b].y * y_scale_inv + shift_y) * (float)vsubsample;

	mov	eax, DWORD PTR _b$1[ebp]
	mov	ecx, DWORD PTR _p$3[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	mulss	xmm0, DWORD PTR _y_scale_inv$[ebp]
	addss	xmm0, DWORD PTR _shift_y$[ebp]
	cvtsi2ss xmm1, DWORD PTR _vsubsample$[ebp]
	mulss	xmm0, xmm1
	imul	edx, DWORD PTR _n$[ebp], 20
	mov	eax, DWORD PTR _e$[ebp]
	movss	DWORD PTR [eax+edx+12], xmm0

; 10684:             ++n;

	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax

; 10685:         }

	jmp	$LN4@nk_tt__ras
$LN3@nk_tt__ras:

; 10686:     }

	jmp	$LN7@nk_tt__ras
$LN6@nk_tt__ras:

; 10687: 
; 10688:     /* now sort the edges by their highest point (should snap to integer, and then by x) */
; 10689:     /*STBTT_sort(e, n, sizeof(e[0]), stbtt__edge_compare); */
; 10690:     nk_tt__sort_edges(e, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	_nk_tt__sort_edges
	add	esp, 8

; 10691:     /* now, traverse the scanlines and find the intersections on each scanline, use xor winding rule */
; 10692:     nk_tt__rasterize_sorted_edges(result, e, n, vsubsample, off_x, off_y, alloc);

	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _off_y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _off_x$[ebp]
	push	edx
	mov	eax, DWORD PTR _vsubsample$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	call	_nk_tt__rasterize_sorted_edges
	add	esp, 28					; 0000001cH

; 10693:     alloc->free(alloc->userdata, e);

	mov	esi, esp
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@nk_tt__ras:

; 10694: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt__rasterize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt__sort_edges
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$ = 12						; size = 4
_nk_tt__sort_edges PROC					; COMDAT

; 10635: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10636:    nk_tt__sort_edges_quicksort(p, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_nk_tt__sort_edges_quicksort
	add	esp, 8

; 10637:    nk_tt__sort_edges_ins_sort(p, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_nk_tt__sort_edges_ins_sort
	add	esp, 8

; 10638: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt__sort_edges ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt__sort_edges_quicksort
_TEXT	SEGMENT
tv95 = -312						; size = 4
tv92 = -312						; size = 4
tv82 = -312						; size = 4
tv73 = -312						; size = 4
_z$1 = -112						; size = 4
_j$2 = -100						; size = 4
_i$3 = -88						; size = 4
_m$4 = -76						; size = 4
_c$5 = -64						; size = 4
_c12$6 = -52						; size = 4
_c01$7 = -40						; size = 4
_t$8 = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_n$ = 12						; size = 4
_nk_tt__sort_edges_quicksort PROC			; COMDAT

; 10567: {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
$LN16@nk_tt__sor:

; 10568:     /* threshold for transitioning to insertion sort */
; 10569:     while (n > 12) {

	cmp	DWORD PTR _n$[ebp], 12			; 0000000cH
	jle	$LN15@nk_tt__sor

; 10570:         struct nk_tt__edge t;
; 10571:         int c01,c12,c,m,i,j;
; 10572: 
; 10573:         /* compute median of three */
; 10574:         m = n >> 1;

	mov	eax, DWORD PTR _n$[ebp]
	sar	eax, 1
	mov	DWORD PTR _m$4[ebp], eax

; 10575:         c01 = NK_TT__COMPARE(&p[0],&p[m]);

	mov	eax, 20					; 00000014H
	imul	ecx, eax, 0
	imul	edx, DWORD PTR _m$4[ebp], 20
	mov	eax, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+4]
	comiss	xmm0, DWORD PTR [esi+ecx+4]
	jbe	SHORT $LN19@nk_tt__sor
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN20@nk_tt__sor
$LN19@nk_tt__sor:
	mov	DWORD PTR tv73[ebp], 0
$LN20@nk_tt__sor:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR _c01$7[ebp], ecx

; 10576:         c12 = NK_TT__COMPARE(&p[m],&p[n-1]);

	imul	eax, DWORD PTR _m$4[ebp], 20
	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	imul	edx, ecx, 20
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx+4]
	comiss	xmm0, DWORD PTR [esi+eax+4]
	jbe	SHORT $LN21@nk_tt__sor
	mov	DWORD PTR tv82[ebp], 1
	jmp	SHORT $LN22@nk_tt__sor
$LN21@nk_tt__sor:
	mov	DWORD PTR tv82[ebp], 0
$LN22@nk_tt__sor:
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _c12$6[ebp], edx

; 10577: 
; 10578:         /* if 0 >= mid >= end, or 0 < mid < end, then use mid */
; 10579:         if (c01 != c12) {

	mov	eax, DWORD PTR _c01$7[ebp]
	cmp	eax, DWORD PTR _c12$6[ebp]
	je	$LN14@nk_tt__sor

; 10580:             /* otherwise, we'll need to swap something else to middle */
; 10581:             int z;
; 10582:             c = NK_TT__COMPARE(&p[0],&p[n-1]);

	mov	eax, 20					; 00000014H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _n$[ebp]
	sub	edx, 1
	imul	eax, edx, 20
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+4]
	comiss	xmm0, DWORD PTR [esi+ecx+4]
	jbe	SHORT $LN23@nk_tt__sor
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN24@nk_tt__sor
$LN23@nk_tt__sor:
	mov	DWORD PTR tv92[ebp], 0
$LN24@nk_tt__sor:
	mov	eax, DWORD PTR tv92[ebp]
	mov	DWORD PTR _c$5[ebp], eax

; 10583:             /* 0>mid && mid<n:  0>n => n; 0<n => 0 */
; 10584:             /* 0<mid && mid>n:  0>n => 0; 0<n => n */
; 10585:             z = (c == c12) ? 0 : n-1;

	mov	eax, DWORD PTR _c$5[ebp]
	cmp	eax, DWORD PTR _c12$6[ebp]
	jne	SHORT $LN25@nk_tt__sor
	mov	DWORD PTR tv95[ebp], 0
	jmp	SHORT $LN26@nk_tt__sor
$LN25@nk_tt__sor:
	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv95[ebp], ecx
$LN26@nk_tt__sor:
	mov	edx, DWORD PTR tv95[ebp]
	mov	DWORD PTR _z$1[ebp], edx

; 10586:             t = p[z];

	imul	eax, DWORD PTR _z$1[ebp], 20
	add	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _t$8[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t$8[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _t$8[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _t$8[ebp+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR _t$8[ebp+16], eax

; 10587:             p[z] = p[m];

	imul	eax, DWORD PTR _m$4[ebp], 20
	add	eax, DWORD PTR _p$[ebp]
	imul	ecx, DWORD PTR _z$1[ebp], 20
	add	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 10588:             p[m] = t;

	imul	eax, DWORD PTR _m$4[ebp], 20
	add	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _t$8[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _t$8[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _t$8[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _t$8[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _t$8[ebp+16]
	mov	DWORD PTR [eax+16], ecx
$LN14@nk_tt__sor:

; 10589:         }
; 10590: 
; 10591:         /* now p[m] is the median-of-three */
; 10592:         /* swap it to the beginning so it won't move around */
; 10593:         t = p[0];

	mov	eax, 20					; 00000014H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _t$8[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _t$8[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _t$8[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _t$8[ebp+12], eax
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR _t$8[ebp+16], ecx

; 10594:         p[0] = p[m];

	imul	eax, DWORD PTR _m$4[ebp], 20
	add	eax, DWORD PTR _p$[ebp]
	mov	ecx, 20					; 00000014H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 10595:         p[m] = t;

	imul	eax, DWORD PTR _m$4[ebp], 20
	add	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _t$8[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _t$8[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _t$8[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _t$8[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _t$8[ebp+16]
	mov	DWORD PTR [eax+16], ecx

; 10596: 
; 10597:         /* partition loop */
; 10598:         i=1;

	mov	DWORD PTR _i$3[ebp], 1

; 10599:         j=n-1;

	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$2[ebp], eax
$LN13@nk_tt__sor:

; 10600:         for(;;) {
; 10601:             /* handling of equality is crucial here */
; 10602:             /* for sentinels & efficiency with duplicates */
; 10603:             for (;;++i) {

	jmp	SHORT $LN11@nk_tt__sor
$LN10@nk_tt__sor:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN11@nk_tt__sor:

; 10604:                 if (!NK_TT__COMPARE(&p[i], &p[0])) break;

	imul	eax, DWORD PTR _i$3[ebp], 20
	mov	ecx, 20					; 00000014H
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx+4]
	comiss	xmm0, DWORD PTR [esi+eax+4]
	ja	SHORT $LN8@nk_tt__sor
	jmp	SHORT $LN9@nk_tt__sor
$LN8@nk_tt__sor:

; 10605:             }

	jmp	SHORT $LN10@nk_tt__sor
$LN9@nk_tt__sor:

; 10606:             for (;;--j) {

	jmp	SHORT $LN7@nk_tt__sor
$LN6@nk_tt__sor:
	mov	eax, DWORD PTR _j$2[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$2[ebp], eax
$LN7@nk_tt__sor:

; 10607:                 if (!NK_TT__COMPARE(&p[0], &p[j])) break;

	mov	eax, 20					; 00000014H
	imul	ecx, eax, 0
	imul	edx, DWORD PTR _j$2[ebp], 20
	mov	eax, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+4]
	comiss	xmm0, DWORD PTR [esi+ecx+4]
	ja	SHORT $LN4@nk_tt__sor
	jmp	SHORT $LN5@nk_tt__sor
$LN4@nk_tt__sor:

; 10608:             }

	jmp	SHORT $LN6@nk_tt__sor
$LN5@nk_tt__sor:

; 10609: 
; 10610:             /* make sure we haven't crossed */
; 10611:              if (i >= j) break;

	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _j$2[ebp]
	jl	SHORT $LN3@nk_tt__sor
	jmp	$LN12@nk_tt__sor
$LN3@nk_tt__sor:

; 10612:              t = p[i];

	imul	eax, DWORD PTR _i$3[ebp], 20
	add	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _t$8[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t$8[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _t$8[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _t$8[ebp+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR _t$8[ebp+16], eax

; 10613:              p[i] = p[j];

	imul	eax, DWORD PTR _j$2[ebp], 20
	add	eax, DWORD PTR _p$[ebp]
	imul	ecx, DWORD PTR _i$3[ebp], 20
	add	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 10614:              p[j] = t;

	imul	eax, DWORD PTR _j$2[ebp], 20
	add	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _t$8[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _t$8[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _t$8[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _t$8[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _t$8[ebp+16]
	mov	DWORD PTR [eax+16], ecx

; 10615: 
; 10616:             ++i;

	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax

; 10617:             --j;

	mov	eax, DWORD PTR _j$2[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$2[ebp], eax

; 10618: 
; 10619:         }

	jmp	$LN13@nk_tt__sor
$LN12@nk_tt__sor:

; 10620: 
; 10621:         /* recurse on smaller side, iterate on larger */
; 10622:         if (j < (n-i)) {

	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, DWORD PTR _i$3[ebp]
	cmp	DWORD PTR _j$2[ebp], eax
	jge	SHORT $LN2@nk_tt__sor

; 10623:             nk_tt__sort_edges_quicksort(p,j);

	mov	eax, DWORD PTR _j$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_nk_tt__sort_edges_quicksort
	add	esp, 8

; 10624:             p = p+i;

	imul	eax, DWORD PTR _i$3[ebp], 20
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 10625:             n = n-i;

	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, DWORD PTR _i$3[ebp]
	mov	DWORD PTR _n$[ebp], eax

; 10626:         } else {

	jmp	SHORT $LN1@nk_tt__sor
$LN2@nk_tt__sor:

; 10627:             nk_tt__sort_edges_quicksort(p+i, n-i);

	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, DWORD PTR _i$3[ebp]
	push	eax
	imul	ecx, DWORD PTR _i$3[ebp], 20
	add	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_nk_tt__sort_edges_quicksort
	add	esp, 8

; 10628:             n = j;

	mov	eax, DWORD PTR _j$2[ebp]
	mov	DWORD PTR _n$[ebp], eax
$LN1@nk_tt__sor:

; 10629:         }
; 10630:     }

	jmp	$LN16@nk_tt__sor
$LN15@nk_tt__sor:

; 10631: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@nk_tt__sor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN29@nk_tt__sor:
	DD	1
	DD	$LN28@nk_tt__sor
$LN28@nk_tt__sor:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN27@nk_tt__sor
$LN27@nk_tt__sor:
	DB	116					; 00000074H
	DB	0
_nk_tt__sort_edges_quicksort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt__sort_edges_ins_sort
_TEXT	SEGMENT
tv76 = -288						; size = 4
_c$1 = -88						; size = 4
_b$2 = -76						; size = 4
_a$3 = -64						; size = 4
_t$4 = -52						; size = 20
_j$ = -24						; size = 4
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_n$ = 12						; size = 4
_nk_tt__sort_edges_ins_sort PROC			; COMDAT

; 10548: {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 10549:     int i,j;
; 10550:     for (i=1; i < n; ++i) {

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN7@nk_tt__sor
$LN6@nk_tt__sor:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@nk_tt__sor:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	$LN5@nk_tt__sor

; 10551:         struct nk_tt__edge t = p[i], *a = &t;

	imul	eax, DWORD PTR _i$[ebp], 20
	add	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _t$4[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _t$4[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _t$4[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _t$4[ebp+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR _t$4[ebp+16], eax
	lea	eax, DWORD PTR _t$4[ebp]
	mov	DWORD PTR _a$3[ebp], eax

; 10552:         j = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _j$[ebp], eax
$LN4@nk_tt__sor:

; 10553:         while (j > 0) {

	cmp	DWORD PTR _j$[ebp], 0
	jle	$LN3@nk_tt__sor

; 10554:             struct nk_tt__edge *b = &p[j-1];

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	imul	ecx, eax, 20
	add	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _b$2[ebp], ecx

; 10555:             int c = NK_TT__COMPARE(a,b);

	mov	eax, DWORD PTR _b$2[ebp]
	mov	ecx, DWORD PTR _a$3[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	comiss	xmm0, DWORD PTR [ecx+4]
	jbe	SHORT $LN10@nk_tt__sor
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN11@nk_tt__sor
$LN10@nk_tt__sor:
	mov	DWORD PTR tv76[ebp], 0
$LN11@nk_tt__sor:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR _c$1[ebp], edx

; 10556:             if (!c) break;

	cmp	DWORD PTR _c$1[ebp], 0
	jne	SHORT $LN2@nk_tt__sor
	jmp	SHORT $LN3@nk_tt__sor
$LN2@nk_tt__sor:

; 10557:             p[j] = p[j-1];

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	imul	ecx, eax, 20
	add	ecx, DWORD PTR _p$[ebp]
	imul	edx, DWORD PTR _j$[ebp], 20
	add	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], ecx

; 10558:             --j;

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 10559:         }

	jmp	$LN4@nk_tt__sor
$LN3@nk_tt__sor:

; 10560:         if (i != j)

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _j$[ebp]
	je	SHORT $LN1@nk_tt__sor

; 10561:             p[j] = t;

	imul	eax, DWORD PTR _j$[ebp], 20
	add	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _t$4[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _t$4[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _t$4[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _t$4[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _t$4[ebp+16]
	mov	DWORD PTR [eax+16], ecx
$LN1@nk_tt__sor:

; 10562:     }

	jmp	$LN6@nk_tt__sor
$LN5@nk_tt__sor:

; 10563: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_tt__sor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@nk_tt__sor:
	DD	1
	DD	$LN13@nk_tt__sor
$LN13@nk_tt__sor:
	DD	-52					; ffffffccH
	DD	20					; 00000014H
	DD	$LN12@nk_tt__sor
$LN12@nk_tt__sor:
	DB	116					; 00000074H
	DB	0
_nk_tt__sort_edges_ins_sort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt__rasterize_sorted_edges
_TEXT	SEGMENT
tv193 = -936						; size = 4
_z$1 = -736						; size = 4
_m$2 = -724						; size = 4
_k$3 = -712						; size = 4
_sum$4 = -700						; size = 4
_z$5 = -688						; size = 4
_z$6 = -676						; size = 4
_step$7 = -664						; size = 4
_scan_y_bottom$8 = -652					; size = 4
_scan_y_top$9 = -640					; size = 4
_scanline2$ = -628					; size = 4
_scanline$ = -616					; size = 4
_scanline_data$ = -604					; size = 516
_i$ = -80						; size = 4
_j$ = -68						; size = 4
_y$ = -56						; size = 4
_active$ = -44						; size = 4
_hh$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_result$ = 8						; size = 4
_e$ = 12						; size = 4
_n$ = 16						; size = 4
_vsubsample$ = 20					; size = 4
_off_x$ = 24						; size = 4
_off_y$ = 28						; size = 4
_alloc$ = 32						; size = 4
_nk_tt__rasterize_sorted_edges PROC			; COMDAT

; 10457: {

	push	ebp
	mov	ebp, esp
	sub	esp, 936				; 000003a8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-936]
	mov	ecx, 234				; 000000eaH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 10458:     struct nk_tt__hheap hh;
; 10459:     struct nk_tt__active_edge *active = 0;

	mov	DWORD PTR _active$[ebp], 0

; 10460:     int y,j=0, i;

	mov	DWORD PTR _j$[ebp], 0

; 10461:     float scanline_data[129], *scanline, *scanline2;
; 10462: 
; 10463:     NK_UNUSED(vsubsample);
; 10464:     nk_zero_struct(hh);

	push	24					; 00000018H
	lea	eax, DWORD PTR _hh$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 10465:     hh.alloc = *alloc;

	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _hh$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _hh$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _hh$[ebp+8], eax

; 10466: 
; 10467:     if (result->w > 64)

	mov	eax, DWORD PTR _result$[ebp]
	cmp	DWORD PTR [eax], 64			; 00000040H
	jle	SHORT $LN20@nk_tt__ras

; 10468:         scanline = (float *) alloc->alloc(alloc->userdata,0, (nk_size)(result->w*2+1) * sizeof(float));

	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 1
	lea	edx, DWORD PTR [ecx*4+4]
	mov	esi, esp
	push	edx
	push	0
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _scanline$[ebp], eax
	jmp	SHORT $LN19@nk_tt__ras
$LN20@nk_tt__ras:

; 10469:     else scanline = scanline_data;

	lea	eax, DWORD PTR _scanline_data$[ebp]
	mov	DWORD PTR _scanline$[ebp], eax
$LN19@nk_tt__ras:

; 10470: 
; 10471:     scanline2 = scanline + result->w;

	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _scanline$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _scanline2$[ebp], eax

; 10472:     y = off_y;

	mov	eax, DWORD PTR _off_y$[ebp]
	mov	DWORD PTR _y$[ebp], eax

; 10473:     e[n].y0 = (float) (off_y + result->h) + 1;

	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR _off_y$[ebp]
	add	ecx, DWORD PTR [eax+4]
	cvtsi2ss xmm0, ecx
	addss	xmm0, DWORD PTR __real@3f800000
	imul	edx, DWORD PTR _n$[ebp], 20
	mov	eax, DWORD PTR _e$[ebp]
	movss	DWORD PTR [eax+edx+4], xmm0
$LN18@nk_tt__ras:

; 10474: 
; 10475:     while (j < result->h)

	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	$LN17@nk_tt__ras

; 10476:     {
; 10477:         /* find center of pixel for this scanline */
; 10478:         float scan_y_top    = (float)y + 0.0f;

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _scan_y_top$9[ebp], xmm0

; 10479:         float scan_y_bottom = (float)y + 1.0f;

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _scan_y_bottom$8[ebp], xmm0

; 10480:         struct nk_tt__active_edge **step = &active;

	lea	eax, DWORD PTR _active$[ebp]
	mov	DWORD PTR _step$7[ebp], eax

; 10481: 
; 10482:         NK_MEMSET(scanline , 0, (nk_size)result->w*sizeof(scanline[0]));

	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 2
	push	ecx
	push	0
	mov	edx, DWORD PTR _scanline$[ebp]
	push	edx
	call	_nk_memset
	add	esp, 12					; 0000000cH

; 10483:         NK_MEMSET(scanline2, 0, (nk_size)(result->w+1)*sizeof(scanline[0]));

	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx*4+4]
	push	edx
	push	0
	mov	eax, DWORD PTR _scanline2$[ebp]
	push	eax
	call	_nk_memset
	add	esp, 12					; 0000000cH
$LN16@nk_tt__ras:

; 10484: 
; 10485:         /* update all active edges; */
; 10486:         /* remove all active edges that terminate before the top of this scanline */
; 10487:         while (*step) {

	mov	eax, DWORD PTR _step$7[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN15@nk_tt__ras

; 10488:             struct nk_tt__active_edge * z = *step;

	mov	eax, DWORD PTR _step$7[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _z$6[ebp], ecx

; 10489:             if (z->ey <= scan_y_top) {

	mov	eax, DWORD PTR _z$6[ebp]
	movss	xmm0, DWORD PTR _scan_y_top$9[ebp]
	comiss	xmm0, DWORD PTR [eax+24]
	jb	SHORT $LN14@nk_tt__ras

; 10490:                 *step = z->next; /* delete from list */

	mov	eax, DWORD PTR _step$7[ebp]
	mov	ecx, DWORD PTR _z$6[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 10491:                 NK_ASSERT(z->direction);

	mov	eax, DWORD PTR _z$6[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN23@nk_tt__ras
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_tt__rasterize_sorted_edges@@9@9@ddf8d5d8
	add	ecx, 34					; 00000022H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LMAHJHLI@?$AAz?$AA?9?$AA?$DO?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN23@nk_tt__ras:

; 10492:                 z->direction = 0;

	mov	eax, DWORD PTR _z$6[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+16], xmm0

; 10493:                 nk_tt__hheap_free(&hh, z);

	mov	eax, DWORD PTR _z$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _hh$[ebp]
	push	ecx
	call	_nk_tt__hheap_free
	add	esp, 8

; 10494:             } else {

	jmp	SHORT $LN13@nk_tt__ras
$LN14@nk_tt__ras:

; 10495:                 step = &((*step)->next); /* advance through list */

	mov	eax, DWORD PTR _step$7[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _step$7[ebp], ecx
$LN13@nk_tt__ras:

; 10496:             }
; 10497:         }

	jmp	$LN16@nk_tt__ras
$LN15@nk_tt__ras:

; 10498: 
; 10499:         /* insert all edges that start before the bottom of this scanline */
; 10500:         while (e->y0 <= scan_y_bottom) {

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR _scan_y_bottom$8[ebp]
	comiss	xmm0, DWORD PTR [eax+4]
	jb	$LN11@nk_tt__ras

; 10501:             if (e->y0 != e->y1) {

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	ucomiss	xmm0, DWORD PTR [ecx+12]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN9@nk_tt__ras

; 10502:                 struct nk_tt__active_edge *z = nk_tt__new_active(&hh, e, off_x, scan_y_top);

	push	ecx
	movss	xmm0, DWORD PTR _scan_y_top$9[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _off_x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	lea	edx, DWORD PTR _hh$[ebp]
	push	edx
	call	_nk_tt__new_active
	add	esp, 16					; 00000010H
	mov	DWORD PTR _z$5[ebp], eax

; 10503:                 if (z != 0) {

	cmp	DWORD PTR _z$5[ebp], 0
	je	SHORT $LN9@nk_tt__ras

; 10504:                     NK_ASSERT(z->ey >= scan_y_top);

	mov	eax, DWORD PTR _z$5[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	comiss	xmm0, DWORD PTR _scan_y_top$9[ebp]
	jae	SHORT $LN24@nk_tt__ras
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_tt__rasterize_sorted_edges@@9@9@ddf8d5d8
	add	ecx, 47					; 0000002fH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CI@PMJHELI@?$AAz?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA_?$AAy?$AA_?$AAt?$AAo?$AAp?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN24@nk_tt__ras:

; 10505:                     /* insert at front */
; 10506:                     z->next = active;

	mov	eax, DWORD PTR _z$5[ebp]
	mov	ecx, DWORD PTR _active$[ebp]
	mov	DWORD PTR [eax], ecx

; 10507:                     active = z;

	mov	eax, DWORD PTR _z$5[ebp]
	mov	DWORD PTR _active$[ebp], eax
$LN9@nk_tt__ras:

; 10508:                 }
; 10509:             }
; 10510:             ++e;

	mov	eax, DWORD PTR _e$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _e$[ebp], eax

; 10511:         }

	jmp	$LN15@nk_tt__ras
$LN11@nk_tt__ras:

; 10512: 
; 10513:         /* now process all active edges */
; 10514:         if (active)

	cmp	DWORD PTR _active$[ebp], 0
	je	SHORT $LN8@nk_tt__ras

; 10515:             nk_tt__fill_active_edges_new(scanline, scanline2+1, result->w, active, scan_y_top);

	push	ecx
	movss	xmm0, DWORD PTR _scan_y_top$9[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _active$[ebp]
	push	eax
	mov	ecx, DWORD PTR _result$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _scanline2$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _scanline$[ebp]
	push	ecx
	call	_nk_tt__fill_active_edges_new
	add	esp, 20					; 00000014H
$LN8@nk_tt__ras:

; 10516: 
; 10517:         {
; 10518:             float sum = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sum$4[ebp], xmm0

; 10519:             for (i=0; i < result->w; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@nk_tt__ras
$LN6@nk_tt__ras:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@nk_tt__ras:
	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	$LN5@nk_tt__ras

; 10520:                 float k;
; 10521:                 int m;
; 10522:                 sum += scanline2[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _scanline2$[ebp]
	movss	xmm0, DWORD PTR _sum$4[ebp]
	addss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR _sum$4[ebp], xmm0

; 10523:                 k = scanline[i] + sum;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _scanline$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	addss	xmm0, DWORD PTR _sum$4[ebp]
	movss	DWORD PTR _k$3[ebp], xmm0

; 10524:                 k = (float) NK_ABS(k) * 255.0f + 0.5f;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _k$3[ebp]
	jbe	SHORT $LN25@nk_tt__ras
	movss	xmm0, DWORD PTR _k$3[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv193[ebp], xmm0
	jmp	SHORT $LN26@nk_tt__ras
$LN25@nk_tt__ras:
	movss	xmm0, DWORD PTR _k$3[ebp]
	movss	DWORD PTR tv193[ebp], xmm0
$LN26@nk_tt__ras:
	movss	xmm0, DWORD PTR tv193[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _k$3[ebp], xmm0

; 10525:                 m = (int) k;

	cvttss2si eax, DWORD PTR _k$3[ebp]
	mov	DWORD PTR _m$2[ebp], eax

; 10526:                 if (m > 255) m = 255;

	cmp	DWORD PTR _m$2[ebp], 255		; 000000ffH
	jle	SHORT $LN4@nk_tt__ras
	mov	DWORD PTR _m$2[ebp], 255		; 000000ffH
$LN4@nk_tt__ras:

; 10527:                 result->pixels[j*result->stride + i] = (unsigned char) m;

	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _result$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	dl, BYTE PTR _m$2[ebp]
	mov	BYTE PTR [eax+ecx], dl

; 10528:             }

	jmp	$LN6@nk_tt__ras
$LN5@nk_tt__ras:

; 10529:         }
; 10530:         /* advance all the edges */
; 10531:         step = &active;

	lea	eax, DWORD PTR _active$[ebp]
	mov	DWORD PTR _step$7[ebp], eax
$LN3@nk_tt__ras:

; 10532:         while (*step) {

	mov	eax, DWORD PTR _step$7[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@nk_tt__ras

; 10533:             struct nk_tt__active_edge *z = *step;

	mov	eax, DWORD PTR _step$7[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _z$1[ebp], ecx

; 10534:             z->fx += z->fdx; /* advance to position for current scanline */

	mov	eax, DWORD PTR _z$1[ebp]
	mov	ecx, DWORD PTR _z$1[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _z$1[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 10535:             step = &((*step)->next); /* advance through list */

	mov	eax, DWORD PTR _step$7[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _step$7[ebp], ecx

; 10536:         }

	jmp	SHORT $LN3@nk_tt__ras
$LN2@nk_tt__ras:

; 10537:         ++y;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax

; 10538:         ++j;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 10539:     }

	jmp	$LN18@nk_tt__ras
$LN17@nk_tt__ras:

; 10540:     nk_tt__hheap_cleanup(&hh);

	lea	eax, DWORD PTR _hh$[ebp]
	push	eax
	call	_nk_tt__hheap_cleanup
	add	esp, 4

; 10541:     if (scanline != scanline_data)

	lea	eax, DWORD PTR _scanline_data$[ebp]
	cmp	DWORD PTR _scanline$[ebp], eax
	je	SHORT $LN1@nk_tt__ras

; 10542:         alloc->free(alloc->userdata, scanline);

	mov	esi, esp
	mov	eax, DWORD PTR _scanline$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@nk_tt__ras:

; 10543: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@nk_tt__ras
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 936				; 000003a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN31@nk_tt__ras:
	DD	3
	DD	$LN30@nk_tt__ras
$LN30@nk_tt__ras:
	DD	-32					; ffffffe0H
	DD	24					; 00000018H
	DD	$LN27@nk_tt__ras
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN28@nk_tt__ras
	DD	-604					; fffffda4H
	DD	516					; 00000204H
	DD	$LN29@nk_tt__ras
$LN29@nk_tt__ras:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN28@nk_tt__ras:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	0
$LN27@nk_tt__ras:
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	0
_nk_tt__rasterize_sorted_edges ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt__fill_active_edges_new
_TEXT	SEGMENT
_y2$1 = -332						; size = 4
_yb$2 = -320						; size = 4
_y3$3 = -308						; size = 4
_x3$4 = -296						; size = 4
_x2$5 = -284						; size = 4
_x1$6 = -272						; size = 4
_ya$7 = -260						; size = 4
_x$8 = -248						; size = 4
_t$9 = -236						; size = 4
_area$10 = -224						; size = 4
_sign$11 = -212						; size = 4
_step$12 = -200						; size = 4
_y_crossing$13 = -188					; size = 4
_x2$14 = -176						; size = 4
_x1$15 = -164						; size = 4
_x$16 = -152						; size = 4
_x$17 = -140						; size = 4
_height$18 = -128					; size = 4
_dy$19 = -116						; size = 4
_y1$20 = -104						; size = 4
_y0$21 = -92						; size = 4
_x_bottom$22 = -80					; size = 4
_x_top$23 = -68						; size = 4
_xb$24 = -56						; size = 4
_dx$25 = -44						; size = 4
_x0$26 = -32						; size = 4
_x0$27 = -20						; size = 4
_y_bottom$ = -8						; size = 4
_scanline$ = 8						; size = 4
_scanline_fill$ = 12					; size = 4
_len$ = 16						; size = 4
_e$ = 20						; size = 4
_y_top$ = 24						; size = 4
_nk_tt__fill_active_edges_new PROC			; COMDAT

; 10295: {

	push	ebp
	mov	ebp, esp
	sub	esp, 528				; 00000210H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-528]
	mov	ecx, 132				; 00000084H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10296:     float y_bottom = y_top+1;

	movss	xmm0, DWORD PTR _y_top$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _y_bottom$[ebp], xmm0
$LN34@nk_tt__fil:

; 10297:     while (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	$LN33@nk_tt__fil

; 10298:     {
; 10299:         /* brute force every pixel */
; 10300:         /* compute intersection points with top & bottom */
; 10301:         NK_ASSERT(e->ey >= y_top);

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	comiss	xmm0, DWORD PTR _y_top$[ebp]
	jae	SHORT $LN37@nk_tt__fil
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_tt__fill_active_edges_new@@9@9@ddf8d5d8
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BO@MDBOACOJ@?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_?$AAt?$AAo?$AAp?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN37@nk_tt__fil:

; 10302:         if (e->fdx == 0) {

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN32@nk_tt__fil

; 10303:             float x0 = e->fx;

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _x0$27[ebp], xmm0

; 10304:             if (x0 < len) {

	cvtsi2ss xmm0, DWORD PTR _len$[ebp]
	comiss	xmm0, DWORD PTR _x0$27[ebp]
	jbe	$LN29@nk_tt__fil

; 10305:                 if (x0 >= 0) {

	movss	xmm0, DWORD PTR _x0$27[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN30@nk_tt__fil

; 10306:                     nk_tt__handle_clipped_edge(scanline,(int) x0,e, x0,y_top, x0,y_bottom);

	push	ecx
	movss	xmm0, DWORD PTR _y_bottom$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x0$27[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y_top$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x0$27[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	cvttss2si ecx, DWORD PTR _x0$27[ebp]
	push	ecx
	mov	edx, DWORD PTR _scanline$[ebp]
	push	edx
	call	_nk_tt__handle_clipped_edge
	add	esp, 28					; 0000001cH

; 10307:                     nk_tt__handle_clipped_edge(scanline_fill-1,(int) x0+1,e, x0,y_top, x0,y_bottom);

	push	ecx
	movss	xmm0, DWORD PTR _y_bottom$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x0$27[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y_top$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x0$27[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	cvttss2si ecx, DWORD PTR _x0$27[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _scanline_fill$[ebp]
	sub	edx, 4
	push	edx
	call	_nk_tt__handle_clipped_edge
	add	esp, 28					; 0000001cH

; 10308:                 } else {

	jmp	SHORT $LN29@nk_tt__fil
$LN30@nk_tt__fil:

; 10309:                     nk_tt__handle_clipped_edge(scanline_fill-1,0,e, x0,y_top, x0,y_bottom);

	push	ecx
	movss	xmm0, DWORD PTR _y_bottom$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x0$27[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y_top$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x0$27[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _scanline_fill$[ebp]
	sub	ecx, 4
	push	ecx
	call	_nk_tt__handle_clipped_edge
	add	esp, 28					; 0000001cH
$LN29@nk_tt__fil:

; 10310:                 }
; 10311:             }
; 10312:         } else {

	jmp	$LN13@nk_tt__fil
$LN32@nk_tt__fil:

; 10313:             float x0 = e->fx;

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _x0$26[ebp], xmm0

; 10314:             float dx = e->fdx;

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _dx$25[ebp], xmm0

; 10315:             float xb = x0 + dx;

	movss	xmm0, DWORD PTR _x0$26[ebp]
	addss	xmm0, DWORD PTR _dx$25[ebp]
	movss	DWORD PTR _xb$24[ebp], xmm0

; 10316:             float x_top, x_bottom;
; 10317:             float y0,y1;
; 10318:             float dy = e->fdy;

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _dy$19[ebp], xmm0

; 10319:             NK_ASSERT(e->sy <= y_bottom && e->ey >= y_top);

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR _y_bottom$[ebp]
	comiss	xmm0, DWORD PTR [eax+20]
	jb	SHORT $LN38@nk_tt__fil
	mov	ecx, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	comiss	xmm0, DWORD PTR _y_top$[ebp]
	jae	SHORT $LN39@nk_tt__fil
$LN38@nk_tt__fil:
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_tt__fill_active_edges_new@@9@9@ddf8d5d8
	add	edx, 24					; 00000018H
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EI@KOIFPDFH@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAy?$AA_?$AAb?$AAo?$AAt?$AAt?$AAo?$AAm?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN39@nk_tt__fil:

; 10320: 
; 10321:             /* compute endpoints of line segment clipped to this scanline (if the */
; 10322:             /* line segment starts on this scanline. x0 is the intersection of the */
; 10323:             /* line with y_top, but that may be off the line segment. */
; 10324:             if (e->sy > y_top) {

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	comiss	xmm0, DWORD PTR _y_top$[ebp]
	jbe	SHORT $LN27@nk_tt__fil

; 10325:                 x_top = x0 + dx * (e->sy - y_top);

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	subss	xmm0, DWORD PTR _y_top$[ebp]
	mulss	xmm0, DWORD PTR _dx$25[ebp]
	addss	xmm0, DWORD PTR _x0$26[ebp]
	movss	DWORD PTR _x_top$23[ebp], xmm0

; 10326:                 y0 = e->sy;

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _y0$21[ebp], xmm0

; 10327:             } else {

	jmp	SHORT $LN26@nk_tt__fil
$LN27@nk_tt__fil:

; 10328:                 x_top = x0;

	movss	xmm0, DWORD PTR _x0$26[ebp]
	movss	DWORD PTR _x_top$23[ebp], xmm0

; 10329:                 y0 = y_top;

	movss	xmm0, DWORD PTR _y_top$[ebp]
	movss	DWORD PTR _y0$21[ebp], xmm0
$LN26@nk_tt__fil:

; 10330:             }
; 10331: 
; 10332:             if (e->ey < y_bottom) {

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR _y_bottom$[ebp]
	comiss	xmm0, DWORD PTR [eax+24]
	jbe	SHORT $LN25@nk_tt__fil

; 10333:                 x_bottom = x0 + dx * (e->ey - y_top);

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	subss	xmm0, DWORD PTR _y_top$[ebp]
	mulss	xmm0, DWORD PTR _dx$25[ebp]
	addss	xmm0, DWORD PTR _x0$26[ebp]
	movss	DWORD PTR _x_bottom$22[ebp], xmm0

; 10334:                 y1 = e->ey;

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR _y1$20[ebp], xmm0

; 10335:             } else {

	jmp	SHORT $LN24@nk_tt__fil
$LN25@nk_tt__fil:

; 10336:                 x_bottom = xb;

	movss	xmm0, DWORD PTR _xb$24[ebp]
	movss	DWORD PTR _x_bottom$22[ebp], xmm0

; 10337:                 y1 = y_bottom;

	movss	xmm0, DWORD PTR _y_bottom$[ebp]
	movss	DWORD PTR _y1$20[ebp], xmm0
$LN24@nk_tt__fil:

; 10338:             }
; 10339: 
; 10340:             if (x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len)

	movss	xmm0, DWORD PTR _x_top$23[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN23@nk_tt__fil
	movss	xmm0, DWORD PTR _x_bottom$22[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN23@nk_tt__fil
	cvtsi2ss xmm0, DWORD PTR _len$[ebp]
	comiss	xmm0, DWORD PTR _x_top$23[ebp]
	jbe	$LN23@nk_tt__fil
	cvtsi2ss xmm0, DWORD PTR _len$[ebp]
	comiss	xmm0, DWORD PTR _x_bottom$22[ebp]
	jbe	$LN23@nk_tt__fil

; 10341:             {
; 10342:                 /* from here on, we don't have to range check x values */
; 10343:                 if ((int) x_top == (int) x_bottom) {

	cvttss2si eax, DWORD PTR _x_top$23[ebp]
	cvttss2si ecx, DWORD PTR _x_bottom$22[ebp]
	cmp	eax, ecx
	jne	$LN22@nk_tt__fil

; 10344:                     float height;
; 10345:                     /* simple case, only spans one pixel */
; 10346:                     int x = (int) x_top;

	cvttss2si eax, DWORD PTR _x_top$23[ebp]
	mov	DWORD PTR _x$17[ebp], eax

; 10347:                     height = y1 - y0;

	movss	xmm0, DWORD PTR _y1$20[ebp]
	subss	xmm0, DWORD PTR _y0$21[ebp]
	movss	DWORD PTR _height$18[ebp], xmm0

; 10348:                     NK_ASSERT(x >= 0 && x < len);

	cmp	DWORD PTR _x$17[ebp], 0
	jl	SHORT $LN40@nk_tt__fil
	mov	eax, DWORD PTR _x$17[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jl	SHORT $LN41@nk_tt__fil
$LN40@nk_tt__fil:
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_tt__fill_active_edges_new@@9@9@ddf8d5d8
	add	ecx, 53					; 00000035H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CE@GDDDMDCC@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl?$AAe?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN41@nk_tt__fil:

; 10349:                     scanline[x] += e->direction * (1.0f-(((float)x_top - (float)x) + ((float)x_bottom-(float)x))/2.0f)  * (float)height;

	cvtsi2ss xmm0, DWORD PTR _x$17[ebp]
	movss	xmm1, DWORD PTR _x_top$23[ebp]
	subss	xmm1, xmm0
	cvtsi2ss xmm0, DWORD PTR _x$17[ebp]
	movss	xmm2, DWORD PTR _x_bottom$22[ebp]
	subss	xmm2, xmm0
	addss	xmm1, xmm2
	divss	xmm1, DWORD PTR __real@40000000
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _e$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _height$18[ebp]
	mov	ecx, DWORD PTR _x$17[ebp]
	mov	edx, DWORD PTR _scanline$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR _x$17[ebp]
	mov	ecx, DWORD PTR _scanline$[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0

; 10350:                     scanline_fill[x] += e->direction * (float)height; /* everything right of this pixel is filled */

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _height$18[ebp]
	mov	ecx, DWORD PTR _x$17[ebp]
	mov	edx, DWORD PTR _scanline_fill$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR _x$17[ebp]
	mov	ecx, DWORD PTR _scanline_fill$[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0

; 10351:                 } else {

	jmp	$LN21@nk_tt__fil
$LN22@nk_tt__fil:

; 10352:                     int x,x1,x2;
; 10353:                     float y_crossing, step, sign, area;
; 10354:                     /* covers 2+ pixels */
; 10355:                     if (x_top > x_bottom)

	movss	xmm0, DWORD PTR _x_top$23[ebp]
	comiss	xmm0, DWORD PTR _x_bottom$22[ebp]
	jbe	$LN20@nk_tt__fil

; 10356:                     {
; 10357:                         /* flip scanline vertically; signed area is the same */
; 10358:                         float t;
; 10359:                         y0 = y_bottom - (y0 - y_top);

	movss	xmm0, DWORD PTR _y0$21[ebp]
	subss	xmm0, DWORD PTR _y_top$[ebp]
	movss	xmm1, DWORD PTR _y_bottom$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _y0$21[ebp], xmm1

; 10360:                         y1 = y_bottom - (y1 - y_top);

	movss	xmm0, DWORD PTR _y1$20[ebp]
	subss	xmm0, DWORD PTR _y_top$[ebp]
	movss	xmm1, DWORD PTR _y_bottom$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _y1$20[ebp], xmm1

; 10361:                         t = y0; y0 = y1; y1 = t;

	movss	xmm0, DWORD PTR _y0$21[ebp]
	movss	DWORD PTR _t$9[ebp], xmm0
	movss	xmm0, DWORD PTR _y1$20[ebp]
	movss	DWORD PTR _y0$21[ebp], xmm0
	movss	xmm0, DWORD PTR _t$9[ebp]
	movss	DWORD PTR _y1$20[ebp], xmm0

; 10362:                         t = x_bottom; x_bottom = x_top; x_top = t;

	movss	xmm0, DWORD PTR _x_bottom$22[ebp]
	movss	DWORD PTR _t$9[ebp], xmm0
	movss	xmm0, DWORD PTR _x_top$23[ebp]
	movss	DWORD PTR _x_bottom$22[ebp], xmm0
	movss	xmm0, DWORD PTR _t$9[ebp]
	movss	DWORD PTR _x_top$23[ebp], xmm0

; 10363:                         dx = -dx;

	movss	xmm0, DWORD PTR _dx$25[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _dx$25[ebp], xmm0

; 10364:                         dy = -dy;

	movss	xmm0, DWORD PTR _dy$19[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _dy$19[ebp], xmm0

; 10365:                         t = x0; x0 = xb; xb = t;

	movss	xmm0, DWORD PTR _x0$26[ebp]
	movss	DWORD PTR _t$9[ebp], xmm0
	movss	xmm0, DWORD PTR _xb$24[ebp]
	movss	DWORD PTR _x0$26[ebp], xmm0
	movss	xmm0, DWORD PTR _t$9[ebp]
	movss	DWORD PTR _xb$24[ebp], xmm0
$LN20@nk_tt__fil:

; 10366:                     }
; 10367: 
; 10368:                     x1 = (int) x_top;

	cvttss2si eax, DWORD PTR _x_top$23[ebp]
	mov	DWORD PTR _x1$15[ebp], eax

; 10369:                     x2 = (int) x_bottom;

	cvttss2si eax, DWORD PTR _x_bottom$22[ebp]
	mov	DWORD PTR _x2$14[ebp], eax

; 10370:                     /* compute intersection with y axis at x1+1 */
; 10371:                     y_crossing = ((float)x1+1 - (float)x0) * (float)dy + (float)y_top;

	cvtsi2ss xmm0, DWORD PTR _x1$15[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _x0$26[ebp]
	mulss	xmm0, DWORD PTR _dy$19[ebp]
	addss	xmm0, DWORD PTR _y_top$[ebp]
	movss	DWORD PTR _y_crossing$13[ebp], xmm0

; 10372: 
; 10373:                     sign = e->direction;

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR _sign$11[ebp], xmm0

; 10374:                     /* area of the rectangle covered from y0..y_crossing */
; 10375:                     area = sign * (y_crossing-y0);

	movss	xmm0, DWORD PTR _y_crossing$13[ebp]
	subss	xmm0, DWORD PTR _y0$21[ebp]
	mulss	xmm0, DWORD PTR _sign$11[ebp]
	movss	DWORD PTR _area$10[ebp], xmm0

; 10376:                     /* area of the triangle (x_top,y0), (x+1,y0), (x+1,y_crossing) */
; 10377:                     scanline[x1] += area * (1.0f-((float)((float)x_top - (float)x1)+(float)(x1+1-x1))/2.0f);

	cvtsi2ss xmm0, DWORD PTR _x1$15[ebp]
	movss	xmm1, DWORD PTR _x_top$23[ebp]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _x1$15[ebp]
	add	eax, 1
	sub	eax, DWORD PTR _x1$15[ebp]
	cvtsi2ss xmm0, eax
	addss	xmm1, xmm0
	divss	xmm1, DWORD PTR __real@40000000
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _area$10[ebp]
	mov	ecx, DWORD PTR _x1$15[ebp]
	mov	edx, DWORD PTR _scanline$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR _x1$15[ebp]
	mov	ecx, DWORD PTR _scanline$[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0

; 10378: 
; 10379:                     step = sign * dy;

	movss	xmm0, DWORD PTR _sign$11[ebp]
	mulss	xmm0, DWORD PTR _dy$19[ebp]
	movss	DWORD PTR _step$12[ebp], xmm0

; 10380:                     for (x = x1+1; x < x2; ++x) {

	mov	eax, DWORD PTR _x1$15[ebp]
	add	eax, 1
	mov	DWORD PTR _x$16[ebp], eax
	jmp	SHORT $LN19@nk_tt__fil
$LN18@nk_tt__fil:
	mov	eax, DWORD PTR _x$16[ebp]
	add	eax, 1
	mov	DWORD PTR _x$16[ebp], eax
$LN19@nk_tt__fil:
	mov	eax, DWORD PTR _x$16[ebp]
	cmp	eax, DWORD PTR _x2$14[ebp]
	jge	SHORT $LN17@nk_tt__fil

; 10381:                         scanline[x] += area + step/2;

	movss	xmm0, DWORD PTR _step$12[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR _area$10[ebp]
	mov	eax, DWORD PTR _x$16[ebp]
	mov	ecx, DWORD PTR _scanline$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR _x$16[ebp]
	mov	eax, DWORD PTR _scanline$[ebp]
	movss	DWORD PTR [eax+edx*4], xmm0

; 10382:                         area += step;

	movss	xmm0, DWORD PTR _area$10[ebp]
	addss	xmm0, DWORD PTR _step$12[ebp]
	movss	DWORD PTR _area$10[ebp], xmm0

; 10383:                     }

	jmp	SHORT $LN18@nk_tt__fil
$LN17@nk_tt__fil:

; 10384:                     y_crossing += (float)dy * (float)(x2 - (x1+1));

	mov	eax, DWORD PTR _x1$15[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _x2$14[ebp]
	sub	ecx, eax
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR _dy$19[ebp]
	addss	xmm0, DWORD PTR _y_crossing$13[ebp]
	movss	DWORD PTR _y_crossing$13[ebp], xmm0

; 10385: 
; 10386:                     scanline[x2] += area + sign * (1.0f-((float)(x2-x2)+((float)x_bottom-(float)x2))/2.0f) * (y1-y_crossing);

	mov	eax, DWORD PTR _x2$14[ebp]
	sub	eax, DWORD PTR _x2$14[ebp]
	cvtsi2ss xmm0, eax
	cvtsi2ss xmm1, DWORD PTR _x2$14[ebp]
	movss	xmm2, DWORD PTR _x_bottom$22[ebp]
	subss	xmm2, xmm1
	addss	xmm0, xmm2
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _sign$11[ebp]
	movss	xmm0, DWORD PTR _y1$20[ebp]
	subss	xmm0, DWORD PTR _y_crossing$13[ebp]
	mulss	xmm1, xmm0
	addss	xmm1, DWORD PTR _area$10[ebp]
	mov	ecx, DWORD PTR _x2$14[ebp]
	mov	edx, DWORD PTR _scanline$[ebp]
	addss	xmm1, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR _x2$14[ebp]
	mov	ecx, DWORD PTR _scanline$[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm1

; 10387:                     scanline_fill[x2] += sign * (y1-y0);

	movss	xmm0, DWORD PTR _y1$20[ebp]
	subss	xmm0, DWORD PTR _y0$21[ebp]
	mulss	xmm0, DWORD PTR _sign$11[ebp]
	mov	eax, DWORD PTR _x2$14[ebp]
	mov	ecx, DWORD PTR _scanline_fill$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR _x2$14[ebp]
	mov	eax, DWORD PTR _scanline_fill$[ebp]
	movss	DWORD PTR [eax+edx*4], xmm0
$LN21@nk_tt__fil:

; 10388:                 }
; 10389:             }
; 10390:             else

	jmp	$LN13@nk_tt__fil
$LN23@nk_tt__fil:

; 10391:             {
; 10392:                 /* if edge goes outside of box we're drawing, we require */
; 10393:                 /* clipping logic. since this does not match the intended use */
; 10394:                 /* of this library, we use a different, very slow brute */
; 10395:                 /* force implementation */
; 10396:                 int x;
; 10397:                 for (x=0; x < len; ++x)

	mov	DWORD PTR _x$8[ebp], 0
	jmp	SHORT $LN15@nk_tt__fil
$LN14@nk_tt__fil:
	mov	eax, DWORD PTR _x$8[ebp]
	add	eax, 1
	mov	DWORD PTR _x$8[ebp], eax
$LN15@nk_tt__fil:
	mov	eax, DWORD PTR _x$8[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	$LN13@nk_tt__fil

; 10398:                 {
; 10399:                     /* cases: */
; 10400:                     /* */
; 10401:                     /* there can be up to two intersections with the pixel. any intersection */
; 10402:                     /* with left or right edges can be handled by splitting into two (or three) */
; 10403:                     /* regions. intersections with top & bottom do not necessitate case-wise logic. */
; 10404:                     /* */
; 10405:                     /* the old way of doing this found the intersections with the left & right edges, */
; 10406:                     /* then used some simple logic to produce up to three segments in sorted order */
; 10407:                     /* from top-to-bottom. however, this had a problem: if an x edge was epsilon */
; 10408:                     /* across the x border, then the corresponding y position might not be distinct */
; 10409:                     /* from the other y segment, and it might ignored as an empty segment. to avoid */
; 10410:                     /* that, we need to explicitly produce segments based on x positions. */
; 10411: 
; 10412:                     /* rename variables to clear pairs */
; 10413:                     float ya = y_top;

	movss	xmm0, DWORD PTR _y_top$[ebp]
	movss	DWORD PTR _ya$7[ebp], xmm0

; 10414:                     float x1 = (float) (x);

	cvtsi2ss xmm0, DWORD PTR _x$8[ebp]
	movss	DWORD PTR _x1$6[ebp], xmm0

; 10415:                     float x2 = (float) (x+1);

	mov	eax, DWORD PTR _x$8[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x2$5[ebp], xmm0

; 10416:                     float x3 = xb;

	movss	xmm0, DWORD PTR _xb$24[ebp]
	movss	DWORD PTR _x3$4[ebp], xmm0

; 10417:                     float y3 = y_bottom;

	movss	xmm0, DWORD PTR _y_bottom$[ebp]
	movss	DWORD PTR _y3$3[ebp], xmm0

; 10418:                     float yb,y2;
; 10419: 
; 10420:                     yb = ((float)x - x0) / dx + y_top;

	cvtsi2ss xmm0, DWORD PTR _x$8[ebp]
	subss	xmm0, DWORD PTR _x0$26[ebp]
	divss	xmm0, DWORD PTR _dx$25[ebp]
	addss	xmm0, DWORD PTR _y_top$[ebp]
	movss	DWORD PTR _yb$2[ebp], xmm0

; 10421:                     y2 = ((float)x+1 - x0) / dx + y_top;

	cvtsi2ss xmm0, DWORD PTR _x$8[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _x0$26[ebp]
	divss	xmm0, DWORD PTR _dx$25[ebp]
	addss	xmm0, DWORD PTR _y_top$[ebp]
	movss	DWORD PTR _y2$1[ebp], xmm0

; 10422: 
; 10423:                     if (x0 < x1 && x3 > x2) {         /* three segments descending down-right */

	movss	xmm0, DWORD PTR _x1$6[ebp]
	comiss	xmm0, DWORD PTR _x0$26[ebp]
	jbe	$LN12@nk_tt__fil
	movss	xmm0, DWORD PTR _x3$4[ebp]
	comiss	xmm0, DWORD PTR _x2$5[ebp]
	jbe	$LN12@nk_tt__fil

; 10424:                         nk_tt__handle_clipped_edge(scanline,x,e, x0,ya, x1,yb);

	push	ecx
	movss	xmm0, DWORD PTR _yb$2[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x1$6[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ya$7[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x0$26[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _scanline$[ebp]
	push	edx
	call	_nk_tt__handle_clipped_edge
	add	esp, 28					; 0000001cH

; 10425:                         nk_tt__handle_clipped_edge(scanline,x,e, x1,yb, x2,y2);

	push	ecx
	movss	xmm0, DWORD PTR _y2$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x2$5[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yb$2[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x1$6[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _scanline$[ebp]
	push	edx
	call	_nk_tt__handle_clipped_edge
	add	esp, 28					; 0000001cH

; 10426:                         nk_tt__handle_clipped_edge(scanline,x,e, x2,y2, x3,y3);

	push	ecx
	movss	xmm0, DWORD PTR _y3$3[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x3$4[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y2$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x2$5[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _scanline$[ebp]
	push	edx
	call	_nk_tt__handle_clipped_edge
	add	esp, 28					; 0000001cH
	jmp	$LN1@nk_tt__fil
$LN12@nk_tt__fil:

; 10427:                     } else if (x3 < x1 && x0 > x2) {  /* three segments descending down-left */

	movss	xmm0, DWORD PTR _x1$6[ebp]
	comiss	xmm0, DWORD PTR _x3$4[ebp]
	jbe	$LN10@nk_tt__fil
	movss	xmm0, DWORD PTR _x0$26[ebp]
	comiss	xmm0, DWORD PTR _x2$5[ebp]
	jbe	$LN10@nk_tt__fil

; 10428:                         nk_tt__handle_clipped_edge(scanline,x,e, x0,ya, x2,y2);

	push	ecx
	movss	xmm0, DWORD PTR _y2$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x2$5[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ya$7[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x0$26[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _scanline$[ebp]
	push	edx
	call	_nk_tt__handle_clipped_edge
	add	esp, 28					; 0000001cH

; 10429:                         nk_tt__handle_clipped_edge(scanline,x,e, x2,y2, x1,yb);

	push	ecx
	movss	xmm0, DWORD PTR _yb$2[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x1$6[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y2$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x2$5[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _scanline$[ebp]
	push	edx
	call	_nk_tt__handle_clipped_edge
	add	esp, 28					; 0000001cH

; 10430:                         nk_tt__handle_clipped_edge(scanline,x,e, x1,yb, x3,y3);

	push	ecx
	movss	xmm0, DWORD PTR _y3$3[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x3$4[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yb$2[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x1$6[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _scanline$[ebp]
	push	edx
	call	_nk_tt__handle_clipped_edge
	add	esp, 28					; 0000001cH
	jmp	$LN1@nk_tt__fil
$LN10@nk_tt__fil:

; 10431:                     } else if (x0 < x1 && x3 > x1) {  /* two segments across x, down-right */

	movss	xmm0, DWORD PTR _x1$6[ebp]
	comiss	xmm0, DWORD PTR _x0$26[ebp]
	jbe	$LN8@nk_tt__fil
	movss	xmm0, DWORD PTR _x3$4[ebp]
	comiss	xmm0, DWORD PTR _x1$6[ebp]
	jbe	$LN8@nk_tt__fil

; 10432:                         nk_tt__handle_clipped_edge(scanline,x,e, x0,ya, x1,yb);

	push	ecx
	movss	xmm0, DWORD PTR _yb$2[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x1$6[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ya$7[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x0$26[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _scanline$[ebp]
	push	edx
	call	_nk_tt__handle_clipped_edge
	add	esp, 28					; 0000001cH

; 10433:                         nk_tt__handle_clipped_edge(scanline,x,e, x1,yb, x3,y3);

	push	ecx
	movss	xmm0, DWORD PTR _y3$3[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x3$4[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yb$2[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x1$6[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _scanline$[ebp]
	push	edx
	call	_nk_tt__handle_clipped_edge
	add	esp, 28					; 0000001cH
	jmp	$LN1@nk_tt__fil
$LN8@nk_tt__fil:

; 10434:                     } else if (x3 < x1 && x0 > x1) {  /* two segments across x, down-left */

	movss	xmm0, DWORD PTR _x1$6[ebp]
	comiss	xmm0, DWORD PTR _x3$4[ebp]
	jbe	$LN6@nk_tt__fil
	movss	xmm0, DWORD PTR _x0$26[ebp]
	comiss	xmm0, DWORD PTR _x1$6[ebp]
	jbe	$LN6@nk_tt__fil

; 10435:                         nk_tt__handle_clipped_edge(scanline,x,e, x0,ya, x1,yb);

	push	ecx
	movss	xmm0, DWORD PTR _yb$2[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x1$6[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ya$7[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x0$26[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _scanline$[ebp]
	push	edx
	call	_nk_tt__handle_clipped_edge
	add	esp, 28					; 0000001cH

; 10436:                         nk_tt__handle_clipped_edge(scanline,x,e, x1,yb, x3,y3);

	push	ecx
	movss	xmm0, DWORD PTR _y3$3[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x3$4[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yb$2[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x1$6[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _scanline$[ebp]
	push	edx
	call	_nk_tt__handle_clipped_edge
	add	esp, 28					; 0000001cH
	jmp	$LN1@nk_tt__fil
$LN6@nk_tt__fil:

; 10437:                     } else if (x0 < x2 && x3 > x2) {  /* two segments across x+1, down-right */

	movss	xmm0, DWORD PTR _x2$5[ebp]
	comiss	xmm0, DWORD PTR _x0$26[ebp]
	jbe	$LN4@nk_tt__fil
	movss	xmm0, DWORD PTR _x3$4[ebp]
	comiss	xmm0, DWORD PTR _x2$5[ebp]
	jbe	$LN4@nk_tt__fil

; 10438:                         nk_tt__handle_clipped_edge(scanline,x,e, x0,ya, x2,y2);

	push	ecx
	movss	xmm0, DWORD PTR _y2$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x2$5[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ya$7[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x0$26[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _scanline$[ebp]
	push	edx
	call	_nk_tt__handle_clipped_edge
	add	esp, 28					; 0000001cH

; 10439:                         nk_tt__handle_clipped_edge(scanline,x,e, x2,y2, x3,y3);

	push	ecx
	movss	xmm0, DWORD PTR _y3$3[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x3$4[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y2$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x2$5[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _scanline$[ebp]
	push	edx
	call	_nk_tt__handle_clipped_edge
	add	esp, 28					; 0000001cH
	jmp	$LN1@nk_tt__fil
$LN4@nk_tt__fil:

; 10440:                     } else if (x3 < x2 && x0 > x2) {  /* two segments across x+1, down-left */

	movss	xmm0, DWORD PTR _x2$5[ebp]
	comiss	xmm0, DWORD PTR _x3$4[ebp]
	jbe	$LN2@nk_tt__fil
	movss	xmm0, DWORD PTR _x0$26[ebp]
	comiss	xmm0, DWORD PTR _x2$5[ebp]
	jbe	$LN2@nk_tt__fil

; 10441:                         nk_tt__handle_clipped_edge(scanline,x,e, x0,ya, x2,y2);

	push	ecx
	movss	xmm0, DWORD PTR _y2$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x2$5[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ya$7[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x0$26[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _scanline$[ebp]
	push	edx
	call	_nk_tt__handle_clipped_edge
	add	esp, 28					; 0000001cH

; 10442:                         nk_tt__handle_clipped_edge(scanline,x,e, x2,y2, x3,y3);

	push	ecx
	movss	xmm0, DWORD PTR _y3$3[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x3$4[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y2$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x2$5[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _scanline$[ebp]
	push	edx
	call	_nk_tt__handle_clipped_edge
	add	esp, 28					; 0000001cH

; 10443:                     } else {  /* one segment */

	jmp	SHORT $LN1@nk_tt__fil
$LN2@nk_tt__fil:

; 10444:                         nk_tt__handle_clipped_edge(scanline,x,e, x0,ya, x3,y3);

	push	ecx
	movss	xmm0, DWORD PTR _y3$3[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x3$4[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ya$7[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x0$26[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _scanline$[ebp]
	push	edx
	call	_nk_tt__handle_clipped_edge
	add	esp, 28					; 0000001cH
$LN1@nk_tt__fil:

; 10445:                     }
; 10446:                 }

	jmp	$LN14@nk_tt__fil
$LN13@nk_tt__fil:

; 10447:             }
; 10448:         }
; 10449:         e = e->next;

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _e$[ebp], ecx

; 10450:     }

	jmp	$LN34@nk_tt__fil
$LN33@nk_tt__fil:

; 10451: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 528				; 00000210H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt__fill_active_edges_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt__handle_clipped_edge
_TEXT	SEGMENT
_scanline$ = 8						; size = 4
_x$ = 12						; size = 4
_e$ = 16						; size = 4
_x0$ = 20						; size = 4
_y0$ = 24						; size = 4
_x1$ = 28						; size = 4
_y1$ = 32						; size = 4
_nk_tt__handle_clipped_edge PROC			; COMDAT

; 10261: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10262:     if (y0 == y1) return;

	movss	xmm0, DWORD PTR _y0$[ebp]
	ucomiss	xmm0, DWORD PTR _y1$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN17@nk_tt__han
	jmp	$LN1@nk_tt__han
$LN17@nk_tt__han:

; 10263:     NK_ASSERT(y0 < y1);

	movss	xmm0, DWORD PTR _y1$[ebp]
	comiss	xmm0, DWORD PTR _y0$[ebp]
	ja	SHORT $LN20@nk_tt__han
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_tt__handle_clipped_edge@@9@9@ddf8d5d8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BA@ENLNFFAM@?$AAy?$AA0?$AA?5?$AA?$DM?$AA?5?$AAy?$AA1?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN20@nk_tt__han:

; 10264:     NK_ASSERT(e->sy <= e->ey);

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	comiss	xmm0, DWORD PTR [ecx+20]
	jae	SHORT $LN21@nk_tt__han
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_tt__handle_clipped_edge@@9@9@ddf8d5d8
	add	edx, 3
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BO@JGPMADBG@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN21@nk_tt__han:

; 10265:     if (y0 > e->ey) return;

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR _y0$[ebp]
	comiss	xmm0, DWORD PTR [eax+24]
	jbe	SHORT $LN16@nk_tt__han
	jmp	$LN1@nk_tt__han
$LN16@nk_tt__han:

; 10266:     if (y1 < e->sy) return;

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	comiss	xmm0, DWORD PTR _y1$[ebp]
	jbe	SHORT $LN15@nk_tt__han
	jmp	$LN1@nk_tt__han
$LN15@nk_tt__han:

; 10267:     if (y0 < e->sy) {

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	comiss	xmm0, DWORD PTR _y0$[ebp]
	jbe	SHORT $LN14@nk_tt__han

; 10268:         x0 += (x1-x0) * (e->sy - y0) / (y1-y0);

	movss	xmm0, DWORD PTR _x1$[ebp]
	subss	xmm0, DWORD PTR _x0$[ebp]
	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm1, DWORD PTR [eax+20]
	subss	xmm1, DWORD PTR _y0$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _y1$[ebp]
	subss	xmm1, DWORD PTR _y0$[ebp]
	divss	xmm0, xmm1
	addss	xmm0, DWORD PTR _x0$[ebp]
	movss	DWORD PTR _x0$[ebp], xmm0

; 10269:         y0 = e->sy;

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _y0$[ebp], xmm0
$LN14@nk_tt__han:

; 10270:     }
; 10271:     if (y1 > e->ey) {

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR _y1$[ebp]
	comiss	xmm0, DWORD PTR [eax+24]
	jbe	SHORT $LN13@nk_tt__han

; 10272:         x1 += (x1-x0) * (e->ey - y1) / (y1-y0);

	movss	xmm0, DWORD PTR _x1$[ebp]
	subss	xmm0, DWORD PTR _x0$[ebp]
	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm1, DWORD PTR [eax+24]
	subss	xmm1, DWORD PTR _y1$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _y1$[ebp]
	subss	xmm1, DWORD PTR _y0$[ebp]
	divss	xmm0, xmm1
	addss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR _x1$[ebp], xmm0

; 10273:         y1 = e->ey;

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR _y1$[ebp], xmm0
$LN13@nk_tt__han:

; 10274:     }
; 10275: 
; 10276:     if (x0 == x) NK_ASSERT(x1 <= x+1);

	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _x0$[ebp]
	ucomiss	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN12@nk_tt__han
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR _x1$[ebp]
	jae	SHORT $LN22@nk_tt__han
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_tt__handle_clipped_edge@@9@9@ddf8d5d8
	add	ecx, 15					; 0000000fH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BE@DHAKMBPL@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN22@nk_tt__han:

; 10277:     else if (x0 == x+1) NK_ASSERT(x1 >= x);

	jmp	$LN27@nk_tt__han
$LN12@nk_tt__han:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR _x0$[ebp]
	ucomiss	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN10@nk_tt__han
	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _x1$[ebp]
	comiss	xmm1, xmm0
	jae	SHORT $LN23@nk_tt__han
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_tt__handle_clipped_edge@@9@9@ddf8d5d8
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BA@FAAMJPKE@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN23@nk_tt__han:

; 10278:     else if (x0 <= x) NK_ASSERT(x1 <= x);

	jmp	$LN27@nk_tt__han
$LN10@nk_tt__han:
	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	comiss	xmm0, DWORD PTR _x0$[ebp]
	jb	SHORT $LN8@nk_tt__han
	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	comiss	xmm0, DWORD PTR _x1$[ebp]
	jae	SHORT $LN24@nk_tt__han
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_tt__handle_clipped_edge@@9@9@ddf8d5d8
	add	eax, 17					; 00000011H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BA@FEPJEPJJ@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN24@nk_tt__han:

; 10279:     else if (x0 >= x+1) NK_ASSERT(x1 >= x+1);

	jmp	$LN27@nk_tt__han
$LN8@nk_tt__han:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR _x0$[ebp]
	comiss	xmm1, xmm0
	jb	SHORT $LN6@nk_tt__han
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR _x1$[ebp]
	comiss	xmm1, xmm0
	jae	SHORT $LN25@nk_tt__han
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_tt__handle_clipped_edge@@9@9@ddf8d5d8
	add	ecx, 18					; 00000012H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BE@NGGEAFFG@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN25@nk_tt__han:

; 10280:     else NK_ASSERT(x1 >= x && x1 <= x+1);

	jmp	SHORT $LN27@nk_tt__han
$LN6@nk_tt__han:
	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _x1$[ebp]
	comiss	xmm1, xmm0
	jb	SHORT $LN26@nk_tt__han
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR _x1$[ebp]
	jae	SHORT $LN27@nk_tt__han
$LN26@nk_tt__han:
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_tt__handle_clipped_edge@@9@9@ddf8d5d8
	add	ecx, 19					; 00000013H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@NILBPPPH@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN27@nk_tt__han:

; 10281: 
; 10282:     if (x0 <= x && x1 <= x)

	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	comiss	xmm0, DWORD PTR _x0$[ebp]
	jb	SHORT $LN4@nk_tt__han
	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	comiss	xmm0, DWORD PTR _x1$[ebp]
	jb	SHORT $LN4@nk_tt__han

; 10283:         scanline[x] += e->direction * (y1-y0);

	movss	xmm0, DWORD PTR _y1$[ebp]
	subss	xmm0, DWORD PTR _y0$[ebp]
	mov	eax, DWORD PTR _e$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _scanline$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _scanline$[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0
	jmp	$LN1@nk_tt__han
$LN4@nk_tt__han:

; 10284:     else if (x0 >= x+1 && x1 >= x+1);

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR _x0$[ebp]
	comiss	xmm1, xmm0
	jb	SHORT $LN2@nk_tt__han
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR _x1$[ebp]
	comiss	xmm1, xmm0
	jb	SHORT $LN2@nk_tt__han

; 10285:     else {

	jmp	$LN1@nk_tt__han
$LN2@nk_tt__han:

; 10286:         NK_ASSERT(x0 >= x && x0 <= x+1 && x1 >= x && x1 <= x+1);

	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _x0$[ebp]
	comiss	xmm1, xmm0
	jb	SHORT $LN28@nk_tt__han
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR _x0$[ebp]
	jb	SHORT $LN28@nk_tt__han
	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _x1$[ebp]
	comiss	xmm1, xmm0
	jb	SHORT $LN28@nk_tt__han
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	cvtsi2ss xmm0, ecx
	comiss	xmm0, DWORD PTR _x1$[ebp]
	jae	SHORT $LN29@nk_tt__han
$LN28@nk_tt__han:
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_tt__handle_clipped_edge@@9@9@ddf8d5d8
	add	edx, 25					; 00000019H
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1FK@JPMIPNJF@?$AAx?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA0?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN29@nk_tt__han:

; 10287:         /* coverage = 1 - average x position */
; 10288:         scanline[x] += (float)e->direction * (float)(y1-y0) * (1.0f-((x0-(float)x)+(x1-(float)x))/2.0f);

	movss	xmm0, DWORD PTR _y1$[ebp]
	subss	xmm0, DWORD PTR _y0$[ebp]
	mov	eax, DWORD PTR _e$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvtsi2ss xmm1, DWORD PTR _x$[ebp]
	movss	xmm2, DWORD PTR _x0$[ebp]
	subss	xmm2, xmm1
	cvtsi2ss xmm1, DWORD PTR _x$[ebp]
	movss	xmm3, DWORD PTR _x1$[ebp]
	subss	xmm3, xmm1
	addss	xmm2, xmm3
	divss	xmm2, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _scanline$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _scanline$[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0
$LN1@nk_tt__han:

; 10289:     }
; 10290: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt__handle_clipped_edge ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt__new_active
_TEXT	SEGMENT
tv129 = -220						; size = 4
tv82 = -220						; size = 4
_dxdy$ = -20						; size = 4
_z$ = -8						; size = 4
_hh$ = 8						; size = 4
_e$ = 12						; size = 4
_off_x$ = 16						; size = 4
_start_point$ = 20					; size = 4
_nk_tt__new_active PROC					; COMDAT

; 10241: {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10242:     struct nk_tt__active_edge *z = (struct nk_tt__active_edge *)
; 10243:         nk_tt__hheap_alloc(hh, sizeof(*z));

	push	28					; 0000001cH
	mov	eax, DWORD PTR _hh$[ebp]
	push	eax
	call	_nk_tt__hheap_alloc
	add	esp, 8
	mov	DWORD PTR _z$[ebp], eax

; 10244:     float dxdy = (e->x1 - e->x0) / (e->y1 - e->y0);

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	subss	xmm1, DWORD PTR [eax+4]
	divss	xmm0, xmm1
	movss	DWORD PTR _dxdy$[ebp], xmm0

; 10245:     /*STBTT_assert(e->y0 <= start_point); */
; 10246:     if (!z) return z;

	cmp	DWORD PTR _z$[ebp], 0
	jne	SHORT $LN1@nk_tt__new
	mov	eax, DWORD PTR _z$[ebp]
	jmp	$LN2@nk_tt__new
$LN1@nk_tt__new:

; 10247:     z->fdx = dxdy;

	mov	eax, DWORD PTR _z$[ebp]
	movss	xmm0, DWORD PTR _dxdy$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 10248:     z->fdy = (dxdy != 0) ? (1/dxdy): 0;

	movss	xmm0, DWORD PTR _dxdy$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN4@nk_tt__new
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _dxdy$[ebp]
	movss	DWORD PTR tv82[ebp], xmm0
	jmp	SHORT $LN5@nk_tt__new
$LN4@nk_tt__new:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv82[ebp], xmm0
$LN5@nk_tt__new:
	mov	eax, DWORD PTR _z$[ebp]
	movss	xmm0, DWORD PTR tv82[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 10249:     z->fx = e->x0 + dxdy * (start_point - e->y0);

	mov	eax, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR _start_point$[ebp]
	subss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _dxdy$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _z$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 10250:     z->fx -= (float)off_x;

	cvtsi2ss xmm0, DWORD PTR _off_x$[ebp]
	mov	eax, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _z$[ebp]
	movss	DWORD PTR [ecx+4], xmm1

; 10251:     z->direction = e->invert ? 1.0f : -1.0f;

	mov	eax, DWORD PTR _e$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN6@nk_tt__new
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv129[ebp], xmm0
	jmp	SHORT $LN7@nk_tt__new
$LN6@nk_tt__new:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv129[ebp], xmm0
$LN7@nk_tt__new:
	mov	ecx, DWORD PTR _z$[ebp]
	movss	xmm0, DWORD PTR tv129[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 10252:     z->sy = e->y0;

	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+20], edx

; 10253:     z->ey = e->y1;

	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+24], edx

; 10254:     z->next = 0;

	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax], 0

; 10255:     return z;

	mov	eax, DWORD PTR _z$[ebp]
$LN2@nk_tt__new:

; 10256: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt__new_active ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt__hheap_cleanup
_TEXT	SEGMENT
_n$1 = -20						; size = 4
_c$ = -8						; size = 4
_hh$ = 8						; size = 4
_nk_tt__hheap_cleanup PROC				; COMDAT

; 10229: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10230:     struct nk_tt__hheap_chunk *c = hh->head;

	mov	eax, DWORD PTR _hh$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _c$[ebp], ecx
$LN2@nk_tt__hhe:

; 10231:     while (c) {

	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN3@nk_tt__hhe

; 10232:         struct nk_tt__hheap_chunk *n = c->next;

	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _n$1[ebp], ecx

; 10233:         hh->alloc.free(hh->alloc.userdata, c);

	mov	esi, esp
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hh$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _hh$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 10234:         c = n;

	mov	eax, DWORD PTR _n$1[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 10235:     }

	jmp	SHORT $LN2@nk_tt__hhe
$LN3@nk_tt__hhe:

; 10236: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt__hheap_cleanup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt__hheap_free
_TEXT	SEGMENT
_hh$ = 8						; size = 4
_p$ = 12						; size = 4
_nk_tt__hheap_free PROC					; COMDAT

; 10222: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10223:     *(void **) p = hh->first_free;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _hh$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax], edx

; 10224:     hh->first_free = p;

	mov	eax, DWORD PTR _hh$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 10225: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt__hheap_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt__hheap_alloc
_TEXT	SEGMENT
tv72 = -236						; size = 4
tv73 = -232						; size = 4
_c$1 = -32						; size = 4
_count$2 = -20						; size = 4
_p$3 = -8						; size = 4
_hh$ = 8						; size = 4
_size$ = 12						; size = 4
_nk_tt__hheap_alloc PROC				; COMDAT

; 10199: {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10200:     if (hh->first_free) {

	mov	eax, DWORD PTR _hh$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN4@nk_tt__hhe

; 10201:         void *p = hh->first_free;

	mov	eax, DWORD PTR _hh$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _p$3[ebp], ecx

; 10202:         hh->first_free = * (void **) p;

	mov	eax, DWORD PTR _hh$[ebp]
	mov	ecx, DWORD PTR _p$3[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx

; 10203:         return p;

	mov	eax, DWORD PTR _p$3[ebp]
	jmp	$LN5@nk_tt__hhe

; 10204:     } else {

	jmp	$LN5@nk_tt__hhe
$LN4@nk_tt__hhe:

; 10205:         if (hh->num_remaining_in_head_chunk == 0) {

	mov	eax, DWORD PTR _hh$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	$LN2@nk_tt__hhe

; 10206:             int count = (size < 32 ? 2000 : size < 128 ? 800 : 100);

	cmp	DWORD PTR _size$[ebp], 32		; 00000020H
	jae	SHORT $LN9@nk_tt__hhe
	mov	DWORD PTR tv73[ebp], 2000		; 000007d0H
	jmp	SHORT $LN10@nk_tt__hhe
$LN9@nk_tt__hhe:
	cmp	DWORD PTR _size$[ebp], 128		; 00000080H
	jae	SHORT $LN7@nk_tt__hhe
	mov	DWORD PTR tv72[ebp], 800		; 00000320H
	jmp	SHORT $LN8@nk_tt__hhe
$LN7@nk_tt__hhe:
	mov	DWORD PTR tv72[ebp], 100		; 00000064H
$LN8@nk_tt__hhe:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR tv73[ebp], eax
$LN10@nk_tt__hhe:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR _count$2[ebp], ecx

; 10207:             struct nk_tt__hheap_chunk *c = (struct nk_tt__hheap_chunk *)
; 10208:                 hh->alloc.alloc(hh->alloc.userdata, 0,
; 10209:                 sizeof(struct nk_tt__hheap_chunk) + size * (nk_size)count);

	mov	eax, DWORD PTR _size$[ebp]
	imul	eax, DWORD PTR _count$2[ebp]
	add	eax, 4
	mov	esi, esp
	push	eax
	push	0
	mov	ecx, DWORD PTR _hh$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _hh$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _c$1[ebp], eax

; 10210:             if (c == 0) return 0;

	cmp	DWORD PTR _c$1[ebp], 0
	jne	SHORT $LN1@nk_tt__hhe
	xor	eax, eax
	jmp	SHORT $LN5@nk_tt__hhe
$LN1@nk_tt__hhe:

; 10211:             c->next = hh->head;

	mov	eax, DWORD PTR _c$1[ebp]
	mov	ecx, DWORD PTR _hh$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax], edx

; 10212:             hh->head = c;

	mov	eax, DWORD PTR _hh$[ebp]
	mov	ecx, DWORD PTR _c$1[ebp]
	mov	DWORD PTR [eax+12], ecx

; 10213:             hh->num_remaining_in_head_chunk = count;

	mov	eax, DWORD PTR _hh$[ebp]
	mov	ecx, DWORD PTR _count$2[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN2@nk_tt__hhe:

; 10214:         }
; 10215:         --hh->num_remaining_in_head_chunk;

	mov	eax, DWORD PTR _hh$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, 1
	mov	edx, DWORD PTR _hh$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 10216:         return (char *) (hh->head) + size * (nk_size)hh->num_remaining_in_head_chunk;

	mov	eax, DWORD PTR _hh$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	imul	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _hh$[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	eax, ecx
$LN5@nk_tt__hhe:

; 10217:     }
; 10218: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt__hheap_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_GetGlyphBitmapBox
_TEXT	SEGMENT
_font$ = 8						; size = 4
_glyph$ = 12						; size = 4
_scale_x$ = 16						; size = 4
_scale_y$ = 20						; size = 4
_ix0$ = 24						; size = 4
_iy0$ = 28						; size = 4
_ix1$ = 32						; size = 4
_iy1$ = 36						; size = 4
_nk_tt_GetGlyphBitmapBox PROC				; COMDAT

; 10190: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10191:    nk_tt_GetGlyphBitmapBoxSubpixel(font, glyph, scale_x, scale_y,0.0f,0.0f, ix0, iy0, ix1, iy1);

	mov	eax, DWORD PTR _iy1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ix1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iy0$[ebp]
	push	edx
	mov	eax, DWORD PTR _ix0$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scale_y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scale_x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	edx
	call	_nk_tt_GetGlyphBitmapBoxSubpixel
	add	esp, 40					; 00000028H

; 10192: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt_GetGlyphBitmapBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_GetGlyphBitmapBoxSubpixel
_TEXT	SEGMENT
_y1$ = -44						; size = 4
_x1$ = -32						; size = 4
_y0$ = -20						; size = 4
_x0$ = -8						; size = 4
_font$ = 8						; size = 4
_glyph$ = 12						; size = 4
_scale_x$ = 16						; size = 4
_scale_y$ = 20						; size = 4
_shift_x$ = 24						; size = 4
_shift_y$ = 28						; size = 4
_ix0$ = 32						; size = 4
_iy0$ = 36						; size = 4
_ix1$ = 40						; size = 4
_iy1$ = 44						; size = 4
_nk_tt_GetGlyphBitmapBoxSubpixel PROC			; COMDAT

; 10170: {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10171:     int x0,y0,x1,y1;
; 10172:     if (!nk_tt_GetGlyphBox(font, glyph, &x0,&y0,&x1,&y1)) {

	lea	eax, DWORD PTR _y1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _y0$[ebp]
	push	edx
	lea	eax, DWORD PTR _x0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	edx
	call	_nk_tt_GetGlyphBox
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN10@nk_tt_GetG

; 10173:         /* e.g. space character */
; 10174:         if (ix0) *ix0 = 0;

	cmp	DWORD PTR _ix0$[ebp], 0
	je	SHORT $LN9@nk_tt_GetG
	mov	eax, DWORD PTR _ix0$[ebp]
	mov	DWORD PTR [eax], 0
$LN9@nk_tt_GetG:

; 10175:         if (iy0) *iy0 = 0;

	cmp	DWORD PTR _iy0$[ebp], 0
	je	SHORT $LN8@nk_tt_GetG
	mov	eax, DWORD PTR _iy0$[ebp]
	mov	DWORD PTR [eax], 0
$LN8@nk_tt_GetG:

; 10176:         if (ix1) *ix1 = 0;

	cmp	DWORD PTR _ix1$[ebp], 0
	je	SHORT $LN7@nk_tt_GetG
	mov	eax, DWORD PTR _ix1$[ebp]
	mov	DWORD PTR [eax], 0
$LN7@nk_tt_GetG:

; 10177:         if (iy1) *iy1 = 0;

	cmp	DWORD PTR _iy1$[ebp], 0
	je	SHORT $LN6@nk_tt_GetG
	mov	eax, DWORD PTR _iy1$[ebp]
	mov	DWORD PTR [eax], 0
$LN6@nk_tt_GetG:

; 10178:     } else {

	jmp	$LN1@nk_tt_GetG
$LN10@nk_tt_GetG:

; 10179:         /* move to integral bboxes (treating pixels as little squares, what pixels get touched)? */
; 10180:         if (ix0) *ix0 = nk_ifloorf((float)x0 * scale_x + shift_x);

	cmp	DWORD PTR _ix0$[ebp], 0
	je	SHORT $LN4@nk_tt_GetG
	cvtsi2ss xmm0, DWORD PTR _x0$[ebp]
	mulss	xmm0, DWORD PTR _scale_x$[ebp]
	addss	xmm0, DWORD PTR _shift_x$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_ifloorf
	add	esp, 4
	mov	ecx, DWORD PTR _ix0$[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@nk_tt_GetG:

; 10181:         if (iy0) *iy0 = nk_ifloorf((float)-y1 * scale_y + shift_y);

	cmp	DWORD PTR _iy0$[ebp], 0
	je	SHORT $LN3@nk_tt_GetG
	mov	eax, DWORD PTR _y1$[ebp]
	neg	eax
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _scale_y$[ebp]
	addss	xmm0, DWORD PTR _shift_y$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_ifloorf
	add	esp, 4
	mov	ecx, DWORD PTR _iy0$[ebp]
	mov	DWORD PTR [ecx], eax
$LN3@nk_tt_GetG:

; 10182:         if (ix1) *ix1 = nk_iceilf ((float)x1 * scale_x + shift_x);

	cmp	DWORD PTR _ix1$[ebp], 0
	je	SHORT $LN2@nk_tt_GetG
	cvtsi2ss xmm0, DWORD PTR _x1$[ebp]
	mulss	xmm0, DWORD PTR _scale_x$[ebp]
	addss	xmm0, DWORD PTR _shift_x$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_iceilf
	add	esp, 4
	mov	ecx, DWORD PTR _ix1$[ebp]
	mov	DWORD PTR [ecx], eax
$LN2@nk_tt_GetG:

; 10183:         if (iy1) *iy1 = nk_iceilf ((float)-y0 * scale_y + shift_y);

	cmp	DWORD PTR _iy1$[ebp], 0
	je	SHORT $LN1@nk_tt_GetG
	mov	eax, DWORD PTR _y0$[ebp]
	neg	eax
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _scale_y$[ebp]
	addss	xmm0, DWORD PTR _shift_y$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_iceilf
	add	esp, 4
	mov	ecx, DWORD PTR _iy1$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@nk_tt_GetG:

; 10184:     }
; 10185: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@nk_tt_GetG
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@nk_tt_GetG:
	DD	4
	DD	$LN17@nk_tt_GetG
$LN17@nk_tt_GetG:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN13@nk_tt_GetG
	DD	-20					; ffffffecH
	DD	4
	DD	$LN14@nk_tt_GetG
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN15@nk_tt_GetG
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN16@nk_tt_GetG
$LN16@nk_tt_GetG:
	DB	121					; 00000079H
	DB	49					; 00000031H
	DB	0
$LN15@nk_tt_GetG:
	DB	120					; 00000078H
	DB	49					; 00000031H
	DB	0
$LN14@nk_tt_GetG:
	DB	121					; 00000079H
	DB	48					; 00000030H
	DB	0
$LN13@nk_tt_GetG:
	DB	120					; 00000078H
	DB	48					; 00000030H
	DB	0
_nk_tt_GetGlyphBitmapBoxSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_ScaleForMappingEmToPixels
_TEXT	SEGMENT
tv80 = -208						; size = 4
_unitsPerEm$ = -8					; size = 4
_info$ = 8						; size = 4
_pixels$ = 12						; size = 4
_nk_tt_ScaleForMappingEmToPixels PROC			; COMDAT

; 10158: {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10159:    int unitsPerEm = nk_ttUSHORT(info->data + info->head + 18);

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx+16]
	lea	ecx, DWORD PTR [ecx+eax+18]
	push	ecx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	edx, ax
	mov	DWORD PTR _unitsPerEm$[ebp], edx

; 10160:    return pixels / (float)unitsPerEm;

	cvtsi2ss xmm0, DWORD PTR _unitsPerEm$[ebp]
	movss	xmm1, DWORD PTR _pixels$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR tv80[ebp], xmm1
	fld	DWORD PTR tv80[ebp]

; 10161: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt_ScaleForMappingEmToPixels ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_ScaleForPixelHeight
_TEXT	SEGMENT
tv93 = -208						; size = 4
_fheight$ = -8						; size = 4
_info$ = 8						; size = 4
_height$ = 12						; size = 4
_nk_tt_ScaleForPixelHeight PROC				; COMDAT

; 10151: {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10152:    int fheight = nk_ttSHORT(info->data + info->hhea + 4) - nk_ttSHORT(info->data + info->hhea + 6);

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx+24]
	lea	ecx, DWORD PTR [ecx+eax+4]
	push	ecx
	call	_nk_ttSHORT
	add	esp, 4
	movsx	esi, ax
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _info$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	lea	eax, DWORD PTR [eax+edx+6]
	push	eax
	call	_nk_ttSHORT
	add	esp, 4
	movsx	ecx, ax
	sub	esi, ecx
	mov	DWORD PTR _fheight$[ebp], esi

; 10153:    return (float) height / (float)fheight;

	cvtsi2ss xmm0, DWORD PTR _fheight$[ebp]
	movss	xmm1, DWORD PTR _height$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR tv93[ebp], xmm1
	fld	DWORD PTR tv93[ebp]

; 10154: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt_ScaleForPixelHeight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_GetFontVMetrics
_TEXT	SEGMENT
_info$ = 8						; size = 4
_ascent$ = 12						; size = 4
_descent$ = 16						; size = 4
_lineGap$ = 20						; size = 4
_nk_tt_GetFontVMetrics PROC				; COMDAT

; 10143: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10144:    if (ascent ) *ascent  = nk_ttSHORT(info->data+info->hhea + 4);

	cmp	DWORD PTR _ascent$[ebp], 0
	je	SHORT $LN3@nk_tt_GetF
	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx+24]
	lea	ecx, DWORD PTR [ecx+eax+4]
	push	ecx
	call	_nk_ttSHORT
	add	esp, 4
	movsx	edx, ax
	mov	eax, DWORD PTR _ascent$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@nk_tt_GetF:

; 10145:    if (descent) *descent = nk_ttSHORT(info->data+info->hhea + 6);

	cmp	DWORD PTR _descent$[ebp], 0
	je	SHORT $LN2@nk_tt_GetF
	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx+24]
	lea	ecx, DWORD PTR [ecx+eax+6]
	push	ecx
	call	_nk_ttSHORT
	add	esp, 4
	movsx	edx, ax
	mov	eax, DWORD PTR _descent$[ebp]
	mov	DWORD PTR [eax], edx
$LN2@nk_tt_GetF:

; 10146:    if (lineGap) *lineGap = nk_ttSHORT(info->data+info->hhea + 8);

	cmp	DWORD PTR _lineGap$[ebp], 0
	je	SHORT $LN4@nk_tt_GetF
	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx+24]
	lea	ecx, DWORD PTR [ecx+eax+8]
	push	ecx
	call	_nk_ttSHORT
	add	esp, 4
	movsx	edx, ax
	mov	eax, DWORD PTR _lineGap$[ebp]
	mov	DWORD PTR [eax], edx
$LN4@nk_tt_GetF:

; 10147: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt_GetFontVMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_GetGlyphHMetrics
_TEXT	SEGMENT
_numOfLongHorMetrics$ = -8				; size = 2
_info$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_advanceWidth$ = 16					; size = 4
_leftSideBearing$ = 20					; size = 4
_nk_tt_GetGlyphHMetrics PROC				; COMDAT

; 10125: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10126:     nk_ushort numOfLongHorMetrics = nk_ttUSHORT(info->data+info->hhea + 34);

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx+24]
	lea	ecx, DWORD PTR [ecx+eax+34]
	push	ecx
	call	_nk_ttUSHORT
	add	esp, 4
	mov	WORD PTR _numOfLongHorMetrics$[ebp], ax

; 10127:     if (glyph_index < numOfLongHorMetrics) {

	movzx	eax, WORD PTR _numOfLongHorMetrics$[ebp]
	cmp	DWORD PTR _glyph_index$[ebp], eax
	jge	SHORT $LN6@nk_tt_GetG

; 10128:         if (advanceWidth)

	cmp	DWORD PTR _advanceWidth$[ebp], 0
	je	SHORT $LN5@nk_tt_GetG

; 10129:             *advanceWidth    = nk_ttSHORT(info->data + info->hmtx + 4*glyph_index);

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _info$[ebp]
	add	ecx, DWORD PTR [edx+28]
	mov	eax, DWORD PTR _glyph_index$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*4]
	push	ecx
	call	_nk_ttSHORT
	add	esp, 4
	movsx	edx, ax
	mov	eax, DWORD PTR _advanceWidth$[ebp]
	mov	DWORD PTR [eax], edx
$LN5@nk_tt_GetG:

; 10130:         if (leftSideBearing)

	cmp	DWORD PTR _leftSideBearing$[ebp], 0
	je	SHORT $LN4@nk_tt_GetG

; 10131:             *leftSideBearing = nk_ttSHORT(info->data + info->hmtx + 4*glyph_index + 2);

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _info$[ebp]
	add	ecx, DWORD PTR [edx+28]
	mov	eax, DWORD PTR _glyph_index$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*4+2]
	push	ecx
	call	_nk_ttSHORT
	add	esp, 4
	movsx	edx, ax
	mov	eax, DWORD PTR _leftSideBearing$[ebp]
	mov	DWORD PTR [eax], edx
$LN4@nk_tt_GetG:

; 10132:     } else {

	jmp	SHORT $LN7@nk_tt_GetG
$LN6@nk_tt_GetG:

; 10133:         if (advanceWidth)

	cmp	DWORD PTR _advanceWidth$[ebp], 0
	je	SHORT $LN2@nk_tt_GetG

; 10134:             *advanceWidth    = nk_ttSHORT(info->data + info->hmtx + 4*(numOfLongHorMetrics-1));

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _info$[ebp]
	add	ecx, DWORD PTR [edx+28]
	movzx	eax, WORD PTR _numOfLongHorMetrics$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*4-4]
	push	ecx
	call	_nk_ttSHORT
	add	esp, 4
	movsx	edx, ax
	mov	eax, DWORD PTR _advanceWidth$[ebp]
	mov	DWORD PTR [eax], edx
$LN2@nk_tt_GetG:

; 10135:         if (leftSideBearing)

	cmp	DWORD PTR _leftSideBearing$[ebp], 0
	je	SHORT $LN7@nk_tt_GetG

; 10136:             *leftSideBearing = nk_ttSHORT(info->data + info->hmtx + 4*numOfLongHorMetrics + 2*(glyph_index - numOfLongHorMetrics));

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _info$[ebp]
	add	ecx, DWORD PTR [edx+28]
	movzx	eax, WORD PTR _numOfLongHorMetrics$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*4]
	movzx	edx, WORD PTR _numOfLongHorMetrics$[ebp]
	mov	eax, DWORD PTR _glyph_index$[ebp]
	sub	eax, edx
	lea	ecx, DWORD PTR [ecx+eax*2]
	push	ecx
	call	_nk_ttSHORT
	add	esp, 4
	movsx	edx, ax
	mov	eax, DWORD PTR _leftSideBearing$[ebp]
	mov	DWORD PTR [eax], edx
$LN7@nk_tt_GetG:

; 10137:     }
; 10138: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt_GetGlyphHMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _stbtt__close_shape
_TEXT	SEGMENT
tv141 = -196						; size = 4
tv131 = -196						; size = 4
tv88 = -196						; size = 4
tv78 = -196						; size = 4
_vertices$ = 8						; size = 4
_num_vertices$ = 12					; size = 4
_was_off$ = 16						; size = 4
_start_off$ = 20					; size = 4
_sx$ = 24						; size = 4
_sy$ = 28						; size = 4
_scx$ = 32						; size = 4
_scy$ = 36						; size = 4
_cx$ = 40						; size = 4
_cy$ = 44						; size = 4
_stbtt__close_shape PROC				; COMDAT

; 9884 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 9885 :    if (start_off) {

	cmp	DWORD PTR _start_off$[ebp], 0
	je	$LN5@stbtt__clo

; 9886 :       if (was_off)

	cmp	DWORD PTR _was_off$[ebp], 0
	je	SHORT $LN4@stbtt__clo

; 9887 :          nk_tt_setvertex(&vertices[num_vertices++], NK_TT_vcurve, (cx+scx)>>1, (cy+scy)>>1, cx,cy);

	imul	eax, DWORD PTR _num_vertices$[ebp], 10
	add	eax, DWORD PTR _vertices$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	mov	ecx, DWORD PTR _num_vertices$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num_vertices$[ebp], ecx
	mov	edx, DWORD PTR _cy$[ebp]
	push	edx
	mov	eax, DWORD PTR _cx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cy$[ebp]
	add	ecx, DWORD PTR _scy$[ebp]
	sar	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _cx$[ebp]
	add	edx, DWORD PTR _scx$[ebp]
	sar	edx, 1
	push	edx
	push	3
	mov	eax, DWORD PTR tv78[ebp]
	push	eax
	call	_nk_tt_setvertex
	add	esp, 24					; 00000018H
$LN4@stbtt__clo:

; 9888 :       nk_tt_setvertex(&vertices[num_vertices++], NK_TT_vcurve, sx,sy,scx,scy);

	imul	eax, DWORD PTR _num_vertices$[ebp], 10
	add	eax, DWORD PTR _vertices$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	ecx, DWORD PTR _num_vertices$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num_vertices$[ebp], ecx
	mov	edx, DWORD PTR _scy$[ebp]
	push	edx
	mov	eax, DWORD PTR _scx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sx$[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR tv88[ebp]
	push	eax
	call	_nk_tt_setvertex
	add	esp, 24					; 00000018H

; 9889 :    } else {

	jmp	SHORT $LN3@stbtt__clo
$LN5@stbtt__clo:

; 9890 :       if (was_off)

	cmp	DWORD PTR _was_off$[ebp], 0
	je	SHORT $LN2@stbtt__clo

; 9891 :          nk_tt_setvertex(&vertices[num_vertices++], NK_TT_vcurve,sx,sy,cx,cy);

	imul	eax, DWORD PTR _num_vertices$[ebp], 10
	add	eax, DWORD PTR _vertices$[ebp]
	mov	DWORD PTR tv131[ebp], eax
	mov	ecx, DWORD PTR _num_vertices$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num_vertices$[ebp], ecx
	mov	edx, DWORD PTR _cy$[ebp]
	push	edx
	mov	eax, DWORD PTR _cx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sx$[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR tv131[ebp]
	push	eax
	call	_nk_tt_setvertex
	add	esp, 24					; 00000018H

; 9892 :       else

	jmp	SHORT $LN3@stbtt__clo
$LN2@stbtt__clo:

; 9893 :          nk_tt_setvertex(&vertices[num_vertices++], NK_TT_vline,sx,sy,0,0);

	imul	eax, DWORD PTR _num_vertices$[ebp], 10
	add	eax, DWORD PTR _vertices$[ebp]
	mov	DWORD PTR tv141[ebp], eax
	mov	ecx, DWORD PTR _num_vertices$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num_vertices$[ebp], ecx
	push	0
	push	0
	mov	edx, DWORD PTR _sy$[ebp]
	push	edx
	mov	eax, DWORD PTR _sx$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR tv141[ebp]
	push	ecx
	call	_nk_tt_setvertex
	add	esp, 24					; 00000018H
$LN3@stbtt__clo:

; 9894 :    }
; 9895 :    return num_vertices;

	mov	eax, DWORD PTR _num_vertices$[ebp]

; 9896 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_stbtt__close_shape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_GetGlyphBox
_TEXT	SEGMENT
_g$ = -8						; size = 4
_info$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_x0$ = 16						; size = 4
_y0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_nk_tt_GetGlyphBox PROC					; COMDAT

; 9870 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 9871 :     int g = nk_tt__GetGlyfOffset(info, glyph_index);

	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _info$[ebp]
	push	ecx
	call	_nk_tt__GetGlyfOffset
	add	esp, 8
	mov	DWORD PTR _g$[ebp], eax

; 9872 :     if (g < 0) return 0;

	cmp	DWORD PTR _g$[ebp], 0
	jge	SHORT $LN5@nk_tt_GetG
	xor	eax, eax
	jmp	$LN6@nk_tt_GetG
$LN5@nk_tt_GetG:

; 9873 : 
; 9874 :     if (x0) *x0 = nk_ttSHORT(info->data + g + 2);

	cmp	DWORD PTR _x0$[ebp], 0
	je	SHORT $LN4@nk_tt_GetG
	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _g$[ebp]
	lea	eax, DWORD PTR [ecx+edx+2]
	push	eax
	call	_nk_ttSHORT
	add	esp, 4
	movsx	ecx, ax
	mov	edx, DWORD PTR _x0$[ebp]
	mov	DWORD PTR [edx], ecx
$LN4@nk_tt_GetG:

; 9875 :     if (y0) *y0 = nk_ttSHORT(info->data + g + 4);

	cmp	DWORD PTR _y0$[ebp], 0
	je	SHORT $LN3@nk_tt_GetG
	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _g$[ebp]
	lea	eax, DWORD PTR [ecx+edx+4]
	push	eax
	call	_nk_ttSHORT
	add	esp, 4
	movsx	ecx, ax
	mov	edx, DWORD PTR _y0$[ebp]
	mov	DWORD PTR [edx], ecx
$LN3@nk_tt_GetG:

; 9876 :     if (x1) *x1 = nk_ttSHORT(info->data + g + 6);

	cmp	DWORD PTR _x1$[ebp], 0
	je	SHORT $LN2@nk_tt_GetG
	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _g$[ebp]
	lea	eax, DWORD PTR [ecx+edx+6]
	push	eax
	call	_nk_ttSHORT
	add	esp, 4
	movsx	ecx, ax
	mov	edx, DWORD PTR _x1$[ebp]
	mov	DWORD PTR [edx], ecx
$LN2@nk_tt_GetG:

; 9877 :     if (y1) *y1 = nk_ttSHORT(info->data + g + 8);

	cmp	DWORD PTR _y1$[ebp], 0
	je	SHORT $LN1@nk_tt_GetG
	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _g$[ebp]
	lea	eax, DWORD PTR [ecx+edx+8]
	push	eax
	call	_nk_ttSHORT
	add	esp, 4
	movsx	ecx, ax
	mov	edx, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@nk_tt_GetG:

; 9878 :     return 1;

	mov	eax, 1
$LN6@nk_tt_GetG:

; 9879 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt_GetGlyphBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt__GetGlyfOffset
_TEXT	SEGMENT
tv145 = -220						; size = 4
_g2$ = -20						; size = 4
_g1$ = -8						; size = 4
_info$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_nk_tt__GetGlyfOffset PROC				; COMDAT

; 9852 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 9853 :     int g1,g2;
; 9854 :     if (glyph_index >= info->numGlyphs) return -1; /* glyph index out of range */

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN4@nk_tt__Get
	or	eax, -1
	jmp	$LN5@nk_tt__Get
$LN4@nk_tt__Get:

; 9855 :     if (info->indexToLocFormat >= 2)    return -1; /* unknown index->glyph map format */

	mov	eax, DWORD PTR _info$[ebp]
	cmp	DWORD PTR [eax+40], 2
	jl	SHORT $LN3@nk_tt__Get
	or	eax, -1
	jmp	$LN5@nk_tt__Get
$LN3@nk_tt__Get:

; 9856 : 
; 9857 :     if (info->indexToLocFormat == 0) {

	mov	eax, DWORD PTR _info$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN2@nk_tt__Get

; 9858 :         g1 = info->glyf + nk_ttUSHORT(info->data + info->loca + glyph_index * 2) * 2;

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _info$[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _glyph_index$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*2]
	push	ecx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	edx, ax
	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	lea	edx, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _g1$[ebp], edx

; 9859 :         g2 = info->glyf + nk_ttUSHORT(info->data + info->loca + glyph_index * 2 + 2) * 2;

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _info$[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _glyph_index$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*2+2]
	push	ecx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	edx, ax
	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	lea	edx, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _g2$[ebp], edx

; 9860 :     } else {

	jmp	SHORT $LN1@nk_tt__Get
$LN2@nk_tt__Get:

; 9861 :         g1 = info->glyf + (int)nk_ttULONG (info->data + info->loca + glyph_index * 4);

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _info$[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _glyph_index$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*4]
	push	ecx
	call	_nk_ttULONG
	add	esp, 4
	mov	edx, DWORD PTR _info$[ebp]
	add	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _g1$[ebp], eax

; 9862 :         g2 = info->glyf + (int)nk_ttULONG (info->data + info->loca + glyph_index * 4 + 4);

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _info$[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _glyph_index$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*4+4]
	push	ecx
	call	_nk_ttULONG
	add	esp, 4
	mov	edx, DWORD PTR _info$[ebp]
	add	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _g2$[ebp], eax
$LN1@nk_tt__Get:

; 9863 :     }
; 9864 :     return g1==g2 ? -1 : g1; /* if length is 0, return -1 */

	mov	eax, DWORD PTR _g1$[ebp]
	cmp	eax, DWORD PTR _g2$[ebp]
	jne	SHORT $LN7@nk_tt__Get
	mov	DWORD PTR tv145[ebp], -1
	jmp	SHORT $LN8@nk_tt__Get
$LN7@nk_tt__Get:
	mov	ecx, DWORD PTR _g1$[ebp]
	mov	DWORD PTR tv145[ebp], ecx
$LN8@nk_tt__Get:
	mov	eax, DWORD PTR tv145[ebp]
$LN5@nk_tt__Get:

; 9865 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt__GetGlyfOffset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_setvertex
_TEXT	SEGMENT
_v$ = 8							; size = 4
_type$ = 12						; size = 1
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_cx$ = 24						; size = 4
_cy$ = 28						; size = 4
_nk_tt_setvertex PROC					; COMDAT

; 9842 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 9843 :     v->type = type;

	mov	eax, DWORD PTR _v$[ebp]
	mov	cl, BYTE PTR _type$[ebp]
	mov	BYTE PTR [eax+8], cl

; 9844 :     v->x = (nk_short) x;

	mov	eax, DWORD PTR _v$[ebp]
	mov	cx, WORD PTR _x$[ebp]
	mov	WORD PTR [eax], cx

; 9845 :     v->y = (nk_short) y;

	mov	eax, DWORD PTR _v$[ebp]
	mov	cx, WORD PTR _y$[ebp]
	mov	WORD PTR [eax+2], cx

; 9846 :     v->cx = (nk_short) cx;

	mov	eax, DWORD PTR _v$[ebp]
	mov	cx, WORD PTR _cx$[ebp]
	mov	WORD PTR [eax+4], cx

; 9847 :     v->cy = (nk_short) cy;

	mov	eax, DWORD PTR _v$[ebp]
	mov	cx, WORD PTR _cy$[ebp]
	mov	WORD PTR [eax+6], cx

; 9848 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt_setvertex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_FindGlyphIndex
_TEXT	SEGMENT
_start_glyph$1 = -272					; size = 4
_end_char$2 = -260					; size = 4
_start_char$3 = -248					; size = 4
_mid$4 = -236						; size = 4
_high$5 = -224						; size = 4
_low$6 = -212						; size = 4
_ngroups$7 = -200					; size = 4
_item$8 = -188						; size = 2
_start$9 = -176						; size = 2
_offset$10 = -164					; size = 2
_end$11 = -152						; size = 2
_search$12 = -140					; size = 4
_endCount$13 = -128					; size = 4
_rangeShift$14 = -116					; size = 2
_entrySelector$15 = -104				; size = 2
_searchRange$16 = -92					; size = 2
_segcount$17 = -80					; size = 2
_count$18 = -68						; size = 4
_first$19 = -56						; size = 4
_bytes$20 = -44						; size = 4
_format$ = -32						; size = 2
_index_map$ = -20					; size = 4
_data$ = -8						; size = 4
_info$ = 8						; size = 4
_unicode_codepoint$ = 12				; size = 4
_nk_tt_FindGlyphIndex PROC				; COMDAT

; 9748 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 468				; 000001d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-468]
	mov	ecx, 117				; 00000075H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 9749 :     const nk_byte *data = info->data;

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _data$[ebp], ecx

; 9750 :     nk_uint index_map = (nk_uint)info->index_map;

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _index_map$[ebp], ecx

; 9751 : 
; 9752 :     nk_ushort format = nk_ttUSHORT(data + index_map + 0);

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _index_map$[ebp]
	push	eax
	call	_nk_ttUSHORT
	add	esp, 4
	mov	WORD PTR _format$[ebp], ax

; 9753 :     if (format == 0) { /* apple byte encoding */

	movzx	eax, WORD PTR _format$[ebp]
	test	eax, eax
	jne	SHORT $LN27@nk_tt_Find

; 9754 :         nk_int bytes = nk_ttUSHORT(data + index_map + 2);

	mov	eax, DWORD PTR _index_map$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	eax, ax
	mov	DWORD PTR _bytes$20[ebp], eax

; 9755 :         if (unicode_codepoint < bytes-6)

	mov	eax, DWORD PTR _bytes$20[ebp]
	sub	eax, 6
	cmp	DWORD PTR _unicode_codepoint$[ebp], eax
	jge	SHORT $LN26@nk_tt_Find

; 9756 :             return nk_ttBYTE(data + index_map + 6 + unicode_codepoint);

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _index_map$[ebp]
	mov	ecx, DWORD PTR _unicode_codepoint$[ebp]
	movzx	eax, BYTE PTR [eax+ecx+6]
	jmp	$LN28@nk_tt_Find
$LN26@nk_tt_Find:

; 9757 :         return 0;

	xor	eax, eax
	jmp	$LN28@nk_tt_Find
	jmp	$LN25@nk_tt_Find
$LN27@nk_tt_Find:

; 9758 :     } else if (format == 6) {

	movzx	eax, WORD PTR _format$[ebp]
	cmp	eax, 6
	jne	SHORT $LN24@nk_tt_Find

; 9759 :         nk_uint first = nk_ttUSHORT(data + index_map + 6);

	mov	eax, DWORD PTR _index_map$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+6]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	eax, ax
	mov	DWORD PTR _first$19[ebp], eax

; 9760 :         nk_uint count = nk_ttUSHORT(data + index_map + 8);

	mov	eax, DWORD PTR _index_map$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	eax, ax
	mov	DWORD PTR _count$18[ebp], eax

; 9761 :         if ((nk_uint) unicode_codepoint >= first && (nk_uint) unicode_codepoint < first+count)

	mov	eax, DWORD PTR _unicode_codepoint$[ebp]
	cmp	eax, DWORD PTR _first$19[ebp]
	jb	SHORT $LN23@nk_tt_Find
	mov	eax, DWORD PTR _first$19[ebp]
	add	eax, DWORD PTR _count$18[ebp]
	cmp	DWORD PTR _unicode_codepoint$[ebp], eax
	jae	SHORT $LN23@nk_tt_Find

; 9762 :             return nk_ttUSHORT(data + index_map + 10 + (unicode_codepoint - (int)first)*2);

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _index_map$[ebp]
	mov	ecx, DWORD PTR _unicode_codepoint$[ebp]
	sub	ecx, DWORD PTR _first$19[ebp]
	lea	edx, DWORD PTR [eax+ecx*2+10]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	eax, ax
	jmp	$LN28@nk_tt_Find
$LN23@nk_tt_Find:

; 9763 :         return 0;

	xor	eax, eax
	jmp	$LN28@nk_tt_Find
	jmp	$LN25@nk_tt_Find
$LN24@nk_tt_Find:

; 9764 :     } else if (format == 2) {

	movzx	eax, WORD PTR _format$[ebp]
	cmp	eax, 2
	jne	SHORT $LN21@nk_tt_Find

; 9765 :         NK_ASSERT(0); /* @TODO: high-byte mapping for japanese/chinese/korean */

	xor	eax, eax
	jne	SHORT $LN30@nk_tt_Find
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_tt_FindGlyphIndex@@9@9@ddf8d5d8
	add	ecx, 17					; 00000011H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN30@nk_tt_Find:

; 9766 :         return 0;

	xor	eax, eax
	jmp	$LN28@nk_tt_Find
	jmp	$LN25@nk_tt_Find
$LN21@nk_tt_Find:

; 9767 :     } else if (format == 4) { /* standard mapping for windows fonts: binary search collection of ranges */

	movzx	eax, WORD PTR _format$[ebp]
	cmp	eax, 4
	jne	$LN19@nk_tt_Find

; 9768 :         nk_ushort segcount = nk_ttUSHORT(data+index_map+6) >> 1;

	mov	eax, DWORD PTR _index_map$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+6]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	eax, ax
	sar	eax, 1
	mov	WORD PTR _segcount$17[ebp], ax

; 9769 :         nk_ushort searchRange = nk_ttUSHORT(data+index_map+8) >> 1;

	mov	eax, DWORD PTR _index_map$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	eax, ax
	sar	eax, 1
	mov	WORD PTR _searchRange$16[ebp], ax

; 9770 :         nk_ushort entrySelector = nk_ttUSHORT(data+index_map+10);

	mov	eax, DWORD PTR _index_map$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+10]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	mov	WORD PTR _entrySelector$15[ebp], ax

; 9771 :         nk_ushort rangeShift = nk_ttUSHORT(data+index_map+12) >> 1;

	mov	eax, DWORD PTR _index_map$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+12]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	eax, ax
	sar	eax, 1
	mov	WORD PTR _rangeShift$14[ebp], ax

; 9772 : 
; 9773 :         /* do a binary search of the segments */
; 9774 :         nk_uint endCount = index_map + 14;

	mov	eax, DWORD PTR _index_map$[ebp]
	add	eax, 14					; 0000000eH
	mov	DWORD PTR _endCount$13[ebp], eax

; 9775 :         nk_uint search = endCount;

	mov	eax, DWORD PTR _endCount$13[ebp]
	mov	DWORD PTR _search$12[ebp], eax

; 9776 : 
; 9777 :         if (unicode_codepoint > 0xffff)

	cmp	DWORD PTR _unicode_codepoint$[ebp], 65535 ; 0000ffffH
	jle	SHORT $LN18@nk_tt_Find

; 9778 :             return 0;

	xor	eax, eax
	jmp	$LN28@nk_tt_Find
$LN18@nk_tt_Find:

; 9779 : 
; 9780 :         /* they lie from endCount .. endCount + segCount */
; 9781 :         /* but searchRange is the nearest power of two, so... */
; 9782 :         if (unicode_codepoint >= nk_ttUSHORT(data + search + rangeShift*2))

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _search$12[ebp]
	movzx	ecx, WORD PTR _rangeShift$14[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	eax, ax
	cmp	DWORD PTR _unicode_codepoint$[ebp], eax
	jl	SHORT $LN17@nk_tt_Find

; 9783 :             search += (nk_uint)(rangeShift*2);

	movzx	eax, WORD PTR _rangeShift$14[ebp]
	mov	ecx, DWORD PTR _search$12[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _search$12[ebp], edx
$LN17@nk_tt_Find:

; 9784 : 
; 9785 :         /* now decrement to bias correctly to find smallest */
; 9786 :         search -= 2;

	mov	eax, DWORD PTR _search$12[ebp]
	sub	eax, 2
	mov	DWORD PTR _search$12[ebp], eax
$LN16@nk_tt_Find:

; 9787 :         while (entrySelector) {

	movzx	eax, WORD PTR _entrySelector$15[ebp]
	test	eax, eax
	je	SHORT $LN15@nk_tt_Find

; 9788 :             nk_ushort end;
; 9789 :             searchRange >>= 1;

	mov	ax, WORD PTR _searchRange$16[ebp]
	shr	ax, 1
	mov	WORD PTR _searchRange$16[ebp], ax

; 9790 :             end = nk_ttUSHORT(data + search + searchRange*2);

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _search$12[ebp]
	movzx	ecx, WORD PTR _searchRange$16[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	mov	WORD PTR _end$11[ebp], ax

; 9791 :             if (unicode_codepoint > end)

	movzx	eax, WORD PTR _end$11[ebp]
	cmp	DWORD PTR _unicode_codepoint$[ebp], eax
	jle	SHORT $LN14@nk_tt_Find

; 9792 :                 search += (nk_uint)(searchRange*2);

	movzx	eax, WORD PTR _searchRange$16[ebp]
	mov	ecx, DWORD PTR _search$12[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _search$12[ebp], edx
$LN14@nk_tt_Find:

; 9793 :             --entrySelector;

	mov	ax, WORD PTR _entrySelector$15[ebp]
	sub	ax, 1
	mov	WORD PTR _entrySelector$15[ebp], ax

; 9794 :         }

	jmp	SHORT $LN16@nk_tt_Find
$LN15@nk_tt_Find:

; 9795 :         search += 2;

	mov	eax, DWORD PTR _search$12[ebp]
	add	eax, 2
	mov	DWORD PTR _search$12[ebp], eax

; 9796 : 
; 9797 :       {
; 9798 :          nk_ushort offset, start;
; 9799 :          nk_ushort item = (nk_ushort) ((search - endCount) >> 1);

	mov	eax, DWORD PTR _search$12[ebp]
	sub	eax, DWORD PTR _endCount$13[ebp]
	shr	eax, 1
	mov	WORD PTR _item$8[ebp], ax

; 9800 : 
; 9801 :          NK_ASSERT(unicode_codepoint <= nk_ttUSHORT(data + endCount + 2*item));

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _endCount$13[ebp]
	movzx	ecx, WORD PTR _item$8[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	eax, ax
	cmp	DWORD PTR _unicode_codepoint$[ebp], eax
	jle	SHORT $LN31@nk_tt_Find
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_tt_FindGlyphIndex@@9@9@ddf8d5d8
	add	ecx, 53					; 00000035H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1HG@DLDBBFCO@?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAc?$AAo?$AAd?$AAe?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAn?$AAk?$AA_?$AAt?$AAt?$AAU?$AAS?$AAH?$AAO?$AAR?$AAT@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN31@nk_tt_Find:

; 9802 :          start = nk_ttUSHORT(data + index_map + 14 + segcount*2 + 2 + 2*item);

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _index_map$[ebp]
	movzx	ecx, WORD PTR _segcount$17[ebp]
	lea	edx, DWORD PTR [eax+ecx*2+14]
	movzx	eax, WORD PTR _item$8[ebp]
	lea	ecx, DWORD PTR [edx+eax*2+2]
	push	ecx
	call	_nk_ttUSHORT
	add	esp, 4
	mov	WORD PTR _start$9[ebp], ax

; 9803 :          if (unicode_codepoint < start)

	movzx	eax, WORD PTR _start$9[ebp]
	cmp	DWORD PTR _unicode_codepoint$[ebp], eax
	jge	SHORT $LN13@nk_tt_Find

; 9804 :             return 0;

	xor	eax, eax
	jmp	$LN28@nk_tt_Find
$LN13@nk_tt_Find:

; 9805 : 
; 9806 :          offset = nk_ttUSHORT(data + index_map + 14 + segcount*6 + 2 + 2*item);

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _index_map$[ebp]
	movzx	ecx, WORD PTR _segcount$17[ebp]
	imul	edx, ecx, 6
	lea	eax, DWORD PTR [eax+edx+14]
	movzx	ecx, WORD PTR _item$8[ebp]
	lea	edx, DWORD PTR [eax+ecx*2+2]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	mov	WORD PTR _offset$10[ebp], ax

; 9807 :          if (offset == 0)

	movzx	eax, WORD PTR _offset$10[ebp]
	test	eax, eax
	jne	SHORT $LN12@nk_tt_Find

; 9808 :             return (nk_ushort) (unicode_codepoint + nk_ttSHORT(data + index_map + 14 + segcount*4 + 2 + 2*item));

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _index_map$[ebp]
	movzx	ecx, WORD PTR _segcount$17[ebp]
	lea	edx, DWORD PTR [eax+ecx*4+14]
	movzx	eax, WORD PTR _item$8[ebp]
	lea	ecx, DWORD PTR [edx+eax*2+2]
	push	ecx
	call	_nk_ttSHORT
	add	esp, 4
	movsx	edx, ax
	add	edx, DWORD PTR _unicode_codepoint$[ebp]
	movzx	eax, dx
	jmp	$LN28@nk_tt_Find
$LN12@nk_tt_Find:

; 9809 : 
; 9810 :          return nk_ttUSHORT(data + offset + (unicode_codepoint-start)*2 + index_map + 14 + segcount*6 + 2 + 2*item);

	movzx	eax, WORD PTR _offset$10[ebp]
	add	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR _start$9[ebp]
	mov	edx, DWORD PTR _unicode_codepoint$[ebp]
	sub	edx, ecx
	add	eax, DWORD PTR _index_map$[ebp]
	lea	eax, DWORD PTR [eax+edx*2]
	movzx	ecx, WORD PTR _segcount$17[ebp]
	imul	edx, ecx, 6
	lea	eax, DWORD PTR [eax+edx+14]
	movzx	ecx, WORD PTR _item$8[ebp]
	lea	edx, DWORD PTR [eax+ecx*2+2]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	eax, ax
	jmp	$LN28@nk_tt_Find
	jmp	$LN25@nk_tt_Find
$LN19@nk_tt_Find:

; 9811 :       }
; 9812 :    } else if (format == 12 || format == 13) {

	movzx	eax, WORD PTR _format$[ebp]
	cmp	eax, 12					; 0000000cH
	je	SHORT $LN9@nk_tt_Find
	movzx	eax, WORD PTR _format$[ebp]
	cmp	eax, 13					; 0000000dH
	jne	$LN25@nk_tt_Find
$LN9@nk_tt_Find:

; 9813 :         nk_uint ngroups = nk_ttULONG(data+index_map+12);

	mov	eax, DWORD PTR _index_map$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+12]
	push	edx
	call	_nk_ttULONG
	add	esp, 4
	mov	DWORD PTR _ngroups$7[ebp], eax

; 9814 :         nk_int low,high;
; 9815 :         low = 0; high = (nk_int)ngroups;

	mov	DWORD PTR _low$6[ebp], 0
	mov	eax, DWORD PTR _ngroups$7[ebp]
	mov	DWORD PTR _high$5[ebp], eax
$LN8@nk_tt_Find:

; 9816 :         /* Binary search the right group. */
; 9817 :         while (low < high) {

	mov	eax, DWORD PTR _low$6[ebp]
	cmp	eax, DWORD PTR _high$5[ebp]
	jge	$LN7@nk_tt_Find

; 9818 :             nk_int mid = low + ((high-low) >> 1); /* rounds down, so low <= mid < high */

	mov	eax, DWORD PTR _high$5[ebp]
	sub	eax, DWORD PTR _low$6[ebp]
	sar	eax, 1
	add	eax, DWORD PTR _low$6[ebp]
	mov	DWORD PTR _mid$4[ebp], eax

; 9819 :             nk_uint start_char = nk_ttULONG(data+index_map+16+mid*12);

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _index_map$[ebp]
	imul	ecx, DWORD PTR _mid$4[ebp], 12
	lea	edx, DWORD PTR [eax+ecx+16]
	push	edx
	call	_nk_ttULONG
	add	esp, 4
	mov	DWORD PTR _start_char$3[ebp], eax

; 9820 :             nk_uint end_char = nk_ttULONG(data+index_map+16+mid*12+4);

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _index_map$[ebp]
	imul	ecx, DWORD PTR _mid$4[ebp], 12
	lea	edx, DWORD PTR [eax+ecx+20]
	push	edx
	call	_nk_ttULONG
	add	esp, 4
	mov	DWORD PTR _end_char$2[ebp], eax

; 9821 :             if ((nk_uint) unicode_codepoint < start_char)

	mov	eax, DWORD PTR _unicode_codepoint$[ebp]
	cmp	eax, DWORD PTR _start_char$3[ebp]
	jae	SHORT $LN6@nk_tt_Find

; 9822 :                 high = mid;

	mov	eax, DWORD PTR _mid$4[ebp]
	mov	DWORD PTR _high$5[ebp], eax
	jmp	SHORT $LN5@nk_tt_Find
$LN6@nk_tt_Find:

; 9823 :             else if ((nk_uint) unicode_codepoint > end_char)

	mov	eax, DWORD PTR _unicode_codepoint$[ebp]
	cmp	eax, DWORD PTR _end_char$2[ebp]
	jbe	SHORT $LN4@nk_tt_Find

; 9824 :                 low = mid+1;

	mov	eax, DWORD PTR _mid$4[ebp]
	add	eax, 1
	mov	DWORD PTR _low$6[ebp], eax

; 9825 :             else {

	jmp	SHORT $LN5@nk_tt_Find
$LN4@nk_tt_Find:

; 9826 :                 nk_uint start_glyph = nk_ttULONG(data+index_map+16+mid*12+8);

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _index_map$[ebp]
	imul	ecx, DWORD PTR _mid$4[ebp], 12
	lea	edx, DWORD PTR [eax+ecx+24]
	push	edx
	call	_nk_ttULONG
	add	esp, 4
	mov	DWORD PTR _start_glyph$1[ebp], eax

; 9827 :                 if (format == 12)

	movzx	eax, WORD PTR _format$[ebp]
	cmp	eax, 12					; 0000000cH
	jne	SHORT $LN2@nk_tt_Find

; 9828 :                     return (int)start_glyph + (int)unicode_codepoint - (int)start_char;

	mov	eax, DWORD PTR _start_glyph$1[ebp]
	add	eax, DWORD PTR _unicode_codepoint$[ebp]
	sub	eax, DWORD PTR _start_char$3[ebp]
	jmp	SHORT $LN28@nk_tt_Find

; 9829 :                 else /* format == 13 */

	jmp	SHORT $LN5@nk_tt_Find
$LN2@nk_tt_Find:

; 9830 :                     return (int)start_glyph;

	mov	eax, DWORD PTR _start_glyph$1[ebp]
	jmp	SHORT $LN28@nk_tt_Find
$LN5@nk_tt_Find:

; 9831 :             }
; 9832 :         }

	jmp	$LN8@nk_tt_Find
$LN7@nk_tt_Find:

; 9833 :         return 0; /* not found */

	xor	eax, eax
	jmp	SHORT $LN28@nk_tt_Find
$LN25@nk_tt_Find:

; 9834 :     }
; 9835 :     /* @TODO */
; 9836 :     NK_ASSERT(0);

	xor	eax, eax
	jne	SHORT $LN32@nk_tt_Find
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_tt_FindGlyphIndex@@9@9@ddf8d5d8
	add	ecx, 88					; 00000058H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN32@nk_tt_Find:

; 9837 :     return 0;

	xor	eax, eax
$LN28@nk_tt_Find:

; 9838 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 468				; 000001d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt_FindGlyphIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_InitFont
_TEXT	SEGMENT
tv176 = -268						; size = 4
tv170 = -268						; size = 4
_encoding_record$1 = -68				; size = 4
_data$ = -56						; size = 4
_numTables$ = -44					; size = 4
_i$ = -32						; size = 4
_t$ = -20						; size = 4
_cmap$ = -8						; size = 4
_info$ = 8						; size = 4
_data2$ = 12						; size = 4
_fontstart$ = 16					; size = 4
_nk_tt_InitFont PROC					; COMDAT

; 9691 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 9692 :     nk_uint cmap, t;
; 9693 :     nk_int i,numTables;
; 9694 :     const nk_byte *data = (const nk_byte *) data2;

	mov	eax, DWORD PTR _data2$[ebp]
	mov	DWORD PTR _data$[ebp], eax

; 9695 : 
; 9696 :     info->data = data;

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax], ecx

; 9697 :     info->fontstart = fontstart;

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR _fontstart$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 9698 : 
; 9699 :     cmap = nk_tt__find_table(data, (nk_uint)fontstart, "cmap");       /* required */

	push	OFFSET ??_C@_04EICJPCEA@cmap?$AA@
	mov	eax, DWORD PTR _fontstart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_nk_tt__find_table
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmap$[ebp], eax

; 9700 :     info->loca = (int)nk_tt__find_table(data, (nk_uint)fontstart, "loca"); /* required */

	push	OFFSET ??_C@_04DACNFKGE@loca?$AA@
	mov	eax, DWORD PTR _fontstart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_nk_tt__find_table
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [edx+12], eax

; 9701 :     info->head = (int)nk_tt__find_table(data, (nk_uint)fontstart, "head"); /* required */

	push	OFFSET ??_C@_04NEODDMOL@head?$AA@
	mov	eax, DWORD PTR _fontstart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_nk_tt__find_table
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [edx+16], eax

; 9702 :     info->glyf = (int)nk_tt__find_table(data, (nk_uint)fontstart, "glyf"); /* required */

	push	OFFSET ??_C@_04LLIHEPK@glyf?$AA@
	mov	eax, DWORD PTR _fontstart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_nk_tt__find_table
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [edx+20], eax

; 9703 :     info->hhea = (int)nk_tt__find_table(data, (nk_uint)fontstart, "hhea"); /* required */

	push	OFFSET ??_C@_04FMPHLIKP@hhea?$AA@
	mov	eax, DWORD PTR _fontstart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_nk_tt__find_table
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [edx+24], eax

; 9704 :     info->hmtx = (int)nk_tt__find_table(data, (nk_uint)fontstart, "hmtx"); /* required */

	push	OFFSET ??_C@_04ONMNCIMC@hmtx?$AA@
	mov	eax, DWORD PTR _fontstart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_nk_tt__find_table
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [edx+28], eax

; 9705 :     info->kern = (int)nk_tt__find_table(data, (nk_uint)fontstart, "kern"); /* not required */

	push	OFFSET ??_C@_04HHMMLDJI@kern?$AA@
	mov	eax, DWORD PTR _fontstart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_nk_tt__find_table
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [edx+32], eax

; 9706 :     if (!cmap || !info->loca || !info->head || !info->glyf || !info->hhea || !info->hmtx)

	cmp	DWORD PTR _cmap$[ebp], 0
	je	SHORT $LN16@nk_tt_Init
	mov	eax, DWORD PTR _info$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN16@nk_tt_Init
	mov	eax, DWORD PTR _info$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN16@nk_tt_Init
	mov	eax, DWORD PTR _info$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN16@nk_tt_Init
	mov	eax, DWORD PTR _info$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN16@nk_tt_Init
	mov	eax, DWORD PTR _info$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN17@nk_tt_Init
$LN16@nk_tt_Init:

; 9707 :         return 0;

	xor	eax, eax
	jmp	$LN18@nk_tt_Init
$LN17@nk_tt_Init:

; 9708 : 
; 9709 :     t = nk_tt__find_table(data, (nk_uint)fontstart, "maxp");

	push	OFFSET ??_C@_04KODIGLGG@maxp?$AA@
	mov	eax, DWORD PTR _fontstart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_nk_tt__find_table
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t$[ebp], eax

; 9710 :     if (t) info->numGlyphs = nk_ttUSHORT(data+t+4);

	cmp	DWORD PTR _t$[ebp], 0
	je	SHORT $LN15@nk_tt_Init
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	eax, ax
	mov	ecx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [ecx+8], eax
	jmp	SHORT $LN14@nk_tt_Init
$LN15@nk_tt_Init:

; 9711 :     else info->numGlyphs = 0xffff;

	mov	eax, DWORD PTR _info$[ebp]
	mov	DWORD PTR [eax+8], 65535		; 0000ffffH
$LN14@nk_tt_Init:

; 9712 : 
; 9713 :     /* find a cmap encoding table we understand *now* to avoid searching */
; 9714 :     /* later. (todo: could make this installable) */
; 9715 :     /* the same regardless of glyph. */
; 9716 :     numTables = nk_ttUSHORT(data + cmap + 2);

	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	eax, ax
	mov	DWORD PTR _numTables$[ebp], eax

; 9717 :     info->index_map = 0;

	mov	eax, DWORD PTR _info$[ebp]
	mov	DWORD PTR [eax+36], 0

; 9718 :     for (i=0; i < numTables; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@nk_tt_Init
$LN12@nk_tt_Init:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@nk_tt_Init:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numTables$[ebp]
	jge	$LN11@nk_tt_Init

; 9719 :     {
; 9720 :         nk_uint encoding_record = cmap + 4 + 8 * (nk_uint)i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cmap$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR _encoding_record$1[ebp], edx

; 9721 :         /* find an encoding we understand: */
; 9722 :         switch(nk_ttUSHORT(data+encoding_record)) {

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _encoding_record$1[ebp]
	push	eax
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	ecx, ax
	mov	DWORD PTR tv170[ebp], ecx
	cmp	DWORD PTR tv170[ebp], 0
	je	SHORT $LN3@nk_tt_Init
	cmp	DWORD PTR tv170[ebp], 3
	je	SHORT $LN8@nk_tt_Init
	jmp	SHORT $LN9@nk_tt_Init
$LN8@nk_tt_Init:

; 9723 :         case NK_TT_PLATFORM_ID_MICROSOFT:
; 9724 :             switch (nk_ttUSHORT(data+encoding_record+2)) {

	mov	eax, DWORD PTR _encoding_record$1[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	eax, ax
	mov	DWORD PTR tv176[ebp], eax
	cmp	DWORD PTR tv176[ebp], 1
	je	SHORT $LN5@nk_tt_Init
	cmp	DWORD PTR tv176[ebp], 10		; 0000000aH
	je	SHORT $LN5@nk_tt_Init
	jmp	SHORT $LN6@nk_tt_Init
$LN5@nk_tt_Init:

; 9725 :             case NK_TT_MS_EID_UNICODE_BMP:
; 9726 :             case NK_TT_MS_EID_UNICODE_FULL:
; 9727 :                 /* MS/Unicode */
; 9728 :                 info->index_map = (int)(cmap + nk_ttULONG(data+encoding_record+4));

	mov	eax, DWORD PTR _encoding_record$1[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	call	_nk_ttULONG
	add	esp, 4
	add	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [ecx+36], eax
$LN6@nk_tt_Init:

; 9729 :                 break;
; 9730 :             default: break;
; 9731 :             } break;

	jmp	SHORT $LN9@nk_tt_Init
$LN3@nk_tt_Init:

; 9732 :         case NK_TT_PLATFORM_ID_UNICODE:
; 9733 :             /* Mac/iOS has these */
; 9734 :             /* all the encodingIDs are unicode, so we don't bother to check it */
; 9735 :             info->index_map = (int)(cmap + nk_ttULONG(data+encoding_record+4));

	mov	eax, DWORD PTR _encoding_record$1[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	call	_nk_ttULONG
	add	esp, 4
	add	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [ecx+36], eax
$LN9@nk_tt_Init:

; 9736 :             break;
; 9737 :         default: break;
; 9738 :         }
; 9739 :     }

	jmp	$LN12@nk_tt_Init
$LN11@nk_tt_Init:

; 9740 :     if (info->index_map == 0)

	mov	eax, DWORD PTR _info$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN1@nk_tt_Init

; 9741 :         return 0;

	xor	eax, eax
	jmp	SHORT $LN18@nk_tt_Init
$LN1@nk_tt_Init:

; 9742 :     info->indexToLocFormat = nk_ttUSHORT(data+info->head + 50);

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _data$[ebp]
	lea	eax, DWORD PTR [edx+ecx+50]
	push	eax
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	ecx, ax
	mov	edx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [edx+40], ecx

; 9743 :     return 1;

	mov	eax, 1
$LN18@nk_tt_Init:

; 9744 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt_InitFont ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt__find_table
_TEXT	SEGMENT
_loc$1 = -44						; size = 4
_i$ = -32						; size = 4
_tabledir$ = -20					; size = 4
_num_tables$ = -8					; size = 4
_data$ = 8						; size = 4
_fontstart$ = 12					; size = 4
_tag$ = 16						; size = 4
_nk_tt__find_table PROC					; COMDAT

; 9676 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 9677 :     /* @OPTIMIZE: binary search */
; 9678 :     nk_int num_tables = nk_ttUSHORT(data+fontstart+4);

	mov	eax, DWORD PTR _fontstart$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	eax, ax
	mov	DWORD PTR _num_tables$[ebp], eax

; 9679 :     nk_uint tabledir = fontstart + 12;

	mov	eax, DWORD PTR _fontstart$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _tabledir$[ebp], eax

; 9680 :     nk_int i;
; 9681 :     for (i = 0; i < num_tables; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@nk_tt__fin
$LN3@nk_tt__fin:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@nk_tt__fin:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_tables$[ebp]
	jge	$LN2@nk_tt__fin

; 9682 :         nk_uint loc = tabledir + (nk_uint)(16*i);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _tabledir$[ebp]
	mov	DWORD PTR _loc$1[ebp], eax

; 9683 :         if (nk_tt_tag(data+loc+0, tag))

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _loc$1[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _tag$[ebp]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	eax, edx
	jne	$LN1@nk_tt__fin
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _loc$1[ebp]
	mov	ecx, 1
	shl	ecx, 0
	movzx	edx, BYTE PTR [eax+ecx]
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _tag$[ebp]
	movsx	eax, BYTE PTR [ecx+eax]
	cmp	edx, eax
	jne	SHORT $LN1@nk_tt__fin
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _loc$1[ebp]
	mov	ecx, 1
	shl	ecx, 1
	movzx	edx, BYTE PTR [eax+ecx]
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _tag$[ebp]
	movsx	eax, BYTE PTR [ecx+eax]
	cmp	edx, eax
	jne	SHORT $LN1@nk_tt__fin
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _loc$1[ebp]
	mov	ecx, 1
	imul	edx, ecx, 3
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _tag$[ebp]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	eax, edx
	jne	SHORT $LN1@nk_tt__fin

; 9684 :             return nk_ttULONG(data+loc+8);

	mov	eax, DWORD PTR _loc$1[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	push	edx
	call	_nk_ttULONG
	add	esp, 4
	jmp	SHORT $LN5@nk_tt__fin
$LN1@nk_tt__fin:

; 9685 :     }

	jmp	$LN3@nk_tt__fin
$LN2@nk_tt__fin:

; 9686 :     return 0;

	xor	eax, eax
$LN5@nk_tt__fin:

; 9687 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tt__find_table ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tt_GetGlyphShape
_TEXT	SEGMENT
tv461 = -724						; size = 4
tv390 = -724						; size = 4
tv380 = -724						; size = 4
tv369 = -724						; size = 4
tv344 = -724						; size = 4
tv297 = -724						; size = 4
tv212 = -724						; size = 4
tv174 = -724						; size = 4
_y$1 = -524						; size = 2
_x$2 = -512						; size = 2
_v$3 = -500						; size = 4
_n$4 = -488						; size = 4
_m$5 = -476						; size = 4
_mtx$6 = -464						; size = 24
_tmp$7 = -432						; size = 4
_comp_verts$8 = -420					; size = 4
_i$9 = -408						; size = 4
_comp_num_verts$10 = -396				; size = 4
_gidx$11 = -384						; size = 2
_flags$12 = -372					; size = 2
_comp$13 = -360						; size = 4
_more$14 = -348						; size = 4
_dy$15 = -336						; size = 2
_dx$16 = -324						; size = 2
_points$17 = -312					; size = 4
_scy$18 = -300						; size = 4
_scx$19 = -288						; size = 4
_sy$20 = -276						; size = 4
_sx$21 = -264						; size = 4
_cy$22 = -252						; size = 4
_cx$23 = -240						; size = 4
_y$24 = -228						; size = 4
_x$25 = -216						; size = 4
_start_off$26 = -204					; size = 4
_off$27 = -192						; size = 4
_was_off$28 = -180					; size = 4
_next_move$29 = -168					; size = 4
_n$30 = -156						; size = 4
_m$31 = -144						; size = 4
_j$32 = -132						; size = 4
_i$33 = -120						; size = 4
_ins$34 = -108						; size = 4
_flagcount$35 = -93					; size = 1
_flags$36 = -81						; size = 1
_g$ = -72						; size = 4
_num_vertices$ = -60					; size = 4
_vertices$ = -48					; size = 4
_data$ = -36						; size = 4
_endPtsOfContours$ = -24				; size = 4
_numberOfContours$ = -12				; size = 2
__$ArrayPad$ = -4					; size = 4
_info$ = 8						; size = 4
_alloc$ = 12						; size = 4
_glyph_index$ = 16					; size = 4
_pvertices$ = 20					; size = 4
_nk_tt_GetGlyphShape PROC				; COMDAT

; 9901 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 724				; 000002d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-724]
	mov	ecx, 181				; 000000b5H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 9902 :     nk_short numberOfContours;
; 9903 :     const nk_byte *endPtsOfContours;
; 9904 :     const nk_byte *data = info->data;

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _data$[ebp], ecx

; 9905 :     struct nk_tt_vertex *vertices=0;

	mov	DWORD PTR _vertices$[ebp], 0

; 9906 :     int num_vertices=0;

	mov	DWORD PTR _num_vertices$[ebp], 0

; 9907 :     int g = nk_tt__GetGlyfOffset(info, glyph_index);

	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _info$[ebp]
	push	ecx
	call	_nk_tt__GetGlyfOffset
	add	esp, 8
	mov	DWORD PTR _g$[ebp], eax

; 9908 :     *pvertices = 0;

	mov	eax, DWORD PTR _pvertices$[ebp]
	mov	DWORD PTR [eax], 0

; 9909 : 
; 9910 :     if (g < 0) return 0;

	cmp	DWORD PTR _g$[ebp], 0
	jge	SHORT $LN61@nk_tt_GetG
	xor	eax, eax
	jmp	$LN62@nk_tt_GetG
$LN61@nk_tt_GetG:

; 9911 :     numberOfContours = nk_ttSHORT(data + g);

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _g$[ebp]
	push	eax
	call	_nk_ttSHORT
	add	esp, 4
	mov	WORD PTR _numberOfContours$[ebp], ax

; 9912 :     if (numberOfContours > 0) {

	movsx	eax, WORD PTR _numberOfContours$[ebp]
	test	eax, eax
	jle	$LN60@nk_tt_GetG

; 9913 :         nk_byte flags=0,flagcount;

	mov	BYTE PTR _flags$36[ebp], 0

; 9914 :         nk_int ins, i,j=0,m,n, next_move, was_off=0, off, start_off=0;

	mov	DWORD PTR _j$32[ebp], 0
	mov	DWORD PTR _was_off$28[ebp], 0
	mov	DWORD PTR _start_off$26[ebp], 0

; 9915 :         nk_int x,y,cx,cy,sx,sy, scx,scy;
; 9916 :         const nk_byte *points;
; 9917 :         endPtsOfContours = (data + g + 10);

	mov	eax, DWORD PTR _g$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+10]
	mov	DWORD PTR _endPtsOfContours$[ebp], edx

; 9918 :         ins = nk_ttUSHORT(data + g + 10 + numberOfContours * 2);

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _g$[ebp]
	movsx	ecx, WORD PTR _numberOfContours$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2+10]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	eax, ax
	mov	DWORD PTR _ins$34[ebp], eax

; 9919 :         points = data + g + 10 + numberOfContours * 2 + 2 + ins;

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _g$[ebp]
	movsx	ecx, WORD PTR _numberOfContours$[ebp]
	add	eax, DWORD PTR _ins$34[ebp]
	lea	edx, DWORD PTR [eax+ecx*2+12]
	mov	DWORD PTR _points$17[ebp], edx

; 9920 : 
; 9921 :         n = 1+nk_ttUSHORT(endPtsOfContours + numberOfContours*2-2);

	movsx	eax, WORD PTR _numberOfContours$[ebp]
	mov	ecx, DWORD PTR _endPtsOfContours$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2-2]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	eax, ax
	add	eax, 1
	mov	DWORD PTR _n$30[ebp], eax

; 9922 :         m = n + 2*numberOfContours;  /* a loose bound on how many vertices we might need */

	movsx	eax, WORD PTR _numberOfContours$[ebp]
	mov	ecx, DWORD PTR _n$30[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _m$31[ebp], edx

; 9923 :         vertices = (struct nk_tt_vertex *)alloc->alloc(alloc->userdata, 0, (nk_size)m * sizeof(vertices[0]));

	imul	eax, DWORD PTR _m$31[ebp], 10
	mov	esi, esp
	push	eax
	push	0
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _vertices$[ebp], eax

; 9924 :         if (vertices == 0)

	cmp	DWORD PTR _vertices$[ebp], 0
	jne	SHORT $LN59@nk_tt_GetG

; 9925 :             return 0;

	xor	eax, eax
	jmp	$LN62@nk_tt_GetG
$LN59@nk_tt_GetG:

; 9926 : 
; 9927 :         next_move = 0;

	mov	DWORD PTR _next_move$29[ebp], 0

; 9928 :         flagcount=0;

	mov	BYTE PTR _flagcount$35[ebp], 0

; 9929 : 
; 9930 :         /* in first pass, we load uninterpreted data into the allocated array */
; 9931 :         /* above, shifted to the end of the array so we won't overwrite it when */
; 9932 :         /* we create our final data starting from the front */
; 9933 :         off = m - n; /* starting offset for uninterpreted data, regardless of how m ends up being calculated */

	mov	eax, DWORD PTR _m$31[ebp]
	sub	eax, DWORD PTR _n$30[ebp]
	mov	DWORD PTR _off$27[ebp], eax

; 9934 : 
; 9935 :         /* first load flags */
; 9936 :         for (i=0; i < n; ++i) {

	mov	DWORD PTR _i$33[ebp], 0
	jmp	SHORT $LN58@nk_tt_GetG
$LN57@nk_tt_GetG:
	mov	eax, DWORD PTR _i$33[ebp]
	add	eax, 1
	mov	DWORD PTR _i$33[ebp], eax
$LN58@nk_tt_GetG:
	mov	eax, DWORD PTR _i$33[ebp]
	cmp	eax, DWORD PTR _n$30[ebp]
	jge	SHORT $LN56@nk_tt_GetG

; 9937 :             if (flagcount == 0) {

	movzx	eax, BYTE PTR _flagcount$35[ebp]
	test	eax, eax
	jne	SHORT $LN55@nk_tt_GetG

; 9938 :                 flags = *points++;

	mov	eax, DWORD PTR _points$17[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _flags$36[ebp], cl
	mov	edx, DWORD PTR _points$17[ebp]
	add	edx, 1
	mov	DWORD PTR _points$17[ebp], edx

; 9939 :                 if (flags & 8)

	movzx	eax, BYTE PTR _flags$36[ebp]
	and	eax, 8
	je	SHORT $LN54@nk_tt_GetG

; 9940 :                     flagcount = *points++;

	mov	eax, DWORD PTR _points$17[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _flagcount$35[ebp], cl
	mov	edx, DWORD PTR _points$17[ebp]
	add	edx, 1
	mov	DWORD PTR _points$17[ebp], edx
$LN54@nk_tt_GetG:

; 9941 :             } else --flagcount;

	jmp	SHORT $LN53@nk_tt_GetG
$LN55@nk_tt_GetG:
	mov	al, BYTE PTR _flagcount$35[ebp]
	sub	al, 1
	mov	BYTE PTR _flagcount$35[ebp], al
$LN53@nk_tt_GetG:

; 9942 :             vertices[off+i].type = flags;

	mov	eax, DWORD PTR _off$27[ebp]
	add	eax, DWORD PTR _i$33[ebp]
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _vertices$[ebp]
	mov	al, BYTE PTR _flags$36[ebp]
	mov	BYTE PTR [edx+ecx+8], al

; 9943 :         }

	jmp	SHORT $LN57@nk_tt_GetG
$LN56@nk_tt_GetG:

; 9944 : 
; 9945 :         /* now load x coordinates */
; 9946 :         x=0;

	mov	DWORD PTR _x$25[ebp], 0

; 9947 :         for (i=0; i < n; ++i) {

	mov	DWORD PTR _i$33[ebp], 0
	jmp	SHORT $LN52@nk_tt_GetG
$LN51@nk_tt_GetG:
	mov	eax, DWORD PTR _i$33[ebp]
	add	eax, 1
	mov	DWORD PTR _i$33[ebp], eax
$LN52@nk_tt_GetG:
	mov	eax, DWORD PTR _i$33[ebp]
	cmp	eax, DWORD PTR _n$30[ebp]
	jge	$LN50@nk_tt_GetG

; 9948 :             flags = vertices[off+i].type;

	mov	eax, DWORD PTR _off$27[ebp]
	add	eax, DWORD PTR _i$33[ebp]
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _vertices$[ebp]
	mov	al, BYTE PTR [edx+ecx+8]
	mov	BYTE PTR _flags$36[ebp], al

; 9949 :             if (flags & 2) {

	movzx	eax, BYTE PTR _flags$36[ebp]
	and	eax, 2
	je	SHORT $LN49@nk_tt_GetG

; 9950 :                 nk_short dx = *points++;

	mov	eax, DWORD PTR _points$17[ebp]
	movzx	cx, BYTE PTR [eax]
	mov	WORD PTR _dx$16[ebp], cx
	mov	edx, DWORD PTR _points$17[ebp]
	add	edx, 1
	mov	DWORD PTR _points$17[ebp], edx

; 9951 :                 x += (flags & 16) ? dx : -dx; /* ??? */

	movzx	eax, BYTE PTR _flags$36[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN64@nk_tt_GetG
	movsx	ecx, WORD PTR _dx$16[ebp]
	mov	DWORD PTR tv174[ebp], ecx
	jmp	SHORT $LN65@nk_tt_GetG
$LN64@nk_tt_GetG:
	movsx	edx, WORD PTR _dx$16[ebp]
	neg	edx
	mov	DWORD PTR tv174[ebp], edx
$LN65@nk_tt_GetG:
	mov	eax, DWORD PTR _x$25[ebp]
	add	eax, DWORD PTR tv174[ebp]
	mov	DWORD PTR _x$25[ebp], eax

; 9952 :             } else {

	jmp	SHORT $LN47@nk_tt_GetG
$LN49@nk_tt_GetG:

; 9953 :                 if (!(flags & 16)) {

	movzx	eax, BYTE PTR _flags$36[ebp]
	and	eax, 16					; 00000010H
	jne	SHORT $LN47@nk_tt_GetG

; 9954 :                     x = x + (nk_short) (points[0]*256 + points[1]);

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _points$17[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _points$17[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	add	eax, ecx
	movsx	edx, ax
	add	edx, DWORD PTR _x$25[ebp]
	mov	DWORD PTR _x$25[ebp], edx

; 9955 :                     points += 2;

	mov	eax, DWORD PTR _points$17[ebp]
	add	eax, 2
	mov	DWORD PTR _points$17[ebp], eax
$LN47@nk_tt_GetG:

; 9956 :                 }
; 9957 :             }
; 9958 :             vertices[off+i].x = (nk_short) x;

	mov	eax, DWORD PTR _off$27[ebp]
	add	eax, DWORD PTR _i$33[ebp]
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _vertices$[ebp]
	mov	ax, WORD PTR _x$25[ebp]
	mov	WORD PTR [edx+ecx], ax

; 9959 :         }

	jmp	$LN51@nk_tt_GetG
$LN50@nk_tt_GetG:

; 9960 : 
; 9961 :         /* now load y coordinates */
; 9962 :         y=0;

	mov	DWORD PTR _y$24[ebp], 0

; 9963 :         for (i=0; i < n; ++i) {

	mov	DWORD PTR _i$33[ebp], 0
	jmp	SHORT $LN46@nk_tt_GetG
$LN45@nk_tt_GetG:
	mov	eax, DWORD PTR _i$33[ebp]
	add	eax, 1
	mov	DWORD PTR _i$33[ebp], eax
$LN46@nk_tt_GetG:
	mov	eax, DWORD PTR _i$33[ebp]
	cmp	eax, DWORD PTR _n$30[ebp]
	jge	$LN44@nk_tt_GetG

; 9964 :             flags = vertices[off+i].type;

	mov	eax, DWORD PTR _off$27[ebp]
	add	eax, DWORD PTR _i$33[ebp]
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _vertices$[ebp]
	mov	al, BYTE PTR [edx+ecx+8]
	mov	BYTE PTR _flags$36[ebp], al

; 9965 :             if (flags & 4) {

	movzx	eax, BYTE PTR _flags$36[ebp]
	and	eax, 4
	je	SHORT $LN43@nk_tt_GetG

; 9966 :                 nk_short dy = *points++;

	mov	eax, DWORD PTR _points$17[ebp]
	movzx	cx, BYTE PTR [eax]
	mov	WORD PTR _dy$15[ebp], cx
	mov	edx, DWORD PTR _points$17[ebp]
	add	edx, 1
	mov	DWORD PTR _points$17[ebp], edx

; 9967 :                 y += (flags & 32) ? dy : -dy; /* ??? */

	movzx	eax, BYTE PTR _flags$36[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN66@nk_tt_GetG
	movsx	ecx, WORD PTR _dy$15[ebp]
	mov	DWORD PTR tv212[ebp], ecx
	jmp	SHORT $LN67@nk_tt_GetG
$LN66@nk_tt_GetG:
	movsx	edx, WORD PTR _dy$15[ebp]
	neg	edx
	mov	DWORD PTR tv212[ebp], edx
$LN67@nk_tt_GetG:
	mov	eax, DWORD PTR _y$24[ebp]
	add	eax, DWORD PTR tv212[ebp]
	mov	DWORD PTR _y$24[ebp], eax

; 9968 :             } else {

	jmp	SHORT $LN41@nk_tt_GetG
$LN43@nk_tt_GetG:

; 9969 :                 if (!(flags & 32)) {

	movzx	eax, BYTE PTR _flags$36[ebp]
	and	eax, 32					; 00000020H
	jne	SHORT $LN41@nk_tt_GetG

; 9970 :                     y = y + (nk_short) (points[0]*256 + points[1]);

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _points$17[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _points$17[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	add	eax, ecx
	movsx	edx, ax
	add	edx, DWORD PTR _y$24[ebp]
	mov	DWORD PTR _y$24[ebp], edx

; 9971 :                     points += 2;

	mov	eax, DWORD PTR _points$17[ebp]
	add	eax, 2
	mov	DWORD PTR _points$17[ebp], eax
$LN41@nk_tt_GetG:

; 9972 :                 }
; 9973 :             }
; 9974 :             vertices[off+i].y = (nk_short) y;

	mov	eax, DWORD PTR _off$27[ebp]
	add	eax, DWORD PTR _i$33[ebp]
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _vertices$[ebp]
	mov	ax, WORD PTR _y$24[ebp]
	mov	WORD PTR [edx+ecx+2], ax

; 9975 :         }

	jmp	$LN45@nk_tt_GetG
$LN44@nk_tt_GetG:

; 9976 : 
; 9977 :         /* now convert them to our format */
; 9978 :         num_vertices=0;

	mov	DWORD PTR _num_vertices$[ebp], 0

; 9979 :         sx = sy = cx = cy = scx = scy = 0;

	mov	DWORD PTR _scy$18[ebp], 0
	mov	eax, DWORD PTR _scy$18[ebp]
	mov	DWORD PTR _scx$19[ebp], eax
	mov	ecx, DWORD PTR _scx$19[ebp]
	mov	DWORD PTR _cy$22[ebp], ecx
	mov	edx, DWORD PTR _cy$22[ebp]
	mov	DWORD PTR _cx$23[ebp], edx
	mov	eax, DWORD PTR _cx$23[ebp]
	mov	DWORD PTR _sy$20[ebp], eax
	mov	ecx, DWORD PTR _sy$20[ebp]
	mov	DWORD PTR _sx$21[ebp], ecx

; 9980 :         for (i=0; i < n; ++i)

	mov	DWORD PTR _i$33[ebp], 0
	jmp	SHORT $LN40@nk_tt_GetG
$LN39@nk_tt_GetG:
	mov	eax, DWORD PTR _i$33[ebp]
	add	eax, 1
	mov	DWORD PTR _i$33[ebp], eax
$LN40@nk_tt_GetG:
	mov	eax, DWORD PTR _i$33[ebp]
	cmp	eax, DWORD PTR _n$30[ebp]
	jge	$LN38@nk_tt_GetG

; 9981 :         {
; 9982 :             flags = vertices[off+i].type;

	mov	eax, DWORD PTR _off$27[ebp]
	add	eax, DWORD PTR _i$33[ebp]
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _vertices$[ebp]
	mov	al, BYTE PTR [edx+ecx+8]
	mov	BYTE PTR _flags$36[ebp], al

; 9983 :             x     = (nk_short) vertices[off+i].x;

	mov	eax, DWORD PTR _off$27[ebp]
	add	eax, DWORD PTR _i$33[ebp]
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _vertices$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	mov	DWORD PTR _x$25[ebp], eax

; 9984 :             y     = (nk_short) vertices[off+i].y;

	mov	eax, DWORD PTR _off$27[ebp]
	add	eax, DWORD PTR _i$33[ebp]
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _vertices$[ebp]
	movsx	eax, WORD PTR [edx+ecx+2]
	mov	DWORD PTR _y$24[ebp], eax

; 9985 : 
; 9986 :             if (next_move == i) {

	mov	eax, DWORD PTR _next_move$29[ebp]
	cmp	eax, DWORD PTR _i$33[ebp]
	jne	$LN37@nk_tt_GetG

; 9987 :                 if (i != 0)

	cmp	DWORD PTR _i$33[ebp], 0
	je	SHORT $LN36@nk_tt_GetG

; 9988 :                     num_vertices = stbtt__close_shape(vertices, num_vertices, was_off, start_off, sx,sy,scx,scy,cx,cy);

	mov	eax, DWORD PTR _cy$22[ebp]
	push	eax
	mov	ecx, DWORD PTR _cx$23[ebp]
	push	ecx
	mov	edx, DWORD PTR _scy$18[ebp]
	push	edx
	mov	eax, DWORD PTR _scx$19[ebp]
	push	eax
	mov	ecx, DWORD PTR _sy$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _sx$21[ebp]
	push	edx
	mov	eax, DWORD PTR _start_off$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _was_off$28[ebp]
	push	ecx
	mov	edx, DWORD PTR _num_vertices$[ebp]
	push	edx
	mov	eax, DWORD PTR _vertices$[ebp]
	push	eax
	call	_stbtt__close_shape
	add	esp, 40					; 00000028H
	mov	DWORD PTR _num_vertices$[ebp], eax
$LN36@nk_tt_GetG:

; 9989 : 
; 9990 :                 /* now start the new one                */
; 9991 :                 start_off = !(flags & 1);

	movzx	eax, BYTE PTR _flags$36[ebp]
	and	eax, 1
	jne	SHORT $LN68@nk_tt_GetG
	mov	DWORD PTR tv297[ebp], 1
	jmp	SHORT $LN69@nk_tt_GetG
$LN68@nk_tt_GetG:
	mov	DWORD PTR tv297[ebp], 0
$LN69@nk_tt_GetG:
	mov	ecx, DWORD PTR tv297[ebp]
	mov	DWORD PTR _start_off$26[ebp], ecx

; 9992 :                 if (start_off) {

	cmp	DWORD PTR _start_off$26[ebp], 0
	je	$LN35@nk_tt_GetG

; 9993 :                     /* if we start off with an off-curve point, then when we need to find a point on the curve */
; 9994 :                     /* where we can start, and we need to save some state for when we wraparound. */
; 9995 :                     scx = x;

	mov	eax, DWORD PTR _x$25[ebp]
	mov	DWORD PTR _scx$19[ebp], eax

; 9996 :                     scy = y;

	mov	eax, DWORD PTR _y$24[ebp]
	mov	DWORD PTR _scy$18[ebp], eax

; 9997 :                     if (!(vertices[off+i+1].type & 1)) {

	mov	eax, DWORD PTR _i$33[ebp]
	mov	ecx, DWORD PTR _off$27[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _vertices$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+8]
	and	edx, 1
	jne	SHORT $LN34@nk_tt_GetG

; 9998 :                         /* next point is also a curve point, so interpolate an on-point curve */
; 9999 :                         sx = (x + (nk_int) vertices[off+i+1].x) >> 1;

	mov	eax, DWORD PTR _i$33[ebp]
	mov	ecx, DWORD PTR _off$27[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _vertices$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	add	edx, DWORD PTR _x$25[ebp]
	sar	edx, 1
	mov	DWORD PTR _sx$21[ebp], edx

; 10000:                         sy = (y + (nk_int) vertices[off+i+1].y) >> 1;

	mov	eax, DWORD PTR _i$33[ebp]
	mov	ecx, DWORD PTR _off$27[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _vertices$[ebp]
	movsx	edx, WORD PTR [ecx+eax+2]
	add	edx, DWORD PTR _y$24[ebp]
	sar	edx, 1
	mov	DWORD PTR _sy$20[ebp], edx

; 10001:                     } else {

	jmp	SHORT $LN33@nk_tt_GetG
$LN34@nk_tt_GetG:

; 10002:                         /* otherwise just use the next point as our start point */
; 10003:                         sx = (nk_int) vertices[off+i+1].x;

	mov	eax, DWORD PTR _i$33[ebp]
	mov	ecx, DWORD PTR _off$27[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _vertices$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _sx$21[ebp], edx

; 10004:                         sy = (nk_int) vertices[off+i+1].y;

	mov	eax, DWORD PTR _i$33[ebp]
	mov	ecx, DWORD PTR _off$27[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _vertices$[ebp]
	movsx	edx, WORD PTR [ecx+eax+2]
	mov	DWORD PTR _sy$20[ebp], edx

; 10005:                         ++i; /* we're using point i+1 as the starting point, so skip it */

	mov	eax, DWORD PTR _i$33[ebp]
	add	eax, 1
	mov	DWORD PTR _i$33[ebp], eax
$LN33@nk_tt_GetG:

; 10006:                     }
; 10007:                 } else {

	jmp	SHORT $LN32@nk_tt_GetG
$LN35@nk_tt_GetG:

; 10008:                     sx = x;

	mov	eax, DWORD PTR _x$25[ebp]
	mov	DWORD PTR _sx$21[ebp], eax

; 10009:                     sy = y;

	mov	eax, DWORD PTR _y$24[ebp]
	mov	DWORD PTR _sy$20[ebp], eax
$LN32@nk_tt_GetG:

; 10010:                 }
; 10011:                 nk_tt_setvertex(&vertices[num_vertices++], NK_TT_vmove,sx,sy,0,0);

	imul	eax, DWORD PTR _num_vertices$[ebp], 10
	add	eax, DWORD PTR _vertices$[ebp]
	mov	DWORD PTR tv344[ebp], eax
	mov	ecx, DWORD PTR _num_vertices$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num_vertices$[ebp], ecx
	push	0
	push	0
	mov	edx, DWORD PTR _sy$20[ebp]
	push	edx
	mov	eax, DWORD PTR _sx$21[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR tv344[ebp]
	push	ecx
	call	_nk_tt_setvertex
	add	esp, 24					; 00000018H

; 10012:                 was_off = 0;

	mov	DWORD PTR _was_off$28[ebp], 0

; 10013:                 next_move = 1 + nk_ttUSHORT(endPtsOfContours+j*2);

	mov	eax, DWORD PTR _j$32[ebp]
	mov	ecx, DWORD PTR _endPtsOfContours$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	call	_nk_ttUSHORT
	add	esp, 4
	movzx	eax, ax
	add	eax, 1
	mov	DWORD PTR _next_move$29[ebp], eax

; 10014:                 ++j;

	mov	eax, DWORD PTR _j$32[ebp]
	add	eax, 1
	mov	DWORD PTR _j$32[ebp], eax

; 10015:             } else {

	jmp	$LN28@nk_tt_GetG
$LN37@nk_tt_GetG:

; 10016:                 if (!(flags & 1))

	movzx	eax, BYTE PTR _flags$36[ebp]
	and	eax, 1
	jne	$LN30@nk_tt_GetG

; 10017:                 { /* if it's a curve */
; 10018:                     if (was_off) /* two off-curve control points in a row means interpolate an on-curve midpoint */

	cmp	DWORD PTR _was_off$28[ebp], 0
	je	SHORT $LN29@nk_tt_GetG

; 10019:                         nk_tt_setvertex(&vertices[num_vertices++], NK_TT_vcurve, (cx+x)>>1, (cy+y)>>1, cx, cy);

	imul	eax, DWORD PTR _num_vertices$[ebp], 10
	add	eax, DWORD PTR _vertices$[ebp]
	mov	DWORD PTR tv369[ebp], eax
	mov	ecx, DWORD PTR _num_vertices$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num_vertices$[ebp], ecx
	mov	edx, DWORD PTR _cy$22[ebp]
	push	edx
	mov	eax, DWORD PTR _cx$23[ebp]
	push	eax
	mov	ecx, DWORD PTR _cy$22[ebp]
	add	ecx, DWORD PTR _y$24[ebp]
	sar	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _cx$23[ebp]
	add	edx, DWORD PTR _x$25[ebp]
	sar	edx, 1
	push	edx
	push	3
	mov	eax, DWORD PTR tv369[ebp]
	push	eax
	call	_nk_tt_setvertex
	add	esp, 24					; 00000018H
$LN29@nk_tt_GetG:

; 10020:                     cx = x;

	mov	eax, DWORD PTR _x$25[ebp]
	mov	DWORD PTR _cx$23[ebp], eax

; 10021:                     cy = y;

	mov	eax, DWORD PTR _y$24[ebp]
	mov	DWORD PTR _cy$22[ebp], eax

; 10022:                     was_off = 1;

	mov	DWORD PTR _was_off$28[ebp], 1

; 10023:                 } else {

	jmp	$LN28@nk_tt_GetG
$LN30@nk_tt_GetG:

; 10024:                     if (was_off)

	cmp	DWORD PTR _was_off$28[ebp], 0
	je	SHORT $LN27@nk_tt_GetG

; 10025:                         nk_tt_setvertex(&vertices[num_vertices++], NK_TT_vcurve, x,y, cx, cy);

	imul	eax, DWORD PTR _num_vertices$[ebp], 10
	add	eax, DWORD PTR _vertices$[ebp]
	mov	DWORD PTR tv380[ebp], eax
	mov	ecx, DWORD PTR _num_vertices$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num_vertices$[ebp], ecx
	mov	edx, DWORD PTR _cy$22[ebp]
	push	edx
	mov	eax, DWORD PTR _cx$23[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$24[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$25[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR tv380[ebp]
	push	eax
	call	_nk_tt_setvertex
	add	esp, 24					; 00000018H
	jmp	SHORT $LN26@nk_tt_GetG
$LN27@nk_tt_GetG:

; 10026:                     else nk_tt_setvertex(&vertices[num_vertices++], NK_TT_vline, x,y,0,0);

	imul	eax, DWORD PTR _num_vertices$[ebp], 10
	add	eax, DWORD PTR _vertices$[ebp]
	mov	DWORD PTR tv390[ebp], eax
	mov	ecx, DWORD PTR _num_vertices$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num_vertices$[ebp], ecx
	push	0
	push	0
	mov	edx, DWORD PTR _y$24[ebp]
	push	edx
	mov	eax, DWORD PTR _x$25[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR tv390[ebp]
	push	ecx
	call	_nk_tt_setvertex
	add	esp, 24					; 00000018H
$LN26@nk_tt_GetG:

; 10027:                     was_off = 0;

	mov	DWORD PTR _was_off$28[ebp], 0
$LN28@nk_tt_GetG:

; 10028:                 }
; 10029:             }
; 10030:         }

	jmp	$LN39@nk_tt_GetG
$LN38@nk_tt_GetG:

; 10031:         num_vertices = stbtt__close_shape(vertices, num_vertices, was_off, start_off, sx,sy,scx,scy,cx,cy);

	mov	eax, DWORD PTR _cy$22[ebp]
	push	eax
	mov	ecx, DWORD PTR _cx$23[ebp]
	push	ecx
	mov	edx, DWORD PTR _scy$18[ebp]
	push	edx
	mov	eax, DWORD PTR _scx$19[ebp]
	push	eax
	mov	ecx, DWORD PTR _sy$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _sx$21[ebp]
	push	edx
	mov	eax, DWORD PTR _start_off$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _was_off$28[ebp]
	push	ecx
	mov	edx, DWORD PTR _num_vertices$[ebp]
	push	edx
	mov	eax, DWORD PTR _vertices$[ebp]
	push	eax
	call	_stbtt__close_shape
	add	esp, 40					; 00000028H
	mov	DWORD PTR _num_vertices$[ebp], eax
	jmp	$LN2@nk_tt_GetG
$LN60@nk_tt_GetG:

; 10032:     } else if (numberOfContours == -1) {

	movsx	eax, WORD PTR _numberOfContours$[ebp]
	cmp	eax, -1
	jne	$LN24@nk_tt_GetG

; 10033:         /* Compound shapes. */
; 10034:         int more = 1;

	mov	DWORD PTR _more$14[ebp], 1

; 10035:         const nk_byte *comp = data + g + 10;

	mov	eax, DWORD PTR _g$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+10]
	mov	DWORD PTR _comp$13[ebp], edx

; 10036:         num_vertices = 0;

	mov	DWORD PTR _num_vertices$[ebp], 0

; 10037:         vertices = 0;

	mov	DWORD PTR _vertices$[ebp], 0
$LN23@nk_tt_GetG:

; 10038: 
; 10039:         while (more)

	cmp	DWORD PTR _more$14[ebp], 0
	je	$LN22@nk_tt_GetG

; 10040:         {
; 10041:             nk_ushort flags, gidx;
; 10042:             int comp_num_verts = 0, i;

	mov	DWORD PTR _comp_num_verts$10[ebp], 0

; 10043:             struct nk_tt_vertex *comp_verts = 0, *tmp = 0;

	mov	DWORD PTR _comp_verts$8[ebp], 0
	mov	DWORD PTR _tmp$7[ebp], 0

; 10044:             float mtx[6] = {1,0,0,1,0,0}, m, n;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _mtx$6[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mtx$6[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mtx$6[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _mtx$6[ebp+12], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mtx$6[ebp+16], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mtx$6[ebp+20], xmm0

; 10045: 
; 10046:             flags = (nk_ushort)nk_ttSHORT(comp); comp+=2;

	mov	eax, DWORD PTR _comp$13[ebp]
	push	eax
	call	_nk_ttSHORT
	add	esp, 4
	mov	WORD PTR _flags$12[ebp], ax
	mov	eax, DWORD PTR _comp$13[ebp]
	add	eax, 2
	mov	DWORD PTR _comp$13[ebp], eax

; 10047:             gidx = (nk_ushort)nk_ttSHORT(comp); comp+=2;

	mov	eax, DWORD PTR _comp$13[ebp]
	push	eax
	call	_nk_ttSHORT
	add	esp, 4
	mov	WORD PTR _gidx$11[ebp], ax
	mov	eax, DWORD PTR _comp$13[ebp]
	add	eax, 2
	mov	DWORD PTR _comp$13[ebp], eax

; 10048: 
; 10049:             if (flags & 2) { /* XY values */

	movzx	eax, WORD PTR _flags$12[ebp]
	and	eax, 2
	je	$LN21@nk_tt_GetG

; 10050:                 if (flags & 1) { /* shorts */

	movzx	eax, WORD PTR _flags$12[ebp]
	and	eax, 1
	je	SHORT $LN20@nk_tt_GetG

; 10051:                     mtx[4] = nk_ttSHORT(comp); comp+=2;

	mov	eax, DWORD PTR _comp$13[ebp]
	push	eax
	call	_nk_ttSHORT
	add	esp, 4
	mov	ecx, 4
	shl	ecx, 2
	movsx	edx, ax
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _mtx$6[ebp+ecx], xmm0
	mov	eax, DWORD PTR _comp$13[ebp]
	add	eax, 2
	mov	DWORD PTR _comp$13[ebp], eax

; 10052:                     mtx[5] = nk_ttSHORT(comp); comp+=2;

	mov	eax, DWORD PTR _comp$13[ebp]
	push	eax
	call	_nk_ttSHORT
	add	esp, 4
	mov	ecx, 4
	imul	edx, ecx, 5
	cwde
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _mtx$6[ebp+edx], xmm0
	mov	eax, DWORD PTR _comp$13[ebp]
	add	eax, 2
	mov	DWORD PTR _comp$13[ebp], eax

; 10053:                 } else {

	jmp	SHORT $LN19@nk_tt_GetG
$LN20@nk_tt_GetG:

; 10054:                     mtx[4] = nk_ttCHAR(comp); comp+=1;

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _comp$13[ebp]
	movsx	edx, BYTE PTR [ecx]
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _mtx$6[ebp+eax], xmm0
	mov	eax, DWORD PTR _comp$13[ebp]
	add	eax, 1
	mov	DWORD PTR _comp$13[ebp], eax

; 10055:                     mtx[5] = nk_ttCHAR(comp); comp+=1;

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _comp$13[ebp]
	movsx	eax, BYTE PTR [edx]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _mtx$6[ebp+ecx], xmm0
	mov	eax, DWORD PTR _comp$13[ebp]
	add	eax, 1
	mov	DWORD PTR _comp$13[ebp], eax
$LN19@nk_tt_GetG:

; 10056:                 }
; 10057:             } else {

	jmp	SHORT $LN70@nk_tt_GetG
$LN21@nk_tt_GetG:

; 10058:                 /* @TODO handle matching point */
; 10059:                 NK_ASSERT(0);

	xor	eax, eax
	jne	SHORT $LN70@nk_tt_GetG
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_tt_GetGlyphShape@@9@9@ddf8d5d8
	add	ecx, 158				; 0000009eH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN70@nk_tt_GetG:

; 10060:             }
; 10061:             if (flags & (1<<3)) { /* WE_HAVE_A_SCALE */

	movzx	eax, WORD PTR _flags$12[ebp]
	and	eax, 8
	je	$LN17@nk_tt_GetG

; 10062:                 mtx[0] = mtx[3] = nk_ttSHORT(comp)/16384.0f; comp+=2;

	mov	eax, DWORD PTR _comp$13[ebp]
	push	eax
	call	_nk_ttSHORT
	add	esp, 4
	movsx	ecx, ax
	cvtsi2ss xmm0, ecx
	divss	xmm0, DWORD PTR __real@46800000
	movss	DWORD PTR tv461[ebp], xmm0
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR tv461[ebp]
	movss	DWORD PTR _mtx$6[ebp+eax], xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv461[ebp]
	movss	DWORD PTR _mtx$6[ebp+edx], xmm0
	mov	eax, DWORD PTR _comp$13[ebp]
	add	eax, 2
	mov	DWORD PTR _comp$13[ebp], eax

; 10063:                 mtx[1] = mtx[2] = 0;

	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mtx$6[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mtx$6[ebp+ecx], xmm0
	jmp	$LN13@nk_tt_GetG
$LN17@nk_tt_GetG:

; 10064:             } else if (flags & (1<<6)) { /* WE_HAVE_AN_X_AND_YSCALE */

	movzx	eax, WORD PTR _flags$12[ebp]
	and	eax, 64					; 00000040H
	je	$LN15@nk_tt_GetG

; 10065:                 mtx[0] = nk_ttSHORT(comp)/16384.0f; comp+=2;

	mov	eax, DWORD PTR _comp$13[ebp]
	push	eax
	call	_nk_ttSHORT
	add	esp, 4
	movsx	ecx, ax
	cvtsi2ss xmm0, ecx
	divss	xmm0, DWORD PTR __real@46800000
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _mtx$6[ebp+eax], xmm0
	mov	eax, DWORD PTR _comp$13[ebp]
	add	eax, 2
	mov	DWORD PTR _comp$13[ebp], eax

; 10066:                 mtx[1] = mtx[2] = 0;

	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mtx$6[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mtx$6[ebp+ecx], xmm0

; 10067:                 mtx[3] = nk_ttSHORT(comp)/16384.0f; comp+=2;

	mov	eax, DWORD PTR _comp$13[ebp]
	push	eax
	call	_nk_ttSHORT
	add	esp, 4
	movsx	ecx, ax
	cvtsi2ss xmm0, ecx
	divss	xmm0, DWORD PTR __real@46800000
	mov	edx, 4
	imul	eax, edx, 3
	movss	DWORD PTR _mtx$6[ebp+eax], xmm0
	mov	eax, DWORD PTR _comp$13[ebp]
	add	eax, 2
	mov	DWORD PTR _comp$13[ebp], eax
	jmp	$LN13@nk_tt_GetG
$LN15@nk_tt_GetG:

; 10068:             } else if (flags & (1<<7)) { /* WE_HAVE_A_TWO_BY_TWO */

	movzx	eax, WORD PTR _flags$12[ebp]
	and	eax, 128				; 00000080H
	je	$LN13@nk_tt_GetG

; 10069:                 mtx[0] = nk_ttSHORT(comp)/16384.0f; comp+=2;

	mov	eax, DWORD PTR _comp$13[ebp]
	push	eax
	call	_nk_ttSHORT
	add	esp, 4
	movsx	ecx, ax
	cvtsi2ss xmm0, ecx
	divss	xmm0, DWORD PTR __real@46800000
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _mtx$6[ebp+eax], xmm0
	mov	eax, DWORD PTR _comp$13[ebp]
	add	eax, 2
	mov	DWORD PTR _comp$13[ebp], eax

; 10070:                 mtx[1] = nk_ttSHORT(comp)/16384.0f; comp+=2;

	mov	eax, DWORD PTR _comp$13[ebp]
	push	eax
	call	_nk_ttSHORT
	add	esp, 4
	movsx	ecx, ax
	cvtsi2ss xmm0, ecx
	divss	xmm0, DWORD PTR __real@46800000
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _mtx$6[ebp+edx], xmm0
	mov	eax, DWORD PTR _comp$13[ebp]
	add	eax, 2
	mov	DWORD PTR _comp$13[ebp], eax

; 10071:                 mtx[2] = nk_ttSHORT(comp)/16384.0f; comp+=2;

	mov	eax, DWORD PTR _comp$13[ebp]
	push	eax
	call	_nk_ttSHORT
	add	esp, 4
	movsx	ecx, ax
	cvtsi2ss xmm0, ecx
	divss	xmm0, DWORD PTR __real@46800000
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR _mtx$6[ebp+edx], xmm0
	mov	eax, DWORD PTR _comp$13[ebp]
	add	eax, 2
	mov	DWORD PTR _comp$13[ebp], eax

; 10072:                 mtx[3] = nk_ttSHORT(comp)/16384.0f; comp+=2;

	mov	eax, DWORD PTR _comp$13[ebp]
	push	eax
	call	_nk_ttSHORT
	add	esp, 4
	movsx	ecx, ax
	cvtsi2ss xmm0, ecx
	divss	xmm0, DWORD PTR __real@46800000
	mov	edx, 4
	imul	eax, edx, 3
	movss	DWORD PTR _mtx$6[ebp+eax], xmm0
	mov	eax, DWORD PTR _comp$13[ebp]
	add	eax, 2
	mov	DWORD PTR _comp$13[ebp], eax
$LN13@nk_tt_GetG:

; 10073:             }
; 10074: 
; 10075:              /* Find transformation scales. */
; 10076:             m = (float) NK_SQRT(mtx[0]*mtx[0] + mtx[1]*mtx[1]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _mtx$6[ebp+ecx]
	mulss	xmm0, DWORD PTR _mtx$6[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR _mtx$6[ebp+ecx]
	mulss	xmm1, DWORD PTR _mtx$6[ebp+edx]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_sqrt
	add	esp, 4
	fstp	DWORD PTR _m$5[ebp]

; 10077:             n = (float) NK_SQRT(mtx[2]*mtx[2] + mtx[3]*mtx[3]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _mtx$6[ebp+eax]
	mulss	xmm0, DWORD PTR _mtx$6[ebp+ecx]
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm1, DWORD PTR _mtx$6[ebp+eax]
	mulss	xmm1, DWORD PTR _mtx$6[ebp+edx]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_sqrt
	add	esp, 4
	fstp	DWORD PTR _n$4[ebp]

; 10078: 
; 10079:              /* Get indexed glyph. */
; 10080:             comp_num_verts = nk_tt_GetGlyphShape(info, alloc, gidx, &comp_verts);

	lea	eax, DWORD PTR _comp_verts$8[ebp]
	push	eax
	movzx	ecx, WORD PTR _gidx$11[ebp]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _info$[ebp]
	push	eax
	call	_nk_tt_GetGlyphShape
	add	esp, 16					; 00000010H
	mov	DWORD PTR _comp_num_verts$10[ebp], eax

; 10081:             if (comp_num_verts > 0)

	cmp	DWORD PTR _comp_num_verts$10[ebp], 0
	jle	$LN12@nk_tt_GetG

; 10082:             {
; 10083:                 /* Transform vertices. */
; 10084:                 for (i = 0; i < comp_num_verts; ++i) {

	mov	DWORD PTR _i$9[ebp], 0
	jmp	SHORT $LN11@nk_tt_GetG
$LN10@nk_tt_GetG:
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax
$LN11@nk_tt_GetG:
	mov	eax, DWORD PTR _i$9[ebp]
	cmp	eax, DWORD PTR _comp_num_verts$10[ebp]
	jge	$LN9@nk_tt_GetG

; 10085:                     struct nk_tt_vertex* v = &comp_verts[i];

	imul	eax, DWORD PTR _i$9[ebp], 10
	add	eax, DWORD PTR _comp_verts$8[ebp]
	mov	DWORD PTR _v$3[ebp], eax

; 10086:                     short x,y;
; 10087:                     x=v->x; y=v->y;

	mov	eax, DWORD PTR _v$3[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _x$2[ebp], cx
	mov	eax, DWORD PTR _v$3[ebp]
	mov	cx, WORD PTR [eax+2]
	mov	WORD PTR _y$1[ebp], cx

; 10088:                     v->x = (short)(m * (mtx[0]*x + mtx[2]*y + mtx[4]));

	mov	eax, 4
	imul	ecx, eax, 0
	movsx	edx, WORD PTR _x$2[ebp]
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR _mtx$6[ebp+ecx]
	mov	eax, 4
	shl	eax, 1
	movsx	ecx, WORD PTR _y$1[ebp]
	cvtsi2ss xmm1, ecx
	mulss	xmm1, DWORD PTR _mtx$6[ebp+eax]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 2
	addss	xmm0, DWORD PTR _mtx$6[ebp+edx]
	mulss	xmm0, DWORD PTR _m$5[ebp]
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _v$3[ebp]
	mov	WORD PTR [ecx], ax

; 10089:                     v->y = (short)(n * (mtx[1]*x + mtx[3]*y + mtx[5]));

	mov	eax, 4
	shl	eax, 0
	movsx	ecx, WORD PTR _x$2[ebp]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR _mtx$6[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 3
	movsx	ecx, WORD PTR _y$1[ebp]
	cvtsi2ss xmm1, ecx
	mulss	xmm1, DWORD PTR _mtx$6[ebp+eax]
	addss	xmm0, xmm1
	mov	edx, 4
	imul	eax, edx, 5
	addss	xmm0, DWORD PTR _mtx$6[ebp+eax]
	mulss	xmm0, DWORD PTR _n$4[ebp]
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _v$3[ebp]
	mov	WORD PTR [edx+2], cx

; 10090:                     x=v->cx; y=v->cy;

	mov	eax, DWORD PTR _v$3[ebp]
	mov	cx, WORD PTR [eax+4]
	mov	WORD PTR _x$2[ebp], cx
	mov	eax, DWORD PTR _v$3[ebp]
	mov	cx, WORD PTR [eax+6]
	mov	WORD PTR _y$1[ebp], cx

; 10091:                     v->cx = (short)(m * (mtx[0]*x + mtx[2]*y + mtx[4]));

	mov	eax, 4
	imul	ecx, eax, 0
	movsx	edx, WORD PTR _x$2[ebp]
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR _mtx$6[ebp+ecx]
	mov	eax, 4
	shl	eax, 1
	movsx	ecx, WORD PTR _y$1[ebp]
	cvtsi2ss xmm1, ecx
	mulss	xmm1, DWORD PTR _mtx$6[ebp+eax]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 2
	addss	xmm0, DWORD PTR _mtx$6[ebp+edx]
	mulss	xmm0, DWORD PTR _m$5[ebp]
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _v$3[ebp]
	mov	WORD PTR [ecx+4], ax

; 10092:                     v->cy = (short)(n * (mtx[1]*x + mtx[3]*y + mtx[5]));

	mov	eax, 4
	shl	eax, 0
	movsx	ecx, WORD PTR _x$2[ebp]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR _mtx$6[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 3
	movsx	ecx, WORD PTR _y$1[ebp]
	cvtsi2ss xmm1, ecx
	mulss	xmm1, DWORD PTR _mtx$6[ebp+eax]
	addss	xmm0, xmm1
	mov	edx, 4
	imul	eax, edx, 5
	addss	xmm0, DWORD PTR _mtx$6[ebp+eax]
	mulss	xmm0, DWORD PTR _n$4[ebp]
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _v$3[ebp]
	mov	WORD PTR [edx+6], cx

; 10093:                 }

	jmp	$LN10@nk_tt_GetG
$LN9@nk_tt_GetG:

; 10094:                 /* Append vertices. */
; 10095:                 tmp = (struct nk_tt_vertex*)alloc->alloc(alloc->userdata, 0,
; 10096:                     (nk_size)(num_vertices+comp_num_verts)*sizeof(struct nk_tt_vertex));

	mov	eax, DWORD PTR _num_vertices$[ebp]
	add	eax, DWORD PTR _comp_num_verts$10[ebp]
	imul	ecx, eax, 10
	mov	esi, esp
	push	ecx
	push	0
	mov	edx, DWORD PTR _alloc$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tmp$7[ebp], eax

; 10097:                 if (!tmp) {

	cmp	DWORD PTR _tmp$7[ebp], 0
	jne	SHORT $LN8@nk_tt_GetG

; 10098:                     if (vertices) alloc->free(alloc->userdata, vertices);

	cmp	DWORD PTR _vertices$[ebp], 0
	je	SHORT $LN7@nk_tt_GetG
	mov	esi, esp
	mov	eax, DWORD PTR _vertices$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@nk_tt_GetG:

; 10099:                     if (comp_verts) alloc->free(alloc->userdata, comp_verts);

	cmp	DWORD PTR _comp_verts$8[ebp], 0
	je	SHORT $LN6@nk_tt_GetG
	mov	esi, esp
	mov	eax, DWORD PTR _comp_verts$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@nk_tt_GetG:

; 10100:                     return 0;

	xor	eax, eax
	jmp	$LN62@nk_tt_GetG
$LN8@nk_tt_GetG:

; 10101:                 }
; 10102:                 if (num_vertices > 0) NK_MEMCPY(tmp, vertices, (nk_size)num_vertices*sizeof(struct nk_tt_vertex));

	cmp	DWORD PTR _num_vertices$[ebp], 0
	jle	SHORT $LN5@nk_tt_GetG
	imul	eax, DWORD PTR _num_vertices$[ebp], 10
	push	eax
	mov	ecx, DWORD PTR _vertices$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tmp$7[ebp]
	push	edx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH
$LN5@nk_tt_GetG:

; 10103:                 NK_MEMCPY(tmp+num_vertices, comp_verts, (nk_size)comp_num_verts*sizeof(struct nk_tt_vertex));

	imul	eax, DWORD PTR _comp_num_verts$10[ebp], 10
	push	eax
	mov	ecx, DWORD PTR _comp_verts$8[ebp]
	push	ecx
	imul	edx, DWORD PTR _num_vertices$[ebp], 10
	add	edx, DWORD PTR _tmp$7[ebp]
	push	edx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 10104:                 if (vertices) alloc->free(alloc->userdata,vertices);

	cmp	DWORD PTR _vertices$[ebp], 0
	je	SHORT $LN4@nk_tt_GetG
	mov	esi, esp
	mov	eax, DWORD PTR _vertices$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@nk_tt_GetG:

; 10105:                 vertices = tmp;

	mov	eax, DWORD PTR _tmp$7[ebp]
	mov	DWORD PTR _vertices$[ebp], eax

; 10106:                 alloc->free(alloc->userdata,comp_verts);

	mov	esi, esp
	mov	eax, DWORD PTR _comp_verts$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 10107:                 num_vertices += comp_num_verts;

	mov	eax, DWORD PTR _num_vertices$[ebp]
	add	eax, DWORD PTR _comp_num_verts$10[ebp]
	mov	DWORD PTR _num_vertices$[ebp], eax
$LN12@nk_tt_GetG:

; 10108:             }
; 10109:             /* More components ? */
; 10110:             more = flags & (1<<5);

	movzx	eax, WORD PTR _flags$12[ebp]
	and	eax, 32					; 00000020H
	mov	DWORD PTR _more$14[ebp], eax

; 10111:         }

	jmp	$LN23@nk_tt_GetG
$LN22@nk_tt_GetG:

; 10112:     } else if (numberOfContours < 0) {

	jmp	SHORT $LN2@nk_tt_GetG
$LN24@nk_tt_GetG:
	movsx	eax, WORD PTR _numberOfContours$[ebp]
	test	eax, eax
	jge	SHORT $LN2@nk_tt_GetG

; 10113:         /* @TODO other compound variations? */
; 10114:         NK_ASSERT(0);

	xor	eax, eax
	jne	SHORT $LN71@nk_tt_GetG
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_tt_GetGlyphShape@@9@9@ddf8d5d8
	add	ecx, 213				; 000000d5H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN71@nk_tt_GetG:
$LN2@nk_tt_GetG:

; 10115:     } else {
; 10116:         /* numberOfCounters == 0, do nothing */
; 10117:     }
; 10118:     *pvertices = vertices;

	mov	eax, DWORD PTR _pvertices$[ebp]
	mov	ecx, DWORD PTR _vertices$[ebp]
	mov	DWORD PTR [eax], ecx

; 10119:     return num_vertices;

	mov	eax, DWORD PTR _num_vertices$[ebp]
$LN62@nk_tt_GetG:

; 10120: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN75@nk_tt_GetG
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 724				; 000002d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN75@nk_tt_GetG:
	DD	2
	DD	$LN74@nk_tt_GetG
$LN74@nk_tt_GetG:
	DD	-420					; fffffe5cH
	DD	4
	DD	$LN72@nk_tt_GetG
	DD	-464					; fffffe30H
	DD	24					; 00000018H
	DD	$LN73@nk_tt_GetG
$LN73@nk_tt_GetG:
	DB	109					; 0000006dH
	DB	116					; 00000074H
	DB	120					; 00000078H
	DB	0
$LN72@nk_tt_GetG:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_nk_tt_GetGlyphShape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_ttULONG
_TEXT	SEGMENT
_p$ = 8							; size = 4
_nk_ttULONG PROC					; COMDAT

; 9664 :     static nk_uint nk_ttULONG(const nk_byte *p)  { return (nk_uint)((p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 16					; 00000010H
	add	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	add	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	add	eax, edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_ttULONG ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_ttSHORT
_TEXT	SEGMENT
_p$ = 8							; size = 4
_nk_ttSHORT PROC					; COMDAT

; 9663 :     static nk_short nk_ttSHORT(const nk_byte *p)   { return (nk_short)(p[0]*256 + p[1]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	add	eax, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_ttSHORT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_ttUSHORT
_TEXT	SEGMENT
_p$ = 8							; size = 4
_nk_ttUSHORT PROC					; COMDAT

; 9662 :     static nk_ushort nk_ttUSHORT(const nk_byte *p) { return (nk_ushort)(p[0]*256 + p[1]); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	add	eax, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_ttUSHORT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rp_pack_rects
_TEXT	SEGMENT
tv151 = -248						; size = 4
$T1 = -240						; size = 12
_fr$2 = -28						; size = 12
_i$ = -8						; size = 4
_context$ = 8						; size = 4
_rects$ = 12						; size = 4
_num_rects$ = 16					; size = 4
_nk_rp_pack_rects PROC					; COMDAT

; 9468 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 9469 :     int i;
; 9470 :     /* we use the 'was_packed' field internally to allow sorting/unsorting */
; 9471 :     for (i=0; i < num_rects; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@nk_rp_pack
$LN10@nk_rp_pack:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@nk_rp_pack:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_rects$[ebp]
	jge	SHORT $LN9@nk_rp_pack

; 9472 :         rects[i].was_packed = i;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _rects$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax+12], edx

; 9473 :     }

	jmp	SHORT $LN10@nk_rp_pack
$LN9@nk_rp_pack:

; 9474 : 
; 9475 :     /* sort according to heuristic */
; 9476 :     nk_rp_qsort(rects, (unsigned)num_rects, nk_rect_height_compare);

	push	OFFSET _nk_rect_height_compare
	mov	eax, DWORD PTR _num_rects$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rects$[ebp]
	push	ecx
	call	_nk_rp_qsort
	add	esp, 12					; 0000000cH

; 9477 : 
; 9478 :     for (i=0; i < num_rects; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@nk_rp_pack
$LN7@nk_rp_pack:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@nk_rp_pack:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_rects$[ebp]
	jge	$LN6@nk_rp_pack

; 9479 :         struct nk_rp__findresult fr = nk_rp__skyline_pack_rectangle(context, rects[i].w, rects[i].h);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _rects$[ebp]
	movzx	edx, WORD PTR [ecx+eax+6]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _rects$[ebp]
	movzx	edx, WORD PTR [ecx+eax+4]
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_nk_rp__skyline_pack_rectangle
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _fr$2[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _fr$2[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _fr$2[ebp+8], edx

; 9480 :         if (fr.prev_link) {

	cmp	DWORD PTR _fr$2[ebp+8], 0
	je	SHORT $LN5@nk_rp_pack

; 9481 :             rects[i].x = (nk_rp_coord) fr.x;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _rects$[ebp]
	mov	dx, WORD PTR _fr$2[ebp]
	mov	WORD PTR [ecx+eax+8], dx

; 9482 :             rects[i].y = (nk_rp_coord) fr.y;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _rects$[ebp]
	mov	dx, WORD PTR _fr$2[ebp+4]
	mov	WORD PTR [ecx+eax+10], dx

; 9483 :         } else {

	jmp	SHORT $LN4@nk_rp_pack
$LN5@nk_rp_pack:

; 9484 :             rects[i].x = rects[i].y = NK_RP__MAXVAL;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, 65535				; 0000ffffH
	mov	edx, DWORD PTR _rects$[ebp]
	mov	WORD PTR [edx+eax+10], cx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, 65535				; 0000ffffH
	mov	edx, DWORD PTR _rects$[ebp]
	mov	WORD PTR [edx+eax+8], cx
$LN4@nk_rp_pack:

; 9485 :         }
; 9486 :     }

	jmp	$LN7@nk_rp_pack
$LN6@nk_rp_pack:

; 9487 : 
; 9488 :     /* unsort */
; 9489 :     nk_rp_qsort(rects, (unsigned)num_rects, nk_rect_original_order);

	push	OFFSET _nk_rect_original_order
	mov	eax, DWORD PTR _num_rects$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rects$[ebp]
	push	ecx
	call	_nk_rp_qsort
	add	esp, 12					; 0000000cH

; 9490 : 
; 9491 :     /* set was_packed flags */
; 9492 :     for (i=0; i < num_rects; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_rp_pack
$LN2@nk_rp_pack:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_rp_pack:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_rects$[ebp]
	jge	SHORT $LN12@nk_rp_pack

; 9493 :         rects[i].was_packed = !(rects[i].x == NK_RP__MAXVAL && rects[i].y == NK_RP__MAXVAL);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _rects$[ebp]
	movzx	edx, WORD PTR [ecx+eax+8]
	cmp	edx, 65535				; 0000ffffH
	jne	SHORT $LN14@nk_rp_pack
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _rects$[ebp]
	movzx	edx, WORD PTR [ecx+eax+10]
	cmp	edx, 65535				; 0000ffffH
	jne	SHORT $LN14@nk_rp_pack
	mov	DWORD PTR tv151[ebp], 0
	jmp	SHORT $LN15@nk_rp_pack
$LN14@nk_rp_pack:
	mov	DWORD PTR tv151[ebp], 1
$LN15@nk_rp_pack:
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _rects$[ebp]
	mov	edx, DWORD PTR tv151[ebp]
	mov	DWORD PTR [ecx+eax+12], edx
	jmp	SHORT $LN2@nk_rp_pack
$LN12@nk_rp_pack:

; 9494 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@nk_rp_pack
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@nk_rp_pack:
	DD	1
	DD	$LN17@nk_rp_pack
$LN17@nk_rp_pack:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN16@nk_rp_pack
$LN16@nk_rp_pack:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	0
_nk_rp_pack_rects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rp_qsort
_TEXT	SEGMENT
_tmp$1 = -360						; size = 16
_pivot$2 = -336						; size = 16
_seed$ = -312						; size = 4
_pos$ = -300						; size = 4
_stack$ = -288						; size = 256
_left$ = -24						; size = 4
_right$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_array$ = 8						; size = 4
_len$ = 12						; size = 4
_cmp$ = 16						; size = 4
_nk_rp_qsort PROC					; COMDAT

; 9438 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 556				; 0000022cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-556]
	mov	ecx, 139				; 0000008bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 9439 :     /* iterative quick sort */
; 9440 :     #define NK_MAX_SORT_STACK 64
; 9441 :     unsigned right, left = 0, stack[NK_MAX_SORT_STACK], pos = 0;

	mov	DWORD PTR _left$[ebp], 0
	mov	DWORD PTR _pos$[ebp], 0

; 9442 :     unsigned seed = len/2 * 69069+1;

	mov	eax, DWORD PTR _len$[ebp]
	shr	eax, 1
	imul	ecx, eax, 69069
	add	ecx, 1
	mov	DWORD PTR _seed$[ebp], ecx
$LN14@nk_rp_qsor:

; 9443 :     for (;;) {
; 9444 :         for (; left+1 < len; len++) {

	jmp	SHORT $LN12@nk_rp_qsor
$LN11@nk_rp_qsor:
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
$LN12@nk_rp_qsor:
	mov	eax, DWORD PTR _left$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _len$[ebp]
	jae	$LN10@nk_rp_qsor

; 9445 :             struct nk_rp_rect pivot, tmp;
; 9446 :             if (pos == NK_MAX_SORT_STACK) len = stack[pos = 0];

	cmp	DWORD PTR _pos$[ebp], 64		; 00000040H
	jne	SHORT $LN9@nk_rp_qsor
	mov	DWORD PTR _pos$[ebp], 0
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _stack$[ebp+eax*4]
	mov	DWORD PTR _len$[ebp], ecx
$LN9@nk_rp_qsor:

; 9447 :             pivot = array[left+seed%(len-left)];

	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR _seed$[ebp]
	xor	edx, edx
	div	ecx
	add	edx, DWORD PTR _left$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pivot$2[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _pivot$2[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _pivot$2[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _pivot$2[ebp+12], ecx

; 9448 :             seed = seed * 69069 + 1;

	imul	eax, DWORD PTR _seed$[ebp], 69069
	add	eax, 1
	mov	DWORD PTR _seed$[ebp], eax

; 9449 :             stack[pos++] = len;

	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _stack$[ebp+eax*4], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx

; 9450 :             for (right = left-1;;) {

	mov	eax, DWORD PTR _left$[ebp]
	sub	eax, 1
	mov	DWORD PTR _right$[ebp], eax
$LN6@nk_rp_qsor:

; 9451 :                 while (cmp(&array[++right], &pivot) < 0);

	mov	eax, DWORD PTR _right$[ebp]
	add	eax, 1
	mov	DWORD PTR _right$[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _pivot$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _right$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _array$[ebp]
	push	edx
	call	DWORD PTR _cmp$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN4@nk_rp_qsor
	jmp	SHORT $LN6@nk_rp_qsor
$LN4@nk_rp_qsor:

; 9452 :                 while (cmp(&pivot, &array[--len]) < 0);

	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _len$[ebp], eax
	mov	ecx, DWORD PTR _len$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _array$[ebp]
	mov	esi, esp
	push	ecx
	lea	edx, DWORD PTR _pivot$2[ebp]
	push	edx
	call	DWORD PTR _cmp$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN3@nk_rp_qsor
	jmp	SHORT $LN4@nk_rp_qsor
$LN3@nk_rp_qsor:

; 9453 :                 if (right >= len) break;

	mov	eax, DWORD PTR _right$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jb	SHORT $LN2@nk_rp_qsor
	jmp	$LN7@nk_rp_qsor
$LN2@nk_rp_qsor:

; 9454 :                 tmp = array[right];

	mov	eax, DWORD PTR _right$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tmp$1[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tmp$1[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _tmp$1[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _tmp$1[ebp+12], edx

; 9455 :                 array[right] = array[len];

	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR _right$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 9456 :                 array[len] = tmp;

	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR _tmp$1[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _tmp$1[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _tmp$1[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _tmp$1[ebp+12]
	mov	DWORD PTR [eax+12], edx

; 9457 :             }

	jmp	$LN6@nk_rp_qsor
$LN7@nk_rp_qsor:

; 9458 :         }

	jmp	$LN11@nk_rp_qsor
$LN10@nk_rp_qsor:

; 9459 :         if (pos == 0) break;

	cmp	DWORD PTR _pos$[ebp], 0
	jne	SHORT $LN1@nk_rp_qsor
	jmp	SHORT $LN15@nk_rp_qsor
$LN1@nk_rp_qsor:

; 9460 :         left = len;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _left$[ebp], eax

; 9461 :         len = stack[--pos];

	mov	eax, DWORD PTR _pos$[ebp]
	sub	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR _stack$[ebp+ecx*4]
	mov	DWORD PTR _len$[ebp], edx

; 9462 :     }

	jmp	$LN14@nk_rp_qsor
$LN15@nk_rp_qsor:

; 9463 :     #undef NK_MAX_SORT_STACK
; 9464 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@nk_rp_qsor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 556				; 0000022cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN21@nk_rp_qsor:
	DD	3
	DD	$LN20@nk_rp_qsor
$LN20@nk_rp_qsor:
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN17@nk_rp_qsor
	DD	-336					; fffffeb0H
	DD	16					; 00000010H
	DD	$LN18@nk_rp_qsor
	DD	-360					; fffffe98H
	DD	16					; 00000010H
	DD	$LN19@nk_rp_qsor
$LN19@nk_rp_qsor:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN18@nk_rp_qsor:
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
$LN17@nk_rp_qsor:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_nk_rp_qsort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rect_original_order
_TEXT	SEGMENT
tv70 = -224						; size = 4
tv71 = -220						; size = 4
_q$ = -20						; size = 4
_p$ = -8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_nk_rect_original_order PROC				; COMDAT

; 9430 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 9431 :     const struct nk_rp_rect *p = (const struct nk_rp_rect *) a;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 9432 :     const struct nk_rp_rect *q = (const struct nk_rp_rect *) b;

	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _q$[ebp], eax

; 9433 :     return (p->was_packed < q->was_packed) ? -1 : (p->was_packed > q->was_packed);

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $LN5@nk_rect_or
	mov	DWORD PTR tv71[ebp], -1
	jmp	SHORT $LN6@nk_rect_or
$LN5@nk_rect_or:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+12]
	jle	SHORT $LN3@nk_rect_or
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@nk_rect_or
$LN3@nk_rect_or:
	mov	DWORD PTR tv70[ebp], 0
$LN4@nk_rect_or:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR tv71[ebp], eax
$LN6@nk_rect_or:
	mov	eax, DWORD PTR tv71[ebp]

; 9434 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_rect_original_order ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rect_height_compare
_TEXT	SEGMENT
tv84 = -224						; size = 4
tv85 = -220						; size = 4
_q$ = -20						; size = 4
_p$ = -8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_nk_rect_height_compare PROC				; COMDAT

; 9418 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 9419 :     const struct nk_rp_rect *p = (const struct nk_rp_rect *) a;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 9420 :     const struct nk_rp_rect *q = (const struct nk_rp_rect *) b;

	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _q$[ebp], eax

; 9421 :     if (p->h > q->h)

	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _q$[ebp]
	movzx	eax, WORD PTR [edx+6]
	cmp	ecx, eax
	jle	SHORT $LN2@nk_rect_he

; 9422 :         return -1;

	or	eax, -1
	jmp	SHORT $LN3@nk_rect_he
$LN2@nk_rect_he:

; 9423 :     if (p->h < q->h)

	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _q$[ebp]
	movzx	eax, WORD PTR [edx+6]
	cmp	ecx, eax
	jge	SHORT $LN1@nk_rect_he

; 9424 :         return  1;

	mov	eax, 1
	jmp	SHORT $LN3@nk_rect_he
$LN1@nk_rect_he:

; 9425 :     return (p->w > q->w) ? -1 : (p->w < q->w);

	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _q$[ebp]
	movzx	eax, WORD PTR [edx+4]
	cmp	ecx, eax
	jle	SHORT $LN7@nk_rect_he
	mov	DWORD PTR tv85[ebp], -1
	jmp	SHORT $LN8@nk_rect_he
$LN7@nk_rect_he:
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	mov	eax, DWORD PTR _q$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	cmp	edx, ecx
	jge	SHORT $LN5@nk_rect_he
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN6@nk_rect_he
$LN5@nk_rect_he:
	mov	DWORD PTR tv84[ebp], 0
$LN6@nk_rect_he:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR tv85[ebp], edx
$LN8@nk_rect_he:
	mov	eax, DWORD PTR tv85[ebp]
$LN3@nk_rect_he:

; 9426 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_rect_height_compare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rp__skyline_pack_rectangle
_TEXT	SEGMENT
$T1 = -276						; size = 12
_next$2 = -64						; size = 4
_next$3 = -52						; size = 4
_cur$ = -40						; size = 4
_node$ = -28						; size = 4
_res$ = -16						; size = 12
$T4 = 8							; size = 4
_context$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_nk_rp__skyline_pack_rectangle PROC			; COMDAT

; 9365 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 9366 :     /* find best position according to heuristic */
; 9367 :     struct nk_rp__findresult res = nk_rp__skyline_find_best_pos(context, width, height);

	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _context$[ebp]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	_nk_rp__skyline_find_best_pos
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _res$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _res$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _res$[ebp+8], eax

; 9368 :     struct nk_rp_node *node, *cur;
; 9369 : 
; 9370 :     /* bail if: */
; 9371 :     /*    1. it failed */
; 9372 :     /*    2. the best node doesn't fit (we don't always check this) */
; 9373 :     /*    3. we're out of memory */
; 9374 :     if (res.prev_link == 0 || res.y + height > context->height || context->free_head == 0) {

	cmp	DWORD PTR _res$[ebp+8], 0
	je	SHORT $LN6@nk_rp__sky
	mov	eax, DWORD PTR _res$[ebp+4]
	add	eax, DWORD PTR _height$[ebp]
	mov	ecx, DWORD PTR _context$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jg	SHORT $LN6@nk_rp__sky
	mov	eax, DWORD PTR _context$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN7@nk_rp__sky
$LN6@nk_rp__sky:

; 9375 :         res.prev_link = 0;

	mov	DWORD PTR _res$[ebp+8], 0

; 9376 :         return res;

	mov	eax, DWORD PTR $T4[ebp]
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _res$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _res$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR $T4[ebp]
	jmp	$LN8@nk_rp__sky
$LN7@nk_rp__sky:

; 9377 :     }
; 9378 : 
; 9379 :     /* on success, create new node */
; 9380 :     node = context->free_head;

	mov	eax, DWORD PTR _context$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _node$[ebp], ecx

; 9381 :     node->x = (nk_rp_coord) res.x;

	mov	eax, DWORD PTR _node$[ebp]
	mov	cx, WORD PTR _res$[ebp]
	mov	WORD PTR [eax], cx

; 9382 :     node->y = (nk_rp_coord) (res.y + height);

	mov	eax, DWORD PTR _res$[ebp+4]
	add	eax, DWORD PTR _height$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	WORD PTR [ecx+2], ax

; 9383 : 
; 9384 :     context->free_head = node->next;

	mov	eax, DWORD PTR _context$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx

; 9385 : 
; 9386 :     /* insert the new node into the right starting point, and */
; 9387 :     /* let 'cur' point to the remaining nodes needing to be */
; 9388 :     /* stitched back in */
; 9389 :     cur = *res.prev_link;

	mov	eax, DWORD PTR _res$[ebp+8]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx

; 9390 :     if (cur->x < res.x) {

	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, DWORD PTR _res$[ebp]
	jge	SHORT $LN5@nk_rp__sky

; 9391 :         /* preserve the existing one, so start testing with the next one */
; 9392 :         struct nk_rp_node *next = cur->next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _next$3[ebp], ecx

; 9393 :         cur->next = node;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 9394 :         cur = next;

	mov	eax, DWORD PTR _next$3[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 9395 :     } else {

	jmp	SHORT $LN3@nk_rp__sky
$LN5@nk_rp__sky:

; 9396 :         *res.prev_link = node;

	mov	eax, DWORD PTR _res$[ebp+8]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@nk_rp__sky:

; 9397 :     }
; 9398 : 
; 9399 :     /* from here, traverse cur and free the nodes, until we get to one */
; 9400 :     /* that shouldn't be freed */
; 9401 :     while (cur->next && cur->next->x <= res.x + width) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@nk_rp__sky
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	cmp	edx, eax
	jg	SHORT $LN2@nk_rp__sky

; 9402 :         struct nk_rp_node *next = cur->next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _next$2[ebp], ecx

; 9403 :         /* move the current node to the free list */
; 9404 :         cur->next = context->free_head;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _context$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+4], edx

; 9405 :         context->free_head = cur;

	mov	eax, DWORD PTR _context$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 9406 :         cur = next;

	mov	eax, DWORD PTR _next$2[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 9407 :     }

	jmp	SHORT $LN3@nk_rp__sky
$LN2@nk_rp__sky:

; 9408 :     /* stitch the list back in */
; 9409 :     node->next = cur;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 9410 : 
; 9411 :     if (cur->x < res.x + width)

	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _res$[ebp]
	add	edx, DWORD PTR _width$[ebp]
	cmp	ecx, edx
	jge	SHORT $LN1@nk_rp__sky

; 9412 :         cur->x = (nk_rp_coord) (res.x + width);

	mov	eax, DWORD PTR _res$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	WORD PTR [ecx], ax
$LN1@nk_rp__sky:

; 9413 :     return res;

	mov	eax, DWORD PTR $T4[ebp]
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _res$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _res$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR $T4[ebp]
$LN8@nk_rp__sky:

; 9414 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@nk_rp__sky
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@nk_rp__sky:
	DD	1
	DD	$LN11@nk_rp__sky
$LN11@nk_rp__sky:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN10@nk_rp__sky
$LN10@nk_rp__sky:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_nk_rp__skyline_pack_rectangle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rp__skyline_find_best_pos
_TEXT	SEGMENT
tv139 = -360						; size = 4
_waste$1 = -160						; size = 4
_y$2 = -148						; size = 4
_xpos$3 = -136						; size = 4
_waste$4 = -124						; size = 4
_y$5 = -112						; size = 4
_best$ = -100						; size = 4
_tail$ = -88						; size = 4
_node$ = -76						; size = 4
_prev$ = -64						; size = 4
_fr$ = -52						; size = 12
_best_y$ = -32						; size = 4
_best_x$ = -20						; size = 4
_best_waste$ = -8					; size = 4
$T6 = 8							; size = 4
_c$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_nk_rp__skyline_find_best_pos PROC			; COMDAT

; 9269 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 9270 :     int best_waste = (1<<30), best_x, best_y = (1 << 30);

	mov	DWORD PTR _best_waste$[ebp], 1073741824	; 40000000H
	mov	DWORD PTR _best_y$[ebp], 1073741824	; 40000000H

; 9271 :     struct nk_rp__findresult fr;
; 9272 :     struct nk_rp_node **prev, *node, *tail, **best = 0;

	mov	DWORD PTR _best$[ebp], 0

; 9273 : 
; 9274 :     /* align to multiple of c->align */
; 9275 :     width = (width + c->align - 1);

	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _width$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR _width$[ebp], eax

; 9276 :     width -= width % c->align;

	mov	ecx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _width$[ebp]
	cdq
	idiv	DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, edx
	mov	DWORD PTR _width$[ebp], eax

; 9277 :     NK_ASSERT(width % c->align == 0);

	mov	ecx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _width$[ebp]
	cdq
	idiv	DWORD PTR [ecx+8]
	test	edx, edx
	je	SHORT $LN22@nk_rp__sky
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_rp__skyline_find_best_pos@@9@9@ddf8d5d8
	add	edx, 8
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@LEHAODMI@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AAc?$AA?9?$AA?$DO?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN22@nk_rp__sky:

; 9278 : 
; 9279 :     node = c->active_head;

	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _node$[ebp], ecx

; 9280 :     prev = &c->active_head;

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _prev$[ebp], eax
$LN19@nk_rp__sky:

; 9281 :     while (node->x + width <= c->width) {

	mov	eax, DWORD PTR _node$[ebp]
	movzx	ecx, WORD PTR [eax]
	add	ecx, DWORD PTR _width$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	cmp	ecx, DWORD PTR [edx]
	jg	$LN18@nk_rp__sky

; 9282 :         int y,waste;
; 9283 :         y = nk_rp__skyline_find_min_y(c, node, node->x, width, &waste);

	lea	eax, DWORD PTR _waste$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	call	_nk_rp__skyline_find_min_y
	add	esp, 20					; 00000014H
	mov	DWORD PTR _y$5[ebp], eax

; 9284 :         /* actually just want to test BL */
; 9285 :         if (c->heuristic == NK_RP_HEURISTIC_Skyline_BL_sortHeight) {

	mov	eax, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN17@nk_rp__sky

; 9286 :             /* bottom left */
; 9287 :             if (y < best_y) {

	mov	eax, DWORD PTR _y$5[ebp]
	cmp	eax, DWORD PTR _best_y$[ebp]
	jge	SHORT $LN16@nk_rp__sky

; 9288 :             best_y = y;

	mov	eax, DWORD PTR _y$5[ebp]
	mov	DWORD PTR _best_y$[ebp], eax

; 9289 :             best = prev;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	DWORD PTR _best$[ebp], eax
$LN16@nk_rp__sky:

; 9290 :             }
; 9291 :         } else {

	jmp	SHORT $LN15@nk_rp__sky
$LN17@nk_rp__sky:

; 9292 :             /* best-fit */
; 9293 :             if (y + height <= c->height) {

	mov	eax, DWORD PTR _y$5[ebp]
	add	eax, DWORD PTR _height$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jg	SHORT $LN15@nk_rp__sky

; 9294 :                 /* can only use it if it first vertically */
; 9295 :                 if (y < best_y || (y == best_y && waste < best_waste)) {

	mov	eax, DWORD PTR _y$5[ebp]
	cmp	eax, DWORD PTR _best_y$[ebp]
	jl	SHORT $LN12@nk_rp__sky
	mov	eax, DWORD PTR _y$5[ebp]
	cmp	eax, DWORD PTR _best_y$[ebp]
	jne	SHORT $LN15@nk_rp__sky
	mov	eax, DWORD PTR _waste$4[ebp]
	cmp	eax, DWORD PTR _best_waste$[ebp]
	jge	SHORT $LN15@nk_rp__sky
$LN12@nk_rp__sky:

; 9296 :                     best_y = y;

	mov	eax, DWORD PTR _y$5[ebp]
	mov	DWORD PTR _best_y$[ebp], eax

; 9297 :                     best_waste = waste;

	mov	eax, DWORD PTR _waste$4[ebp]
	mov	DWORD PTR _best_waste$[ebp], eax

; 9298 :                     best = prev;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	DWORD PTR _best$[ebp], eax
$LN15@nk_rp__sky:

; 9299 :                 }
; 9300 :             }
; 9301 :         }
; 9302 :         prev = &node->next;

	mov	eax, DWORD PTR _node$[ebp]
	add	eax, 4
	mov	DWORD PTR _prev$[ebp], eax

; 9303 :         node = node->next;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _node$[ebp], ecx

; 9304 :     }

	jmp	$LN19@nk_rp__sky
$LN18@nk_rp__sky:

; 9305 :     best_x = (best == 0) ? 0 : (*best)->x;

	cmp	DWORD PTR _best$[ebp], 0
	jne	SHORT $LN23@nk_rp__sky
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN24@nk_rp__sky
$LN23@nk_rp__sky:
	mov	eax, DWORD PTR _best$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR tv139[ebp], edx
$LN24@nk_rp__sky:
	mov	eax, DWORD PTR tv139[ebp]
	mov	DWORD PTR _best_x$[ebp], eax

; 9306 : 
; 9307 :     /* if doing best-fit (BF), we also have to try aligning right edge to each node position */
; 9308 :     /* */
; 9309 :     /* e.g, if fitting */
; 9310 :     /* */
; 9311 :     /*     ____________________ */
; 9312 :     /*    |____________________| */
; 9313 :     /* */
; 9314 :     /*            into */
; 9315 :     /* */
; 9316 :     /*   |                         | */
; 9317 :     /*   |             ____________| */
; 9318 :     /*   |____________| */
; 9319 :     /* */
; 9320 :     /* then right-aligned reduces waste, but bottom-left BL is always chooses left-aligned */
; 9321 :     /* */
; 9322 :     /* This makes BF take about 2x the time */
; 9323 :     if (c->heuristic == NK_RP_HEURISTIC_Skyline_BF_sortHeight)

	mov	eax, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [eax+16], 1
	jne	$LN11@nk_rp__sky

; 9324 :     {
; 9325 :         tail = c->active_head;

	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _tail$[ebp], ecx

; 9326 :         node = c->active_head;

	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _node$[ebp], ecx

; 9327 :         prev = &c->active_head;

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _prev$[ebp], eax
$LN10@nk_rp__sky:

; 9328 :         /* find first node that's admissible */
; 9329 :         while (tail->x < width)

	mov	eax, DWORD PTR _tail$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, DWORD PTR _width$[ebp]
	jge	SHORT $LN8@nk_rp__sky

; 9330 :             tail = tail->next;

	mov	eax, DWORD PTR _tail$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _tail$[ebp], ecx
	jmp	SHORT $LN10@nk_rp__sky
$LN8@nk_rp__sky:

; 9331 :         while (tail)

	cmp	DWORD PTR _tail$[ebp], 0
	je	$LN11@nk_rp__sky

; 9332 :         {
; 9333 :             int xpos = tail->x - width;

	mov	eax, DWORD PTR _tail$[ebp]
	movzx	ecx, WORD PTR [eax]
	sub	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR _xpos$3[ebp], ecx

; 9334 :             int y,waste;
; 9335 :             NK_ASSERT(xpos >= 0);

	jns	SHORT $LN6@nk_rp__sky
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_rp__skyline_find_best_pos@@9@9@ddf8d5d8
	add	eax, 66					; 00000042H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BE@MNLKNDNL@?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_rp__sky:

; 9336 :             /* find the left position that matches this */
; 9337 :             while (node->next->x <= xpos) {

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, DWORD PTR _xpos$3[ebp]
	jg	SHORT $LN5@nk_rp__sky

; 9338 :                 prev = &node->next;

	mov	eax, DWORD PTR _node$[ebp]
	add	eax, 4
	mov	DWORD PTR _prev$[ebp], eax

; 9339 :                 node = node->next;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _node$[ebp], ecx

; 9340 :             }

	jmp	SHORT $LN6@nk_rp__sky
$LN5@nk_rp__sky:

; 9341 :             NK_ASSERT(node->next->x > xpos && node->x <= xpos);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, DWORD PTR _xpos$3[ebp]
	jle	SHORT $LN26@nk_rp__sky
	mov	eax, DWORD PTR _node$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, DWORD PTR _xpos$3[ebp]
	jle	SHORT $LN27@nk_rp__sky
$LN26@nk_rp__sky:
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_rp__skyline_find_best_pos@@9@9@ddf8d5d8
	add	edx, 72					; 00000048H
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1FA@GPDJEJHP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO?$AA?5?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN27@nk_rp__sky:

; 9342 :             y = nk_rp__skyline_find_min_y(c, node, xpos, width, &waste);

	lea	eax, DWORD PTR _waste$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xpos$3[ebp]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	_nk_rp__skyline_find_min_y
	add	esp, 20					; 00000014H
	mov	DWORD PTR _y$2[ebp], eax

; 9343 :             if (y + height < c->height) {

	mov	eax, DWORD PTR _y$2[ebp]
	add	eax, DWORD PTR _height$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jge	SHORT $LN4@nk_rp__sky

; 9344 :                 if (y <= best_y) {

	mov	eax, DWORD PTR _y$2[ebp]
	cmp	eax, DWORD PTR _best_y$[ebp]
	jg	SHORT $LN4@nk_rp__sky

; 9345 :                     if (y < best_y || waste < best_waste || (waste==best_waste && xpos < best_x)) {

	mov	eax, DWORD PTR _y$2[ebp]
	cmp	eax, DWORD PTR _best_y$[ebp]
	jl	SHORT $LN1@nk_rp__sky
	mov	eax, DWORD PTR _waste$1[ebp]
	cmp	eax, DWORD PTR _best_waste$[ebp]
	jl	SHORT $LN1@nk_rp__sky
	mov	eax, DWORD PTR _waste$1[ebp]
	cmp	eax, DWORD PTR _best_waste$[ebp]
	jne	SHORT $LN4@nk_rp__sky
	mov	eax, DWORD PTR _xpos$3[ebp]
	cmp	eax, DWORD PTR _best_x$[ebp]
	jge	SHORT $LN4@nk_rp__sky
$LN1@nk_rp__sky:

; 9346 :                         best_x = xpos;

	mov	eax, DWORD PTR _xpos$3[ebp]
	mov	DWORD PTR _best_x$[ebp], eax

; 9347 :                         NK_ASSERT(y <= best_y);

	mov	eax, DWORD PTR _y$2[ebp]
	cmp	eax, DWORD PTR _best_y$[ebp]
	jle	SHORT $LN28@nk_rp__sky
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_rp__skyline_find_best_pos@@9@9@ddf8d5d8
	add	ecx, 78					; 0000004eH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BI@JNFMLHFF@?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAb?$AAe?$AAs?$AAt?$AA_?$AAy?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN28@nk_rp__sky:

; 9348 :                         best_y = y;

	mov	eax, DWORD PTR _y$2[ebp]
	mov	DWORD PTR _best_y$[ebp], eax

; 9349 :                         best_waste = waste;

	mov	eax, DWORD PTR _waste$1[ebp]
	mov	DWORD PTR _best_waste$[ebp], eax

; 9350 :                         best = prev;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	DWORD PTR _best$[ebp], eax
$LN4@nk_rp__sky:

; 9351 :                     }
; 9352 :                 }
; 9353 :             }
; 9354 :             tail = tail->next;

	mov	eax, DWORD PTR _tail$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _tail$[ebp], ecx

; 9355 :         }

	jmp	$LN8@nk_rp__sky
$LN11@nk_rp__sky:

; 9356 :     }
; 9357 :     fr.prev_link = best;

	mov	eax, DWORD PTR _best$[ebp]
	mov	DWORD PTR _fr$[ebp+8], eax

; 9358 :     fr.x = best_x;

	mov	eax, DWORD PTR _best_x$[ebp]
	mov	DWORD PTR _fr$[ebp], eax

; 9359 :     fr.y = best_y;

	mov	eax, DWORD PTR _best_y$[ebp]
	mov	DWORD PTR _fr$[ebp+4], eax

; 9360 :     return fr;

	mov	eax, DWORD PTR $T6[ebp]
	mov	ecx, DWORD PTR _fr$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _fr$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _fr$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR $T6[ebp]

; 9361 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@nk_rp__sky
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 360				; 00000168H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN33@nk_rp__sky:
	DD	3
	DD	$LN32@nk_rp__sky
$LN32@nk_rp__sky:
	DD	-52					; ffffffccH
	DD	12					; 0000000cH
	DD	$LN29@nk_rp__sky
	DD	-124					; ffffff84H
	DD	4
	DD	$LN30@nk_rp__sky
	DD	-160					; ffffff60H
	DD	4
	DD	$LN31@nk_rp__sky
$LN31@nk_rp__sky:
	DB	119					; 00000077H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN30@nk_rp__sky:
	DB	119					; 00000077H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN29@nk_rp__sky:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	0
_nk_rp__skyline_find_best_pos ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rp__skyline_find_min_y
_TEXT	SEGMENT
_under_width$1 = -68					; size = 4
_waste_area$ = -56					; size = 4
_visited_width$ = -44					; size = 4
_min_y$ = -32						; size = 4
_x1$ = -20						; size = 4
_node$ = -8						; size = 4
_c$ = 8							; size = 4
_first$ = 12						; size = 4
_x0$ = 16						; size = 4
_width$ = 20						; size = 4
_pwaste$ = 24						; size = 4
_nk_rp__skyline_find_min_y PROC				; COMDAT

; 9226 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 9227 :     struct nk_rp_node *node = first;

	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _node$[ebp], eax

; 9228 :     int x1 = x0 + width;

	mov	eax, DWORD PTR _x0$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR _x1$[ebp], eax

; 9229 :     int min_y, visited_width, waste_area;
; 9230 :     NK_ASSERT(first->x <= x0);

	mov	eax, DWORD PTR _first$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, DWORD PTR _x0$[ebp]
	jle	SHORT $LN10@nk_rp__sky
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_rp__skyline_find_min_y@@9@9@ddf8d5d8
	add	edx, 4
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BO@KBODBKOH@?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_rp__sky:

; 9231 :     NK_UNUSED(c);
; 9232 : 
; 9233 :     NK_ASSERT(node->next->x > x0);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, DWORD PTR _x0$[ebp]
	jg	SHORT $LN11@nk_rp__sky
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_rp__skyline_find_min_y@@9@9@ddf8d5d8
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CG@BDIGDJGP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO?$AA?5?$AAx?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_rp__sky:

; 9234 :     /* we ended up handling this in the caller for efficiency */
; 9235 :     NK_ASSERT(node->x <= x0);

	mov	eax, DWORD PTR _node$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, DWORD PTR _x0$[ebp]
	jle	SHORT $LN12@nk_rp__sky
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_rp__skyline_find_min_y@@9@9@ddf8d5d8
	add	edx, 9
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BM@JHJLEEND@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_rp__sky:

; 9236 : 
; 9237 :     min_y = 0;

	mov	DWORD PTR _min_y$[ebp], 0

; 9238 :     waste_area = 0;

	mov	DWORD PTR _waste_area$[ebp], 0

; 9239 :     visited_width = 0;

	mov	DWORD PTR _visited_width$[ebp], 0
$LN7@nk_rp__sky:

; 9240 :     while (node->x < x1)

	mov	eax, DWORD PTR _node$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, DWORD PTR _x1$[ebp]
	jge	$LN6@nk_rp__sky

; 9241 :     {
; 9242 :         if (node->y > min_y) {

	mov	eax, DWORD PTR _node$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	cmp	ecx, DWORD PTR _min_y$[ebp]
	jle	SHORT $LN5@nk_rp__sky

; 9243 :             /* raise min_y higher. */
; 9244 :             /* we've accounted for all waste up to min_y, */
; 9245 :             /* but we'll now add more waste for everything we've visited */
; 9246 :             waste_area += visited_width * (node->y - min_y);

	mov	eax, DWORD PTR _node$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	sub	ecx, DWORD PTR _min_y$[ebp]
	imul	ecx, DWORD PTR _visited_width$[ebp]
	add	ecx, DWORD PTR _waste_area$[ebp]
	mov	DWORD PTR _waste_area$[ebp], ecx

; 9247 :             min_y = node->y;

	mov	eax, DWORD PTR _node$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _min_y$[ebp], ecx

; 9248 :             /* the first time through, visited_width might be reduced */
; 9249 :             if (node->x < x0)

	mov	eax, DWORD PTR _node$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, DWORD PTR _x0$[ebp]
	jge	SHORT $LN4@nk_rp__sky

; 9250 :             visited_width += node->next->x - x0;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, WORD PTR [ecx]
	sub	edx, DWORD PTR _x0$[ebp]
	add	edx, DWORD PTR _visited_width$[ebp]
	mov	DWORD PTR _visited_width$[ebp], edx

; 9251 :             else

	jmp	SHORT $LN3@nk_rp__sky
$LN4@nk_rp__sky:

; 9252 :             visited_width += node->next->x - node->x;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _node$[ebp]
	movzx	ecx, WORD PTR [eax]
	sub	edx, ecx
	add	edx, DWORD PTR _visited_width$[ebp]
	mov	DWORD PTR _visited_width$[ebp], edx
$LN3@nk_rp__sky:

; 9253 :         } else {

	jmp	SHORT $LN2@nk_rp__sky
$LN5@nk_rp__sky:

; 9254 :             /* add waste area */
; 9255 :             int under_width = node->next->x - node->x;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _node$[ebp]
	movzx	ecx, WORD PTR [eax]
	sub	edx, ecx
	mov	DWORD PTR _under_width$1[ebp], edx

; 9256 :             if (under_width + visited_width > width)

	mov	eax, DWORD PTR _under_width$1[ebp]
	add	eax, DWORD PTR _visited_width$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jle	SHORT $LN1@nk_rp__sky

; 9257 :             under_width = width - visited_width;

	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, DWORD PTR _visited_width$[ebp]
	mov	DWORD PTR _under_width$1[ebp], eax
$LN1@nk_rp__sky:

; 9258 :             waste_area += under_width * (min_y - node->y);

	mov	eax, DWORD PTR _node$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _min_y$[ebp]
	sub	edx, ecx
	imul	edx, DWORD PTR _under_width$1[ebp]
	add	edx, DWORD PTR _waste_area$[ebp]
	mov	DWORD PTR _waste_area$[ebp], edx

; 9259 :             visited_width += under_width;

	mov	eax, DWORD PTR _visited_width$[ebp]
	add	eax, DWORD PTR _under_width$1[ebp]
	mov	DWORD PTR _visited_width$[ebp], eax
$LN2@nk_rp__sky:

; 9260 :         }
; 9261 :         node = node->next;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _node$[ebp], ecx

; 9262 :     }

	jmp	$LN7@nk_rp__sky
$LN6@nk_rp__sky:

; 9263 :     *pwaste = waste_area;

	mov	eax, DWORD PTR _pwaste$[ebp]
	mov	ecx, DWORD PTR _waste_area$[ebp]
	mov	DWORD PTR [eax], ecx

; 9264 :     return min_y;

	mov	eax, DWORD PTR _min_y$[ebp]

; 9265 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_rp__skyline_find_min_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rp_init_target
_TEXT	SEGMENT
_i$ = -8						; size = 4
_context$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_nodes$ = 20						; size = 4
_num_nodes$ = 24					; size = 4
_nk_rp_init_target PROC					; COMDAT

; 9195 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 9196 :     int i;
; 9197 : #ifndef STBRP_LARGE_RECTS
; 9198 :     NK_ASSERT(width <= 0xffff && height <= 0xffff);

	cmp	DWORD PTR _width$[ebp], 65535		; 0000ffffH
	jg	SHORT $LN6@nk_rp_init
	cmp	DWORD PTR _height$[ebp], 65535		; 0000ffffH
	jle	SHORT $LN7@nk_rp_init
$LN6@nk_rp_init:
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_rp_init_target@@9@9@ddf8d5d8
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EI@NNJKMECF@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAf?$AAf?$AAf?$AAf?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAf@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_rp_init:

; 9199 : #endif
; 9200 : 
; 9201 :     for (i=0; i < num_nodes-1; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_rp_init
$LN2@nk_rp_init:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_rp_init:
	mov	eax, DWORD PTR _num_nodes$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@nk_rp_init

; 9202 :         nodes[i].next = &nodes[i+1];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _nodes$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _nodes$[ebp]
	mov	DWORD PTR [ecx+eax*8+4], edx
	jmp	SHORT $LN2@nk_rp_init
$LN1@nk_rp_init:

; 9203 :     nodes[i].next = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _nodes$[ebp]
	mov	DWORD PTR [ecx+eax*8+4], 0

; 9204 :     context->init_mode = NK_RP__INIT_skyline;

	mov	eax, DWORD PTR _context$[ebp]
	mov	DWORD PTR [eax+12], 1

; 9205 :     context->heuristic = NK_RP_HEURISTIC_Skyline_default;

	mov	eax, DWORD PTR _context$[ebp]
	mov	DWORD PTR [eax+16], 0

; 9206 :     context->free_head = &nodes[0];

	mov	eax, 8
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _nodes$[ebp]
	mov	edx, DWORD PTR _context$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 9207 :     context->active_head = &context->extra[0];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _context$[ebp]
	lea	eax, DWORD PTR [edx+ecx+32]
	mov	ecx, DWORD PTR _context$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 9208 :     context->width = width;

	mov	eax, DWORD PTR _context$[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [eax], ecx

; 9209 :     context->height = height;

	mov	eax, DWORD PTR _context$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 9210 :     context->num_nodes = num_nodes;

	mov	eax, DWORD PTR _context$[ebp]
	mov	ecx, DWORD PTR _num_nodes$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 9211 :     nk_rp_setup_allow_out_of_mem(context, 0);

	push	0
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	_nk_rp_setup_allow_out_of_mem
	add	esp, 8

; 9212 : 
; 9213 :     /* node 0 is the full width, node 1 is the sentinel (lets us not store width explicitly) */
; 9214 :     context->extra[0].x = 0;

	mov	eax, 8
	imul	ecx, eax, 0
	xor	edx, edx
	mov	eax, DWORD PTR _context$[ebp]
	mov	WORD PTR [eax+ecx+32], dx

; 9215 :     context->extra[0].y = 0;

	mov	eax, 8
	imul	ecx, eax, 0
	xor	edx, edx
	mov	eax, DWORD PTR _context$[ebp]
	mov	WORD PTR [eax+ecx+34], dx

; 9216 :     context->extra[0].next = &context->extra[1];

	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _context$[ebp]
	lea	edx, DWORD PTR [ecx+eax+32]
	mov	eax, 8
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _context$[ebp]
	mov	DWORD PTR [eax+ecx+36], edx

; 9217 :     context->extra[1].x = (nk_rp_coord) width;

	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _context$[ebp]
	mov	dx, WORD PTR _width$[ebp]
	mov	WORD PTR [ecx+eax+32], dx

; 9218 :     context->extra[1].y = 65535;

	mov	eax, 8
	shl	eax, 0
	mov	ecx, 65535				; 0000ffffH
	mov	edx, DWORD PTR _context$[ebp]
	mov	WORD PTR [edx+eax+34], cx

; 9219 :     context->extra[1].next = 0;

	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _context$[ebp]
	mov	DWORD PTR [ecx+eax+36], 0

; 9220 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_rp_init_target ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rp_setup_allow_out_of_mem
_TEXT	SEGMENT
_context$ = 8						; size = 4
_allow_out_of_mem$ = 12					; size = 4
_nk_rp_setup_allow_out_of_mem PROC			; COMDAT

; 9174 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 9175 :     if (allow_out_of_mem)

	cmp	DWORD PTR _allow_out_of_mem$[ebp], 0
	je	SHORT $LN2@nk_rp_setu

; 9176 :         /* if it's ok to run out of memory, then don't bother aligning them; */
; 9177 :         /* this gives better packing, but may fail due to OOM (even though */
; 9178 :         /* the rectangles easily fit). @TODO a smarter approach would be to only */
; 9179 :         /* quantize once we've hit OOM, then we could get rid of this parameter. */
; 9180 :         context->align = 1;

	mov	eax, DWORD PTR _context$[ebp]
	mov	DWORD PTR [eax+8], 1

; 9181 :     else {

	jmp	SHORT $LN3@nk_rp_setu
$LN2@nk_rp_setu:

; 9182 :         /* if it's not ok to run out of memory, then quantize the widths */
; 9183 :         /* so that num_nodes is always enough nodes. */
; 9184 :         /* */
; 9185 :         /* I.e. num_nodes * align >= width */
; 9186 :         /*                  align >= width / num_nodes */
; 9187 :         /*                  align = ceil(width/num_nodes) */
; 9188 :         context->align = (context->width + context->num_nodes-1) / context->num_nodes;

	mov	eax, DWORD PTR _context$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _context$[ebp]
	mov	eax, DWORD PTR [edx+20]
	lea	eax, DWORD PTR [ecx+eax-1]
	mov	ecx, DWORD PTR _context$[ebp]
	cdq
	idiv	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _context$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN3@nk_rp_setu:

; 9189 :     }
; 9190 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_rp_setup_allow_out_of_mem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_push_rect_uv
_TEXT	SEGMENT
_index$ = -124						; size = 2
_idx$ = -112						; size = 4
_col$ = -100						; size = 16
_d$ = -76						; size = 8
_b$ = -60						; size = 8
_uvd$ = -44						; size = 8
_uvb$ = -28						; size = 8
_vtx$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_list$ = 8						; size = 4
_a$ = 12						; size = 8
_c$ = 20						; size = 8
_uva$ = 28						; size = 8
_uvc$ = 36						; size = 8
_color$ = 44						; size = 4
_nk_draw_list_push_rect_uv PROC				; COMDAT

; 8848 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 8849 :     void *vtx;
; 8850 :     struct nk_vec2 uvb;
; 8851 :     struct nk_vec2 uvd;
; 8852 :     struct nk_vec2 b;
; 8853 :     struct nk_vec2 d;
; 8854 : 
; 8855 :     struct nk_colorf col;
; 8856 :     nk_draw_index *idx;
; 8857 :     nk_draw_index index;
; 8858 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN6@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_push_rect_uv@@9@9@ddf8d5d8
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_draw_li:

; 8859 :     if (!list) return;

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN3@nk_draw_li
	jmp	$LN4@nk_draw_li
$LN3@nk_draw_li:

; 8860 : 
; 8861 :     nk_color_fv(&col.r, color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	lea	ecx, DWORD PTR _col$[ebp]
	push	ecx
	call	_nk_color_fv
	add	esp, 8

; 8862 :     uvb = nk_vec2(uvc.x, uva.y);

	push	ecx
	movss	xmm0, DWORD PTR _uva$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _uvc$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _uvb$[ebp], eax
	mov	DWORD PTR _uvb$[ebp+4], edx

; 8863 :     uvd = nk_vec2(uva.x, uvc.y);

	push	ecx
	movss	xmm0, DWORD PTR _uvc$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _uva$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _uvd$[ebp], eax
	mov	DWORD PTR _uvd$[ebp+4], edx

; 8864 :     b = nk_vec2(c.x, a.y);

	push	ecx
	movss	xmm0, DWORD PTR _a$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _b$[ebp], eax
	mov	DWORD PTR _b$[ebp+4], edx

; 8865 :     d = nk_vec2(a.x, c.y);

	push	ecx
	movss	xmm0, DWORD PTR _c$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _d$[ebp], eax
	mov	DWORD PTR _d$[ebp+4], edx

; 8866 : 
; 8867 :     index = (nk_draw_index)list->vertex_count;

	mov	eax, DWORD PTR _list$[ebp]
	mov	cx, WORD PTR [eax+176]
	mov	WORD PTR _index$[ebp], cx

; 8868 :     vtx = nk_draw_list_alloc_vertices(list, 4);

	push	4
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_alloc_vertices
	add	esp, 8
	mov	DWORD PTR _vtx$[ebp], eax

; 8869 :     idx = nk_draw_list_alloc_elements(list, 6);

	push	6
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_alloc_elements
	add	esp, 8
	mov	DWORD PTR _idx$[ebp], eax

; 8870 :     if (!vtx || !idx) return;

	cmp	DWORD PTR _vtx$[ebp], 0
	je	SHORT $LN1@nk_draw_li
	cmp	DWORD PTR _idx$[ebp], 0
	jne	SHORT $LN2@nk_draw_li
$LN1@nk_draw_li:
	jmp	$LN4@nk_draw_li
$LN2@nk_draw_li:

; 8871 : 
; 8872 :     idx[0] = (nk_draw_index)(index+0); idx[1] = (nk_draw_index)(index+1);

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _idx$[ebp]
	mov	ax, WORD PTR _index$[ebp]
	mov	WORD PTR [edx+ecx], ax
	movzx	eax, WORD PTR _index$[ebp]
	add	eax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _idx$[ebp]
	mov	WORD PTR [edx+ecx], ax

; 8873 :     idx[2] = (nk_draw_index)(index+2); idx[3] = (nk_draw_index)(index+0);

	movzx	eax, WORD PTR _index$[ebp]
	add	eax, 2
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _idx$[ebp]
	mov	WORD PTR [edx+ecx], ax
	mov	eax, 2
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _idx$[ebp]
	mov	ax, WORD PTR _index$[ebp]
	mov	WORD PTR [edx+ecx], ax

; 8874 :     idx[4] = (nk_draw_index)(index+2); idx[5] = (nk_draw_index)(index+3);

	movzx	eax, WORD PTR _index$[ebp]
	add	eax, 2
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _idx$[ebp]
	mov	WORD PTR [edx+ecx], ax
	movzx	eax, WORD PTR _index$[ebp]
	add	eax, 3
	mov	ecx, 2
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	WORD PTR [ecx+edx], ax

; 8875 : 
; 8876 :     vtx = nk_draw_vertex(vtx, &list->config, a, uva, col);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _uva$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uva$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	add	ecx, 112				; 00000070H
	push	ecx
	mov	edx, DWORD PTR _vtx$[ebp]
	push	edx
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$[ebp], eax

; 8877 :     vtx = nk_draw_vertex(vtx, &list->config, b, uvb, col);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _uvb$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uvb$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	add	ecx, 112				; 00000070H
	push	ecx
	mov	edx, DWORD PTR _vtx$[ebp]
	push	edx
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$[ebp], eax

; 8878 :     vtx = nk_draw_vertex(vtx, &list->config, c, uvc, col);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _uvc$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uvc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	add	ecx, 112				; 00000070H
	push	ecx
	mov	edx, DWORD PTR _vtx$[ebp]
	push	edx
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$[ebp], eax

; 8879 :     vtx = nk_draw_vertex(vtx, &list->config, d, uvd, col);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _uvd$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uvd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _d$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	add	ecx, 112				; 00000070H
	push	ecx
	mov	edx, DWORD PTR _vtx$[ebp]
	push	edx
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$[ebp], eax
$LN4@nk_draw_li:

; 8880 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@nk_draw_li
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@nk_draw_li:
	DD	5
	DD	$LN12@nk_draw_li
$LN12@nk_draw_li:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN7@nk_draw_li
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN8@nk_draw_li
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN9@nk_draw_li
	DD	-76					; ffffffb4H
	DD	8
	DD	$LN10@nk_draw_li
	DD	-100					; ffffff9cH
	DD	16					; 00000010H
	DD	$LN11@nk_draw_li
$LN11@nk_draw_li:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
$LN10@nk_draw_li:
	DB	100					; 00000064H
	DB	0
$LN9@nk_draw_li:
	DB	98					; 00000062H
	DB	0
$LN8@nk_draw_li:
	DB	117					; 00000075H
	DB	118					; 00000076H
	DB	100					; 00000064H
	DB	0
$LN7@nk_draw_li:
	DB	117					; 00000075H
	DB	118					; 00000076H
	DB	98					; 00000062H
	DB	0
_nk_draw_list_push_rect_uv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_vertex
_TEXT	SEGMENT
tv73 = -232						; size = 4
_address$1 = -32					; size = 4
_elem_iter$ = -20					; size = 4
_result$ = -8						; size = 4
_dst$ = 8						; size = 4
_config$ = 12						; size = 4
_pos$ = 16						; size = 8
_uv$ = 24						; size = 8
_color$ = 32						; size = 16
_nk_draw_vertex PROC					; COMDAT

; 8149 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8150 :     void *result = (void*)((char*)dst + config->vertex_size);

	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _result$[ebp], ecx

; 8151 :     const struct nk_draw_vertex_layout_element *elem_iter = config->vertex_layout;

	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _elem_iter$[ebp], ecx
$LN8@nk_draw_ve:

; 8152 :     while (!nk_draw_vertex_layout_element_is_end_of_layout(elem_iter)) {

	mov	eax, DWORD PTR _elem_iter$[ebp]
	push	eax
	call	_nk_draw_vertex_layout_element_is_end_of_layout
	add	esp, 4
	test	eax, eax
	jne	$LN7@nk_draw_ve

; 8153 :         void *address = (void*)((char*)dst + elem_iter->offset);

	mov	eax, DWORD PTR _elem_iter$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _address$1[ebp], ecx

; 8154 :         switch (elem_iter->attribute) {

	mov	eax, DWORD PTR _elem_iter$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv73[ebp], ecx
	cmp	DWORD PTR tv73[ebp], 0
	je	SHORT $LN3@nk_draw_ve
	cmp	DWORD PTR tv73[ebp], 1
	je	SHORT $LN1@nk_draw_ve
	cmp	DWORD PTR tv73[ebp], 2
	je	SHORT $LN2@nk_draw_ve

; 8155 :         case NK_VERTEX_ATTRIBUTE_COUNT:
; 8156 :         default: NK_ASSERT(0 && "wrong element attribute");

	xor	eax, eax
	jne	SHORT $LN3@nk_draw_ve
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_draw_vertex@@9@9@ddf8d5d8
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1DO@JEEJBCGK@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAw?$AAr?$AAo?$AAn?$AAg?$AA?5?$AAe?$AAl?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?5?$AAa?$AAt?$AAt?$AAr?$AAi?$AAb?$AAu?$AAt?$AAe?$AA?$CC?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@nk_draw_ve:

; 8157 :         case NK_VERTEX_POSITION: nk_draw_vertex_element(address, &pos.x, 2, elem_iter->format); break;

	mov	eax, DWORD PTR _elem_iter$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	2
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _address$1[ebp]
	push	eax
	call	_nk_draw_vertex_element
	add	esp, 16					; 00000010H
	jmp	SHORT $LN5@nk_draw_ve
$LN2@nk_draw_ve:

; 8158 :         case NK_VERTEX_TEXCOORD: nk_draw_vertex_element(address, &uv.x, 2, elem_iter->format); break;

	mov	eax, DWORD PTR _elem_iter$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	2
	lea	edx, DWORD PTR _uv$[ebp]
	push	edx
	mov	eax, DWORD PTR _address$1[ebp]
	push	eax
	call	_nk_draw_vertex_element
	add	esp, 16					; 00000010H
	jmp	SHORT $LN5@nk_draw_ve
$LN1@nk_draw_ve:

; 8159 :         case NK_VERTEX_COLOR: nk_draw_vertex_color(address, &color.r, elem_iter->format); break;

	mov	eax, DWORD PTR _elem_iter$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR _color$[ebp]
	push	edx
	mov	eax, DWORD PTR _address$1[ebp]
	push	eax
	call	_nk_draw_vertex_color
	add	esp, 12					; 0000000cH
$LN5@nk_draw_ve:

; 8160 :         }
; 8161 :         elem_iter++;

	mov	eax, DWORD PTR _elem_iter$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _elem_iter$[ebp], eax

; 8162 :     }

	jmp	$LN8@nk_draw_ve
$LN7@nk_draw_ve:

; 8163 :     return result;

	mov	eax, DWORD PTR _result$[ebp]

; 8164 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_vertex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_vertex_element
_TEXT	SEGMENT
tv244 = -316						; size = 4
tv221 = -316						; size = 4
tv198 = -316						; size = 4
tv175 = -316						; size = 4
tv152 = -316						; size = 4
tv129 = -316						; size = 4
tv245 = -312						; size = 4
tv222 = -312						; size = 4
tv199 = -312						; size = 4
tv176 = -312						; size = 4
tv153 = -312						; size = 4
tv130 = -312						; size = 4
tv235 = -308						; size = 4
tv212 = -308						; size = 4
tv189 = -308						; size = 4
tv166 = -308						; size = 4
tv143 = -308						; size = 4
tv88 = -308						; size = 4
tv74 = -308						; size = 4
_value$1 = -108						; size = 8
_value$2 = -92						; size = 4
_value$3 = -80						; size = 2
_value$4 = -65						; size = 1
_value$5 = -56						; size = 4
_value$6 = -44						; size = 2
_value$7 = -29						; size = 1
_attribute$ = -20					; size = 4
_value_index$ = -8					; size = 4
_dst$ = 8						; size = 4
_values$ = 12						; size = 4
_value_count$ = 16					; size = 4
_format$ = 20						; size = 4
_nk_draw_vertex_element PROC				; COMDAT

; 8094 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8095 :     int value_index;
; 8096 :     void *attribute = dst;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	DWORD PTR _attribute$[ebp], eax

; 8097 :     /* if this triggers you tried to provide a color format for a value */
; 8098 :     NK_ASSERT(format < NK_FORMAT_COLOR_BEGIN);

	cmp	DWORD PTR _format$[ebp], 8
	jl	SHORT $LN18@nk_draw_ve
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_vertex_element@@9@9@ddf8d5d8
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1DO@BBEFODIH@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AA?$DM?$AA?5?$AAN?$AAK?$AA_?$AAF?$AAO?$AAR?$AAM?$AAA?$AAT?$AA_?$AAC?$AAO?$AAL?$AAO?$AAR?$AA_?$AAB?$AAE?$AAG?$AAI?$AAN?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@nk_draw_ve:

; 8099 :     if (format >= NK_FORMAT_COLOR_BEGIN && format <= NK_FORMAT_COLOR_END) return;

	cmp	DWORD PTR _format$[ebp], 8
	jl	SHORT $LN15@nk_draw_ve
	cmp	DWORD PTR _format$[ebp], 18		; 00000012H
	jg	SHORT $LN15@nk_draw_ve
	jmp	$LN12@nk_draw_ve
$LN15@nk_draw_ve:

; 8100 :     for (value_index = 0; value_index < value_count; ++value_index) {

	mov	DWORD PTR _value_index$[ebp], 0
	jmp	SHORT $LN14@nk_draw_ve
$LN13@nk_draw_ve:
	mov	eax, DWORD PTR _value_index$[ebp]
	add	eax, 1
	mov	DWORD PTR _value_index$[ebp], eax
$LN14@nk_draw_ve:
	mov	eax, DWORD PTR _value_index$[ebp]
	cmp	eax, DWORD PTR _value_count$[ebp]
	jge	$LN12@nk_draw_ve

; 8101 :         switch (format) {

	mov	eax, DWORD PTR _format$[ebp]
	mov	DWORD PTR tv74[ebp], eax
	cmp	DWORD PTR tv74[ebp], 7
	ja	SHORT $LN9@nk_draw_ve
	mov	ecx, DWORD PTR tv74[ebp]
	jmp	DWORD PTR $LN65@nk_draw_ve[ecx*4]
$LN9@nk_draw_ve:

; 8102 :         default: NK_ASSERT(0 && "invalid vertex layout format"); break;

	xor	eax, eax
	jne	SHORT $LN19@nk_draw_ve
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_draw_vertex_element@@9@9@ddf8d5d8
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EI@PCEGCBPN@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAv?$AAe?$AAr?$AAt?$AAe?$AAx?$AA?5?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?5?$AAf?$AAo?$AAr?$AAm@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@nk_draw_ve:
	jmp	$LN10@nk_draw_ve
$LN8@nk_draw_ve:

; 8103 :         case NK_FORMAT_SCHAR: {
; 8104 :             char value = (char)NK_CLAMP(NK_SCHAR_MIN, values[value_index], NK_SCHAR_MAX);

	mov	eax, DWORD PTR _value_index$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR __real@42fe0000
	comiss	xmm0, DWORD PTR [ecx+eax*4]
	jbe	SHORT $LN20@nk_draw_ve
	mov	edx, DWORD PTR _value_index$[ebp]
	mov	eax, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv88[ebp], xmm0
	jmp	SHORT $LN21@nk_draw_ve
$LN20@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@42fe0000
	movss	DWORD PTR tv88[ebp], xmm0
$LN21@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@c2fe0000
	comiss	xmm0, DWORD PTR tv88[ebp]
	jbe	SHORT $LN24@nk_draw_ve
	movss	xmm0, DWORD PTR __real@c2fe0000
	movss	DWORD PTR tv130[ebp], xmm0
	jmp	SHORT $LN25@nk_draw_ve
$LN24@nk_draw_ve:
	mov	ecx, DWORD PTR _value_index$[ebp]
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR __real@42fe0000
	comiss	xmm0, DWORD PTR [edx+ecx*4]
	jbe	SHORT $LN22@nk_draw_ve
	mov	eax, DWORD PTR _value_index$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR tv129[ebp], xmm0
	jmp	SHORT $LN23@nk_draw_ve
$LN22@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@42fe0000
	movss	DWORD PTR tv129[ebp], xmm0
$LN23@nk_draw_ve:
	movss	xmm0, DWORD PTR tv129[ebp]
	movss	DWORD PTR tv130[ebp], xmm0
$LN25@nk_draw_ve:
	cvttss2si edx, DWORD PTR tv130[ebp]
	mov	BYTE PTR _value$7[ebp], dl

; 8105 :             NK_MEMCPY(attribute, &value, sizeof(value));

	push	1
	lea	eax, DWORD PTR _value$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _attribute$[ebp]
	push	ecx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 8106 :             attribute = (void*)((char*)attribute + sizeof(char));

	mov	eax, DWORD PTR _attribute$[ebp]
	add	eax, 1
	mov	DWORD PTR _attribute$[ebp], eax

; 8107 :         } break;

	jmp	$LN10@nk_draw_ve
$LN7@nk_draw_ve:

; 8108 :         case NK_FORMAT_SSHORT: {
; 8109 :             nk_short value = (nk_short)NK_CLAMP(NK_SSHORT_MIN, values[value_index], NK_SSHORT_MAX);

	mov	eax, DWORD PTR _value_index$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR __real@46fffe00
	comiss	xmm0, DWORD PTR [ecx+eax*4]
	jbe	SHORT $LN26@nk_draw_ve
	mov	edx, DWORD PTR _value_index$[ebp]
	mov	eax, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv143[ebp], xmm0
	jmp	SHORT $LN27@nk_draw_ve
$LN26@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@46fffe00
	movss	DWORD PTR tv143[ebp], xmm0
$LN27@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@c6fffe00
	comiss	xmm0, DWORD PTR tv143[ebp]
	jbe	SHORT $LN30@nk_draw_ve
	movss	xmm0, DWORD PTR __real@c6fffe00
	movss	DWORD PTR tv153[ebp], xmm0
	jmp	SHORT $LN31@nk_draw_ve
$LN30@nk_draw_ve:
	mov	ecx, DWORD PTR _value_index$[ebp]
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR __real@46fffe00
	comiss	xmm0, DWORD PTR [edx+ecx*4]
	jbe	SHORT $LN28@nk_draw_ve
	mov	eax, DWORD PTR _value_index$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR tv152[ebp], xmm0
	jmp	SHORT $LN29@nk_draw_ve
$LN28@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@46fffe00
	movss	DWORD PTR tv152[ebp], xmm0
$LN29@nk_draw_ve:
	movss	xmm0, DWORD PTR tv152[ebp]
	movss	DWORD PTR tv153[ebp], xmm0
$LN31@nk_draw_ve:
	cvttss2si edx, DWORD PTR tv153[ebp]
	mov	WORD PTR _value$6[ebp], dx

; 8110 :             NK_MEMCPY(attribute, &value, sizeof(value));

	push	2
	lea	eax, DWORD PTR _value$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _attribute$[ebp]
	push	ecx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 8111 :             attribute = (void*)((char*)attribute + sizeof(value));

	mov	eax, DWORD PTR _attribute$[ebp]
	add	eax, 2
	mov	DWORD PTR _attribute$[ebp], eax

; 8112 :         } break;

	jmp	$LN10@nk_draw_ve
$LN6@nk_draw_ve:

; 8113 :         case NK_FORMAT_SINT: {
; 8114 :             nk_int value = (nk_int)NK_CLAMP(NK_SINT_MIN, values[value_index], NK_SINT_MAX);

	mov	eax, DWORD PTR _value_index$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR __real@4f000000
	comiss	xmm0, DWORD PTR [ecx+eax*4]
	jbe	SHORT $LN32@nk_draw_ve
	mov	edx, DWORD PTR _value_index$[ebp]
	mov	eax, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv166[ebp], xmm0
	jmp	SHORT $LN33@nk_draw_ve
$LN32@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@4f000000
	movss	DWORD PTR tv166[ebp], xmm0
$LN33@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@cf000000
	comiss	xmm0, DWORD PTR tv166[ebp]
	jbe	SHORT $LN36@nk_draw_ve
	movss	xmm0, DWORD PTR __real@cf000000
	movss	DWORD PTR tv176[ebp], xmm0
	jmp	SHORT $LN37@nk_draw_ve
$LN36@nk_draw_ve:
	mov	ecx, DWORD PTR _value_index$[ebp]
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR __real@4f000000
	comiss	xmm0, DWORD PTR [edx+ecx*4]
	jbe	SHORT $LN34@nk_draw_ve
	mov	eax, DWORD PTR _value_index$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR tv175[ebp], xmm0
	jmp	SHORT $LN35@nk_draw_ve
$LN34@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@4f000000
	movss	DWORD PTR tv175[ebp], xmm0
$LN35@nk_draw_ve:
	movss	xmm0, DWORD PTR tv175[ebp]
	movss	DWORD PTR tv176[ebp], xmm0
$LN37@nk_draw_ve:
	cvttss2si edx, DWORD PTR tv176[ebp]
	mov	DWORD PTR _value$5[ebp], edx

; 8115 :             NK_MEMCPY(attribute, &value, sizeof(value));

	push	4
	lea	eax, DWORD PTR _value$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _attribute$[ebp]
	push	ecx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 8116 :             attribute = (void*)((char*)attribute + sizeof(nk_int));

	mov	eax, DWORD PTR _attribute$[ebp]
	add	eax, 4
	mov	DWORD PTR _attribute$[ebp], eax

; 8117 :         } break;

	jmp	$LN10@nk_draw_ve
$LN5@nk_draw_ve:

; 8118 :         case NK_FORMAT_UCHAR: {
; 8119 :             unsigned char value = (unsigned char)NK_CLAMP(NK_UCHAR_MIN, values[value_index], NK_UCHAR_MAX);

	mov	eax, DWORD PTR _value_index$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR __real@43800000
	comiss	xmm0, DWORD PTR [ecx+eax*4]
	jbe	SHORT $LN38@nk_draw_ve
	mov	edx, DWORD PTR _value_index$[ebp]
	mov	eax, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv189[ebp], xmm0
	jmp	SHORT $LN39@nk_draw_ve
$LN38@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@43800000
	movss	DWORD PTR tv189[ebp], xmm0
$LN39@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv189[ebp]
	jbe	SHORT $LN42@nk_draw_ve
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv199[ebp], xmm0
	jmp	SHORT $LN43@nk_draw_ve
$LN42@nk_draw_ve:
	mov	ecx, DWORD PTR _value_index$[ebp]
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR __real@43800000
	comiss	xmm0, DWORD PTR [edx+ecx*4]
	jbe	SHORT $LN40@nk_draw_ve
	mov	eax, DWORD PTR _value_index$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR tv198[ebp], xmm0
	jmp	SHORT $LN41@nk_draw_ve
$LN40@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@43800000
	movss	DWORD PTR tv198[ebp], xmm0
$LN41@nk_draw_ve:
	movss	xmm0, DWORD PTR tv198[ebp]
	movss	DWORD PTR tv199[ebp], xmm0
$LN43@nk_draw_ve:
	cvttss2si edx, DWORD PTR tv199[ebp]
	mov	BYTE PTR _value$4[ebp], dl

; 8120 :             NK_MEMCPY(attribute, &value, sizeof(value));

	push	1
	lea	eax, DWORD PTR _value$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _attribute$[ebp]
	push	ecx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 8121 :             attribute = (void*)((char*)attribute + sizeof(unsigned char));

	mov	eax, DWORD PTR _attribute$[ebp]
	add	eax, 1
	mov	DWORD PTR _attribute$[ebp], eax

; 8122 :         } break;

	jmp	$LN10@nk_draw_ve
$LN4@nk_draw_ve:

; 8123 :         case NK_FORMAT_USHORT: {
; 8124 :             nk_ushort value = (nk_ushort)NK_CLAMP(NK_USHORT_MIN, values[value_index], NK_USHORT_MAX);

	mov	eax, DWORD PTR _value_index$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR __real@477fff00
	comiss	xmm0, DWORD PTR [ecx+eax*4]
	jbe	SHORT $LN44@nk_draw_ve
	mov	edx, DWORD PTR _value_index$[ebp]
	mov	eax, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv212[ebp], xmm0
	jmp	SHORT $LN45@nk_draw_ve
$LN44@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv212[ebp], xmm0
$LN45@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv212[ebp]
	jbe	SHORT $LN48@nk_draw_ve
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv222[ebp], xmm0
	jmp	SHORT $LN49@nk_draw_ve
$LN48@nk_draw_ve:
	mov	ecx, DWORD PTR _value_index$[ebp]
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR __real@477fff00
	comiss	xmm0, DWORD PTR [edx+ecx*4]
	jbe	SHORT $LN46@nk_draw_ve
	mov	eax, DWORD PTR _value_index$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR tv221[ebp], xmm0
	jmp	SHORT $LN47@nk_draw_ve
$LN46@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv221[ebp], xmm0
$LN47@nk_draw_ve:
	movss	xmm0, DWORD PTR tv221[ebp]
	movss	DWORD PTR tv222[ebp], xmm0
$LN49@nk_draw_ve:
	cvttss2si edx, DWORD PTR tv222[ebp]
	mov	WORD PTR _value$3[ebp], dx

; 8125 :             NK_MEMCPY(attribute, &value, sizeof(value));

	push	2
	lea	eax, DWORD PTR _value$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _attribute$[ebp]
	push	ecx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 8126 :             attribute = (void*)((char*)attribute + sizeof(value));

	mov	eax, DWORD PTR _attribute$[ebp]
	add	eax, 2
	mov	DWORD PTR _attribute$[ebp], eax

; 8127 :             } break;

	jmp	$LN10@nk_draw_ve
$LN3@nk_draw_ve:

; 8128 :         case NK_FORMAT_UINT: {
; 8129 :             nk_uint value = (nk_uint)NK_CLAMP(NK_UINT_MIN, values[value_index], NK_UINT_MAX);

	mov	eax, DWORD PTR _value_index$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR __real@4f800000
	comiss	xmm0, DWORD PTR [ecx+eax*4]
	jbe	SHORT $LN50@nk_draw_ve
	mov	edx, DWORD PTR _value_index$[ebp]
	mov	eax, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv235[ebp], xmm0
	jmp	SHORT $LN51@nk_draw_ve
$LN50@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv235[ebp], xmm0
$LN51@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv235[ebp]
	jbe	SHORT $LN54@nk_draw_ve
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv245[ebp], xmm0
	jmp	SHORT $LN55@nk_draw_ve
$LN54@nk_draw_ve:
	mov	ecx, DWORD PTR _value_index$[ebp]
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR __real@4f800000
	comiss	xmm0, DWORD PTR [edx+ecx*4]
	jbe	SHORT $LN52@nk_draw_ve
	mov	eax, DWORD PTR _value_index$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR tv244[ebp], xmm0
	jmp	SHORT $LN53@nk_draw_ve
$LN52@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv244[ebp], xmm0
$LN53@nk_draw_ve:
	movss	xmm0, DWORD PTR tv244[ebp]
	movss	DWORD PTR tv245[ebp], xmm0
$LN55@nk_draw_ve:
	movss	xmm0, DWORD PTR tv245[ebp]
	call	__ftoui3
	mov	DWORD PTR _value$2[ebp], eax

; 8130 :             NK_MEMCPY(attribute, &value, sizeof(value));

	push	4
	lea	eax, DWORD PTR _value$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _attribute$[ebp]
	push	ecx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 8131 :             attribute = (void*)((char*)attribute + sizeof(nk_uint));

	mov	eax, DWORD PTR _attribute$[ebp]
	add	eax, 4
	mov	DWORD PTR _attribute$[ebp], eax

; 8132 :         } break;

	jmp	SHORT $LN10@nk_draw_ve
$LN2@nk_draw_ve:

; 8133 :         case NK_FORMAT_FLOAT:
; 8134 :             NK_MEMCPY(attribute, &values[value_index], sizeof(values[value_index]));

	push	4
	mov	eax, DWORD PTR _value_index$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _attribute$[ebp]
	push	eax
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 8135 :             attribute = (void*)((char*)attribute + sizeof(float));

	mov	eax, DWORD PTR _attribute$[ebp]
	add	eax, 4
	mov	DWORD PTR _attribute$[ebp], eax

; 8136 :             break;

	jmp	SHORT $LN10@nk_draw_ve
$LN1@nk_draw_ve:

; 8137 :         case NK_FORMAT_DOUBLE: {
; 8138 :             double value = (double)values[value_index];

	mov	eax, DWORD PTR _value_index$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+eax*4]
	movsd	QWORD PTR _value$1[ebp], xmm0

; 8139 :             NK_MEMCPY(attribute, &value, sizeof(value));

	push	8
	lea	eax, DWORD PTR _value$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _attribute$[ebp]
	push	ecx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 8140 :             attribute = (void*)((char*)attribute + sizeof(double));

	mov	eax, DWORD PTR _attribute$[ebp]
	add	eax, 8
	mov	DWORD PTR _attribute$[ebp], eax
$LN10@nk_draw_ve:

; 8141 :             } break;
; 8142 :         }
; 8143 :     }

	jmp	$LN13@nk_draw_ve
$LN12@nk_draw_ve:

; 8144 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN64@nk_draw_ve
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN64@nk_draw_ve:
	DD	7
	DD	$LN63@nk_draw_ve
$LN63@nk_draw_ve:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN56@nk_draw_ve
	DD	-44					; ffffffd4H
	DD	2
	DD	$LN57@nk_draw_ve
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN58@nk_draw_ve
	DD	-65					; ffffffbfH
	DD	1
	DD	$LN59@nk_draw_ve
	DD	-80					; ffffffb0H
	DD	2
	DD	$LN60@nk_draw_ve
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN61@nk_draw_ve
	DD	-108					; ffffff94H
	DD	8
	DD	$LN62@nk_draw_ve
$LN62@nk_draw_ve:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN61@nk_draw_ve:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN60@nk_draw_ve:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN59@nk_draw_ve:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN58@nk_draw_ve:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN57@nk_draw_ve:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN56@nk_draw_ve:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
	npad	2
$LN65@nk_draw_ve:
	DD	$LN8@nk_draw_ve
	DD	$LN7@nk_draw_ve
	DD	$LN6@nk_draw_ve
	DD	$LN5@nk_draw_ve
	DD	$LN4@nk_draw_ve
	DD	$LN3@nk_draw_ve
	DD	$LN2@nk_draw_ve
	DD	$LN1@nk_draw_ve
_nk_draw_vertex_element ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_vertex_color
_TEXT	SEGMENT
tv583 = -384						; size = 4
tv562 = -384						; size = 4
tv541 = -384						; size = 4
tv520 = -384						; size = 4
tv492 = -384						; size = 4
tv467 = -384						; size = 4
tv442 = -384						; size = 4
tv417 = -384						; size = 4
tv389 = -384						; size = 4
tv364 = -384						; size = 4
tv339 = -384						; size = 4
tv311 = -384						; size = 4
tv286 = -384						; size = 4
tv261 = -384						; size = 4
tv236 = -384						; size = 4
tv208 = -384						; size = 4
tv183 = -384						; size = 4
tv158 = -384						; size = 4
tv582 = -380						; size = 4
tv561 = -380						; size = 4
tv540 = -380						; size = 4
tv519 = -380						; size = 4
tv493 = -380						; size = 4
tv468 = -380						; size = 4
tv443 = -380						; size = 4
tv418 = -380						; size = 4
tv390 = -380						; size = 4
tv365 = -380						; size = 4
tv340 = -380						; size = 4
tv312 = -380						; size = 4
tv287 = -380						; size = 4
tv262 = -380						; size = 4
tv237 = -380						; size = 4
tv209 = -380						; size = 4
tv184 = -380						; size = 4
tv159 = -380						; size = 4
tv573 = -376						; size = 4
tv552 = -376						; size = 4
tv531 = -376						; size = 4
tv510 = -376						; size = 4
tv481 = -376						; size = 4
tv456 = -376						; size = 4
tv431 = -376						; size = 4
tv406 = -376						; size = 4
tv378 = -376						; size = 4
tv353 = -376						; size = 4
tv328 = -376						; size = 4
tv300 = -376						; size = 4
tv275 = -376						; size = 4
tv250 = -376						; size = 4
tv225 = -376						; size = 4
tv197 = -376						; size = 4
tv172 = -376						; size = 4
tv147 = -376						; size = 4
tv78 = -376						; size = 4
_color$1 = -176						; size = 4
_col$2 = -164						; size = 4
_col$3 = -152						; size = 32
_col$4 = -112						; size = 16
_col$5 = -88						; size = 12
_col$6 = -68						; size = 8
_col$7 = -52						; size = 6
_bgra$8 = -36						; size = 4
_col$9 = -24						; size = 4
_col$10 = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_attribute$ = 8						; size = 4
_values$ = 12						; size = 4
_format$ = 16						; size = 4
_nk_draw_vertex_color PROC				; COMDAT

; 8023 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 384				; 00000180H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 96					; 00000060H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 8024 :     /* if this triggers you tried to provide a value format for a color */
; 8025 :     NK_ASSERT(format >= NK_FORMAT_COLOR_BEGIN);

	cmp	DWORD PTR _format$[ebp], 8
	jge	SHORT $LN17@nk_draw_ve
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_vertex_color@@9@9@ddf8d5d8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EA@OIHMHNMA@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAF?$AAO?$AAR?$AAM?$AAA?$AAT?$AA_?$AAC?$AAO?$AAL?$AAO?$AAR?$AA_?$AAB?$AAE?$AAG?$AAI?$AAN?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN17@nk_draw_ve:

; 8026 :     NK_ASSERT(format <= NK_FORMAT_COLOR_END);

	cmp	DWORD PTR _format$[ebp], 18		; 00000012H
	jle	SHORT $LN18@nk_draw_ve
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_vertex_color@@9@9@ddf8d5d8
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1DM@GJOAEAIH@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAF?$AAO?$AAR?$AAM?$AAA?$AAT?$AA_?$AAC?$AAO?$AAL?$AAO?$AAR?$AA_?$AAE?$AAN?$AAD?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@nk_draw_ve:

; 8027 :     if (format < NK_FORMAT_COLOR_BEGIN || format > NK_FORMAT_COLOR_END) return;

	cmp	DWORD PTR _format$[ebp], 8
	jl	SHORT $LN13@nk_draw_ve
	cmp	DWORD PTR _format$[ebp], 18		; 00000012H
	jle	SHORT $LN14@nk_draw_ve
$LN13@nk_draw_ve:
	jmp	$LN11@nk_draw_ve
$LN14@nk_draw_ve:

; 8028 : 
; 8029 :     switch (format) {

	mov	eax, DWORD PTR _format$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	mov	ecx, DWORD PTR tv78[ebp]
	sub	ecx, 8
	mov	DWORD PTR tv78[ebp], ecx
	cmp	DWORD PTR tv78[ebp], 10			; 0000000aH
	ja	SHORT $LN10@nk_draw_ve
	mov	edx, DWORD PTR tv78[ebp]
	jmp	DWORD PTR $LN140@nk_draw_ve[edx*4]
$LN10@nk_draw_ve:

; 8030 :     default: NK_ASSERT(0 && "Invalid vertex layout color format"); break;

	xor	eax, eax
	jne	SHORT $LN19@nk_draw_ve
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_draw_vertex_color@@9@9@ddf8d5d8
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1FE@DPEENCO@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAv?$AAe?$AAr?$AAt?$AAe?$AAx?$AA?5?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?5?$AAc?$AAo?$AAl?$AAo@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@nk_draw_ve:
	jmp	$LN11@nk_draw_ve
$LN9@nk_draw_ve:

; 8031 :     case NK_FORMAT_R8G8B8A8:
; 8032 :     case NK_FORMAT_R8G8B8: {
; 8033 :         struct nk_color col = nk_rgba_fv(values);

	mov	eax, DWORD PTR _values$[ebp]
	push	eax
	call	_nk_rgba_fv
	add	esp, 4
	mov	DWORD PTR _col$10[ebp], eax

; 8034 :         NK_MEMCPY(attribute, &col.r, sizeof(col));

	push	4
	lea	eax, DWORD PTR _col$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _attribute$[ebp]
	push	ecx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 8035 :     } break;

	jmp	$LN11@nk_draw_ve
$LN8@nk_draw_ve:

; 8036 :     case NK_FORMAT_B8G8R8A8: {
; 8037 :         struct nk_color col = nk_rgba_fv(values);

	mov	eax, DWORD PTR _values$[ebp]
	push	eax
	call	_nk_rgba_fv
	add	esp, 4
	mov	DWORD PTR _col$9[ebp], eax

; 8038 :         struct nk_color bgra = nk_rgba(col.b, col.g, col.r, col.a);

	movzx	eax, BYTE PTR _col$9[ebp+3]
	push	eax
	movzx	ecx, BYTE PTR _col$9[ebp]
	push	ecx
	movzx	edx, BYTE PTR _col$9[ebp+1]
	push	edx
	movzx	eax, BYTE PTR _col$9[ebp+2]
	push	eax
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	DWORD PTR _bgra$8[ebp], eax

; 8039 :         NK_MEMCPY(attribute, &bgra, sizeof(bgra));

	push	4
	lea	eax, DWORD PTR _bgra$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _attribute$[ebp]
	push	ecx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 8040 :     } break;

	jmp	$LN11@nk_draw_ve
$LN7@nk_draw_ve:

; 8041 :     case NK_FORMAT_R16G15B16: {
; 8042 :         nk_ushort col[3];
; 8043 :         col[0] = (nk_ushort)NK_CLAMP(NK_USHORT_MIN, values[0] * NK_USHORT_MAX, NK_USHORT_MAX);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@477fff00
	comiss	xmm1, xmm0
	jbe	SHORT $LN20@nk_draw_ve
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv147[ebp], xmm0
	jmp	SHORT $LN21@nk_draw_ve
$LN20@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv147[ebp], xmm0
$LN21@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv147[ebp]
	jbe	SHORT $LN24@nk_draw_ve
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv159[ebp], xmm0
	jmp	SHORT $LN25@nk_draw_ve
$LN24@nk_draw_ve:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@477fff00
	comiss	xmm1, xmm0
	jbe	SHORT $LN22@nk_draw_ve
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv158[ebp], xmm0
	jmp	SHORT $LN23@nk_draw_ve
$LN22@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv158[ebp], xmm0
$LN23@nk_draw_ve:
	movss	xmm0, DWORD PTR tv158[ebp]
	movss	DWORD PTR tv159[ebp], xmm0
$LN25@nk_draw_ve:
	cvttss2si eax, DWORD PTR tv159[ebp]
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	WORD PTR _col$7[ebp+edx], ax

; 8044 :         col[1] = (nk_ushort)NK_CLAMP(NK_USHORT_MIN, values[1] * NK_USHORT_MAX, NK_USHORT_MAX);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@477fff00
	comiss	xmm1, xmm0
	jbe	SHORT $LN26@nk_draw_ve
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv172[ebp], xmm0
	jmp	SHORT $LN27@nk_draw_ve
$LN26@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv172[ebp], xmm0
$LN27@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv172[ebp]
	jbe	SHORT $LN30@nk_draw_ve
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv184[ebp], xmm0
	jmp	SHORT $LN31@nk_draw_ve
$LN30@nk_draw_ve:
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@477fff00
	comiss	xmm1, xmm0
	jbe	SHORT $LN28@nk_draw_ve
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv183[ebp], xmm0
	jmp	SHORT $LN29@nk_draw_ve
$LN28@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv183[ebp], xmm0
$LN29@nk_draw_ve:
	movss	xmm0, DWORD PTR tv183[ebp]
	movss	DWORD PTR tv184[ebp], xmm0
$LN31@nk_draw_ve:
	cvttss2si edx, DWORD PTR tv184[ebp]
	mov	eax, 2
	shl	eax, 0
	mov	WORD PTR _col$7[ebp+eax], dx

; 8045 :         col[2] = (nk_ushort)NK_CLAMP(NK_USHORT_MIN, values[2] * NK_USHORT_MAX, NK_USHORT_MAX);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@477fff00
	comiss	xmm1, xmm0
	jbe	SHORT $LN32@nk_draw_ve
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv197[ebp], xmm0
	jmp	SHORT $LN33@nk_draw_ve
$LN32@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv197[ebp], xmm0
$LN33@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv197[ebp]
	jbe	SHORT $LN36@nk_draw_ve
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv209[ebp], xmm0
	jmp	SHORT $LN37@nk_draw_ve
$LN36@nk_draw_ve:
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@477fff00
	comiss	xmm1, xmm0
	jbe	SHORT $LN34@nk_draw_ve
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv208[ebp], xmm0
	jmp	SHORT $LN35@nk_draw_ve
$LN34@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv208[ebp], xmm0
$LN35@nk_draw_ve:
	movss	xmm0, DWORD PTR tv208[ebp]
	movss	DWORD PTR tv209[ebp], xmm0
$LN37@nk_draw_ve:
	cvttss2si edx, DWORD PTR tv209[ebp]
	mov	eax, 2
	shl	eax, 1
	mov	WORD PTR _col$7[ebp+eax], dx

; 8046 :         NK_MEMCPY(attribute, col, sizeof(col));

	push	6
	lea	eax, DWORD PTR _col$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _attribute$[ebp]
	push	ecx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 8047 :     } break;

	jmp	$LN11@nk_draw_ve
$LN6@nk_draw_ve:

; 8048 :     case NK_FORMAT_R16G15B16A16: {
; 8049 :         nk_ushort col[4];
; 8050 :         col[0] = (nk_ushort)NK_CLAMP(NK_USHORT_MIN, values[0] * NK_USHORT_MAX, NK_USHORT_MAX);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@477fff00
	comiss	xmm1, xmm0
	jbe	SHORT $LN38@nk_draw_ve
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv225[ebp], xmm0
	jmp	SHORT $LN39@nk_draw_ve
$LN38@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv225[ebp], xmm0
$LN39@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv225[ebp]
	jbe	SHORT $LN42@nk_draw_ve
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv237[ebp], xmm0
	jmp	SHORT $LN43@nk_draw_ve
$LN42@nk_draw_ve:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@477fff00
	comiss	xmm1, xmm0
	jbe	SHORT $LN40@nk_draw_ve
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv236[ebp], xmm0
	jmp	SHORT $LN41@nk_draw_ve
$LN40@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv236[ebp], xmm0
$LN41@nk_draw_ve:
	movss	xmm0, DWORD PTR tv236[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
$LN43@nk_draw_ve:
	cvttss2si eax, DWORD PTR tv237[ebp]
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	WORD PTR _col$6[ebp+edx], ax

; 8051 :         col[1] = (nk_ushort)NK_CLAMP(NK_USHORT_MIN, values[1] * NK_USHORT_MAX, NK_USHORT_MAX);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@477fff00
	comiss	xmm1, xmm0
	jbe	SHORT $LN44@nk_draw_ve
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv250[ebp], xmm0
	jmp	SHORT $LN45@nk_draw_ve
$LN44@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv250[ebp], xmm0
$LN45@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv250[ebp]
	jbe	SHORT $LN48@nk_draw_ve
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv262[ebp], xmm0
	jmp	SHORT $LN49@nk_draw_ve
$LN48@nk_draw_ve:
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@477fff00
	comiss	xmm1, xmm0
	jbe	SHORT $LN46@nk_draw_ve
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv261[ebp], xmm0
	jmp	SHORT $LN47@nk_draw_ve
$LN46@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv261[ebp], xmm0
$LN47@nk_draw_ve:
	movss	xmm0, DWORD PTR tv261[ebp]
	movss	DWORD PTR tv262[ebp], xmm0
$LN49@nk_draw_ve:
	cvttss2si edx, DWORD PTR tv262[ebp]
	mov	eax, 2
	shl	eax, 0
	mov	WORD PTR _col$6[ebp+eax], dx

; 8052 :         col[2] = (nk_ushort)NK_CLAMP(NK_USHORT_MIN, values[2] * NK_USHORT_MAX, NK_USHORT_MAX);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@477fff00
	comiss	xmm1, xmm0
	jbe	SHORT $LN50@nk_draw_ve
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv275[ebp], xmm0
	jmp	SHORT $LN51@nk_draw_ve
$LN50@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv275[ebp], xmm0
$LN51@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv275[ebp]
	jbe	SHORT $LN54@nk_draw_ve
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv287[ebp], xmm0
	jmp	SHORT $LN55@nk_draw_ve
$LN54@nk_draw_ve:
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@477fff00
	comiss	xmm1, xmm0
	jbe	SHORT $LN52@nk_draw_ve
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv286[ebp], xmm0
	jmp	SHORT $LN53@nk_draw_ve
$LN52@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv286[ebp], xmm0
$LN53@nk_draw_ve:
	movss	xmm0, DWORD PTR tv286[ebp]
	movss	DWORD PTR tv287[ebp], xmm0
$LN55@nk_draw_ve:
	cvttss2si edx, DWORD PTR tv287[ebp]
	mov	eax, 2
	shl	eax, 1
	mov	WORD PTR _col$6[ebp+eax], dx

; 8053 :         col[3] = (nk_ushort)NK_CLAMP(NK_USHORT_MIN, values[3] * NK_USHORT_MAX, NK_USHORT_MAX);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@477fff00
	comiss	xmm1, xmm0
	jbe	SHORT $LN56@nk_draw_ve
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv300[ebp], xmm0
	jmp	SHORT $LN57@nk_draw_ve
$LN56@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv300[ebp], xmm0
$LN57@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv300[ebp]
	jbe	SHORT $LN60@nk_draw_ve
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv312[ebp], xmm0
	jmp	SHORT $LN61@nk_draw_ve
$LN60@nk_draw_ve:
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@477fff00
	comiss	xmm1, xmm0
	jbe	SHORT $LN58@nk_draw_ve
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv311[ebp], xmm0
	jmp	SHORT $LN59@nk_draw_ve
$LN58@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv311[ebp], xmm0
$LN59@nk_draw_ve:
	movss	xmm0, DWORD PTR tv311[ebp]
	movss	DWORD PTR tv312[ebp], xmm0
$LN61@nk_draw_ve:
	cvttss2si eax, DWORD PTR tv312[ebp]
	mov	ecx, 2
	imul	edx, ecx, 3
	mov	WORD PTR _col$6[ebp+edx], ax

; 8054 :         NK_MEMCPY(attribute, col, sizeof(col));

	push	8
	lea	eax, DWORD PTR _col$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _attribute$[ebp]
	push	ecx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 8055 :     } break;

	jmp	$LN11@nk_draw_ve
$LN5@nk_draw_ve:

; 8056 :     case NK_FORMAT_R32G32B32: {
; 8057 :         nk_uint col[3];
; 8058 :         col[0] = (nk_uint)NK_CLAMP(NK_UINT_MIN, values[0] * NK_UINT_MAX, NK_UINT_MAX);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	xmm1, DWORD PTR __real@4f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN62@nk_draw_ve
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv328[ebp], xmm0
	jmp	SHORT $LN63@nk_draw_ve
$LN62@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv328[ebp], xmm0
$LN63@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv328[ebp]
	jbe	SHORT $LN66@nk_draw_ve
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv340[ebp], xmm0
	jmp	SHORT $LN67@nk_draw_ve
$LN66@nk_draw_ve:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	xmm1, DWORD PTR __real@4f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN64@nk_draw_ve
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv339[ebp], xmm0
	jmp	SHORT $LN65@nk_draw_ve
$LN64@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv339[ebp], xmm0
$LN65@nk_draw_ve:
	movss	xmm0, DWORD PTR tv339[ebp]
	movss	DWORD PTR tv340[ebp], xmm0
$LN67@nk_draw_ve:
	movss	xmm0, DWORD PTR tv340[ebp]
	call	__ftoui3
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR _col$5[ebp+edx], eax

; 8059 :         col[1] = (nk_uint)NK_CLAMP(NK_UINT_MIN, values[1] * NK_UINT_MAX, NK_UINT_MAX);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	xmm1, DWORD PTR __real@4f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN68@nk_draw_ve
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv353[ebp], xmm0
	jmp	SHORT $LN69@nk_draw_ve
$LN68@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv353[ebp], xmm0
$LN69@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv353[ebp]
	jbe	SHORT $LN72@nk_draw_ve
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv365[ebp], xmm0
	jmp	SHORT $LN73@nk_draw_ve
$LN72@nk_draw_ve:
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	xmm1, DWORD PTR __real@4f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN70@nk_draw_ve
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv364[ebp], xmm0
	jmp	SHORT $LN71@nk_draw_ve
$LN70@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv364[ebp], xmm0
$LN71@nk_draw_ve:
	movss	xmm0, DWORD PTR tv364[ebp]
	movss	DWORD PTR tv365[ebp], xmm0
$LN73@nk_draw_ve:
	movss	xmm0, DWORD PTR tv365[ebp]
	call	__ftoui3
	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR _col$5[ebp+edx], eax

; 8060 :         col[2] = (nk_uint)NK_CLAMP(NK_UINT_MIN, values[2] * NK_UINT_MAX, NK_UINT_MAX);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	xmm1, DWORD PTR __real@4f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN74@nk_draw_ve
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv378[ebp], xmm0
	jmp	SHORT $LN75@nk_draw_ve
$LN74@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv378[ebp], xmm0
$LN75@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv378[ebp]
	jbe	SHORT $LN78@nk_draw_ve
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv390[ebp], xmm0
	jmp	SHORT $LN79@nk_draw_ve
$LN78@nk_draw_ve:
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	xmm1, DWORD PTR __real@4f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN76@nk_draw_ve
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv389[ebp], xmm0
	jmp	SHORT $LN77@nk_draw_ve
$LN76@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv389[ebp], xmm0
$LN77@nk_draw_ve:
	movss	xmm0, DWORD PTR tv389[ebp]
	movss	DWORD PTR tv390[ebp], xmm0
$LN79@nk_draw_ve:
	movss	xmm0, DWORD PTR tv390[ebp]
	call	__ftoui3
	mov	edx, 4
	shl	edx, 1
	mov	DWORD PTR _col$5[ebp+edx], eax

; 8061 :         NK_MEMCPY(attribute, col, sizeof(col));

	push	12					; 0000000cH
	lea	eax, DWORD PTR _col$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _attribute$[ebp]
	push	ecx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 8062 :     } break;

	jmp	$LN11@nk_draw_ve
$LN4@nk_draw_ve:

; 8063 :     case NK_FORMAT_R32G32B32A32: {
; 8064 :         nk_uint col[4];
; 8065 :         col[0] = (nk_uint)NK_CLAMP(NK_UINT_MIN, values[0] * NK_UINT_MAX, NK_UINT_MAX);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	xmm1, DWORD PTR __real@4f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN80@nk_draw_ve
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv406[ebp], xmm0
	jmp	SHORT $LN81@nk_draw_ve
$LN80@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv406[ebp], xmm0
$LN81@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv406[ebp]
	jbe	SHORT $LN84@nk_draw_ve
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv418[ebp], xmm0
	jmp	SHORT $LN85@nk_draw_ve
$LN84@nk_draw_ve:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	xmm1, DWORD PTR __real@4f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN82@nk_draw_ve
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv417[ebp], xmm0
	jmp	SHORT $LN83@nk_draw_ve
$LN82@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv417[ebp], xmm0
$LN83@nk_draw_ve:
	movss	xmm0, DWORD PTR tv417[ebp]
	movss	DWORD PTR tv418[ebp], xmm0
$LN85@nk_draw_ve:
	movss	xmm0, DWORD PTR tv418[ebp]
	call	__ftoui3
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR _col$4[ebp+edx], eax

; 8066 :         col[1] = (nk_uint)NK_CLAMP(NK_UINT_MIN, values[1] * NK_UINT_MAX, NK_UINT_MAX);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	xmm1, DWORD PTR __real@4f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN86@nk_draw_ve
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv431[ebp], xmm0
	jmp	SHORT $LN87@nk_draw_ve
$LN86@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv431[ebp], xmm0
$LN87@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv431[ebp]
	jbe	SHORT $LN90@nk_draw_ve
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv443[ebp], xmm0
	jmp	SHORT $LN91@nk_draw_ve
$LN90@nk_draw_ve:
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	xmm1, DWORD PTR __real@4f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN88@nk_draw_ve
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv442[ebp], xmm0
	jmp	SHORT $LN89@nk_draw_ve
$LN88@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv442[ebp], xmm0
$LN89@nk_draw_ve:
	movss	xmm0, DWORD PTR tv442[ebp]
	movss	DWORD PTR tv443[ebp], xmm0
$LN91@nk_draw_ve:
	movss	xmm0, DWORD PTR tv443[ebp]
	call	__ftoui3
	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR _col$4[ebp+edx], eax

; 8067 :         col[2] = (nk_uint)NK_CLAMP(NK_UINT_MIN, values[2] * NK_UINT_MAX, NK_UINT_MAX);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	xmm1, DWORD PTR __real@4f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN92@nk_draw_ve
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv456[ebp], xmm0
	jmp	SHORT $LN93@nk_draw_ve
$LN92@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv456[ebp], xmm0
$LN93@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv456[ebp]
	jbe	SHORT $LN96@nk_draw_ve
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv468[ebp], xmm0
	jmp	SHORT $LN97@nk_draw_ve
$LN96@nk_draw_ve:
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	xmm1, DWORD PTR __real@4f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN94@nk_draw_ve
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv467[ebp], xmm0
	jmp	SHORT $LN95@nk_draw_ve
$LN94@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv467[ebp], xmm0
$LN95@nk_draw_ve:
	movss	xmm0, DWORD PTR tv467[ebp]
	movss	DWORD PTR tv468[ebp], xmm0
$LN97@nk_draw_ve:
	movss	xmm0, DWORD PTR tv468[ebp]
	call	__ftoui3
	mov	edx, 4
	shl	edx, 1
	mov	DWORD PTR _col$4[ebp+edx], eax

; 8068 :         col[3] = (nk_uint)NK_CLAMP(NK_UINT_MIN, values[3] * NK_UINT_MAX, NK_UINT_MAX);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	xmm1, DWORD PTR __real@4f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN98@nk_draw_ve
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv481[ebp], xmm0
	jmp	SHORT $LN99@nk_draw_ve
$LN98@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv481[ebp], xmm0
$LN99@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv481[ebp]
	jbe	SHORT $LN102@nk_draw_ve
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv493[ebp], xmm0
	jmp	SHORT $LN103@nk_draw_ve
$LN102@nk_draw_ve:
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	xmm1, DWORD PTR __real@4f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN100@nk_draw_ve
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv492[ebp], xmm0
	jmp	SHORT $LN101@nk_draw_ve
$LN100@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@4f800000
	movss	DWORD PTR tv492[ebp], xmm0
$LN101@nk_draw_ve:
	movss	xmm0, DWORD PTR tv492[ebp]
	movss	DWORD PTR tv493[ebp], xmm0
$LN103@nk_draw_ve:
	movss	xmm0, DWORD PTR tv493[ebp]
	call	__ftoui3
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	DWORD PTR _col$4[ebp+edx], eax

; 8069 :         NK_MEMCPY(attribute, col, sizeof(col));

	push	16					; 00000010H
	lea	eax, DWORD PTR _col$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _attribute$[ebp]
	push	ecx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 8070 :     } break;

	jmp	$LN11@nk_draw_ve
$LN3@nk_draw_ve:

; 8071 :     case NK_FORMAT_R32G32B32A32_FLOAT:
; 8072 :         NK_MEMCPY(attribute, values, sizeof(float)*4);

	push	16					; 00000010H
	mov	eax, DWORD PTR _values$[ebp]
	push	eax
	mov	ecx, DWORD PTR _attribute$[ebp]
	push	ecx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 8073 :         break;

	jmp	$LN11@nk_draw_ve
$LN2@nk_draw_ve:

; 8074 :     case NK_FORMAT_R32G32B32A32_DOUBLE: {
; 8075 :         double col[4];
; 8076 :         col[0] = (double)NK_SATURATE(values[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN104@nk_draw_ve
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv510[ebp], xmm0
	jmp	SHORT $LN105@nk_draw_ve
$LN104@nk_draw_ve:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR tv510[ebp], xmm0
$LN105@nk_draw_ve:
	movss	xmm0, DWORD PTR tv510[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN108@nk_draw_ve
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN106@nk_draw_ve
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv519[ebp], xmm0
	jmp	SHORT $LN107@nk_draw_ve
$LN106@nk_draw_ve:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR tv519[ebp], xmm0
$LN107@nk_draw_ve:
	movss	xmm0, DWORD PTR tv519[ebp]
	movss	DWORD PTR tv520[ebp], xmm0
	jmp	SHORT $LN109@nk_draw_ve
$LN108@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv520[ebp], xmm0
$LN109@nk_draw_ve:
	cvtss2sd xmm0, DWORD PTR tv520[ebp]
	mov	eax, 8
	imul	ecx, eax, 0
	movsd	QWORD PTR _col$3[ebp+ecx], xmm0

; 8077 :         col[1] = (double)NK_SATURATE(values[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN110@nk_draw_ve
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv531[ebp], xmm0
	jmp	SHORT $LN111@nk_draw_ve
$LN110@nk_draw_ve:
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR tv531[ebp], xmm0
$LN111@nk_draw_ve:
	movss	xmm0, DWORD PTR tv531[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN114@nk_draw_ve
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN112@nk_draw_ve
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv540[ebp], xmm0
	jmp	SHORT $LN113@nk_draw_ve
$LN112@nk_draw_ve:
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR tv540[ebp], xmm0
$LN113@nk_draw_ve:
	movss	xmm0, DWORD PTR tv540[ebp]
	movss	DWORD PTR tv541[ebp], xmm0
	jmp	SHORT $LN115@nk_draw_ve
$LN114@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv541[ebp], xmm0
$LN115@nk_draw_ve:
	cvtss2sd xmm0, DWORD PTR tv541[ebp]
	mov	edx, 8
	shl	edx, 0
	movsd	QWORD PTR _col$3[ebp+edx], xmm0

; 8078 :         col[2] = (double)NK_SATURATE(values[2]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN116@nk_draw_ve
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv552[ebp], xmm0
	jmp	SHORT $LN117@nk_draw_ve
$LN116@nk_draw_ve:
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR tv552[ebp], xmm0
$LN117@nk_draw_ve:
	movss	xmm0, DWORD PTR tv552[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN120@nk_draw_ve
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN118@nk_draw_ve
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv561[ebp], xmm0
	jmp	SHORT $LN119@nk_draw_ve
$LN118@nk_draw_ve:
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR tv561[ebp], xmm0
$LN119@nk_draw_ve:
	movss	xmm0, DWORD PTR tv561[ebp]
	movss	DWORD PTR tv562[ebp], xmm0
	jmp	SHORT $LN121@nk_draw_ve
$LN120@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv562[ebp], xmm0
$LN121@nk_draw_ve:
	cvtss2sd xmm0, DWORD PTR tv562[ebp]
	mov	edx, 8
	shl	edx, 1
	movsd	QWORD PTR _col$3[ebp+edx], xmm0

; 8079 :         col[3] = (double)NK_SATURATE(values[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN122@nk_draw_ve
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv573[ebp], xmm0
	jmp	SHORT $LN123@nk_draw_ve
$LN122@nk_draw_ve:
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR tv573[ebp], xmm0
$LN123@nk_draw_ve:
	movss	xmm0, DWORD PTR tv573[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN126@nk_draw_ve
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN124@nk_draw_ve
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv582[ebp], xmm0
	jmp	SHORT $LN125@nk_draw_ve
$LN124@nk_draw_ve:
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR tv582[ebp], xmm0
$LN125@nk_draw_ve:
	movss	xmm0, DWORD PTR tv582[ebp]
	movss	DWORD PTR tv583[ebp], xmm0
	jmp	SHORT $LN127@nk_draw_ve
$LN126@nk_draw_ve:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv583[ebp], xmm0
$LN127@nk_draw_ve:
	cvtss2sd xmm0, DWORD PTR tv583[ebp]
	mov	eax, 8
	imul	ecx, eax, 3
	movsd	QWORD PTR _col$3[ebp+ecx], xmm0

; 8080 :         NK_MEMCPY(attribute, col, sizeof(col));

	push	32					; 00000020H
	lea	eax, DWORD PTR _col$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _attribute$[ebp]
	push	ecx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 8081 :     } break;

	jmp	SHORT $LN11@nk_draw_ve
$LN1@nk_draw_ve:

; 8082 :     case NK_FORMAT_RGB32:
; 8083 :     case NK_FORMAT_RGBA32: {
; 8084 :         struct nk_color col = nk_rgba_fv(values);

	mov	eax, DWORD PTR _values$[ebp]
	push	eax
	call	_nk_rgba_fv
	add	esp, 4
	mov	DWORD PTR _col$2[ebp], eax

; 8085 :         nk_uint color = nk_color_u32(col);

	mov	eax, DWORD PTR _col$2[ebp]
	push	eax
	call	_nk_color_u32
	add	esp, 4
	mov	DWORD PTR _color$1[ebp], eax

; 8086 :         NK_MEMCPY(attribute, &color, sizeof(color));

	push	4
	lea	eax, DWORD PTR _color$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _attribute$[ebp]
	push	ecx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH
$LN11@nk_draw_ve:

; 8087 :     } break;
; 8088 :     }
; 8089 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN139@nk_draw_ve
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 384				; 00000180H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN139@nk_draw_ve:
	DD	10					; 0000000aH
	DD	$LN138@nk_draw_ve
$LN138@nk_draw_ve:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN128@nk_draw_ve
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN129@nk_draw_ve
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN130@nk_draw_ve
	DD	-52					; ffffffccH
	DD	6
	DD	$LN131@nk_draw_ve
	DD	-68					; ffffffbcH
	DD	8
	DD	$LN132@nk_draw_ve
	DD	-88					; ffffffa8H
	DD	12					; 0000000cH
	DD	$LN133@nk_draw_ve
	DD	-112					; ffffff90H
	DD	16					; 00000010H
	DD	$LN134@nk_draw_ve
	DD	-152					; ffffff68H
	DD	32					; 00000020H
	DD	$LN135@nk_draw_ve
	DD	-164					; ffffff5cH
	DD	4
	DD	$LN136@nk_draw_ve
	DD	-176					; ffffff50H
	DD	4
	DD	$LN137@nk_draw_ve
$LN137@nk_draw_ve:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN136@nk_draw_ve:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
$LN135@nk_draw_ve:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
$LN134@nk_draw_ve:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
$LN133@nk_draw_ve:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
$LN132@nk_draw_ve:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
$LN131@nk_draw_ve:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
$LN130@nk_draw_ve:
	DB	98					; 00000062H
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	0
$LN129@nk_draw_ve:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
$LN128@nk_draw_ve:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
	npad	1
$LN140@nk_draw_ve:
	DD	$LN9@nk_draw_ve
	DD	$LN7@nk_draw_ve
	DD	$LN5@nk_draw_ve
	DD	$LN9@nk_draw_ve
	DD	$LN8@nk_draw_ve
	DD	$LN6@nk_draw_ve
	DD	$LN4@nk_draw_ve
	DD	$LN3@nk_draw_ve
	DD	$LN2@nk_draw_ve
	DD	$LN1@nk_draw_ve
	DD	$LN1@nk_draw_ve
_nk_draw_vertex_color ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_vertex_layout_element_is_end_of_layout
_TEXT	SEGMENT
tv68 = -196						; size = 4
_element$ = 8						; size = 4
_nk_draw_vertex_layout_element_is_end_of_layout PROC	; COMDAT

; 8015 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8016 :     return (element->attribute == NK_VERTEX_ATTRIBUTE_COUNT ||
; 8017 :             element->format == NK_FORMAT_COUNT);

	mov	eax, DWORD PTR _element$[ebp]
	cmp	DWORD PTR [eax], 3
	je	SHORT $LN3@nk_draw_ve
	mov	ecx, DWORD PTR _element$[ebp]
	cmp	DWORD PTR [ecx+4], 19			; 00000013H
	je	SHORT $LN3@nk_draw_ve
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@nk_draw_ve
$LN3@nk_draw_ve:
	mov	DWORD PTR tv68[ebp], 1
$LN4@nk_draw_ve:
	mov	eax, DWORD PTR tv68[ebp]

; 8018 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_vertex_layout_element_is_end_of_layout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_alloc_elements
_TEXT	SEGMENT
_cmd$ = -20						; size = 4
_ids$ = -8						; size = 4
_list$ = 8						; size = 4
_count$ = 12						; size = 4
_nk_draw_list_alloc_elements PROC			; COMDAT

; 7995 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7996 :     nk_draw_index *ids;
; 7997 :     struct nk_draw_command *cmd;
; 7998 :     NK_STORAGE const nk_size elem_align = NK_ALIGNOF(nk_draw_index);
; 7999 :     NK_STORAGE const nk_size elem_size = sizeof(nk_draw_index);
; 8000 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN5@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_alloc_elements@@9@9@ddf8d5d8
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_draw_li:

; 8001 :     if (!list) return 0;

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN2@nk_draw_li
	xor	eax, eax
	jmp	SHORT $LN3@nk_draw_li
$LN2@nk_draw_li:

; 8002 : 
; 8003 :     ids = (nk_draw_index*)
; 8004 :         nk_buffer_alloc(list->elements, NK_BUFFER_FRONT, elem_size*count, elem_align);

	mov	eax, DWORD PTR ?elem_align@?1??nk_draw_list_alloc_elements@@9@9
	push	eax
	mov	ecx, DWORD PTR ?elem_size@?1??nk_draw_list_alloc_elements@@9@9
	imul	ecx, DWORD PTR _count$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx+168]
	push	eax
	call	_nk_buffer_alloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ids$[ebp], eax

; 8005 :     if (!ids) return 0;

	cmp	DWORD PTR _ids$[ebp], 0
	jne	SHORT $LN1@nk_draw_li
	xor	eax, eax
	jmp	SHORT $LN3@nk_draw_li
$LN1@nk_draw_li:

; 8006 :     cmd = nk_draw_list_command_last(list);

	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_command_last
	add	esp, 4
	mov	DWORD PTR _cmd$[ebp], eax

; 8007 :     list->element_count += (unsigned int)count;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	add	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [edx+172], ecx

; 8008 :     cmd->elem_count += (unsigned int)count;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR [edx], ecx

; 8009 :     return ids;

	mov	eax, DWORD PTR _ids$[ebp]
$LN3@nk_draw_li:

; 8010 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_alloc_elements ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_alloc_vertices
_TEXT	SEGMENT
_vtx$ = -8						; size = 4
_list$ = 8						; size = 4
_count$ = 12						; size = 4
_nk_draw_list_alloc_vertices PROC			; COMDAT

; 7982 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7983 :     void *vtx;
; 7984 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN5@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_alloc_vertices@@9@9@ddf8d5d8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_draw_li:

; 7985 :     if (!list) return 0;

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN2@nk_draw_li
	xor	eax, eax
	jmp	SHORT $LN3@nk_draw_li
$LN2@nk_draw_li:

; 7986 :     vtx = nk_buffer_alloc(list->vertices, NK_BUFFER_FRONT,
; 7987 :         list->config.vertex_size*count, list->config.vertex_alignment);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx+152]
	imul	eax, DWORD PTR _count$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	push	edx
	call	_nk_buffer_alloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _vtx$[ebp], eax

; 7988 :     if (!vtx) return 0;

	cmp	DWORD PTR _vtx$[ebp], 0
	jne	SHORT $LN1@nk_draw_li
	xor	eax, eax
	jmp	SHORT $LN3@nk_draw_li
$LN1@nk_draw_li:

; 7989 :     list->vertex_count += (unsigned int)count;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	add	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [edx+176], ecx

; 7990 :     return vtx;

	mov	eax, DWORD PTR _vtx$[ebp]
$LN3@nk_draw_li:

; 7991 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_alloc_vertices ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_push_image
_TEXT	SEGMENT
_prev$1 = -8						; size = 4
_list$ = 8						; size = 4
_texture$ = 12						; size = 4
_nk_draw_list_push_image PROC				; COMDAT

; 7958 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7959 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN9@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_push_image@@9@9@ddf8d5d8
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_draw_li:

; 7960 :     if (!list) return;

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN6@nk_draw_li
	jmp	$LN7@nk_draw_li
$LN6@nk_draw_li:

; 7961 :     if (!list->cmd_count) {

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+180], 0
	jne	SHORT $LN5@nk_draw_li

; 7962 :         nk_draw_list_push_command(list, nk_null_rect, texture);

	mov	eax, DWORD PTR _texture$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _nk_null_rect
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _nk_null_rect+4
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _nk_null_rect+8
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _nk_null_rect+12
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_push_command
	add	esp, 24					; 00000018H

; 7963 :     } else {

	jmp	SHORT $LN7@nk_draw_li
$LN5@nk_draw_li:

; 7964 :         struct nk_draw_command *prev = nk_draw_list_command_last(list);

	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_command_last
	add	esp, 4
	mov	DWORD PTR _prev$1[ebp], eax

; 7965 :         if (prev->elem_count == 0)

	mov	eax, DWORD PTR _prev$1[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@nk_draw_li

; 7966 :             prev->texture = texture;

	mov	eax, DWORD PTR _prev$1[ebp]
	mov	ecx, DWORD PTR _texture$[ebp]
	mov	DWORD PTR [eax+20], ecx
	jmp	SHORT $LN7@nk_draw_li
$LN3@nk_draw_li:

; 7967 :         else if (prev->texture.id != texture.id)

	mov	eax, DWORD PTR _prev$1[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _texture$[ebp]
	je	SHORT $LN7@nk_draw_li

; 7968 :             nk_draw_list_push_command(list, prev->clip_rect, texture);

	mov	eax, DWORD PTR _texture$[ebp]
	push	eax
	mov	ecx, DWORD PTR _prev$1[ebp]
	add	ecx, 4
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_nk_draw_list_push_command
	add	esp, 24					; 00000018H
$LN7@nk_draw_li:

; 7969 :     }
; 7970 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_push_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_add_clip
_TEXT	SEGMENT
_prev$1 = -8						; size = 4
_list$ = 8						; size = 4
_rect$ = 12						; size = 16
_nk_draw_list_add_clip PROC				; COMDAT

; 7943 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7944 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN7@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_add_clip@@9@9@ddf8d5d8
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_draw_li:

; 7945 :     if (!list) return;

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN4@nk_draw_li
	jmp	$LN5@nk_draw_li
$LN4@nk_draw_li:

; 7946 :     if (!list->cmd_count) {

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+180], 0
	jne	SHORT $LN3@nk_draw_li

; 7947 :         nk_draw_list_push_command(list, rect, list->config.null.texture);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _rect$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_nk_draw_list_push_command
	add	esp, 24					; 00000018H

; 7948 :     } else {

	jmp	SHORT $LN5@nk_draw_li
$LN3@nk_draw_li:

; 7949 :         struct nk_draw_command *prev = nk_draw_list_command_last(list);

	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_command_last
	add	esp, 4
	mov	DWORD PTR _prev$1[ebp], eax

; 7950 :         if (prev->elem_count == 0)

	mov	eax, DWORD PTR _prev$1[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@nk_draw_li

; 7951 :             prev->clip_rect = rect;

	mov	eax, DWORD PTR _prev$1[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _rect$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR [eax+12], edx
$LN1@nk_draw_li:

; 7952 :         nk_draw_list_push_command(list, rect, prev->texture);

	mov	eax, DWORD PTR _prev$1[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _rect$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_nk_draw_list_push_command
	add	esp, 24					; 00000018H
$LN5@nk_draw_li:

; 7953 :     }
; 7954 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_add_clip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_command_last
_TEXT	SEGMENT
_cmd$ = -32						; size = 4
_size$ = -20						; size = 4
_memory$ = -8						; size = 4
_list$ = 8						; size = 4
_nk_draw_list_command_last PROC				; COMDAT

; 7929 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7930 :     void *memory;
; 7931 :     nk_size size;
; 7932 :     struct nk_draw_command *cmd;
; 7933 :     NK_ASSERT(list->cmd_count);

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+180], 0
	jne	SHORT $LN3@nk_draw_li
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_draw_list_command_last@@9@9@ddf8d5d8
	add	ecx, 4
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CA@CEAIAHJE@?$AAl?$AAi?$AAs?$AAt?$AA?9?$AA?$DO?$AAc?$AAm?$AAd?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@nk_draw_li:

; 7934 : 
; 7935 :     memory = nk_buffer_memory(list->buffer);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	call	_nk_buffer_memory
	add	esp, 4
	mov	DWORD PTR _memory$[ebp], eax

; 7936 :     size = nk_buffer_total(list->buffer);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	call	_nk_buffer_total
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 7937 :     cmd = nk_ptr_add(struct nk_draw_command, memory, size - list->cmd_offset);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR [eax+184]
	add	ecx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR _cmd$[ebp], ecx

; 7938 :     return (cmd - (list->cmd_count-1));

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	sub	ecx, 1
	imul	edx, ecx, 24
	mov	eax, DWORD PTR _cmd$[ebp]
	sub	eax, edx

; 7939 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_command_last ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_push_command
_TEXT	SEGMENT
_total$1 = -32						; size = 4
_memory$2 = -20						; size = 4
_cmd$ = -8						; size = 4
_list$ = 8						; size = 4
_clip$ = 12						; size = 16
_texture$ = 28						; size = 4
_nk_draw_list_push_command PROC				; COMDAT

; 7898 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7899 :     NK_STORAGE const nk_size cmd_align = NK_ALIGNOF(struct nk_draw_command);
; 7900 :     NK_STORAGE const nk_size cmd_size = sizeof(struct nk_draw_command);
; 7901 :     struct nk_draw_command *cmd;
; 7902 : 
; 7903 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN5@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_push_command@@9@9@ddf8d5d8
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_draw_li:

; 7904 :     cmd = (struct nk_draw_command*)
; 7905 :         nk_buffer_alloc(list->buffer, NK_BUFFER_BACK, cmd_size, cmd_align);

	mov	eax, DWORD PTR ?cmd_align@?1??nk_draw_list_push_command@@9@9
	push	eax
	mov	ecx, DWORD PTR ?cmd_size@?1??nk_draw_list_push_command@@9@9
	push	ecx
	push	1
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx+160]
	push	eax
	call	_nk_buffer_alloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cmd$[ebp], eax

; 7906 : 
; 7907 :     if (!cmd) return 0;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN2@nk_draw_li
	xor	eax, eax
	jmp	$LN3@nk_draw_li
$LN2@nk_draw_li:

; 7908 :     if (!list->cmd_count) {

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+180], 0
	jne	SHORT $LN1@nk_draw_li

; 7909 :         nk_byte *memory = (nk_byte*)nk_buffer_memory(list->buffer);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	call	_nk_buffer_memory
	add	esp, 4
	mov	DWORD PTR _memory$2[ebp], eax

; 7910 :         nk_size total = nk_buffer_total(list->buffer);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	call	_nk_buffer_total
	add	esp, 4
	mov	DWORD PTR _total$1[ebp], eax

; 7911 :         memory = nk_ptr_add(nk_byte, memory, total);

	mov	eax, DWORD PTR _memory$2[ebp]
	add	eax, DWORD PTR _total$1[ebp]
	mov	DWORD PTR _memory$2[ebp], eax

; 7912 :         list->cmd_offset = (nk_size)(memory - (nk_byte*)cmd);

	mov	eax, DWORD PTR _memory$2[ebp]
	sub	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [ecx+184], eax
$LN1@nk_draw_li:

; 7913 :     }
; 7914 : 
; 7915 :     cmd->elem_count = 0;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR [eax], 0

; 7916 :     cmd->clip_rect = clip;

	mov	eax, DWORD PTR _cmd$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _clip$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _clip$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _clip$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _clip$[ebp+12]
	mov	DWORD PTR [eax+12], edx

; 7917 :     cmd->texture = texture;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _texture$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 7918 : #ifdef NK_INCLUDE_COMMAND_USERDATA
; 7919 :     cmd->userdata = list->userdata;
; 7920 : #endif
; 7921 : 
; 7922 :     list->cmd_count++;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	add	ecx, 1
	mov	edx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [edx+180], ecx

; 7923 :     list->clip_rect = clip;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR _clip$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _clip$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _clip$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _clip$[ebp+12]
	mov	DWORD PTR [eax+12], edx

; 7924 :     return cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
$LN3@nk_draw_li:

; 7925 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_push_command ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_path_last
_TEXT	SEGMENT
_point$ = -20						; size = 4
_memory$ = -8						; size = 4
_list$ = 8						; size = 4
_nk_draw_list_path_last PROC				; COMDAT

; 7885 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7886 :     void *memory;
; 7887 :     struct nk_vec2 *point;
; 7888 :     NK_ASSERT(list->path_count);

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+188], 0
	jne	SHORT $LN3@nk_draw_li
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_draw_list_path_last@@9@9@ddf8d5d8
	add	ecx, 3
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CC@DJNGHHKD@?$AAl?$AAi?$AAs?$AAt?$AA?9?$AA?$DO?$AAp?$AAa?$AAt?$AAh?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@nk_draw_li:

; 7889 :     memory = nk_buffer_memory(list->buffer);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	call	_nk_buffer_memory
	add	esp, 4
	mov	DWORD PTR _memory$[ebp], eax

; 7890 :     point = nk_ptr_add(struct nk_vec2, memory, list->path_offset);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR _memory$[ebp]
	add	ecx, DWORD PTR [eax+192]
	mov	DWORD PTR _point$[ebp], ecx

; 7891 :     point += (list->path_count-1);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	mov	edx, DWORD PTR _point$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8-8]
	mov	DWORD PTR _point$[ebp], eax

; 7892 :     return *point;

	mov	ecx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]

; 7893 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_path_last ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_alloc_path
_TEXT	SEGMENT
_memory$1 = -20						; size = 4
_points$ = -8						; size = 4
_list$ = 8						; size = 4
_count$ = 12						; size = 4
_nk_draw_list_alloc_path PROC				; COMDAT

; 7866 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7867 :     struct nk_vec2 *points;
; 7868 :     NK_STORAGE const nk_size point_align = NK_ALIGNOF(struct nk_vec2);
; 7869 :     NK_STORAGE const nk_size point_size = sizeof(struct nk_vec2);
; 7870 :     points = (struct nk_vec2*)
; 7871 :         nk_buffer_alloc(list->buffer, NK_BUFFER_FRONT,
; 7872 :                         point_size * (nk_size)count, point_align);

	mov	eax, DWORD PTR ?point_align@?1??nk_draw_list_alloc_path@@9@9
	push	eax
	mov	ecx, DWORD PTR ?point_size@?1??nk_draw_list_alloc_path@@9@9
	imul	ecx, DWORD PTR _count$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx+160]
	push	eax
	call	_nk_buffer_alloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _points$[ebp], eax

; 7873 : 
; 7874 :     if (!points) return 0;

	cmp	DWORD PTR _points$[ebp], 0
	jne	SHORT $LN2@nk_draw_li
	xor	eax, eax
	jmp	SHORT $LN3@nk_draw_li
$LN2@nk_draw_li:

; 7875 :     if (!list->path_offset) {

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+192], 0
	jne	SHORT $LN1@nk_draw_li

; 7876 :         void *memory = nk_buffer_memory(list->buffer);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	call	_nk_buffer_memory
	add	esp, 4
	mov	DWORD PTR _memory$1[ebp], eax

; 7877 :         list->path_offset = (unsigned int)((nk_byte*)points - (nk_byte*)memory);

	mov	eax, DWORD PTR _points$[ebp]
	sub	eax, DWORD PTR _memory$1[ebp]
	mov	ecx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [ecx+192], eax
$LN1@nk_draw_li:

; 7878 :     }
; 7879 :     list->path_count += (unsigned int)count;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	add	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [edx+188], ecx

; 7880 :     return points;

	mov	eax, DWORD PTR _points$[ebp]
$LN3@nk_draw_li:

; 7881 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_alloc_path ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_command_buffer_push
_TEXT	SEGMENT
_memory$ = -44						; size = 4
_unaligned$ = -32					; size = 4
_alignment$ = -20					; size = 4
_cmd$ = -8						; size = 4
_b$ = 8							; size = 4
_t$ = 12						; size = 4
_size$ = 16						; size = 4
_nk_command_buffer_push PROC				; COMDAT

; 7285 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7286 :     NK_STORAGE const nk_size align = NK_ALIGNOF(struct nk_command);
; 7287 :     struct nk_command *cmd;
; 7288 :     nk_size alignment;
; 7289 :     void *unaligned;
; 7290 :     void *memory;
; 7291 : 
; 7292 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN5@nk_command
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_command_buffer_push@@9@9@ddf8d5d8
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_command:

; 7293 :     NK_ASSERT(b->base);

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN6@nk_command
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_command_buffer_push@@9@9@ddf8d5d8
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BA@GCDOPNOB@?$AAb?$AA?9?$AA?$DO?$AAb?$AAa?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_command:

; 7294 :     if (!b) return 0;

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN2@nk_command
	xor	eax, eax
	jmp	$LN3@nk_command
$LN2@nk_command:

; 7295 :     cmd = (struct nk_command*)nk_buffer_alloc(b->base,NK_BUFFER_FRONT,size,align);

	mov	eax, DWORD PTR ?align@?1??nk_command_buffer_push@@9@9
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_nk_buffer_alloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cmd$[ebp], eax

; 7296 :     if (!cmd) return 0;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN1@nk_command
	xor	eax, eax
	jmp	SHORT $LN3@nk_command
$LN1@nk_command:

; 7297 : 
; 7298 :     /* make sure the offset to the next command is aligned */
; 7299 :     b->last = (nk_size)((nk_byte*)cmd - (nk_byte*)b->base->memory.ptr);

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _cmd$[ebp]
	sub	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+36], edx

; 7300 :     unaligned = (nk_byte*)cmd + size;

	mov	eax, DWORD PTR _cmd$[ebp]
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _unaligned$[ebp], eax

; 7301 :     memory = NK_ALIGN_PTR(unaligned, align);

	mov	eax, DWORD PTR ?align@?1??nk_command_buffer_push@@9@9
	mov	ecx, DWORD PTR _unaligned$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	eax, DWORD PTR ?align@?1??nk_command_buffer_push@@9@9
	sub	eax, 1
	not	eax
	and	edx, eax
	mov	DWORD PTR _memory$[ebp], edx

; 7302 :     alignment = (nk_size)((nk_byte*)memory - (nk_byte*)unaligned);

	mov	eax, DWORD PTR _memory$[ebp]
	sub	eax, DWORD PTR _unaligned$[ebp]
	mov	DWORD PTR _alignment$[ebp], eax

; 7303 : #ifdef NK_ZERO_COMMAND_MEMORY
; 7304 :     NK_MEMSET(cmd, 0, size + alignment);
; 7305 : #endif
; 7306 : 
; 7307 :     cmd->type = t;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax], ecx

; 7308 :     cmd->next = b->base->allocated + alignment;

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, DWORD PTR _alignment$[ebp]
	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR [eax+4], edx

; 7309 : #ifdef NK_INCLUDE_COMMAND_USERDATA
; 7310 :     cmd->userdata = b->userdata;
; 7311 : #endif
; 7312 :     b->end = cmd->next;

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+32], edx

; 7313 :     return cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
$LN3@nk_command:

; 7314 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_command_buffer_push ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_command_buffer_reset
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_nk_command_buffer_reset PROC				; COMDAT

; 7270 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7271 :     NK_ASSERT(buffer);

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN4@nk_command
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_command_buffer_reset@@9@9@ddf8d5d8
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@KMGMBAKN@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_command:

; 7272 :     if (!buffer) return;

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN1@nk_command
	jmp	SHORT $LN2@nk_command
$LN1@nk_command:

; 7273 :     buffer->begin = 0;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [eax+28], 0

; 7274 :     buffer->end = 0;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [eax+32], 0

; 7275 :     buffer->last = 0;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [eax+36], 0

; 7276 :     buffer->clip = nk_null_rect;

	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _nk_null_rect
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _nk_null_rect+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _nk_null_rect+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _nk_null_rect+12
	mov	DWORD PTR [eax+12], edx
$LN2@nk_command:

; 7277 : #ifdef NK_INCLUDE_COMMAND_USERDATA
; 7278 :     buffer->userdata.ptr = 0;
; 7279 : #endif
; 7280 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_command_buffer_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_command_buffer_init
_TEXT	SEGMENT
_cmdbuf$ = 8						; size = 4
_buffer$ = 12						; size = 4
_clip$ = 16						; size = 4
_nk_command_buffer_init PROC				; COMDAT

; 7257 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7258 :     NK_ASSERT(cmdbuf);

	cmp	DWORD PTR _cmdbuf$[ebp], 0
	jne	SHORT $LN5@nk_command
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_command_buffer_init@@9@9@ddf8d5d8
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@GHGFHGEN@?$AAc?$AAm?$AAd?$AAb?$AAu?$AAf?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_command:

; 7259 :     NK_ASSERT(buffer);

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN6@nk_command
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_command_buffer_init@@9@9@ddf8d5d8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@KMGMBAKN@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_command:

; 7260 :     if (!cmdbuf || !buffer) return;

	cmp	DWORD PTR _cmdbuf$[ebp], 0
	je	SHORT $LN1@nk_command
	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN2@nk_command
$LN1@nk_command:
	jmp	SHORT $LN3@nk_command
$LN2@nk_command:

; 7261 :     cmdbuf->base = buffer;

	mov	eax, DWORD PTR _cmdbuf$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [eax], ecx

; 7262 :     cmdbuf->use_clipping = clip;

	mov	eax, DWORD PTR _cmdbuf$[ebp]
	mov	ecx, DWORD PTR _clip$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 7263 :     cmdbuf->begin = buffer->allocated;

	mov	eax, DWORD PTR _cmdbuf$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+28], edx

; 7264 :     cmdbuf->end = buffer->allocated;

	mov	eax, DWORD PTR _cmdbuf$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+32], edx

; 7265 :     cmdbuf->last = buffer->allocated;

	mov	eax, DWORD PTR _cmdbuf$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+36], edx
$LN3@nk_command:

; 7266 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_command_buffer_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_buffer_alloc
_TEXT	SEGMENT
tv272 = -264						; size = 8
tv143 = -260						; size = 4
tv268 = -256						; size = 4
tv177 = -256						; size = 4
tv139 = -256						; size = 4
tv132 = -256						; size = 4
_capacity$1 = -56					; size = 4
_memory$ = -44						; size = 4
_unaligned$ = -32					; size = 4
_alignment$ = -20					; size = 4
_full$ = -8						; size = 4
_b$ = 8							; size = 4
_type$ = 12						; size = 4
_size$ = 16						; size = 4
_align$ = 20						; size = 4
_nk_buffer_alloc PROC					; COMDAT

; 6616 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6617 :     int full;
; 6618 :     nk_size alignment;
; 6619 :     void *unaligned;
; 6620 :     void *memory;
; 6621 : 
; 6622 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN18@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_alloc@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@nk_buffer_:

; 6623 :     NK_ASSERT(size);

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN19@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_alloc@@9@9@ddf8d5d8
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19GIOODLBE@?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@nk_buffer_:

; 6624 :     if (!b || !size) return 0;

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN14@nk_buffer_
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN15@nk_buffer_
$LN14@nk_buffer_:
	xor	eax, eax
	jmp	$LN16@nk_buffer_
$LN15@nk_buffer_:

; 6625 :     b->needed += size;

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+48], ecx

; 6626 : 
; 6627 :     /* calculate total size with needed alignment + size */
; 6628 :     if (type == NK_BUFFER_FRONT)

	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN13@nk_buffer_

; 6629 :         unaligned = nk_ptr_add(void, b->memory.ptr, b->allocated);

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR [edx+44]
	mov	DWORD PTR _unaligned$[ebp], ecx
	jmp	SHORT $LN12@nk_buffer_
$LN13@nk_buffer_:

; 6630 :     else unaligned = nk_ptr_add(void, b->memory.ptr, b->size - size);

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	sub	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR [edx+32]
	mov	DWORD PTR _unaligned$[ebp], ecx
$LN12@nk_buffer_:

; 6631 :     memory = nk_buffer_align(unaligned, align, &alignment, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	lea	ecx, DWORD PTR _alignment$[ebp]
	push	ecx
	mov	edx, DWORD PTR _align$[ebp]
	push	edx
	mov	eax, DWORD PTR _unaligned$[ebp]
	push	eax
	call	_nk_buffer_align
	add	esp, 16					; 00000010H
	mov	DWORD PTR _memory$[ebp], eax

; 6632 : 
; 6633 :     /* check if buffer has enough memory*/
; 6634 :     if (type == NK_BUFFER_FRONT)

	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN11@nk_buffer_

; 6635 :         full = ((b->allocated + size + alignment) > b->size);

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, DWORD PTR _size$[ebp]
	add	ecx, DWORD PTR _alignment$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	cmp	ecx, DWORD PTR [edx+56]
	jbe	SHORT $LN20@nk_buffer_
	mov	DWORD PTR tv132[ebp], 1
	jmp	SHORT $LN21@nk_buffer_
$LN20@nk_buffer_:
	mov	DWORD PTR tv132[ebp], 0
$LN21@nk_buffer_:
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR _full$[ebp], eax
	jmp	SHORT $LN10@nk_buffer_
$LN11@nk_buffer_:

; 6636 :     else full = ((b->size - NK_MIN(b->size,(size + alignment))) <= b->allocated);

	mov	eax, DWORD PTR _size$[ebp]
	add	eax, DWORD PTR _alignment$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [ecx+56], eax
	jae	SHORT $LN22@nk_buffer_
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR tv139[ebp], eax
	jmp	SHORT $LN23@nk_buffer_
$LN22@nk_buffer_:
	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, DWORD PTR _alignment$[ebp]
	mov	DWORD PTR tv139[ebp], ecx
$LN23@nk_buffer_:
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+56]
	sub	eax, DWORD PTR tv139[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	cmp	eax, DWORD PTR [ecx+44]
	ja	SHORT $LN24@nk_buffer_
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN25@nk_buffer_
$LN24@nk_buffer_:
	mov	DWORD PTR tv143[ebp], 0
$LN25@nk_buffer_:
	mov	edx, DWORD PTR tv143[ebp]
	mov	DWORD PTR _full$[ebp], edx
$LN10@nk_buffer_:

; 6637 : 
; 6638 :     if (full) {

	cmp	DWORD PTR _full$[ebp], 0
	je	$LN9@nk_buffer_

; 6639 :         nk_size capacity;
; 6640 :         if (b->type != NK_BUFFER_DYNAMIC)

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+28], 1
	je	SHORT $LN8@nk_buffer_

; 6641 :             return 0;

	xor	eax, eax
	jmp	$LN16@nk_buffer_
$LN8@nk_buffer_:

; 6642 :         NK_ASSERT(b->pool.alloc && b->pool.free);

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN26@nk_buffer_
	mov	ecx, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN27@nk_buffer_
$LN26@nk_buffer_:
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_buffer_alloc@@9@9@ddf8d5d8
	add	edx, 26					; 0000001aH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1DM@LCGIFLOD@?$AAb?$AA?9?$AA?$DO?$AAp?$AAo?$AAo?$AAl?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAb?$AA?9?$AA?$DO?$AAp?$AAo?$AAo?$AAl?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN27@nk_buffer_:

; 6643 :         if (b->type != NK_BUFFER_DYNAMIC || !b->pool.alloc || !b->pool.free)

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+28], 1
	jne	SHORT $LN6@nk_buffer_
	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN6@nk_buffer_
	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN7@nk_buffer_
$LN6@nk_buffer_:

; 6644 :             return 0;

	xor	eax, eax
	jmp	$LN16@nk_buffer_
$LN7@nk_buffer_:

; 6645 : 
; 6646 :         /* buffer is full so allocate bigger buffer if dynamic */
; 6647 :         capacity = (nk_size)((float)b->memory.size * b->grow_factor);

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR tv268[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv268[ebp]
	mov	edx, DWORD PTR tv268[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv272[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv272[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mulss	xmm0, DWORD PTR [eax+40]
	call	__ftoui3
	mov	DWORD PTR _capacity$1[ebp], eax

; 6648 :         capacity = NK_MAX(capacity, nk_round_up_pow2((nk_uint)(b->allocated + size)));

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	_nk_round_up_pow2
	add	esp, 4
	cmp	DWORD PTR _capacity$1[ebp], eax
	jae	SHORT $LN28@nk_buffer_
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+44]
	add	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_nk_round_up_pow2
	add	esp, 4
	mov	DWORD PTR tv177[ebp], eax
	jmp	SHORT $LN29@nk_buffer_
$LN28@nk_buffer_:
	mov	ecx, DWORD PTR _capacity$1[ebp]
	mov	DWORD PTR tv177[ebp], ecx
$LN29@nk_buffer_:
	mov	edx, DWORD PTR tv177[ebp]
	mov	DWORD PTR _capacity$1[ebp], edx

; 6649 :         b->memory.ptr = nk_buffer_realloc(b, capacity, &b->memory.size);

	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _capacity$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	call	_nk_buffer_realloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 6650 :         if (!b->memory.ptr) return 0;

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN5@nk_buffer_
	xor	eax, eax
	jmp	$LN16@nk_buffer_
$LN5@nk_buffer_:

; 6651 : 
; 6652 :         /* align newly allocated pointer */
; 6653 :         if (type == NK_BUFFER_FRONT)

	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN4@nk_buffer_

; 6654 :             unaligned = nk_ptr_add(void, b->memory.ptr, b->allocated);

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR [edx+44]
	mov	DWORD PTR _unaligned$[ebp], ecx
	jmp	SHORT $LN3@nk_buffer_
$LN4@nk_buffer_:

; 6655 :         else unaligned = nk_ptr_add(void, b->memory.ptr, b->size - size);

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	sub	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR [edx+32]
	mov	DWORD PTR _unaligned$[ebp], ecx
$LN3@nk_buffer_:

; 6656 :         memory = nk_buffer_align(unaligned, align, &alignment, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	lea	ecx, DWORD PTR _alignment$[ebp]
	push	ecx
	mov	edx, DWORD PTR _align$[ebp]
	push	edx
	mov	eax, DWORD PTR _unaligned$[ebp]
	push	eax
	call	_nk_buffer_align
	add	esp, 16					; 00000010H
	mov	DWORD PTR _memory$[ebp], eax
$LN9@nk_buffer_:

; 6657 :     }
; 6658 :     if (type == NK_BUFFER_FRONT)

	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN2@nk_buffer_

; 6659 :         b->allocated += size + alignment;

	mov	eax, DWORD PTR _size$[ebp]
	add	eax, DWORD PTR _alignment$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR [ecx+44]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+44], eax
	jmp	SHORT $LN1@nk_buffer_
$LN2@nk_buffer_:

; 6660 :     else b->size -= (size + alignment);

	mov	eax, DWORD PTR _size$[ebp]
	add	eax, DWORD PTR _alignment$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	sub	edx, eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+56], edx
$LN1@nk_buffer_:

; 6661 :     b->needed += alignment;

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, DWORD PTR _alignment$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+48], ecx

; 6662 :     b->calls++;

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	add	ecx, 1
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+52], ecx

; 6663 :     return memory;

	mov	eax, DWORD PTR _memory$[ebp]
$LN16@nk_buffer_:

; 6664 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@nk_buffer_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN32@nk_buffer_:
	DD	1
	DD	$LN31@nk_buffer_
$LN31@nk_buffer_:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN30@nk_buffer_
$LN30@nk_buffer_:
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_nk_buffer_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_buffer_realloc
_TEXT	SEGMENT
_back_size$1 = -56					; size = 4
_src$2 = -44						; size = 4
_dst$3 = -32						; size = 4
_buffer_size$ = -20					; size = 4
_temp$ = -8						; size = 4
_b$ = 8							; size = 4
_capacity$ = 12						; size = 4
_size$ = 16						; size = 4
_nk_buffer_realloc PROC					; COMDAT

; 6576 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6577 :     void *temp;
; 6578 :     nk_size buffer_size;
; 6579 : 
; 6580 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN9@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_realloc@@9@9@ddf8d5d8
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_buffer_:

; 6581 :     NK_ASSERT(size);

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN10@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_realloc@@9@9@ddf8d5d8
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19GIOODLBE@?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_buffer_:

; 6582 :     if (!b || !size || !b->pool.alloc || !b->pool.free)

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN5@nk_buffer_
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN5@nk_buffer_
	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN5@nk_buffer_
	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN6@nk_buffer_
$LN5@nk_buffer_:

; 6583 :         return 0;

	xor	eax, eax
	jmp	$LN7@nk_buffer_
$LN6@nk_buffer_:

; 6584 : 
; 6585 :     buffer_size = b->memory.size;

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _buffer_size$[ebp], ecx

; 6586 :     temp = b->pool.alloc(b->pool.userdata, b->memory.ptr, capacity);

	mov	esi, esp
	mov	eax, DWORD PTR _capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _temp$[ebp], eax

; 6587 :     NK_ASSERT(temp);

	cmp	DWORD PTR _temp$[ebp], 0
	jne	SHORT $LN11@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_realloc@@9@9@ddf8d5d8
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19KEIJKAKM@?$AAt?$AAe?$AAm?$AAp?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_buffer_:

; 6588 :     if (!temp) return 0;

	cmp	DWORD PTR _temp$[ebp], 0
	jne	SHORT $LN4@nk_buffer_
	xor	eax, eax
	jmp	$LN7@nk_buffer_
$LN4@nk_buffer_:

; 6589 : 
; 6590 :     *size = capacity;

	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _capacity$[ebp]
	mov	DWORD PTR [eax], ecx

; 6591 :     if (temp != b->memory.ptr) {

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	je	SHORT $LN3@nk_buffer_

; 6592 :         NK_MEMCPY(temp, b->memory.ptr, buffer_size);

	mov	eax, DWORD PTR _buffer_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _temp$[ebp]
	push	eax
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 6593 :         b->pool.free(b->pool.userdata, b->memory.ptr);

	mov	esi, esp
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@nk_buffer_:

; 6594 :     }
; 6595 : 
; 6596 :     if (b->size == buffer_size) {

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	cmp	ecx, DWORD PTR _buffer_size$[ebp]
	jne	SHORT $LN2@nk_buffer_

; 6597 :         /* no back buffer so just set correct size */
; 6598 :         b->size = capacity;

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _capacity$[ebp]
	mov	DWORD PTR [eax+56], ecx

; 6599 :         return temp;

	mov	eax, DWORD PTR _temp$[ebp]
	jmp	SHORT $LN7@nk_buffer_

; 6600 :     } else {

	jmp	SHORT $LN1@nk_buffer_
$LN2@nk_buffer_:

; 6601 :         /* copy back buffer to the end of the new buffer */
; 6602 :         void *dst, *src;
; 6603 :         nk_size back_size;
; 6604 :         back_size = buffer_size - b->size;

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _buffer_size$[ebp]
	sub	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _back_size$1[ebp], ecx

; 6605 :         dst = nk_ptr_add(void, temp, capacity - back_size);

	mov	eax, DWORD PTR _capacity$[ebp]
	sub	eax, DWORD PTR _back_size$1[ebp]
	add	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _dst$3[ebp], eax

; 6606 :         src = nk_ptr_add(void, temp, b->size);

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	add	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _src$2[ebp], ecx

; 6607 :         NK_MEMCPY(dst, src, back_size);

	mov	eax, DWORD PTR _back_size$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst$3[ebp]
	push	edx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 6608 :         b->size = capacity - back_size;

	mov	eax, DWORD PTR _capacity$[ebp]
	sub	eax, DWORD PTR _back_size$1[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+56], eax
$LN1@nk_buffer_:

; 6609 :     }
; 6610 :     return temp;

	mov	eax, DWORD PTR _temp$[ebp]
$LN7@nk_buffer_:

; 6611 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_buffer_realloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_buffer_align
_TEXT	SEGMENT
tv64 = -208						; size = 4
_memory$ = -8						; size = 4
_unaligned$ = 8						; size = 4
_align$ = 12						; size = 4
_alignment$ = 16					; size = 4
_type$ = 20						; size = 4
_nk_buffer_align PROC					; COMDAT

; 6547 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6548 :     void *memory = 0;

	mov	DWORD PTR _memory$[ebp], 0

; 6549 :     switch (type) {

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN3@nk_buffer_

; 6550 :     default:
; 6551 :     case NK_BUFFER_MAX:
; 6552 :     case NK_BUFFER_FRONT:
; 6553 :         if (align) {

	cmp	DWORD PTR _align$[ebp], 0
	je	SHORT $LN5@nk_buffer_

; 6554 :             memory = NK_ALIGN_PTR(unaligned, align);

	mov	eax, DWORD PTR _align$[ebp]
	mov	ecx, DWORD PTR _unaligned$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	eax, DWORD PTR _align$[ebp]
	sub	eax, 1
	not	eax
	and	edx, eax
	mov	DWORD PTR _memory$[ebp], edx

; 6555 :             *alignment = (nk_size)((nk_byte*)memory - (nk_byte*)unaligned);

	mov	eax, DWORD PTR _memory$[ebp]
	sub	eax, DWORD PTR _unaligned$[ebp]
	mov	ecx, DWORD PTR _alignment$[ebp]
	mov	DWORD PTR [ecx], eax

; 6556 :         } else {

	jmp	SHORT $LN4@nk_buffer_
$LN5@nk_buffer_:

; 6557 :             memory = unaligned;

	mov	eax, DWORD PTR _unaligned$[ebp]
	mov	DWORD PTR _memory$[ebp], eax

; 6558 :             *alignment = 0;

	mov	eax, DWORD PTR _alignment$[ebp]
	mov	DWORD PTR [eax], 0
$LN4@nk_buffer_:

; 6559 :         }
; 6560 :         break;

	jmp	SHORT $LN7@nk_buffer_
$LN3@nk_buffer_:

; 6561 :     case NK_BUFFER_BACK:
; 6562 :         if (align) {

	cmp	DWORD PTR _align$[ebp], 0
	je	SHORT $LN2@nk_buffer_

; 6563 :             memory = NK_ALIGN_PTR_BACK(unaligned, align);

	mov	eax, DWORD PTR _unaligned$[ebp]
	mov	ecx, DWORD PTR _align$[ebp]
	sub	ecx, 1
	not	ecx
	and	eax, ecx
	mov	DWORD PTR _memory$[ebp], eax

; 6564 :             *alignment = (nk_size)((nk_byte*)unaligned - (nk_byte*)memory);

	mov	eax, DWORD PTR _unaligned$[ebp]
	sub	eax, DWORD PTR _memory$[ebp]
	mov	ecx, DWORD PTR _alignment$[ebp]
	mov	DWORD PTR [ecx], eax

; 6565 :         } else {

	jmp	SHORT $LN7@nk_buffer_
$LN2@nk_buffer_:

; 6566 :             memory = unaligned;

	mov	eax, DWORD PTR _unaligned$[ebp]
	mov	DWORD PTR _memory$[ebp], eax

; 6567 :             *alignment = 0;

	mov	eax, DWORD PTR _alignment$[ebp]
	mov	DWORD PTR [eax], 0
$LN7@nk_buffer_:

; 6568 :         }
; 6569 :         break;
; 6570 :     }
; 6571 :     return memory;

	mov	eax, DWORD PTR _memory$[ebp]

; 6572 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_buffer_align ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_mfree
_TEXT	SEGMENT
_unused$ = 8						; size = 4
_ptr$ = 12						; size = 4
_nk_mfree PROC						; COMDAT

; 6498 : {NK_UNUSED(unused); free(ptr);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	_free
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_mfree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_malloc
_TEXT	SEGMENT
_unused$ = 8						; size = 4
_old$ = 12						; size = 4
_size$ = 16						; size = 4
_nk_malloc PROC						; COMDAT

; 6496 : {NK_UNUSED(unused); NK_UNUSED(old); return malloc(size);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_malloc
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_malloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_utf_encode_byte
_TEXT	SEGMENT
_u$ = 8							; size = 4
_i$ = 12						; size = 4
_nk_utf_encode_byte PROC				; COMDAT

; 6407 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6408 :     return (char)((nk_utfbyte[i]) | ((nk_byte)u & ~nk_utfmask[i]));

	mov	eax, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _nk_utfbyte[eax]
	movzx	ecx, BYTE PTR _u$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _nk_utfmask[edx]
	not	edx
	and	ecx, edx
	or	eax, ecx

; 6409 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_utf_encode_byte ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_utf_decode_byte
_TEXT	SEGMENT
_c$ = 8							; size = 1
_i$ = 12						; size = 4
_nk_utf_decode_byte PROC				; COMDAT

; 6366 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6367 :     NK_ASSERT(i);

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN8@nk_utf_dec
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_utf_decode_byte@@9@9@ddf8d5d8
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13JIJFJIGK@?$AAi?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_utf_dec:

; 6368 :     if (!i) return 0;

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN5@nk_utf_dec
	xor	eax, eax
	jmp	SHORT $LN6@nk_utf_dec
$LN5@nk_utf_dec:

; 6369 :     for(*i = 0; *i < (int)NK_LEN(nk_utfmask); ++(*i)) {

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN4@nk_utf_dec
$LN3@nk_utf_dec:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx], ecx
$LN4@nk_utf_dec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [eax], 5
	jge	SHORT $LN2@nk_utf_dec

; 6370 :         if (((nk_byte)c & nk_utfmask[*i]) == nk_utfbyte[*i])

	movzx	eax, BYTE PTR _c$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, BYTE PTR _nk_utfmask[edx]
	and	eax, ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx]
	movzx	edx, BYTE PTR _nk_utfbyte[ecx]
	cmp	eax, edx
	jne	SHORT $LN1@nk_utf_dec

; 6371 :             return (nk_byte)(c & ~nk_utfmask[*i]);

	movsx	eax, BYTE PTR _c$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, BYTE PTR _nk_utfmask[edx]
	not	ecx
	and	eax, ecx
	movzx	eax, al
	jmp	SHORT $LN6@nk_utf_dec
$LN1@nk_utf_dec:

; 6372 :     }

	jmp	SHORT $LN3@nk_utf_dec
$LN2@nk_utf_dec:

; 6373 :     return 0;

	xor	eax, eax
$LN6@nk_utf_dec:

; 6374 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_utf_decode_byte ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_utf_validate
_TEXT	SEGMENT
_u$ = 8							; size = 4
_i$ = 12						; size = 4
_nk_utf_validate PROC					; COMDAT

; 6354 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6355 :     NK_ASSERT(u);

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN9@nk_utf_val
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_utf_validate@@9@9@ddf8d5d8
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13ICFKHAEN@?$AAu?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_utf_val:

; 6356 :     if (!u) return 0;

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN6@nk_utf_val
	xor	eax, eax
	jmp	SHORT $LN7@nk_utf_val
$LN6@nk_utf_val:

; 6357 :     if (!NK_BETWEEN(*u, nk_utfmin[i], nk_utfmax[i]) ||
; 6358 :          NK_BETWEEN(*u, 0xD800, 0xDFFF))

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR _nk_utfmin[eax*4]
	cmp	edx, DWORD PTR [ecx]
	ja	SHORT $LN4@nk_utf_val
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR _nk_utfmax[ecx*4]
	jae	SHORT $LN4@nk_utf_val
	mov	eax, DWORD PTR _u$[ebp]
	cmp	DWORD PTR [eax], 55296			; 0000d800H
	jb	SHORT $LN5@nk_utf_val
	mov	eax, DWORD PTR _u$[ebp]
	cmp	DWORD PTR [eax], 57343			; 0000dfffH
	jae	SHORT $LN5@nk_utf_val
$LN4@nk_utf_val:

; 6359 :             *u = NK_UTF_INVALID;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR [eax], 65533			; 0000fffdH
$LN5@nk_utf_val:

; 6360 :     for (i = 1; *u > nk_utfmax[i]; ++i);

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN3@nk_utf_val
$LN2@nk_utf_val:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_utf_val:
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR _nk_utfmax[ecx*4]
	jbe	SHORT $LN1@nk_utf_val
	jmp	SHORT $LN2@nk_utf_val
$LN1@nk_utf_val:

; 6361 :     return i;

	mov	eax, DWORD PTR _i$[ebp]
$LN7@nk_utf_val:

; 6362 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_utf_validate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_text_calculate_text_bounds
_TEXT	SEGMENT
tv90 = -284						; size = 4
_text_len$ = -84					; size = 4
_unicode$ = -72						; size = 4
_glyph_len$ = -60					; size = 4
_glyph_width$ = -48					; size = 4
_line_width$ = -36					; size = 4
_text_size$ = -24					; size = 8
_line_height$ = -8					; size = 4
_font$ = 8						; size = 4
_begin$ = 12						; size = 4
_byte_len$ = 16						; size = 4
_row_height$ = 20					; size = 4
_remaining$ = 24					; size = 4
_out_offset$ = 28					; size = 4
_glyphs$ = 32						; size = 4
_op$ = 36						; size = 4
_nk_text_calculate_text_bounds PROC			; COMDAT

; 6285 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6286 :     float line_height = row_height;

	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR _line_height$[ebp], xmm0

; 6287 :     struct nk_vec2 text_size = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _text_size$[ebp], eax
	mov	DWORD PTR _text_size$[ebp+4], edx

; 6288 :     float line_width = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _line_width$[ebp], xmm0

; 6289 : 
; 6290 :     float glyph_width;
; 6291 :     int glyph_len = 0;

	mov	DWORD PTR _glyph_len$[ebp], 0

; 6292 :     nk_rune unicode = 0;

	mov	DWORD PTR _unicode$[ebp], 0

; 6293 :     int text_len = 0;

	mov	DWORD PTR _text_len$[ebp], 0

; 6294 :     if (!begin || byte_len <= 0 || !font)

	cmp	DWORD PTR _begin$[ebp], 0
	je	SHORT $LN12@nk_text_ca
	cmp	DWORD PTR _byte_len$[ebp], 0
	jle	SHORT $LN12@nk_text_ca
	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN13@nk_text_ca
$LN12@nk_text_ca:

; 6295 :         return nk_vec2(0,row_height);

	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	jmp	$LN14@nk_text_ca
$LN13@nk_text_ca:

; 6296 : 
; 6297 :     glyph_len = nk_utf_decode(begin, &unicode, byte_len);

	mov	eax, DWORD PTR _byte_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _begin$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax

; 6298 :     if (!glyph_len) return text_size;

	cmp	DWORD PTR _glyph_len$[ebp], 0
	jne	SHORT $LN11@nk_text_ca
	mov	eax, DWORD PTR _text_size$[ebp]
	mov	edx, DWORD PTR _text_size$[ebp+4]
	jmp	$LN14@nk_text_ca
$LN11@nk_text_ca:

; 6299 :     glyph_width = font->width(font->userdata, font->height, begin, glyph_len);

	mov	esi, esp
	mov	eax, DWORD PTR _glyph_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _begin$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _glyph_width$[ebp]

; 6300 : 
; 6301 :     *glyphs = 0;

	mov	eax, DWORD PTR _glyphs$[ebp]
	mov	DWORD PTR [eax], 0
$LN19@nk_text_ca:

; 6302 :     while ((text_len < byte_len) && glyph_len) {

	mov	eax, DWORD PTR _text_len$[ebp]
	cmp	eax, DWORD PTR _byte_len$[ebp]
	jge	$LN9@nk_text_ca
	cmp	DWORD PTR _glyph_len$[ebp], 0
	je	$LN9@nk_text_ca

; 6303 :         if (unicode == '\n') {

	cmp	DWORD PTR _unicode$[ebp], 10		; 0000000aH
	jne	$LN8@nk_text_ca

; 6304 :             text_size.x = NK_MAX(text_size.x, line_width);

	movss	xmm0, DWORD PTR _line_width$[ebp]
	comiss	xmm0, DWORD PTR _text_size$[ebp]
	jbe	SHORT $LN16@nk_text_ca
	movss	xmm0, DWORD PTR _line_width$[ebp]
	movss	DWORD PTR tv90[ebp], xmm0
	jmp	SHORT $LN17@nk_text_ca
$LN16@nk_text_ca:
	movss	xmm0, DWORD PTR _text_size$[ebp]
	movss	DWORD PTR tv90[ebp], xmm0
$LN17@nk_text_ca:
	movss	xmm0, DWORD PTR tv90[ebp]
	movss	DWORD PTR _text_size$[ebp], xmm0

; 6305 :             text_size.y += line_height;

	movss	xmm0, DWORD PTR _text_size$[ebp+4]
	addss	xmm0, DWORD PTR _line_height$[ebp]
	movss	DWORD PTR _text_size$[ebp+4], xmm0

; 6306 :             line_width = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _line_width$[ebp], xmm0

; 6307 :             *glyphs+=1;

	mov	eax, DWORD PTR _glyphs$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _glyphs$[ebp]
	mov	DWORD PTR [edx], ecx

; 6308 :             if (op == NK_STOP_ON_NEW_LINE)

	cmp	DWORD PTR _op$[ebp], 1
	jne	SHORT $LN7@nk_text_ca

; 6309 :                 break;

	jmp	$LN9@nk_text_ca
$LN7@nk_text_ca:

; 6310 : 
; 6311 :             text_len++;

	mov	eax, DWORD PTR _text_len$[ebp]
	add	eax, 1
	mov	DWORD PTR _text_len$[ebp], eax

; 6312 :             glyph_len = nk_utf_decode(begin + text_len, &unicode, byte_len-text_len);

	mov	eax, DWORD PTR _byte_len$[ebp]
	sub	eax, DWORD PTR _text_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _begin$[ebp]
	add	edx, DWORD PTR _text_len$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax

; 6313 :             continue;

	jmp	$LN19@nk_text_ca
$LN8@nk_text_ca:

; 6314 :         }
; 6315 : 
; 6316 :         if (unicode == '\r') {

	cmp	DWORD PTR _unicode$[ebp], 13		; 0000000dH
	jne	SHORT $LN6@nk_text_ca

; 6317 :             text_len++;

	mov	eax, DWORD PTR _text_len$[ebp]
	add	eax, 1
	mov	DWORD PTR _text_len$[ebp], eax

; 6318 :             *glyphs+=1;

	mov	eax, DWORD PTR _glyphs$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _glyphs$[ebp]
	mov	DWORD PTR [edx], ecx

; 6319 :             glyph_len = nk_utf_decode(begin + text_len, &unicode, byte_len-text_len);

	mov	eax, DWORD PTR _byte_len$[ebp]
	sub	eax, DWORD PTR _text_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _begin$[ebp]
	add	edx, DWORD PTR _text_len$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax

; 6320 :             continue;

	jmp	$LN19@nk_text_ca
$LN6@nk_text_ca:

; 6321 :         }
; 6322 : 
; 6323 :         *glyphs = *glyphs + 1;

	mov	eax, DWORD PTR _glyphs$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _glyphs$[ebp]
	mov	DWORD PTR [edx], ecx

; 6324 :         text_len += glyph_len;

	mov	eax, DWORD PTR _text_len$[ebp]
	add	eax, DWORD PTR _glyph_len$[ebp]
	mov	DWORD PTR _text_len$[ebp], eax

; 6325 :         line_width += (float)glyph_width;

	movss	xmm0, DWORD PTR _line_width$[ebp]
	addss	xmm0, DWORD PTR _glyph_width$[ebp]
	movss	DWORD PTR _line_width$[ebp], xmm0

; 6326 :         glyph_len = nk_utf_decode(begin + text_len, &unicode, byte_len-text_len);

	mov	eax, DWORD PTR _byte_len$[ebp]
	sub	eax, DWORD PTR _text_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _begin$[ebp]
	add	edx, DWORD PTR _text_len$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax

; 6327 :         glyph_width = font->width(font->userdata, font->height, begin+text_len, glyph_len);

	mov	esi, esp
	mov	eax, DWORD PTR _glyph_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _begin$[ebp]
	add	ecx, DWORD PTR _text_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _glyph_width$[ebp]

; 6328 :         continue;

	jmp	$LN19@nk_text_ca

; 6329 :     }

	jmp	$LN19@nk_text_ca
$LN9@nk_text_ca:

; 6330 : 
; 6331 :     if (text_size.x < line_width)

	movss	xmm0, DWORD PTR _line_width$[ebp]
	comiss	xmm0, DWORD PTR _text_size$[ebp]
	jbe	SHORT $LN5@nk_text_ca

; 6332 :         text_size.x = line_width;

	movss	xmm0, DWORD PTR _line_width$[ebp]
	movss	DWORD PTR _text_size$[ebp], xmm0
$LN5@nk_text_ca:

; 6333 :     if (out_offset)

	cmp	DWORD PTR _out_offset$[ebp], 0
	je	SHORT $LN4@nk_text_ca

; 6334 :         *out_offset = nk_vec2(line_width, text_size.y + line_height);

	movss	xmm0, DWORD PTR _text_size$[ebp+4]
	addss	xmm0, DWORD PTR _line_height$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _line_width$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _out_offset$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
$LN4@nk_text_ca:

; 6335 :     if (line_width > 0 || text_size.y == 0.0f)

	movss	xmm0, DWORD PTR _line_width$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN2@nk_text_ca
	movss	xmm0, DWORD PTR _text_size$[ebp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@nk_text_ca
$LN2@nk_text_ca:

; 6336 :         text_size.y += line_height;

	movss	xmm0, DWORD PTR _text_size$[ebp+4]
	addss	xmm0, DWORD PTR _line_height$[ebp]
	movss	DWORD PTR _text_size$[ebp+4], xmm0
$LN3@nk_text_ca:

; 6337 :     if (remaining)

	cmp	DWORD PTR _remaining$[ebp], 0
	je	SHORT $LN1@nk_text_ca

; 6338 :         *remaining = begin+text_len;

	mov	eax, DWORD PTR _begin$[ebp]
	add	eax, DWORD PTR _text_len$[ebp]
	mov	ecx, DWORD PTR _remaining$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@nk_text_ca:

; 6339 :     return text_size;

	mov	eax, DWORD PTR _text_size$[ebp]
	mov	edx, DWORD PTR _text_size$[ebp+4]
$LN14@nk_text_ca:

; 6340 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@nk_text_ca
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@nk_text_ca:
	DD	2
	DD	$LN22@nk_text_ca
$LN22@nk_text_ca:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN20@nk_text_ca
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN21@nk_text_ca
$LN21@nk_text_ca:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN20@nk_text_ca:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_nk_text_calculate_text_bounds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_text_clamp
_TEXT	SEGMENT
tv134 = -332						; size = 4
tv132 = -328						; size = 4
tv65 = -328						; size = 4
_sep_width$ = -128					; size = 4
_sep_g$ = -116						; size = 4
_sep_len$ = -104					; size = 4
_s$ = -92						; size = 4
_g$ = -80						; size = 4
_len$ = -68						; size = 4
_width$ = -56						; size = 4
_unicode$ = -44						; size = 4
_last_width$ = -32					; size = 4
_glyph_len$ = -20					; size = 4
_i$ = -8						; size = 4
_font$ = 8						; size = 4
_text$ = 12						; size = 4
_text_len$ = 16						; size = 4
_space$ = 20						; size = 4
_glyphs$ = 24						; size = 4
_text_width$ = 28					; size = 4
_sep_list$ = 32						; size = 4
_sep_count$ = 36					; size = 4
_nk_text_clamp PROC					; COMDAT

; 6235 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6236 :     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 6237 :     int glyph_len = 0;

	mov	DWORD PTR _glyph_len$[ebp], 0

; 6238 :     float last_width = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _last_width$[ebp], xmm0

; 6239 :     nk_rune unicode = 0;

	mov	DWORD PTR _unicode$[ebp], 0

; 6240 :     float width = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _width$[ebp], xmm0

; 6241 :     int len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 6242 :     int g = 0;

	mov	DWORD PTR _g$[ebp], 0

; 6243 :     float s;
; 6244 : 
; 6245 :     int sep_len = 0;

	mov	DWORD PTR _sep_len$[ebp], 0

; 6246 :     int sep_g = 0;

	mov	DWORD PTR _sep_g$[ebp], 0

; 6247 :     float sep_width = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sep_width$[ebp], xmm0

; 6248 :     sep_count = NK_MAX(sep_count,0);

	cmp	DWORD PTR _sep_count$[ebp], 0
	jge	SHORT $LN12@nk_text_cl
	mov	DWORD PTR tv65[ebp], 0
	jmp	SHORT $LN13@nk_text_cl
$LN12@nk_text_cl:
	mov	eax, DWORD PTR _sep_count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
$LN13@nk_text_cl:
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR _sep_count$[ebp], ecx

; 6249 : 
; 6250 :     glyph_len = nk_utf_decode(text, &unicode, text_len);

	mov	eax, DWORD PTR _text_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax
$LN9@nk_text_cl:

; 6251 :     while (glyph_len && (width < space) && (len < text_len)) {

	cmp	DWORD PTR _glyph_len$[ebp], 0
	je	$LN8@nk_text_cl
	movss	xmm0, DWORD PTR _space$[ebp]
	comiss	xmm0, DWORD PTR _width$[ebp]
	jbe	$LN8@nk_text_cl
	mov	eax, DWORD PTR _len$[ebp]
	cmp	eax, DWORD PTR _text_len$[ebp]
	jge	$LN8@nk_text_cl

; 6252 :         len += glyph_len;

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, DWORD PTR _glyph_len$[ebp]
	mov	DWORD PTR _len$[ebp], eax

; 6253 :         s = font->width(font->userdata, font->height, text, len);

	mov	esi, esp
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _s$[ebp]

; 6254 :         for (i = 0; i < sep_count; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@nk_text_cl
$LN6@nk_text_cl:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@nk_text_cl:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _sep_count$[ebp]
	jge	SHORT $LN5@nk_text_cl

; 6255 :             if (unicode != sep_list[i]) continue;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _sep_list$[ebp]
	mov	edx, DWORD PTR _unicode$[ebp]
	cmp	edx, DWORD PTR [ecx+eax*4]
	je	SHORT $LN4@nk_text_cl
	jmp	SHORT $LN6@nk_text_cl
$LN4@nk_text_cl:

; 6256 :             sep_width = last_width = width;

	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR _last_width$[ebp], xmm0
	movss	xmm0, DWORD PTR _last_width$[ebp]
	movss	DWORD PTR _sep_width$[ebp], xmm0

; 6257 :             sep_g = g+1;

	mov	eax, DWORD PTR _g$[ebp]
	add	eax, 1
	mov	DWORD PTR _sep_g$[ebp], eax

; 6258 :             sep_len = len;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _sep_len$[ebp], eax

; 6259 :             break;

	jmp	SHORT $LN5@nk_text_cl

; 6260 :         }

	jmp	SHORT $LN6@nk_text_cl
$LN5@nk_text_cl:

; 6261 :         if (i == sep_count){

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _sep_count$[ebp]
	jne	SHORT $LN3@nk_text_cl

; 6262 :             last_width = sep_width = width;

	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR _sep_width$[ebp], xmm0
	movss	xmm0, DWORD PTR _sep_width$[ebp]
	movss	DWORD PTR _last_width$[ebp], xmm0

; 6263 :             sep_g = g+1;

	mov	eax, DWORD PTR _g$[ebp]
	add	eax, 1
	mov	DWORD PTR _sep_g$[ebp], eax
$LN3@nk_text_cl:

; 6264 :         }
; 6265 :         width = s;

	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _width$[ebp], xmm0

; 6266 :         glyph_len = nk_utf_decode(&text[len], &unicode, text_len - len);

	mov	eax, DWORD PTR _text_len$[ebp]
	sub	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax

; 6267 :         g++;

	mov	eax, DWORD PTR _g$[ebp]
	add	eax, 1
	mov	DWORD PTR _g$[ebp], eax

; 6268 :     }

	jmp	$LN9@nk_text_cl
$LN8@nk_text_cl:

; 6269 :     if (len >= text_len) {

	mov	eax, DWORD PTR _len$[ebp]
	cmp	eax, DWORD PTR _text_len$[ebp]
	jl	SHORT $LN2@nk_text_cl

; 6270 :         *glyphs = g;

	mov	eax, DWORD PTR _glyphs$[ebp]
	mov	ecx, DWORD PTR _g$[ebp]
	mov	DWORD PTR [eax], ecx

; 6271 :         *text_width = last_width;

	mov	eax, DWORD PTR _text_width$[ebp]
	movss	xmm0, DWORD PTR _last_width$[ebp]
	movss	DWORD PTR [eax], xmm0

; 6272 :         return len;

	mov	eax, DWORD PTR _len$[ebp]
	jmp	SHORT $LN1@nk_text_cl

; 6273 :     } else {

	jmp	SHORT $LN1@nk_text_cl
$LN2@nk_text_cl:

; 6274 :         *glyphs = sep_g;

	mov	eax, DWORD PTR _glyphs$[ebp]
	mov	ecx, DWORD PTR _sep_g$[ebp]
	mov	DWORD PTR [eax], ecx

; 6275 :         *text_width = sep_width;

	mov	eax, DWORD PTR _text_width$[ebp]
	movss	xmm0, DWORD PTR _sep_width$[ebp]
	movss	DWORD PTR [eax], xmm0

; 6276 :         return (!sep_len) ? len: sep_len;

	cmp	DWORD PTR _sep_len$[ebp], 0
	jne	SHORT $LN14@nk_text_cl
	mov	DWORD PTR tv132[ebp], 1
	jmp	SHORT $LN15@nk_text_cl
$LN14@nk_text_cl:
	mov	DWORD PTR tv132[ebp], 0
$LN15@nk_text_cl:
	cmp	DWORD PTR tv132[ebp], 0
	je	SHORT $LN16@nk_text_cl
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN17@nk_text_cl
$LN16@nk_text_cl:
	mov	ecx, DWORD PTR _sep_len$[ebp]
	mov	DWORD PTR tv134[ebp], ecx
$LN17@nk_text_cl:
	mov	eax, DWORD PTR tv134[ebp]
$LN1@nk_text_cl:

; 6277 :     }
; 6278 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@nk_text_cl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@nk_text_cl:
	DD	1
	DD	$LN19@nk_text_cl
$LN19@nk_text_cl:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN18@nk_text_cl
$LN18@nk_text_cl:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_nk_text_clamp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_unify
_TEXT	SEGMENT
tv161 = -196						; size = 4
tv154 = -196						; size = 4
tv145 = -196						; size = 4
tv132 = -196						; size = 4
tv89 = -196						; size = 4
tv82 = -196						; size = 4
_clip$ = 8						; size = 4
_a$ = 12						; size = 4
_x0$ = 16						; size = 4
_y0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_nk_unify PROC						; COMDAT

; 6183 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6184 :     NK_ASSERT(a);

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN3@nk_unify
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_unify@@9@9@ddf8d5d8
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13FNCBLAIF@?$AAa?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@nk_unify:

; 6185 :     NK_ASSERT(clip);

	cmp	DWORD PTR _clip$[ebp], 0
	jne	SHORT $LN4@nk_unify
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_unify@@9@9@ddf8d5d8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19OFCFGDAA@?$AAc?$AAl?$AAi?$AAp?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_unify:

; 6186 :     clip->x = NK_MAX(a->x, x0);

	mov	eax, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR _x0$[ebp]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN5@nk_unify
	movss	xmm0, DWORD PTR _x0$[ebp]
	movss	DWORD PTR tv82[ebp], xmm0
	jmp	SHORT $LN6@nk_unify
$LN5@nk_unify:
	mov	ecx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR tv82[ebp], xmm0
$LN6@nk_unify:
	mov	edx, DWORD PTR _clip$[ebp]
	movss	xmm0, DWORD PTR tv82[ebp]
	movss	DWORD PTR [edx], xmm0

; 6187 :     clip->y = NK_MAX(a->y, y0);

	mov	eax, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR _y0$[ebp]
	comiss	xmm0, DWORD PTR [eax+4]
	jbe	SHORT $LN7@nk_unify
	movss	xmm0, DWORD PTR _y0$[ebp]
	movss	DWORD PTR tv89[ebp], xmm0
	jmp	SHORT $LN8@nk_unify
$LN7@nk_unify:
	mov	ecx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR tv89[ebp], xmm0
$LN8@nk_unify:
	mov	edx, DWORD PTR _clip$[ebp]
	movss	xmm0, DWORD PTR tv89[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 6188 :     clip->w = NK_MIN(a->x + a->w, x1) - clip->x;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR _x1$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN9@nk_unify
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR tv132[ebp], xmm0
	jmp	SHORT $LN10@nk_unify
$LN9@nk_unify:
	movss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR tv132[ebp], xmm0
$LN10@nk_unify:
	mov	ecx, DWORD PTR _clip$[ebp]
	movss	xmm0, DWORD PTR tv132[ebp]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _clip$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 6189 :     clip->h = NK_MIN(a->y + a->h, y1) - clip->y;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	xmm1, DWORD PTR _y1$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN11@nk_unify
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR tv145[ebp], xmm0
	jmp	SHORT $LN12@nk_unify
$LN11@nk_unify:
	movss	xmm0, DWORD PTR _y1$[ebp]
	movss	DWORD PTR tv145[ebp], xmm0
$LN12@nk_unify:
	mov	ecx, DWORD PTR _clip$[ebp]
	movss	xmm0, DWORD PTR tv145[ebp]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _clip$[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 6190 :     clip->w = NK_MAX(0, clip->w);

	mov	eax, DWORD PTR _clip$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN13@nk_unify
	mov	ecx, DWORD PTR _clip$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR tv154[ebp], xmm0
	jmp	SHORT $LN14@nk_unify
$LN13@nk_unify:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv154[ebp], xmm0
$LN14@nk_unify:
	mov	edx, DWORD PTR _clip$[ebp]
	movss	xmm0, DWORD PTR tv154[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 6191 :     clip->h = NK_MAX(0, clip->h);

	mov	eax, DWORD PTR _clip$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN15@nk_unify
	mov	ecx, DWORD PTR _clip$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR tv161[ebp], xmm0
	jmp	SHORT $LN16@nk_unify
$LN15@nk_unify:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv161[ebp], xmm0
$LN16@nk_unify:
	mov	edx, DWORD PTR _clip$[ebp]
	movss	xmm0, DWORD PTR tv161[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 6192 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_unify ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_parse_hex
_TEXT	SEGMENT
_len$ = -20						; size = 4
_i$ = -8						; size = 4
_p$ = 8							; size = 4
_length$ = 12						; size = 4
_nk_parse_hex PROC					; COMDAT

; 5655 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5656 :     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 5657 :     int len = 0;

	mov	DWORD PTR _len$[ebp], 0
$LN6@nk_parse_h:

; 5658 :     while (len < length) {

	mov	eax, DWORD PTR _len$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	$LN5@nk_parse_h

; 5659 :         i <<= 4;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	DWORD PTR _i$[ebp], eax

; 5660 :         if (p[len] >= 'a' && p[len] <= 'f')

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 97					; 00000061H
	jl	SHORT $LN4@nk_parse_h
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 102				; 00000066H
	jg	SHORT $LN4@nk_parse_h

; 5661 :             i += ((p[len] - 'a') + 10);

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [edx+ecx-87]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@nk_parse_h
$LN4@nk_parse_h:

; 5662 :         else if (p[len] >= 'A' && p[len] <= 'F')

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 65					; 00000041H
	jl	SHORT $LN2@nk_parse_h
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 70					; 00000046H
	jg	SHORT $LN2@nk_parse_h

; 5663 :             i += ((p[len] - 'A') + 10);

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [edx+ecx-55]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@nk_parse_h
$LN2@nk_parse_h:

; 5664 :         else i += (p[len] - '0');

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_parse_h:

; 5665 :         len++;

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax

; 5666 :     }

	jmp	$LN6@nk_parse_h
$LN5@nk_parse_h:

; 5667 :     return i;

	mov	eax, DWORD PTR _i$[ebp]

; 5668 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_parse_hex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_file_load
_TEXT	SEGMENT
_ret$ = -32						; size = 4
_fd$ = -20						; size = 4
_buf$ = -8						; size = 4
_path$ = 8						; size = 4
_siz$ = 12						; size = 4
_alloc$ = 16						; size = 4
_nk_file_load PROC					; COMDAT

; 5613 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5614 :     char *buf;
; 5615 :     FILE *fd;
; 5616 :     long ret;
; 5617 : 
; 5618 :     NK_ASSERT(path);

	cmp	DWORD PTR _path$[ebp], 0
	jne	SHORT $LN8@nk_file_lo
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_file_load@@9@9@ddf8d5d8
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19JIFMCCAP@?$AAp?$AAa?$AAt?$AAh?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_file_lo:

; 5619 :     NK_ASSERT(siz);

	cmp	DWORD PTR _siz$[ebp], 0
	jne	SHORT $LN9@nk_file_lo
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_file_load@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17JDHLKIIP@?$AAs?$AAi?$AAz?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_file_lo:

; 5620 :     NK_ASSERT(alloc);

	cmp	DWORD PTR _alloc$[ebp], 0
	jne	SHORT $LN10@nk_file_lo
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_file_load@@9@9@ddf8d5d8
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KLHDKNJP@?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_file_lo:

; 5621 :     if (!path || !siz || !alloc)

	cmp	DWORD PTR _path$[ebp], 0
	je	SHORT $LN4@nk_file_lo
	cmp	DWORD PTR _siz$[ebp], 0
	je	SHORT $LN4@nk_file_lo
	cmp	DWORD PTR _alloc$[ebp], 0
	jne	SHORT $LN5@nk_file_lo
$LN4@nk_file_lo:

; 5622 :         return 0;

	xor	eax, eax
	jmp	$LN6@nk_file_lo
$LN5@nk_file_lo:

; 5623 : 
; 5624 :     fd = fopen(path, "rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fd$[ebp], eax

; 5625 :     if (!fd) return 0;

	cmp	DWORD PTR _fd$[ebp], 0
	jne	SHORT $LN3@nk_file_lo
	xor	eax, eax
	jmp	$LN6@nk_file_lo
$LN3@nk_file_lo:

; 5626 :     fseek(fd, 0, SEEK_END);

	push	2
	push	0
	mov	eax, DWORD PTR _fd$[ebp]
	push	eax
	call	_fseek
	add	esp, 12					; 0000000cH

; 5627 :     ret = ftell(fd);

	mov	eax, DWORD PTR _fd$[ebp]
	push	eax
	call	_ftell
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 5628 :     if (ret < 0) {

	cmp	DWORD PTR _ret$[ebp], 0
	jge	SHORT $LN2@nk_file_lo

; 5629 :         fclose(fd);

	mov	eax, DWORD PTR _fd$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 5630 :         return 0;

	xor	eax, eax
	jmp	$LN6@nk_file_lo
$LN2@nk_file_lo:

; 5631 :     }
; 5632 :     *siz = (nk_size)ret;

	mov	eax, DWORD PTR _siz$[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], ecx

; 5633 :     fseek(fd, 0, SEEK_SET);

	push	0
	push	0
	mov	eax, DWORD PTR _fd$[ebp]
	push	eax
	call	_fseek
	add	esp, 12					; 0000000cH

; 5634 :     buf = (char*)alloc->alloc(alloc->userdata,0, *siz);

	mov	esi, esp
	mov	eax, DWORD PTR _siz$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	0
	mov	edx, DWORD PTR _alloc$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _buf$[ebp], eax

; 5635 :     NK_ASSERT(buf);

	cmp	DWORD PTR _buf$[ebp], 0
	jne	SHORT $LN11@nk_file_lo
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_file_load@@9@9@ddf8d5d8
	add	eax, 22					; 00000016H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17ENLBLDPN@?$AAb?$AAu?$AAf?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_file_lo:

; 5636 :     if (!buf) {

	cmp	DWORD PTR _buf$[ebp], 0
	jne	SHORT $LN1@nk_file_lo

; 5637 :         fclose(fd);

	mov	eax, DWORD PTR _fd$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 5638 :         return 0;

	xor	eax, eax
	jmp	SHORT $LN6@nk_file_lo
$LN1@nk_file_lo:

; 5639 :     }
; 5640 :     *siz = (nk_size)fread(buf, *siz, 1, fd);

	mov	eax, DWORD PTR _fd$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _siz$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_fread
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _siz$[ebp]
	mov	DWORD PTR [ecx], eax

; 5641 :     fclose(fd);

	mov	eax, DWORD PTR _fd$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 5642 :     return buf;

	mov	eax, DWORD PTR _buf$[ebp]
$LN6@nk_file_lo:

; 5643 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_file_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_strfmt
_TEXT	SEGMENT
tv84 = -208						; size = 4
_result$ = -8						; size = 4
_buf$ = 8						; size = 4
_buf_size$ = 12						; size = 4
_fmt$ = 16						; size = 4
_args$ = 20						; size = 4
_nk_strfmt PROC						; COMDAT

; 5536 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5537 :     int result = -1;

	mov	DWORD PTR _result$[ebp], -1

; 5538 :     NK_ASSERT(buf);

	cmp	DWORD PTR _buf$[ebp], 0
	jne	SHORT $LN5@nk_strfmt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_strfmt@@9@9@ddf8d5d8
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17ENLBLDPN@?$AAb?$AAu?$AAf?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_strfmt:

; 5539 :     NK_ASSERT(buf_size);

	cmp	DWORD PTR _buf_size$[ebp], 0
	jne	SHORT $LN6@nk_strfmt
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_strfmt@@9@9@ddf8d5d8
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BC@JBKPFABB@?$AAb?$AAu?$AAf?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_strfmt:

; 5540 :     if (!buf || !buf_size || !fmt) return 0;

	cmp	DWORD PTR _buf$[ebp], 0
	je	SHORT $LN1@nk_strfmt
	cmp	DWORD PTR _buf_size$[ebp], 0
	je	SHORT $LN1@nk_strfmt
	cmp	DWORD PTR _fmt$[ebp], 0
	jne	SHORT $LN2@nk_strfmt
$LN1@nk_strfmt:
	xor	eax, eax
	jmp	SHORT $LN3@nk_strfmt
$LN2@nk_strfmt:

; 5541 : #ifdef NK_INCLUDE_STANDARD_IO
; 5542 :     result = NK_VSNPRINTF(buf, (nk_size)buf_size, fmt, args);

	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fmt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_vsprintf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 5543 :     result = (result >= buf_size) ? -1: result;

	mov	eax, DWORD PTR _result$[ebp]
	cmp	eax, DWORD PTR _buf_size$[ebp]
	jl	SHORT $LN7@nk_strfmt
	mov	DWORD PTR tv84[ebp], -1
	jmp	SHORT $LN8@nk_strfmt
$LN7@nk_strfmt:
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN8@nk_strfmt:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR _result$[ebp], edx

; 5544 :     buf[buf_size-1] = 0;

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _buf_size$[ebp]
	mov	BYTE PTR [eax-1], 0

; 5545 : #else
; 5546 :     result = nk_vsnprintf(buf, buf_size, fmt, args);
; 5547 : #endif
; 5548 :     return result;

	mov	eax, DWORD PTR _result$[ebp]
$LN3@nk_strfmt:

; 5549 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_strfmt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_dtoa
_TEXT	SEGMENT
tv230 = -328						; size = 8
tv86 = -324						; size = 4
tv77 = -324						; size = 4
_j$1 = -124						; size = 4
_i$2 = -112						; size = 4
_t$3 = -100						; size = 8
_weight$4 = -84						; size = 8
_neg$ = -68						; size = 4
_c$ = -56						; size = 4
_m1$ = -44						; size = 4
_m$ = -32						; size = 4
_digit$ = -20						; size = 4
_useExp$ = -8						; size = 4
_s$ = 8							; size = 4
_n$ = 12						; size = 8
_nk_dtoa PROC						; COMDAT

; 5135 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5136 :     int useExp = 0;

	mov	DWORD PTR _useExp$[ebp], 0

; 5137 :     int digit = 0, m = 0, m1 = 0;

	mov	DWORD PTR _digit$[ebp], 0
	mov	DWORD PTR _m$[ebp], 0
	mov	DWORD PTR _m1$[ebp], 0

; 5138 :     char *c = s;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 5139 :     int neg = 0;

	mov	DWORD PTR _neg$[ebp], 0

; 5140 : 
; 5141 :     NK_ASSERT(s);

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN23@nk_dtoa
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_dtoa@@9@9@ddf8d5d8
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN23@nk_dtoa:

; 5142 :     if (!s) return 0;

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN20@nk_dtoa
	xor	eax, eax
	jmp	$LN21@nk_dtoa
$LN20@nk_dtoa:

; 5143 : 
; 5144 :     if (n == 0.0) {

	movsd	xmm0, QWORD PTR _n$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN19@nk_dtoa

; 5145 :         s[0] = '0'; s[1] = '\0';

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx+ecx], 48			; 00000030H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx+eax], 0

; 5146 :         return s;

	mov	eax, DWORD PTR _s$[ebp]
	jmp	$LN21@nk_dtoa
$LN19@nk_dtoa:

; 5147 :     }
; 5148 : 
; 5149 :     neg = (n < 0);

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _n$[ebp]
	jbe	SHORT $LN24@nk_dtoa
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN25@nk_dtoa
$LN24@nk_dtoa:
	mov	DWORD PTR tv77[ebp], 0
$LN25@nk_dtoa:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR _neg$[ebp], eax

; 5150 :     if (neg) n = -n;

	cmp	DWORD PTR _neg$[ebp], 0
	je	SHORT $LN18@nk_dtoa
	movsd	xmm0, QWORD PTR _n$[ebp]
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR _n$[ebp], xmm0
$LN18@nk_dtoa:

; 5151 : 
; 5152 :     /* calculate magnitude */
; 5153 :     m = nk_log10(n);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _n$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_nk_log10
	add	esp, 8
	mov	DWORD PTR _m$[ebp], eax

; 5154 :     useExp = (m >= 14 || (neg && m >= 9) || m <= -9);

	cmp	DWORD PTR _m$[ebp], 14			; 0000000eH
	jge	SHORT $LN27@nk_dtoa
	cmp	DWORD PTR _neg$[ebp], 0
	je	SHORT $LN26@nk_dtoa
	cmp	DWORD PTR _m$[ebp], 9
	jge	SHORT $LN27@nk_dtoa
$LN26@nk_dtoa:
	cmp	DWORD PTR _m$[ebp], -9			; fffffff7H
	jle	SHORT $LN27@nk_dtoa
	mov	DWORD PTR tv86[ebp], 0
	jmp	SHORT $LN28@nk_dtoa
$LN27@nk_dtoa:
	mov	DWORD PTR tv86[ebp], 1
$LN28@nk_dtoa:
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR _useExp$[ebp], eax

; 5155 :     if (neg) *(c++) = '-';

	cmp	DWORD PTR _neg$[ebp], 0
	je	SHORT $LN17@nk_dtoa
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx
$LN17@nk_dtoa:

; 5156 : 
; 5157 :     /* set up for scientific notation */
; 5158 :     if (useExp) {

	cmp	DWORD PTR _useExp$[ebp], 0
	je	SHORT $LN16@nk_dtoa

; 5159 :         if (m < 0)

	cmp	DWORD PTR _m$[ebp], 0
	jge	SHORT $LN15@nk_dtoa

; 5160 :            m -= 1;

	mov	eax, DWORD PTR _m$[ebp]
	sub	eax, 1
	mov	DWORD PTR _m$[ebp], eax
$LN15@nk_dtoa:

; 5161 :         n = n / (double)nk_pow(10.0, m);

	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4024000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_nk_pow
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR tv230[ebp]
	movsd	xmm0, QWORD PTR _n$[ebp]
	divsd	xmm0, QWORD PTR tv230[ebp]
	movsd	QWORD PTR _n$[ebp], xmm0

; 5162 :         m1 = m;

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR _m1$[ebp], eax

; 5163 :         m = 0;

	mov	DWORD PTR _m$[ebp], 0
$LN16@nk_dtoa:

; 5164 :     }
; 5165 :     if (m < 1.0) {

	cvtsi2sd xmm0, DWORD PTR _m$[ebp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN14@nk_dtoa

; 5166 :         m = 0;

	mov	DWORD PTR _m$[ebp], 0
$LN14@nk_dtoa:

; 5167 :     }
; 5168 : 
; 5169 :     /* convert the number */
; 5170 :     while (n > NK_FLOAT_PRECISION || m >= 0) {

	movsd	xmm0, QWORD PTR _n$[ebp]
	comisd	xmm0, QWORD PTR __real@3d06849b86a12b9b
	ja	SHORT $LN11@nk_dtoa
	cmp	DWORD PTR _m$[ebp], 0
	jl	$LN12@nk_dtoa
$LN11@nk_dtoa:

; 5171 :         double weight = nk_pow(10.0, m);

	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4024000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_nk_pow
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR _weight$4[ebp]

; 5172 :         if (weight > 0) {

	movsd	xmm0, QWORD PTR _weight$4[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN10@nk_dtoa

; 5173 :             double t = (double)n / weight;

	movsd	xmm0, QWORD PTR _n$[ebp]
	divsd	xmm0, QWORD PTR _weight$4[ebp]
	movsd	QWORD PTR _t$3[ebp], xmm0

; 5174 :             digit = nk_ifloord(t);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _t$3[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_nk_ifloord
	add	esp, 8
	mov	DWORD PTR _digit$[ebp], eax

; 5175 :             n -= ((double)digit * weight);

	cvtsi2sd xmm0, DWORD PTR _digit$[ebp]
	mulsd	xmm0, QWORD PTR _weight$4[ebp]
	movsd	xmm1, QWORD PTR _n$[ebp]
	subsd	xmm1, xmm0
	movsd	QWORD PTR _n$[ebp], xmm1

; 5176 :             *(c++) = (char)('0' + (char)digit);

	movsx	eax, BYTE PTR _digit$[ebp]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, 1
	mov	DWORD PTR _c$[ebp], edx
$LN10@nk_dtoa:

; 5177 :         }
; 5178 :         if (m == 0 && n > 0)

	cmp	DWORD PTR _m$[ebp], 0
	jne	SHORT $LN9@nk_dtoa
	movsd	xmm0, QWORD PTR _n$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN9@nk_dtoa

; 5179 :             *(c++) = '.';

	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 46			; 0000002eH
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx
$LN9@nk_dtoa:

; 5180 :         m--;

	mov	eax, DWORD PTR _m$[ebp]
	sub	eax, 1
	mov	DWORD PTR _m$[ebp], eax

; 5181 :     }

	jmp	$LN14@nk_dtoa
$LN12@nk_dtoa:

; 5182 : 
; 5183 :     if (useExp) {

	cmp	DWORD PTR _useExp$[ebp], 0
	je	$LN8@nk_dtoa

; 5184 :         /* convert the exponent */
; 5185 :         int i, j;
; 5186 :         *(c++) = 'e';

	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 101			; 00000065H
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx

; 5187 :         if (m1 > 0) {

	cmp	DWORD PTR _m1$[ebp], 0
	jle	SHORT $LN7@nk_dtoa

; 5188 :             *(c++) = '+';

	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 43			; 0000002bH
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx

; 5189 :         } else {

	jmp	SHORT $LN6@nk_dtoa
$LN7@nk_dtoa:

; 5190 :             *(c++) = '-';

	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx

; 5191 :             m1 = -m1;

	mov	eax, DWORD PTR _m1$[ebp]
	neg	eax
	mov	DWORD PTR _m1$[ebp], eax
$LN6@nk_dtoa:

; 5192 :         }
; 5193 :         m = 0;

	mov	DWORD PTR _m$[ebp], 0
$LN5@nk_dtoa:

; 5194 :         while (m1 > 0) {

	cmp	DWORD PTR _m1$[ebp], 0
	jle	SHORT $LN4@nk_dtoa

; 5195 :             *(c++) = (char)('0' + (char)(m1 % 10));

	mov	eax, DWORD PTR _m1$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	movsx	edx, dl
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx

; 5196 :             m1 /= 10;

	mov	eax, DWORD PTR _m1$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _m1$[ebp], eax

; 5197 :             m++;

	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 1
	mov	DWORD PTR _m$[ebp], eax

; 5198 :         }

	jmp	SHORT $LN5@nk_dtoa
$LN4@nk_dtoa:

; 5199 :         c -= m;

	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 5200 :         for (i = 0, j = m-1; i<j; i++, j--) {

	mov	DWORD PTR _i$2[ebp], 0
	mov	eax, DWORD PTR _m$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
	jmp	SHORT $LN3@nk_dtoa
$LN2@nk_dtoa:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
	mov	ecx, DWORD PTR _j$1[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$1[ebp], ecx
$LN3@nk_dtoa:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _j$1[ebp]
	jge	SHORT $LN1@nk_dtoa

; 5201 :             /* swap without temporary */
; 5202 :             c[i] ^= c[j];

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _j$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _i$2[ebp]
	movsx	eax, BYTE PTR [edx]
	xor	eax, ecx
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _i$2[ebp]
	mov	BYTE PTR [ecx], al

; 5203 :             c[j] ^= c[i];

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _i$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _j$1[ebp]
	movsx	eax, BYTE PTR [edx]
	xor	eax, ecx
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _j$1[ebp]
	mov	BYTE PTR [ecx], al

; 5204 :             c[i] ^= c[j];

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _j$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _i$2[ebp]
	movsx	eax, BYTE PTR [edx]
	xor	eax, ecx
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _i$2[ebp]
	mov	BYTE PTR [ecx], al

; 5205 :         }

	jmp	SHORT $LN2@nk_dtoa
$LN1@nk_dtoa:

; 5206 :         c += m;

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR _c$[ebp], eax
$LN8@nk_dtoa:

; 5207 :     }
; 5208 :     *(c) = '\0';

	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 0

; 5209 :     return s;

	mov	eax, DWORD PTR _s$[ebp]
$LN21@nk_dtoa:

; 5210 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_dtoa ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_itoa
_TEXT	SEGMENT
_i$ = -8						; size = 4
_s$ = 8							; size = 4
_n$ = 12						; size = 4
_nk_itoa PROC						; COMDAT

; 5110 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5111 :     long i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 5112 :     if (n == 0) {

	cmp	DWORD PTR _n$[ebp], 0
	jne	SHORT $LN5@nk_itoa

; 5113 :         s[i++] = '0';

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 48			; 00000030H
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 5114 :         s[i] = 0;

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 0

; 5115 :         return s;

	mov	eax, DWORD PTR _s$[ebp]
	jmp	$LN6@nk_itoa
$LN5@nk_itoa:

; 5116 :     }
; 5117 :     if (n < 0) {

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN3@nk_itoa

; 5118 :         s[i++] = '-';

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 5119 :         n = -n;

	mov	eax, DWORD PTR _n$[ebp]
	neg	eax
	mov	DWORD PTR _n$[ebp], eax
$LN3@nk_itoa:

; 5120 :     }
; 5121 :     while (n > 0) {

	cmp	DWORD PTR _n$[ebp], 0
	jle	SHORT $LN2@nk_itoa

; 5122 :         s[i++] = (char)('0' + (n % 10));

	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 5123 :         n /= 10;

	mov	eax, DWORD PTR _n$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _n$[ebp], eax

; 5124 :     }

	jmp	SHORT $LN3@nk_itoa
$LN2@nk_itoa:

; 5125 :     s[i] = 0;

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 0

; 5126 :     if (s[0] == '-')

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _s$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN1@nk_itoa

; 5127 :         ++s;

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
$LN1@nk_itoa:

; 5128 : 
; 5129 :     nk_strrev_ascii(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_nk_strrev_ascii
	add	esp, 4

; 5130 :     return s;

	mov	eax, DWORD PTR _s$[ebp]
$LN6@nk_itoa:

; 5131 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_itoa ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_strrev_ascii
_TEXT	SEGMENT
_t$ = -41						; size = 1
_i$ = -32						; size = 4
_end$ = -20						; size = 4
_len$ = -8						; size = 4
_s$ = 8							; size = 4
_nk_strrev_ascii PROC					; COMDAT

; 5096 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5097 :     int len = nk_strlen(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax

; 5098 :     int end = len / 2;

	mov	eax, DWORD PTR _len$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _end$[ebp], eax

; 5099 :     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 5100 :     char t;
; 5101 :     for (; i < end; ++i) {

	jmp	SHORT $LN3@nk_strrev_
$LN2@nk_strrev_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_strrev_:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@nk_strrev_

; 5102 :         t = s[i];

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _t$[ebp], cl

; 5103 :         s[i] = s[len - 1 - i];

	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, 1
	sub	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR [ecx], al

; 5104 :         s[len -1 - i] = t;

	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, 1
	sub	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR _t$[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 5105 :     }

	jmp	SHORT $LN2@nk_strrev_
$LN4@nk_strrev_:

; 5106 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_strrev_ascii ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_log10
_TEXT	SEGMENT
tv70 = -232						; size = 4
tv65 = -232						; size = 4
_exp$ = -32						; size = 4
_ret$ = -20						; size = 4
_neg$ = -8						; size = 4
_n$ = 8							; size = 8
_nk_log10 PROC						; COMDAT

; 5079 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5080 :     int neg;
; 5081 :     int ret;
; 5082 :     int exp = 0;

	mov	DWORD PTR _exp$[ebp], 0

; 5083 : 
; 5084 :     neg = (n < 0) ? 1 : 0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _n$[ebp]
	jbe	SHORT $LN6@nk_log10
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN7@nk_log10
$LN6@nk_log10:
	mov	DWORD PTR tv65[ebp], 0
$LN7@nk_log10:
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR _neg$[ebp], eax

; 5085 :     ret = (neg) ? (int)-n : (int)n;

	cmp	DWORD PTR _neg$[ebp], 0
	je	SHORT $LN8@nk_log10
	movsd	xmm0, QWORD PTR _n$[ebp]
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	cvttsd2si eax, xmm0
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN9@nk_log10
$LN8@nk_log10:
	cvttsd2si ecx, QWORD PTR _n$[ebp]
	mov	DWORD PTR tv70[ebp], ecx
$LN9@nk_log10:
	mov	edx, DWORD PTR tv70[ebp]
	mov	DWORD PTR _ret$[ebp], edx
$LN3@nk_log10:

; 5086 :     while ((ret / 10) > 0) {

	mov	eax, DWORD PTR _ret$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	test	eax, eax
	jle	SHORT $LN2@nk_log10

; 5087 :         ret /= 10;

	mov	eax, DWORD PTR _ret$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _ret$[ebp], eax

; 5088 :         exp++;

	mov	eax, DWORD PTR _exp$[ebp]
	add	eax, 1
	mov	DWORD PTR _exp$[ebp], eax

; 5089 :     }

	jmp	SHORT $LN3@nk_log10
$LN2@nk_log10:

; 5090 :     if (neg) exp = -exp;

	cmp	DWORD PTR _neg$[ebp], 0
	je	SHORT $LN1@nk_log10
	mov	eax, DWORD PTR _exp$[ebp]
	neg	eax
	mov	DWORD PTR _exp$[ebp], eax
$LN1@nk_log10:

; 5091 :     return exp;

	mov	eax, DWORD PTR _exp$[ebp]

; 5092 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_log10 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_iceilf
_TEXT	SEGMENT
tv75 = -232						; size = 4
tv69 = -232						; size = 4
_r$1 = -32						; size = 4
_t$2 = -20						; size = 4
_i$3 = -8						; size = 4
_x$ = 8							; size = 4
_nk_iceilf PROC						; COMDAT

; 5066 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5067 :     if (x >= 0) {

	movss	xmm0, DWORD PTR _x$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN2@nk_iceilf

; 5068 :         int i = (int)x;

	cvttss2si eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _i$3[ebp], eax

; 5069 :         return (x > i) ? i+1: i;

	cvtsi2ss xmm0, DWORD PTR _i$3[ebp]
	movss	xmm1, DWORD PTR _x$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN5@nk_iceilf
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN6@nk_iceilf
$LN5@nk_iceilf:
	mov	ecx, DWORD PTR _i$3[ebp]
	mov	DWORD PTR tv69[ebp], ecx
$LN6@nk_iceilf:
	mov	eax, DWORD PTR tv69[ebp]
	jmp	SHORT $LN1@nk_iceilf

; 5070 :     } else {

	jmp	SHORT $LN1@nk_iceilf
$LN2@nk_iceilf:

; 5071 :         int t = (int)x;

	cvttss2si eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _t$2[ebp], eax

; 5072 :         float r = x - (float)t;

	cvtsi2ss xmm0, DWORD PTR _t$2[ebp]
	movss	xmm1, DWORD PTR _x$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _r$1[ebp], xmm1

; 5073 :         return (r > 0.0f) ? t+1: t;

	movss	xmm0, DWORD PTR _r$1[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN7@nk_iceilf
	mov	eax, DWORD PTR _t$2[ebp]
	add	eax, 1
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN8@nk_iceilf
$LN7@nk_iceilf:
	mov	ecx, DWORD PTR _t$2[ebp]
	mov	DWORD PTR tv75[ebp], ecx
$LN8@nk_iceilf:
	mov	eax, DWORD PTR tv75[ebp]
$LN1@nk_iceilf:

; 5074 :     }
; 5075 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_iceilf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_ifloorf
_TEXT	SEGMENT
tv66 = -196						; size = 4
_x$ = 8							; size = 4
_nk_ifloorf PROC					; COMDAT

; 5059 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5060 :     x = (float)((int)x - ((x < 0.0f) ? 1 : 0));

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _x$[ebp]
	jbe	SHORT $LN3@nk_ifloorf
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@nk_ifloorf
$LN3@nk_ifloorf:
	mov	DWORD PTR tv66[ebp], 0
$LN4@nk_ifloorf:
	cvttss2si eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR tv66[ebp]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x$[ebp], xmm0

; 5061 :     return (int)x;

	cvttss2si eax, DWORD PTR _x$[ebp]

; 5062 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_ifloorf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_ifloord
_TEXT	SEGMENT
tv66 = -196						; size = 4
_x$ = 8							; size = 8
_nk_ifloord PROC					; COMDAT

; 5052 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5053 :     x = (double)((int)x - ((x < 0.0) ? 1 : 0));

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN3@nk_ifloord
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@nk_ifloord
$LN3@nk_ifloord:
	mov	DWORD PTR tv66[ebp], 0
$LN4@nk_ifloord:
	cvttsd2si eax, QWORD PTR _x$[ebp]
	sub	eax, DWORD PTR tv66[ebp]
	cvtsi2sd xmm0, eax
	movsd	QWORD PTR _x$[ebp], xmm0

; 5054 :     return (int)x;

	cvttsd2si eax, QWORD PTR _x$[ebp]

; 5055 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_ifloord ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_pow
_TEXT	SEGMENT
tv77 = -228						; size = 8
tv68 = -224						; size = 4
tv65 = -224						; size = 4
_plus$ = -24						; size = 4
_r$ = -12						; size = 8
_x$ = 8							; size = 8
_n$ = 16						; size = 4
_nk_pow	PROC						; COMDAT

; 5036 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5037 :     /*  check the sign of n */
; 5038 :     double r = 1;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _r$[ebp], xmm0

; 5039 :     int plus = n >= 0;

	cmp	DWORD PTR _n$[ebp], 0
	jl	SHORT $LN6@nk_pow
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN7@nk_pow
$LN6@nk_pow:
	mov	DWORD PTR tv65[ebp], 0
$LN7@nk_pow:
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR _plus$[ebp], eax

; 5040 :     n = (plus) ? n : -n;

	cmp	DWORD PTR _plus$[ebp], 0
	je	SHORT $LN8@nk_pow
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN9@nk_pow
$LN8@nk_pow:
	mov	ecx, DWORD PTR _n$[ebp]
	neg	ecx
	mov	DWORD PTR tv68[ebp], ecx
$LN9@nk_pow:
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR _n$[ebp], edx
$LN3@nk_pow:

; 5041 :     while (n > 0) {

	cmp	DWORD PTR _n$[ebp], 0
	jle	SHORT $LN2@nk_pow

; 5042 :         if ((n & 1) == 1)

	mov	eax, DWORD PTR _n$[ebp]
	and	eax, 1
	je	SHORT $LN1@nk_pow

; 5043 :             r *= x;

	movsd	xmm0, QWORD PTR _r$[ebp]
	mulsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR _r$[ebp], xmm0
$LN1@nk_pow:

; 5044 :         n /= 2;

	mov	eax, DWORD PTR _n$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _n$[ebp], eax

; 5045 :         x *= x;

	movsd	xmm0, QWORD PTR _x$[ebp]
	mulsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR _x$[ebp], xmm0

; 5046 :     }

	jmp	SHORT $LN3@nk_pow
$LN2@nk_pow:

; 5047 :     return plus ? r : 1.0 / r;

	cmp	DWORD PTR _plus$[ebp], 0
	je	SHORT $LN10@nk_pow
	movsd	xmm0, QWORD PTR _r$[ebp]
	movsd	QWORD PTR tv77[ebp], xmm0
	jmp	SHORT $LN11@nk_pow
$LN10@nk_pow:
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR _r$[ebp]
	movsd	QWORD PTR tv77[ebp], xmm0
$LN11@nk_pow:
	fld	QWORD PTR tv77[ebp]

; 5048 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_pow	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_string_float_limit
_TEXT	SEGMENT
_c$ = -20						; size = 4
_dot$ = -8						; size = 4
_string$ = 8						; size = 4
_prec$ = 12						; size = 4
_nk_string_float_limit PROC				; COMDAT

; 5015 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5016 :     int dot = 0;

	mov	DWORD PTR _dot$[ebp], 0

; 5017 :     char *c = string;

	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR _c$[ebp], eax
$LN5@nk_string_:

; 5018 :     while (*c) {

	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN4@nk_string_

; 5019 :         if (*c == '.') {

	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 46					; 0000002eH
	jne	SHORT $LN3@nk_string_

; 5020 :             dot = 1;

	mov	DWORD PTR _dot$[ebp], 1

; 5021 :             c++;

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax

; 5022 :             continue;

	jmp	SHORT $LN5@nk_string_
$LN3@nk_string_:

; 5023 :         }
; 5024 :         if (dot == (prec+1)) {

	mov	eax, DWORD PTR _prec$[ebp]
	add	eax, 1
	cmp	DWORD PTR _dot$[ebp], eax
	jne	SHORT $LN2@nk_string_

; 5025 :             *c = 0;

	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 0

; 5026 :             break;

	jmp	SHORT $LN4@nk_string_
$LN2@nk_string_:

; 5027 :         }
; 5028 :         if (dot > 0) dot++;

	cmp	DWORD PTR _dot$[ebp], 0
	jle	SHORT $LN1@nk_string_
	mov	eax, DWORD PTR _dot$[ebp]
	add	eax, 1
	mov	DWORD PTR _dot$[ebp], eax
$LN1@nk_string_:

; 5029 :         c++;

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax

; 5030 :     }

	jmp	SHORT $LN5@nk_string_
$LN4@nk_string_:

; 5031 :     return (int)(c - string);

	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _string$[ebp]

; 5032 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_string_float_limit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_zero
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_size$ = 12						; size = 4
_nk_zero PROC						; COMDAT

; 4688 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4689 :     NK_ASSERT(ptr);

	cmp	DWORD PTR _ptr$[ebp], 0
	jne	SHORT $LN3@nk_zero
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_zero@@9@9@ddf8d5d8
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17GHAIJGMG@?$AAp?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@nk_zero:

; 4690 :     NK_MEMSET(ptr, 0, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	call	_nk_memset
	add	esp, 12					; 0000000cH

; 4691 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_zero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_memset
_TEXT	SEGMENT
tv73 = -232						; size = 4
_t$ = -32						; size = 4
_c$ = -20						; size = 4
_dst$ = -8						; size = 4
_ptr$ = 8						; size = 4
_c0$ = 12						; size = 4
_size$ = 16						; size = 4
_nk_memset PROC						; COMDAT

; 4636 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4637 :     #define nk_word unsigned
; 4638 :     #define nk_wsize sizeof(nk_word)
; 4639 :     #define nk_wmask (nk_wsize - 1)
; 4640 :     nk_byte *dst = (nk_byte*)ptr;

	mov	eax, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR _dst$[ebp], eax

; 4641 :     unsigned c = 0;

	mov	DWORD PTR _c$[ebp], 0

; 4642 :     nk_size t = 0;

	mov	DWORD PTR _t$[ebp], 0

; 4643 : 
; 4644 :     if ((c = (nk_byte)c0) != 0) {

	movzx	eax, BYTE PTR _c0$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN16@nk_memset

; 4645 :         c = (c << 8) | c; /* at least 16-bits  */

	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 8
	or	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 4646 :         if (sizeof(unsigned int) > 2)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN16@nk_memset

; 4647 :             c = (c << 16) | c; /* at least 32-bits*/

	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 16					; 00000010H
	or	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax
$LN16@nk_memset:

; 4648 :     }
; 4649 : 
; 4650 :     /* too small of a word count */
; 4651 :     dst = (nk_byte*)ptr;

	mov	eax, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR _dst$[ebp], eax

; 4652 :     if (size < 3 * nk_wsize) {

	cmp	DWORD PTR _size$[ebp], 12		; 0000000cH
	jae	SHORT $LN14@nk_memset
$LN13@nk_memset:

; 4653 :         while (size--) *dst++ = (nk_byte)c0;

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR tv73[ebp], eax
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _size$[ebp], ecx
	cmp	DWORD PTR tv73[ebp], 0
	je	SHORT $LN12@nk_memset
	mov	eax, DWORD PTR _dst$[ebp]
	mov	cl, BYTE PTR _c0$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _dst$[ebp]
	add	edx, 1
	mov	DWORD PTR _dst$[ebp], edx
	jmp	SHORT $LN13@nk_memset
$LN12@nk_memset:

; 4654 :         return;

	jmp	$LN17@nk_memset
$LN14@nk_memset:

; 4655 :     }
; 4656 : 
; 4657 :     /* align destination */
; 4658 :     if ((t = NK_PTR_TO_UINT(dst) & nk_wmask) != 0) {

	mov	eax, DWORD PTR _dst$[ebp]
	and	eax, 3
	mov	DWORD PTR _t$[ebp], eax
	je	SHORT $LN11@nk_memset

; 4659 :         t = nk_wsize -t;

	mov	eax, 4
	sub	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR _t$[ebp], eax

; 4660 :         size -= t;

	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR _size$[ebp], eax
$LN10@nk_memset:

; 4661 :         do {
; 4662 :             *dst++ = (nk_byte)c0;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	cl, BYTE PTR _c0$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _dst$[ebp]
	add	edx, 1
	mov	DWORD PTR _dst$[ebp], edx

; 4663 :         } while (--t != 0);

	mov	eax, DWORD PTR _t$[ebp]
	sub	eax, 1
	mov	DWORD PTR _t$[ebp], eax
	jne	SHORT $LN10@nk_memset
$LN11@nk_memset:

; 4664 :     }
; 4665 : 
; 4666 :     /* fill word */
; 4667 :     t = size / nk_wsize;

	mov	eax, DWORD PTR _size$[ebp]
	shr	eax, 2
	mov	DWORD PTR _t$[ebp], eax
$LN7@nk_memset:

; 4668 :     do {
; 4669 :         *(nk_word*)((void*)dst) = c;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax], ecx

; 4670 :         dst += nk_wsize;

	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 4
	mov	DWORD PTR _dst$[ebp], eax

; 4671 :     } while (--t != 0);

	mov	eax, DWORD PTR _t$[ebp]
	sub	eax, 1
	mov	DWORD PTR _t$[ebp], eax
	jne	SHORT $LN7@nk_memset

; 4672 : 
; 4673 :     /* fill trailing bytes */
; 4674 :     t = (size & nk_wmask);

	mov	eax, DWORD PTR _size$[ebp]
	and	eax, 3
	mov	DWORD PTR _t$[ebp], eax

; 4675 :     if (t != 0) {

	je	SHORT $LN17@nk_memset
$LN3@nk_memset:

; 4676 :         do {
; 4677 :             *dst++ = (nk_byte)c0;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	cl, BYTE PTR _c0$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _dst$[ebp]
	add	edx, 1
	mov	DWORD PTR _dst$[ebp], edx

; 4678 :         } while (--t != 0);

	mov	eax, DWORD PTR _t$[ebp]
	sub	eax, 1
	mov	DWORD PTR _t$[ebp], eax
	jne	SHORT $LN3@nk_memset
$LN17@nk_memset:

; 4679 :     }
; 4680 : 
; 4681 :     #undef nk_word
; 4682 :     #undef nk_wsize
; 4683 :     #undef nk_wmask
; 4684 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_memset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_memcopy
_TEXT	SEGMENT
_src$ = -32						; size = 4
_dst$ = -20						; size = 4
_t$ = -8						; size = 4
_dst0$ = 8						; size = 4
_src0$ = 12						; size = 4
_length$ = 16						; size = 4
_nk_memcopy PROC					; COMDAT

; 4579 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4580 :     nk_ptr t;
; 4581 :     char *dst = (char*)dst0;

	mov	eax, DWORD PTR _dst0$[ebp]
	mov	DWORD PTR _dst$[ebp], eax

; 4582 :     const char *src = (const char*)src0;

	mov	eax, DWORD PTR _src0$[ebp]
	mov	DWORD PTR _src$[ebp], eax

; 4583 :     if (length == 0 || dst == src)

	cmp	DWORD PTR _length$[ebp], 0
	je	SHORT $LN33@nk_memcopy
	mov	eax, DWORD PTR _dst$[ebp]
	cmp	eax, DWORD PTR _src$[ebp]
	jne	SHORT $LN34@nk_memcopy
$LN33@nk_memcopy:

; 4584 :         goto done;

	jmp	$done$37
$LN34@nk_memcopy:

; 4585 : 
; 4586 :     #define nk_word int
; 4587 :     #define nk_wsize sizeof(nk_word)
; 4588 :     #define nk_wmask (nk_wsize-1)
; 4589 :     #define NK_TLOOP(s) if (t) NK_TLOOP1(s)
; 4590 :     #define NK_TLOOP1(s) do { s; } while (--t)
; 4591 : 
; 4592 :     if (dst < src) {

	mov	eax, DWORD PTR _dst$[ebp]
	cmp	eax, DWORD PTR _src$[ebp]
	jae	$LN32@nk_memcopy

; 4593 :         t = (nk_ptr)src; /* only need low bits */

	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR _t$[ebp], eax

; 4594 :         if ((t | (nk_ptr)dst) & nk_wmask) {

	mov	eax, DWORD PTR _t$[ebp]
	or	eax, DWORD PTR _dst$[ebp]
	and	eax, 3
	je	SHORT $LN31@nk_memcopy

; 4595 :             if ((t ^ (nk_ptr)dst) & nk_wmask || length < nk_wsize)

	mov	eax, DWORD PTR _t$[ebp]
	xor	eax, DWORD PTR _dst$[ebp]
	and	eax, 3
	jne	SHORT $LN29@nk_memcopy
	cmp	DWORD PTR _length$[ebp], 4
	jae	SHORT $LN30@nk_memcopy
$LN29@nk_memcopy:

; 4596 :                 t = length;

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _t$[ebp], eax

; 4597 :             else

	jmp	SHORT $LN28@nk_memcopy
$LN30@nk_memcopy:

; 4598 :                 t = nk_wsize - (t & nk_wmask);

	mov	eax, DWORD PTR _t$[ebp]
	and	eax, 3
	mov	ecx, 4
	sub	ecx, eax
	mov	DWORD PTR _t$[ebp], ecx
$LN28@nk_memcopy:

; 4599 :             length -= t;

	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR _length$[ebp], eax
$LN27@nk_memcopy:

; 4600 :             NK_TLOOP1(*dst++ = *src++);

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 1
	mov	DWORD PTR _dst$[ebp], eax
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 1
	mov	DWORD PTR _src$[ebp], ecx
	mov	eax, DWORD PTR _t$[ebp]
	sub	eax, 1
	mov	DWORD PTR _t$[ebp], eax
	jne	SHORT $LN27@nk_memcopy
$LN31@nk_memcopy:

; 4601 :         }
; 4602 :         t = length / nk_wsize;

	mov	eax, DWORD PTR _length$[ebp]
	shr	eax, 2
	mov	DWORD PTR _t$[ebp], eax

; 4603 :         NK_TLOOP(*(nk_word*)(void*)dst = *(const nk_word*)(const void*)src;
; 4604 :             src += nk_wsize; dst += nk_wsize);

	cmp	DWORD PTR _t$[ebp], 0
	je	SHORT $LN24@nk_memcopy
$LN23@nk_memcopy:
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 4
	mov	DWORD PTR _src$[ebp], eax
	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 4
	mov	DWORD PTR _dst$[ebp], eax
	mov	eax, DWORD PTR _t$[ebp]
	sub	eax, 1
	mov	DWORD PTR _t$[ebp], eax
	jne	SHORT $LN23@nk_memcopy
$LN24@nk_memcopy:

; 4605 :         t = length & nk_wmask;

	mov	eax, DWORD PTR _length$[ebp]
	and	eax, 3
	mov	DWORD PTR _t$[ebp], eax

; 4606 :         NK_TLOOP(*dst++ = *src++);

	je	SHORT $LN20@nk_memcopy
$LN19@nk_memcopy:
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 1
	mov	DWORD PTR _dst$[ebp], eax
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 1
	mov	DWORD PTR _src$[ebp], ecx
	mov	eax, DWORD PTR _t$[ebp]
	sub	eax, 1
	mov	DWORD PTR _t$[ebp], eax
	jne	SHORT $LN19@nk_memcopy
$LN20@nk_memcopy:

; 4607 :     } else {

	jmp	$done$37
$LN32@nk_memcopy:

; 4608 :         src += length;

	mov	eax, DWORD PTR _src$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _src$[ebp], eax

; 4609 :         dst += length;

	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _dst$[ebp], eax

; 4610 :         t = (nk_ptr)src;

	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR _t$[ebp], eax

; 4611 :         if ((t | (nk_ptr)dst) & nk_wmask) {

	mov	eax, DWORD PTR _t$[ebp]
	or	eax, DWORD PTR _dst$[ebp]
	and	eax, 3
	je	SHORT $LN15@nk_memcopy

; 4612 :             if ((t ^ (nk_ptr)dst) & nk_wmask || length <= nk_wsize)

	mov	eax, DWORD PTR _t$[ebp]
	xor	eax, DWORD PTR _dst$[ebp]
	and	eax, 3
	jne	SHORT $LN13@nk_memcopy
	cmp	DWORD PTR _length$[ebp], 4
	ja	SHORT $LN14@nk_memcopy
$LN13@nk_memcopy:

; 4613 :                 t = length;

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _t$[ebp], eax

; 4614 :             else

	jmp	SHORT $LN12@nk_memcopy
$LN14@nk_memcopy:

; 4615 :                 t &= nk_wmask;

	mov	eax, DWORD PTR _t$[ebp]
	and	eax, 3
	mov	DWORD PTR _t$[ebp], eax
$LN12@nk_memcopy:

; 4616 :             length -= t;

	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR _length$[ebp], eax
$LN11@nk_memcopy:

; 4617 :             NK_TLOOP1(*--dst = *--src);

	mov	eax, DWORD PTR _src$[ebp]
	sub	eax, 1
	mov	DWORD PTR _src$[ebp], eax
	mov	ecx, DWORD PTR _dst$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _dst$[ebp], ecx
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _t$[ebp]
	sub	eax, 1
	mov	DWORD PTR _t$[ebp], eax
	jne	SHORT $LN11@nk_memcopy
$LN15@nk_memcopy:

; 4618 :         }
; 4619 :         t = length / nk_wsize;

	mov	eax, DWORD PTR _length$[ebp]
	shr	eax, 2
	mov	DWORD PTR _t$[ebp], eax

; 4620 :         NK_TLOOP(src -= nk_wsize; dst -= nk_wsize;
; 4621 :             *(nk_word*)(void*)dst = *(const nk_word*)(const void*)src);

	cmp	DWORD PTR _t$[ebp], 0
	je	SHORT $LN8@nk_memcopy
$LN7@nk_memcopy:
	mov	eax, DWORD PTR _src$[ebp]
	sub	eax, 4
	mov	DWORD PTR _src$[ebp], eax
	mov	eax, DWORD PTR _dst$[ebp]
	sub	eax, 4
	mov	DWORD PTR _dst$[ebp], eax
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _t$[ebp]
	sub	eax, 1
	mov	DWORD PTR _t$[ebp], eax
	jne	SHORT $LN7@nk_memcopy
$LN8@nk_memcopy:

; 4622 :         t = length & nk_wmask;

	mov	eax, DWORD PTR _length$[ebp]
	and	eax, 3
	mov	DWORD PTR _t$[ebp], eax

; 4623 :         NK_TLOOP(*--dst = *--src);

	je	SHORT $done$37
$LN3@nk_memcopy:
	mov	eax, DWORD PTR _src$[ebp]
	sub	eax, 1
	mov	DWORD PTR _src$[ebp], eax
	mov	ecx, DWORD PTR _dst$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _dst$[ebp], ecx
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _t$[ebp]
	sub	eax, 1
	mov	DWORD PTR _t$[ebp], eax
	jne	SHORT $LN3@nk_memcopy
$done$37:

; 4624 :     }
; 4625 :     #undef nk_word
; 4626 :     #undef nk_wsize
; 4627 :     #undef nk_wmask
; 4628 :     #undef NK_TLOOP
; 4629 :     #undef NK_TLOOP1
; 4630 : done:
; 4631 :     return (dst0);

	mov	eax, DWORD PTR _dst0$[ebp]

; 4632 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_memcopy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_to_lower
_TEXT	SEGMENT
tv67 = -196						; size = 4
_c$ = 8							; size = 4
_nk_to_lower PROC					; COMDAT

; 4575 : NK_INTERN int nk_to_lower(int c) {return (c >= 'A' && c <= 'Z') ? (c - ('a' + 'A')) : c;}

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _c$[ebp], 65			; 00000041H
	jl	SHORT $LN3@nk_to_lowe
	cmp	DWORD PTR _c$[ebp], 90			; 0000005aH
	jg	SHORT $LN3@nk_to_lowe
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 162				; 000000a2H
	mov	DWORD PTR tv67[ebp], eax
	jmp	SHORT $LN4@nk_to_lowe
$LN3@nk_to_lowe:
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR tv67[ebp], ecx
$LN4@nk_to_lowe:
	mov	eax, DWORD PTR tv67[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_to_lower ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_to_upper
_TEXT	SEGMENT
tv67 = -196						; size = 4
_c$ = 8							; size = 4
_nk_to_upper PROC					; COMDAT

; 4574 : NK_INTERN int nk_to_upper(int c) {return (c >= 'a' && c <= 'z') ? (c - ('a' - 'A')) : c;}

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _c$[ebp], 97			; 00000061H
	jl	SHORT $LN3@nk_to_uppe
	cmp	DWORD PTR _c$[ebp], 122			; 0000007aH
	jg	SHORT $LN3@nk_to_uppe
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 32					; 00000020H
	mov	DWORD PTR tv67[ebp], eax
	jmp	SHORT $LN4@nk_to_uppe
$LN3@nk_to_uppe:
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR tv67[ebp], ecx
$LN4@nk_to_uppe:
	mov	eax, DWORD PTR tv67[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_to_upper ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_is_upper
_TEXT	SEGMENT
tv68 = -196						; size = 4
_c$ = 8							; size = 4
_nk_is_upper PROC					; COMDAT

; 4573 : NK_INTERN int nk_is_upper(int c){return (c >= 'A' && c <= 'Z') || (c >= 0xC0 && c <= 0xDF);}

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _c$[ebp], 65			; 00000041H
	jl	SHORT $LN3@nk_is_uppe
	cmp	DWORD PTR _c$[ebp], 90			; 0000005aH
	jle	SHORT $LN5@nk_is_uppe
$LN3@nk_is_uppe:
	cmp	DWORD PTR _c$[ebp], 192			; 000000c0H
	jl	SHORT $LN4@nk_is_uppe
	cmp	DWORD PTR _c$[ebp], 223			; 000000dfH
	jle	SHORT $LN5@nk_is_uppe
$LN4@nk_is_uppe:
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN6@nk_is_uppe
$LN5@nk_is_uppe:
	mov	DWORD PTR tv68[ebp], 1
$LN6@nk_is_uppe:
	mov	eax, DWORD PTR tv68[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_is_upper ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_is_lower
_TEXT	SEGMENT
tv68 = -196						; size = 4
_c$ = 8							; size = 4
_nk_is_lower PROC					; COMDAT

; 4572 : NK_INTERN int nk_is_lower(int c) {return (c >= 'a' && c <= 'z') || (c >= 0xE0 && c <= 0xFF);}

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _c$[ebp], 97			; 00000061H
	jl	SHORT $LN3@nk_is_lowe
	cmp	DWORD PTR _c$[ebp], 122			; 0000007aH
	jle	SHORT $LN5@nk_is_lowe
$LN3@nk_is_lowe:
	cmp	DWORD PTR _c$[ebp], 224			; 000000e0H
	jl	SHORT $LN4@nk_is_lowe
	cmp	DWORD PTR _c$[ebp], 255			; 000000ffH
	jle	SHORT $LN5@nk_is_lowe
$LN4@nk_is_lowe:
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN6@nk_is_lowe
$LN5@nk_is_lowe:
	mov	DWORD PTR tv68[ebp], 1
$LN6@nk_is_lowe:
	mov	eax, DWORD PTR tv68[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_is_lower ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_match_star
_TEXT	SEGMENT
tv75 = -204						; size = 4
tv74 = -200						; size = 4
tv73 = -196						; size = 4
_c$ = 8							; size = 4
_regexp$ = 12						; size = 4
_text$ = 16						; size = 4
_nk_str_match_star PROC					; COMDAT

; 4860 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN5@nk_str_mat:

; 4861 :     do {/* a '* matches zero or more instances */
; 4862 :         if (nk_str_match_here(regexp, text))

	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	_nk_str_match_here
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@nk_str_mat

; 4863 :             return 1;

	mov	eax, 1
	jmp	SHORT $LN6@nk_str_mat
$LN4@nk_str_mat:

; 4864 :     } while (*text != '\0' && (*text++ == c || c == '.'));

	mov	eax, DWORD PTR _text$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@nk_str_mat
	mov	eax, DWORD PTR _text$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv73[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR tv74[ebp], edx
	mov	eax, DWORD PTR _text$[ebp]
	add	eax, 1
	mov	DWORD PTR _text$[ebp], eax
	mov	ecx, DWORD PTR tv73[ebp]
	cmp	ecx, DWORD PTR tv74[ebp]
	jne	SHORT $LN8@nk_str_mat
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN9@nk_str_mat
$LN8@nk_str_mat:
	mov	DWORD PTR tv75[ebp], 0
$LN9@nk_str_mat:
	cmp	DWORD PTR tv75[ebp], 0
	jne	SHORT $LN5@nk_str_mat
	cmp	DWORD PTR _c$[ebp], 46			; 0000002eH
	je	SHORT $LN5@nk_str_mat
$LN3@nk_str_mat:

; 4865 :     return 0;

	xor	eax, eax
$LN6@nk_str_mat:

; 4866 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_match_star ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_match_here
_TEXT	SEGMENT
tv90 = -196						; size = 4
_regexp$ = 8						; size = 4
_text$ = 12						; size = 4
_nk_str_match_here PROC					; COMDAT

; 4846 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4847 :     if (regexp[0] == '\0')

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _regexp$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN5@nk_str_mat

; 4848 :         return 1;

	mov	eax, 1
	jmp	$LN6@nk_str_mat
$LN5@nk_str_mat:

; 4849 :     if (regexp[1] == '*')

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _regexp$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 42					; 0000002aH
	jne	SHORT $LN4@nk_str_mat

; 4850 :         return nk_str_match_star(regexp[0], regexp+2, text);

	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _regexp$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	push	edx
	call	_nk_str_match_star
	add	esp, 12					; 0000000cH
	jmp	$LN6@nk_str_mat
$LN4@nk_str_mat:

; 4851 :     if (regexp[0] == '$' && regexp[1] == '\0')

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _regexp$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 36					; 00000024H
	jne	SHORT $LN3@nk_str_mat
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _regexp$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN3@nk_str_mat

; 4852 :         return *text == '\0';

	mov	eax, DWORD PTR _text$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN8@nk_str_mat
	mov	DWORD PTR tv90[ebp], 1
	jmp	SHORT $LN9@nk_str_mat
$LN8@nk_str_mat:
	mov	DWORD PTR tv90[ebp], 0
$LN9@nk_str_mat:
	mov	eax, DWORD PTR tv90[ebp]
	jmp	SHORT $LN6@nk_str_mat
$LN3@nk_str_mat:

; 4853 :     if (*text!='\0' && (regexp[0]=='.' || regexp[0]==*text))

	mov	eax, DWORD PTR _text$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@nk_str_mat
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _regexp$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 46					; 0000002eH
	je	SHORT $LN1@nk_str_mat
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _regexp$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _text$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	jne	SHORT $LN2@nk_str_mat
$LN1@nk_str_mat:

; 4854 :         return nk_str_match_here(regexp+1, text+1);

	mov	eax, DWORD PTR _text$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	add	ecx, 1
	push	ecx
	call	_nk_str_match_here
	add	esp, 8
	jmp	SHORT $LN6@nk_str_mat
$LN2@nk_str_mat:

; 4855 :     return 0;

	xor	eax, eax
$LN6@nk_str_mat:

; 4856 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_match_here ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_pad_rect
_TEXT	SEGMENT
tv75 = -196						; size = 4
tv69 = -196						; size = 4
$T1 = 8							; size = 4
_r$ = 12						; size = 16
_pad$ = 28						; size = 8
_nk_pad_rect PROC					; COMDAT

; 4525 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4526 :     r.w = NK_MAX(r.w, 2 * pad.x);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _pad$[ebp]
	comiss	xmm0, DWORD PTR _r$[ebp+8]
	jbe	SHORT $LN3@nk_pad_rec
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _pad$[ebp]
	movss	DWORD PTR tv69[ebp], xmm0
	jmp	SHORT $LN4@nk_pad_rec
$LN3@nk_pad_rec:
	movss	xmm0, DWORD PTR _r$[ebp+8]
	movss	DWORD PTR tv69[ebp], xmm0
$LN4@nk_pad_rec:
	movss	xmm0, DWORD PTR tv69[ebp]
	movss	DWORD PTR _r$[ebp+8], xmm0

; 4527 :     r.h = NK_MAX(r.h, 2 * pad.y);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _pad$[ebp+4]
	comiss	xmm0, DWORD PTR _r$[ebp+12]
	jbe	SHORT $LN5@nk_pad_rec
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _pad$[ebp+4]
	movss	DWORD PTR tv75[ebp], xmm0
	jmp	SHORT $LN6@nk_pad_rec
$LN5@nk_pad_rec:
	movss	xmm0, DWORD PTR _r$[ebp+12]
	movss	DWORD PTR tv75[ebp], xmm0
$LN6@nk_pad_rec:
	movss	xmm0, DWORD PTR tv75[ebp]
	movss	DWORD PTR _r$[ebp+12], xmm0

; 4528 :     r.x += pad.x; r.y += pad.y;

	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR _pad$[ebp]
	movss	DWORD PTR _r$[ebp], xmm0
	movss	xmm0, DWORD PTR _r$[ebp+4]
	addss	xmm0, DWORD PTR _pad$[ebp+4]
	movss	DWORD PTR _r$[ebp+4], xmm0

; 4529 :     r.w -= 2 * pad.x;

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _pad$[ebp]
	movss	xmm1, DWORD PTR _r$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _r$[ebp+8], xmm1

; 4530 :     r.h -= 2 * pad.y;

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _pad$[ebp+4]
	movss	xmm1, DWORD PTR _r$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _r$[ebp+12], xmm1

; 4531 :     return r;

	mov	eax, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T1[ebp]

; 4532 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_pad_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_shrink_rect
_TEXT	SEGMENT
tv75 = -224						; size = 4
tv69 = -224						; size = 4
_res$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_r$ = 12						; size = 16
_amount$ = 28						; size = 4
_nk_shrink_rect PROC					; COMDAT

; 4512 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 4513 :     struct nk_rect res;
; 4514 :     r.w = NK_MAX(r.w, 2 * amount);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _amount$[ebp]
	comiss	xmm0, DWORD PTR _r$[ebp+8]
	jbe	SHORT $LN3@nk_shrink_
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _amount$[ebp]
	movss	DWORD PTR tv69[ebp], xmm0
	jmp	SHORT $LN4@nk_shrink_
$LN3@nk_shrink_:
	movss	xmm0, DWORD PTR _r$[ebp+8]
	movss	DWORD PTR tv69[ebp], xmm0
$LN4@nk_shrink_:
	movss	xmm0, DWORD PTR tv69[ebp]
	movss	DWORD PTR _r$[ebp+8], xmm0

; 4515 :     r.h = NK_MAX(r.h, 2 * amount);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _amount$[ebp]
	comiss	xmm0, DWORD PTR _r$[ebp+12]
	jbe	SHORT $LN5@nk_shrink_
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _amount$[ebp]
	movss	DWORD PTR tv75[ebp], xmm0
	jmp	SHORT $LN6@nk_shrink_
$LN5@nk_shrink_:
	movss	xmm0, DWORD PTR _r$[ebp+12]
	movss	DWORD PTR tv75[ebp], xmm0
$LN6@nk_shrink_:
	movss	xmm0, DWORD PTR tv75[ebp]
	movss	DWORD PTR _r$[ebp+12], xmm0

; 4516 :     res.x = r.x + amount;

	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR _amount$[ebp]
	movss	DWORD PTR _res$[ebp], xmm0

; 4517 :     res.y = r.y + amount;

	movss	xmm0, DWORD PTR _r$[ebp+4]
	addss	xmm0, DWORD PTR _amount$[ebp]
	movss	DWORD PTR _res$[ebp+4], xmm0

; 4518 :     res.w = r.w - 2 * amount;

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _amount$[ebp]
	movss	xmm1, DWORD PTR _r$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _res$[ebp+8], xmm1

; 4519 :     res.h = r.h - 2 * amount;

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _amount$[ebp]
	movss	xmm1, DWORD PTR _r$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _res$[ebp+12], xmm1

; 4520 :     return res;

	mov	eax, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _res$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _res$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _res$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T1[ebp]

; 4521 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@nk_shrink_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@nk_shrink_:
	DD	1
	DD	$LN8@nk_shrink_
$LN8@nk_shrink_:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN7@nk_shrink_
$LN7@nk_shrink_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_nk_shrink_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_round_up_pow2
_TEXT	SEGMENT
_v$ = 8							; size = 4
_nk_round_up_pow2 PROC					; COMDAT

; 4439 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4440 :     v--;

	mov	eax, DWORD PTR _v$[ebp]
	sub	eax, 1
	mov	DWORD PTR _v$[ebp], eax

; 4441 :     v |= v >> 1;

	mov	eax, DWORD PTR _v$[ebp]
	shr	eax, 1
	or	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 4442 :     v |= v >> 2;

	mov	eax, DWORD PTR _v$[ebp]
	shr	eax, 2
	or	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 4443 :     v |= v >> 4;

	mov	eax, DWORD PTR _v$[ebp]
	shr	eax, 4
	or	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 4444 :     v |= v >> 8;

	mov	eax, DWORD PTR _v$[ebp]
	shr	eax, 8
	or	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 4445 :     v |= v >> 16;

	mov	eax, DWORD PTR _v$[ebp]
	shr	eax, 16					; 00000010H
	or	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 4446 :     v++;

	mov	eax, DWORD PTR _v$[ebp]
	add	eax, 1
	mov	DWORD PTR _v$[ebp], eax

; 4447 :     return v;

	mov	eax, DWORD PTR _v$[ebp]

; 4448 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_round_up_pow2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_cos
_TEXT	SEGMENT
tv131 = -196						; size = 4
_x$ = 8							; size = 4
_nk_cos	PROC						; COMDAT

; 4425 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4426 :     NK_STORAGE const float a0 = +1.00238601909309722f;
; 4427 :     NK_STORAGE const float a1 = -3.81919947353040024e-2f;
; 4428 :     NK_STORAGE const float a2 = -3.94382342128062756e-1f;
; 4429 :     NK_STORAGE const float a3 = -1.18134036025221444e-1f;
; 4430 :     NK_STORAGE const float a4 = +1.07123798512170878e-1f;
; 4431 :     NK_STORAGE const float a5 = -1.86637164165180873e-2f;
; 4432 :     NK_STORAGE const float a6 = +9.90140908664079833e-4f;
; 4433 :     NK_STORAGE const float a7 = -5.23022132118824778e-14f;
; 4434 :     return a0 + x*(a1 + x*(a2 + x*(a3 + x*(a4 + x*(a5 + x*(a6 + x*a7))))));

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR ?a7@?1??nk_cos@@9@9
	addss	xmm0, DWORD PTR ?a6@?1??nk_cos@@9@9
	mulss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR ?a5@?1??nk_cos@@9@9
	mulss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR ?a4@?1??nk_cos@@9@9
	mulss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR ?a3@?1??nk_cos@@9@9
	mulss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR ?a2@?1??nk_cos@@9@9
	mulss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR ?a1@?1??nk_cos@@9@9
	mulss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR ?a0@?1??nk_cos@@9@9
	movss	DWORD PTR tv131[ebp], xmm0
	fld	DWORD PTR tv131[ebp]

; 4435 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_cos	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_sin
_TEXT	SEGMENT
tv131 = -196						; size = 4
_x$ = 8							; size = 4
_nk_sin	PROC						; COMDAT

; 4411 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4412 :     NK_STORAGE const float a0 = +1.91059300966915117e-31f;
; 4413 :     NK_STORAGE const float a1 = +1.00086760103908896f;
; 4414 :     NK_STORAGE const float a2 = -1.21276126894734565e-2f;
; 4415 :     NK_STORAGE const float a3 = -1.38078780785773762e-1f;
; 4416 :     NK_STORAGE const float a4 = -2.67353392911981221e-2f;
; 4417 :     NK_STORAGE const float a5 = +2.08026600266304389e-2f;
; 4418 :     NK_STORAGE const float a6 = -3.03996055049204407e-3f;
; 4419 :     NK_STORAGE const float a7 = +1.38235642404333740e-4f;
; 4420 :     return a0 + x*(a1 + x*(a2 + x*(a3 + x*(a4 + x*(a5 + x*(a6 + x*a7))))));

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR ?a7@?1??nk_sin@@9@9
	addss	xmm0, DWORD PTR ?a6@?1??nk_sin@@9@9
	mulss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR ?a5@?1??nk_sin@@9@9
	mulss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR ?a4@?1??nk_sin@@9@9
	mulss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR ?a3@?1??nk_sin@@9@9
	mulss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR ?a2@?1??nk_sin@@9@9
	mulss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR ?a1@?1??nk_sin@@9@9
	mulss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR ?a0@?1??nk_sin@@9@9
	movss	DWORD PTR tv131[ebp], xmm0
	fld	DWORD PTR tv131[ebp]

; 4421 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_sin	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_sqrt
_TEXT	SEGMENT
tv76 = -200						; size = 4
tv73 = -196						; size = 4
_x$ = 8							; size = 4
_nk_sqrt PROC						; COMDAT

; 4405 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4406 :     return x * nk_inv_sqrt(x);

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_inv_sqrt
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR tv73[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 4407 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_sqrt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_inv_sqrt
_TEXT	SEGMENT
_conv$ = -32						; size = 4
_threehalfs$ = -20					; size = 4
_x2$ = -8						; size = 4
_number$ = 8						; size = 4
_nk_inv_sqrt PROC					; COMDAT

; 4392 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4393 :     float x2;
; 4394 :     const float threehalfs = 1.5f;

	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR _threehalfs$[ebp], xmm0

; 4395 :     union {nk_uint i; float f;} conv = {0};

	mov	DWORD PTR _conv$[ebp], 0

; 4396 :     conv.f = number;

	movss	xmm0, DWORD PTR _number$[ebp]
	movss	DWORD PTR _conv$[ebp], xmm0

; 4397 :     x2 = number * 0.5f;

	movss	xmm0, DWORD PTR _number$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _x2$[ebp], xmm0

; 4398 :     conv.i = 0x5f375A84 - (conv.i >> 1);

	mov	eax, DWORD PTR _conv$[ebp]
	shr	eax, 1
	mov	ecx, 1597463172				; 5f375a84H
	sub	ecx, eax
	mov	DWORD PTR _conv$[ebp], ecx

; 4399 :     conv.f = conv.f * (threehalfs - (x2 * conv.f * conv.f));

	movss	xmm0, DWORD PTR _x2$[ebp]
	mulss	xmm0, DWORD PTR _conv$[ebp]
	mulss	xmm0, DWORD PTR _conv$[ebp]
	movss	xmm1, DWORD PTR _threehalfs$[ebp]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _conv$[ebp]
	movss	DWORD PTR _conv$[ebp], xmm1

; 4400 :     return conv.f;

	fld	DWORD PTR _conv$[ebp]

; 4401 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_inv_sqr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@nk_inv_sqr:
	DD	1
	DD	$LN4@nk_inv_sqr
$LN4@nk_inv_sqr:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN3@nk_inv_sqr
$LN3@nk_inv_sqr:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	0
_nk_inv_sqrt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_item_hide
_TEXT	SEGMENT
_i$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_nk_style_item_hide PROC				; COMDAT

; 16461: {struct nk_style_item i; i.type = NK_STYLE_ITEM_COLOR; i.data.color = nk_rgba(0,0,0,0); return i;}

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _i$[ebp], 0
	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	DWORD PTR _i$[ebp+4], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _i$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _i$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _i$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _i$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	eax, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_style_i
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@nk_style_i:
	DD	1
	DD	$LN4@nk_style_i
$LN4@nk_style_i:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN3@nk_style_i
$LN3@nk_style_i:
	DB	105					; 00000069H
	DB	0
_nk_style_item_hide ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_item_color
_TEXT	SEGMENT
_i$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_col$ = 12						; size = 4
_nk_style_item_color PROC				; COMDAT

; 16458: {struct nk_style_item i; i.type = NK_STYLE_ITEM_COLOR; i.data.color = col; return i;}

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _col$[ebp]
	mov	DWORD PTR _i$[ebp+4], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _i$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _i$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _i$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _i$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	eax, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_style_i
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@nk_style_i:
	DD	1
	DD	$LN4@nk_style_i
$LN4@nk_style_i:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN3@nk_style_i
$LN3@nk_style_i:
	DB	105					; 00000069H
	DB	0
_nk_style_item_color ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_item_image
_TEXT	SEGMENT
_i$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_img$ = 12						; size = 16
_nk_style_item_image PROC				; COMDAT

; 16455: {struct nk_style_item i; i.type = NK_STYLE_ITEM_IMAGE; i.data.image = img; return i;}

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _i$[ebp], 1
	mov	eax, DWORD PTR _img$[ebp]
	mov	DWORD PTR _i$[ebp+4], eax
	mov	ecx, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR _i$[ebp+8], ecx
	mov	edx, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR _i$[ebp+12], edx
	mov	eax, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR _i$[ebp+16], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _i$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _i$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _i$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _i$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	eax, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_style_i
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@nk_style_i:
	DD	1
	DD	$LN4@nk_style_i
$LN4@nk_style_i:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN3@nk_style_i
$LN3@nk_style_i:
	DB	105					; 00000069H
	DB	0
_nk_style_item_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_add_text
_TEXT	SEGMENT
tv149 = -376						; size = 4
_char_width$1 = -176					; size = 4
_gw$2 = -164						; size = 4
_gh$3 = -152						; size = 4
_gy$4 = -140						; size = 4
_gx$5 = -128						; size = 4
_g$ = -116						; size = 36
_next_glyph_len$ = -72					; size = 4
_glyph_len$ = -60					; size = 4
_next$ = -48						; size = 4
_unicode$ = -36						; size = 4
_text_len$ = -24					; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_list$ = 8						; size = 4
_font$ = 12						; size = 4
_rect$ = 16						; size = 16
_text$ = 32						; size = 4
_len$ = 36						; size = 4
_font_height$ = 40					; size = 4
_fg$ = 44						; size = 4
_nk_draw_list_add_text PROC				; COMDAT

; 8908 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 8909 :     float x = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _x$[ebp], xmm0

; 8910 :     int text_len = 0;

	mov	DWORD PTR _text_len$[ebp], 0

; 8911 :     nk_rune unicode = 0;

	mov	DWORD PTR _unicode$[ebp], 0

; 8912 :     nk_rune next = 0;

	mov	DWORD PTR _next$[ebp], 0

; 8913 :     int glyph_len = 0;

	mov	DWORD PTR _glyph_len$[ebp], 0

; 8914 :     int next_glyph_len = 0;

	mov	DWORD PTR _next_glyph_len$[ebp], 0

; 8915 :     struct nk_user_font_glyph g;
; 8916 : 
; 8917 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN11@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_add_text@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_draw_li:

; 8918 :     if (!list || !len || !text) return;

	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN7@nk_draw_li
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN7@nk_draw_li
	cmp	DWORD PTR _text$[ebp], 0
	jne	SHORT $LN8@nk_draw_li
$LN7@nk_draw_li:
	jmp	$LN2@nk_draw_li
$LN8@nk_draw_li:

; 8919 :     if (!NK_INTERSECT(rect.x, rect.y, rect.w, rect.h,
; 8920 :         list->clip_rect.x, list->clip_rect.y, list->clip_rect.w, list->clip_rect.h)) return;

	movss	xmm0, DWORD PTR _rect$[ebp]
	addss	xmm0, DWORD PTR _rect$[ebp+8]
	mov	eax, DWORD PTR _list$[ebp]
	movss	xmm1, DWORD PTR [eax]
	comiss	xmm1, xmm0
	ja	SHORT $LN5@nk_draw_li
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR _list$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR _rect$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN5@nk_draw_li
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	addss	xmm0, DWORD PTR _rect$[ebp+12]
	mov	eax, DWORD PTR _list$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN5@nk_draw_li
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR _list$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	xmm1, DWORD PTR _rect$[ebp+4]
	comiss	xmm1, xmm0
	jbe	SHORT $LN6@nk_draw_li
$LN5@nk_draw_li:
	jmp	$LN2@nk_draw_li
$LN6@nk_draw_li:

; 8921 : 
; 8922 :     nk_draw_list_push_image(list, font->texture);

	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_nk_draw_list_push_image
	add	esp, 8

; 8923 :     x = rect.x;

	movss	xmm0, DWORD PTR _rect$[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 8924 :     glyph_len = nk_utf_decode(text, &unicode, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax

; 8925 :     if (!glyph_len) return;

	cmp	DWORD PTR _glyph_len$[ebp], 0
	jne	SHORT $LN4@nk_draw_li
	jmp	$LN2@nk_draw_li
$LN4@nk_draw_li:

; 8926 : 
; 8927 :     /* draw every glyph image */
; 8928 :     fg.a = (nk_byte)((float)fg.a * list->config.global_alpha);

	movzx	eax, BYTE PTR _fg$[ebp+3]
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _list$[ebp]
	mulss	xmm0, DWORD PTR [ecx+112]
	cvttss2si edx, xmm0
	mov	BYTE PTR _fg$[ebp+3], dl
$LN3@nk_draw_li:

; 8929 :     while (text_len < len && glyph_len) {

	mov	eax, DWORD PTR _text_len$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	$LN2@nk_draw_li
	cmp	DWORD PTR _glyph_len$[ebp], 0
	je	$LN2@nk_draw_li

; 8930 :         float gx, gy, gh, gw;
; 8931 :         float char_width = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _char_width$1[ebp], xmm0

; 8932 :         if (unicode == NK_UTF_INVALID) break;

	cmp	DWORD PTR _unicode$[ebp], 65533		; 0000fffdH
	jne	SHORT $LN1@nk_draw_li
	jmp	$LN2@nk_draw_li
$LN1@nk_draw_li:

; 8933 : 
; 8934 :         /* query currently drawn glyph information */
; 8935 :         next_glyph_len = nk_utf_decode(text + text_len + glyph_len, &next, (int)len - text_len);

	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR _text_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _next$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	add	edx, DWORD PTR _text_len$[ebp]
	add	edx, DWORD PTR _glyph_len$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _next_glyph_len$[ebp], eax

; 8936 :         font->query(font->userdata, font_height, &g, unicode,
; 8937 :                     (next == NK_UTF_INVALID) ? '\0' : next);

	cmp	DWORD PTR _next$[ebp], 65533		; 0000fffdH
	jne	SHORT $LN12@nk_draw_li
	mov	DWORD PTR tv149[ebp], 0
	jmp	SHORT $LN13@nk_draw_li
$LN12@nk_draw_li:
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR tv149[ebp], eax
$LN13@nk_draw_li:
	mov	esi, esp
	mov	ecx, DWORD PTR tv149[ebp]
	push	ecx
	mov	edx, DWORD PTR _unicode$[ebp]
	push	edx
	lea	eax, DWORD PTR _g$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _font_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 8938 : 
; 8939 :         /* calculate and draw glyph drawing rectangle and image */
; 8940 :         gx = x + g.offset.x;

	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR _g$[ebp+16]
	movss	DWORD PTR _gx$5[ebp], xmm0

; 8941 :         gy = rect.y + g.offset.y;

	movss	xmm0, DWORD PTR _rect$[ebp+4]
	addss	xmm0, DWORD PTR _g$[ebp+20]
	movss	DWORD PTR _gy$4[ebp], xmm0

; 8942 :         gw = g.width; gh = g.height;

	movss	xmm0, DWORD PTR _g$[ebp+24]
	movss	DWORD PTR _gw$2[ebp], xmm0
	movss	xmm0, DWORD PTR _g$[ebp+28]
	movss	DWORD PTR _gh$3[ebp], xmm0

; 8943 :         char_width = g.xadvance;

	movss	xmm0, DWORD PTR _g$[ebp+32]
	movss	DWORD PTR _char_width$1[ebp], xmm0

; 8944 :         nk_draw_list_push_rect_uv(list, nk_vec2(gx,gy), nk_vec2(gx + gw, gy+ gh),
; 8945 :             g.uv[0], g.uv[1], fg);

	mov	eax, DWORD PTR _fg$[ebp]
	push	eax
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _g$[ebp+ecx+4]
	push	edx
	mov	eax, DWORD PTR _g$[ebp+ecx]
	push	eax
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _g$[ebp+edx+4]
	push	eax
	mov	ecx, DWORD PTR _g$[ebp+edx]
	push	ecx
	movss	xmm0, DWORD PTR _gy$4[ebp]
	addss	xmm0, DWORD PTR _gh$3[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _gx$5[ebp]
	addss	xmm0, DWORD PTR _gw$2[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _gy$4[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _gx$5[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_nk_draw_list_push_rect_uv
	add	esp, 40					; 00000028H

; 8946 : 
; 8947 :         /* offset next glyph */
; 8948 :         text_len += glyph_len;

	mov	eax, DWORD PTR _text_len$[ebp]
	add	eax, DWORD PTR _glyph_len$[ebp]
	mov	DWORD PTR _text_len$[ebp], eax

; 8949 :         x += char_width;

	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR _char_width$1[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 8950 :         glyph_len = next_glyph_len;

	mov	eax, DWORD PTR _next_glyph_len$[ebp]
	mov	DWORD PTR _glyph_len$[ebp], eax

; 8951 :         unicode = next;

	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR _unicode$[ebp], eax

; 8952 :     }

	jmp	$LN3@nk_draw_li
$LN2@nk_draw_li:

; 8953 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@nk_draw_li
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN18@nk_draw_li:
	DD	3
	DD	$LN17@nk_draw_li
$LN17@nk_draw_li:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN14@nk_draw_li
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN15@nk_draw_li
	DD	-116					; ffffff8cH
	DD	36					; 00000024H
	DD	$LN16@nk_draw_li
$LN16@nk_draw_li:
	DB	103					; 00000067H
	DB	0
$LN15@nk_draw_li:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN14@nk_draw_li:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_nk_draw_list_add_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_add_image
_TEXT	SEGMENT
_uv$1 = -20						; size = 16
_list$ = 8						; size = 4
_texture$ = 12						; size = 16
_rect$ = 28						; size = 16
_color$ = 44						; size = 4
_nk_draw_list_add_image PROC				; COMDAT

; 8885 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8886 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN6@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_add_image@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_draw_li:

; 8887 :     if (!list) return;

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN3@nk_draw_li
	jmp	$LN1@nk_draw_li
$LN3@nk_draw_li:

; 8888 :     /* push new command with given texture */
; 8889 :     nk_draw_list_push_image(list, texture.handle);

	mov	eax, DWORD PTR _texture$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_push_image
	add	esp, 8

; 8890 :     if (nk_image_is_subimage(&texture)) {

	lea	eax, DWORD PTR _texture$[ebp]
	push	eax
	call	_nk_image_is_subimage
	add	esp, 4
	test	eax, eax
	je	$LN2@nk_draw_li

; 8891 :         /* add region inside of the texture  */
; 8892 :         struct nk_vec2 uv[2];
; 8893 :         uv[0].x = (float)texture.region[0]/(float)texture.w;

	mov	eax, 2
	imul	ecx, eax, 0
	movzx	edx, WORD PTR _texture$[ebp+ecx+8]
	cvtsi2ss xmm0, edx
	movzx	eax, WORD PTR _texture$[ebp+4]
	cvtsi2ss xmm1, eax
	divss	xmm0, xmm1
	mov	ecx, 8
	imul	edx, ecx, 0
	movss	DWORD PTR _uv$1[ebp+edx], xmm0

; 8894 :         uv[0].y = (float)texture.region[1]/(float)texture.h;

	mov	eax, 2
	shl	eax, 0
	movzx	ecx, WORD PTR _texture$[ebp+eax+8]
	cvtsi2ss xmm0, ecx
	movzx	edx, WORD PTR _texture$[ebp+6]
	cvtsi2ss xmm1, edx
	divss	xmm0, xmm1
	mov	eax, 8
	imul	ecx, eax, 0
	movss	DWORD PTR _uv$1[ebp+ecx+4], xmm0

; 8895 :         uv[1].x = (float)(texture.region[0] + texture.region[2])/(float)texture.w;

	mov	eax, 2
	imul	ecx, eax, 0
	movzx	edx, WORD PTR _texture$[ebp+ecx+8]
	mov	eax, 2
	shl	eax, 1
	movzx	ecx, WORD PTR _texture$[ebp+eax+8]
	add	edx, ecx
	cvtsi2ss xmm0, edx
	movzx	edx, WORD PTR _texture$[ebp+4]
	cvtsi2ss xmm1, edx
	divss	xmm0, xmm1
	mov	eax, 8
	shl	eax, 0
	movss	DWORD PTR _uv$1[ebp+eax], xmm0

; 8896 :         uv[1].y = (float)(texture.region[1] + texture.region[3])/(float)texture.h;

	mov	eax, 2
	shl	eax, 0
	movzx	ecx, WORD PTR _texture$[ebp+eax+8]
	mov	edx, 2
	imul	eax, edx, 3
	movzx	edx, WORD PTR _texture$[ebp+eax+8]
	add	ecx, edx
	cvtsi2ss xmm0, ecx
	movzx	eax, WORD PTR _texture$[ebp+6]
	cvtsi2ss xmm1, eax
	divss	xmm0, xmm1
	mov	ecx, 8
	shl	ecx, 0
	movss	DWORD PTR _uv$1[ebp+ecx+4], xmm0

; 8897 :         nk_draw_list_push_rect_uv(list, nk_vec2(rect.x, rect.y),
; 8898 :             nk_vec2(rect.x + rect.w, rect.y + rect.h),  uv[0], uv[1], color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _uv$1[ebp+ecx+4]
	push	edx
	mov	eax, DWORD PTR _uv$1[ebp+ecx]
	push	eax
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _uv$1[ebp+edx+4]
	push	eax
	mov	ecx, DWORD PTR _uv$1[ebp+edx]
	push	ecx
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	addss	xmm0, DWORD PTR _rect$[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rect$[ebp]
	addss	xmm0, DWORD PTR _rect$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rect$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_nk_draw_list_push_rect_uv
	add	esp, 40					; 00000028H

; 8899 :     } else nk_draw_list_push_rect_uv(list, nk_vec2(rect.x, rect.y),

	jmp	$LN1@nk_draw_li
$LN2@nk_draw_li:

; 8900 :             nk_vec2(rect.x + rect.w, rect.y + rect.h),
; 8901 :             nk_vec2(0.0f, 0.0f), nk_vec2(1.0f, 1.0f),color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	addss	xmm0, DWORD PTR _rect$[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rect$[ebp]
	addss	xmm0, DWORD PTR _rect$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rect$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_push_rect_uv
	add	esp, 40					; 00000028H
$LN1@nk_draw_li:

; 8902 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@nk_draw_li
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@nk_draw_li:
	DD	1
	DD	$LN8@nk_draw_li
$LN8@nk_draw_li:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN7@nk_draw_li
$LN7@nk_draw_li:
	DB	117					; 00000075H
	DB	118					; 00000076H
	DB	0
_nk_draw_list_add_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_fill_poly_convex
_TEXT	SEGMENT
tv264 = -668						; size = 4
$T1 = -660						; size = 8
$T2 = -644						; size = 8
_ids$3 = -436						; size = 4
_vtx$4 = -424						; size = 4
_vtx_count$5 = -412					; size = 4
_idx_count$6 = -400					; size = 4
_index$7 = -388						; size = 4
_i$8 = -376						; size = 4
_scale$9 = -364						; size = 4
_dmr2$10 = -352						; size = 4
_dm$11 = -340						; size = 8
_n1$12 = -324						; size = 8
_n0$13 = -308						; size = 8
_uv$14 = -292						; size = 8
_len$15 = -276						; size = 4
_diff$16 = -264						; size = 8
_p1$17 = -248						; size = 8
_p0$18 = -232						; size = 8
_vtx_outer_idx$19 = -216				; size = 4
_vtx_inner_idx$20 = -204				; size = 4
_normals$21 = -192					; size = 4
_size$22 = -180						; size = 4
_ids$23 = -168						; size = 4
_vtx$24 = -156						; size = 4
_vtx_count$25 = -144					; size = 4
_idx_count$26 = -132					; size = 4
_index$27 = -120					; size = 4
_vertex_offset$28 = -108				; size = 4
_AA_SIZE$29 = -96					; size = 4
_i1$30 = -84						; size = 4
_i0$31 = -72						; size = 4
_i$32 = -60						; size = 4
_col_trans$ = -48					; size = 16
_col$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_list$ = 8						; size = 4
_points$ = 12						; size = 4
_points_count$ = 16					; size = 4
_color$ = 20						; size = 4
_aliasing$ = 24						; size = 4
_nk_draw_list_fill_poly_convex PROC			; COMDAT

; 8412 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 668				; 0000029cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-668]
	mov	ecx, 167				; 000000a7H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 8413 :     struct nk_colorf col;
; 8414 :     struct nk_colorf col_trans;
; 8415 : 
; 8416 :     NK_STORAGE const nk_size pnt_align = NK_ALIGNOF(struct nk_vec2);
; 8417 :     NK_STORAGE const nk_size pnt_size = sizeof(struct nk_vec2);
; 8418 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN30@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_fill_poly_convex@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN30@nk_draw_li:

; 8419 :     if (!list || points_count < 3) return;

	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN26@nk_draw_li
	cmp	DWORD PTR _points_count$[ebp], 3
	jae	SHORT $LN27@nk_draw_li
$LN26@nk_draw_li:
	jmp	$LN1@nk_draw_li
$LN27@nk_draw_li:

; 8420 : 
; 8421 : #ifdef NK_INCLUDE_COMMAND_USERDATA
; 8422 :     nk_draw_list_push_userdata(list, list->userdata);
; 8423 : #endif
; 8424 : 
; 8425 :     color.a = (nk_byte)((float)color.a * list->config.global_alpha);

	movzx	eax, BYTE PTR _color$[ebp+3]
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _list$[ebp]
	mulss	xmm0, DWORD PTR [ecx+112]
	cvttss2si edx, xmm0
	mov	BYTE PTR _color$[ebp+3], dl

; 8426 :     nk_color_fv(&col.r, color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	lea	ecx, DWORD PTR _col$[ebp]
	push	ecx
	call	_nk_color_fv
	add	esp, 8

; 8427 :     col_trans = col;

	mov	eax, DWORD PTR _col$[ebp]
	mov	DWORD PTR _col_trans$[ebp], eax
	mov	ecx, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR _col_trans$[ebp+4], ecx
	mov	edx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR _col_trans$[ebp+8], edx
	mov	eax, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR _col_trans$[ebp+12], eax

; 8428 :     col_trans.a = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _col_trans$[ebp+12], xmm0

; 8429 : 
; 8430 :     if (aliasing == NK_ANTI_ALIASING_ON) {

	cmp	DWORD PTR _aliasing$[ebp], 1
	jne	$LN25@nk_draw_li

; 8431 :         nk_size i = 0;

	mov	DWORD PTR _i$32[ebp], 0

; 8432 :         nk_size i0 = 0;

	mov	DWORD PTR _i0$31[ebp], 0

; 8433 :         nk_size i1 = 0;

	mov	DWORD PTR _i1$30[ebp], 0

; 8434 : 
; 8435 :         const float AA_SIZE = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _AA_SIZE$29[ebp], xmm0

; 8436 :         nk_size vertex_offset = 0;

	mov	DWORD PTR _vertex_offset$28[ebp], 0

; 8437 :         nk_size index = list->vertex_count;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	DWORD PTR _index$27[ebp], ecx

; 8438 : 
; 8439 :         const nk_size idx_count = (points_count-2)*3 + points_count*6;

	mov	eax, DWORD PTR _points_count$[ebp]
	sub	eax, 2
	imul	ecx, eax, 3
	imul	edx, DWORD PTR _points_count$[ebp], 6
	add	ecx, edx
	mov	DWORD PTR _idx_count$26[ebp], ecx

; 8440 :         const nk_size vtx_count = (points_count*2);

	mov	eax, DWORD PTR _points_count$[ebp]
	shl	eax, 1
	mov	DWORD PTR _vtx_count$25[ebp], eax

; 8441 : 
; 8442 :         void *vtx = nk_draw_list_alloc_vertices(list, vtx_count);

	mov	eax, DWORD PTR _vtx_count$25[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_alloc_vertices
	add	esp, 8
	mov	DWORD PTR _vtx$24[ebp], eax

; 8443 :         nk_draw_index *ids = nk_draw_list_alloc_elements(list, idx_count);

	mov	eax, DWORD PTR _idx_count$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_alloc_elements
	add	esp, 8
	mov	DWORD PTR _ids$23[ebp], eax

; 8444 : 
; 8445 :         nk_size size = 0;

	mov	DWORD PTR _size$22[ebp], 0

; 8446 :         struct nk_vec2 *normals = 0;

	mov	DWORD PTR _normals$21[ebp], 0

; 8447 :         unsigned int vtx_inner_idx = (unsigned int)(index + 0);

	mov	eax, DWORD PTR _index$27[ebp]
	mov	DWORD PTR _vtx_inner_idx$20[ebp], eax

; 8448 :         unsigned int vtx_outer_idx = (unsigned int)(index + 1);

	mov	eax, DWORD PTR _index$27[ebp]
	add	eax, 1
	mov	DWORD PTR _vtx_outer_idx$19[ebp], eax

; 8449 :         if (!vtx || !ids) return;

	cmp	DWORD PTR _vtx$24[ebp], 0
	je	SHORT $LN23@nk_draw_li
	cmp	DWORD PTR _ids$23[ebp], 0
	jne	SHORT $LN24@nk_draw_li
$LN23@nk_draw_li:
	jmp	$LN1@nk_draw_li
$LN24@nk_draw_li:

; 8450 : 
; 8451 :         /* temporary allocate normals */
; 8452 :         vertex_offset = (nk_size)((nk_byte*)vtx - (nk_byte*)list->vertices->memory.ptr);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	edx, DWORD PTR _vtx$24[ebp]
	sub	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _vertex_offset$28[ebp], edx

; 8453 :         nk_buffer_mark(list->vertices, NK_BUFFER_FRONT);

	push	0
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	call	_nk_buffer_mark
	add	esp, 8

; 8454 :         size = pnt_size * points_count;

	mov	eax, DWORD PTR ?pnt_size@?1??nk_draw_list_fill_poly_convex@@9@9
	imul	eax, DWORD PTR _points_count$[ebp]
	mov	DWORD PTR _size$22[ebp], eax

; 8455 :         normals = (struct nk_vec2*) nk_buffer_alloc(list->vertices, NK_BUFFER_FRONT, size, pnt_align);

	mov	eax, DWORD PTR ?pnt_align@?1??nk_draw_list_fill_poly_convex@@9@9
	push	eax
	mov	ecx, DWORD PTR _size$22[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx+164]
	push	eax
	call	_nk_buffer_alloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _normals$21[ebp], eax

; 8456 :         NK_ASSERT(normals);

	cmp	DWORD PTR _normals$21[ebp], 0
	jne	SHORT $LN31@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_fill_poly_convex@@9@9
	add	eax, 44					; 0000002cH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BA@CGFLAEIE@?$AAn?$AAo?$AAr?$AAm?$AAa?$AAl?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN31@nk_draw_li:

; 8457 :         if (!normals) return;

	cmp	DWORD PTR _normals$21[ebp], 0
	jne	SHORT $LN22@nk_draw_li
	jmp	$LN1@nk_draw_li
$LN22@nk_draw_li:

; 8458 :         vtx = (void*)((nk_byte*)list->vertices->memory.ptr + vertex_offset);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, DWORD PTR _vertex_offset$28[ebp]
	mov	DWORD PTR _vtx$24[ebp], edx

; 8459 : 
; 8460 :         /* add elements */
; 8461 :         for (i = 2; i < points_count; i++) {

	mov	DWORD PTR _i$32[ebp], 2
	jmp	SHORT $LN21@nk_draw_li
$LN20@nk_draw_li:
	mov	eax, DWORD PTR _i$32[ebp]
	add	eax, 1
	mov	DWORD PTR _i$32[ebp], eax
$LN21@nk_draw_li:
	mov	eax, DWORD PTR _i$32[ebp]
	cmp	eax, DWORD PTR _points_count$[ebp]
	jae	SHORT $LN19@nk_draw_li

; 8462 :             ids[0] = (nk_draw_index)(vtx_inner_idx);

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ids$23[ebp]
	mov	ax, WORD PTR _vtx_inner_idx$20[ebp]
	mov	WORD PTR [edx+ecx], ax

; 8463 :             ids[1] = (nk_draw_index)(vtx_inner_idx + ((i-1) << 1));

	mov	eax, DWORD PTR _i$32[ebp]
	mov	ecx, DWORD PTR _vtx_inner_idx$20[ebp]
	lea	edx, DWORD PTR [ecx+eax*2-2]
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _ids$23[ebp]
	mov	WORD PTR [ecx+eax], dx

; 8464 :             ids[2] = (nk_draw_index)(vtx_inner_idx + (i << 1));

	mov	eax, DWORD PTR _i$32[ebp]
	mov	ecx, DWORD PTR _vtx_inner_idx$20[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _ids$23[ebp]
	mov	WORD PTR [ecx+eax], dx

; 8465 :             ids += 3;

	mov	eax, DWORD PTR _ids$23[ebp]
	add	eax, 6
	mov	DWORD PTR _ids$23[ebp], eax

; 8466 :         }

	jmp	SHORT $LN20@nk_draw_li
$LN19@nk_draw_li:

; 8467 : 
; 8468 :         /* compute normals */
; 8469 :         for (i0 = points_count-1, i1 = 0; i1 < points_count; i0 = i1++) {

	mov	eax, DWORD PTR _points_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i0$31[ebp], eax
	mov	DWORD PTR _i1$30[ebp], 0
	jmp	SHORT $LN18@nk_draw_li
$LN17@nk_draw_li:
	mov	eax, DWORD PTR _i1$30[ebp]
	mov	DWORD PTR _i0$31[ebp], eax
	mov	ecx, DWORD PTR _i1$30[ebp]
	add	ecx, 1
	mov	DWORD PTR _i1$30[ebp], ecx
$LN18@nk_draw_li:
	mov	eax, DWORD PTR _i1$30[ebp]
	cmp	eax, DWORD PTR _points_count$[ebp]
	jae	$LN16@nk_draw_li

; 8470 :             struct nk_vec2 p0 = points[i0];

	mov	eax, DWORD PTR _i0$31[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR _p0$18[ebp], edx
	mov	DWORD PTR _p0$18[ebp+4], eax

; 8471 :             struct nk_vec2 p1 = points[i1];

	mov	eax, DWORD PTR _i1$30[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR _p1$17[ebp], edx
	mov	DWORD PTR _p1$17[ebp+4], eax

; 8472 :             struct nk_vec2 diff = nk_vec2_sub(p1, p0);

	movss	xmm0, DWORD PTR _p1$17[ebp+4]
	subss	xmm0, DWORD PTR _p0$18[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _p1$17[ebp]
	subss	xmm0, DWORD PTR _p0$18[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _diff$16[ebp], eax
	mov	DWORD PTR _diff$16[ebp+4], edx

; 8473 : 
; 8474 :             /* vec2 inverted length  */
; 8475 :             float len = nk_vec2_len_sqr(diff);

	movss	xmm0, DWORD PTR _diff$16[ebp]
	mulss	xmm0, DWORD PTR _diff$16[ebp]
	movss	xmm1, DWORD PTR _diff$16[ebp+4]
	mulss	xmm1, DWORD PTR _diff$16[ebp+4]
	addss	xmm0, xmm1
	movss	DWORD PTR _len$15[ebp], xmm0

; 8476 :             if (len != 0.0f)

	movss	xmm0, DWORD PTR _len$15[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN15@nk_draw_li

; 8477 :                 len = nk_inv_sqrt(len);

	push	ecx
	movss	xmm0, DWORD PTR _len$15[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_inv_sqrt
	add	esp, 4
	fstp	DWORD PTR _len$15[ebp]
	jmp	SHORT $LN14@nk_draw_li
$LN15@nk_draw_li:

; 8478 :             else len = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _len$15[ebp], xmm0
$LN14@nk_draw_li:

; 8479 :             diff = nk_vec2_muls(diff, len);

	movss	xmm0, DWORD PTR _diff$16[ebp+4]
	mulss	xmm0, DWORD PTR _len$15[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _diff$16[ebp]
	mulss	xmm0, DWORD PTR _len$15[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _diff$16[ebp], eax
	mov	DWORD PTR _diff$16[ebp+4], edx

; 8480 : 
; 8481 :             normals[i0].x = diff.y;

	mov	eax, DWORD PTR _i0$31[ebp]
	mov	ecx, DWORD PTR _normals$21[ebp]
	movss	xmm0, DWORD PTR _diff$16[ebp+4]
	movss	DWORD PTR [ecx+eax*8], xmm0

; 8482 :             normals[i0].y = -diff.x;

	movss	xmm0, DWORD PTR _diff$16[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _i0$31[ebp]
	mov	ecx, DWORD PTR _normals$21[ebp]
	movss	DWORD PTR [ecx+eax*8+4], xmm0

; 8483 :         }

	jmp	$LN17@nk_draw_li
$LN16@nk_draw_li:

; 8484 : 
; 8485 :         /* add vertices + indexes */
; 8486 :         for (i0 = points_count-1, i1 = 0; i1 < points_count; i0 = i1++) {

	mov	eax, DWORD PTR _points_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i0$31[ebp], eax
	mov	DWORD PTR _i1$30[ebp], 0
	jmp	SHORT $LN13@nk_draw_li
$LN12@nk_draw_li:
	mov	eax, DWORD PTR _i1$30[ebp]
	mov	DWORD PTR _i0$31[ebp], eax
	mov	ecx, DWORD PTR _i1$30[ebp]
	add	ecx, 1
	mov	DWORD PTR _i1$30[ebp], ecx
$LN13@nk_draw_li:
	mov	eax, DWORD PTR _i1$30[ebp]
	cmp	eax, DWORD PTR _points_count$[ebp]
	jae	$LN11@nk_draw_li

; 8487 :             const struct nk_vec2 uv = list->config.null.uv;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [eax+144]
	mov	DWORD PTR _uv$14[ebp], ecx
	mov	DWORD PTR _uv$14[ebp+4], edx

; 8488 :             struct nk_vec2 n0 = normals[i0];

	mov	eax, DWORD PTR _i0$31[ebp]
	mov	ecx, DWORD PTR _normals$21[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR _n0$13[ebp], edx
	mov	DWORD PTR _n0$13[ebp+4], eax

; 8489 :             struct nk_vec2 n1 = normals[i1];

	mov	eax, DWORD PTR _i1$30[ebp]
	mov	ecx, DWORD PTR _normals$21[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR _n1$12[ebp], edx
	mov	DWORD PTR _n1$12[ebp+4], eax

; 8490 :             struct nk_vec2 dm = nk_vec2_muls(nk_vec2_add(n0, n1), 0.5f);

	movss	xmm0, DWORD PTR _n0$13[ebp+4]
	addss	xmm0, DWORD PTR _n1$12[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _n0$13[ebp]
	addss	xmm0, DWORD PTR _n1$12[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	movss	xmm0, DWORD PTR _n0$13[ebp+4]
	addss	xmm0, DWORD PTR _n1$12[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _n0$13[ebp]
	addss	xmm0, DWORD PTR _n1$12[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR $T2[ebp+4], edx
	movss	xmm0, DWORD PTR $T1[ebp+4]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR $T2[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _dm$11[ebp], eax
	mov	DWORD PTR _dm$11[ebp+4], edx

; 8491 :             float dmr2 = dm.x*dm.x + dm.y*dm.y;

	movss	xmm0, DWORD PTR _dm$11[ebp]
	mulss	xmm0, DWORD PTR _dm$11[ebp]
	movss	xmm1, DWORD PTR _dm$11[ebp+4]
	mulss	xmm1, DWORD PTR _dm$11[ebp+4]
	addss	xmm0, xmm1
	movss	DWORD PTR _dmr2$10[ebp], xmm0

; 8492 :             if (dmr2 > 0.000001f) {

	movss	xmm0, DWORD PTR _dmr2$10[ebp]
	comiss	xmm0, DWORD PTR __real@358637bd
	jbe	$LN10@nk_draw_li

; 8493 :                 float scale = 1.0f / dmr2;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _dmr2$10[ebp]
	movss	DWORD PTR _scale$9[ebp], xmm0

; 8494 :                 scale = NK_MIN(scale, 100.0f);

	movss	xmm0, DWORD PTR __real@42c80000
	comiss	xmm0, DWORD PTR _scale$9[ebp]
	jbe	SHORT $LN32@nk_draw_li
	movss	xmm0, DWORD PTR _scale$9[ebp]
	movss	DWORD PTR tv264[ebp], xmm0
	jmp	SHORT $LN33@nk_draw_li
$LN32@nk_draw_li:
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR tv264[ebp], xmm0
$LN33@nk_draw_li:
	movss	xmm0, DWORD PTR tv264[ebp]
	movss	DWORD PTR _scale$9[ebp], xmm0

; 8495 :                 dm = nk_vec2_muls(dm, scale);

	movss	xmm0, DWORD PTR _dm$11[ebp+4]
	mulss	xmm0, DWORD PTR _scale$9[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _dm$11[ebp]
	mulss	xmm0, DWORD PTR _scale$9[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _dm$11[ebp], eax
	mov	DWORD PTR _dm$11[ebp+4], edx
$LN10@nk_draw_li:

; 8496 :             }
; 8497 :             dm = nk_vec2_muls(dm, AA_SIZE * 0.5f);

	movss	xmm0, DWORD PTR _AA_SIZE$29[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _dm$11[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _AA_SIZE$29[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _dm$11[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _dm$11[ebp], eax
	mov	DWORD PTR _dm$11[ebp+4], edx

; 8498 : 
; 8499 :             /* add vertices */
; 8500 :             vtx = nk_draw_vertex(vtx, &list->config, nk_vec2_sub(points[i1], dm), uv, col);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _uv$14[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uv$14[ebp]
	push	ecx
	mov	edx, DWORD PTR _i1$30[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*8+4]
	subss	xmm0, DWORD PTR _dm$11[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i1$30[ebp]
	mov	edx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*8]
	subss	xmm0, DWORD PTR _dm$11[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _vtx$24[ebp]
	push	ecx
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$24[ebp], eax

; 8501 :             vtx = nk_draw_vertex(vtx, &list->config, nk_vec2_add(points[i1], dm), uv, col_trans);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col_trans$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col_trans$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col_trans$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col_trans$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _uv$14[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uv$14[ebp]
	push	ecx
	mov	edx, DWORD PTR _i1$30[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*8+4]
	addss	xmm0, DWORD PTR _dm$11[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i1$30[ebp]
	mov	edx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*8]
	addss	xmm0, DWORD PTR _dm$11[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _vtx$24[ebp]
	push	ecx
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$24[ebp], eax

; 8502 : 
; 8503 :             /* add indexes */
; 8504 :             ids[0] = (nk_draw_index)(vtx_inner_idx+(i1<<1));

	mov	eax, DWORD PTR _i1$30[ebp]
	mov	ecx, DWORD PTR _vtx_inner_idx$20[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, 2
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _ids$23[ebp]
	mov	WORD PTR [eax+ecx], dx

; 8505 :             ids[1] = (nk_draw_index)(vtx_inner_idx+(i0<<1));

	mov	eax, DWORD PTR _i0$31[ebp]
	mov	ecx, DWORD PTR _vtx_inner_idx$20[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _ids$23[ebp]
	mov	WORD PTR [ecx+eax], dx

; 8506 :             ids[2] = (nk_draw_index)(vtx_outer_idx+(i0<<1));

	mov	eax, DWORD PTR _i0$31[ebp]
	mov	ecx, DWORD PTR _vtx_outer_idx$19[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _ids$23[ebp]
	mov	WORD PTR [ecx+eax], dx

; 8507 :             ids[3] = (nk_draw_index)(vtx_outer_idx+(i0<<1));

	mov	eax, DWORD PTR _i0$31[ebp]
	mov	ecx, DWORD PTR _vtx_outer_idx$19[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, 2
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _ids$23[ebp]
	mov	WORD PTR [eax+ecx], dx

; 8508 :             ids[4] = (nk_draw_index)(vtx_outer_idx+(i1<<1));

	mov	eax, DWORD PTR _i1$30[ebp]
	mov	ecx, DWORD PTR _vtx_outer_idx$19[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _ids$23[ebp]
	mov	WORD PTR [ecx+eax], dx

; 8509 :             ids[5] = (nk_draw_index)(vtx_inner_idx+(i1<<1));

	mov	eax, DWORD PTR _i1$30[ebp]
	mov	ecx, DWORD PTR _vtx_inner_idx$20[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, 2
	imul	ecx, eax, 5
	mov	eax, DWORD PTR _ids$23[ebp]
	mov	WORD PTR [eax+ecx], dx

; 8510 :             ids += 6;

	mov	eax, DWORD PTR _ids$23[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _ids$23[ebp], eax

; 8511 :         }

	jmp	$LN12@nk_draw_li
$LN11@nk_draw_li:

; 8512 :         /* free temporary normals + points */
; 8513 :         nk_buffer_reset(list->vertices, NK_BUFFER_FRONT);

	push	0
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	call	_nk_buffer_reset
	add	esp, 8

; 8514 :     } else {

	jmp	$LN1@nk_draw_li
$LN25@nk_draw_li:

; 8515 :         nk_size i = 0;

	mov	DWORD PTR _i$8[ebp], 0

; 8516 :         nk_size index = list->vertex_count;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	DWORD PTR _index$7[ebp], ecx

; 8517 :         const nk_size idx_count = (points_count-2)*3;

	mov	eax, DWORD PTR _points_count$[ebp]
	sub	eax, 2
	imul	ecx, eax, 3
	mov	DWORD PTR _idx_count$6[ebp], ecx

; 8518 :         const nk_size vtx_count = points_count;

	mov	eax, DWORD PTR _points_count$[ebp]
	mov	DWORD PTR _vtx_count$5[ebp], eax

; 8519 :         void *vtx = nk_draw_list_alloc_vertices(list, vtx_count);

	mov	eax, DWORD PTR _vtx_count$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_alloc_vertices
	add	esp, 8
	mov	DWORD PTR _vtx$4[ebp], eax

; 8520 :         nk_draw_index *ids = nk_draw_list_alloc_elements(list, idx_count);

	mov	eax, DWORD PTR _idx_count$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_alloc_elements
	add	esp, 8
	mov	DWORD PTR _ids$3[ebp], eax

; 8521 : 
; 8522 :         if (!vtx || !ids) return;

	cmp	DWORD PTR _vtx$4[ebp], 0
	je	SHORT $LN7@nk_draw_li
	cmp	DWORD PTR _ids$3[ebp], 0
	jne	SHORT $LN8@nk_draw_li
$LN7@nk_draw_li:
	jmp	$LN1@nk_draw_li
$LN8@nk_draw_li:

; 8523 :         for (i = 0; i < vtx_count; ++i)

	mov	DWORD PTR _i$8[ebp], 0
	jmp	SHORT $LN6@nk_draw_li
$LN5@nk_draw_li:
	mov	eax, DWORD PTR _i$8[ebp]
	add	eax, 1
	mov	DWORD PTR _i$8[ebp], eax
$LN6@nk_draw_li:
	mov	eax, DWORD PTR _i$8[ebp]
	cmp	eax, DWORD PTR _vtx_count$5[ebp]
	jae	SHORT $LN4@nk_draw_li

; 8524 :             vtx = nk_draw_vertex(vtx, &list->config, points[i], list->config.null.uv, col);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	push	ecx
	mov	edx, DWORD PTR [eax+140]
	push	edx
	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	push	edx
	mov	eax, DWORD PTR [ecx+eax*8]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	add	ecx, 112				; 00000070H
	push	ecx
	mov	edx, DWORD PTR _vtx$4[ebp]
	push	edx
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$4[ebp], eax
	jmp	SHORT $LN5@nk_draw_li
$LN4@nk_draw_li:

; 8525 :         for (i = 2; i < points_count; ++i) {

	mov	DWORD PTR _i$8[ebp], 2
	jmp	SHORT $LN3@nk_draw_li
$LN2@nk_draw_li:
	mov	eax, DWORD PTR _i$8[ebp]
	add	eax, 1
	mov	DWORD PTR _i$8[ebp], eax
$LN3@nk_draw_li:
	mov	eax, DWORD PTR _i$8[ebp]
	cmp	eax, DWORD PTR _points_count$[ebp]
	jae	SHORT $LN1@nk_draw_li

; 8526 :             ids[0] = (nk_draw_index)index;

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ids$3[ebp]
	mov	ax, WORD PTR _index$7[ebp]
	mov	WORD PTR [edx+ecx], ax

; 8527 :             ids[1] = (nk_draw_index)(index+ i - 1);

	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _index$7[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _ids$3[ebp]
	mov	WORD PTR [ecx+eax], dx

; 8528 :             ids[2] = (nk_draw_index)(index+i);

	mov	eax, DWORD PTR _index$7[ebp]
	add	eax, DWORD PTR _i$8[ebp]
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _ids$3[ebp]
	mov	WORD PTR [edx+ecx], ax

; 8529 :             ids += 3;

	mov	eax, DWORD PTR _ids$3[ebp]
	add	eax, 6
	mov	DWORD PTR _ids$3[ebp], eax

; 8530 :         }

	jmp	$LN2@nk_draw_li
$LN1@nk_draw_li:

; 8531 :     }
; 8532 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN44@nk_draw_li
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 668				; 0000029cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN44@nk_draw_li:
	DD	9
	DD	$LN43@nk_draw_li
$LN43@nk_draw_li:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN34@nk_draw_li
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN35@nk_draw_li
	DD	-232					; ffffff18H
	DD	8
	DD	$LN36@nk_draw_li
	DD	-248					; ffffff08H
	DD	8
	DD	$LN37@nk_draw_li
	DD	-264					; fffffef8H
	DD	8
	DD	$LN38@nk_draw_li
	DD	-292					; fffffedcH
	DD	8
	DD	$LN39@nk_draw_li
	DD	-308					; fffffeccH
	DD	8
	DD	$LN40@nk_draw_li
	DD	-324					; fffffebcH
	DD	8
	DD	$LN41@nk_draw_li
	DD	-340					; fffffeacH
	DD	8
	DD	$LN42@nk_draw_li
$LN42@nk_draw_li:
	DB	100					; 00000064H
	DB	109					; 0000006dH
	DB	0
$LN41@nk_draw_li:
	DB	110					; 0000006eH
	DB	49					; 00000031H
	DB	0
$LN40@nk_draw_li:
	DB	110					; 0000006eH
	DB	48					; 00000030H
	DB	0
$LN39@nk_draw_li:
	DB	117					; 00000075H
	DB	118					; 00000076H
	DB	0
$LN38@nk_draw_li:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN37@nk_draw_li:
	DB	112					; 00000070H
	DB	49					; 00000031H
	DB	0
$LN36@nk_draw_li:
	DB	112					; 00000070H
	DB	48					; 00000030H
	DB	0
$LN35@nk_draw_li:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN34@nk_draw_li:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
_nk_draw_list_fill_poly_convex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_fill_circle
_TEXT	SEGMENT
tv135 = -228						; size = 8
tv131 = -220						; size = 4
tv93 = -216						; size = 8
tv89 = -208						; size = 4
_a_max$ = -8						; size = 4
_list$ = 8						; size = 4
_center$ = 12						; size = 8
_radius$ = 20						; size = 4
_col$ = 24						; size = 4
_segs$ = 28						; size = 4
_nk_draw_list_fill_circle PROC				; COMDAT

; 8811 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8812 :     float a_max;
; 8813 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN5@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_fill_circle@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_draw_li:

; 8814 :     if (!list || !col.a) return;

	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN1@nk_draw_li
	movzx	eax, BYTE PTR _col$[ebp+3]
	test	eax, eax
	jne	SHORT $LN2@nk_draw_li
$LN1@nk_draw_li:
	jmp	$LN3@nk_draw_li
$LN2@nk_draw_li:

; 8815 :     a_max = NK_PI * 2.0f * ((float)segs - 1.0f) / (float)segs;

	mov	eax, DWORD PTR _segs$[ebp]
	mov	DWORD PTR tv89[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv89[ebp]
	mov	ecx, DWORD PTR tv89[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv93[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv93[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@40c90fdb
	mov	edx, DWORD PTR _segs$[ebp]
	mov	DWORD PTR tv131[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv131[ebp]
	mov	eax, DWORD PTR tv131[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv135[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv135[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _a_max$[ebp], xmm0

; 8816 :     nk_draw_list_path_arc_to(list, center, radius, 0.0f, a_max, segs);

	mov	eax, DWORD PTR _segs$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _a_max$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _center$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _center$[ebp]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_arc_to
	add	esp, 28					; 0000001cH

; 8817 :     nk_draw_list_path_fill(list, col);

	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_path_fill
	add	esp, 8
$LN3@nk_draw_li:

; 8818 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_fill_circle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_fill_triangle
_TEXT	SEGMENT
_list$ = 8						; size = 4
_a$ = 12						; size = 8
_b$ = 20						; size = 8
_c$ = 28						; size = 8
_col$ = 36						; size = 4
_nk_draw_list_fill_triangle PROC			; COMDAT

; 8787 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8788 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN5@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_fill_triangle@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_draw_li:

; 8789 :     if (!list || !col.a) return;

	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN1@nk_draw_li
	movzx	eax, BYTE PTR _col$[ebp+3]
	test	eax, eax
	jne	SHORT $LN2@nk_draw_li
$LN1@nk_draw_li:
	jmp	SHORT $LN3@nk_draw_li
$LN2@nk_draw_li:

; 8790 :     nk_draw_list_path_line_to(list, a);

	mov	eax, DWORD PTR _a$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 8791 :     nk_draw_list_path_line_to(list, b);

	mov	eax, DWORD PTR _b$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 8792 :     nk_draw_list_path_line_to(list, c);

	mov	eax, DWORD PTR _c$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 8793 :     nk_draw_list_path_fill(list, col);

	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_path_fill
	add	esp, 8
$LN3@nk_draw_li:

; 8794 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_fill_triangle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_fill_rect_multi_color
_TEXT	SEGMENT
_index$ = -132						; size = 2
_idx$ = -120						; size = 4
_col_bottom$ = -108					; size = 16
_col_right$ = -84					; size = 16
_col_top$ = -60						; size = 16
_col_left$ = -36					; size = 16
_vtx$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_list$ = 8						; size = 4
_rect$ = 12						; size = 16
_left$ = 28						; size = 4
_top$ = 32						; size = 4
_right$ = 36						; size = 4
_bottom$ = 40						; size = 4
_nk_draw_list_fill_rect_multi_color PROC		; COMDAT

; 8753 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 8754 :     void *vtx;
; 8755 :     struct nk_colorf col_left, col_top;
; 8756 :     struct nk_colorf col_right, col_bottom;
; 8757 :     nk_draw_index *idx;
; 8758 :     nk_draw_index index;
; 8759 : 
; 8760 :     nk_color_fv(&col_left.r, left);

	mov	eax, DWORD PTR _left$[ebp]
	push	eax
	lea	ecx, DWORD PTR _col_left$[ebp]
	push	ecx
	call	_nk_color_fv
	add	esp, 8

; 8761 :     nk_color_fv(&col_right.r, right);

	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	lea	ecx, DWORD PTR _col_right$[ebp]
	push	ecx
	call	_nk_color_fv
	add	esp, 8

; 8762 :     nk_color_fv(&col_top.r, top);

	mov	eax, DWORD PTR _top$[ebp]
	push	eax
	lea	ecx, DWORD PTR _col_top$[ebp]
	push	ecx
	call	_nk_color_fv
	add	esp, 8

; 8763 :     nk_color_fv(&col_bottom.r, bottom);

	mov	eax, DWORD PTR _bottom$[ebp]
	push	eax
	lea	ecx, DWORD PTR _col_bottom$[ebp]
	push	ecx
	call	_nk_color_fv
	add	esp, 8

; 8764 : 
; 8765 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN6@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_fill_rect_multi_color@@9@9
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_draw_li:

; 8766 :     if (!list) return;

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN3@nk_draw_li
	jmp	$LN4@nk_draw_li
$LN3@nk_draw_li:

; 8767 : 
; 8768 :     nk_draw_list_push_image(list, list->config.null.texture);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_nk_draw_list_push_image
	add	esp, 8

; 8769 :     index = (nk_draw_index)list->vertex_count;

	mov	eax, DWORD PTR _list$[ebp]
	mov	cx, WORD PTR [eax+176]
	mov	WORD PTR _index$[ebp], cx

; 8770 :     vtx = nk_draw_list_alloc_vertices(list, 4);

	push	4
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_alloc_vertices
	add	esp, 8
	mov	DWORD PTR _vtx$[ebp], eax

; 8771 :     idx = nk_draw_list_alloc_elements(list, 6);

	push	6
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_alloc_elements
	add	esp, 8
	mov	DWORD PTR _idx$[ebp], eax

; 8772 :     if (!vtx || !idx) return;

	cmp	DWORD PTR _vtx$[ebp], 0
	je	SHORT $LN1@nk_draw_li
	cmp	DWORD PTR _idx$[ebp], 0
	jne	SHORT $LN2@nk_draw_li
$LN1@nk_draw_li:
	jmp	$LN4@nk_draw_li
$LN2@nk_draw_li:

; 8773 : 
; 8774 :     idx[0] = (nk_draw_index)(index+0); idx[1] = (nk_draw_index)(index+1);

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _idx$[ebp]
	mov	ax, WORD PTR _index$[ebp]
	mov	WORD PTR [edx+ecx], ax
	movzx	eax, WORD PTR _index$[ebp]
	add	eax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _idx$[ebp]
	mov	WORD PTR [edx+ecx], ax

; 8775 :     idx[2] = (nk_draw_index)(index+2); idx[3] = (nk_draw_index)(index+0);

	movzx	eax, WORD PTR _index$[ebp]
	add	eax, 2
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _idx$[ebp]
	mov	WORD PTR [edx+ecx], ax
	mov	eax, 2
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _idx$[ebp]
	mov	ax, WORD PTR _index$[ebp]
	mov	WORD PTR [edx+ecx], ax

; 8776 :     idx[4] = (nk_draw_index)(index+2); idx[5] = (nk_draw_index)(index+3);

	movzx	eax, WORD PTR _index$[ebp]
	add	eax, 2
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _idx$[ebp]
	mov	WORD PTR [edx+ecx], ax
	movzx	eax, WORD PTR _index$[ebp]
	add	eax, 3
	mov	ecx, 2
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	WORD PTR [ecx+edx], ax

; 8777 : 
; 8778 :     vtx = nk_draw_vertex(vtx, &list->config, nk_vec2(rect.x, rect.y), list->config.null.uv, col_left);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col_left$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col_left$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col_left$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col_left$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	push	ecx
	mov	edx, DWORD PTR [eax+140]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rect$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _vtx$[ebp]
	push	ecx
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$[ebp], eax

; 8779 :     vtx = nk_draw_vertex(vtx, &list->config, nk_vec2(rect.x + rect.w, rect.y), list->config.null.uv, col_top);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col_top$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col_top$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col_top$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col_top$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	push	ecx
	mov	edx, DWORD PTR [eax+140]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rect$[ebp]
	addss	xmm0, DWORD PTR _rect$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _vtx$[ebp]
	push	ecx
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$[ebp], eax

; 8780 :     vtx = nk_draw_vertex(vtx, &list->config, nk_vec2(rect.x + rect.w, rect.y + rect.h), list->config.null.uv, col_right);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col_right$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col_right$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col_right$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col_right$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	push	ecx
	mov	edx, DWORD PTR [eax+140]
	push	edx
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	addss	xmm0, DWORD PTR _rect$[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rect$[ebp]
	addss	xmm0, DWORD PTR _rect$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _vtx$[ebp]
	push	ecx
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$[ebp], eax

; 8781 :     vtx = nk_draw_vertex(vtx, &list->config, nk_vec2(rect.x, rect.y + rect.h), list->config.null.uv, col_bottom);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col_bottom$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col_bottom$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col_bottom$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col_bottom$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	push	ecx
	mov	edx, DWORD PTR [eax+140]
	push	edx
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	addss	xmm0, DWORD PTR _rect$[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rect$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _vtx$[ebp]
	push	ecx
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$[ebp], eax
$LN4@nk_draw_li:

; 8782 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@nk_draw_li
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@nk_draw_li:
	DD	4
	DD	$LN11@nk_draw_li
$LN11@nk_draw_li:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN7@nk_draw_li
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN8@nk_draw_li
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$LN9@nk_draw_li
	DD	-108					; ffffff94H
	DD	16					; 00000010H
	DD	$LN10@nk_draw_li
$LN10@nk_draw_li:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	0
$LN9@nk_draw_li:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	0
$LN8@nk_draw_li:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN7@nk_draw_li:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
_nk_draw_list_fill_rect_multi_color ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_fill_rect
_TEXT	SEGMENT
_list$ = 8						; size = 4
_rect$ = 12						; size = 16
_col$ = 28						; size = 4
_rounding$ = 32						; size = 4
_nk_draw_list_fill_rect PROC				; COMDAT

; 8721 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8722 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN7@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_fill_rect@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_draw_li:

; 8723 :     if (!list || !col.a) return;

	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN3@nk_draw_li
	movzx	eax, BYTE PTR _col$[ebp+3]
	test	eax, eax
	jne	SHORT $LN4@nk_draw_li
$LN3@nk_draw_li:
	jmp	$LN5@nk_draw_li
$LN4@nk_draw_li:

; 8724 : 
; 8725 :     if (list->line_AA == NK_ANTI_ALIASING_ON) {

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+196], 1
	jne	SHORT $LN2@nk_draw_li

; 8726 :         nk_draw_list_path_rect_to(list, nk_vec2(rect.x, rect.y),
; 8727 :             nk_vec2(rect.x + rect.w, rect.y + rect.h), rounding);

	push	ecx
	movss	xmm0, DWORD PTR _rounding$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	addss	xmm0, DWORD PTR _rect$[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rect$[ebp]
	addss	xmm0, DWORD PTR _rect$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rect$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_rect_to
	add	esp, 24					; 00000018H

; 8728 :     } else {

	jmp	SHORT $LN1@nk_draw_li
$LN2@nk_draw_li:

; 8729 :         nk_draw_list_path_rect_to(list, nk_vec2(rect.x-0.5f, rect.y-0.5f),
; 8730 :             nk_vec2(rect.x + rect.w, rect.y + rect.h), rounding);

	push	ecx
	movss	xmm0, DWORD PTR _rounding$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	addss	xmm0, DWORD PTR _rect$[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rect$[ebp]
	addss	xmm0, DWORD PTR _rect$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	subss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rect$[ebp]
	subss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_rect_to
	add	esp, 24					; 00000018H
$LN1@nk_draw_li:

; 8731 :     } nk_draw_list_path_fill(list,  col);

	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_path_fill
	add	esp, 8
$LN5@nk_draw_li:

; 8732 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_fill_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_stroke_poly_line
_TEXT	SEGMENT
tv1060 = -1056						; size = 4
tv810 = -1056						; size = 4
tv764 = -1056						; size = 4
tv760 = -1056						; size = 4
tv426 = -1056						; size = 4
tv380 = -1056						; size = 4
tv376 = -1056						; size = 4
tv173 = -1056						; size = 4
tv147 = -1056						; size = 4
tv131 = -1056						; size = 4
tv95 = -1056						; size = 4
tv81 = -1056						; size = 4
$T1 = -1048						; size = 8
$T2 = -1032						; size = 8
$T3 = -1016						; size = 8
$T4 = -1000						; size = 8
$T5 = -984						; size = 8
$T6 = -968						; size = 8
$T7 = -952						; size = 8
$T8 = -936						; size = 8
_len$9 = -728						; size = 4
_diff$10 = -716						; size = 8
_p2$11 = -700						; size = 8
_p1$12 = -684						; size = 8
_i2$13 = -668						; size = 4
_uv$14 = -656						; size = 8
_dy$15 = -640						; size = 4
_dx$16 = -628						; size = 4
_ids$17 = -616						; size = 4
_vtx$18 = -604						; size = 4
_vtx_count$19 = -592					; size = 4
_idx_count$20 = -580					; size = 4
_idx$21 = -568						; size = 4
_i1$22 = -556						; size = 4
_uv$23 = -544						; size = 8
_scale$24 = -528					; size = 4
_dmr2$25 = -516						; size = 4
_dm$26 = -504						; size = 8
_idx2$27 = -488						; size = 4
_i2$28 = -476						; size = 4
_dm_in$29 = -464					; size = 8
_dm_out$30 = -448					; size = 8
_d2$31 = -432						; size = 8
_d1$32 = -416						; size = 8
_half_inner_thickness$33 = -400				; size = 4
_i$34 = -388						; size = 4
_idx1$35 = -376						; size = 4
_uv$36 = -364						; size = 8
_scale$37 = -348					; size = 4
_idx2$38 = -336						; size = 4
_i2$39 = -324						; size = 4
_dmr2$40 = -312						; size = 4
_dm$41 = -300						; size = 8
_d$42 = -284						; size = 8
_i$43 = -268						; size = 4
_idx1$44 = -256						; size = 4
_len$45 = -244						; size = 4
_diff$46 = -232						; size = 8
_i2$47 = -216						; size = 4
_temp$48 = -204						; size = 4
_normals$49 = -192					; size = 4
_size$50 = -180						; size = 4
_ids$51 = -168						; size = 4
_vtx$52 = -156						; size = 4
_vtx_count$53 = -144					; size = 4
_idx_count$54 = -132					; size = 4
_index$55 = -120					; size = 4
_vertex_offset$56 = -108				; size = 4
_i1$57 = -96						; size = 4
_AA_SIZE$58 = -84					; size = 4
_col_trans$ = -72					; size = 16
_col$ = -48						; size = 16
_thick_line$ = -24					; size = 4
_count$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_list$ = 8						; size = 4
_points$ = 12						; size = 4
_points_count$ = 16					; size = 4
_color$ = 20						; size = 4
_closed$ = 24						; size = 4
_thickness$ = 28					; size = 4
_aliasing$ = 32						; size = 4
_nk_draw_list_stroke_poly_line PROC			; COMDAT

; 8170 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1056				; 00000420H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1056]
	mov	ecx, 264				; 00000108H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 8171 :     nk_size count;
; 8172 :     int thick_line;
; 8173 :     struct nk_colorf col;
; 8174 :     struct nk_colorf col_trans;
; 8175 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN42@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_stroke_poly_line@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN42@nk_draw_li:

; 8176 :     if (!list || points_count < 2) return;

	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN38@nk_draw_li
	cmp	DWORD PTR _points_count$[ebp], 2
	jae	SHORT $LN39@nk_draw_li
$LN38@nk_draw_li:
	jmp	$LN3@nk_draw_li
$LN39@nk_draw_li:

; 8177 : 
; 8178 :     color.a = (nk_byte)((float)color.a * list->config.global_alpha);

	movzx	eax, BYTE PTR _color$[ebp+3]
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _list$[ebp]
	mulss	xmm0, DWORD PTR [ecx+112]
	cvttss2si edx, xmm0
	mov	BYTE PTR _color$[ebp+3], dl

; 8179 :     count = points_count;

	mov	eax, DWORD PTR _points_count$[ebp]
	mov	DWORD PTR _count$[ebp], eax

; 8180 :     if (!closed) count = points_count-1;

	cmp	DWORD PTR _closed$[ebp], 0
	jne	SHORT $LN37@nk_draw_li
	mov	eax, DWORD PTR _points_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
$LN37@nk_draw_li:

; 8181 :     thick_line = thickness > 1.0f;

	movss	xmm0, DWORD PTR _thickness$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN43@nk_draw_li
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN44@nk_draw_li
$LN43@nk_draw_li:
	mov	DWORD PTR tv81[ebp], 0
$LN44@nk_draw_li:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR _thick_line$[ebp], eax

; 8182 : 
; 8183 : #ifdef NK_INCLUDE_COMMAND_USERDATA
; 8184 :     nk_draw_list_push_userdata(list, list->userdata);
; 8185 : #endif
; 8186 : 
; 8187 :     color.a = (nk_byte)((float)color.a * list->config.global_alpha);

	movzx	eax, BYTE PTR _color$[ebp+3]
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _list$[ebp]
	mulss	xmm0, DWORD PTR [ecx+112]
	cvttss2si edx, xmm0
	mov	BYTE PTR _color$[ebp+3], dl

; 8188 :     nk_color_fv(&col.r, color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	lea	ecx, DWORD PTR _col$[ebp]
	push	ecx
	call	_nk_color_fv
	add	esp, 8

; 8189 :     col_trans = col;

	mov	eax, DWORD PTR _col$[ebp]
	mov	DWORD PTR _col_trans$[ebp], eax
	mov	ecx, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR _col_trans$[ebp+4], ecx
	mov	edx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR _col_trans$[ebp+8], edx
	mov	eax, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR _col_trans$[ebp+12], eax

; 8190 :     col_trans.a = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _col_trans$[ebp+12], xmm0

; 8191 : 
; 8192 :     if (aliasing == NK_ANTI_ALIASING_ON) {

	cmp	DWORD PTR _aliasing$[ebp], 1
	jne	$LN36@nk_draw_li

; 8193 :         /* ANTI-ALIASED STROKE */
; 8194 :         const float AA_SIZE = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _AA_SIZE$58[ebp], xmm0

; 8195 :         NK_STORAGE const nk_size pnt_align = NK_ALIGNOF(struct nk_vec2);
; 8196 :         NK_STORAGE const nk_size pnt_size = sizeof(struct nk_vec2);
; 8197 : 
; 8198 :         /* allocate vertices and elements  */
; 8199 :         nk_size i1 = 0;

	mov	DWORD PTR _i1$57[ebp], 0

; 8200 :         nk_size vertex_offset;
; 8201 :         nk_size index = list->vertex_count;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	DWORD PTR _index$55[ebp], ecx

; 8202 : 
; 8203 :         const nk_size idx_count = (thick_line) ?  (count * 18) : (count * 12);

	cmp	DWORD PTR _thick_line$[ebp], 0
	je	SHORT $LN45@nk_draw_li
	imul	eax, DWORD PTR _count$[ebp], 18
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN46@nk_draw_li
$LN45@nk_draw_li:
	imul	ecx, DWORD PTR _count$[ebp], 12
	mov	DWORD PTR tv95[ebp], ecx
$LN46@nk_draw_li:
	mov	edx, DWORD PTR tv95[ebp]
	mov	DWORD PTR _idx_count$54[ebp], edx

; 8204 :         const nk_size vtx_count = (thick_line) ? (points_count * 4): (points_count *3);

	cmp	DWORD PTR _thick_line$[ebp], 0
	je	SHORT $LN47@nk_draw_li
	mov	eax, DWORD PTR _points_count$[ebp]
	shl	eax, 2
	mov	DWORD PTR tv131[ebp], eax
	jmp	SHORT $LN48@nk_draw_li
$LN47@nk_draw_li:
	imul	ecx, DWORD PTR _points_count$[ebp], 3
	mov	DWORD PTR tv131[ebp], ecx
$LN48@nk_draw_li:
	mov	edx, DWORD PTR tv131[ebp]
	mov	DWORD PTR _vtx_count$53[ebp], edx

; 8205 : 
; 8206 :         void *vtx = nk_draw_list_alloc_vertices(list, vtx_count);

	mov	eax, DWORD PTR _vtx_count$53[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_alloc_vertices
	add	esp, 8
	mov	DWORD PTR _vtx$52[ebp], eax

; 8207 :         nk_draw_index *ids = nk_draw_list_alloc_elements(list, idx_count);

	mov	eax, DWORD PTR _idx_count$54[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_alloc_elements
	add	esp, 8
	mov	DWORD PTR _ids$51[ebp], eax

; 8208 : 
; 8209 :         nk_size size;
; 8210 :         struct nk_vec2 *normals, *temp;
; 8211 :         if (!vtx || !ids) return;

	cmp	DWORD PTR _vtx$52[ebp], 0
	je	SHORT $LN34@nk_draw_li
	cmp	DWORD PTR _ids$51[ebp], 0
	jne	SHORT $LN35@nk_draw_li
$LN34@nk_draw_li:
	jmp	$LN3@nk_draw_li
$LN35@nk_draw_li:

; 8212 : 
; 8213 :         /* temporary allocate normals + points */
; 8214 :         vertex_offset = (nk_size)((nk_byte*)vtx - (nk_byte*)list->vertices->memory.ptr);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	edx, DWORD PTR _vtx$52[ebp]
	sub	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _vertex_offset$56[ebp], edx

; 8215 :         nk_buffer_mark(list->vertices, NK_BUFFER_FRONT);

	push	0
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	call	_nk_buffer_mark
	add	esp, 8

; 8216 :         size = pnt_size * ((thick_line) ? 5 : 3) * points_count;

	cmp	DWORD PTR _thick_line$[ebp], 0
	je	SHORT $LN49@nk_draw_li
	mov	DWORD PTR tv147[ebp], 5
	jmp	SHORT $LN50@nk_draw_li
$LN49@nk_draw_li:
	mov	DWORD PTR tv147[ebp], 3
$LN50@nk_draw_li:
	mov	eax, DWORD PTR ?pnt_size@?2??nk_draw_list_stroke_poly_line@@9@9
	imul	eax, DWORD PTR tv147[ebp]
	imul	eax, DWORD PTR _points_count$[ebp]
	mov	DWORD PTR _size$50[ebp], eax

; 8217 :         normals = (struct nk_vec2*) nk_buffer_alloc(list->vertices, NK_BUFFER_FRONT, size, pnt_align);

	mov	eax, DWORD PTR ?pnt_align@?2??nk_draw_list_stroke_poly_line@@9@9
	push	eax
	mov	ecx, DWORD PTR _size$50[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx+164]
	push	eax
	call	_nk_buffer_alloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _normals$49[ebp], eax

; 8218 :         NK_ASSERT(normals);

	cmp	DWORD PTR _normals$49[ebp], 0
	jne	SHORT $LN51@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_stroke_poly_line@@9@9
	add	eax, 48					; 00000030H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BA@CGFLAEIE@?$AAn?$AAo?$AAr?$AAm?$AAa?$AAl?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN51@nk_draw_li:

; 8219 :         if (!normals) return;

	cmp	DWORD PTR _normals$49[ebp], 0
	jne	SHORT $LN33@nk_draw_li
	jmp	$LN3@nk_draw_li
$LN33@nk_draw_li:

; 8220 :         temp = normals + points_count;

	mov	eax, DWORD PTR _points_count$[ebp]
	mov	ecx, DWORD PTR _normals$49[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _temp$48[ebp], edx

; 8221 : 
; 8222 :         /* make sure vertex pointer is still correct */
; 8223 :         vtx = (void*)((nk_byte*)list->vertices->memory.ptr + vertex_offset);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, DWORD PTR _vertex_offset$56[ebp]
	mov	DWORD PTR _vtx$52[ebp], edx

; 8224 : 
; 8225 :         /* calculate normals */
; 8226 :         for (i1 = 0; i1 < count; ++i1) {

	mov	DWORD PTR _i1$57[ebp], 0
	jmp	SHORT $LN32@nk_draw_li
$LN31@nk_draw_li:
	mov	eax, DWORD PTR _i1$57[ebp]
	add	eax, 1
	mov	DWORD PTR _i1$57[ebp], eax
$LN32@nk_draw_li:
	mov	eax, DWORD PTR _i1$57[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	$LN30@nk_draw_li

; 8227 :             const nk_size i2 = ((i1 + 1) == points_count) ? 0 : (i1 + 1);

	mov	eax, DWORD PTR _i1$57[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _points_count$[ebp]
	jne	SHORT $LN52@nk_draw_li
	mov	DWORD PTR tv173[ebp], 0
	jmp	SHORT $LN53@nk_draw_li
$LN52@nk_draw_li:
	mov	ecx, DWORD PTR _i1$57[ebp]
	add	ecx, 1
	mov	DWORD PTR tv173[ebp], ecx
$LN53@nk_draw_li:
	mov	edx, DWORD PTR tv173[ebp]
	mov	DWORD PTR _i2$47[ebp], edx

; 8228 :             struct nk_vec2 diff = nk_vec2_sub(points[i2], points[i1]);

	mov	eax, DWORD PTR _i2$47[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	mov	edx, DWORD PTR _i1$57[ebp]
	mov	esi, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	subss	xmm0, DWORD PTR [esi+edx*8+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i2$47[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	mov	edx, DWORD PTR _i1$57[ebp]
	mov	esi, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8]
	subss	xmm0, DWORD PTR [esi+edx*8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _diff$46[ebp], eax
	mov	DWORD PTR _diff$46[ebp+4], edx

; 8229 :             float len;
; 8230 : 
; 8231 :             /* vec2 inverted length  */
; 8232 :             len = nk_vec2_len_sqr(diff);

	movss	xmm0, DWORD PTR _diff$46[ebp]
	mulss	xmm0, DWORD PTR _diff$46[ebp]
	movss	xmm1, DWORD PTR _diff$46[ebp+4]
	mulss	xmm1, DWORD PTR _diff$46[ebp+4]
	addss	xmm0, xmm1
	movss	DWORD PTR _len$45[ebp], xmm0

; 8233 :             if (len != 0.0f)

	movss	xmm0, DWORD PTR _len$45[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN29@nk_draw_li

; 8234 :                 len = nk_inv_sqrt(len);

	push	ecx
	movss	xmm0, DWORD PTR _len$45[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_inv_sqrt
	add	esp, 4
	fstp	DWORD PTR _len$45[ebp]
	jmp	SHORT $LN28@nk_draw_li
$LN29@nk_draw_li:

; 8235 :             else len = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _len$45[ebp], xmm0
$LN28@nk_draw_li:

; 8236 : 
; 8237 :             diff = nk_vec2_muls(diff, len);

	movss	xmm0, DWORD PTR _diff$46[ebp+4]
	mulss	xmm0, DWORD PTR _len$45[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _diff$46[ebp]
	mulss	xmm0, DWORD PTR _len$45[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _diff$46[ebp], eax
	mov	DWORD PTR _diff$46[ebp+4], edx

; 8238 :             normals[i1].x = diff.y;

	mov	eax, DWORD PTR _i1$57[ebp]
	mov	ecx, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR _diff$46[ebp+4]
	movss	DWORD PTR [ecx+eax*8], xmm0

; 8239 :             normals[i1].y = -diff.x;

	movss	xmm0, DWORD PTR _diff$46[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _i1$57[ebp]
	mov	ecx, DWORD PTR _normals$49[ebp]
	movss	DWORD PTR [ecx+eax*8+4], xmm0

; 8240 :         }

	jmp	$LN31@nk_draw_li
$LN30@nk_draw_li:

; 8241 : 
; 8242 :         if (!closed)

	cmp	DWORD PTR _closed$[ebp], 0
	jne	SHORT $LN27@nk_draw_li

; 8243 :             normals[points_count-1] = normals[points_count-2];

	mov	eax, DWORD PTR _points_count$[ebp]
	mov	ecx, DWORD PTR _normals$49[ebp]
	mov	edx, DWORD PTR [ecx+eax*8-16]
	mov	eax, DWORD PTR [ecx+eax*8-12]
	mov	ecx, DWORD PTR _points_count$[ebp]
	mov	esi, DWORD PTR _normals$49[ebp]
	mov	DWORD PTR [esi+ecx*8-8], edx
	mov	DWORD PTR [esi+ecx*8-4], eax
$LN27@nk_draw_li:

; 8244 : 
; 8245 :         if (!thick_line) {

	cmp	DWORD PTR _thick_line$[ebp], 0
	jne	$LN26@nk_draw_li

; 8246 :             nk_size idx1, i;
; 8247 :             if (!closed) {

	cmp	DWORD PTR _closed$[ebp], 0
	jne	$LN25@nk_draw_li

; 8248 :                 struct nk_vec2 d;
; 8249 :                 temp[0] = nk_vec2_add(points[0], nk_vec2_muls(normals[0], AA_SIZE));

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+4]
	mulss	xmm0, DWORD PTR _AA_SIZE$58[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR _AA_SIZE$58[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+4]
	mulss	xmm0, DWORD PTR _AA_SIZE$58[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR _AA_SIZE$58[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR $T2[ebp+4], edx
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+4]
	addss	xmm0, DWORD PTR $T1[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	addss	xmm0, DWORD PTR $T2[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	imul	ecx, ecx, 0
	mov	esi, DWORD PTR _temp$48[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx

; 8250 :                 temp[1] = nk_vec2_sub(points[0], nk_vec2_muls(normals[0], AA_SIZE));

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+4]
	mulss	xmm0, DWORD PTR _AA_SIZE$58[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR _AA_SIZE$58[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR $T3[ebp+4], edx
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+4]
	mulss	xmm0, DWORD PTR _AA_SIZE$58[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR _AA_SIZE$58[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR $T4[ebp+4], edx
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+4]
	subss	xmm0, DWORD PTR $T3[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	subss	xmm0, DWORD PTR $T4[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	shl	ecx, 0
	mov	esi, DWORD PTR _temp$48[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx

; 8251 :                 d = nk_vec2_muls(normals[points_count-1], AA_SIZE);

	mov	eax, DWORD PTR _points_count$[ebp]
	mov	ecx, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8-4]
	mulss	xmm0, DWORD PTR _AA_SIZE$58[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _points_count$[ebp]
	mov	eax, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [eax+edx*8-8]
	mulss	xmm0, DWORD PTR _AA_SIZE$58[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _d$42[ebp], eax
	mov	DWORD PTR _d$42[ebp+4], edx

; 8252 :                 temp[(points_count-1) * 2 + 0] = nk_vec2_add(points[points_count-1], d);

	mov	eax, DWORD PTR _points_count$[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8-4]
	addss	xmm0, DWORD PTR _d$42[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _points_count$[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*8-8]
	addss	xmm0, DWORD PTR _d$42[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _points_count$[ebp]
	lea	ecx, DWORD PTR [ecx+ecx-2]
	mov	esi, DWORD PTR _temp$48[ebp]
	mov	DWORD PTR [esi+ecx*8], eax
	mov	DWORD PTR [esi+ecx*8+4], edx

; 8253 :                 temp[(points_count-1) * 2 + 1] = nk_vec2_sub(points[points_count-1], d);

	mov	eax, DWORD PTR _points_count$[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8-4]
	subss	xmm0, DWORD PTR _d$42[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _points_count$[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*8-8]
	subss	xmm0, DWORD PTR _d$42[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _points_count$[ebp]
	lea	ecx, DWORD PTR [ecx+ecx-2]
	mov	esi, DWORD PTR _temp$48[ebp]
	mov	DWORD PTR [esi+ecx*8+8], eax
	mov	DWORD PTR [esi+ecx*8+12], edx
$LN25@nk_draw_li:

; 8254 :             }
; 8255 : 
; 8256 :             /* fill elements */
; 8257 :             idx1 = index;

	mov	eax, DWORD PTR _index$55[ebp]
	mov	DWORD PTR _idx1$44[ebp], eax

; 8258 :             for (i1 = 0; i1 < count; i1++) {

	mov	DWORD PTR _i1$57[ebp], 0
	jmp	SHORT $LN24@nk_draw_li
$LN23@nk_draw_li:
	mov	eax, DWORD PTR _i1$57[ebp]
	add	eax, 1
	mov	DWORD PTR _i1$57[ebp], eax
$LN24@nk_draw_li:
	mov	eax, DWORD PTR _i1$57[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	$LN22@nk_draw_li

; 8259 :                 struct nk_vec2 dm;
; 8260 :                 float dmr2;
; 8261 :                 nk_size i2 = ((i1 + 1) == points_count) ? 0 : (i1 + 1);

	mov	eax, DWORD PTR _i1$57[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _points_count$[ebp]
	jne	SHORT $LN54@nk_draw_li
	mov	DWORD PTR tv376[ebp], 0
	jmp	SHORT $LN55@nk_draw_li
$LN54@nk_draw_li:
	mov	ecx, DWORD PTR _i1$57[ebp]
	add	ecx, 1
	mov	DWORD PTR tv376[ebp], ecx
$LN55@nk_draw_li:
	mov	edx, DWORD PTR tv376[ebp]
	mov	DWORD PTR _i2$39[ebp], edx

; 8262 :                 nk_size idx2 = ((i1+1) == points_count) ? index: (idx1 + 3);

	mov	eax, DWORD PTR _i1$57[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _points_count$[ebp]
	jne	SHORT $LN56@nk_draw_li
	mov	ecx, DWORD PTR _index$55[ebp]
	mov	DWORD PTR tv380[ebp], ecx
	jmp	SHORT $LN57@nk_draw_li
$LN56@nk_draw_li:
	mov	edx, DWORD PTR _idx1$44[ebp]
	add	edx, 3
	mov	DWORD PTR tv380[ebp], edx
$LN57@nk_draw_li:
	mov	eax, DWORD PTR tv380[ebp]
	mov	DWORD PTR _idx2$38[ebp], eax

; 8263 : 
; 8264 :                 /* average normals */
; 8265 :                 dm = nk_vec2_muls(nk_vec2_add(normals[i1], normals[i2]), 0.5f);

	mov	eax, DWORD PTR _i1$57[ebp]
	mov	ecx, DWORD PTR _normals$49[ebp]
	mov	edx, DWORD PTR _i2$39[ebp]
	mov	esi, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	addss	xmm0, DWORD PTR [esi+edx*8+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i1$57[ebp]
	mov	ecx, DWORD PTR _normals$49[ebp]
	mov	edx, DWORD PTR _i2$39[ebp]
	mov	esi, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8]
	addss	xmm0, DWORD PTR [esi+edx*8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR $T5[ebp+4], edx
	mov	eax, DWORD PTR _i1$57[ebp]
	mov	ecx, DWORD PTR _normals$49[ebp]
	mov	edx, DWORD PTR _i2$39[ebp]
	mov	esi, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	addss	xmm0, DWORD PTR [esi+edx*8+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i1$57[ebp]
	mov	ecx, DWORD PTR _normals$49[ebp]
	mov	edx, DWORD PTR _i2$39[ebp]
	mov	esi, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8]
	addss	xmm0, DWORD PTR [esi+edx*8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR $T6[ebp+4], edx
	movss	xmm0, DWORD PTR $T5[ebp+4]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR $T6[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _dm$41[ebp], eax
	mov	DWORD PTR _dm$41[ebp+4], edx

; 8266 :                 dmr2 = dm.x * dm.x + dm.y* dm.y;

	movss	xmm0, DWORD PTR _dm$41[ebp]
	mulss	xmm0, DWORD PTR _dm$41[ebp]
	movss	xmm1, DWORD PTR _dm$41[ebp+4]
	mulss	xmm1, DWORD PTR _dm$41[ebp+4]
	addss	xmm0, xmm1
	movss	DWORD PTR _dmr2$40[ebp], xmm0

; 8267 :                 if (dmr2 > 0.000001f) {

	movss	xmm0, DWORD PTR _dmr2$40[ebp]
	comiss	xmm0, DWORD PTR __real@358637bd
	jbe	$LN21@nk_draw_li

; 8268 :                     float scale = 1.0f/dmr2;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _dmr2$40[ebp]
	movss	DWORD PTR _scale$37[ebp], xmm0

; 8269 :                     scale = NK_MIN(100.0f, scale);

	movss	xmm0, DWORD PTR _scale$37[ebp]
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN58@nk_draw_li
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR tv426[ebp], xmm0
	jmp	SHORT $LN59@nk_draw_li
$LN58@nk_draw_li:
	movss	xmm0, DWORD PTR _scale$37[ebp]
	movss	DWORD PTR tv426[ebp], xmm0
$LN59@nk_draw_li:
	movss	xmm0, DWORD PTR tv426[ebp]
	movss	DWORD PTR _scale$37[ebp], xmm0

; 8270 :                     dm = nk_vec2_muls(dm, scale);

	movss	xmm0, DWORD PTR _dm$41[ebp+4]
	mulss	xmm0, DWORD PTR _scale$37[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _dm$41[ebp]
	mulss	xmm0, DWORD PTR _scale$37[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _dm$41[ebp], eax
	mov	DWORD PTR _dm$41[ebp+4], edx
$LN21@nk_draw_li:

; 8271 :                 }
; 8272 : 
; 8273 :                 dm = nk_vec2_muls(dm, AA_SIZE);

	movss	xmm0, DWORD PTR _dm$41[ebp+4]
	mulss	xmm0, DWORD PTR _AA_SIZE$58[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _dm$41[ebp]
	mulss	xmm0, DWORD PTR _AA_SIZE$58[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _dm$41[ebp], eax
	mov	DWORD PTR _dm$41[ebp+4], edx

; 8274 :                 temp[i2*2+0] = nk_vec2_add(points[i2], dm);

	mov	eax, DWORD PTR _i2$39[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	addss	xmm0, DWORD PTR _dm$41[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i2$39[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*8]
	addss	xmm0, DWORD PTR _dm$41[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _i2$39[ebp]
	shl	ecx, 1
	mov	esi, DWORD PTR _temp$48[ebp]
	mov	DWORD PTR [esi+ecx*8], eax
	mov	DWORD PTR [esi+ecx*8+4], edx

; 8275 :                 temp[i2*2+1] = nk_vec2_sub(points[i2], dm);

	mov	eax, DWORD PTR _i2$39[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	subss	xmm0, DWORD PTR _dm$41[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i2$39[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*8]
	subss	xmm0, DWORD PTR _dm$41[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _i2$39[ebp]
	shl	ecx, 1
	mov	esi, DWORD PTR _temp$48[ebp]
	mov	DWORD PTR [esi+ecx*8+8], eax
	mov	DWORD PTR [esi+ecx*8+12], edx

; 8276 : 
; 8277 :                 ids[0] = (nk_draw_index)(idx2 + 0); ids[1] = (nk_draw_index)(idx1+0);

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ids$51[ebp]
	mov	ax, WORD PTR _idx2$38[ebp]
	mov	WORD PTR [edx+ecx], ax
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _ids$51[ebp]
	mov	dx, WORD PTR _idx1$44[ebp]
	mov	WORD PTR [ecx+eax], dx

; 8278 :                 ids[2] = (nk_draw_index)(idx1 + 2); ids[3] = (nk_draw_index)(idx1+2);

	mov	eax, DWORD PTR _idx1$44[ebp]
	add	eax, 2
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [edx+ecx], ax
	mov	eax, DWORD PTR _idx1$44[ebp]
	add	eax, 2
	mov	ecx, 2
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [ecx+edx], ax

; 8279 :                 ids[4] = (nk_draw_index)(idx2 + 2); ids[5] = (nk_draw_index)(idx2+0);

	mov	eax, DWORD PTR _idx2$38[ebp]
	add	eax, 2
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [edx+ecx], ax
	mov	eax, 2
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _ids$51[ebp]
	mov	ax, WORD PTR _idx2$38[ebp]
	mov	WORD PTR [edx+ecx], ax

; 8280 :                 ids[6] = (nk_draw_index)(idx2 + 1); ids[7] = (nk_draw_index)(idx1+1);

	mov	eax, DWORD PTR _idx2$38[ebp]
	add	eax, 1
	mov	ecx, 2
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [ecx+edx], ax
	mov	eax, DWORD PTR _idx1$44[ebp]
	add	eax, 1
	mov	ecx, 2
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [ecx+edx], ax

; 8281 :                 ids[8] = (nk_draw_index)(idx1 + 0); ids[9] = (nk_draw_index)(idx1+0);

	mov	eax, 2
	shl	eax, 3
	mov	ecx, DWORD PTR _ids$51[ebp]
	mov	dx, WORD PTR _idx1$44[ebp]
	mov	WORD PTR [ecx+eax], dx
	mov	eax, 2
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _ids$51[ebp]
	mov	ax, WORD PTR _idx1$44[ebp]
	mov	WORD PTR [edx+ecx], ax

; 8282 :                 ids[10]= (nk_draw_index)(idx2 + 0); ids[11]= (nk_draw_index)(idx2+1);

	mov	eax, 2
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _ids$51[ebp]
	mov	ax, WORD PTR _idx2$38[ebp]
	mov	WORD PTR [edx+ecx], ax
	mov	eax, DWORD PTR _idx2$38[ebp]
	add	eax, 1
	mov	ecx, 2
	imul	edx, ecx, 11
	mov	ecx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [ecx+edx], ax

; 8283 :                 ids += 12;

	mov	eax, DWORD PTR _ids$51[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _ids$51[ebp], eax

; 8284 :                 idx1 = idx2;

	mov	eax, DWORD PTR _idx2$38[ebp]
	mov	DWORD PTR _idx1$44[ebp], eax

; 8285 :             }

	jmp	$LN23@nk_draw_li
$LN22@nk_draw_li:

; 8286 : 
; 8287 :             /* fill vertices */
; 8288 :             for (i = 0; i < points_count; ++i) {

	mov	DWORD PTR _i$43[ebp], 0
	jmp	SHORT $LN20@nk_draw_li
$LN19@nk_draw_li:
	mov	eax, DWORD PTR _i$43[ebp]
	add	eax, 1
	mov	DWORD PTR _i$43[ebp], eax
$LN20@nk_draw_li:
	mov	eax, DWORD PTR _i$43[ebp]
	cmp	eax, DWORD PTR _points_count$[ebp]
	jae	$LN18@nk_draw_li

; 8289 :                 const struct nk_vec2 uv = list->config.null.uv;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [eax+144]
	mov	DWORD PTR _uv$36[ebp], ecx
	mov	DWORD PTR _uv$36[ebp+4], edx

; 8290 :                 vtx = nk_draw_vertex(vtx, &list->config, points[i], uv, col);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _uv$36[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uv$36[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$43[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+4]
	push	ecx
	mov	edx, DWORD PTR [eax+edx*8]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _vtx$52[ebp]
	push	ecx
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$52[ebp], eax

; 8291 :                 vtx = nk_draw_vertex(vtx, &list->config, temp[i*2+0], uv, col_trans);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col_trans$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col_trans$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col_trans$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col_trans$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _uv$36[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uv$36[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$43[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _temp$48[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+4]
	push	ecx
	mov	edx, DWORD PTR [eax+edx*8]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _vtx$52[ebp]
	push	ecx
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$52[ebp], eax

; 8292 :                 vtx = nk_draw_vertex(vtx, &list->config, temp[i*2+1], uv, col_trans);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col_trans$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col_trans$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col_trans$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col_trans$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _uv$36[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uv$36[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$43[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _temp$48[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+12]
	push	ecx
	mov	edx, DWORD PTR [eax+edx*8+8]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _vtx$52[ebp]
	push	ecx
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$52[ebp], eax

; 8293 :             }

	jmp	$LN19@nk_draw_li
$LN18@nk_draw_li:

; 8294 :         } else {

	jmp	$LN9@nk_draw_li
$LN26@nk_draw_li:

; 8295 :             nk_size idx1, i;
; 8296 :             const float half_inner_thickness = (thickness - AA_SIZE) * 0.5f;

	movss	xmm0, DWORD PTR _thickness$[ebp]
	subss	xmm0, DWORD PTR _AA_SIZE$58[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _half_inner_thickness$33[ebp], xmm0

; 8297 :             if (!closed) {

	cmp	DWORD PTR _closed$[ebp], 0
	jne	$LN16@nk_draw_li

; 8298 :                 struct nk_vec2 d1 = nk_vec2_muls(normals[0], half_inner_thickness + AA_SIZE);

	mov	eax, 8
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _half_inner_thickness$33[ebp]
	addss	xmm0, DWORD PTR _AA_SIZE$58[ebp]
	mov	edx, DWORD PTR _normals$49[ebp]
	mulss	xmm0, DWORD PTR [edx+ecx+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _half_inner_thickness$33[ebp]
	addss	xmm0, DWORD PTR _AA_SIZE$58[ebp]
	mov	edx, DWORD PTR _normals$49[ebp]
	mulss	xmm0, DWORD PTR [edx+ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _d1$32[ebp], eax
	mov	DWORD PTR _d1$32[ebp+4], edx

; 8299 :                 struct nk_vec2 d2 = nk_vec2_muls(normals[0], half_inner_thickness);

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+4]
	mulss	xmm0, DWORD PTR _half_inner_thickness$33[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR _half_inner_thickness$33[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _d2$31[ebp], eax
	mov	DWORD PTR _d2$31[ebp+4], edx

; 8300 : 
; 8301 :                 temp[0] = nk_vec2_add(points[0], d1);

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+4]
	addss	xmm0, DWORD PTR _d1$32[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	addss	xmm0, DWORD PTR _d1$32[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	imul	ecx, ecx, 0
	mov	esi, DWORD PTR _temp$48[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx

; 8302 :                 temp[1] = nk_vec2_add(points[0], d2);

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+4]
	addss	xmm0, DWORD PTR _d2$31[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	addss	xmm0, DWORD PTR _d2$31[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	shl	ecx, 0
	mov	esi, DWORD PTR _temp$48[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx

; 8303 :                 temp[2] = nk_vec2_sub(points[0], d2);

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+4]
	subss	xmm0, DWORD PTR _d2$31[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	subss	xmm0, DWORD PTR _d2$31[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	shl	ecx, 1
	mov	esi, DWORD PTR _temp$48[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx

; 8304 :                 temp[3] = nk_vec2_sub(points[0], d1);

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+4]
	subss	xmm0, DWORD PTR _d1$32[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	subss	xmm0, DWORD PTR _d1$32[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	imul	ecx, ecx, 3
	mov	esi, DWORD PTR _temp$48[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx

; 8305 : 
; 8306 :                 d1 = nk_vec2_muls(normals[points_count-1], half_inner_thickness + AA_SIZE);

	movss	xmm0, DWORD PTR _half_inner_thickness$33[ebp]
	addss	xmm0, DWORD PTR _AA_SIZE$58[ebp]
	mov	eax, DWORD PTR _points_count$[ebp]
	mov	ecx, DWORD PTR _normals$49[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax*8-4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _half_inner_thickness$33[ebp]
	addss	xmm0, DWORD PTR _AA_SIZE$58[ebp]
	mov	edx, DWORD PTR _points_count$[ebp]
	mov	eax, DWORD PTR _normals$49[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*8-8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _d1$32[ebp], eax
	mov	DWORD PTR _d1$32[ebp+4], edx

; 8307 :                 d2 = nk_vec2_muls(normals[points_count-1], half_inner_thickness);

	mov	eax, DWORD PTR _points_count$[ebp]
	mov	ecx, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8-4]
	mulss	xmm0, DWORD PTR _half_inner_thickness$33[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _points_count$[ebp]
	mov	eax, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [eax+edx*8-8]
	mulss	xmm0, DWORD PTR _half_inner_thickness$33[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _d2$31[ebp], eax
	mov	DWORD PTR _d2$31[ebp+4], edx

; 8308 : 
; 8309 :                 temp[(points_count-1)*4+0] = nk_vec2_add(points[points_count-1], d1);

	mov	eax, DWORD PTR _points_count$[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8-4]
	addss	xmm0, DWORD PTR _d1$32[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _points_count$[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*8-8]
	addss	xmm0, DWORD PTR _d1$32[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _points_count$[ebp]
	lea	ecx, DWORD PTR [ecx*4-4]
	mov	esi, DWORD PTR _temp$48[ebp]
	mov	DWORD PTR [esi+ecx*8], eax
	mov	DWORD PTR [esi+ecx*8+4], edx

; 8310 :                 temp[(points_count-1)*4+1] = nk_vec2_add(points[points_count-1], d2);

	mov	eax, DWORD PTR _points_count$[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8-4]
	addss	xmm0, DWORD PTR _d2$31[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _points_count$[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*8-8]
	addss	xmm0, DWORD PTR _d2$31[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _points_count$[ebp]
	lea	ecx, DWORD PTR [ecx*4-4]
	mov	esi, DWORD PTR _temp$48[ebp]
	mov	DWORD PTR [esi+ecx*8+8], eax
	mov	DWORD PTR [esi+ecx*8+12], edx

; 8311 :                 temp[(points_count-1)*4+2] = nk_vec2_sub(points[points_count-1], d2);

	mov	eax, DWORD PTR _points_count$[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8-4]
	subss	xmm0, DWORD PTR _d2$31[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _points_count$[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*8-8]
	subss	xmm0, DWORD PTR _d2$31[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _points_count$[ebp]
	lea	ecx, DWORD PTR [ecx*4-4]
	mov	esi, DWORD PTR _temp$48[ebp]
	mov	DWORD PTR [esi+ecx*8+16], eax
	mov	DWORD PTR [esi+ecx*8+20], edx

; 8312 :                 temp[(points_count-1)*4+3] = nk_vec2_sub(points[points_count-1], d1);

	mov	eax, DWORD PTR _points_count$[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8-4]
	subss	xmm0, DWORD PTR _d1$32[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _points_count$[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*8-8]
	subss	xmm0, DWORD PTR _d1$32[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _points_count$[ebp]
	lea	ecx, DWORD PTR [ecx*4-4]
	mov	esi, DWORD PTR _temp$48[ebp]
	mov	DWORD PTR [esi+ecx*8+24], eax
	mov	DWORD PTR [esi+ecx*8+28], edx
$LN16@nk_draw_li:

; 8313 :             }
; 8314 : 
; 8315 :             /* add all elements */
; 8316 :             idx1 = index;

	mov	eax, DWORD PTR _index$55[ebp]
	mov	DWORD PTR _idx1$35[ebp], eax

; 8317 :             for (i1 = 0; i1 < count; ++i1) {

	mov	DWORD PTR _i1$57[ebp], 0
	jmp	SHORT $LN15@nk_draw_li
$LN14@nk_draw_li:
	mov	eax, DWORD PTR _i1$57[ebp]
	add	eax, 1
	mov	DWORD PTR _i1$57[ebp], eax
$LN15@nk_draw_li:
	mov	eax, DWORD PTR _i1$57[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	$LN13@nk_draw_li

; 8318 :                 struct nk_vec2 dm_out, dm_in;
; 8319 :                 const nk_size i2 = ((i1+1) == points_count) ? 0: (i1 + 1);

	mov	eax, DWORD PTR _i1$57[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _points_count$[ebp]
	jne	SHORT $LN60@nk_draw_li
	mov	DWORD PTR tv760[ebp], 0
	jmp	SHORT $LN61@nk_draw_li
$LN60@nk_draw_li:
	mov	ecx, DWORD PTR _i1$57[ebp]
	add	ecx, 1
	mov	DWORD PTR tv760[ebp], ecx
$LN61@nk_draw_li:
	mov	edx, DWORD PTR tv760[ebp]
	mov	DWORD PTR _i2$28[ebp], edx

; 8320 :                 nk_size idx2 = ((i1+1) == points_count) ? index: (idx1 + 4);

	mov	eax, DWORD PTR _i1$57[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _points_count$[ebp]
	jne	SHORT $LN62@nk_draw_li
	mov	ecx, DWORD PTR _index$55[ebp]
	mov	DWORD PTR tv764[ebp], ecx
	jmp	SHORT $LN63@nk_draw_li
$LN62@nk_draw_li:
	mov	edx, DWORD PTR _idx1$35[ebp]
	add	edx, 4
	mov	DWORD PTR tv764[ebp], edx
$LN63@nk_draw_li:
	mov	eax, DWORD PTR tv764[ebp]
	mov	DWORD PTR _idx2$27[ebp], eax

; 8321 : 
; 8322 :                 /* average normals */
; 8323 :                 struct nk_vec2 dm = nk_vec2_muls(nk_vec2_add(normals[i1], normals[i2]), 0.5f);

	mov	eax, DWORD PTR _i1$57[ebp]
	mov	ecx, DWORD PTR _normals$49[ebp]
	mov	edx, DWORD PTR _i2$28[ebp]
	mov	esi, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	addss	xmm0, DWORD PTR [esi+edx*8+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i1$57[ebp]
	mov	ecx, DWORD PTR _normals$49[ebp]
	mov	edx, DWORD PTR _i2$28[ebp]
	mov	esi, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8]
	addss	xmm0, DWORD PTR [esi+edx*8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR $T7[ebp+4], edx
	mov	eax, DWORD PTR _i1$57[ebp]
	mov	ecx, DWORD PTR _normals$49[ebp]
	mov	edx, DWORD PTR _i2$28[ebp]
	mov	esi, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	addss	xmm0, DWORD PTR [esi+edx*8+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i1$57[ebp]
	mov	ecx, DWORD PTR _normals$49[ebp]
	mov	edx, DWORD PTR _i2$28[ebp]
	mov	esi, DWORD PTR _normals$49[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8]
	addss	xmm0, DWORD PTR [esi+edx*8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR $T8[ebp+4], edx
	movss	xmm0, DWORD PTR $T7[ebp+4]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR $T8[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _dm$26[ebp], eax
	mov	DWORD PTR _dm$26[ebp+4], edx

; 8324 :                 float dmr2 = dm.x * dm.x + dm.y* dm.y;

	movss	xmm0, DWORD PTR _dm$26[ebp]
	mulss	xmm0, DWORD PTR _dm$26[ebp]
	movss	xmm1, DWORD PTR _dm$26[ebp+4]
	mulss	xmm1, DWORD PTR _dm$26[ebp+4]
	addss	xmm0, xmm1
	movss	DWORD PTR _dmr2$25[ebp], xmm0

; 8325 :                 if (dmr2 > 0.000001f) {

	movss	xmm0, DWORD PTR _dmr2$25[ebp]
	comiss	xmm0, DWORD PTR __real@358637bd
	jbe	$LN12@nk_draw_li

; 8326 :                     float scale = 1.0f/dmr2;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _dmr2$25[ebp]
	movss	DWORD PTR _scale$24[ebp], xmm0

; 8327 :                     scale = NK_MIN(100.0f, scale);

	movss	xmm0, DWORD PTR _scale$24[ebp]
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN64@nk_draw_li
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR tv810[ebp], xmm0
	jmp	SHORT $LN65@nk_draw_li
$LN64@nk_draw_li:
	movss	xmm0, DWORD PTR _scale$24[ebp]
	movss	DWORD PTR tv810[ebp], xmm0
$LN65@nk_draw_li:
	movss	xmm0, DWORD PTR tv810[ebp]
	movss	DWORD PTR _scale$24[ebp], xmm0

; 8328 :                     dm = nk_vec2_muls(dm, scale);

	movss	xmm0, DWORD PTR _dm$26[ebp+4]
	mulss	xmm0, DWORD PTR _scale$24[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _dm$26[ebp]
	mulss	xmm0, DWORD PTR _scale$24[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _dm$26[ebp], eax
	mov	DWORD PTR _dm$26[ebp+4], edx
$LN12@nk_draw_li:

; 8329 :                 }
; 8330 : 
; 8331 :                 dm_out = nk_vec2_muls(dm, ((half_inner_thickness) + AA_SIZE));

	movss	xmm0, DWORD PTR _half_inner_thickness$33[ebp]
	addss	xmm0, DWORD PTR _AA_SIZE$58[ebp]
	mulss	xmm0, DWORD PTR _dm$26[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _half_inner_thickness$33[ebp]
	addss	xmm0, DWORD PTR _AA_SIZE$58[ebp]
	mulss	xmm0, DWORD PTR _dm$26[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _dm_out$30[ebp], eax
	mov	DWORD PTR _dm_out$30[ebp+4], edx

; 8332 :                 dm_in = nk_vec2_muls(dm, half_inner_thickness);

	movss	xmm0, DWORD PTR _dm$26[ebp+4]
	mulss	xmm0, DWORD PTR _half_inner_thickness$33[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _dm$26[ebp]
	mulss	xmm0, DWORD PTR _half_inner_thickness$33[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _dm_in$29[ebp], eax
	mov	DWORD PTR _dm_in$29[ebp+4], edx

; 8333 :                 temp[i2*4+0] = nk_vec2_add(points[i2], dm_out);

	mov	eax, DWORD PTR _i2$28[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	addss	xmm0, DWORD PTR _dm_out$30[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i2$28[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*8]
	addss	xmm0, DWORD PTR _dm_out$30[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _i2$28[ebp]
	shl	ecx, 2
	mov	esi, DWORD PTR _temp$48[ebp]
	mov	DWORD PTR [esi+ecx*8], eax
	mov	DWORD PTR [esi+ecx*8+4], edx

; 8334 :                 temp[i2*4+1] = nk_vec2_add(points[i2], dm_in);

	mov	eax, DWORD PTR _i2$28[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	addss	xmm0, DWORD PTR _dm_in$29[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i2$28[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*8]
	addss	xmm0, DWORD PTR _dm_in$29[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _i2$28[ebp]
	shl	ecx, 2
	mov	esi, DWORD PTR _temp$48[ebp]
	mov	DWORD PTR [esi+ecx*8+8], eax
	mov	DWORD PTR [esi+ecx*8+12], edx

; 8335 :                 temp[i2*4+2] = nk_vec2_sub(points[i2], dm_in);

	mov	eax, DWORD PTR _i2$28[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	subss	xmm0, DWORD PTR _dm_in$29[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i2$28[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*8]
	subss	xmm0, DWORD PTR _dm_in$29[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _i2$28[ebp]
	shl	ecx, 2
	mov	esi, DWORD PTR _temp$48[ebp]
	mov	DWORD PTR [esi+ecx*8+16], eax
	mov	DWORD PTR [esi+ecx*8+20], edx

; 8336 :                 temp[i2*4+3] = nk_vec2_sub(points[i2], dm_out);

	mov	eax, DWORD PTR _i2$28[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	subss	xmm0, DWORD PTR _dm_out$30[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i2$28[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*8]
	subss	xmm0, DWORD PTR _dm_out$30[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _i2$28[ebp]
	shl	ecx, 2
	mov	esi, DWORD PTR _temp$48[ebp]
	mov	DWORD PTR [esi+ecx*8+24], eax
	mov	DWORD PTR [esi+ecx*8+28], edx

; 8337 : 
; 8338 :                 /* add indexes */
; 8339 :                 ids[0] = (nk_draw_index)(idx2 + 1); ids[1] = (nk_draw_index)(idx1+1);

	mov	eax, DWORD PTR _idx2$27[ebp]
	add	eax, 1
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [ecx+edx], ax
	mov	eax, DWORD PTR _idx1$35[ebp]
	add	eax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [edx+ecx], ax

; 8340 :                 ids[2] = (nk_draw_index)(idx1 + 2); ids[3] = (nk_draw_index)(idx1+2);

	mov	eax, DWORD PTR _idx1$35[ebp]
	add	eax, 2
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [edx+ecx], ax
	mov	eax, DWORD PTR _idx1$35[ebp]
	add	eax, 2
	mov	ecx, 2
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [ecx+edx], ax

; 8341 :                 ids[4] = (nk_draw_index)(idx2 + 2); ids[5] = (nk_draw_index)(idx2+1);

	mov	eax, DWORD PTR _idx2$27[ebp]
	add	eax, 2
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [edx+ecx], ax
	mov	eax, DWORD PTR _idx2$27[ebp]
	add	eax, 1
	mov	ecx, 2
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [ecx+edx], ax

; 8342 :                 ids[6] = (nk_draw_index)(idx2 + 1); ids[7] = (nk_draw_index)(idx1+1);

	mov	eax, DWORD PTR _idx2$27[ebp]
	add	eax, 1
	mov	ecx, 2
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [ecx+edx], ax
	mov	eax, DWORD PTR _idx1$35[ebp]
	add	eax, 1
	mov	ecx, 2
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [ecx+edx], ax

; 8343 :                 ids[8] = (nk_draw_index)(idx1 + 0); ids[9] = (nk_draw_index)(idx1+0);

	mov	eax, 2
	shl	eax, 3
	mov	ecx, DWORD PTR _ids$51[ebp]
	mov	dx, WORD PTR _idx1$35[ebp]
	mov	WORD PTR [ecx+eax], dx
	mov	eax, 2
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _ids$51[ebp]
	mov	ax, WORD PTR _idx1$35[ebp]
	mov	WORD PTR [edx+ecx], ax

; 8344 :                 ids[10]= (nk_draw_index)(idx2 + 0); ids[11] = (nk_draw_index)(idx2+1);

	mov	eax, 2
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _ids$51[ebp]
	mov	ax, WORD PTR _idx2$27[ebp]
	mov	WORD PTR [edx+ecx], ax
	mov	eax, DWORD PTR _idx2$27[ebp]
	add	eax, 1
	mov	ecx, 2
	imul	edx, ecx, 11
	mov	ecx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [ecx+edx], ax

; 8345 :                 ids[12]= (nk_draw_index)(idx2 + 2); ids[13] = (nk_draw_index)(idx1+2);

	mov	eax, DWORD PTR _idx2$27[ebp]
	add	eax, 2
	mov	ecx, 2
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [ecx+edx], ax
	mov	eax, DWORD PTR _idx1$35[ebp]
	add	eax, 2
	mov	ecx, 2
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [ecx+edx], ax

; 8346 :                 ids[14]= (nk_draw_index)(idx1 + 3); ids[15] = (nk_draw_index)(idx1+3);

	mov	eax, DWORD PTR _idx1$35[ebp]
	add	eax, 3
	mov	ecx, 2
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [ecx+edx], ax
	mov	eax, DWORD PTR _idx1$35[ebp]
	add	eax, 3
	mov	ecx, 2
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [ecx+edx], ax

; 8347 :                 ids[16]= (nk_draw_index)(idx2 + 3); ids[17] = (nk_draw_index)(idx2+2);

	mov	eax, DWORD PTR _idx2$27[ebp]
	add	eax, 3
	mov	ecx, 2
	shl	ecx, 4
	mov	edx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [edx+ecx], ax
	mov	eax, DWORD PTR _idx2$27[ebp]
	add	eax, 2
	mov	ecx, 2
	imul	edx, ecx, 17
	mov	ecx, DWORD PTR _ids$51[ebp]
	mov	WORD PTR [ecx+edx], ax

; 8348 :                 ids += 18;

	mov	eax, DWORD PTR _ids$51[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR _ids$51[ebp], eax

; 8349 :                 idx1 = idx2;

	mov	eax, DWORD PTR _idx2$27[ebp]
	mov	DWORD PTR _idx1$35[ebp], eax

; 8350 :             }

	jmp	$LN14@nk_draw_li
$LN13@nk_draw_li:

; 8351 : 
; 8352 :             /* add vertices */
; 8353 :             for (i = 0; i < points_count; ++i) {

	mov	DWORD PTR _i$34[ebp], 0
	jmp	SHORT $LN11@nk_draw_li
$LN10@nk_draw_li:
	mov	eax, DWORD PTR _i$34[ebp]
	add	eax, 1
	mov	DWORD PTR _i$34[ebp], eax
$LN11@nk_draw_li:
	mov	eax, DWORD PTR _i$34[ebp]
	cmp	eax, DWORD PTR _points_count$[ebp]
	jae	$LN9@nk_draw_li

; 8354 :                 const struct nk_vec2 uv = list->config.null.uv;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [eax+144]
	mov	DWORD PTR _uv$23[ebp], ecx
	mov	DWORD PTR _uv$23[ebp+4], edx

; 8355 :                 vtx = nk_draw_vertex(vtx, &list->config, temp[i*4+0], uv, col_trans);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col_trans$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col_trans$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col_trans$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col_trans$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _uv$23[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uv$23[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$34[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _temp$48[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+4]
	push	ecx
	mov	edx, DWORD PTR [eax+edx*8]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _vtx$52[ebp]
	push	ecx
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$52[ebp], eax

; 8356 :                 vtx = nk_draw_vertex(vtx, &list->config, temp[i*4+1], uv, col);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _uv$23[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uv$23[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$34[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _temp$48[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+12]
	push	ecx
	mov	edx, DWORD PTR [eax+edx*8+8]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _vtx$52[ebp]
	push	ecx
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$52[ebp], eax

; 8357 :                 vtx = nk_draw_vertex(vtx, &list->config, temp[i*4+2], uv, col);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _uv$23[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uv$23[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$34[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _temp$48[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+20]
	push	ecx
	mov	edx, DWORD PTR [eax+edx*8+16]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _vtx$52[ebp]
	push	ecx
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$52[ebp], eax

; 8358 :                 vtx = nk_draw_vertex(vtx, &list->config, temp[i*4+3], uv, col_trans);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col_trans$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col_trans$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col_trans$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col_trans$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _uv$23[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uv$23[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$34[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _temp$48[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+28]
	push	ecx
	mov	edx, DWORD PTR [eax+edx*8+24]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _vtx$52[ebp]
	push	ecx
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$52[ebp], eax

; 8359 :             }

	jmp	$LN10@nk_draw_li
$LN9@nk_draw_li:

; 8360 :         }
; 8361 :         /* free temporary normals + points */
; 8362 :         nk_buffer_reset(list->vertices, NK_BUFFER_FRONT);

	push	0
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	call	_nk_buffer_reset
	add	esp, 8

; 8363 :     } else {

	jmp	$LN3@nk_draw_li
$LN36@nk_draw_li:

; 8364 :         /* NON ANTI-ALIASED STROKE */
; 8365 :         nk_size i1 = 0;

	mov	DWORD PTR _i1$22[ebp], 0

; 8366 :         nk_size idx = list->vertex_count;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	DWORD PTR _idx$21[ebp], ecx

; 8367 :         const nk_size idx_count = count * 6;

	imul	eax, DWORD PTR _count$[ebp], 6
	mov	DWORD PTR _idx_count$20[ebp], eax

; 8368 :         const nk_size vtx_count = count * 4;

	mov	eax, DWORD PTR _count$[ebp]
	shl	eax, 2
	mov	DWORD PTR _vtx_count$19[ebp], eax

; 8369 :         void *vtx = nk_draw_list_alloc_vertices(list, vtx_count);

	mov	eax, DWORD PTR _vtx_count$19[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_alloc_vertices
	add	esp, 8
	mov	DWORD PTR _vtx$18[ebp], eax

; 8370 :         nk_draw_index *ids = nk_draw_list_alloc_elements(list, idx_count);

	mov	eax, DWORD PTR _idx_count$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_alloc_elements
	add	esp, 8
	mov	DWORD PTR _ids$17[ebp], eax

; 8371 :         if (!vtx || !ids) return;

	cmp	DWORD PTR _vtx$18[ebp], 0
	je	SHORT $LN6@nk_draw_li
	cmp	DWORD PTR _ids$17[ebp], 0
	jne	SHORT $LN7@nk_draw_li
$LN6@nk_draw_li:
	jmp	$LN3@nk_draw_li
$LN7@nk_draw_li:

; 8372 : 
; 8373 :         for (i1 = 0; i1 < count; ++i1) {

	mov	DWORD PTR _i1$22[ebp], 0
	jmp	SHORT $LN5@nk_draw_li
$LN4@nk_draw_li:
	mov	eax, DWORD PTR _i1$22[ebp]
	add	eax, 1
	mov	DWORD PTR _i1$22[ebp], eax
$LN5@nk_draw_li:
	mov	eax, DWORD PTR _i1$22[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	$LN3@nk_draw_li

; 8374 :             float dx, dy;
; 8375 :             const struct nk_vec2 uv = list->config.null.uv;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [eax+144]
	mov	DWORD PTR _uv$14[ebp], ecx
	mov	DWORD PTR _uv$14[ebp+4], edx

; 8376 :             const nk_size i2 = ((i1+1) == points_count) ? 0 : i1 + 1;

	mov	eax, DWORD PTR _i1$22[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _points_count$[ebp]
	jne	SHORT $LN66@nk_draw_li
	mov	DWORD PTR tv1060[ebp], 0
	jmp	SHORT $LN67@nk_draw_li
$LN66@nk_draw_li:
	mov	ecx, DWORD PTR _i1$22[ebp]
	add	ecx, 1
	mov	DWORD PTR tv1060[ebp], ecx
$LN67@nk_draw_li:
	mov	edx, DWORD PTR tv1060[ebp]
	mov	DWORD PTR _i2$13[ebp], edx

; 8377 :             const struct nk_vec2 p1 = points[i1];

	mov	eax, DWORD PTR _i1$22[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR _p1$12[ebp], edx
	mov	DWORD PTR _p1$12[ebp+4], eax

; 8378 :             const struct nk_vec2 p2 = points[i2];

	mov	eax, DWORD PTR _i2$13[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR _p2$11[ebp], edx
	mov	DWORD PTR _p2$11[ebp+4], eax

; 8379 :             struct nk_vec2 diff = nk_vec2_sub(p2, p1);

	movss	xmm0, DWORD PTR _p2$11[ebp+4]
	subss	xmm0, DWORD PTR _p1$12[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _p2$11[ebp]
	subss	xmm0, DWORD PTR _p1$12[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _diff$10[ebp], eax
	mov	DWORD PTR _diff$10[ebp+4], edx

; 8380 :             float len;
; 8381 : 
; 8382 :             /* vec2 inverted length  */
; 8383 :             len = nk_vec2_len_sqr(diff);

	movss	xmm0, DWORD PTR _diff$10[ebp]
	mulss	xmm0, DWORD PTR _diff$10[ebp]
	movss	xmm1, DWORD PTR _diff$10[ebp+4]
	mulss	xmm1, DWORD PTR _diff$10[ebp+4]
	addss	xmm0, xmm1
	movss	DWORD PTR _len$9[ebp], xmm0

; 8384 :             if (len != 0.0f)

	movss	xmm0, DWORD PTR _len$9[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@nk_draw_li

; 8385 :                 len = nk_inv_sqrt(len);

	push	ecx
	movss	xmm0, DWORD PTR _len$9[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_inv_sqrt
	add	esp, 4
	fstp	DWORD PTR _len$9[ebp]
	jmp	SHORT $LN1@nk_draw_li
$LN2@nk_draw_li:

; 8386 :             else len = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _len$9[ebp], xmm0
$LN1@nk_draw_li:

; 8387 :             diff = nk_vec2_muls(diff, len);

	movss	xmm0, DWORD PTR _diff$10[ebp+4]
	mulss	xmm0, DWORD PTR _len$9[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _diff$10[ebp]
	mulss	xmm0, DWORD PTR _len$9[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _diff$10[ebp], eax
	mov	DWORD PTR _diff$10[ebp+4], edx

; 8388 : 
; 8389 :             /* add vertices */
; 8390 :             dx = diff.x * (thickness * 0.5f);

	movss	xmm0, DWORD PTR _thickness$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _diff$10[ebp]
	movss	DWORD PTR _dx$16[ebp], xmm0

; 8391 :             dy = diff.y * (thickness * 0.5f);

	movss	xmm0, DWORD PTR _thickness$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _diff$10[ebp+4]
	movss	DWORD PTR _dy$15[ebp], xmm0

; 8392 : 
; 8393 :             vtx = nk_draw_vertex(vtx, &list->config, nk_vec2(p1.x + dy, p1.y - dx), uv, col);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _uv$14[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uv$14[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _p1$12[ebp+4]
	subss	xmm0, DWORD PTR _dx$16[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _p1$12[ebp]
	addss	xmm0, DWORD PTR _dy$15[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	edx, DWORD PTR _list$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	mov	eax, DWORD PTR _vtx$18[ebp]
	push	eax
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$18[ebp], eax

; 8394 :             vtx = nk_draw_vertex(vtx, &list->config, nk_vec2(p2.x + dy, p2.y - dx), uv, col);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _uv$14[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uv$14[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _p2$11[ebp+4]
	subss	xmm0, DWORD PTR _dx$16[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _p2$11[ebp]
	addss	xmm0, DWORD PTR _dy$15[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	edx, DWORD PTR _list$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	mov	eax, DWORD PTR _vtx$18[ebp]
	push	eax
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$18[ebp], eax

; 8395 :             vtx = nk_draw_vertex(vtx, &list->config, nk_vec2(p2.x - dy, p2.y + dx), uv, col);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _uv$14[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uv$14[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _p2$11[ebp+4]
	addss	xmm0, DWORD PTR _dx$16[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _p2$11[ebp]
	subss	xmm0, DWORD PTR _dy$15[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	edx, DWORD PTR _list$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	mov	eax, DWORD PTR _vtx$18[ebp]
	push	eax
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$18[ebp], eax

; 8396 :             vtx = nk_draw_vertex(vtx, &list->config, nk_vec2(p1.x - dy, p1.y + dx), uv, col);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _col$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _col$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _col$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _uv$14[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uv$14[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _p1$12[ebp+4]
	addss	xmm0, DWORD PTR _dx$16[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _p1$12[ebp]
	subss	xmm0, DWORD PTR _dy$15[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	edx, DWORD PTR _list$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	mov	eax, DWORD PTR _vtx$18[ebp]
	push	eax
	call	_nk_draw_vertex
	add	esp, 40					; 00000028H
	mov	DWORD PTR _vtx$18[ebp], eax

; 8397 : 
; 8398 :             ids[0] = (nk_draw_index)(idx+0); ids[1] = (nk_draw_index)(idx+1);

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ids$17[ebp]
	mov	ax, WORD PTR _idx$21[ebp]
	mov	WORD PTR [edx+ecx], ax
	mov	eax, DWORD PTR _idx$21[ebp]
	add	eax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _ids$17[ebp]
	mov	WORD PTR [edx+ecx], ax

; 8399 :             ids[2] = (nk_draw_index)(idx+2); ids[3] = (nk_draw_index)(idx+0);

	mov	eax, DWORD PTR _idx$21[ebp]
	add	eax, 2
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _ids$17[ebp]
	mov	WORD PTR [edx+ecx], ax
	mov	eax, 2
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _ids$17[ebp]
	mov	ax, WORD PTR _idx$21[ebp]
	mov	WORD PTR [edx+ecx], ax

; 8400 :             ids[4] = (nk_draw_index)(idx+2); ids[5] = (nk_draw_index)(idx+3);

	mov	eax, DWORD PTR _idx$21[ebp]
	add	eax, 2
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _ids$17[ebp]
	mov	WORD PTR [edx+ecx], ax
	mov	eax, DWORD PTR _idx$21[ebp]
	add	eax, 3
	mov	ecx, 2
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _ids$17[ebp]
	mov	WORD PTR [ecx+edx], ax

; 8401 : 
; 8402 :             ids += 6;

	mov	eax, DWORD PTR _ids$17[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _ids$17[ebp], eax

; 8403 :             idx += 4;

	mov	eax, DWORD PTR _idx$21[ebp]
	add	eax, 4
	mov	DWORD PTR _idx$21[ebp], eax

; 8404 :         }

	jmp	$LN4@nk_draw_li
$LN3@nk_draw_li:

; 8405 :     }
; 8406 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN85@nk_draw_li
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1056				; 00000420H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN85@nk_draw_li:
	DD	16					; 00000010H
	DD	$LN84@nk_draw_li
$LN84@nk_draw_li:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN68@nk_draw_li
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN69@nk_draw_li
	DD	-232					; ffffff18H
	DD	8
	DD	$LN70@nk_draw_li
	DD	-284					; fffffee4H
	DD	8
	DD	$LN71@nk_draw_li
	DD	-300					; fffffed4H
	DD	8
	DD	$LN72@nk_draw_li
	DD	-364					; fffffe94H
	DD	8
	DD	$LN73@nk_draw_li
	DD	-416					; fffffe60H
	DD	8
	DD	$LN74@nk_draw_li
	DD	-432					; fffffe50H
	DD	8
	DD	$LN75@nk_draw_li
	DD	-448					; fffffe40H
	DD	8
	DD	$LN76@nk_draw_li
	DD	-464					; fffffe30H
	DD	8
	DD	$LN77@nk_draw_li
	DD	-504					; fffffe08H
	DD	8
	DD	$LN78@nk_draw_li
	DD	-544					; fffffde0H
	DD	8
	DD	$LN79@nk_draw_li
	DD	-656					; fffffd70H
	DD	8
	DD	$LN80@nk_draw_li
	DD	-684					; fffffd54H
	DD	8
	DD	$LN81@nk_draw_li
	DD	-700					; fffffd44H
	DD	8
	DD	$LN82@nk_draw_li
	DD	-716					; fffffd34H
	DD	8
	DD	$LN83@nk_draw_li
$LN83@nk_draw_li:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN82@nk_draw_li:
	DB	112					; 00000070H
	DB	50					; 00000032H
	DB	0
$LN81@nk_draw_li:
	DB	112					; 00000070H
	DB	49					; 00000031H
	DB	0
$LN80@nk_draw_li:
	DB	117					; 00000075H
	DB	118					; 00000076H
	DB	0
$LN79@nk_draw_li:
	DB	117					; 00000075H
	DB	118					; 00000076H
	DB	0
$LN78@nk_draw_li:
	DB	100					; 00000064H
	DB	109					; 0000006dH
	DB	0
$LN77@nk_draw_li:
	DB	100					; 00000064H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN76@nk_draw_li:
	DB	100					; 00000064H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN75@nk_draw_li:
	DB	100					; 00000064H
	DB	50					; 00000032H
	DB	0
$LN74@nk_draw_li:
	DB	100					; 00000064H
	DB	49					; 00000031H
	DB	0
$LN73@nk_draw_li:
	DB	117					; 00000075H
	DB	118					; 00000076H
	DB	0
$LN72@nk_draw_li:
	DB	100					; 00000064H
	DB	109					; 0000006dH
	DB	0
$LN71@nk_draw_li:
	DB	100					; 00000064H
	DB	0
$LN70@nk_draw_li:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN69@nk_draw_li:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN68@nk_draw_li:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
_nk_draw_list_stroke_poly_line ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_stroke_curve
_TEXT	SEGMENT
_list$ = 8						; size = 4
_p0$ = 12						; size = 8
_cp0$ = 20						; size = 8
_cp1$ = 28						; size = 8
_p1$ = 36						; size = 8
_col$ = 44						; size = 4
_segments$ = 48						; size = 4
_thickness$ = 52					; size = 4
_nk_draw_list_stroke_curve PROC				; COMDAT

; 8836 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8837 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN5@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_stroke_curve@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_draw_li:

; 8838 :     if (!list || !col.a) return;

	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN1@nk_draw_li
	movzx	eax, BYTE PTR _col$[ebp+3]
	test	eax, eax
	jne	SHORT $LN2@nk_draw_li
$LN1@nk_draw_li:
	jmp	SHORT $LN3@nk_draw_li
$LN2@nk_draw_li:

; 8839 :     nk_draw_list_path_line_to(list, p0);

	mov	eax, DWORD PTR _p0$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _p0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 8840 :     nk_draw_list_path_curve_to(list, cp0, cp1, p1, segments);

	mov	eax, DWORD PTR _segments$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p1$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _p1$[ebp]
	push	edx
	mov	eax, DWORD PTR _cp1$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _cp1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cp0$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _cp0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_path_curve_to
	add	esp, 32					; 00000020H

; 8841 :     nk_draw_list_path_stroke(list, col, NK_STROKE_OPEN, thickness);

	push	ecx
	movss	xmm0, DWORD PTR _thickness$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_path_stroke
	add	esp, 16					; 00000010H
$LN3@nk_draw_li:

; 8842 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_stroke_curve ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_stroke_circle
_TEXT	SEGMENT
tv137 = -228						; size = 8
tv133 = -220						; size = 4
tv95 = -216						; size = 8
tv91 = -208						; size = 4
_a_max$ = -8						; size = 4
_list$ = 8						; size = 4
_center$ = 12						; size = 8
_radius$ = 20						; size = 4
_col$ = 24						; size = 4
_segs$ = 28						; size = 4
_thickness$ = 32					; size = 4
_nk_draw_list_stroke_circle PROC			; COMDAT

; 8823 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8824 :     float a_max;
; 8825 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN5@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_stroke_circle@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_draw_li:

; 8826 :     if (!list || !col.a) return;

	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN1@nk_draw_li
	movzx	eax, BYTE PTR _col$[ebp+3]
	test	eax, eax
	jne	SHORT $LN2@nk_draw_li
$LN1@nk_draw_li:
	jmp	$LN3@nk_draw_li
$LN2@nk_draw_li:

; 8827 :     a_max = NK_PI * 2.0f * ((float)segs - 1.0f) / (float)segs;

	mov	eax, DWORD PTR _segs$[ebp]
	mov	DWORD PTR tv91[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv91[ebp]
	mov	ecx, DWORD PTR tv91[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv95[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv95[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@40c90fdb
	mov	edx, DWORD PTR _segs$[ebp]
	mov	DWORD PTR tv133[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv133[ebp]
	mov	eax, DWORD PTR tv133[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv137[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv137[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _a_max$[ebp], xmm0

; 8828 :     nk_draw_list_path_arc_to(list, center, radius, 0.0f, a_max, segs);

	mov	eax, DWORD PTR _segs$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _a_max$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _center$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _center$[ebp]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_arc_to
	add	esp, 28					; 0000001cH

; 8829 :     nk_draw_list_path_stroke(list, col, NK_STROKE_CLOSED, thickness);

	push	ecx
	movss	xmm0, DWORD PTR _thickness$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_path_stroke
	add	esp, 16					; 00000010H
$LN3@nk_draw_li:

; 8830 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_stroke_circle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_stroke_triangle
_TEXT	SEGMENT
_list$ = 8						; size = 4
_a$ = 12						; size = 8
_b$ = 20						; size = 8
_c$ = 28						; size = 8
_col$ = 36						; size = 4
_thickness$ = 40					; size = 4
_nk_draw_list_stroke_triangle PROC			; COMDAT

; 8799 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8800 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN5@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_stroke_triangle@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_draw_li:

; 8801 :     if (!list || !col.a) return;

	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN1@nk_draw_li
	movzx	eax, BYTE PTR _col$[ebp+3]
	test	eax, eax
	jne	SHORT $LN2@nk_draw_li
$LN1@nk_draw_li:
	jmp	SHORT $LN3@nk_draw_li
$LN2@nk_draw_li:

; 8802 :     nk_draw_list_path_line_to(list, a);

	mov	eax, DWORD PTR _a$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 8803 :     nk_draw_list_path_line_to(list, b);

	mov	eax, DWORD PTR _b$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 8804 :     nk_draw_list_path_line_to(list, c);

	mov	eax, DWORD PTR _c$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 8805 :     nk_draw_list_path_stroke(list, col, NK_STROKE_CLOSED, thickness);

	push	ecx
	movss	xmm0, DWORD PTR _thickness$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_path_stroke
	add	esp, 16					; 00000010H
$LN3@nk_draw_li:

; 8806 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_stroke_triangle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_stroke_rect
_TEXT	SEGMENT
_list$ = 8						; size = 4
_rect$ = 12						; size = 16
_col$ = 28						; size = 4
_rounding$ = 32						; size = 4
_thickness$ = 36					; size = 4
_nk_draw_list_stroke_rect PROC				; COMDAT

; 8737 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8738 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN7@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_stroke_rect@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_draw_li:

; 8739 :     if (!list || !col.a) return;

	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN3@nk_draw_li
	movzx	eax, BYTE PTR _col$[ebp+3]
	test	eax, eax
	jne	SHORT $LN4@nk_draw_li
$LN3@nk_draw_li:
	jmp	$LN5@nk_draw_li
$LN4@nk_draw_li:

; 8740 :     if (list->line_AA == NK_ANTI_ALIASING_ON) {

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+196], 1
	jne	SHORT $LN2@nk_draw_li

; 8741 :         nk_draw_list_path_rect_to(list, nk_vec2(rect.x, rect.y),
; 8742 :             nk_vec2(rect.x + rect.w, rect.y + rect.h), rounding);

	push	ecx
	movss	xmm0, DWORD PTR _rounding$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	addss	xmm0, DWORD PTR _rect$[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rect$[ebp]
	addss	xmm0, DWORD PTR _rect$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rect$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_rect_to
	add	esp, 24					; 00000018H

; 8743 :     } else {

	jmp	SHORT $LN1@nk_draw_li
$LN2@nk_draw_li:

; 8744 :         nk_draw_list_path_rect_to(list, nk_vec2(rect.x-0.5f, rect.y-0.5f),
; 8745 :             nk_vec2(rect.x + rect.w, rect.y + rect.h), rounding);

	push	ecx
	movss	xmm0, DWORD PTR _rounding$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	addss	xmm0, DWORD PTR _rect$[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rect$[ebp]
	addss	xmm0, DWORD PTR _rect$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	subss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rect$[ebp]
	subss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_rect_to
	add	esp, 24					; 00000018H
$LN1@nk_draw_li:

; 8746 :     } nk_draw_list_path_stroke(list,  col, NK_STROKE_CLOSED, thickness);

	push	ecx
	movss	xmm0, DWORD PTR _thickness$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_path_stroke
	add	esp, 16					; 00000010H
$LN5@nk_draw_li:

; 8747 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_stroke_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_stroke_line
_TEXT	SEGMENT
$T1 = -252						; size = 8
$T2 = -236						; size = 8
$T3 = -220						; size = 8
$T4 = -204						; size = 8
_list$ = 8						; size = 4
_a$ = 12						; size = 8
_b$ = 20						; size = 8
_col$ = 28						; size = 4
_thickness$ = 32					; size = 4
_nk_draw_list_stroke_line PROC				; COMDAT

; 8705 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8706 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN7@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_stroke_line@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_draw_li:

; 8707 :     if (!list || !col.a) return;

	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN3@nk_draw_li
	movzx	eax, BYTE PTR _col$[ebp+3]
	test	eax, eax
	jne	SHORT $LN4@nk_draw_li
$LN3@nk_draw_li:
	jmp	$LN5@nk_draw_li
$LN4@nk_draw_li:

; 8708 :     if (list->line_AA == NK_ANTI_ALIASING_ON) {

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+196], 1
	jne	SHORT $LN2@nk_draw_li

; 8709 :         nk_draw_list_path_line_to(list, a);

	mov	eax, DWORD PTR _a$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 8710 :         nk_draw_list_path_line_to(list, b);

	mov	eax, DWORD PTR _b$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 8711 :     } else {

	jmp	$LN1@nk_draw_li
$LN2@nk_draw_li:

; 8712 :         nk_draw_list_path_line_to(list, nk_vec2_sub(a,nk_vec2(0.5f,0.5f)));

	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR $T2[ebp+4], edx
	movss	xmm0, DWORD PTR _a$[ebp+4]
	subss	xmm0, DWORD PTR $T1[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _a$[ebp]
	subss	xmm0, DWORD PTR $T2[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 8713 :         nk_draw_list_path_line_to(list, nk_vec2_sub(b,nk_vec2(0.5f,0.5f)));

	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR $T3[ebp+4], edx
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR $T4[ebp+4], edx
	movss	xmm0, DWORD PTR _b$[ebp+4]
	subss	xmm0, DWORD PTR $T3[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	subss	xmm0, DWORD PTR $T4[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH
$LN1@nk_draw_li:

; 8714 :     }
; 8715 :     nk_draw_list_path_stroke(list,  col, NK_STROKE_OPEN, thickness);

	push	ecx
	movss	xmm0, DWORD PTR _thickness$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_path_stroke
	add	esp, 16					; 00000010H
$LN5@nk_draw_li:

; 8716 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_stroke_line ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_path_stroke
_TEXT	SEGMENT
_points$ = -8						; size = 4
_list$ = 8						; size = 4
_color$ = 12						; size = 4
_closed$ = 16						; size = 4
_thickness$ = 20					; size = 4
_nk_draw_list_path_stroke PROC				; COMDAT

; 8692 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8693 :     struct nk_vec2 *points;
; 8694 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN4@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_path_stroke@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_draw_li:

; 8695 :     if (!list) return;

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN1@nk_draw_li
	jmp	SHORT $LN2@nk_draw_li
$LN1@nk_draw_li:

; 8696 :     points = (struct nk_vec2*)nk_buffer_memory(list->buffer);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	call	_nk_buffer_memory
	add	esp, 4
	mov	DWORD PTR _points$[ebp], eax

; 8697 :     nk_draw_list_stroke_poly_line(list, points, list->path_count, color,
; 8698 :         closed, thickness, list->config.line_AA);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _thickness$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _closed$[ebp]
	push	edx
	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx+188]
	push	edx
	mov	eax, DWORD PTR _points$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_nk_draw_list_stroke_poly_line
	add	esp, 28					; 0000001cH

; 8699 :     nk_draw_list_path_clear(list);

	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_clear
	add	esp, 4
$LN2@nk_draw_li:

; 8700 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_path_stroke ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_path_fill
_TEXT	SEGMENT
_points$ = -8						; size = 4
_list$ = 8						; size = 4
_color$ = 12						; size = 4
_nk_draw_list_path_fill PROC				; COMDAT

; 8680 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8681 :     struct nk_vec2 *points;
; 8682 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN4@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_path_fill@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_draw_li:

; 8683 :     if (!list) return;

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN1@nk_draw_li
	jmp	SHORT $LN2@nk_draw_li
$LN1@nk_draw_li:

; 8684 :     points = (struct nk_vec2*)nk_buffer_memory(list->buffer);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	call	_nk_buffer_memory
	add	esp, 4
	mov	DWORD PTR _points$[ebp], eax

; 8685 :     nk_draw_list_fill_poly_convex(list, points, list->path_count, color, list->config.shape_AA);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	push	ecx
	mov	edx, DWORD PTR _points$[ebp]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_fill_poly_convex
	add	esp, 20					; 00000014H

; 8686 :     nk_draw_list_path_clear(list);

	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_clear
	add	esp, 4
$LN2@nk_draw_li:

; 8687 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_path_fill ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_path_curve_to
_TEXT	SEGMENT
tv214 = -340						; size = 8
tv202 = -340						; size = 8
tv210 = -332						; size = 4
tv198 = -332						; size = 4
tv81 = -332						; size = 4
_y$1 = -132						; size = 4
_x$2 = -120						; size = 4
_w4$3 = -108						; size = 4
_w3$4 = -96						; size = 4
_w2$5 = -84						; size = 4
_w1$6 = -72						; size = 4
_u$7 = -60						; size = 4
_t$8 = -48						; size = 4
_p1$ = -36						; size = 8
_i_step$ = -20						; size = 4
_t_step$ = -8						; size = 4
_list$ = 8						; size = 4
_p2$ = 12						; size = 8
_p3$ = 20						; size = 8
_p4$ = 28						; size = 8
_num_segments$ = 36					; size = 4
_nk_draw_list_path_curve_to PROC			; COMDAT

; 8653 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8654 :     float t_step;
; 8655 :     unsigned int i_step;
; 8656 :     struct nk_vec2 p1;
; 8657 : 
; 8658 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN8@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_path_curve_to@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_draw_li:

; 8659 :     NK_ASSERT(list->path_count);

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+188], 0
	jne	SHORT $LN9@nk_draw_li
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_draw_list_path_curve_to@@9@9
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CC@DJNGHHKD@?$AAl?$AAi?$AAs?$AAt?$AA?9?$AA?$DO?$AAp?$AAa?$AAt?$AAh?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_draw_li:

; 8660 :     if (!list || !list->path_count) return;

	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN4@nk_draw_li
	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+188], 0
	jne	SHORT $LN5@nk_draw_li
$LN4@nk_draw_li:
	jmp	$LN1@nk_draw_li
$LN5@nk_draw_li:

; 8661 :     num_segments = NK_MAX(num_segments, 1);

	cmp	DWORD PTR _num_segments$[ebp], 1
	jae	SHORT $LN10@nk_draw_li
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN11@nk_draw_li
$LN10@nk_draw_li:
	mov	eax, DWORD PTR _num_segments$[ebp]
	mov	DWORD PTR tv81[ebp], eax
$LN11@nk_draw_li:
	mov	ecx, DWORD PTR tv81[ebp]
	mov	DWORD PTR _num_segments$[ebp], ecx

; 8662 : 
; 8663 :     p1 = nk_draw_list_path_last(list);

	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_last
	add	esp, 4
	mov	DWORD PTR _p1$[ebp], eax
	mov	DWORD PTR _p1$[ebp+4], edx

; 8664 :     t_step = 1.0f/(float)num_segments;

	mov	eax, DWORD PTR _num_segments$[ebp]
	mov	DWORD PTR tv198[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv198[ebp]
	mov	ecx, DWORD PTR tv198[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv202[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv202[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movss	DWORD PTR _t_step$[ebp], xmm1

; 8665 :     for (i_step = 1; i_step <= num_segments; ++i_step) {

	mov	DWORD PTR _i_step$[ebp], 1
	jmp	SHORT $LN3@nk_draw_li
$LN2@nk_draw_li:
	mov	eax, DWORD PTR _i_step$[ebp]
	add	eax, 1
	mov	DWORD PTR _i_step$[ebp], eax
$LN3@nk_draw_li:
	mov	eax, DWORD PTR _i_step$[ebp]
	cmp	eax, DWORD PTR _num_segments$[ebp]
	ja	$LN1@nk_draw_li

; 8666 :         float t = t_step * (float)i_step;

	mov	eax, DWORD PTR _i_step$[ebp]
	mov	DWORD PTR tv210[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv210[ebp]
	mov	ecx, DWORD PTR tv210[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv214[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv214[ebp]
	mulss	xmm0, DWORD PTR _t_step$[ebp]
	movss	DWORD PTR _t$8[ebp], xmm0

; 8667 :         float u = 1.0f - t;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _t$8[ebp]
	movss	DWORD PTR _u$7[ebp], xmm0

; 8668 :         float w1 = u*u*u;

	movss	xmm0, DWORD PTR _u$7[ebp]
	mulss	xmm0, DWORD PTR _u$7[ebp]
	mulss	xmm0, DWORD PTR _u$7[ebp]
	movss	DWORD PTR _w1$6[ebp], xmm0

; 8669 :         float w2 = 3*u*u*t;

	movss	xmm0, DWORD PTR __real@40400000
	mulss	xmm0, DWORD PTR _u$7[ebp]
	mulss	xmm0, DWORD PTR _u$7[ebp]
	mulss	xmm0, DWORD PTR _t$8[ebp]
	movss	DWORD PTR _w2$5[ebp], xmm0

; 8670 :         float w3 = 3*u*t*t;

	movss	xmm0, DWORD PTR __real@40400000
	mulss	xmm0, DWORD PTR _u$7[ebp]
	mulss	xmm0, DWORD PTR _t$8[ebp]
	mulss	xmm0, DWORD PTR _t$8[ebp]
	movss	DWORD PTR _w3$4[ebp], xmm0

; 8671 :         float w4 = t * t *t;

	movss	xmm0, DWORD PTR _t$8[ebp]
	mulss	xmm0, DWORD PTR _t$8[ebp]
	mulss	xmm0, DWORD PTR _t$8[ebp]
	movss	DWORD PTR _w4$3[ebp], xmm0

; 8672 :         float x = w1 * p1.x + w2 * p2.x + w3 * p3.x + w4 * p4.x;

	movss	xmm0, DWORD PTR _w1$6[ebp]
	mulss	xmm0, DWORD PTR _p1$[ebp]
	movss	xmm1, DWORD PTR _w2$5[ebp]
	mulss	xmm1, DWORD PTR _p2$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _w3$4[ebp]
	mulss	xmm1, DWORD PTR _p3$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _w4$3[ebp]
	mulss	xmm1, DWORD PTR _p4$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _x$2[ebp], xmm0

; 8673 :         float y = w1 * p1.y + w2 * p2.y + w3 * p3.y + w4 * p4.y;

	movss	xmm0, DWORD PTR _w1$6[ebp]
	mulss	xmm0, DWORD PTR _p1$[ebp+4]
	movss	xmm1, DWORD PTR _w2$5[ebp]
	mulss	xmm1, DWORD PTR _p2$[ebp+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _w3$4[ebp]
	mulss	xmm1, DWORD PTR _p3$[ebp+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _w4$3[ebp]
	mulss	xmm1, DWORD PTR _p4$[ebp+4]
	addss	xmm0, xmm1
	movss	DWORD PTR _y$1[ebp], xmm0

; 8674 :         nk_draw_list_path_line_to(list, nk_vec2(x,y));

	push	ecx
	movss	xmm0, DWORD PTR _y$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$2[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 8675 :     }

	jmp	$LN2@nk_draw_li
$LN1@nk_draw_li:

; 8676 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_draw_li
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@nk_draw_li:
	DD	1
	DD	$LN13@nk_draw_li
$LN13@nk_draw_li:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN12@nk_draw_li
$LN12@nk_draw_li:
	DB	112					; 00000070H
	DB	49					; 00000031H
	DB	0
_nk_draw_list_path_curve_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_path_rect_to
_TEXT	SEGMENT
tv141 = -216						; size = 4
tv89 = -216						; size = 4
tv142 = -212						; size = 4
tv90 = -212						; size = 4
tv131 = -208						; size = 4
tv79 = -208						; size = 4
_r$ = -8						; size = 4
_list$ = 8						; size = 4
_a$ = 12						; size = 8
_b$ = 20						; size = 8
_rounding$ = 28						; size = 4
_nk_draw_list_path_rect_to PROC				; COMDAT

; 8629 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8630 :     float r;
; 8631 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN6@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_path_rect_to@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_draw_li:

; 8632 :     if (!list) return;

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN3@nk_draw_li
	jmp	$LN1@nk_draw_li
$LN3@nk_draw_li:

; 8633 :     r = rounding;

	movss	xmm0, DWORD PTR _rounding$[ebp]
	movss	DWORD PTR _r$[ebp], xmm0

; 8634 :     r = NK_MIN(r, ((b.x-a.x) < 0) ? -(b.x-a.x): (b.x-a.x));

	movss	xmm0, DWORD PTR _b$[ebp]
	subss	xmm0, DWORD PTR _a$[ebp]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN7@nk_draw_li
	movss	xmm0, DWORD PTR _b$[ebp]
	subss	xmm0, DWORD PTR _a$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv79[ebp], xmm0
	jmp	SHORT $LN8@nk_draw_li
$LN7@nk_draw_li:
	movss	xmm0, DWORD PTR _b$[ebp]
	subss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv79[ebp], xmm0
$LN8@nk_draw_li:
	movss	xmm0, DWORD PTR tv79[ebp]
	comiss	xmm0, DWORD PTR _r$[ebp]
	jbe	SHORT $LN11@nk_draw_li
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR tv90[ebp], xmm0
	jmp	SHORT $LN12@nk_draw_li
$LN11@nk_draw_li:
	movss	xmm0, DWORD PTR _b$[ebp]
	subss	xmm0, DWORD PTR _a$[ebp]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN9@nk_draw_li
	movss	xmm0, DWORD PTR _b$[ebp]
	subss	xmm0, DWORD PTR _a$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv89[ebp], xmm0
	jmp	SHORT $LN10@nk_draw_li
$LN9@nk_draw_li:
	movss	xmm0, DWORD PTR _b$[ebp]
	subss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv89[ebp], xmm0
$LN10@nk_draw_li:
	movss	xmm0, DWORD PTR tv89[ebp]
	movss	DWORD PTR tv90[ebp], xmm0
$LN12@nk_draw_li:
	movss	xmm0, DWORD PTR tv90[ebp]
	movss	DWORD PTR _r$[ebp], xmm0

; 8635 :     r = NK_MIN(r, ((b.y-a.y) < 0) ? -(b.y-a.y): (b.y-a.y));

	movss	xmm0, DWORD PTR _b$[ebp+4]
	subss	xmm0, DWORD PTR _a$[ebp+4]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN13@nk_draw_li
	movss	xmm0, DWORD PTR _b$[ebp+4]
	subss	xmm0, DWORD PTR _a$[ebp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv131[ebp], xmm0
	jmp	SHORT $LN14@nk_draw_li
$LN13@nk_draw_li:
	movss	xmm0, DWORD PTR _b$[ebp+4]
	subss	xmm0, DWORD PTR _a$[ebp+4]
	movss	DWORD PTR tv131[ebp], xmm0
$LN14@nk_draw_li:
	movss	xmm0, DWORD PTR tv131[ebp]
	comiss	xmm0, DWORD PTR _r$[ebp]
	jbe	SHORT $LN17@nk_draw_li
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR tv142[ebp], xmm0
	jmp	SHORT $LN18@nk_draw_li
$LN17@nk_draw_li:
	movss	xmm0, DWORD PTR _b$[ebp+4]
	subss	xmm0, DWORD PTR _a$[ebp+4]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN15@nk_draw_li
	movss	xmm0, DWORD PTR _b$[ebp+4]
	subss	xmm0, DWORD PTR _a$[ebp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv141[ebp], xmm0
	jmp	SHORT $LN16@nk_draw_li
$LN15@nk_draw_li:
	movss	xmm0, DWORD PTR _b$[ebp+4]
	subss	xmm0, DWORD PTR _a$[ebp+4]
	movss	DWORD PTR tv141[ebp], xmm0
$LN16@nk_draw_li:
	movss	xmm0, DWORD PTR tv141[ebp]
	movss	DWORD PTR tv142[ebp], xmm0
$LN18@nk_draw_li:
	movss	xmm0, DWORD PTR tv142[ebp]
	movss	DWORD PTR _r$[ebp], xmm0

; 8636 : 
; 8637 :     if (r == 0.0f) {

	movss	xmm0, DWORD PTR _r$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN2@nk_draw_li

; 8638 :         nk_draw_list_path_line_to(list, a);

	mov	eax, DWORD PTR _a$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 8639 :         nk_draw_list_path_line_to(list, nk_vec2(b.x,a.y));

	push	ecx
	movss	xmm0, DWORD PTR _a$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 8640 :         nk_draw_list_path_line_to(list, b);

	mov	eax, DWORD PTR _b$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 8641 :         nk_draw_list_path_line_to(list, nk_vec2(a.x,b.y));

	push	ecx
	movss	xmm0, DWORD PTR _b$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 8642 :     } else {

	jmp	$LN1@nk_draw_li
$LN2@nk_draw_li:

; 8643 :         nk_draw_list_path_arc_to_fast(list, nk_vec2(a.x + r, a.y + r), r, 6, 9);

	push	9
	push	6
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _a$[ebp+4]
	addss	xmm0, DWORD PTR _r$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _a$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_arc_to_fast
	add	esp, 24					; 00000018H

; 8644 :         nk_draw_list_path_arc_to_fast(list, nk_vec2(b.x - r, a.y + r), r, 9, 12);

	push	12					; 0000000cH
	push	9
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _a$[ebp+4]
	addss	xmm0, DWORD PTR _r$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	subss	xmm0, DWORD PTR _r$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_arc_to_fast
	add	esp, 24					; 00000018H

; 8645 :         nk_draw_list_path_arc_to_fast(list, nk_vec2(b.x - r, b.y - r), r, 0, 3);

	push	3
	push	0
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _b$[ebp+4]
	subss	xmm0, DWORD PTR _r$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	subss	xmm0, DWORD PTR _r$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_arc_to_fast
	add	esp, 24					; 00000018H

; 8646 :         nk_draw_list_path_arc_to_fast(list, nk_vec2(a.x + r, b.y - r), r, 3, 6);

	push	6
	push	3
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _b$[ebp+4]
	subss	xmm0, DWORD PTR _r$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _a$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_arc_to_fast
	add	esp, 24					; 00000018H
$LN1@nk_draw_li:

; 8647 :     }
; 8648 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_path_rect_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_path_arc_to
_TEXT	SEGMENT
tv140 = -324						; size = 8
tv195 = -316						; size = 4
tv157 = -316						; size = 4
tv136 = -316						; size = 4
_new_cy$1 = -116					; size = 4
_new_cx$2 = -104					; size = 4
_y$3 = -92						; size = 4
_x$4 = -80						; size = 4
_cy$ = -68						; size = 4
_cx$ = -56						; size = 4
_cos_d$ = -44						; size = 4
_sin_d$ = -32						; size = 4
_d_angle$ = -20						; size = 4
_i$ = -8						; size = 4
_list$ = 8						; size = 4
_center$ = 12						; size = 8
_radius$ = 20						; size = 4
_a_min$ = 24						; size = 4
_a_max$ = 28						; size = 4
_segments$ = 32						; size = 4
_nk_draw_list_path_arc_to PROC				; COMDAT

; 8583 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8584 :     unsigned int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 8585 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN6@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_path_arc_to@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_draw_li:

; 8586 :    // if (!list) return 0;
; 8587 : 	//if (radius == 0.0f) return 0;
; 8588 : 
; 8589 :     /*  This algorithm for arc drawing relies on these two trigonometric identities[1]:
; 8590 :             sin(a + b) = sin(a) * cos(b) + cos(a) * sin(b)
; 8591 :             cos(a + b) = cos(a) * cos(b) - sin(a) * sin(b)
; 8592 : 
; 8593 :         Two coordinates (x, y) of a point on a circle centered on
; 8594 :         the origin can be written in polar form as:
; 8595 :             x = r * cos(a)
; 8596 :             y = r * sin(a)
; 8597 :         where r is the radius of the circle,
; 8598 :             a is the angle between (x, y) and the origin.
; 8599 : 
; 8600 :         This allows us to rotate the coordinates around the
; 8601 :         origin by an angle b using the following transformation:
; 8602 :             x' = r * cos(a + b) = x * cos(b) - y * sin(b)
; 8603 :             y' = r * sin(a + b) = y * cos(b) + x * sin(b)
; 8604 : 
; 8605 :         [1] https://en.wikipedia.org/wiki/List_of_trigonometric_identities#Angle_sum_and_difference_identities
; 8606 :     */
; 8607 : 
; 8608 :     const float d_angle = (a_max - a_min) / (float)segments;

	movss	xmm0, DWORD PTR _a_max$[ebp]
	subss	xmm0, DWORD PTR _a_min$[ebp]
	mov	eax, DWORD PTR _segments$[ebp]
	mov	DWORD PTR tv136[ebp], eax
	cvtsi2sd xmm1, DWORD PTR tv136[ebp]
	mov	ecx, DWORD PTR tv136[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv140[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv140[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _d_angle$[ebp], xmm0

; 8609 :     const float sin_d = (float)NK_SIN(d_angle);

	push	ecx
	movss	xmm0, DWORD PTR _d_angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_sin
	add	esp, 4
	fstp	DWORD PTR _sin_d$[ebp]

; 8610 :     const float cos_d = (float)NK_COS(d_angle);

	push	ecx
	movss	xmm0, DWORD PTR _d_angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_cos
	add	esp, 4
	fstp	DWORD PTR _cos_d$[ebp]

; 8611 : 
; 8612 :     float cx = (float)NK_COS(a_min) * radius;

	push	ecx
	movss	xmm0, DWORD PTR _a_min$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_cos
	add	esp, 4
	fstp	DWORD PTR tv157[ebp]
	movss	xmm0, DWORD PTR tv157[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _cx$[ebp], xmm0

; 8613 :     float cy = (float)NK_SIN(a_min) * radius;

	push	ecx
	movss	xmm0, DWORD PTR _a_min$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_sin
	add	esp, 4
	fstp	DWORD PTR tv195[ebp]
	movss	xmm0, DWORD PTR tv195[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _cy$[ebp], xmm0

; 8614 :     for(i = 0; i <= segments; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_draw_li
$LN2@nk_draw_li:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_draw_li:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _segments$[ebp]
	ja	$LN1@nk_draw_li

; 8615 :         const float x = center.x + cx;

	movss	xmm0, DWORD PTR _center$[ebp]
	addss	xmm0, DWORD PTR _cx$[ebp]
	movss	DWORD PTR _x$4[ebp], xmm0

; 8616 :         const float y = center.y + cy;

	movss	xmm0, DWORD PTR _center$[ebp+4]
	addss	xmm0, DWORD PTR _cy$[ebp]
	movss	DWORD PTR _y$3[ebp], xmm0

; 8617 :         nk_draw_list_path_line_to(list, nk_vec2(x, y));

	push	ecx
	movss	xmm0, DWORD PTR _y$3[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$4[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 8618 : 
; 8619 :         const float new_cx = cx * cos_d - cy * sin_d;

	movss	xmm0, DWORD PTR _cx$[ebp]
	mulss	xmm0, DWORD PTR _cos_d$[ebp]
	movss	xmm1, DWORD PTR _cy$[ebp]
	mulss	xmm1, DWORD PTR _sin_d$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _new_cx$2[ebp], xmm0

; 8620 :         const float new_cy = cy * cos_d + cx * sin_d;

	movss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _cos_d$[ebp]
	movss	xmm1, DWORD PTR _cx$[ebp]
	mulss	xmm1, DWORD PTR _sin_d$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _new_cy$1[ebp], xmm0

; 8621 :         cx = new_cx;

	movss	xmm0, DWORD PTR _new_cx$2[ebp]
	movss	DWORD PTR _cx$[ebp], xmm0

; 8622 :         cy = new_cy;

	movss	xmm0, DWORD PTR _new_cy$1[ebp]
	movss	DWORD PTR _cy$[ebp], xmm0

; 8623 :     }

	jmp	$LN2@nk_draw_li
$LN1@nk_draw_li:

; 8624 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_path_arc_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_path_arc_to_fast
_TEXT	SEGMENT
_y$1 = -48						; size = 4
_x$2 = -36						; size = 4
_c$3 = -24						; size = 8
_a$ = -8						; size = 4
_list$ = 8						; size = 4
_center$ = 12						; size = 8
_radius$ = 20						; size = 4
_a_min$ = 24						; size = 4
_a_max$ = 28						; size = 4
_nk_draw_list_path_arc_to_fast PROC			; COMDAT

; 8566 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8567 :     int a = 0;

	mov	DWORD PTR _a$[ebp], 0

; 8568 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN8@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_path_arc_to_fast@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_draw_li:

; 8569 :     if (!list) return;

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN5@nk_draw_li
	jmp	$LN1@nk_draw_li
$LN5@nk_draw_li:

; 8570 :     if (a_min <= a_max) {

	mov	eax, DWORD PTR _a_min$[ebp]
	cmp	eax, DWORD PTR _a_max$[ebp]
	jg	$LN1@nk_draw_li

; 8571 :         for (a = a_min; a <= a_max; a++) {

	mov	eax, DWORD PTR _a_min$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	jmp	SHORT $LN3@nk_draw_li
$LN2@nk_draw_li:
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 1
	mov	DWORD PTR _a$[ebp], eax
$LN3@nk_draw_li:
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _a_max$[ebp]
	jg	SHORT $LN1@nk_draw_li

; 8572 :             const struct nk_vec2 c = list->circle_vtx[(nk_size)a % NK_LEN(list->circle_vtx)];

	mov	eax, DWORD PTR _a$[ebp]
	xor	edx, edx
	mov	ecx, 12					; 0000000cH
	div	ecx
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+16]
	mov	edx, DWORD PTR [eax+edx*8+20]
	mov	DWORD PTR _c$3[ebp], ecx
	mov	DWORD PTR _c$3[ebp+4], edx

; 8573 :             const float x = center.x + c.x * radius;

	movss	xmm0, DWORD PTR _c$3[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	addss	xmm0, DWORD PTR _center$[ebp]
	movss	DWORD PTR _x$2[ebp], xmm0

; 8574 :             const float y = center.y + c.y * radius;

	movss	xmm0, DWORD PTR _c$3[ebp+4]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	addss	xmm0, DWORD PTR _center$[ebp+4]
	movss	DWORD PTR _y$1[ebp], xmm0

; 8575 :             nk_draw_list_path_line_to(list, nk_vec2(x, y));

	push	ecx
	movss	xmm0, DWORD PTR _y$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$2[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 8576 :         }

	jmp	$LN2@nk_draw_li
$LN1@nk_draw_li:

; 8577 :     }
; 8578 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@nk_draw_li
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN11@nk_draw_li:
	DD	1
	DD	$LN10@nk_draw_li
$LN10@nk_draw_li:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN9@nk_draw_li
$LN9@nk_draw_li:
	DB	99					; 00000063H
	DB	0
_nk_draw_list_path_arc_to_fast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_path_line_to
_TEXT	SEGMENT
_cmd$ = -20						; size = 4
_points$ = -8						; size = 4
_list$ = 8						; size = 4
_pos$ = 12						; size = 8
_nk_draw_list_path_line_to PROC				; COMDAT

; 8546 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8547 :     struct nk_vec2 *points = 0;

	mov	DWORD PTR _points$[ebp], 0

; 8548 :     struct nk_draw_command *cmd = 0;

	mov	DWORD PTR _cmd$[ebp], 0

; 8549 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN7@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_path_line_to@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_draw_li:

; 8550 :     if (!list) return;

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN4@nk_draw_li
	jmp	$LN5@nk_draw_li
$LN4@nk_draw_li:

; 8551 :     if (!list->cmd_count)

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+180], 0
	jne	SHORT $LN3@nk_draw_li

; 8552 :         nk_draw_list_add_clip(list, nk_null_rect);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _nk_null_rect
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _nk_null_rect+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _nk_null_rect+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _nk_null_rect+12
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_add_clip
	add	esp, 20					; 00000014H
$LN3@nk_draw_li:

; 8553 : 
; 8554 :     cmd = nk_draw_list_command_last(list);

	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_command_last
	add	esp, 4
	mov	DWORD PTR _cmd$[ebp], eax

; 8555 :     if (cmd && cmd->texture.ptr != list->config.null.texture.ptr)

	cmp	DWORD PTR _cmd$[ebp], 0
	je	SHORT $LN2@nk_draw_li
	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+136]
	je	SHORT $LN2@nk_draw_li

; 8556 :         nk_draw_list_push_image(list, list->config.null.texture);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_nk_draw_list_push_image
	add	esp, 8
$LN2@nk_draw_li:

; 8557 : 
; 8558 :     points = nk_draw_list_alloc_path(list, 1);

	push	1
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_draw_list_alloc_path
	add	esp, 8
	mov	DWORD PTR _points$[ebp], eax

; 8559 :     if (!points) return;

	cmp	DWORD PTR _points$[ebp], 0
	jne	SHORT $LN1@nk_draw_li
	jmp	SHORT $LN5@nk_draw_li
$LN1@nk_draw_li:

; 8560 :     points[0] = pos;

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _points$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	eax, DWORD PTR _pos$[ebp+4]
	mov	DWORD PTR [edx+ecx+4], eax
$LN5@nk_draw_li:

; 8561 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_path_line_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_path_clear
_TEXT	SEGMENT
_list$ = 8						; size = 4
_nk_draw_list_path_clear PROC				; COMDAT

; 8536 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8537 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN4@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_path_clear@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_draw_li:

; 8538 :     if (!list) return;

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN1@nk_draw_li
	jmp	SHORT $LN2@nk_draw_li
$LN1@nk_draw_li:

; 8539 :     nk_buffer_reset(list->buffer, NK_BUFFER_FRONT);

	push	0
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	call	_nk_buffer_reset
	add	esp, 8

; 8540 :     list->path_count = 0;

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+188], 0

; 8541 :     list->path_offset = 0;

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+192], 0
$LN2@nk_draw_li:

; 8542 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_path_clear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk__draw_list_end
_TEXT	SEGMENT
_end$ = -44						; size = 4
_memory$ = -32						; size = 4
_offset$ = -20						; size = 4
_size$ = -8						; size = 4
_canvas$ = 8						; size = 4
_buffer$ = 12						; size = 4
_nk__draw_list_end PROC					; COMDAT

; 7808 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7809 :     nk_size size;
; 7810 :     nk_size offset;
; 7811 :     nk_byte *memory;
; 7812 :     const struct nk_draw_command *end;
; 7813 : 
; 7814 :     NK_ASSERT(buffer);

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN5@nk__draw_l
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk__draw_list_end@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@KMGMBAKN@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk__draw_l:

; 7815 :     NK_ASSERT(canvas);

	cmp	DWORD PTR _canvas$[ebp], 0
	jne	SHORT $LN6@nk__draw_l
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk__draw_list_end@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@HCDMHDPE@?$AAc?$AAa?$AAn?$AAv?$AAa?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk__draw_l:

; 7816 :     if (!buffer || !canvas)

	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN1@nk__draw_l
	cmp	DWORD PTR _canvas$[ebp], 0
	jne	SHORT $LN2@nk__draw_l
$LN1@nk__draw_l:

; 7817 :         return 0;

	xor	eax, eax
	jmp	SHORT $LN3@nk__draw_l
$LN2@nk__draw_l:

; 7818 : 
; 7819 :     memory = (nk_byte*)buffer->memory.ptr;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _memory$[ebp], ecx

; 7820 :     size = buffer->memory.size;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _size$[ebp], ecx

; 7821 :     offset = size - canvas->cmd_offset;

	mov	eax, DWORD PTR _canvas$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR [eax+184]
	mov	DWORD PTR _offset$[ebp], ecx

; 7822 :     end = nk_ptr_add(const struct nk_draw_command, memory, offset);

	mov	eax, DWORD PTR _memory$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _end$[ebp], eax

; 7823 :     end -= (canvas->cmd_count-1);

	mov	eax, DWORD PTR _canvas$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	sub	ecx, 1
	imul	edx, ecx, 24
	mov	eax, DWORD PTR _end$[ebp]
	sub	eax, edx
	mov	DWORD PTR _end$[ebp], eax

; 7824 :     return end;

	mov	eax, DWORD PTR _end$[ebp]
$LN3@nk__draw_l:

; 7825 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk__draw_list_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk__draw_list_next
_TEXT	SEGMENT
_end$ = -8						; size = 4
_cmd$ = 8						; size = 4
_buffer$ = 12						; size = 4
_canvas$ = 16						; size = 4
_nk__draw_list_next PROC				; COMDAT

; 7830 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7831 :     const struct nk_draw_command *end;
; 7832 :     NK_ASSERT(buffer);

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN6@nk__draw_l
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk__draw_list_next@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@KMGMBAKN@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk__draw_l:

; 7833 :     NK_ASSERT(canvas);

	cmp	DWORD PTR _canvas$[ebp], 0
	jne	SHORT $LN7@nk__draw_l
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk__draw_list_next@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@HCDMHDPE@?$AAc?$AAa?$AAn?$AAv?$AAa?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk__draw_l:

; 7834 :     if (!cmd || !buffer || !canvas)

	cmp	DWORD PTR _cmd$[ebp], 0
	je	SHORT $LN2@nk__draw_l
	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN2@nk__draw_l
	cmp	DWORD PTR _canvas$[ebp], 0
	jne	SHORT $LN3@nk__draw_l
$LN2@nk__draw_l:

; 7835 :         return 0;

	xor	eax, eax
	jmp	SHORT $LN4@nk__draw_l
$LN3@nk__draw_l:

; 7836 : 
; 7837 :     end = nk__draw_list_end(canvas, buffer);

	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _canvas$[ebp]
	push	ecx
	call	_nk__draw_list_end
	add	esp, 8
	mov	DWORD PTR _end$[ebp], eax

; 7838 :     if (cmd <= end) return 0;

	mov	eax, DWORD PTR _cmd$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	ja	SHORT $LN1@nk__draw_l
	xor	eax, eax
	jmp	SHORT $LN4@nk__draw_l
$LN1@nk__draw_l:

; 7839 :     return (cmd-1);

	mov	eax, DWORD PTR _cmd$[ebp]
	sub	eax, 24					; 00000018H
$LN4@nk__draw_l:

; 7840 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk__draw_list_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk__draw_list_begin
_TEXT	SEGMENT
_cmd$ = -32						; size = 4
_offset$ = -20						; size = 4
_memory$ = -8						; size = 4
_canvas$ = 8						; size = 4
_buffer$ = 12						; size = 4
_nk__draw_list_begin PROC				; COMDAT

; 7791 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7792 :     nk_byte *memory;
; 7793 :     nk_size offset;
; 7794 :     const struct nk_draw_command *cmd;
; 7795 : 
; 7796 :     NK_ASSERT(buffer);

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN5@nk__draw_l
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk__draw_list_begin@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@KMGMBAKN@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk__draw_l:

; 7797 :     if (!buffer || !buffer->size || !canvas->cmd_count)

	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN1@nk__draw_l
	mov	eax, DWORD PTR _buffer$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN1@nk__draw_l
	mov	eax, DWORD PTR _canvas$[ebp]
	cmp	DWORD PTR [eax+180], 0
	jne	SHORT $LN2@nk__draw_l
$LN1@nk__draw_l:

; 7798 :         return 0;

	xor	eax, eax
	jmp	SHORT $LN3@nk__draw_l
$LN2@nk__draw_l:

; 7799 : 
; 7800 :     memory = (nk_byte*)buffer->memory.ptr;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _memory$[ebp], ecx

; 7801 :     offset = buffer->memory.size - canvas->cmd_offset;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR _canvas$[ebp]
	mov	edx, DWORD PTR [eax+36]
	sub	edx, DWORD PTR [ecx+184]
	mov	DWORD PTR _offset$[ebp], edx

; 7802 :     cmd = nk_ptr_add(const struct nk_draw_command, memory, offset);

	mov	eax, DWORD PTR _memory$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _cmd$[ebp], eax

; 7803 :     return cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
$LN3@nk__draw_l:

; 7804 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk__draw_list_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_clear
_TEXT	SEGMENT
_list$ = 8						; size = 4
_nk_draw_list_clear PROC				; COMDAT

; 7844 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7845 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN7@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_clear@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_draw_li:

; 7846 :     if (!list) return;

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN4@nk_draw_li
	jmp	$LN5@nk_draw_li
$LN4@nk_draw_li:

; 7847 :     if (list->buffer)

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+160], 0
	je	SHORT $LN3@nk_draw_li

; 7848 :         nk_buffer_clear(list->buffer);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	call	_nk_buffer_clear
	add	esp, 4
$LN3@nk_draw_li:

; 7849 :     if (list->vertices)

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+164], 0
	je	SHORT $LN2@nk_draw_li

; 7850 :         nk_buffer_clear(list->vertices);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	call	_nk_buffer_clear
	add	esp, 4
$LN2@nk_draw_li:

; 7851 :     if (list->elements)

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+168], 0
	je	SHORT $LN1@nk_draw_li

; 7852 :         nk_buffer_clear(list->elements);

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	push	ecx
	call	_nk_buffer_clear
	add	esp, 4
$LN1@nk_draw_li:

; 7853 : 
; 7854 :     list->element_count = 0;

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+172], 0

; 7855 :     list->vertex_count = 0;

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+176], 0

; 7856 :     list->cmd_offset = 0;

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+184], 0

; 7857 :     list->cmd_count = 0;

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+180], 0

; 7858 :     list->path_count = 0;

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+188], 0

; 7859 :     list->vertices = 0;

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+164], 0

; 7860 :     list->elements = 0;

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+168], 0

; 7861 :     list->clip_rect = nk_null_rect;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR _nk_null_rect
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _nk_null_rect+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _nk_null_rect+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _nk_null_rect+12
	mov	DWORD PTR [eax+12], edx
$LN5@nk_draw_li:

; 7862 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_clear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_setup
_TEXT	SEGMENT
_canvas$ = 8						; size = 4
_config$ = 12						; size = 4
_cmds$ = 16						; size = 4
_vertices$ = 20						; size = 4
_elements$ = 24						; size = 4
_line_aa$ = 28						; size = 4
_shape_aa$ = 32						; size = 4
_nk_draw_list_setup PROC				; COMDAT

; 7771 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7772 :     NK_ASSERT(canvas);

	cmp	DWORD PTR _canvas$[ebp], 0
	jne	SHORT $LN5@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_setup@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@HCDMHDPE@?$AAc?$AAa?$AAn?$AAv?$AAa?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_draw_li:

; 7773 :     NK_ASSERT(config);

	cmp	DWORD PTR _config$[ebp], 0
	jne	SHORT $LN6@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_setup@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@NEJONDGE@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_draw_li:

; 7774 :     NK_ASSERT(cmds);

	cmp	DWORD PTR _cmds$[ebp], 0
	jne	SHORT $LN7@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_setup@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19IHKENPKO@?$AAc?$AAm?$AAd?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_draw_li:

; 7775 :     NK_ASSERT(vertices);

	cmp	DWORD PTR _vertices$[ebp], 0
	jne	SHORT $LN8@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_setup@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BC@GCIAJMPE@?$AAv?$AAe?$AAr?$AAt?$AAi?$AAc?$AAe?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_draw_li:

; 7776 :     NK_ASSERT(elements);

	cmp	DWORD PTR _elements$[ebp], 0
	jne	SHORT $LN9@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_setup@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BC@KAKDHGPA@?$AAe?$AAl?$AAe?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_draw_li:

; 7777 :     if (!canvas || !config || !cmds || !vertices || !elements)

	cmp	DWORD PTR _canvas$[ebp], 0
	je	SHORT $LN1@nk_draw_li
	cmp	DWORD PTR _config$[ebp], 0
	je	SHORT $LN1@nk_draw_li
	cmp	DWORD PTR _cmds$[ebp], 0
	je	SHORT $LN1@nk_draw_li
	cmp	DWORD PTR _vertices$[ebp], 0
	je	SHORT $LN1@nk_draw_li
	cmp	DWORD PTR _elements$[ebp], 0
	jne	SHORT $LN2@nk_draw_li
$LN1@nk_draw_li:

; 7778 :         return;

	jmp	SHORT $LN3@nk_draw_li
$LN2@nk_draw_li:

; 7779 : 
; 7780 :     canvas->buffer = cmds;

	mov	eax, DWORD PTR _canvas$[ebp]
	mov	ecx, DWORD PTR _cmds$[ebp]
	mov	DWORD PTR [eax+160], ecx

; 7781 :     canvas->config = *config;

	mov	edi, DWORD PTR _canvas$[ebp]
	add	edi, 112				; 00000070H
	mov	ecx, 12					; 0000000cH
	mov	esi, DWORD PTR _config$[ebp]
	rep movsd

; 7782 :     canvas->elements = elements;

	mov	eax, DWORD PTR _canvas$[ebp]
	mov	ecx, DWORD PTR _elements$[ebp]
	mov	DWORD PTR [eax+168], ecx

; 7783 :     canvas->vertices = vertices;

	mov	eax, DWORD PTR _canvas$[ebp]
	mov	ecx, DWORD PTR _vertices$[ebp]
	mov	DWORD PTR [eax+164], ecx

; 7784 :     canvas->line_AA = line_aa;

	mov	eax, DWORD PTR _canvas$[ebp]
	mov	ecx, DWORD PTR _line_aa$[ebp]
	mov	DWORD PTR [eax+196], ecx

; 7785 :     canvas->shape_AA = shape_aa;

	mov	eax, DWORD PTR _canvas$[ebp]
	mov	ecx, DWORD PTR _shape_aa$[ebp]
	mov	DWORD PTR [eax+200], ecx

; 7786 :     canvas->clip_rect = nk_null_rect;

	mov	eax, DWORD PTR _canvas$[ebp]
	mov	ecx, DWORD PTR _nk_null_rect
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _nk_null_rect+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _nk_null_rect+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _nk_null_rect+12
	mov	DWORD PTR [eax+12], edx
$LN3@nk_draw_li:

; 7787 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_setup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_list_init
_TEXT	SEGMENT
tv132 = -228						; size = 8
tv128 = -220						; size = 4
_a$1 = -20						; size = 4
_i$ = -8						; size = 4
_list$ = 8						; size = 4
_nk_draw_list_init PROC					; COMDAT

; 7755 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7756 :     nk_size i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 7757 :     NK_ASSERT(list);

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN7@nk_draw_li
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_list_init@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HBOBIAED@?$AAl?$AAi?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_draw_li:

; 7758 :     if (!list) return;

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN4@nk_draw_li
	jmp	$LN1@nk_draw_li
$LN4@nk_draw_li:

; 7759 :     nk_zero(list, sizeof(*list));

	push	204					; 000000ccH
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 7760 :     for (i = 0; i < NK_LEN(list->circle_vtx); ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_draw_li
$LN2@nk_draw_li:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_draw_li:
	cmp	DWORD PTR _i$[ebp], 12			; 0000000cH
	jae	$LN1@nk_draw_li

; 7761 :         const float a = ((float)i / (float)NK_LEN(list->circle_vtx)) * 2 * NK_PI;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv128[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv128[ebp]
	mov	ecx, DWORD PTR tv128[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv132[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv132[ebp]
	divss	xmm0, DWORD PTR __real@41400000
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR __real@40490fdb
	movss	DWORD PTR _a$1[ebp], xmm0

; 7762 :         list->circle_vtx[i].x = (float)NK_COS(a);

	push	ecx
	movss	xmm0, DWORD PTR _a$1[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_cos
	add	esp, 4
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _list$[ebp]
	fstp	DWORD PTR [ecx+eax*8+16]

; 7763 :         list->circle_vtx[i].y = (float)NK_SIN(a);

	push	ecx
	movss	xmm0, DWORD PTR _a$1[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_sin
	add	esp, 4
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _list$[ebp]
	fstp	DWORD PTR [ecx+eax*8+20]

; 7764 :     }

	jmp	$LN2@nk_draw_li
$LN1@nk_draw_li:

; 7765 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_list_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_is_key_down
_TEXT	SEGMENT
_k$ = -8						; size = 4
_i$ = 8							; size = 4
_key$ = 12						; size = 4
_nk_input_is_key_down PROC				; COMDAT

; 12798: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12799:     const struct nk_key *k;
; 12800:     if (!i) return nk_false;

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN2@nk_input_i
	xor	eax, eax
	jmp	SHORT $LN3@nk_input_i
$LN2@nk_input_i:

; 12801:     k = &i->keyboard.keys[key];

	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _k$[ebp], edx

; 12802:     if (k->down) return nk_true;

	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@nk_input_i
	mov	eax, 1
	jmp	SHORT $LN3@nk_input_i
$LN1@nk_input_i:

; 12803:     return nk_false;

	xor	eax, eax
$LN3@nk_input_i:

; 12804: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_is_key_down ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_is_key_released
_TEXT	SEGMENT
_k$ = -8						; size = 4
_i$ = 8							; size = 4
_key$ = 12						; size = 4
_nk_input_is_key_released PROC				; COMDAT

; 12787: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12788:     const struct nk_key *k;
; 12789:     if (!i) return nk_false;

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN4@nk_input_i
	xor	eax, eax
	jmp	SHORT $LN5@nk_input_i
$LN4@nk_input_i:

; 12790:     k = &i->keyboard.keys[key];

	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _k$[ebp], edx

; 12791:     if ((!k->down && k->clicked) || (k->down && k->clicked >= 2))

	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@nk_input_i
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@nk_input_i
$LN1@nk_input_i:
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@nk_input_i
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [eax+4], 2
	jb	SHORT $LN3@nk_input_i
$LN2@nk_input_i:

; 12792:         return nk_true;

	mov	eax, 1
	jmp	SHORT $LN5@nk_input_i
$LN3@nk_input_i:

; 12793:     return nk_false;

	xor	eax, eax
$LN5@nk_input_i:

; 12794: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_is_key_released ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_is_key_pressed
_TEXT	SEGMENT
_k$ = -8						; size = 4
_i$ = 8							; size = 4
_key$ = 12						; size = 4
_nk_input_is_key_pressed PROC				; COMDAT

; 12776: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12777:     const struct nk_key *k;
; 12778:     if (!i) return nk_false;

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN4@nk_input_i
	xor	eax, eax
	jmp	SHORT $LN5@nk_input_i
$LN4@nk_input_i:

; 12779:     k = &i->keyboard.keys[key];

	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _k$[ebp], edx

; 12780:     if ((k->down && k->clicked) || (!k->down && k->clicked >= 2))

	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@nk_input_i
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@nk_input_i
$LN1@nk_input_i:
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@nk_input_i
	mov	eax, DWORD PTR _k$[ebp]
	cmp	DWORD PTR [eax+4], 2
	jb	SHORT $LN3@nk_input_i
$LN2@nk_input_i:

; 12781:         return nk_true;

	mov	eax, 1
	jmp	SHORT $LN5@nk_input_i
$LN3@nk_input_i:

; 12782:     return nk_false;

	xor	eax, eax
$LN5@nk_input_i:

; 12783: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_is_key_pressed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_is_mouse_released
_TEXT	SEGMENT
tv75 = -196						; size = 4
_i$ = 8							; size = 4
_id$ = 12						; size = 4
_nk_input_is_mouse_released PROC			; COMDAT

; 12769: {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12770:     if (!i) return nk_false;

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN1@nk_input_i
	xor	eax, eax
	jmp	SHORT $LN2@nk_input_i
$LN1@nk_input_i:

; 12771:     return (!i->mouse.buttons[id].down && i->mouse.buttons[id].clicked);

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [ecx+eax+260], 0
	jne	SHORT $LN4@nk_input_i
	mov	edx, DWORD PTR _id$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [eax+edx+264], 0
	je	SHORT $LN4@nk_input_i
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN5@nk_input_i
$LN4@nk_input_i:
	mov	DWORD PTR tv75[ebp], 0
$LN5@nk_input_i:
	mov	eax, DWORD PTR tv75[ebp]
$LN2@nk_input_i:

; 12772: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_is_mouse_released ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_is_mouse_pressed
_TEXT	SEGMENT
_b$ = -8						; size = 4
_i$ = 8							; size = 4
_id$ = 12						; size = 4
_nk_input_is_mouse_pressed PROC				; COMDAT

; 12758: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12759:     const struct nk_mouse_button *b;
; 12760:     if (!i) return nk_false;

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN2@nk_input_i
	xor	eax, eax
	jmp	SHORT $LN3@nk_input_i
$LN2@nk_input_i:

; 12761:     b = &i->mouse.buttons[id];

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [ecx+eax+260]
	mov	DWORD PTR _b$[ebp], edx

; 12762:     if (b->down && b->clicked)

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@nk_input_i
	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@nk_input_i

; 12763:         return nk_true;

	mov	eax, 1
	jmp	SHORT $LN3@nk_input_i
$LN1@nk_input_i:

; 12764:     return nk_false;

	xor	eax, eax
$LN3@nk_input_i:

; 12765: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_is_mouse_pressed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_is_mouse_down
_TEXT	SEGMENT
_i$ = 8							; size = 4
_id$ = 12						; size = 4
_nk_input_is_mouse_down PROC				; COMDAT

; 12751: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12752:     if (!i) return nk_false;

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN1@nk_input_i
	xor	eax, eax
	jmp	SHORT $LN2@nk_input_i
$LN1@nk_input_i:

; 12753:     return i->mouse.buttons[id].down;

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+eax+260]
$LN2@nk_input_i:

; 12754: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_is_mouse_down ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_mouse_clicked
_TEXT	SEGMENT
_i$ = 8							; size = 4
_id$ = 12						; size = 4
_rect$ = 16						; size = 16
_nk_input_mouse_clicked PROC				; COMDAT

; 12743: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12744:     if (!i) return nk_false;

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN2@nk_input_m
	xor	eax, eax
	jmp	SHORT $LN3@nk_input_m
$LN2@nk_input_m:

; 12745:     if (!nk_input_is_mouse_hovering_rect(i, rect)) return nk_false;

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _rect$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN1@nk_input_m
	xor	eax, eax
	jmp	SHORT $LN3@nk_input_m
$LN1@nk_input_m:

; 12746:     return nk_input_is_mouse_click_in_rect(i, id, rect);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _rect$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_nk_input_is_mouse_click_in_rect
	add	esp, 24					; 00000018H
$LN3@nk_input_m:

; 12747: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_mouse_clicked ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_is_mouse_hovering_rect
_TEXT	SEGMENT
tv81 = -196						; size = 4
_i$ = 8							; size = 4
_rect$ = 12						; size = 16
_nk_input_is_mouse_hovering_rect PROC			; COMDAT

; 12729: {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12730:     if (!i) return nk_false;

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN1@nk_input_i
	xor	eax, eax
	jmp	SHORT $LN2@nk_input_i
$LN1@nk_input_i:

; 12731:     return NK_INBOX(i->mouse.pos.x, i->mouse.pos.y, rect.x, rect.y, rect.w, rect.h);

	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR [eax+324]
	comiss	xmm0, DWORD PTR _rect$[ebp]
	jb	SHORT $LN4@nk_input_i
	mov	ecx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _rect$[ebp]
	addss	xmm0, DWORD PTR _rect$[ebp+8]
	comiss	xmm0, DWORD PTR [ecx+324]
	jbe	SHORT $LN4@nk_input_i
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR [edx+328]
	comiss	xmm0, DWORD PTR _rect$[ebp+4]
	jb	SHORT $LN4@nk_input_i
	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	addss	xmm0, DWORD PTR _rect$[ebp+12]
	comiss	xmm0, DWORD PTR [eax+328]
	jbe	SHORT $LN4@nk_input_i
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN6@nk_input_i
$LN4@nk_input_i:
	mov	DWORD PTR tv81[ebp], 0
$LN6@nk_input_i:
	mov	eax, DWORD PTR tv81[ebp]
$LN2@nk_input_i:

; 12732: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_is_mouse_hovering_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_is_mouse_prev_hovering_rect
_TEXT	SEGMENT
tv81 = -196						; size = 4
_i$ = 8							; size = 4
_rect$ = 12						; size = 16
_nk_input_is_mouse_prev_hovering_rect PROC		; COMDAT

; 12736: {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12737:     if (!i) return nk_false;

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN1@nk_input_i
	xor	eax, eax
	jmp	SHORT $LN2@nk_input_i
$LN1@nk_input_i:

; 12738:     return NK_INBOX(i->mouse.prev.x, i->mouse.prev.y, rect.x, rect.y, rect.w, rect.h);

	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR [eax+332]
	comiss	xmm0, DWORD PTR _rect$[ebp]
	jb	SHORT $LN4@nk_input_i
	mov	ecx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _rect$[ebp]
	addss	xmm0, DWORD PTR _rect$[ebp+8]
	comiss	xmm0, DWORD PTR [ecx+332]
	jbe	SHORT $LN4@nk_input_i
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR [edx+336]
	comiss	xmm0, DWORD PTR _rect$[ebp+4]
	jb	SHORT $LN4@nk_input_i
	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	addss	xmm0, DWORD PTR _rect$[ebp+12]
	comiss	xmm0, DWORD PTR [eax+336]
	jbe	SHORT $LN4@nk_input_i
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN6@nk_input_i
$LN4@nk_input_i:
	mov	DWORD PTR tv81[ebp], 0
$LN6@nk_input_i:
	mov	eax, DWORD PTR tv81[ebp]
$LN2@nk_input_i:

; 12739: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_is_mouse_prev_hovering_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_any_mouse_click_in_rect
_TEXT	SEGMENT
tv72 = -220						; size = 4
_down$ = -20						; size = 4
_i$ = -8						; size = 4
_in$ = 8						; size = 4
_b$ = 12						; size = 16
_nk_input_any_mouse_click_in_rect PROC			; COMDAT

; 12720: {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12721:     int i, down = 0;

	mov	DWORD PTR _down$[ebp], 0

; 12722:     for (i = 0; i < NK_BUTTON_MAX; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_input_a
$LN2@nk_input_a:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_input_a:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN1@nk_input_a

; 12723:         down = down || nk_input_is_mouse_click_in_rect(in, (enum nk_buttons)i, b);

	cmp	DWORD PTR _down$[ebp], 0
	jne	SHORT $LN6@nk_input_a
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _b$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _b$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_nk_input_is_mouse_click_in_rect
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN6@nk_input_a
	mov	DWORD PTR tv72[ebp], 0
	jmp	SHORT $LN7@nk_input_a
$LN6@nk_input_a:
	mov	DWORD PTR tv72[ebp], 1
$LN7@nk_input_a:
	mov	edx, DWORD PTR tv72[ebp]
	mov	DWORD PTR _down$[ebp], edx
	jmp	SHORT $LN2@nk_input_a
$LN1@nk_input_a:

; 12724:     return down;

	mov	eax, DWORD PTR _down$[ebp]

; 12725: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_any_mouse_click_in_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_is_mouse_click_down_in_rect
_TEXT	SEGMENT
tv76 = -208						; size = 4
_btn$ = -8						; size = 4
_i$ = 8							; size = 4
_id$ = 12						; size = 4
_b$ = 16						; size = 16
_down$ = 32						; size = 4
_nk_input_is_mouse_click_down_in_rect PROC		; COMDAT

; 12710: {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12711:     const struct nk_mouse_button *btn;
; 12712:     if (!i) return nk_false;

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN1@nk_input_i
	xor	eax, eax
	jmp	SHORT $LN2@nk_input_i
$LN1@nk_input_i:

; 12713:     btn = &i->mouse.buttons[id];

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [ecx+eax+260]
	mov	DWORD PTR _btn$[ebp], edx

; 12714:     return (nk_input_has_mouse_click_down_in_rect(i, id, b, down) &&
; 12715:             btn->clicked) ? nk_true : nk_false;

	mov	eax, DWORD PTR _down$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _b$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _b$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	call	_nk_input_has_mouse_click_down_in_rect
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN4@nk_input_i
	mov	eax, DWORD PTR _btn$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@nk_input_i
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN5@nk_input_i
$LN4@nk_input_i:
	mov	DWORD PTR tv76[ebp], 0
$LN5@nk_input_i:
	mov	eax, DWORD PTR tv76[ebp]
$LN2@nk_input_i:

; 12716: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_is_mouse_click_down_in_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_is_mouse_click_in_rect
_TEXT	SEGMENT
tv76 = -208						; size = 4
_btn$ = -8						; size = 4
_i$ = 8							; size = 4
_id$ = 12						; size = 4
_b$ = 16						; size = 16
_nk_input_is_mouse_click_in_rect PROC			; COMDAT

; 12699: {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12700:     const struct nk_mouse_button *btn;
; 12701:     if (!i) return nk_false;

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN1@nk_input_i
	xor	eax, eax
	jmp	SHORT $LN2@nk_input_i
$LN1@nk_input_i:

; 12702:     btn = &i->mouse.buttons[id];

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [ecx+eax+260]
	mov	DWORD PTR _btn$[ebp], edx

; 12703:     return (nk_input_has_mouse_click_down_in_rect(i, id, b, nk_false) &&
; 12704:             btn->clicked) ? nk_true : nk_false;

	push	0
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _b$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _b$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_nk_input_has_mouse_click_down_in_rect
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN4@nk_input_i
	mov	edx, DWORD PTR _btn$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN4@nk_input_i
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN5@nk_input_i
$LN4@nk_input_i:
	mov	DWORD PTR tv76[ebp], 0
$LN5@nk_input_i:
	mov	eax, DWORD PTR tv76[ebp]
$LN2@nk_input_i:

; 12705: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_is_mouse_click_in_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_has_mouse_click_down_in_rect
_TEXT	SEGMENT
tv75 = -208						; size = 4
_btn$ = -8						; size = 4
_i$ = 8							; size = 4
_id$ = 12						; size = 4
_b$ = 16						; size = 16
_down$ = 32						; size = 4
_nk_input_has_mouse_click_down_in_rect PROC		; COMDAT

; 12689: {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12690:     const struct nk_mouse_button *btn;
; 12691:     if (!i) return nk_false;

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN1@nk_input_h
	xor	eax, eax
	jmp	SHORT $LN2@nk_input_h
$LN1@nk_input_h:

; 12692:     btn = &i->mouse.buttons[id];

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [ecx+eax+260]
	mov	DWORD PTR _btn$[ebp], edx

; 12693:     return nk_input_has_mouse_click_in_rect(i, id, b) && (btn->down == down);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _b$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _b$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_nk_input_has_mouse_click_in_rect
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN4@nk_input_h
	mov	edx, DWORD PTR _btn$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _down$[ebp]
	jne	SHORT $LN4@nk_input_h
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN5@nk_input_h
$LN4@nk_input_h:
	mov	DWORD PTR tv75[ebp], 0
$LN5@nk_input_h:
	mov	eax, DWORD PTR tv75[ebp]
$LN2@nk_input_h:

; 12694: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_has_mouse_click_down_in_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_has_mouse_click_in_rect
_TEXT	SEGMENT
_btn$ = -8						; size = 4
_i$ = 8							; size = 4
_id$ = 12						; size = 4
_b$ = 16						; size = 16
_nk_input_has_mouse_click_in_rect PROC			; COMDAT

; 12677: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12678:     const struct nk_mouse_button *btn;
; 12679:     if (!i) return nk_false;

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN4@nk_input_h
	xor	eax, eax
	jmp	SHORT $LN5@nk_input_h
$LN4@nk_input_h:

; 12680:     btn = &i->mouse.buttons[id];

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [ecx+eax+260]
	mov	DWORD PTR _btn$[ebp], edx

; 12681:     if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h))

	mov	eax, DWORD PTR _btn$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	comiss	xmm0, DWORD PTR _b$[ebp]
	jb	SHORT $LN1@nk_input_h
	mov	eax, DWORD PTR _btn$[ebp]
	movss	xmm0, DWORD PTR _b$[ebp]
	addss	xmm0, DWORD PTR _b$[ebp+8]
	comiss	xmm0, DWORD PTR [eax+8]
	jbe	SHORT $LN1@nk_input_h
	mov	eax, DWORD PTR _btn$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	comiss	xmm0, DWORD PTR _b$[ebp+4]
	jb	SHORT $LN1@nk_input_h
	mov	eax, DWORD PTR _btn$[ebp]
	movss	xmm0, DWORD PTR _b$[ebp+4]
	addss	xmm0, DWORD PTR _b$[ebp+12]
	comiss	xmm0, DWORD PTR [eax+12]
	ja	SHORT $LN3@nk_input_h
$LN1@nk_input_h:

; 12682:         return nk_false;

	xor	eax, eax
	jmp	SHORT $LN5@nk_input_h
$LN3@nk_input_h:

; 12683:     return nk_true;

	mov	eax, 1
$LN5@nk_input_h:

; 12684: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_has_mouse_click_in_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_has_mouse_click
_TEXT	SEGMENT
tv72 = -208						; size = 4
_btn$ = -8						; size = 4
_i$ = 8							; size = 4
_id$ = 12						; size = 4
_nk_input_has_mouse_click PROC				; COMDAT

; 12667: {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12668:     const struct nk_mouse_button *btn;
; 12669:     if (!i) return nk_false;

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN1@nk_input_h
	xor	eax, eax
	jmp	SHORT $LN2@nk_input_h
$LN1@nk_input_h:

; 12670:     btn = &i->mouse.buttons[id];

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [ecx+eax+260]
	mov	DWORD PTR _btn$[ebp], edx

; 12671:     return (btn->clicked && btn->down == nk_false) ? nk_true : nk_false;

	mov	eax, DWORD PTR _btn$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@nk_input_h
	mov	ecx, DWORD PTR _btn$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN4@nk_input_h
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN5@nk_input_h
$LN4@nk_input_h:
	mov	DWORD PTR tv72[ebp], 0
$LN5@nk_input_h:
	mov	eax, DWORD PTR tv72[ebp]
$LN2@nk_input_h:

; 12672: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_has_mouse_click ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_push_custom
_TEXT	SEGMENT
tv143 = -220						; size = 4
tv139 = -220						; size = 4
_c$1 = -20						; size = 4
_cmd$ = -8						; size = 4
_b$ = 8							; size = 4
_r$ = 12						; size = 16
_cb$ = 28						; size = 4
_usr$ = 32						; size = 4
_nk_push_custom PROC					; COMDAT

; 7684 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7685 :     struct nk_command_custom *cmd;
; 7686 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN9@nk_push_cu
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_push_custom@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_push_cu:

; 7687 :     if (!b) return;

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN6@nk_push_cu
	jmp	$LN7@nk_push_cu
$LN6@nk_push_cu:

; 7688 :     if (b->use_clipping) {

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	$LN4@nk_push_cu

; 7689 :         const struct nk_rect *c = &b->clip;

	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 4
	mov	DWORD PTR _c$1[ebp], eax

; 7690 :         if (c->w == 0 || c->h == 0 || !NK_INTERSECT(r.x, r.y, r.w, r.h, c->x, c->y, c->w, c->h))

	mov	eax, DWORD PTR _c$1[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@nk_push_cu
	mov	eax, DWORD PTR _c$1[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@nk_push_cu
	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp+8]
	mov	eax, DWORD PTR _c$1[ebp]
	movss	xmm1, DWORD PTR [eax]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_push_cu
	mov	eax, DWORD PTR _c$1[ebp]
	mov	ecx, DWORD PTR _c$1[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR _r$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_push_cu
	movss	xmm0, DWORD PTR _r$[ebp+4]
	addss	xmm0, DWORD PTR _r$[ebp+12]
	mov	eax, DWORD PTR _c$1[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_push_cu
	mov	eax, DWORD PTR _c$1[ebp]
	mov	ecx, DWORD PTR _c$1[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	xmm1, DWORD PTR _r$[ebp+4]
	comiss	xmm1, xmm0
	jbe	SHORT $LN4@nk_push_cu
$LN2@nk_push_cu:

; 7691 :             return;

	jmp	$LN7@nk_push_cu
$LN4@nk_push_cu:

; 7692 :     }
; 7693 : 
; 7694 :     cmd = (struct nk_command_custom*)
; 7695 :         nk_command_buffer_push(b, NK_COMMAND_CUSTOM, sizeof(*cmd));

	push	24					; 00000018H
	push	18					; 00000012H
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_nk_command_buffer_push
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmd$[ebp], eax

; 7696 :     if (!cmd) return;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN1@nk_push_cu
	jmp	$LN7@nk_push_cu
$LN1@nk_push_cu:

; 7697 :     cmd->x = (short)r.x;

	cvttss2si eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+8], ax

; 7698 :     cmd->y = (short)r.y;

	cvttss2si eax, DWORD PTR _r$[ebp+4]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+10], ax

; 7699 :     cmd->w = (unsigned short)NK_MAX(0, r.w);

	movss	xmm0, DWORD PTR _r$[ebp+8]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN10@nk_push_cu
	movss	xmm0, DWORD PTR _r$[ebp+8]
	movss	DWORD PTR tv139[ebp], xmm0
	jmp	SHORT $LN11@nk_push_cu
$LN10@nk_push_cu:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv139[ebp], xmm0
$LN11@nk_push_cu:
	cvttss2si eax, DWORD PTR tv139[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+12], ax

; 7700 :     cmd->h = (unsigned short)NK_MAX(0, r.h);

	movss	xmm0, DWORD PTR _r$[ebp+12]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN12@nk_push_cu
	movss	xmm0, DWORD PTR _r$[ebp+12]
	movss	DWORD PTR tv143[ebp], xmm0
	jmp	SHORT $LN13@nk_push_cu
$LN12@nk_push_cu:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv143[ebp], xmm0
$LN13@nk_push_cu:
	cvttss2si eax, DWORD PTR tv143[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+14], ax

; 7701 :     cmd->callback_data = usr;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _usr$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 7702 :     cmd->callback = cb;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _cb$[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN7@nk_push_cu:

; 7703 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_push_custom ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_push_scissor
_TEXT	SEGMENT
tv90 = -208						; size = 4
tv86 = -208						; size = 4
_cmd$ = -8						; size = 4
_b$ = 8							; size = 4
_r$ = 12						; size = 16
_nk_push_scissor PROC					; COMDAT

; 7318 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7319 :     struct nk_command_scissor *cmd;
; 7320 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN5@nk_push_sc
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_push_scissor@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_push_sc:

; 7321 :     if (!b) return;

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN2@nk_push_sc
	jmp	$LN3@nk_push_sc
$LN2@nk_push_sc:

; 7322 : 
; 7323 :     b->clip.x = r.x;

	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 7324 :     b->clip.y = r.y;

	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR _r$[ebp+4]
	movss	DWORD PTR [eax+8], xmm0

; 7325 :     b->clip.w = r.w;

	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR _r$[ebp+8]
	movss	DWORD PTR [eax+12], xmm0

; 7326 :     b->clip.h = r.h;

	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR _r$[ebp+12]
	movss	DWORD PTR [eax+16], xmm0

; 7327 :     cmd = (struct nk_command_scissor*)
; 7328 :         nk_command_buffer_push(b, NK_COMMAND_SCISSOR, sizeof(*cmd));

	push	16					; 00000010H
	push	1
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_nk_command_buffer_push
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmd$[ebp], eax

; 7329 : 
; 7330 :     if (!cmd) return;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN1@nk_push_sc
	jmp	$LN3@nk_push_sc
$LN1@nk_push_sc:

; 7331 :     cmd->x = (short)r.x;

	cvttss2si eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+8], ax

; 7332 :     cmd->y = (short)r.y;

	cvttss2si eax, DWORD PTR _r$[ebp+4]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+10], ax

; 7333 :     cmd->w = (unsigned short)NK_MAX(0, r.w);

	movss	xmm0, DWORD PTR _r$[ebp+8]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN6@nk_push_sc
	movss	xmm0, DWORD PTR _r$[ebp+8]
	movss	DWORD PTR tv86[ebp], xmm0
	jmp	SHORT $LN7@nk_push_sc
$LN6@nk_push_sc:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv86[ebp], xmm0
$LN7@nk_push_sc:
	cvttss2si eax, DWORD PTR tv86[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+12], ax

; 7334 :     cmd->h = (unsigned short)NK_MAX(0, r.h);

	movss	xmm0, DWORD PTR _r$[ebp+12]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN8@nk_push_sc
	movss	xmm0, DWORD PTR _r$[ebp+12]
	movss	DWORD PTR tv90[ebp], xmm0
	jmp	SHORT $LN9@nk_push_sc
$LN8@nk_push_sc:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv90[ebp], xmm0
$LN9@nk_push_sc:
	cvttss2si eax, DWORD PTR tv90[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+14], ax
$LN3@nk_push_sc:

; 7335 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_push_scissor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_text
_TEXT	SEGMENT
_txt_width$1 = -56					; size = 4
_glyphs$2 = -44						; size = 4
_c$3 = -32						; size = 4
_cmd$ = -20						; size = 4
_text_width$ = -8					; size = 4
_b$ = 8							; size = 4
_r$ = 12						; size = 16
_string$ = 28						; size = 4
_length$ = 32						; size = 4
_font$ = 36						; size = 4
_bg$ = 40						; size = 4
_fg$ = 44						; size = 4
_nk_draw_text PROC					; COMDAT

; 7709 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7710 :     float text_width = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _text_width$[ebp], xmm0

; 7711 :     struct nk_command_text *cmd;
; 7712 : 
; 7713 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN12@nk_draw_te
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_text@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_draw_te:

; 7714 :     NK_ASSERT(font);

	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN13@nk_draw_te
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_text@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_draw_te:

; 7715 :     if (!b || !string || !length || (bg.a == 0 && fg.a == 0)) return;

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN8@nk_draw_te
	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN8@nk_draw_te
	cmp	DWORD PTR _length$[ebp], 0
	je	SHORT $LN8@nk_draw_te
	movzx	eax, BYTE PTR _bg$[ebp+3]
	test	eax, eax
	jne	SHORT $LN9@nk_draw_te
	movzx	eax, BYTE PTR _fg$[ebp+3]
	test	eax, eax
	jne	SHORT $LN9@nk_draw_te
$LN8@nk_draw_te:
	jmp	$LN10@nk_draw_te
$LN9@nk_draw_te:

; 7716 :     if (b->use_clipping) {

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	$LN6@nk_draw_te

; 7717 :         const struct nk_rect *c = &b->clip;

	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 4
	mov	DWORD PTR _c$3[ebp], eax

; 7718 :         if (c->w == 0 || c->h == 0 || !NK_INTERSECT(r.x, r.y, r.w, r.h, c->x, c->y, c->w, c->h))

	mov	eax, DWORD PTR _c$3[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN4@nk_draw_te
	mov	eax, DWORD PTR _c$3[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN4@nk_draw_te
	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp+8]
	mov	eax, DWORD PTR _c$3[ebp]
	movss	xmm1, DWORD PTR [eax]
	comiss	xmm1, xmm0
	ja	SHORT $LN4@nk_draw_te
	mov	eax, DWORD PTR _c$3[ebp]
	mov	ecx, DWORD PTR _c$3[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR _r$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN4@nk_draw_te
	movss	xmm0, DWORD PTR _r$[ebp+4]
	addss	xmm0, DWORD PTR _r$[ebp+12]
	mov	eax, DWORD PTR _c$3[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN4@nk_draw_te
	mov	eax, DWORD PTR _c$3[ebp]
	mov	ecx, DWORD PTR _c$3[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	xmm1, DWORD PTR _r$[ebp+4]
	comiss	xmm1, xmm0
	jbe	SHORT $LN6@nk_draw_te
$LN4@nk_draw_te:

; 7719 :             return;

	jmp	$LN10@nk_draw_te
$LN6@nk_draw_te:

; 7720 :     }
; 7721 : 
; 7722 :     /* make sure text fits inside bounds */
; 7723 :     text_width = font->width(font->userdata, font->height, string, length);

	mov	esi, esp
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _text_width$[ebp]

; 7724 :     if (text_width > r.w){

	movss	xmm0, DWORD PTR _text_width$[ebp]
	comiss	xmm0, DWORD PTR _r$[ebp+8]
	jbe	SHORT $LN3@nk_draw_te

; 7725 :         int glyphs = 0;

	mov	DWORD PTR _glyphs$2[ebp], 0

; 7726 :         float txt_width = (float)text_width;

	movss	xmm0, DWORD PTR _text_width$[ebp]
	movss	DWORD PTR _txt_width$1[ebp], xmm0

; 7727 :         length = nk_text_clamp(font, string, length, r.w, &glyphs, &txt_width, 0,0);

	push	0
	push	0
	lea	eax, DWORD PTR _txt_width$1[ebp]
	push	eax
	lea	ecx, DWORD PTR _glyphs$2[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	push	ecx
	call	_nk_text_clamp
	add	esp, 32					; 00000020H
	mov	DWORD PTR _length$[ebp], eax
$LN3@nk_draw_te:

; 7728 :     }
; 7729 : 
; 7730 :     if (!length) return;

	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN2@nk_draw_te
	jmp	$LN10@nk_draw_te
$LN2@nk_draw_te:

; 7731 :     cmd = (struct nk_command_text*)
; 7732 :         nk_command_buffer_push(b, NK_COMMAND_TEXT, sizeof(*cmd) + (nk_size)(length + 1));

	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 41					; 00000029H
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_nk_command_buffer_push
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmd$[ebp], eax

; 7733 :     if (!cmd) return;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN1@nk_draw_te
	jmp	$LN10@nk_draw_te
$LN1@nk_draw_te:

; 7734 :     cmd->x = (short)r.x;

	cvttss2si eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+20], ax

; 7735 :     cmd->y = (short)r.y;

	cvttss2si eax, DWORD PTR _r$[ebp+4]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+22], ax

; 7736 :     cmd->w = (unsigned short)r.w;

	cvttss2si eax, DWORD PTR _r$[ebp+8]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+24], ax

; 7737 :     cmd->h = (unsigned short)r.h;

	cvttss2si eax, DWORD PTR _r$[ebp+12]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+26], ax

; 7738 :     cmd->background = bg;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _bg$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 7739 :     cmd->foreground = fg;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _fg$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 7740 :     cmd->font = font;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 7741 :     cmd->length = length;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 7742 :     cmd->height = font->height;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx

; 7743 :     NK_MEMCPY(cmd->string, string, (nk_size)length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cmd$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 7744 :     cmd->string[length] = '\0';

	mov	eax, DWORD PTR _cmd$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	mov	BYTE PTR [eax+36], 0
$LN10@nk_draw_te:

; 7745 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@nk_draw_te
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN17@nk_draw_te:
	DD	2
	DD	$LN16@nk_draw_te
$LN16@nk_draw_te:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN14@nk_draw_te
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN15@nk_draw_te
$LN15@nk_draw_te:
	DB	116					; 00000074H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN14@nk_draw_te:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	0
_nk_draw_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_draw_image
_TEXT	SEGMENT
tv143 = -220						; size = 4
tv139 = -220						; size = 4
_c$1 = -20						; size = 4
_cmd$ = -8						; size = 4
_b$ = 8							; size = 4
_r$ = 12						; size = 16
_img$ = 28						; size = 4
_col$ = 32						; size = 4
_nk_draw_image PROC					; COMDAT

; 7660 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7661 :     struct nk_command_image *cmd;
; 7662 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN9@nk_draw_im
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_draw_image@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_draw_im:

; 7663 :     if (!b) return;

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN6@nk_draw_im
	jmp	$LN7@nk_draw_im
$LN6@nk_draw_im:

; 7664 :     if (b->use_clipping) {

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	$LN4@nk_draw_im

; 7665 :         const struct nk_rect *c = &b->clip;

	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 4
	mov	DWORD PTR _c$1[ebp], eax

; 7666 :         if (c->w == 0 || c->h == 0 || !NK_INTERSECT(r.x, r.y, r.w, r.h, c->x, c->y, c->w, c->h))

	mov	eax, DWORD PTR _c$1[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@nk_draw_im
	mov	eax, DWORD PTR _c$1[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@nk_draw_im
	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp+8]
	mov	eax, DWORD PTR _c$1[ebp]
	movss	xmm1, DWORD PTR [eax]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_draw_im
	mov	eax, DWORD PTR _c$1[ebp]
	mov	ecx, DWORD PTR _c$1[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR _r$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_draw_im
	movss	xmm0, DWORD PTR _r$[ebp+4]
	addss	xmm0, DWORD PTR _r$[ebp+12]
	mov	eax, DWORD PTR _c$1[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_draw_im
	mov	eax, DWORD PTR _c$1[ebp]
	mov	ecx, DWORD PTR _c$1[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	xmm1, DWORD PTR _r$[ebp+4]
	comiss	xmm1, xmm0
	jbe	SHORT $LN4@nk_draw_im
$LN2@nk_draw_im:

; 7667 :             return;

	jmp	$LN7@nk_draw_im
$LN4@nk_draw_im:

; 7668 :     }
; 7669 : 
; 7670 :     cmd = (struct nk_command_image*)
; 7671 :         nk_command_buffer_push(b, NK_COMMAND_IMAGE, sizeof(*cmd));

	push	36					; 00000024H
	push	17					; 00000011H
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_nk_command_buffer_push
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmd$[ebp], eax

; 7672 :     if (!cmd) return;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN1@nk_draw_im
	jmp	$LN7@nk_draw_im
$LN1@nk_draw_im:

; 7673 :     cmd->x = (short)r.x;

	cvttss2si eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+8], ax

; 7674 :     cmd->y = (short)r.y;

	cvttss2si eax, DWORD PTR _r$[ebp+4]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+10], ax

; 7675 :     cmd->w = (unsigned short)NK_MAX(0, r.w);

	movss	xmm0, DWORD PTR _r$[ebp+8]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN10@nk_draw_im
	movss	xmm0, DWORD PTR _r$[ebp+8]
	movss	DWORD PTR tv139[ebp], xmm0
	jmp	SHORT $LN11@nk_draw_im
$LN10@nk_draw_im:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv139[ebp], xmm0
$LN11@nk_draw_im:
	cvttss2si eax, DWORD PTR tv139[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+12], ax

; 7676 :     cmd->h = (unsigned short)NK_MAX(0, r.h);

	movss	xmm0, DWORD PTR _r$[ebp+12]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN12@nk_draw_im
	movss	xmm0, DWORD PTR _r$[ebp+12]
	movss	DWORD PTR tv143[ebp], xmm0
	jmp	SHORT $LN13@nk_draw_im
$LN12@nk_draw_im:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv143[ebp], xmm0
$LN13@nk_draw_im:
	cvttss2si eax, DWORD PTR tv143[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+14], ax

; 7677 :     cmd->img = *img;

	mov	eax, DWORD PTR _cmd$[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _img$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx

; 7678 :     cmd->col = col;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax+32], ecx
$LN7@nk_draw_im:

; 7679 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_draw_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_fill_polygon
_TEXT	SEGMENT
_cmd$ = -32						; size = 4
_size$ = -20						; size = 4
_i$ = -8						; size = 4
_b$ = 8							; size = 4
_points$ = 12						; size = 4
_point_count$ = 16					; size = 4
_col$ = 20						; size = 4
_nk_fill_polygon PROC					; COMDAT

; 7616 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7617 :     int i;
; 7618 :     nk_size size = 0;

	mov	DWORD PTR _size$[ebp], 0

; 7619 :     struct nk_command_polygon_filled *cmd;
; 7620 : 
; 7621 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN9@nk_fill_po
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_fill_polygon@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_fill_po:

; 7622 :     if (!b || col.a == 0) return;

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN5@nk_fill_po
	movzx	eax, BYTE PTR _col$[ebp+3]
	test	eax, eax
	jne	SHORT $LN6@nk_fill_po
$LN5@nk_fill_po:
	jmp	$LN1@nk_fill_po
$LN6@nk_fill_po:

; 7623 :     size = sizeof(*cmd) + sizeof(short) * 2 * (nk_size)point_count;

	mov	eax, DWORD PTR _point_count$[ebp]
	lea	ecx, DWORD PTR [eax*4+20]
	mov	DWORD PTR _size$[ebp], ecx

; 7624 :     cmd = (struct nk_command_polygon_filled*)
; 7625 :         nk_command_buffer_push(b, NK_COMMAND_POLYGON_FILLED, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	push	14					; 0000000eH
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_nk_command_buffer_push
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmd$[ebp], eax

; 7626 :     if (!cmd) return;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN4@nk_fill_po
	jmp	SHORT $LN1@nk_fill_po
$LN4@nk_fill_po:

; 7627 :     cmd->color = col;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 7628 :     cmd->point_count = (unsigned short)point_count;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	cx, WORD PTR _point_count$[ebp]
	mov	WORD PTR [eax+12], cx

; 7629 :     for (i = 0; i < point_count; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_fill_po
$LN2@nk_fill_po:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_fill_po:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _point_count$[ebp]
	jge	SHORT $LN1@nk_fill_po

; 7630 :         cmd->points[i].x = (short)points[i*2+0];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _points$[ebp]
	cvttss2si edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+eax*4+14], dx

; 7631 :         cmd->points[i].y = (short)points[i*2+1];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _points$[ebp]
	cvttss2si edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+eax*4+16], dx

; 7632 :     }

	jmp	SHORT $LN2@nk_fill_po
$LN1@nk_fill_po:

; 7633 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_fill_polygon ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_fill_triangle
_TEXT	SEGMENT
_clip$1 = -20						; size = 4
_cmd$ = -8						; size = 4
_b$ = 8							; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_x2$ = 28						; size = 4
_y2$ = 32						; size = 4
_c$ = 36						; size = 4
_nk_fill_triangle PROC					; COMDAT

; 7566 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7567 :     struct nk_command_triangle_filled *cmd;
; 7568 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN15@nk_fill_tr
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_fill_triangle@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@nk_fill_tr:

; 7569 :     if (!b || c.a == 0) return;

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN11@nk_fill_tr
	movzx	eax, BYTE PTR _c$[ebp+3]
	test	eax, eax
	jne	SHORT $LN12@nk_fill_tr
$LN11@nk_fill_tr:
	jmp	$LN13@nk_fill_tr
$LN12@nk_fill_tr:

; 7570 :     if (!b) return;

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN10@nk_fill_tr
	jmp	$LN13@nk_fill_tr
$LN10@nk_fill_tr:

; 7571 :     if (b->use_clipping) {

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	$LN8@nk_fill_tr

; 7572 :         const struct nk_rect *clip = &b->clip;

	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 4
	mov	DWORD PTR _clip$1[ebp], eax

; 7573 :         if (!NK_INBOX(x0, y0, clip->x, clip->y, clip->w, clip->h) &&
; 7574 :             !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
; 7575 :             !NK_INBOX(x2, y2, clip->x, clip->y, clip->w, clip->h))

	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR _x0$[ebp]
	comiss	xmm0, DWORD PTR [eax]
	jb	SHORT $LN6@nk_fill_tr
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	comiss	xmm0, DWORD PTR _x0$[ebp]
	jbe	SHORT $LN6@nk_fill_tr
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR _y0$[ebp]
	comiss	xmm0, DWORD PTR [eax+4]
	jb	SHORT $LN6@nk_fill_tr
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+12]
	comiss	xmm0, DWORD PTR _y0$[ebp]
	ja	$LN8@nk_fill_tr
$LN6@nk_fill_tr:
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR _x1$[ebp]
	comiss	xmm0, DWORD PTR [eax]
	jb	SHORT $LN4@nk_fill_tr
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	comiss	xmm0, DWORD PTR _x1$[ebp]
	jbe	SHORT $LN4@nk_fill_tr
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR _y1$[ebp]
	comiss	xmm0, DWORD PTR [eax+4]
	jb	SHORT $LN4@nk_fill_tr
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+12]
	comiss	xmm0, DWORD PTR _y1$[ebp]
	ja	SHORT $LN8@nk_fill_tr
$LN4@nk_fill_tr:
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR _x2$[ebp]
	comiss	xmm0, DWORD PTR [eax]
	jb	SHORT $LN2@nk_fill_tr
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	comiss	xmm0, DWORD PTR _x2$[ebp]
	jbe	SHORT $LN2@nk_fill_tr
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR _y2$[ebp]
	comiss	xmm0, DWORD PTR [eax+4]
	jb	SHORT $LN2@nk_fill_tr
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+12]
	comiss	xmm0, DWORD PTR _y2$[ebp]
	ja	SHORT $LN8@nk_fill_tr
$LN2@nk_fill_tr:

; 7576 :             return;

	jmp	SHORT $LN13@nk_fill_tr
$LN8@nk_fill_tr:

; 7577 :     }
; 7578 : 
; 7579 :     cmd = (struct nk_command_triangle_filled*)
; 7580 :         nk_command_buffer_push(b, NK_COMMAND_TRIANGLE_FILLED, sizeof(*cmd));

	push	24					; 00000018H
	push	12					; 0000000cH
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_nk_command_buffer_push
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmd$[ebp], eax

; 7581 :     if (!cmd) return;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN1@nk_fill_tr
	jmp	SHORT $LN13@nk_fill_tr
$LN1@nk_fill_tr:

; 7582 :     cmd->a.x = (short)x0;

	cvttss2si eax, DWORD PTR _x0$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+8], ax

; 7583 :     cmd->a.y = (short)y0;

	cvttss2si eax, DWORD PTR _y0$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+10], ax

; 7584 :     cmd->b.x = (short)x1;

	cvttss2si eax, DWORD PTR _x1$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+12], ax

; 7585 :     cmd->b.y = (short)y1;

	cvttss2si eax, DWORD PTR _y1$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+14], ax

; 7586 :     cmd->c.x = (short)x2;

	cvttss2si eax, DWORD PTR _x2$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+16], ax

; 7587 :     cmd->c.y = (short)y2;

	cvttss2si eax, DWORD PTR _y2$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+18], ax

; 7588 :     cmd->color = c;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN13@nk_fill_tr:

; 7589 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_fill_triangle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_fill_arc
_TEXT	SEGMENT
_cmd$ = -8						; size = 4
_b$ = 8							; size = 4
_cx$ = 12						; size = 4
_cy$ = 16						; size = 4
_radius$ = 20						; size = 4
_a_min$ = 24						; size = 4
_a_max$ = 28						; size = 4
_c$ = 32						; size = 4
_nk_fill_arc PROC					; COMDAT

; 7520 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7521 :     struct nk_command_arc_filled *cmd;
; 7522 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN6@nk_fill_ar
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_fill_arc@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_fill_ar:

; 7523 :     if (!b || c.a == 0) return;

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN2@nk_fill_ar
	movzx	eax, BYTE PTR _c$[ebp+3]
	test	eax, eax
	jne	SHORT $LN3@nk_fill_ar
$LN2@nk_fill_ar:
	jmp	SHORT $LN4@nk_fill_ar
$LN3@nk_fill_ar:

; 7524 :     cmd = (struct nk_command_arc_filled*)
; 7525 :         nk_command_buffer_push(b, NK_COMMAND_ARC_FILLED, sizeof(*cmd));

	push	28					; 0000001cH
	push	10					; 0000000aH
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_nk_command_buffer_push
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmd$[ebp], eax

; 7526 :     if (!cmd) return;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN1@nk_fill_ar
	jmp	SHORT $LN4@nk_fill_ar
$LN1@nk_fill_ar:

; 7527 :     cmd->cx = (short)cx;

	cvttss2si eax, DWORD PTR _cx$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+8], ax

; 7528 :     cmd->cy = (short)cy;

	cvttss2si eax, DWORD PTR _cy$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+10], ax

; 7529 :     cmd->r = (unsigned short)radius;

	cvttss2si eax, DWORD PTR _radius$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+12], ax

; 7530 :     cmd->a[0] = a_min;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cmd$[ebp]
	movss	xmm0, DWORD PTR _a_min$[ebp]
	movss	DWORD PTR [edx+ecx+16], xmm0

; 7531 :     cmd->a[1] = a_max;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _cmd$[ebp]
	movss	xmm0, DWORD PTR _a_max$[ebp]
	movss	DWORD PTR [ecx+eax+16], xmm0

; 7532 :     cmd->color = c;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN4@nk_fill_ar:

; 7533 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_fill_arc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_fill_circle
_TEXT	SEGMENT
tv143 = -220						; size = 4
tv139 = -220						; size = 4
_clip$1 = -20						; size = 4
_cmd$ = -8						; size = 4
_b$ = 8							; size = 4
_r$ = 12						; size = 16
_c$ = 28						; size = 4
_nk_fill_circle PROC					; COMDAT

; 7479 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7480 :     struct nk_command_circle_filled *cmd;
; 7481 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN9@nk_fill_ci
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_fill_circle@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_fill_ci:

; 7482 :     if (!b || c.a == 0 || r.w == 0 || r.h == 0) return;

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN5@nk_fill_ci
	movzx	eax, BYTE PTR _c$[ebp+3]
	test	eax, eax
	je	SHORT $LN5@nk_fill_ci
	movss	xmm0, DWORD PTR _r$[ebp+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@nk_fill_ci
	movss	xmm0, DWORD PTR _r$[ebp+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@nk_fill_ci
$LN5@nk_fill_ci:
	jmp	$LN7@nk_fill_ci
$LN6@nk_fill_ci:

; 7483 :     if (b->use_clipping) {

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN3@nk_fill_ci

; 7484 :         const struct nk_rect *clip = &b->clip;

	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 4
	mov	DWORD PTR _clip$1[ebp], eax

; 7485 :         if (!NK_INTERSECT(r.x, r.y, r.w, r.h, clip->x, clip->y, clip->w, clip->h))

	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp+8]
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm1, DWORD PTR [eax]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_fill_ci
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR _r$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_fill_ci
	movss	xmm0, DWORD PTR _r$[ebp+4]
	addss	xmm0, DWORD PTR _r$[ebp+12]
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_fill_ci
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	xmm1, DWORD PTR _r$[ebp+4]
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@nk_fill_ci
$LN2@nk_fill_ci:

; 7486 :             return;

	jmp	$LN7@nk_fill_ci
$LN3@nk_fill_ci:

; 7487 :     }
; 7488 : 
; 7489 :     cmd = (struct nk_command_circle_filled*)
; 7490 :         nk_command_buffer_push(b, NK_COMMAND_CIRCLE_FILLED, sizeof(*cmd));

	push	20					; 00000014H
	push	8
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_nk_command_buffer_push
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmd$[ebp], eax

; 7491 :     if (!cmd) return;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN1@nk_fill_ci
	jmp	$LN7@nk_fill_ci
$LN1@nk_fill_ci:

; 7492 :     cmd->x = (short)r.x;

	cvttss2si eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+8], ax

; 7493 :     cmd->y = (short)r.y;

	cvttss2si eax, DWORD PTR _r$[ebp+4]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+10], ax

; 7494 :     cmd->w = (unsigned short)NK_MAX(r.w, 0);

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _r$[ebp+8]
	jbe	SHORT $LN10@nk_fill_ci
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv139[ebp], xmm0
	jmp	SHORT $LN11@nk_fill_ci
$LN10@nk_fill_ci:
	movss	xmm0, DWORD PTR _r$[ebp+8]
	movss	DWORD PTR tv139[ebp], xmm0
$LN11@nk_fill_ci:
	cvttss2si eax, DWORD PTR tv139[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+12], ax

; 7495 :     cmd->h = (unsigned short)NK_MAX(r.h, 0);

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _r$[ebp+12]
	jbe	SHORT $LN12@nk_fill_ci
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv143[ebp], xmm0
	jmp	SHORT $LN13@nk_fill_ci
$LN12@nk_fill_ci:
	movss	xmm0, DWORD PTR _r$[ebp+12]
	movss	DWORD PTR tv143[ebp], xmm0
$LN13@nk_fill_ci:
	cvttss2si eax, DWORD PTR tv143[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+14], ax

; 7496 :     cmd->color = c;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN7@nk_fill_ci:

; 7497 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_fill_circle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_fill_rect_multi_color
_TEXT	SEGMENT
tv141 = -220						; size = 4
tv137 = -220						; size = 4
_clip$1 = -20						; size = 4
_cmd$ = -8						; size = 4
_b$ = 8							; size = 4
_rect$ = 12						; size = 16
_left$ = 28						; size = 4
_top$ = 32						; size = 4
_right$ = 36						; size = 4
_bottom$ = 40						; size = 4
_nk_fill_rect_multi_color PROC				; COMDAT

; 7431 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7432 :     struct nk_command_rect_multi_color *cmd;
; 7433 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN9@nk_fill_re
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_fill_rect_multi_color@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_fill_re:

; 7434 :     if (!b || rect.w == 0 || rect.h == 0) return;

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN5@nk_fill_re
	movss	xmm0, DWORD PTR _rect$[ebp+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@nk_fill_re
	movss	xmm0, DWORD PTR _rect$[ebp+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@nk_fill_re
$LN5@nk_fill_re:
	jmp	$LN7@nk_fill_re
$LN6@nk_fill_re:

; 7435 :     if (b->use_clipping) {

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN3@nk_fill_re

; 7436 :         const struct nk_rect *clip = &b->clip;

	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 4
	mov	DWORD PTR _clip$1[ebp], eax

; 7437 :         if (!NK_INTERSECT(rect.x, rect.y, rect.w, rect.h,
; 7438 :             clip->x, clip->y, clip->w, clip->h)) return;

	movss	xmm0, DWORD PTR _rect$[ebp]
	addss	xmm0, DWORD PTR _rect$[ebp+8]
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm1, DWORD PTR [eax]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_fill_re
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR _rect$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_fill_re
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	addss	xmm0, DWORD PTR _rect$[ebp+12]
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_fill_re
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	xmm1, DWORD PTR _rect$[ebp+4]
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@nk_fill_re
$LN2@nk_fill_re:
	jmp	$LN7@nk_fill_re
$LN3@nk_fill_re:

; 7439 :     }
; 7440 : 
; 7441 :     cmd = (struct nk_command_rect_multi_color*)
; 7442 :         nk_command_buffer_push(b, NK_COMMAND_RECT_MULTI_COLOR, sizeof(*cmd));

	push	32					; 00000020H
	push	6
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_nk_command_buffer_push
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmd$[ebp], eax

; 7443 :     if (!cmd) return;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN1@nk_fill_re
	jmp	$LN7@nk_fill_re
$LN1@nk_fill_re:

; 7444 :     cmd->x = (short)rect.x;

	cvttss2si eax, DWORD PTR _rect$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+8], ax

; 7445 :     cmd->y = (short)rect.y;

	cvttss2si eax, DWORD PTR _rect$[ebp+4]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+10], ax

; 7446 :     cmd->w = (unsigned short)NK_MAX(0, rect.w);

	movss	xmm0, DWORD PTR _rect$[ebp+8]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN10@nk_fill_re
	movss	xmm0, DWORD PTR _rect$[ebp+8]
	movss	DWORD PTR tv137[ebp], xmm0
	jmp	SHORT $LN11@nk_fill_re
$LN10@nk_fill_re:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv137[ebp], xmm0
$LN11@nk_fill_re:
	cvttss2si eax, DWORD PTR tv137[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+12], ax

; 7447 :     cmd->h = (unsigned short)NK_MAX(0, rect.h);

	movss	xmm0, DWORD PTR _rect$[ebp+12]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN12@nk_fill_re
	movss	xmm0, DWORD PTR _rect$[ebp+12]
	movss	DWORD PTR tv141[ebp], xmm0
	jmp	SHORT $LN13@nk_fill_re
$LN12@nk_fill_re:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv141[ebp], xmm0
$LN13@nk_fill_re:
	cvttss2si eax, DWORD PTR tv141[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+14], ax

; 7448 :     cmd->left = left;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _left$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 7449 :     cmd->top = top;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _top$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 7450 :     cmd->right = right;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _right$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 7451 :     cmd->bottom = bottom;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _bottom$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN7@nk_fill_re:

; 7452 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_fill_rect_multi_color ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_fill_rect
_TEXT	SEGMENT
tv145 = -220						; size = 4
tv141 = -220						; size = 4
_clip$1 = -20						; size = 4
_cmd$ = -8						; size = 4
_b$ = 8							; size = 4
_rect$ = 12						; size = 16
_rounding$ = 28						; size = 4
_c$ = 32						; size = 4
_nk_fill_rect PROC					; COMDAT

; 7406 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7407 :     struct nk_command_rect_filled *cmd;
; 7408 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN9@nk_fill_re
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_fill_rect@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_fill_re:

; 7409 :     if (!b || c.a == 0 || rect.w == 0 || rect.h == 0) return;

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN5@nk_fill_re
	movzx	eax, BYTE PTR _c$[ebp+3]
	test	eax, eax
	je	SHORT $LN5@nk_fill_re
	movss	xmm0, DWORD PTR _rect$[ebp+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@nk_fill_re
	movss	xmm0, DWORD PTR _rect$[ebp+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@nk_fill_re
$LN5@nk_fill_re:
	jmp	$LN7@nk_fill_re
$LN6@nk_fill_re:

; 7410 :     if (b->use_clipping) {

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN3@nk_fill_re

; 7411 :         const struct nk_rect *clip = &b->clip;

	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 4
	mov	DWORD PTR _clip$1[ebp], eax

; 7412 :         if (!NK_INTERSECT(rect.x, rect.y, rect.w, rect.h,
; 7413 :             clip->x, clip->y, clip->w, clip->h)) return;

	movss	xmm0, DWORD PTR _rect$[ebp]
	addss	xmm0, DWORD PTR _rect$[ebp+8]
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm1, DWORD PTR [eax]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_fill_re
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR _rect$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_fill_re
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	addss	xmm0, DWORD PTR _rect$[ebp+12]
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_fill_re
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	xmm1, DWORD PTR _rect$[ebp+4]
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@nk_fill_re
$LN2@nk_fill_re:
	jmp	$LN7@nk_fill_re
$LN3@nk_fill_re:

; 7414 :     }
; 7415 : 
; 7416 :     cmd = (struct nk_command_rect_filled*)
; 7417 :         nk_command_buffer_push(b, NK_COMMAND_RECT_FILLED, sizeof(*cmd));

	push	24					; 00000018H
	push	5
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_nk_command_buffer_push
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmd$[ebp], eax

; 7418 :     if (!cmd) return;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN1@nk_fill_re
	jmp	$LN7@nk_fill_re
$LN1@nk_fill_re:

; 7419 :     cmd->rounding = (unsigned short)rounding;

	cvttss2si eax, DWORD PTR _rounding$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+8], ax

; 7420 :     cmd->x = (short)rect.x;

	cvttss2si eax, DWORD PTR _rect$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+10], ax

; 7421 :     cmd->y = (short)rect.y;

	cvttss2si eax, DWORD PTR _rect$[ebp+4]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+12], ax

; 7422 :     cmd->w = (unsigned short)NK_MAX(0, rect.w);

	movss	xmm0, DWORD PTR _rect$[ebp+8]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN10@nk_fill_re
	movss	xmm0, DWORD PTR _rect$[ebp+8]
	movss	DWORD PTR tv141[ebp], xmm0
	jmp	SHORT $LN11@nk_fill_re
$LN10@nk_fill_re:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv141[ebp], xmm0
$LN11@nk_fill_re:
	cvttss2si eax, DWORD PTR tv141[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+14], ax

; 7423 :     cmd->h = (unsigned short)NK_MAX(0, rect.h);

	movss	xmm0, DWORD PTR _rect$[ebp+12]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN12@nk_fill_re
	movss	xmm0, DWORD PTR _rect$[ebp+12]
	movss	DWORD PTR tv145[ebp], xmm0
	jmp	SHORT $LN13@nk_fill_re
$LN12@nk_fill_re:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv145[ebp], xmm0
$LN13@nk_fill_re:
	cvttss2si eax, DWORD PTR tv145[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+16], ax

; 7424 :     cmd->color = c;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+18], ecx
$LN7@nk_fill_re:

; 7425 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_fill_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_stroke_polygon
_TEXT	SEGMENT
_cmd$ = -32						; size = 4
_size$ = -20						; size = 4
_i$ = -8						; size = 4
_b$ = 8							; size = 4
_points$ = 12						; size = 4
_point_count$ = 16					; size = 4
_line_thickness$ = 20					; size = 4
_col$ = 24						; size = 4
_nk_stroke_polygon PROC					; COMDAT

; 7594 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7595 :     int i;
; 7596 :     nk_size size = 0;

	mov	DWORD PTR _size$[ebp], 0

; 7597 :     struct nk_command_polygon *cmd;
; 7598 : 
; 7599 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN9@nk_stroke_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_stroke_polygon@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_stroke_:

; 7600 :     if (!b || col.a == 0 || line_thickness <= 0) return;

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN5@nk_stroke_
	movzx	eax, BYTE PTR _col$[ebp+3]
	test	eax, eax
	je	SHORT $LN5@nk_stroke_
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _line_thickness$[ebp]
	jb	SHORT $LN6@nk_stroke_
$LN5@nk_stroke_:
	jmp	$LN1@nk_stroke_
$LN6@nk_stroke_:

; 7601 :     size = sizeof(*cmd) + sizeof(short) * 2 * (nk_size)point_count;

	mov	eax, DWORD PTR _point_count$[ebp]
	lea	ecx, DWORD PTR [eax*4+20]
	mov	DWORD PTR _size$[ebp], ecx

; 7602 :     cmd = (struct nk_command_polygon*) nk_command_buffer_push(b, NK_COMMAND_POLYGON, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_nk_command_buffer_push
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmd$[ebp], eax

; 7603 :     if (!cmd) return;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN4@nk_stroke_
	jmp	SHORT $LN1@nk_stroke_
$LN4@nk_stroke_:

; 7604 :     cmd->color = col;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 7605 :     cmd->line_thickness = (unsigned short)line_thickness;

	cvttss2si eax, DWORD PTR _line_thickness$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+12], ax

; 7606 :     cmd->point_count = (unsigned short)point_count;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	cx, WORD PTR _point_count$[ebp]
	mov	WORD PTR [eax+14], cx

; 7607 :     for (i = 0; i < point_count; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_stroke_
$LN2@nk_stroke_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_stroke_:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _point_count$[ebp]
	jge	SHORT $LN1@nk_stroke_

; 7608 :         cmd->points[i].x = (short)points[i*2];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _points$[ebp]
	cvttss2si edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+eax*4+16], dx

; 7609 :         cmd->points[i].y = (short)points[i*2+1];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _points$[ebp]
	cvttss2si edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+eax*4+18], dx

; 7610 :     }

	jmp	SHORT $LN2@nk_stroke_
$LN1@nk_stroke_:

; 7611 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_stroke_polygon ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_stroke_polyline
_TEXT	SEGMENT
_cmd$ = -32						; size = 4
_size$ = -20						; size = 4
_i$ = -8						; size = 4
_b$ = 8							; size = 4
_points$ = 12						; size = 4
_point_count$ = 16					; size = 4
_line_thickness$ = 20					; size = 4
_col$ = 24						; size = 4
_nk_stroke_polyline PROC				; COMDAT

; 7638 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7639 :     int i;
; 7640 :     nk_size size = 0;

	mov	DWORD PTR _size$[ebp], 0

; 7641 :     struct nk_command_polyline *cmd;
; 7642 : 
; 7643 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN9@nk_stroke_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_stroke_polyline@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_stroke_:

; 7644 :     if (!b || col.a == 0 || line_thickness <= 0) return;

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN5@nk_stroke_
	movzx	eax, BYTE PTR _col$[ebp+3]
	test	eax, eax
	je	SHORT $LN5@nk_stroke_
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _line_thickness$[ebp]
	jb	SHORT $LN6@nk_stroke_
$LN5@nk_stroke_:
	jmp	$LN1@nk_stroke_
$LN6@nk_stroke_:

; 7645 :     size = sizeof(*cmd) + sizeof(short) * 2 * (nk_size)point_count;

	mov	eax, DWORD PTR _point_count$[ebp]
	lea	ecx, DWORD PTR [eax*4+20]
	mov	DWORD PTR _size$[ebp], ecx

; 7646 :     cmd = (struct nk_command_polyline*) nk_command_buffer_push(b, NK_COMMAND_POLYLINE, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_nk_command_buffer_push
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmd$[ebp], eax

; 7647 :     if (!cmd) return;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN4@nk_stroke_
	jmp	SHORT $LN1@nk_stroke_
$LN4@nk_stroke_:

; 7648 :     cmd->color = col;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 7649 :     cmd->point_count = (unsigned short)point_count;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	cx, WORD PTR _point_count$[ebp]
	mov	WORD PTR [eax+14], cx

; 7650 :     cmd->line_thickness = (unsigned short)line_thickness;

	cvttss2si eax, DWORD PTR _line_thickness$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+12], ax

; 7651 :     for (i = 0; i < point_count; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_stroke_
$LN2@nk_stroke_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_stroke_:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _point_count$[ebp]
	jge	SHORT $LN1@nk_stroke_

; 7652 :         cmd->points[i].x = (short)points[i*2];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _points$[ebp]
	cvttss2si edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+eax*4+16], dx

; 7653 :         cmd->points[i].y = (short)points[i*2+1];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _points$[ebp]
	cvttss2si edx, DWORD PTR [ecx+eax*4+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+eax*4+18], dx

; 7654 :     }

	jmp	SHORT $LN2@nk_stroke_
$LN1@nk_stroke_:

; 7655 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_stroke_polyline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_stroke_triangle
_TEXT	SEGMENT
_clip$1 = -20						; size = 4
_cmd$ = -8						; size = 4
_b$ = 8							; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_x2$ = 28						; size = 4
_y2$ = 32						; size = 4
_line_thickness$ = 36					; size = 4
_c$ = 40						; size = 4
_nk_stroke_triangle PROC				; COMDAT

; 7538 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7539 :     struct nk_command_triangle *cmd;
; 7540 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN14@nk_stroke_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_stroke_triangle@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_stroke_:

; 7541 :     if (!b || c.a == 0 || line_thickness <= 0) return;

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN10@nk_stroke_
	movzx	eax, BYTE PTR _c$[ebp+3]
	test	eax, eax
	je	SHORT $LN10@nk_stroke_
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _line_thickness$[ebp]
	jb	SHORT $LN11@nk_stroke_
$LN10@nk_stroke_:
	jmp	$LN12@nk_stroke_
$LN11@nk_stroke_:

; 7542 :     if (b->use_clipping) {

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	$LN8@nk_stroke_

; 7543 :         const struct nk_rect *clip = &b->clip;

	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 4
	mov	DWORD PTR _clip$1[ebp], eax

; 7544 :         if (!NK_INBOX(x0, y0, clip->x, clip->y, clip->w, clip->h) &&
; 7545 :             !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
; 7546 :             !NK_INBOX(x2, y2, clip->x, clip->y, clip->w, clip->h))

	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR _x0$[ebp]
	comiss	xmm0, DWORD PTR [eax]
	jb	SHORT $LN6@nk_stroke_
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	comiss	xmm0, DWORD PTR _x0$[ebp]
	jbe	SHORT $LN6@nk_stroke_
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR _y0$[ebp]
	comiss	xmm0, DWORD PTR [eax+4]
	jb	SHORT $LN6@nk_stroke_
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+12]
	comiss	xmm0, DWORD PTR _y0$[ebp]
	ja	$LN8@nk_stroke_
$LN6@nk_stroke_:
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR _x1$[ebp]
	comiss	xmm0, DWORD PTR [eax]
	jb	SHORT $LN4@nk_stroke_
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	comiss	xmm0, DWORD PTR _x1$[ebp]
	jbe	SHORT $LN4@nk_stroke_
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR _y1$[ebp]
	comiss	xmm0, DWORD PTR [eax+4]
	jb	SHORT $LN4@nk_stroke_
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+12]
	comiss	xmm0, DWORD PTR _y1$[ebp]
	ja	SHORT $LN8@nk_stroke_
$LN4@nk_stroke_:
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR _x2$[ebp]
	comiss	xmm0, DWORD PTR [eax]
	jb	SHORT $LN2@nk_stroke_
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	comiss	xmm0, DWORD PTR _x2$[ebp]
	jbe	SHORT $LN2@nk_stroke_
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR _y2$[ebp]
	comiss	xmm0, DWORD PTR [eax+4]
	jb	SHORT $LN2@nk_stroke_
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+12]
	comiss	xmm0, DWORD PTR _y2$[ebp]
	ja	SHORT $LN8@nk_stroke_
$LN2@nk_stroke_:

; 7547 :             return;

	jmp	SHORT $LN12@nk_stroke_
$LN8@nk_stroke_:

; 7548 :     }
; 7549 : 
; 7550 :     cmd = (struct nk_command_triangle*)
; 7551 :         nk_command_buffer_push(b, NK_COMMAND_TRIANGLE, sizeof(*cmd));

	push	28					; 0000001cH
	push	11					; 0000000bH
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_nk_command_buffer_push
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmd$[ebp], eax

; 7552 :     if (!cmd) return;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN1@nk_stroke_
	jmp	SHORT $LN12@nk_stroke_
$LN1@nk_stroke_:

; 7553 :     cmd->line_thickness = (unsigned short)line_thickness;

	cvttss2si eax, DWORD PTR _line_thickness$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+8], ax

; 7554 :     cmd->a.x = (short)x0;

	cvttss2si eax, DWORD PTR _x0$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+10], ax

; 7555 :     cmd->a.y = (short)y0;

	cvttss2si eax, DWORD PTR _y0$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+12], ax

; 7556 :     cmd->b.x = (short)x1;

	cvttss2si eax, DWORD PTR _x1$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+14], ax

; 7557 :     cmd->b.y = (short)y1;

	cvttss2si eax, DWORD PTR _y1$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+16], ax

; 7558 :     cmd->c.x = (short)x2;

	cvttss2si eax, DWORD PTR _x2$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+18], ax

; 7559 :     cmd->c.y = (short)y2;

	cvttss2si eax, DWORD PTR _y2$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+20], ax

; 7560 :     cmd->color = c;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+22], ecx
$LN12@nk_stroke_:

; 7561 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_stroke_triangle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_stroke_arc
_TEXT	SEGMENT
_cmd$ = -8						; size = 4
_b$ = 8							; size = 4
_cx$ = 12						; size = 4
_cy$ = 16						; size = 4
_radius$ = 20						; size = 4
_a_min$ = 24						; size = 4
_a_max$ = 28						; size = 4
_line_thickness$ = 32					; size = 4
_c$ = 36						; size = 4
_nk_stroke_arc PROC					; COMDAT

; 7502 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7503 :     struct nk_command_arc *cmd;
; 7504 :     if (!b || c.a == 0 || line_thickness <= 0) return;

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN2@nk_stroke_
	movzx	eax, BYTE PTR _c$[ebp+3]
	test	eax, eax
	je	SHORT $LN2@nk_stroke_
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _line_thickness$[ebp]
	jb	SHORT $LN3@nk_stroke_
$LN2@nk_stroke_:
	jmp	$LN4@nk_stroke_
$LN3@nk_stroke_:

; 7505 :     cmd = (struct nk_command_arc*)
; 7506 :         nk_command_buffer_push(b, NK_COMMAND_ARC, sizeof(*cmd));

	push	28					; 0000001cH
	push	9
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_nk_command_buffer_push
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmd$[ebp], eax

; 7507 :     if (!cmd) return;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN1@nk_stroke_
	jmp	SHORT $LN4@nk_stroke_
$LN1@nk_stroke_:

; 7508 :     cmd->line_thickness = (unsigned short)line_thickness;

	cvttss2si eax, DWORD PTR _line_thickness$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+14], ax

; 7509 :     cmd->cx = (short)cx;

	cvttss2si eax, DWORD PTR _cx$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+8], ax

; 7510 :     cmd->cy = (short)cy;

	cvttss2si eax, DWORD PTR _cy$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+10], ax

; 7511 :     cmd->r = (unsigned short)radius;

	cvttss2si eax, DWORD PTR _radius$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+12], ax

; 7512 :     cmd->a[0] = a_min;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cmd$[ebp]
	movss	xmm0, DWORD PTR _a_min$[ebp]
	movss	DWORD PTR [edx+ecx+16], xmm0

; 7513 :     cmd->a[1] = a_max;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _cmd$[ebp]
	movss	xmm0, DWORD PTR _a_max$[ebp]
	movss	DWORD PTR [ecx+eax+16], xmm0

; 7514 :     cmd->color = c;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN4@nk_stroke_:

; 7515 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_stroke_arc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_stroke_circle
_TEXT	SEGMENT
tv138 = -220						; size = 4
tv134 = -220						; size = 4
_clip$1 = -20						; size = 4
_cmd$ = -8						; size = 4
_b$ = 8							; size = 4
_r$ = 12						; size = 16
_line_thickness$ = 28					; size = 4
_c$ = 32						; size = 4
_nk_stroke_circle PROC					; COMDAT

; 7457 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7458 :     struct nk_command_circle *cmd;
; 7459 :     if (!b || r.w == 0 || r.h == 0 || line_thickness <= 0) return;

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN5@nk_stroke_
	movss	xmm0, DWORD PTR _r$[ebp+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@nk_stroke_
	movss	xmm0, DWORD PTR _r$[ebp+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@nk_stroke_
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _line_thickness$[ebp]
	jb	SHORT $LN6@nk_stroke_
$LN5@nk_stroke_:
	jmp	$LN7@nk_stroke_
$LN6@nk_stroke_:

; 7460 :     if (b->use_clipping) {

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN3@nk_stroke_

; 7461 :         const struct nk_rect *clip = &b->clip;

	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 4
	mov	DWORD PTR _clip$1[ebp], eax

; 7462 :         if (!NK_INTERSECT(r.x, r.y, r.w, r.h, clip->x, clip->y, clip->w, clip->h))

	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp+8]
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm1, DWORD PTR [eax]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_stroke_
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR _r$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_stroke_
	movss	xmm0, DWORD PTR _r$[ebp+4]
	addss	xmm0, DWORD PTR _r$[ebp+12]
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_stroke_
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	xmm1, DWORD PTR _r$[ebp+4]
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@nk_stroke_
$LN2@nk_stroke_:

; 7463 :             return;

	jmp	$LN7@nk_stroke_
$LN3@nk_stroke_:

; 7464 :     }
; 7465 : 
; 7466 :     cmd = (struct nk_command_circle*)
; 7467 :         nk_command_buffer_push(b, NK_COMMAND_CIRCLE, sizeof(*cmd));

	push	24					; 00000018H
	push	7
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_nk_command_buffer_push
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmd$[ebp], eax

; 7468 :     if (!cmd) return;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN1@nk_stroke_
	jmp	$LN7@nk_stroke_
$LN1@nk_stroke_:

; 7469 :     cmd->line_thickness = (unsigned short)line_thickness;

	cvttss2si eax, DWORD PTR _line_thickness$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+12], ax

; 7470 :     cmd->x = (short)r.x;

	cvttss2si eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+8], ax

; 7471 :     cmd->y = (short)r.y;

	cvttss2si eax, DWORD PTR _r$[ebp+4]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+10], ax

; 7472 :     cmd->w = (unsigned short)NK_MAX(r.w, 0);

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _r$[ebp+8]
	jbe	SHORT $LN9@nk_stroke_
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv134[ebp], xmm0
	jmp	SHORT $LN10@nk_stroke_
$LN9@nk_stroke_:
	movss	xmm0, DWORD PTR _r$[ebp+8]
	movss	DWORD PTR tv134[ebp], xmm0
$LN10@nk_stroke_:
	cvttss2si eax, DWORD PTR tv134[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+14], ax

; 7473 :     cmd->h = (unsigned short)NK_MAX(r.h, 0);

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _r$[ebp+12]
	jbe	SHORT $LN11@nk_stroke_
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv138[ebp], xmm0
	jmp	SHORT $LN12@nk_stroke_
$LN11@nk_stroke_:
	movss	xmm0, DWORD PTR _r$[ebp+12]
	movss	DWORD PTR tv138[ebp], xmm0
$LN12@nk_stroke_:
	cvttss2si eax, DWORD PTR tv138[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+16], ax

; 7474 :     cmd->color = c;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+18], ecx
$LN7@nk_stroke_:

; 7475 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_stroke_circle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_stroke_rect
_TEXT	SEGMENT
tv148 = -220						; size = 4
tv144 = -220						; size = 4
_clip$1 = -20						; size = 4
_cmd$ = -8						; size = 4
_b$ = 8							; size = 4
_rect$ = 12						; size = 16
_rounding$ = 28						; size = 4
_line_thickness$ = 32					; size = 4
_c$ = 36						; size = 4
_nk_stroke_rect PROC					; COMDAT

; 7382 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7383 :     struct nk_command_rect *cmd;
; 7384 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN9@nk_stroke_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_stroke_rect@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_stroke_:

; 7385 :     if (!b || c.a == 0 || rect.w == 0 || rect.h == 0 || line_thickness <= 0) return;

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN5@nk_stroke_
	movzx	eax, BYTE PTR _c$[ebp+3]
	test	eax, eax
	je	SHORT $LN5@nk_stroke_
	movss	xmm0, DWORD PTR _rect$[ebp+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@nk_stroke_
	movss	xmm0, DWORD PTR _rect$[ebp+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@nk_stroke_
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _line_thickness$[ebp]
	jb	SHORT $LN6@nk_stroke_
$LN5@nk_stroke_:
	jmp	$LN7@nk_stroke_
$LN6@nk_stroke_:

; 7386 :     if (b->use_clipping) {

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN3@nk_stroke_

; 7387 :         const struct nk_rect *clip = &b->clip;

	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 4
	mov	DWORD PTR _clip$1[ebp], eax

; 7388 :         if (!NK_INTERSECT(rect.x, rect.y, rect.w, rect.h,
; 7389 :             clip->x, clip->y, clip->w, clip->h)) return;

	movss	xmm0, DWORD PTR _rect$[ebp]
	addss	xmm0, DWORD PTR _rect$[ebp+8]
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm1, DWORD PTR [eax]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_stroke_
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR _rect$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_stroke_
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	addss	xmm0, DWORD PTR _rect$[ebp+12]
	mov	eax, DWORD PTR _clip$1[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@nk_stroke_
	mov	eax, DWORD PTR _clip$1[ebp]
	mov	ecx, DWORD PTR _clip$1[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	xmm1, DWORD PTR _rect$[ebp+4]
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@nk_stroke_
$LN2@nk_stroke_:
	jmp	$LN7@nk_stroke_
$LN3@nk_stroke_:

; 7390 :     }
; 7391 :     cmd = (struct nk_command_rect*)
; 7392 :         nk_command_buffer_push(b, NK_COMMAND_RECT, sizeof(*cmd));

	push	24					; 00000018H
	push	4
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_nk_command_buffer_push
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmd$[ebp], eax

; 7393 :     if (!cmd) return;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN1@nk_stroke_
	jmp	$LN7@nk_stroke_
$LN1@nk_stroke_:

; 7394 :     cmd->rounding = (unsigned short)rounding;

	cvttss2si eax, DWORD PTR _rounding$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+8], ax

; 7395 :     cmd->line_thickness = (unsigned short)line_thickness;

	cvttss2si eax, DWORD PTR _line_thickness$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+10], ax

; 7396 :     cmd->x = (short)rect.x;

	cvttss2si eax, DWORD PTR _rect$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+12], ax

; 7397 :     cmd->y = (short)rect.y;

	cvttss2si eax, DWORD PTR _rect$[ebp+4]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+14], ax

; 7398 :     cmd->w = (unsigned short)NK_MAX(0, rect.w);

	movss	xmm0, DWORD PTR _rect$[ebp+8]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN10@nk_stroke_
	movss	xmm0, DWORD PTR _rect$[ebp+8]
	movss	DWORD PTR tv144[ebp], xmm0
	jmp	SHORT $LN11@nk_stroke_
$LN10@nk_stroke_:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv144[ebp], xmm0
$LN11@nk_stroke_:
	cvttss2si eax, DWORD PTR tv144[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+16], ax

; 7399 :     cmd->h = (unsigned short)NK_MAX(0, rect.h);

	movss	xmm0, DWORD PTR _rect$[ebp+12]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN12@nk_stroke_
	movss	xmm0, DWORD PTR _rect$[ebp+12]
	movss	DWORD PTR tv148[ebp], xmm0
	jmp	SHORT $LN13@nk_stroke_
$LN12@nk_stroke_:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv148[ebp], xmm0
$LN13@nk_stroke_:
	cvttss2si eax, DWORD PTR tv148[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+18], ax

; 7400 :     cmd->color = c;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN7@nk_stroke_:

; 7401 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_stroke_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_stroke_curve
_TEXT	SEGMENT
_cmd$ = -8						; size = 4
_b$ = 8							; size = 4
_ax$ = 12						; size = 4
_ay$ = 16						; size = 4
_ctrl0x$ = 20						; size = 4
_ctrl0y$ = 24						; size = 4
_ctrl1x$ = 28						; size = 4
_ctrl1y$ = 32						; size = 4
_bx$ = 36						; size = 4
_by$ = 40						; size = 4
_line_thickness$ = 44					; size = 4
_col$ = 48						; size = 4
_nk_stroke_curve PROC					; COMDAT

; 7359 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7360 :     struct nk_command_curve *cmd;
; 7361 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN6@nk_stroke_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_stroke_curve@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_stroke_:

; 7362 :     if (!b || col.a == 0 || line_thickness <= 0) return;

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN2@nk_stroke_
	movzx	eax, BYTE PTR _col$[ebp+3]
	test	eax, eax
	je	SHORT $LN2@nk_stroke_
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _line_thickness$[ebp]
	jb	SHORT $LN3@nk_stroke_
$LN2@nk_stroke_:
	jmp	$LN4@nk_stroke_
$LN3@nk_stroke_:

; 7363 : 
; 7364 :     cmd = (struct nk_command_curve*)
; 7365 :         nk_command_buffer_push(b, NK_COMMAND_CURVE, sizeof(*cmd));

	push	32					; 00000020H
	push	3
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_nk_command_buffer_push
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmd$[ebp], eax

; 7366 :     if (!cmd) return;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN1@nk_stroke_
	jmp	$LN4@nk_stroke_
$LN1@nk_stroke_:

; 7367 :     cmd->line_thickness = (unsigned short)line_thickness;

	cvttss2si eax, DWORD PTR _line_thickness$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+8], ax

; 7368 :     cmd->begin.x = (short)ax;

	cvttss2si eax, DWORD PTR _ax$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+10], ax

; 7369 :     cmd->begin.y = (short)ay;

	cvttss2si eax, DWORD PTR _ay$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+12], ax

; 7370 :     cmd->ctrl[0].x = (short)ctrl0x;

	cvttss2si eax, DWORD PTR _ctrl0x$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+edx+18], ax

; 7371 :     cmd->ctrl[0].y = (short)ctrl0y;

	cvttss2si eax, DWORD PTR _ctrl0y$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+edx+20], ax

; 7372 :     cmd->ctrl[1].x = (short)ctrl1x;

	cvttss2si eax, DWORD PTR _ctrl1x$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [edx+ecx+18], ax

; 7373 :     cmd->ctrl[1].y = (short)ctrl1y;

	cvttss2si eax, DWORD PTR _ctrl1y$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [edx+ecx+20], ax

; 7374 :     cmd->end.x = (short)bx;

	cvttss2si eax, DWORD PTR _bx$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+14], ax

; 7375 :     cmd->end.y = (short)by;

	cvttss2si eax, DWORD PTR _by$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+16], ax

; 7376 :     cmd->color = col;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax+26], ecx
$LN4@nk_stroke_:

; 7377 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_stroke_curve ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_stroke_line
_TEXT	SEGMENT
_cmd$ = -8						; size = 4
_b$ = 8							; size = 4
_x0$ = 12						; size = 4
_y0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_line_thickness$ = 28					; size = 4
_c$ = 32						; size = 4
_nk_stroke_line PROC					; COMDAT

; 7340 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7341 :     struct nk_command_line *cmd;
; 7342 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN6@nk_stroke_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_stroke_line@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_stroke_:

; 7343 :     if (!b || line_thickness <= 0) return;

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN2@nk_stroke_
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _line_thickness$[ebp]
	jb	SHORT $LN3@nk_stroke_
$LN2@nk_stroke_:
	jmp	SHORT $LN4@nk_stroke_
$LN3@nk_stroke_:

; 7344 :     cmd = (struct nk_command_line*)
; 7345 :         nk_command_buffer_push(b, NK_COMMAND_LINE, sizeof(*cmd));

	push	24					; 00000018H
	push	2
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_nk_command_buffer_push
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmd$[ebp], eax

; 7346 :     if (!cmd) return;

	cmp	DWORD PTR _cmd$[ebp], 0
	jne	SHORT $LN1@nk_stroke_
	jmp	SHORT $LN4@nk_stroke_
$LN1@nk_stroke_:

; 7347 :     cmd->line_thickness = (unsigned short)line_thickness;

	cvttss2si eax, DWORD PTR _line_thickness$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+8], ax

; 7348 :     cmd->begin.x = (short)x0;

	cvttss2si eax, DWORD PTR _x0$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+10], ax

; 7349 :     cmd->begin.y = (short)y0;

	cvttss2si eax, DWORD PTR _y0$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+12], ax

; 7350 :     cmd->end.x = (short)x1;

	cvttss2si eax, DWORD PTR _x1$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+14], ax

; 7351 :     cmd->end.y = (short)y1;

	cvttss2si eax, DWORD PTR _y1$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [ecx+16], ax

; 7352 :     cmd->color = c;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+18], ecx
$LN4@nk_stroke_:

; 7353 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_stroke_line ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_redo
_TEXT	SEGMENT
_i$1 = -56						; size = 4
_r$ = -44						; size = 12
_u$ = -24						; size = 4
_s$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_nk_textedit_redo PROC					; COMDAT

; 13721: {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 13722:     struct nk_text_undo_state *s = &state->undo;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 112				; 00000070H
	mov	DWORD PTR _s$[ebp], eax

; 13723:     struct nk_text_undo_record *u, r;
; 13724:     if (s->redo_point == NK_TEXTEDIT_UNDOSTATECOUNT)

	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, WORD PTR [eax+5186]
	cmp	ecx, 99					; 00000063H
	jne	SHORT $LN8@nk_textedi

; 13725:         return;

	jmp	$LN9@nk_textedi
$LN8@nk_textedi:

; 13726: 
; 13727:     /* we need to do two things: apply the redo record, and create an undo record */
; 13728:     u = &s->undo_rec[s->undo_point];

	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, WORD PTR [eax+5184]
	imul	edx, ecx, 12
	add	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR _u$[ebp], edx

; 13729:     r = s->undo_rec[s->redo_point];

	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, WORD PTR [eax+5186]
	imul	edx, ecx, 12
	add	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _r$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _r$[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _r$[ebp+8], edx

; 13730: 
; 13731:     /* we KNOW there must be room for the undo record, because the redo record
; 13732:     was derived from an undo record */
; 13733:     u->delete_length = r.insert_length;

	mov	eax, DWORD PTR _u$[ebp]
	mov	cx, WORD PTR _r$[ebp+4]
	mov	WORD PTR [eax+6], cx

; 13734:     u->insert_length = r.delete_length;

	mov	eax, DWORD PTR _u$[ebp]
	mov	cx, WORD PTR _r$[ebp+6]
	mov	WORD PTR [eax+4], cx

; 13735:     u->where = r.where;

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx

; 13736:     u->char_storage = -1;

	or	eax, -1
	mov	ecx, DWORD PTR _u$[ebp]
	mov	WORD PTR [ecx+8], ax

; 13737: 
; 13738:     if (r.delete_length) {

	movsx	eax, WORD PTR _r$[ebp+6]
	test	eax, eax
	je	$LN7@nk_textedi

; 13739:         /* the redo record requires us to delete characters, so the undo record
; 13740:         needs to store the characters */
; 13741:         if (s->undo_char_point + u->insert_length > s->redo_char_point) {

	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, WORD PTR [eax+5188]
	mov	edx, DWORD PTR _u$[ebp]
	movsx	eax, WORD PTR [edx+4]
	add	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	movsx	eax, WORD PTR [edx+5190]
	cmp	ecx, eax
	jle	SHORT $LN6@nk_textedi

; 13742:             u->insert_length = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _u$[ebp]
	mov	WORD PTR [ecx+4], ax

; 13743:             u->delete_length = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _u$[ebp]
	mov	WORD PTR [ecx+6], ax

; 13744:         } else {

	jmp	SHORT $LN5@nk_textedi
$LN6@nk_textedi:

; 13745:             int i;
; 13746:             u->char_storage = s->undo_char_point;

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+5188]
	mov	WORD PTR [eax+8], dx

; 13747:             s->undo_char_point = (short)(s->undo_char_point + u->insert_length);

	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, WORD PTR [eax+5188]
	mov	edx, DWORD PTR _u$[ebp]
	movsx	eax, WORD PTR [edx+4]
	add	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5188], cx

; 13748: 
; 13749:             /* now save the characters */
; 13750:             for (i=0; i < u->insert_length; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@nk_textedi
$LN3@nk_textedi:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@nk_textedi:
	mov	eax, DWORD PTR _u$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	cmp	DWORD PTR _i$1[ebp], ecx
	jge	SHORT $LN5@nk_textedi

; 13751:                 s->undo_char[u->char_storage + i] =
; 13752:                     nk_str_rune_at(&state->string, u->where + i);

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_nk_str_rune_at
	add	esp, 8
	mov	ecx, DWORD PTR _u$[ebp]
	movsx	edx, WORD PTR [ecx+8]
	add	edx, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+edx*4+1188], eax

; 13753:             }

	jmp	SHORT $LN3@nk_textedi
$LN5@nk_textedi:

; 13754:         }
; 13755:         nk_str_delete_runes(&state->string, r.where, r.delete_length);

	movsx	eax, WORD PTR _r$[ebp+6]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_nk_str_delete_runes
	add	esp, 12					; 0000000cH
$LN7@nk_textedi:

; 13756:     }
; 13757: 
; 13758:     if (r.insert_length) {

	movsx	eax, WORD PTR _r$[ebp+4]
	test	eax, eax
	je	SHORT $LN1@nk_textedi

; 13759:         /* easy case: need to insert n characters */
; 13760:         nk_str_insert_text_runes(&state->string, r.where,
; 13761:             &s->undo_char[r.char_storage], r.insert_length);

	movsx	eax, WORD PTR _r$[ebp+4]
	push	eax
	movsx	ecx, WORD PTR _r$[ebp+8]
	mov	edx, DWORD PTR _s$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+1188]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_nk_str_insert_text_runes
	add	esp, 16					; 00000010H
$LN1@nk_textedi:

; 13762:     }
; 13763:     state->cursor = r.where + r.insert_length;

	movsx	eax, WORD PTR _r$[ebp+4]
	add	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+88], eax

; 13764: 
; 13765:     s->undo_point++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax+5184]
	add	cx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5184], cx

; 13766:     s->redo_point++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax+5186]
	add	cx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5186], cx
$LN9@nk_textedi:

; 13767: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@nk_textedi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@nk_textedi:
	DD	1
	DD	$LN12@nk_textedi
$LN12@nk_textedi:
	DD	-44					; ffffffd4H
	DD	12					; 0000000cH
	DD	$LN11@nk_textedi
$LN11@nk_textedi:
	DB	114					; 00000072H
	DB	0
_nk_textedit_redo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_undo
_TEXT	SEGMENT
_i$1 = -56						; size = 4
_r$ = -44						; size = 4
_u$ = -32						; size = 12
_s$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_nk_textedit_undo PROC					; COMDAT

; 13653: {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 13654:     struct nk_text_undo_state *s = &state->undo;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 112				; 00000070H
	mov	DWORD PTR _s$[ebp], eax

; 13655:     struct nk_text_undo_record u, *r;
; 13656:     if (s->undo_point == 0)

	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, WORD PTR [eax+5184]
	test	ecx, ecx
	jne	SHORT $LN11@nk_textedi

; 13657:         return;

	jmp	$LN12@nk_textedi
$LN11@nk_textedi:

; 13658: 
; 13659:     /* we need to do two things: apply the undo record, and create a redo record */
; 13660:     u = s->undo_rec[s->undo_point-1];

	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, WORD PTR [eax+5184]
	sub	ecx, 1
	imul	edx, ecx, 12
	add	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _u$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _u$[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _u$[ebp+8], edx

; 13661:     r = &s->undo_rec[s->redo_point-1];

	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, WORD PTR [eax+5186]
	sub	ecx, 1
	imul	edx, ecx, 12
	add	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR _r$[ebp], edx

; 13662:     r->char_storage = -1;

	or	eax, -1
	mov	ecx, DWORD PTR _r$[ebp]
	mov	WORD PTR [ecx+8], ax

; 13663: 
; 13664:     r->insert_length = u.delete_length;

	mov	eax, DWORD PTR _r$[ebp]
	mov	cx, WORD PTR _u$[ebp+6]
	mov	WORD PTR [eax+4], cx

; 13665:     r->delete_length = u.insert_length;

	mov	eax, DWORD PTR _r$[ebp]
	mov	cx, WORD PTR _u$[ebp+4]
	mov	WORD PTR [eax+6], cx

; 13666:     r->where = u.where;

	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	DWORD PTR [eax], ecx

; 13667: 
; 13668:     if (u.delete_length)

	movsx	eax, WORD PTR _u$[ebp+6]
	test	eax, eax
	je	$LN10@nk_textedi

; 13669:     {
; 13670:        /*   if the undo record says to delete characters, then the redo record will
; 13671:             need to re-insert the characters that get deleted, so we need to store
; 13672:             them.
; 13673:             there are three cases:
; 13674:                 - there's enough room to store the characters
; 13675:                 - characters stored for *redoing* don't leave room for redo
; 13676:                 - characters stored for *undoing* don't leave room for redo
; 13677:             if the last is true, we have to bail */
; 13678:         if (s->undo_char_point + u.delete_length >= NK_TEXTEDIT_UNDOCHARCOUNT) {

	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, WORD PTR [eax+5188]
	movsx	edx, WORD PTR _u$[ebp+6]
	add	ecx, edx
	cmp	ecx, 999				; 000003e7H
	jl	SHORT $LN7@nk_textedi

; 13679:             /* the undo records take up too much character space; there's no space
; 13680:             * to store the redo characters */
; 13681:             r->insert_length = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _r$[ebp]
	mov	WORD PTR [ecx+4], ax

; 13682:         } else {

	jmp	$LN8@nk_textedi
$LN7@nk_textedi:

; 13683:             int i;
; 13684:             /* there's definitely room to store the characters eventually */
; 13685:             while (s->undo_char_point + u.delete_length > s->redo_char_point) {

	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, WORD PTR [eax+5188]
	movsx	edx, WORD PTR _u$[ebp+6]
	add	ecx, edx
	mov	eax, DWORD PTR _s$[ebp]
	movsx	edx, WORD PTR [eax+5190]
	cmp	ecx, edx
	jle	SHORT $LN6@nk_textedi

; 13686:                 /* there's currently not enough room, so discard a redo record */
; 13687:                 nk_textedit_discard_redo(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_nk_textedit_discard_redo
	add	esp, 4

; 13688:                 /* should never happen: */
; 13689:                 if (s->redo_point == NK_TEXTEDIT_UNDOSTATECOUNT)

	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, WORD PTR [eax+5186]
	cmp	ecx, 99					; 00000063H
	jne	SHORT $LN5@nk_textedi

; 13690:                     return;

	jmp	$LN12@nk_textedi
$LN5@nk_textedi:

; 13691:             }

	jmp	SHORT $LN7@nk_textedi
$LN6@nk_textedi:

; 13692: 
; 13693:             r = &s->undo_rec[s->redo_point-1];

	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, WORD PTR [eax+5186]
	sub	ecx, 1
	imul	edx, ecx, 12
	add	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR _r$[ebp], edx

; 13694:             r->char_storage = (short)(s->redo_char_point - u.delete_length);

	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, WORD PTR [eax+5190]
	movsx	edx, WORD PTR _u$[ebp+6]
	sub	ecx, edx
	mov	eax, DWORD PTR _r$[ebp]
	mov	WORD PTR [eax+8], cx

; 13695:             s->redo_char_point = (short)(s->redo_char_point -  u.delete_length);

	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, WORD PTR [eax+5190]
	movsx	edx, WORD PTR _u$[ebp+6]
	sub	ecx, edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	WORD PTR [eax+5190], cx

; 13696: 
; 13697:             /* now save the characters */
; 13698:             for (i=0; i < u.delete_length; ++i)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@nk_textedi
$LN3@nk_textedi:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@nk_textedi:
	movsx	eax, WORD PTR _u$[ebp+6]
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN8@nk_textedi

; 13699:                 s->undo_char[r->char_storage + i] =
; 13700:                     nk_str_rune_at(&state->string, u.where + i);

	mov	eax, DWORD PTR _u$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_nk_str_rune_at
	add	esp, 8
	mov	edx, DWORD PTR _r$[ebp]
	movsx	ecx, WORD PTR [edx+8]
	add	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+ecx*4+1188], eax
	jmp	SHORT $LN3@nk_textedi
$LN8@nk_textedi:

; 13701:         }
; 13702:         /* now we can carry out the deletion */
; 13703:         nk_str_delete_runes(&state->string, u.where, u.delete_length);

	movsx	eax, WORD PTR _u$[ebp+6]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_nk_str_delete_runes
	add	esp, 12					; 0000000cH
$LN10@nk_textedi:

; 13704:     }
; 13705: 
; 13706:     /* check type of recorded action: */
; 13707:     if (u.insert_length) {

	movsx	eax, WORD PTR _u$[ebp+4]
	test	eax, eax
	je	SHORT $LN1@nk_textedi

; 13708:         /* easy case: was a deletion, so we need to insert n characters */
; 13709:         nk_str_insert_text_runes(&state->string, u.where,
; 13710:             &s->undo_char[u.char_storage], u.insert_length);

	movsx	eax, WORD PTR _u$[ebp+4]
	push	eax
	movsx	ecx, WORD PTR _u$[ebp+8]
	mov	edx, DWORD PTR _s$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+1188]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_nk_str_insert_text_runes
	add	esp, 16					; 00000010H

; 13711:         s->undo_char_point = (short)(s->undo_char_point - u.insert_length);

	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, WORD PTR [eax+5188]
	movsx	edx, WORD PTR _u$[ebp+4]
	sub	ecx, edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	WORD PTR [eax+5188], cx
$LN1@nk_textedi:

; 13712:     }
; 13713:     state->cursor = (short)(u.where + u.insert_length);

	movsx	eax, WORD PTR _u$[ebp+4]
	add	eax, DWORD PTR _u$[ebp]
	movsx	ecx, ax
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+88], ecx

; 13714: 
; 13715:     s->undo_point--;

	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax+5184]
	sub	cx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5184], cx

; 13716:     s->redo_point--;

	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax+5186]
	sub	cx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5186], cx
$LN12@nk_textedi:

; 13717: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@nk_textedi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN16@nk_textedi:
	DD	1
	DD	$LN15@nk_textedi
$LN15@nk_textedi:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN14@nk_textedi
$LN14@nk_textedi:
	DB	117					; 00000075H
	DB	0
_nk_textedit_undo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_paste
_TEXT	SEGMENT
_text$ = -20						; size = 4
_glyphs$ = -8						; size = 4
_state$ = 8						; size = 4
_ctext$ = 12						; size = 4
_len$ = 16						; size = 4
_nk_textedit_paste PROC					; COMDAT

; 13155: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13156:     /* API paste: replace existing selection with passed-in text */
; 13157:     int glyphs;
; 13158:     const char *text = (const char *) ctext;

	mov	eax, DWORD PTR _ctext$[ebp]
	mov	DWORD PTR _text$[ebp], eax

; 13159:     if (state->mode == NK_TEXT_EDIT_MODE_VIEW) return 0;

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax+100]
	test	ecx, ecx
	jne	SHORT $LN3@nk_textedi
	xor	eax, eax
	jmp	$LN4@nk_textedi
$LN3@nk_textedi:

; 13160: 
; 13161:     /* if there's a selection, the paste should delete it */
; 13162:     nk_textedit_clamp(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clamp
	add	esp, 4

; 13163:     nk_textedit_delete_selection(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_delete_selection
	add	esp, 4

; 13164: 
; 13165:     /* try to insert the characters */
; 13166:     glyphs = nk_utf_len(ctext, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctext$[ebp]
	push	ecx
	call	_nk_utf_len
	add	esp, 8
	mov	DWORD PTR _glyphs$[ebp], eax

; 13167:     if (nk_str_insert_text_char(&state->string, state->cursor, text, len)) {

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_nk_str_insert_text_char
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN2@nk_textedi

; 13168:         nk_textedit_makeundo_insert(state, state->cursor, glyphs);

	mov	eax, DWORD PTR _glyphs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_makeundo_insert
	add	esp, 12					; 0000000cH

; 13169:         state->cursor += len;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+88], ecx

; 13170:         state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0

; 13171:         return 1;

	mov	eax, 1
	jmp	SHORT $LN4@nk_textedi
$LN2@nk_textedi:

; 13172:     }
; 13173:     /* remove the undo since we didn't actually insert the characters */
; 13174:     if (state->undo.undo_point)

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, WORD PTR [eax+5296]
	test	ecx, ecx
	je	SHORT $LN1@nk_textedi

; 13175:         --state->undo.undo_point;

	mov	eax, DWORD PTR _state$[ebp]
	mov	cx, WORD PTR [eax+5296]
	sub	cx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	WORD PTR [edx+5296], cx
$LN1@nk_textedi:

; 13176:     return 0;

	xor	eax, eax
$LN4@nk_textedi:

; 13177: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_paste ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_cut
_TEXT	SEGMENT
_state$ = 8						; size = 4
_nk_textedit_cut PROC					; COMDAT

; 13141: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13142:     /* API cut: delete selection */
; 13143:     if (state->mode == NK_TEXT_EDIT_MODE_VIEW)

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax+100]
	test	ecx, ecx
	jne	SHORT $LN2@nk_textedi

; 13144:         return 0;

	xor	eax, eax
	jmp	SHORT $LN3@nk_textedi
$LN2@nk_textedi:

; 13145:     if (NK_TEXT_HAS_SELECTION(state)) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	je	SHORT $LN1@nk_textedi

; 13146:         nk_textedit_delete_selection(state); /* implicitly clamps */

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_delete_selection
	add	esp, 4

; 13147:         state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0

; 13148:         return 1;

	mov	eax, 1
	jmp	SHORT $LN3@nk_textedi
$LN1@nk_textedi:

; 13149:     }
; 13150:    return 0;

	xor	eax, eax
$LN3@nk_textedi:

; 13151: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_cut ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_select_all
_TEXT	SEGMENT
_state$ = 8						; size = 4
_nk_textedit_select_all PROC				; COMDAT

; 13855: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13856:     NK_ASSERT(state);

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN3@nk_textedi
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_textedit_select_all@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@nk_textedi:

; 13857:     state->select_start = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+92], 0

; 13858:     state->select_end = state->string.len;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+96], edx

; 13859: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_select_all ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_delete_selection
_TEXT	SEGMENT
_state$ = 8						; size = 4
_nk_textedit_delete_selection PROC			; COMDAT

; 13038: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13039:     /* delete the section */
; 13040:     nk_textedit_clamp(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clamp
	add	esp, 4

; 13041:     if (NK_TEXT_HAS_SELECTION(state)) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	je	$LN4@nk_textedi

; 13042:         if (state->select_start < state->select_end) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	jge	SHORT $LN2@nk_textedi

; 13043:             nk_textedit_delete(state, state->select_start,
; 13044:                 state->select_end - state->select_start);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+96]
	sub	edx, DWORD PTR [ecx+92]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_nk_textedit_delete
	add	esp, 12					; 0000000cH

; 13045:             state->select_end = state->cursor = state->select_start;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR [eax+88], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+96], edx

; 13046:         } else {

	jmp	SHORT $LN1@nk_textedi
$LN2@nk_textedi:

; 13047:             nk_textedit_delete(state, state->select_end,
; 13048:                 state->select_start - state->select_end);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	sub	edx, DWORD PTR [ecx+96]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_nk_textedit_delete
	add	esp, 12					; 0000000cH

; 13049:             state->select_start = state->cursor = state->select_end;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+88], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+92], edx
$LN1@nk_textedi:

; 13050:         }
; 13051:         state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0
$LN4@nk_textedi:

; 13052:     }
; 13053: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_delete_selection ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_delete
_TEXT	SEGMENT
_state$ = 8						; size = 4
_where$ = 12						; size = 4
_len$ = 16						; size = 4
_nk_textedit_delete PROC				; COMDAT

; 13029: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13030:     /* delete characters while updating undo */
; 13031:     nk_textedit_makeundo_delete(state, where, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _where$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_nk_textedit_makeundo_delete
	add	esp, 12					; 0000000cH

; 13032:     nk_str_delete_runes(&state->string, where, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _where$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_nk_str_delete_runes
	add	esp, 12					; 0000000cH

; 13033:     state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0

; 13034: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_delete ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_text
_TEXT	SEGMENT
_text_len$ = -32					; size = 4
_glyph_len$ = -20					; size = 4
_unicode$ = -8						; size = 4
_state$ = 8						; size = 4
_text$ = 12						; size = 4
_total_len$ = 16					; size = 4
_nk_textedit_text PROC					; COMDAT

; 13181: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13182:     nk_rune unicode;
; 13183:     int glyph_len;
; 13184:     int text_len = 0;

	mov	DWORD PTR _text_len$[ebp], 0

; 13185: 
; 13186:     NK_ASSERT(state);

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN15@nk_textedi
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_textedit_text@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@nk_textedi:

; 13187:     NK_ASSERT(text);

	cmp	DWORD PTR _text$[ebp], 0
	jne	SHORT $LN16@nk_textedi
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_textedit_text@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HIPAKEND@?$AAt?$AAe?$AAx?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN16@nk_textedi:

; 13188:     if (!text || !total_len || state->mode == NK_TEXT_EDIT_MODE_VIEW) return;

	cmp	DWORD PTR _text$[ebp], 0
	je	SHORT $LN11@nk_textedi
	cmp	DWORD PTR _total_len$[ebp], 0
	je	SHORT $LN11@nk_textedi
	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax+100]
	test	ecx, ecx
	jne	SHORT $LN12@nk_textedi
$LN11@nk_textedi:
	jmp	$LN13@nk_textedi
$LN12@nk_textedi:

; 13189: 
; 13190:     glyph_len = nk_utf_decode(text, &unicode, total_len);

	mov	eax, DWORD PTR _total_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax
$LN10@nk_textedi:

; 13191:     while ((text_len < total_len) && glyph_len)

	mov	eax, DWORD PTR _text_len$[ebp]
	cmp	eax, DWORD PTR _total_len$[ebp]
	jge	$LN13@nk_textedi
	cmp	DWORD PTR _glyph_len$[ebp], 0
	je	$LN13@nk_textedi

; 13192:     {
; 13193:         /* don't insert a backward delete, just process the event */
; 13194:         if (unicode == 127) goto next;

	cmp	DWORD PTR _unicode$[ebp], 127		; 0000007fH
	jne	SHORT $LN8@nk_textedi
	jmp	$next$20
$LN8@nk_textedi:

; 13195:         /* can't add newline in single-line mode */
; 13196:         if (unicode == '\n' && state->single_line) goto next;

	cmp	DWORD PTR _unicode$[ebp], 10		; 0000000aH
	jne	SHORT $LN7@nk_textedi
	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax+104]
	test	ecx, ecx
	je	SHORT $LN7@nk_textedi
	jmp	$next$20
$LN7@nk_textedi:

; 13197:         /* filter incoming text */
; 13198:         if (state->filter && !state->filter(state, unicode)) goto next;

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	SHORT $LN6@nk_textedi
	mov	esi, esp
	mov	eax, DWORD PTR _unicode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN6@nk_textedi
	jmp	$next$20
$LN6@nk_textedi:

; 13199: 
; 13200:         if (!NK_TEXT_HAS_SELECTION(state) &&
; 13201:             state->cursor < state->string.len)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	jne	$LN5@nk_textedi
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+88]
	cmp	edx, DWORD PTR [ecx+72]
	jge	SHORT $LN5@nk_textedi

; 13202:         {
; 13203:             if (state->mode == NK_TEXT_EDIT_MODE_REPLACE) {

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax+100]
	cmp	ecx, 2
	jne	SHORT $LN4@nk_textedi

; 13204:                 nk_textedit_makeundo_replace(state, state->cursor, 1, 1);

	push	1
	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_nk_textedit_makeundo_replace
	add	esp, 16					; 00000010H

; 13205:                 nk_str_delete_runes(&state->string, state->cursor, 1);

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_nk_str_delete_runes
	add	esp, 12					; 0000000cH
$LN4@nk_textedi:

; 13206:             }
; 13207:             if (nk_str_insert_text_utf8(&state->string, state->cursor,
; 13208:                                         text+text_len, 1))

	push	1
	mov	eax, DWORD PTR _text$[ebp]
	add	eax, DWORD PTR _text_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_insert_text_utf8
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN3@nk_textedi

; 13209:             {
; 13210:                 ++state->cursor;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	add	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+88], ecx

; 13211:                 state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0
$LN3@nk_textedi:

; 13212:             }
; 13213:         } else {

	jmp	SHORT $next$20
$LN5@nk_textedi:

; 13214:             nk_textedit_delete_selection(state); /* implicitly clamps */

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_delete_selection
	add	esp, 4

; 13215:             if (nk_str_insert_text_utf8(&state->string, state->cursor,
; 13216:                                         text+text_len, 1))

	push	1
	mov	eax, DWORD PTR _text$[ebp]
	add	eax, DWORD PTR _text_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_insert_text_utf8
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $next$20

; 13217:             {
; 13218:                 nk_textedit_makeundo_insert(state, state->cursor, 1);

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_nk_textedit_makeundo_insert
	add	esp, 12					; 0000000cH

; 13219:                 ++state->cursor;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	add	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+88], ecx

; 13220:                 state->has_preferred_x = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+103], 0
$next$20:

; 13221:             }
; 13222:         }
; 13223:         next:
; 13224:         text_len += glyph_len;

	mov	eax, DWORD PTR _text_len$[ebp]
	add	eax, DWORD PTR _glyph_len$[ebp]
	mov	DWORD PTR _text_len$[ebp], eax

; 13225:         glyph_len = nk_utf_decode(text + text_len, &unicode, total_len-text_len);

	mov	eax, DWORD PTR _total_len$[ebp]
	sub	eax, DWORD PTR _text_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	add	edx, DWORD PTR _text_len$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax

; 13226:     }

	jmp	$LN10@nk_textedi
$LN13@nk_textedi:

; 13227: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@nk_textedi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN19@nk_textedi:
	DD	1
	DD	$LN18@nk_textedi
$LN18@nk_textedi:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN17@nk_textedi
$LN17@nk_textedi:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_nk_textedit_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_free
_TEXT	SEGMENT
_state$ = 8						; size = 4
_nk_textedit_free PROC					; COMDAT

; 13863: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13864:     NK_ASSERT(state);

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN4@nk_textedi
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_textedit_free@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_textedi:

; 13865:     if (!state) return;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN1@nk_textedi
	jmp	SHORT $LN2@nk_textedi
$LN1@nk_textedi:

; 13866:     nk_str_free(&state->string);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_free
	add	esp, 4
$LN2@nk_textedi:

; 13867: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_init_fixed
_TEXT	SEGMENT
_state$ = 8						; size = 4
_memory$ = 12						; size = 4
_size$ = 16						; size = 4
_nk_textedit_init_fixed PROC				; COMDAT

; 13821: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13822:     NK_ASSERT(state);

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN5@nk_textedi
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_textedit_init_fixed@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_textedi:

; 13823:     NK_ASSERT(memory);

	cmp	DWORD PTR _memory$[ebp], 0
	jne	SHORT $LN6@nk_textedi
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_textedit_init_fixed@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@NIJNBMFJ@?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_textedi:

; 13824:     if (!state || !memory || !size) return;

	cmp	DWORD PTR _state$[ebp], 0
	je	SHORT $LN1@nk_textedi
	cmp	DWORD PTR _memory$[ebp], 0
	je	SHORT $LN1@nk_textedi
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN2@nk_textedi
$LN1@nk_textedi:
	jmp	SHORT $LN3@nk_textedi
$LN2@nk_textedi:

; 13825:     NK_MEMSET(state, 0, sizeof(struct nk_text_edit));

	push	5304					; 000014b8H
	push	0
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_memset
	add	esp, 12					; 0000000cH

; 13826:     nk_textedit_clear_state(state, NK_TEXT_EDIT_SINGLE_LINE, 0);

	push	0
	push	0
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clear_state
	add	esp, 12					; 0000000cH

; 13827:     nk_str_init_fixed(&state->string, memory, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_nk_str_init_fixed
	add	esp, 12					; 0000000cH
$LN3@nk_textedi:

; 13828: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_init_fixed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_init
_TEXT	SEGMENT
_state$ = 8						; size = 4
_alloc$ = 12						; size = 4
_size$ = 16						; size = 4
_nk_textedit_init PROC					; COMDAT

; 13832: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13833:     NK_ASSERT(state);

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN5@nk_textedi
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_textedit_init@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_textedi:

; 13834:     NK_ASSERT(alloc);

	cmp	DWORD PTR _alloc$[ebp], 0
	jne	SHORT $LN6@nk_textedi
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_textedit_init@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KLHDKNJP@?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_textedi:

; 13835:     if (!state || !alloc) return;

	cmp	DWORD PTR _state$[ebp], 0
	je	SHORT $LN1@nk_textedi
	cmp	DWORD PTR _alloc$[ebp], 0
	jne	SHORT $LN2@nk_textedi
$LN1@nk_textedi:
	jmp	SHORT $LN3@nk_textedi
$LN2@nk_textedi:

; 13836:     NK_MEMSET(state, 0, sizeof(struct nk_text_edit));

	push	5304					; 000014b8H
	push	0
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_memset
	add	esp, 12					; 0000000cH

; 13837:     nk_textedit_clear_state(state, NK_TEXT_EDIT_SINGLE_LINE, 0);

	push	0
	push	0
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clear_state
	add	esp, 12					; 0000000cH

; 13838:     nk_str_init(&state->string, alloc, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_nk_str_init
	add	esp, 12					; 0000000cH
$LN3@nk_textedi:

; 13839: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_textedit_init_default
_TEXT	SEGMENT
_state$ = 8						; size = 4
_nk_textedit_init_default PROC				; COMDAT

; 13844: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13845:     NK_ASSERT(state);

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN4@nk_textedi
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_textedit_init_default@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KIFGKHLF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_textedi:

; 13846:     if (!state) return;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN1@nk_textedi
	jmp	SHORT $LN2@nk_textedi
$LN1@nk_textedi:

; 13847:     NK_MEMSET(state, 0, sizeof(struct nk_text_edit));

	push	5304					; 000014b8H
	push	0
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_memset
	add	esp, 12					; 0000000cH

; 13848:     nk_textedit_clear_state(state, NK_TEXT_EDIT_SINGLE_LINE, 0);

	push	0
	push	0
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_nk_textedit_clear_state
	add	esp, 12					; 0000000cH

; 13849:     nk_str_init_default(&state->string);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_nk_str_init_default
	add	esp, 4
$LN2@nk_textedi:

; 13850: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_textedit_init_default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_filter_binary
_TEXT	SEGMENT
_box$ = 8						; size = 4
_unicode$ = 12						; size = 4
_nk_filter_binary PROC					; COMDAT

; 15333: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 15334:     NK_UNUSED(box);
; 15335:     if (unicode != '0' && unicode != '1')

	cmp	DWORD PTR _unicode$[ebp], 48		; 00000030H
	je	SHORT $LN2@nk_filter_
	cmp	DWORD PTR _unicode$[ebp], 49		; 00000031H
	je	SHORT $LN2@nk_filter_

; 15336:         return nk_false;

	xor	eax, eax
	jmp	SHORT $LN3@nk_filter_
	jmp	SHORT $LN3@nk_filter_
$LN2@nk_filter_:

; 15337:     else return nk_true;

	mov	eax, 1
$LN3@nk_filter_:

; 15338: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_filter_binary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_filter_oct
_TEXT	SEGMENT
_box$ = 8						; size = 4
_unicode$ = 12						; size = 4
_nk_filter_oct PROC					; COMDAT

; 15324: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 15325:     NK_UNUSED(box);
; 15326:     if (unicode < '0' || unicode > '7')

	cmp	DWORD PTR _unicode$[ebp], 48		; 00000030H
	jb	SHORT $LN2@nk_filter_
	cmp	DWORD PTR _unicode$[ebp], 55		; 00000037H
	jbe	SHORT $LN3@nk_filter_
$LN2@nk_filter_:

; 15327:         return nk_false;

	xor	eax, eax
	jmp	SHORT $LN4@nk_filter_
	jmp	SHORT $LN4@nk_filter_
$LN3@nk_filter_:

; 15328:     else return nk_true;

	mov	eax, 1
$LN4@nk_filter_:

; 15329: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_filter_oct ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_filter_hex
_TEXT	SEGMENT
_box$ = 8						; size = 4
_unicode$ = 12						; size = 4
_nk_filter_hex PROC					; COMDAT

; 15313: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 15314:     NK_UNUSED(box);
; 15315:     if ((unicode < '0' || unicode > '9') &&
; 15316:         (unicode < 'a' || unicode > 'f') &&
; 15317:         (unicode < 'A' || unicode > 'F'))

	cmp	DWORD PTR _unicode$[ebp], 48		; 00000030H
	jb	SHORT $LN4@nk_filter_
	cmp	DWORD PTR _unicode$[ebp], 57		; 00000039H
	jbe	SHORT $LN5@nk_filter_
$LN4@nk_filter_:
	cmp	DWORD PTR _unicode$[ebp], 97		; 00000061H
	jb	SHORT $LN3@nk_filter_
	cmp	DWORD PTR _unicode$[ebp], 102		; 00000066H
	jbe	SHORT $LN5@nk_filter_
$LN3@nk_filter_:
	cmp	DWORD PTR _unicode$[ebp], 65		; 00000041H
	jb	SHORT $LN2@nk_filter_
	cmp	DWORD PTR _unicode$[ebp], 70		; 00000046H
	jbe	SHORT $LN5@nk_filter_
$LN2@nk_filter_:

; 15318:         return nk_false;

	xor	eax, eax
	jmp	SHORT $LN6@nk_filter_
	jmp	SHORT $LN6@nk_filter_
$LN5@nk_filter_:

; 15319:     else return nk_true;

	mov	eax, 1
$LN6@nk_filter_:

; 15320: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_filter_hex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_filter_decimal
_TEXT	SEGMENT
_box$ = 8						; size = 4
_unicode$ = 12						; size = 4
_nk_filter_decimal PROC					; COMDAT

; 15304: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 15305:     NK_UNUSED(box);
; 15306:     if ((unicode < '0' || unicode > '9') && unicode != '-')

	cmp	DWORD PTR _unicode$[ebp], 48		; 00000030H
	jb	SHORT $LN2@nk_filter_
	cmp	DWORD PTR _unicode$[ebp], 57		; 00000039H
	jbe	SHORT $LN3@nk_filter_
$LN2@nk_filter_:
	cmp	DWORD PTR _unicode$[ebp], 45		; 0000002dH
	je	SHORT $LN3@nk_filter_

; 15307:         return nk_false;

	xor	eax, eax
	jmp	SHORT $LN4@nk_filter_
	jmp	SHORT $LN4@nk_filter_
$LN3@nk_filter_:

; 15308:     else return nk_true;

	mov	eax, 1
$LN4@nk_filter_:

; 15309: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_filter_decimal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_filter_float
_TEXT	SEGMENT
_box$ = 8						; size = 4
_unicode$ = 12						; size = 4
_nk_filter_float PROC					; COMDAT

; 15295: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 15296:     NK_UNUSED(box);
; 15297:     if ((unicode < '0' || unicode > '9') && unicode != '.' && unicode != '-')

	cmp	DWORD PTR _unicode$[ebp], 48		; 00000030H
	jb	SHORT $LN2@nk_filter_
	cmp	DWORD PTR _unicode$[ebp], 57		; 00000039H
	jbe	SHORT $LN3@nk_filter_
$LN2@nk_filter_:
	cmp	DWORD PTR _unicode$[ebp], 46		; 0000002eH
	je	SHORT $LN3@nk_filter_
	cmp	DWORD PTR _unicode$[ebp], 45		; 0000002dH
	je	SHORT $LN3@nk_filter_

; 15298:         return nk_false;

	xor	eax, eax
	jmp	SHORT $LN4@nk_filter_
	jmp	SHORT $LN4@nk_filter_
$LN3@nk_filter_:

; 15299:     else return nk_true;

	mov	eax, 1
$LN4@nk_filter_:

; 15300: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_filter_float ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_filter_ascii
_TEXT	SEGMENT
_box$ = 8						; size = 4
_unicode$ = 12						; size = 4
_nk_filter_ascii PROC					; COMDAT

; 15287: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 15288:     NK_UNUSED(box);
; 15289:     if (unicode > 128) return nk_false;

	cmp	DWORD PTR _unicode$[ebp], 128		; 00000080H
	jbe	SHORT $LN2@nk_filter_
	xor	eax, eax
	jmp	SHORT $LN3@nk_filter_
	jmp	SHORT $LN3@nk_filter_
$LN2@nk_filter_:

; 15290:     else return nk_true;

	mov	eax, 1
$LN3@nk_filter_:

; 15291: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_filter_ascii ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_filter_default
_TEXT	SEGMENT
_box$ = 8						; size = 4
_unicode$ = 12						; size = 4
_nk_filter_default PROC					; COMDAT

; 15283: {(void)unicode;NK_UNUSED(box);return nk_true;}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_filter_default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_len_char
_TEXT	SEGMENT
_s$ = 8							; size = 4
_nk_str_len_char PROC					; COMDAT

; 7225 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7226 :     NK_ASSERT(s);

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN5@nk_str_len
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_len_char@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_str_len:

; 7227 :     if (!s || !s->len || !s->buffer.allocated) return 0;

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN1@nk_str_len
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN1@nk_str_len
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN2@nk_str_len
$LN1@nk_str_len:
	xor	eax, eax
	jmp	SHORT $LN3@nk_str_len
$LN2@nk_str_len:

; 7228 :     return (int)s->buffer.allocated;

	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+44]
$LN3@nk_str_len:

; 7229 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_len_char ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_len
_TEXT	SEGMENT
_s$ = 8							; size = 4
_nk_str_len PROC					; COMDAT

; 7217 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7218 :     NK_ASSERT(s);

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN5@nk_str_len
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_len@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_str_len:

; 7219 :     if (!s || !s->len || !s->buffer.allocated) return 0;

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN1@nk_str_len
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN1@nk_str_len
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN2@nk_str_len
$LN1@nk_str_len:
	xor	eax, eax
	jmp	SHORT $LN3@nk_str_len
$LN2@nk_str_len:

; 7220 :     return s->len;

	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+60]
$LN3@nk_str_len:

; 7221 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_len ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_get_const
_TEXT	SEGMENT
_s$ = 8							; size = 4
_nk_str_get_const PROC					; COMDAT

; 7209 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7210 :     NK_ASSERT(s);

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN5@nk_str_get
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_get_const@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_str_get:

; 7211 :     if (!s || !s->len || !s->buffer.allocated) return 0;

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN1@nk_str_get
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN1@nk_str_get
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN2@nk_str_get
$LN1@nk_str_get:
	xor	eax, eax
	jmp	SHORT $LN3@nk_str_get
$LN2@nk_str_get:

; 7212 :     return (const char*)s->buffer.memory.ptr;

	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+32]
$LN3@nk_str_get:

; 7213 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_get_const ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_get
_TEXT	SEGMENT
_s$ = 8							; size = 4
_nk_str_get PROC					; COMDAT

; 7201 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7202 :     NK_ASSERT(s);

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN5@nk_str_get
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_get@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_str_get:

; 7203 :     if (!s || !s->len || !s->buffer.allocated) return 0;

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN1@nk_str_get
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN1@nk_str_get
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN2@nk_str_get
$LN1@nk_str_get:
	xor	eax, eax
	jmp	SHORT $LN3@nk_str_get
$LN2@nk_str_get:

; 7204 :     return (char*)s->buffer.memory.ptr;

	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+32]
$LN3@nk_str_get:

; 7205 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_get ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_at_const
_TEXT	SEGMENT
_text_len$ = -56					; size = 4
_text$ = -44						; size = 4
_glyph_len$ = -32					; size = 4
_src_len$ = -20						; size = 4
_i$ = -8						; size = 4
_str$ = 8						; size = 4
_pos$ = 12						; size = 4
_unicode$ = 16						; size = 4
_len$ = 20						; size = 4
_nk_str_at_const PROC					; COMDAT

; 7155 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7156 :     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 7157 :     int src_len = 0;

	mov	DWORD PTR _src_len$[ebp], 0

; 7158 :     int glyph_len = 0;

	mov	DWORD PTR _glyph_len$[ebp], 0

; 7159 :     char *text;
; 7160 :     int text_len;
; 7161 : 
; 7162 :     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN10@nk_str_at_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_at_const@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_str_at_:

; 7163 :     NK_ASSERT(unicode);

	cmp	DWORD PTR _unicode$[ebp], 0
	jne	SHORT $LN11@nk_str_at_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_at_const@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BA@OIEABBIM@?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_str_at_:

; 7164 :     NK_ASSERT(len);

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN12@nk_str_at_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_at_const@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17JOFJILLL@?$AAl?$AAe?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_str_at_:

; 7165 : 
; 7166 :     if (!str || !unicode || !len) return 0;

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN6@nk_str_at_
	cmp	DWORD PTR _unicode$[ebp], 0
	je	SHORT $LN6@nk_str_at_
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN7@nk_str_at_
$LN6@nk_str_at_:
	xor	eax, eax
	jmp	$LN8@nk_str_at_
$LN7@nk_str_at_:

; 7167 :     if (pos < 0) {

	cmp	DWORD PTR _pos$[ebp], 0
	jge	SHORT $LN5@nk_str_at_

; 7168 :         *unicode = 0;

	mov	eax, DWORD PTR _unicode$[ebp]
	mov	DWORD PTR [eax], 0

; 7169 :         *len = 0;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax], 0

; 7170 :         return 0;

	xor	eax, eax
	jmp	$LN8@nk_str_at_
$LN5@nk_str_at_:

; 7171 :     }
; 7172 : 
; 7173 :     text = (char*)str->buffer.memory.ptr;

	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _text$[ebp], ecx

; 7174 :     text_len = (int)str->buffer.allocated;

	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _text_len$[ebp], ecx

; 7175 :     glyph_len = nk_utf_decode(text, unicode, text_len);

	mov	eax, DWORD PTR _text_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax
$LN4@nk_str_at_:

; 7176 :     while (glyph_len) {

	cmp	DWORD PTR _glyph_len$[ebp], 0
	je	SHORT $LN3@nk_str_at_

; 7177 :         if (i == pos) {

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _pos$[ebp]
	jne	SHORT $LN2@nk_str_at_

; 7178 :             *len = glyph_len;

	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _glyph_len$[ebp]
	mov	DWORD PTR [eax], ecx

; 7179 :             break;

	jmp	SHORT $LN3@nk_str_at_
$LN2@nk_str_at_:

; 7180 :         }
; 7181 : 
; 7182 :         i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 7183 :         src_len = src_len + glyph_len;

	mov	eax, DWORD PTR _src_len$[ebp]
	add	eax, DWORD PTR _glyph_len$[ebp]
	mov	DWORD PTR _src_len$[ebp], eax

; 7184 :         glyph_len = nk_utf_decode(text + src_len, unicode, text_len - src_len);

	mov	eax, DWORD PTR _text_len$[ebp]
	sub	eax, DWORD PTR _src_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	add	edx, DWORD PTR _src_len$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax

; 7185 :     }

	jmp	SHORT $LN4@nk_str_at_
$LN3@nk_str_at_:

; 7186 :     if (i != pos) return 0;

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _pos$[ebp]
	je	SHORT $LN1@nk_str_at_
	xor	eax, eax
	jmp	SHORT $LN8@nk_str_at_
$LN1@nk_str_at_:

; 7187 :     return text + src_len;

	mov	eax, DWORD PTR _text$[ebp]
	add	eax, DWORD PTR _src_len$[ebp]
$LN8@nk_str_at_:

; 7188 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_at_const ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_at_char_const
_TEXT	SEGMENT
_s$ = 8							; size = 4
_pos$ = 12						; size = 4
_nk_str_at_char_const PROC				; COMDAT

; 7147 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7148 :     NK_ASSERT(s);

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN5@nk_str_at_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_at_char_const@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_str_at_:

; 7149 :     if (!s || pos > (int)s->buffer.allocated) return 0;

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN1@nk_str_at_
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jle	SHORT $LN2@nk_str_at_
$LN1@nk_str_at_:
	xor	eax, eax
	jmp	SHORT $LN3@nk_str_at_
$LN2@nk_str_at_:

; 7150 :     return nk_ptr_add(char, s->buffer.memory.ptr, pos);

	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+32]
	add	eax, DWORD PTR _pos$[ebp]
$LN3@nk_str_at_:

; 7151 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_at_char_const ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_rune_at
_TEXT	SEGMENT
_unicode$ = -20						; size = 4
_len$ = -8						; size = 4
_str$ = 8						; size = 4
_pos$ = 12						; size = 4
_nk_str_rune_at PROC					; COMDAT

; 7192 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7193 :     int len;
; 7194 :     nk_rune unicode = 0;

	mov	DWORD PTR _unicode$[ebp], 0

; 7195 :     nk_str_at_const(str, pos, &unicode, &len);

	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_nk_str_at_const
	add	esp, 16					; 00000010H

; 7196 :     return unicode;

	mov	eax, DWORD PTR _unicode$[ebp]

; 7197 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@nk_str_run
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@nk_str_run:
	DD	2
	DD	$LN5@nk_str_run
$LN5@nk_str_run:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@nk_str_run
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@nk_str_run
$LN4@nk_str_run:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN3@nk_str_run:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_nk_str_rune_at ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_at_rune
_TEXT	SEGMENT
_text_len$ = -56					; size = 4
_text$ = -44						; size = 4
_glyph_len$ = -32					; size = 4
_src_len$ = -20						; size = 4
_i$ = -8						; size = 4
_str$ = 8						; size = 4
_pos$ = 12						; size = 4
_unicode$ = 16						; size = 4
_len$ = 20						; size = 4
_nk_str_at_rune PROC					; COMDAT

; 7110 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7111 :     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 7112 :     int src_len = 0;

	mov	DWORD PTR _src_len$[ebp], 0

; 7113 :     int glyph_len = 0;

	mov	DWORD PTR _glyph_len$[ebp], 0

; 7114 :     char *text;
; 7115 :     int text_len;
; 7116 : 
; 7117 :     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN10@nk_str_at_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_at_rune@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_str_at_:

; 7118 :     NK_ASSERT(unicode);

	cmp	DWORD PTR _unicode$[ebp], 0
	jne	SHORT $LN11@nk_str_at_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_at_rune@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BA@OIEABBIM@?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_str_at_:

; 7119 :     NK_ASSERT(len);

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN12@nk_str_at_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_at_rune@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17JOFJILLL@?$AAl?$AAe?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_str_at_:

; 7120 : 
; 7121 :     if (!str || !unicode || !len) return 0;

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN6@nk_str_at_
	cmp	DWORD PTR _unicode$[ebp], 0
	je	SHORT $LN6@nk_str_at_
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN7@nk_str_at_
$LN6@nk_str_at_:
	xor	eax, eax
	jmp	$LN8@nk_str_at_
$LN7@nk_str_at_:

; 7122 :     if (pos < 0) {

	cmp	DWORD PTR _pos$[ebp], 0
	jge	SHORT $LN5@nk_str_at_

; 7123 :         *unicode = 0;

	mov	eax, DWORD PTR _unicode$[ebp]
	mov	DWORD PTR [eax], 0

; 7124 :         *len = 0;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax], 0

; 7125 :         return 0;

	xor	eax, eax
	jmp	$LN8@nk_str_at_
$LN5@nk_str_at_:

; 7126 :     }
; 7127 : 
; 7128 :     text = (char*)str->buffer.memory.ptr;

	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _text$[ebp], ecx

; 7129 :     text_len = (int)str->buffer.allocated;

	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _text_len$[ebp], ecx

; 7130 :     glyph_len = nk_utf_decode(text, unicode, text_len);

	mov	eax, DWORD PTR _text_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax
$LN4@nk_str_at_:

; 7131 :     while (glyph_len) {

	cmp	DWORD PTR _glyph_len$[ebp], 0
	je	SHORT $LN3@nk_str_at_

; 7132 :         if (i == pos) {

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _pos$[ebp]
	jne	SHORT $LN2@nk_str_at_

; 7133 :             *len = glyph_len;

	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _glyph_len$[ebp]
	mov	DWORD PTR [eax], ecx

; 7134 :             break;

	jmp	SHORT $LN3@nk_str_at_
$LN2@nk_str_at_:

; 7135 :         }
; 7136 : 
; 7137 :         i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 7138 :         src_len = src_len + glyph_len;

	mov	eax, DWORD PTR _src_len$[ebp]
	add	eax, DWORD PTR _glyph_len$[ebp]
	mov	DWORD PTR _src_len$[ebp], eax

; 7139 :         glyph_len = nk_utf_decode(text + src_len, unicode, text_len - src_len);

	mov	eax, DWORD PTR _text_len$[ebp]
	sub	eax, DWORD PTR _src_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	add	edx, DWORD PTR _src_len$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax

; 7140 :     }

	jmp	SHORT $LN4@nk_str_at_
$LN3@nk_str_at_:

; 7141 :     if (i != pos) return 0;

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _pos$[ebp]
	je	SHORT $LN1@nk_str_at_
	xor	eax, eax
	jmp	SHORT $LN8@nk_str_at_
$LN1@nk_str_at_:

; 7142 :     return text + src_len;

	mov	eax, DWORD PTR _text$[ebp]
	add	eax, DWORD PTR _src_len$[ebp]
$LN8@nk_str_at_:

; 7143 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_at_rune ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_at_char
_TEXT	SEGMENT
_s$ = 8							; size = 4
_pos$ = 12						; size = 4
_nk_str_at_char PROC					; COMDAT

; 7102 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7103 :     NK_ASSERT(s);

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN5@nk_str_at_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_at_char@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_str_at_:

; 7104 :     if (!s || pos > (int)s->buffer.allocated) return 0;

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN1@nk_str_at_
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jle	SHORT $LN2@nk_str_at_
$LN1@nk_str_at_:
	xor	eax, eax
	jmp	SHORT $LN3@nk_str_at_
$LN2@nk_str_at_:

; 7105 :     return nk_ptr_add(char, s->buffer.memory.ptr, pos);

	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+32]
	add	eax, DWORD PTR _pos$[ebp]
$LN3@nk_str_at_:

; 7106 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_at_char ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_delete_runes
_TEXT	SEGMENT
tv129 = -264						; size = 4
tv130 = -260						; size = 4
tv88 = -256						; size = 4
_unused$ = -56						; size = 4
_end$ = -44						; size = 4
_begin$ = -32						; size = 4
_unicode$ = -20						; size = 4
_temp$ = -8						; size = 4
_s$ = 8							; size = 4
_pos$ = 12						; size = 4
_len$ = 16						; size = 4
_nk_str_delete_runes PROC				; COMDAT

; 7077 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7078 :     char *temp;
; 7079 :     nk_rune unicode;
; 7080 :     char *begin;
; 7081 :     char *end;
; 7082 :     int unused;
; 7083 : 
; 7084 :     NK_ASSERT(s);

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN7@nk_str_del
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_delete_runes@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_str_del:

; 7085 :     NK_ASSERT(s->len >= pos + len);

	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+60], eax
	jge	SHORT $LN8@nk_str_del
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_str_delete_runes@@9@9
	add	edx, 8
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CI@LFGHEBFL@?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAp?$AAo?$AAs?$AA?5?$AA?$CL?$AA?5?$AAl?$AAe?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_str_del:

; 7086 :     if (s->len < pos + len)

	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+60], eax
	jge	$LN4@nk_str_del

; 7087 :         len = NK_CLAMP(0, (s->len - pos), s->len);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	sub	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	cmp	ecx, DWORD PTR [edx+60]
	jge	SHORT $LN9@nk_str_del
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	sub	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR tv88[ebp], ecx
	jmp	SHORT $LN10@nk_str_del
$LN9@nk_str_del:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR tv88[ebp], eax
$LN10@nk_str_del:
	cmp	DWORD PTR tv88[ebp], 0
	jge	SHORT $LN13@nk_str_del
	mov	DWORD PTR tv130[ebp], 0
	jmp	SHORT $LN14@nk_str_del
$LN13@nk_str_del:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	sub	edx, DWORD PTR _pos$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	cmp	edx, DWORD PTR [eax+60]
	jge	SHORT $LN11@nk_str_del
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	sub	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN12@nk_str_del
$LN11@nk_str_del:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR tv129[ebp], ecx
$LN12@nk_str_del:
	mov	edx, DWORD PTR tv129[ebp]
	mov	DWORD PTR tv130[ebp], edx
$LN14@nk_str_del:
	mov	eax, DWORD PTR tv130[ebp]
	mov	DWORD PTR _len$[ebp], eax
$LN4@nk_str_del:

; 7088 :     if (!len) return;

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN3@nk_str_del
	jmp	SHORT $LN5@nk_str_del
$LN3@nk_str_del:

; 7089 : 
; 7090 :     temp = (char *)s->buffer.memory.ptr;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _temp$[ebp], ecx

; 7091 :     begin = nk_str_at_rune(s, pos, &unicode, &unused);

	lea	eax, DWORD PTR _unused$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_nk_str_at_rune
	add	esp, 16					; 00000010H
	mov	DWORD PTR _begin$[ebp], eax

; 7092 :     if (!begin) return;

	cmp	DWORD PTR _begin$[ebp], 0
	jne	SHORT $LN2@nk_str_del
	jmp	SHORT $LN5@nk_str_del
$LN2@nk_str_del:

; 7093 :     s->buffer.memory.ptr = begin;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _begin$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 7094 :     end = nk_str_at_rune(s, len, &unicode, &unused);

	lea	eax, DWORD PTR _unused$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_nk_str_at_rune
	add	esp, 16					; 00000010H
	mov	DWORD PTR _end$[ebp], eax

; 7095 :     s->buffer.memory.ptr = temp;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 7096 :     if (!end) return;

	cmp	DWORD PTR _end$[ebp], 0
	jne	SHORT $LN1@nk_str_del
	jmp	SHORT $LN5@nk_str_del
$LN1@nk_str_del:

; 7097 :     nk_str_delete_chars(s, (int)(begin - temp), (int)(end - begin));

	mov	eax, DWORD PTR _end$[ebp]
	sub	eax, DWORD PTR _begin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _begin$[ebp]
	sub	ecx, DWORD PTR _temp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_nk_str_delete_chars
	add	esp, 12					; 0000000cH
$LN5@nk_str_del:

; 7098 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@nk_str_del
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@nk_str_del:
	DD	2
	DD	$LN17@nk_str_del
$LN17@nk_str_del:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN15@nk_str_del
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN16@nk_str_del
$LN16@nk_str_del:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN15@nk_str_del:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_nk_str_delete_runes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_delete_chars
_TEXT	SEGMENT
_src$1 = -20						; size = 4
_dst$2 = -8						; size = 4
_s$ = 8							; size = 4
_pos$ = 12						; size = 4
_len$ = 16						; size = 4
_nk_str_delete_chars PROC				; COMDAT

; 7059 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7060 :     NK_ASSERT(s);

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN7@nk_str_del
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_delete_chars@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_str_del:

; 7061 :     if (!s || !len || (nk_size)pos > s->buffer.allocated ||
; 7062 :         (nk_size)(pos + len) > s->buffer.allocated) return;

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN3@nk_str_del
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN3@nk_str_del
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	ja	SHORT $LN3@nk_str_del
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR [ecx+44]
	jbe	SHORT $LN4@nk_str_del
$LN3@nk_str_del:
	jmp	$LN5@nk_str_del
$LN4@nk_str_del:

; 7063 : 
; 7064 :     if ((nk_size)(pos + len) < s->buffer.allocated) {

	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR [ecx+44]
	jae	SHORT $LN2@nk_str_del

; 7065 :         /* memmove */
; 7066 :         char *dst = nk_ptr_add(char, s->buffer.memory.ptr, pos);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _dst$2[ebp], ecx

; 7067 :         char *src = nk_ptr_add(char, s->buffer.memory.ptr, pos + len);

	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR _src$1[ebp], eax

; 7068 :         NK_MEMCPY(dst, src, s->buffer.allocated - (nk_size)(pos + len));

	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR _src$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst$2[ebp]
	push	ecx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 7069 :         NK_ASSERT(((int)s->buffer.allocated - (int)len) >= 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, DWORD PTR _len$[ebp]
	jns	SHORT $LN8@nk_str_del
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_str_delete_chars@@9@9
	add	edx, 10					; 0000000aH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1FG@GHGMCHAP@?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAs?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5?$AA?9?$AA?5?$AA?$CI?$AAi?$AAn?$AAt@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_str_del:

; 7070 :         s->buffer.allocated -= (nk_size)len;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+44], ecx
	jmp	SHORT $LN1@nk_str_del
$LN2@nk_str_del:

; 7071 :     } else nk_str_remove_chars(s, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_nk_str_remove_chars
	add	esp, 8
$LN1@nk_str_del:

; 7072 :     s->len = nk_utf_len((char *)s->buffer.memory.ptr, (int)s->buffer.allocated);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_nk_utf_len
	add	esp, 8
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+60], eax
$LN5@nk_str_del:

; 7073 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_delete_chars ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_remove_runes
_TEXT	SEGMENT
_unicode$ = -44						; size = 4
_end$ = -32						; size = 4
_begin$ = -20						; size = 4
_index$ = -8						; size = 4
_str$ = 8						; size = 4
_len$ = 12						; size = 4
_nk_str_remove_runes PROC				; COMDAT

; 7037 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7038 :     int index;
; 7039 :     const char *begin;
; 7040 :     const char *end;
; 7041 :     nk_rune unicode;
; 7042 : 
; 7043 :     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN6@nk_str_rem
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_remove_runes@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_str_rem:

; 7044 :     NK_ASSERT(len >= 0);

	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN7@nk_str_rem
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_remove_runes@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BC@OAMMNJJI@?$AAl?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_str_rem:

; 7045 :     if (!str || len < 0) return;

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN2@nk_str_rem
	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN3@nk_str_rem
$LN2@nk_str_rem:
	jmp	SHORT $LN4@nk_str_rem
$LN3@nk_str_rem:

; 7046 :     if (len >= str->len) {

	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR [eax+60]
	jl	SHORT $LN1@nk_str_rem

; 7047 :         str->len = 0;

	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR [eax+60], 0

; 7048 :         return;

	jmp	SHORT $LN4@nk_str_rem
$LN1@nk_str_rem:

; 7049 :     }
; 7050 : 
; 7051 :     index = str->len - len;

	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	sub	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _index$[ebp], ecx

; 7052 :     begin = nk_str_at_rune(str, index, &unicode, &len);

	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_nk_str_at_rune
	add	esp, 16					; 00000010H
	mov	DWORD PTR _begin$[ebp], eax

; 7053 :     end = (const char*)str->buffer.memory.ptr + str->buffer.allocated;

	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _str$[ebp]
	add	ecx, DWORD PTR [edx+44]
	mov	DWORD PTR _end$[ebp], ecx

; 7054 :     nk_str_remove_chars(str, (int)(end-begin)+1);

	mov	eax, DWORD PTR _end$[ebp]
	sub	eax, DWORD PTR _begin$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_nk_str_remove_chars
	add	esp, 8
$LN4@nk_str_rem:

; 7055 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@nk_str_rem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@nk_str_rem:
	DD	1
	DD	$LN9@nk_str_rem
$LN9@nk_str_rem:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN8@nk_str_rem
$LN8@nk_str_rem:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_nk_str_remove_runes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_remove_chars
_TEXT	SEGMENT
_s$ = 8							; size = 4
_len$ = 12						; size = 4
_nk_str_remove_chars PROC				; COMDAT

; 7026 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7027 :     NK_ASSERT(s);

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN5@nk_str_rem
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_remove_chars@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_str_rem:

; 7028 :     NK_ASSERT(len >= 0);

	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN6@nk_str_rem
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_remove_chars@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BC@OAMMNJJI@?$AAl?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_str_rem:

; 7029 :     if (!s || len < 0 || (nk_size)len > s->buffer.allocated) return;

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN1@nk_str_rem
	cmp	DWORD PTR _len$[ebp], 0
	jl	SHORT $LN1@nk_str_rem
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jbe	SHORT $LN2@nk_str_rem
$LN1@nk_str_rem:
	jmp	SHORT $LN3@nk_str_rem
$LN2@nk_str_rem:

; 7030 :     NK_ASSERT(((int)s->buffer.allocated - (int)len) >= 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, DWORD PTR _len$[ebp]
	jns	SHORT $LN7@nk_str_rem
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_str_remove_chars@@9@9
	add	edx, 4
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1FG@GHGMCHAP@?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAs?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5?$AA?9?$AA?5?$AA?$CI?$AAi?$AAn?$AAt@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_str_rem:

; 7031 :     s->buffer.allocated -= (nk_size)len;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+44], ecx

; 7032 :     s->len = nk_utf_len((char *)s->buffer.memory.ptr, (int)s->buffer.allocated);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_nk_utf_len
	add	esp, 8
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+60], eax
$LN3@nk_str_rem:

; 7033 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_remove_chars ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_insert_str_runes
_TEXT	SEGMENT
_byte_len$ = -32					; size = 4
_glyph$ = -20						; size = 4
_i$ = -8						; size = 4
_str$ = 8						; size = 4
_pos$ = 12						; size = 4
_runes$ = 16						; size = 4
_nk_str_insert_str_runes PROC				; COMDAT

; 7010 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7011 :     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 7012 :     nk_glyph glyph;
; 7013 :     int byte_len;
; 7014 :     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN7@nk_str_ins
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_insert_str_runes@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_str_ins:

; 7015 :     if (!str || !runes) return 0;

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN3@nk_str_ins
	cmp	DWORD PTR _runes$[ebp], 0
	jne	SHORT $LN2@nk_str_ins
$LN3@nk_str_ins:
	xor	eax, eax
	jmp	SHORT $LN5@nk_str_ins
$LN2@nk_str_ins:

; 7016 :     while (runes[i] != '\0') {

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _runes$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN1@nk_str_ins

; 7017 :         byte_len = nk_utf_encode(runes[i], glyph, NK_UTF_SIZE);

	push	4
	lea	eax, DWORD PTR _glyph$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _runes$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_nk_utf_encode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _byte_len$[ebp], eax

; 7018 :         nk_str_insert_at_rune(str, pos+i, glyph, byte_len);

	mov	eax, DWORD PTR _byte_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_nk_str_insert_at_rune
	add	esp, 16					; 00000010H

; 7019 :         i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 7020 :     }

	jmp	SHORT $LN2@nk_str_ins
$LN1@nk_str_ins:

; 7021 :     return i;

	mov	eax, DWORD PTR _i$[ebp]
$LN5@nk_str_ins:

; 7022 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@nk_str_ins
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@nk_str_ins:
	DD	1
	DD	$LN9@nk_str_ins
$LN9@nk_str_ins:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@nk_str_ins
$LN8@nk_str_ins:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	0
_nk_str_insert_str_runes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_insert_text_runes
_TEXT	SEGMENT
_glyph$ = -32						; size = 4
_byte_len$ = -20					; size = 4
_i$ = -8						; size = 4
_str$ = 8						; size = 4
_pos$ = 12						; size = 4
_runes$ = 16						; size = 4
_len$ = 20						; size = 4
_nk_str_insert_text_runes PROC				; COMDAT

; 6993 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6994 :     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 6995 :     int byte_len = 0;

	mov	DWORD PTR _byte_len$[ebp], 0

; 6996 :     nk_glyph glyph;
; 6997 : 
; 6998 :     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN9@nk_str_ins
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_insert_text_runes@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_str_ins:

; 6999 :     if (!str || !runes || !len) return 0;

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN5@nk_str_ins
	cmp	DWORD PTR _runes$[ebp], 0
	je	SHORT $LN5@nk_str_ins
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN6@nk_str_ins
$LN5@nk_str_ins:
	xor	eax, eax
	jmp	SHORT $LN7@nk_str_ins
$LN6@nk_str_ins:

; 7000 :     for (i = 0; i < len; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@nk_str_ins
$LN3@nk_str_ins:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@nk_str_ins:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN2@nk_str_ins

; 7001 :         byte_len = nk_utf_encode(runes[i], glyph, NK_UTF_SIZE);

	push	4
	lea	eax, DWORD PTR _glyph$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _runes$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_nk_utf_encode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _byte_len$[ebp], eax

; 7002 :         if (!byte_len) break;

	cmp	DWORD PTR _byte_len$[ebp], 0
	jne	SHORT $LN1@nk_str_ins
	jmp	SHORT $LN2@nk_str_ins
$LN1@nk_str_ins:

; 7003 :         nk_str_insert_at_rune(str, pos+i, glyph, byte_len);

	mov	eax, DWORD PTR _byte_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_nk_str_insert_at_rune
	add	esp, 16					; 00000010H

; 7004 :     }

	jmp	SHORT $LN3@nk_str_ins
$LN2@nk_str_ins:

; 7005 :     return len;

	mov	eax, DWORD PTR _len$[ebp]
$LN7@nk_str_ins:

; 7006 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@nk_str_ins
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@nk_str_ins:
	DD	1
	DD	$LN11@nk_str_ins
$LN11@nk_str_ins:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN10@nk_str_ins
$LN10@nk_str_ins:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	0
_nk_str_insert_text_runes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_insert_str_utf8
_TEXT	SEGMENT
_unicode$ = -56						; size = 4
_glyph_len$ = -44					; size = 4
_num_runes$ = -32					; size = 4
_byte_len$ = -20					; size = 4
_runes$ = -8						; size = 4
_str$ = 8						; size = 4
_pos$ = 12						; size = 4
_text$ = 16						; size = 4
_nk_str_insert_str_utf8 PROC				; COMDAT

; 6973 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6974 :     int runes = 0;

	mov	DWORD PTR _runes$[ebp], 0

; 6975 :     int byte_len = 0;

	mov	DWORD PTR _byte_len$[ebp], 0

; 6976 :     int num_runes = 0;

	mov	DWORD PTR _num_runes$[ebp], 0

; 6977 :     int glyph_len = 0;

	mov	DWORD PTR _glyph_len$[ebp], 0

; 6978 :     nk_rune unicode;
; 6979 :     if (!str || !text) return 0;

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN3@nk_str_ins
	cmp	DWORD PTR _text$[ebp], 0
	jne	SHORT $LN4@nk_str_ins
$LN3@nk_str_ins:
	xor	eax, eax
	jmp	SHORT $LN5@nk_str_ins
$LN4@nk_str_ins:

; 6980 : 
; 6981 :     glyph_len = byte_len = nk_utf_decode(text+byte_len, &unicode, 4);

	push	4
	lea	eax, DWORD PTR _unicode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	add	ecx, DWORD PTR _byte_len$[ebp]
	push	ecx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _byte_len$[ebp], eax
	mov	edx, DWORD PTR _byte_len$[ebp]
	mov	DWORD PTR _glyph_len$[ebp], edx
$LN2@nk_str_ins:

; 6982 :     while (unicode != '\0' && glyph_len) {

	cmp	DWORD PTR _unicode$[ebp], 0
	je	SHORT $LN1@nk_str_ins
	cmp	DWORD PTR _glyph_len$[ebp], 0
	je	SHORT $LN1@nk_str_ins

; 6983 :         glyph_len = nk_utf_decode(text+byte_len, &unicode, 4);

	push	4
	lea	eax, DWORD PTR _unicode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	add	ecx, DWORD PTR _byte_len$[ebp]
	push	ecx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax

; 6984 :         byte_len += glyph_len;

	mov	eax, DWORD PTR _byte_len$[ebp]
	add	eax, DWORD PTR _glyph_len$[ebp]
	mov	DWORD PTR _byte_len$[ebp], eax

; 6985 :         num_runes++;

	mov	eax, DWORD PTR _num_runes$[ebp]
	add	eax, 1
	mov	DWORD PTR _num_runes$[ebp], eax

; 6986 :     }

	jmp	SHORT $LN2@nk_str_ins
$LN1@nk_str_ins:

; 6987 :     nk_str_insert_at_rune(str, pos, text, byte_len);

	mov	eax, DWORD PTR _byte_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_nk_str_insert_at_rune
	add	esp, 16					; 00000010H

; 6988 :     return runes;

	mov	eax, DWORD PTR _runes$[ebp]
$LN5@nk_str_ins:

; 6989 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@nk_str_ins
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@nk_str_ins:
	DD	1
	DD	$LN8@nk_str_ins
$LN8@nk_str_ins:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN7@nk_str_ins
$LN7@nk_str_ins:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_nk_str_insert_str_utf8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_insert_text_utf8
_TEXT	SEGMENT
_unicode$ = -32						; size = 4
_byte_len$ = -20					; size = 4
_i$ = -8						; size = 4
_str$ = 8						; size = 4
_pos$ = 12						; size = 4
_text$ = 16						; size = 4
_len$ = 20						; size = 4
_nk_str_insert_text_utf8 PROC				; COMDAT

; 6957 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6958 :     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 6959 :     int byte_len = 0;

	mov	DWORD PTR _byte_len$[ebp], 0

; 6960 :     nk_rune unicode;
; 6961 : 
; 6962 :     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN8@nk_str_ins
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_insert_text_utf8@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_str_ins:

; 6963 :     NK_ASSERT(text);

	cmp	DWORD PTR _text$[ebp], 0
	jne	SHORT $LN9@nk_str_ins
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_insert_text_utf8@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HIPAKEND@?$AAt?$AAe?$AAx?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_str_ins:

; 6964 :     if (!str || !text || !len) return 0;

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN4@nk_str_ins
	cmp	DWORD PTR _text$[ebp], 0
	je	SHORT $LN4@nk_str_ins
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN5@nk_str_ins
$LN4@nk_str_ins:
	xor	eax, eax
	jmp	SHORT $LN6@nk_str_ins
$LN5@nk_str_ins:

; 6965 :     for (i = 0; i < len; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_str_ins
$LN2@nk_str_ins:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_str_ins:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN1@nk_str_ins

; 6966 :         byte_len += nk_utf_decode(text+byte_len, &unicode, 4);

	push	4
	lea	eax, DWORD PTR _unicode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	add	ecx, DWORD PTR _byte_len$[ebp]
	push	ecx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _byte_len$[ebp]
	mov	DWORD PTR _byte_len$[ebp], eax
	jmp	SHORT $LN2@nk_str_ins
$LN1@nk_str_ins:

; 6967 :     nk_str_insert_at_rune(str, pos, text, byte_len);

	mov	eax, DWORD PTR _byte_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_nk_str_insert_at_rune
	add	esp, 16					; 00000010H

; 6968 :     return len;

	mov	eax, DWORD PTR _len$[ebp]
$LN6@nk_str_ins:

; 6969 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@nk_str_ins
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@nk_str_ins:
	DD	1
	DD	$LN11@nk_str_ins
$LN11@nk_str_ins:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN10@nk_str_ins
$LN10@nk_str_ins:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_nk_str_insert_text_utf8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_insert_str_char
_TEXT	SEGMENT
_str$ = 8						; size = 4
_pos$ = 12						; size = 4
_text$ = 16						; size = 4
_nk_str_insert_str_char PROC				; COMDAT

; 6951 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6952 :     return nk_str_insert_text_utf8(str, pos, text, nk_strlen(text));

	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_nk_str_insert_text_utf8
	add	esp, 16					; 00000010H

; 6953 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_insert_str_char ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_insert_text_char
_TEXT	SEGMENT
_str$ = 8						; size = 4
_pos$ = 12						; size = 4
_text$ = 16						; size = 4
_len$ = 20						; size = 4
_nk_str_insert_text_char PROC				; COMDAT

; 6945 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6946 :     return nk_str_insert_text_utf8(str, pos, text, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_nk_str_insert_text_utf8
	add	esp, 16					; 00000010H

; 6947 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_insert_text_char ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_insert_at_rune
_TEXT	SEGMENT
_buffer$ = -44						; size = 4
_begin$ = -32						; size = 4
_unicode$ = -20						; size = 4
_glyph_len$ = -8					; size = 4
_str$ = 8						; size = 4
_pos$ = 12						; size = 4
_cstr$ = 16						; size = 4
_len$ = 20						; size = 4
_nk_str_insert_at_rune PROC				; COMDAT

; 6925 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6926 :     int glyph_len;
; 6927 :     nk_rune unicode;
; 6928 :     const char *begin;
; 6929 :     const char *buffer;
; 6930 : 
; 6931 :     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN7@nk_str_ins
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_insert_at_rune@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_str_ins:

; 6932 :     NK_ASSERT(cstr);

	cmp	DWORD PTR _cstr$[ebp], 0
	jne	SHORT $LN8@nk_str_ins
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_insert_at_rune@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19FFPPJJEJ@?$AAc?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_str_ins:

; 6933 :     NK_ASSERT(len);

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN9@nk_str_ins
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_insert_at_rune@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17JOFJILLL@?$AAl?$AAe?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_str_ins:

; 6934 :     if (!str || !cstr || !len) return 0;

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN3@nk_str_ins
	cmp	DWORD PTR _cstr$[ebp], 0
	je	SHORT $LN3@nk_str_ins
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN4@nk_str_ins
$LN3@nk_str_ins:
	xor	eax, eax
	jmp	SHORT $LN5@nk_str_ins
$LN4@nk_str_ins:

; 6935 :     begin = nk_str_at_rune(str, pos, &unicode, &glyph_len);

	lea	eax, DWORD PTR _glyph_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_nk_str_at_rune
	add	esp, 16					; 00000010H
	mov	DWORD PTR _begin$[ebp], eax

; 6936 :     if (!str->len)

	mov	eax, DWORD PTR _str$[ebp]
	cmp	DWORD PTR [eax+60], 0
	jne	SHORT $LN2@nk_str_ins

; 6937 :         return nk_str_append_text_char(str, cstr, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cstr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_nk_str_append_text_char
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN5@nk_str_ins
$LN2@nk_str_ins:

; 6938 :     buffer = nk_str_get_const(str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_nk_str_get_const
	add	esp, 4
	mov	DWORD PTR _buffer$[ebp], eax

; 6939 :     if (!begin) return 0;

	cmp	DWORD PTR _begin$[ebp], 0
	jne	SHORT $LN1@nk_str_ins
	xor	eax, eax
	jmp	SHORT $LN5@nk_str_ins
$LN1@nk_str_ins:

; 6940 :     return nk_str_insert_at_char(str, (int)(begin - buffer), cstr, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cstr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _begin$[ebp]
	sub	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_nk_str_insert_at_char
	add	esp, 16					; 00000010H
$LN5@nk_str_ins:

; 6941 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@nk_str_ins
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@nk_str_ins:
	DD	2
	DD	$LN12@nk_str_ins
$LN12@nk_str_ins:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@nk_str_ins
	DD	-20					; ffffffecH
	DD	4
	DD	$LN11@nk_str_ins
$LN11@nk_str_ins:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN10@nk_str_ins:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_nk_str_insert_at_rune ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_insert_at_char
_TEXT	SEGMENT
_copylen$ = -56						; size = 4
_dst$ = -44						; size = 4
_src$ = -32						; size = 4
_mem$ = -20						; size = 4
_i$ = -8						; size = 4
_s$ = 8							; size = 4
_pos$ = 12						; size = 4
_str$ = 16						; size = 4
_len$ = 20						; size = 4
_nk_str_insert_at_char PROC				; COMDAT

; 6889 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6890 :     int i;
; 6891 :     void *mem;
; 6892 :     char *src;
; 6893 :     char *dst;
; 6894 : 
; 6895 :     int copylen;
; 6896 :     NK_ASSERT(s);

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN11@nk_str_ins
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_insert_at_char@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_str_ins:

; 6897 :     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN12@nk_str_ins
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_insert_at_char@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_str_ins:

; 6898 :     NK_ASSERT(len >= 0);

	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN13@nk_str_ins
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_insert_at_char@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BC@OAMMNJJI@?$AAl?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_str_ins:

; 6899 :     if (!s || !str || !len || (nk_size)pos > s->buffer.allocated) return 0;

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN7@nk_str_ins
	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN7@nk_str_ins
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN7@nk_str_ins
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jbe	SHORT $LN8@nk_str_ins
$LN7@nk_str_ins:
	xor	eax, eax
	jmp	$LN9@nk_str_ins
$LN8@nk_str_ins:

; 6900 :     if ((s->buffer.allocated + (nk_size)len >= s->buffer.memory.size) &&
; 6901 :         (s->buffer.type == NK_BUFFER_FIXED)) return 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	cmp	ecx, DWORD PTR [edx+36]
	jb	SHORT $LN6@nk_str_ins
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN6@nk_str_ins
	xor	eax, eax
	jmp	$LN9@nk_str_ins
$LN6@nk_str_ins:

; 6902 : 
; 6903 :     copylen = (int)s->buffer.allocated - pos;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _copylen$[ebp], ecx

; 6904 :     if (!copylen) {

	jne	SHORT $LN5@nk_str_ins

; 6905 :         nk_str_append_text_char(s, str, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_nk_str_append_text_char
	add	esp, 12					; 0000000cH

; 6906 :         return 1;

	mov	eax, 1
	jmp	$LN9@nk_str_ins
$LN5@nk_str_ins:

; 6907 :     }
; 6908 :     mem = nk_buffer_alloc(&s->buffer, NK_BUFFER_FRONT, (nk_size)len * sizeof(char), 0);

	push	0
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_nk_buffer_alloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mem$[ebp], eax

; 6909 :     if (!mem) return 0;

	cmp	DWORD PTR _mem$[ebp], 0
	jne	SHORT $LN4@nk_str_ins
	xor	eax, eax
	jmp	$LN9@nk_str_ins
$LN4@nk_str_ins:

; 6910 : 
; 6911 :     /* memmove */
; 6912 :     NK_ASSERT(((int)pos + (int)len + ((int)copylen - 1)) >= 0);

	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _copylen$[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	test	edx, edx
	jge	SHORT $LN14@nk_str_ins
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_insert_at_char@@9@9
	add	eax, 23					; 00000017H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1GA@LCICMOEC@?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAp?$AAo?$AAs?$AA?5?$AA?$CL?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAl?$AAe?$AAn?$AA?5?$AA?$CL?$AA?5?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAc?$AAo?$AAp@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_str_ins:

; 6913 :     NK_ASSERT(((int)pos + ((int)copylen - 1)) >= 0);

	mov	eax, DWORD PTR _copylen$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	test	edx, edx
	jge	SHORT $LN15@nk_str_ins
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_insert_at_char@@9@9
	add	eax, 24					; 00000018H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EK@BAOJCPPG@?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAp?$AAo?$AAs?$AA?5?$AA?$CL?$AA?5?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAc?$AAo?$AAp?$AAy?$AAl?$AAe?$AAn?$AA?5?$AA?9?$AA?5?$AA1?$AA?$CJ?$AA?$CJ?$AA?5@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@nk_str_ins:

; 6914 :     dst = nk_ptr_add(char, s->buffer.memory.ptr, pos + len + (copylen - 1));

	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _copylen$[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+32]
	mov	DWORD PTR _dst$[ebp], edx

; 6915 :     src = nk_ptr_add(char, s->buffer.memory.ptr, pos + (copylen-1));

	mov	eax, DWORD PTR _copylen$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+32]
	mov	DWORD PTR _src$[ebp], edx

; 6916 :     for (i = 0; i < copylen; ++i) *dst-- = *src--;

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_str_ins
$LN2@nk_str_ins:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_str_ins:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _copylen$[ebp]
	jge	SHORT $LN1@nk_str_ins
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _dst$[ebp]
	sub	eax, 1
	mov	DWORD PTR _dst$[ebp], eax
	mov	ecx, DWORD PTR _src$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _src$[ebp], ecx
	jmp	SHORT $LN2@nk_str_ins
$LN1@nk_str_ins:

; 6917 :     mem = nk_ptr_add(void, s->buffer.memory.ptr, pos);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _mem$[ebp], ecx

; 6918 :     NK_MEMCPY(mem, str, (nk_size)len * sizeof(char));

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mem$[ebp]
	push	edx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 6919 :     s->len = nk_utf_len((char *)s->buffer.memory.ptr, (int)s->buffer.allocated);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_nk_utf_len
	add	esp, 8
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 6920 :     return 1;

	mov	eax, 1
$LN9@nk_str_ins:

; 6921 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_insert_at_char ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_append_str_runes
_TEXT	SEGMENT
_byte_len$ = -32					; size = 4
_glyph$ = -20						; size = 4
_i$ = -8						; size = 4
_str$ = 8						; size = 4
_runes$ = 12						; size = 4
_nk_str_append_str_runes PROC				; COMDAT

; 6873 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6874 :     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 6875 :     nk_glyph glyph;
; 6876 :     int byte_len;
; 6877 :     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN7@nk_str_app
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_append_str_runes@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_str_app:

; 6878 :     if (!str || !runes) return 0;

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN3@nk_str_app
	cmp	DWORD PTR _runes$[ebp], 0
	jne	SHORT $LN2@nk_str_app
$LN3@nk_str_app:
	xor	eax, eax
	jmp	SHORT $LN5@nk_str_app
$LN2@nk_str_app:

; 6879 :     while (runes[i] != '\0') {

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _runes$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN1@nk_str_app

; 6880 :         byte_len = nk_utf_encode(runes[i], glyph, NK_UTF_SIZE);

	push	4
	lea	eax, DWORD PTR _glyph$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _runes$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_nk_utf_encode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _byte_len$[ebp], eax

; 6881 :         nk_str_append_text_char(str, glyph, byte_len);

	mov	eax, DWORD PTR _byte_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_nk_str_append_text_char
	add	esp, 12					; 0000000cH

; 6882 :         i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 6883 :     }

	jmp	SHORT $LN2@nk_str_app
$LN1@nk_str_app:

; 6884 :     return i;

	mov	eax, DWORD PTR _i$[ebp]
$LN5@nk_str_app:

; 6885 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@nk_str_app
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@nk_str_app:
	DD	1
	DD	$LN9@nk_str_app
$LN9@nk_str_app:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@nk_str_app
$LN8@nk_str_app:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	0
_nk_str_append_str_runes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_append_text_runes
_TEXT	SEGMENT
_glyph$ = -32						; size = 4
_byte_len$ = -20					; size = 4
_i$ = -8						; size = 4
_str$ = 8						; size = 4
_text$ = 12						; size = 4
_len$ = 16						; size = 4
_nk_str_append_text_runes PROC				; COMDAT

; 6856 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6857 :     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 6858 :     int byte_len = 0;

	mov	DWORD PTR _byte_len$[ebp], 0

; 6859 :     nk_glyph glyph;
; 6860 : 
; 6861 :     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN9@nk_str_app
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_append_text_runes@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_str_app:

; 6862 :     if (!str || !text || !len) return 0;

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN5@nk_str_app
	cmp	DWORD PTR _text$[ebp], 0
	je	SHORT $LN5@nk_str_app
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN6@nk_str_app
$LN5@nk_str_app:
	xor	eax, eax
	jmp	SHORT $LN7@nk_str_app
$LN6@nk_str_app:

; 6863 :     for (i = 0; i < len; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@nk_str_app
$LN3@nk_str_app:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@nk_str_app:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN2@nk_str_app

; 6864 :         byte_len = nk_utf_encode(text[i], glyph, NK_UTF_SIZE);

	push	4
	lea	eax, DWORD PTR _glyph$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _text$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_nk_utf_encode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _byte_len$[ebp], eax

; 6865 :         if (!byte_len) break;

	cmp	DWORD PTR _byte_len$[ebp], 0
	jne	SHORT $LN1@nk_str_app
	jmp	SHORT $LN2@nk_str_app
$LN1@nk_str_app:

; 6866 :         nk_str_append_text_char(str, glyph, byte_len);

	mov	eax, DWORD PTR _byte_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_nk_str_append_text_char
	add	esp, 12					; 0000000cH

; 6867 :     }

	jmp	SHORT $LN3@nk_str_app
$LN2@nk_str_app:

; 6868 :     return len;

	mov	eax, DWORD PTR _len$[ebp]
$LN7@nk_str_app:

; 6869 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@nk_str_app
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@nk_str_app:
	DD	1
	DD	$LN11@nk_str_app
$LN11@nk_str_app:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN10@nk_str_app
$LN10@nk_str_app:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	0
_nk_str_append_text_runes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_append_str_utf8
_TEXT	SEGMENT
_unicode$ = -56						; size = 4
_glyph_len$ = -44					; size = 4
_num_runes$ = -32					; size = 4
_byte_len$ = -20					; size = 4
_runes$ = -8						; size = 4
_str$ = 8						; size = 4
_text$ = 12						; size = 4
_nk_str_append_str_utf8 PROC				; COMDAT

; 6836 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6837 :     int runes = 0;

	mov	DWORD PTR _runes$[ebp], 0

; 6838 :     int byte_len = 0;

	mov	DWORD PTR _byte_len$[ebp], 0

; 6839 :     int num_runes = 0;

	mov	DWORD PTR _num_runes$[ebp], 0

; 6840 :     int glyph_len = 0;

	mov	DWORD PTR _glyph_len$[ebp], 0

; 6841 :     nk_rune unicode;
; 6842 :     if (!str || !text) return 0;

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN3@nk_str_app
	cmp	DWORD PTR _text$[ebp], 0
	jne	SHORT $LN4@nk_str_app
$LN3@nk_str_app:
	xor	eax, eax
	jmp	SHORT $LN5@nk_str_app
$LN4@nk_str_app:

; 6843 : 
; 6844 :     glyph_len = byte_len = nk_utf_decode(text+byte_len, &unicode, 4);

	push	4
	lea	eax, DWORD PTR _unicode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	add	ecx, DWORD PTR _byte_len$[ebp]
	push	ecx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _byte_len$[ebp], eax
	mov	edx, DWORD PTR _byte_len$[ebp]
	mov	DWORD PTR _glyph_len$[ebp], edx
$LN2@nk_str_app:

; 6845 :     while (unicode != '\0' && glyph_len) {

	cmp	DWORD PTR _unicode$[ebp], 0
	je	SHORT $LN1@nk_str_app
	cmp	DWORD PTR _glyph_len$[ebp], 0
	je	SHORT $LN1@nk_str_app

; 6846 :         glyph_len = nk_utf_decode(text+byte_len, &unicode, 4);

	push	4
	lea	eax, DWORD PTR _unicode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	add	ecx, DWORD PTR _byte_len$[ebp]
	push	ecx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax

; 6847 :         byte_len += glyph_len;

	mov	eax, DWORD PTR _byte_len$[ebp]
	add	eax, DWORD PTR _glyph_len$[ebp]
	mov	DWORD PTR _byte_len$[ebp], eax

; 6848 :         num_runes++;

	mov	eax, DWORD PTR _num_runes$[ebp]
	add	eax, 1
	mov	DWORD PTR _num_runes$[ebp], eax

; 6849 :     }

	jmp	SHORT $LN2@nk_str_app
$LN1@nk_str_app:

; 6850 :     nk_str_append_text_char(str, text, byte_len);

	mov	eax, DWORD PTR _byte_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_nk_str_append_text_char
	add	esp, 12					; 0000000cH

; 6851 :     return runes;

	mov	eax, DWORD PTR _runes$[ebp]
$LN5@nk_str_app:

; 6852 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@nk_str_app
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@nk_str_app:
	DD	1
	DD	$LN8@nk_str_app
$LN8@nk_str_app:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN7@nk_str_app
$LN7@nk_str_app:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_nk_str_append_str_utf8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_append_text_utf8
_TEXT	SEGMENT
_unicode$ = -32						; size = 4
_byte_len$ = -20					; size = 4
_i$ = -8						; size = 4
_str$ = 8						; size = 4
_text$ = 12						; size = 4
_len$ = 16						; size = 4
_nk_str_append_text_utf8 PROC				; COMDAT

; 6823 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6824 :     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 6825 :     int byte_len = 0;

	mov	DWORD PTR _byte_len$[ebp], 0

; 6826 :     nk_rune unicode;
; 6827 :     if (!str || !text || !len) return 0;

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN4@nk_str_app
	cmp	DWORD PTR _text$[ebp], 0
	je	SHORT $LN4@nk_str_app
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN5@nk_str_app
$LN4@nk_str_app:
	xor	eax, eax
	jmp	SHORT $LN6@nk_str_app
$LN5@nk_str_app:

; 6828 :     for (i = 0; i < len; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_str_app
$LN2@nk_str_app:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_str_app:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN1@nk_str_app

; 6829 :         byte_len += nk_utf_decode(text+byte_len, &unicode, 4);

	push	4
	lea	eax, DWORD PTR _unicode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	add	ecx, DWORD PTR _byte_len$[ebp]
	push	ecx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _byte_len$[ebp]
	mov	DWORD PTR _byte_len$[ebp], eax
	jmp	SHORT $LN2@nk_str_app
$LN1@nk_str_app:

; 6830 :     nk_str_append_text_char(str, text, byte_len);

	mov	eax, DWORD PTR _byte_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_nk_str_append_text_char
	add	esp, 12					; 0000000cH

; 6831 :     return len;

	mov	eax, DWORD PTR _len$[ebp]
$LN6@nk_str_app:

; 6832 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@nk_str_app
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@nk_str_app:
	DD	1
	DD	$LN9@nk_str_app
$LN9@nk_str_app:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@nk_str_app
$LN8@nk_str_app:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_nk_str_append_text_utf8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_append_str_char
_TEXT	SEGMENT
_s$ = 8							; size = 4
_str$ = 12						; size = 4
_nk_str_append_str_char PROC				; COMDAT

; 6817 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6818 :     return nk_str_append_text_char(s, str, nk_strlen(str));

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_nk_str_append_text_char
	add	esp, 12					; 0000000cH

; 6819 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_append_str_char ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_append_text_char
_TEXT	SEGMENT
_mem$ = -8						; size = 4
_s$ = 8							; size = 4
_str$ = 12						; size = 4
_len$ = 16						; size = 4
_nk_str_append_text_char PROC				; COMDAT

; 6803 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6804 :     char *mem;
; 6805 :     NK_ASSERT(s);

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN6@nk_str_app
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_append_text_char@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_str_app:

; 6806 :     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN7@nk_str_app
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_append_text_char@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_str_app:

; 6807 :     if (!s || !str || !len) return 0;

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN2@nk_str_app
	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN2@nk_str_app
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN3@nk_str_app
$LN2@nk_str_app:
	xor	eax, eax
	jmp	SHORT $LN4@nk_str_app
$LN3@nk_str_app:

; 6808 :     mem = (char*)nk_buffer_alloc(&s->buffer, NK_BUFFER_FRONT, (nk_size)len * sizeof(char), 0);

	push	0
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_nk_buffer_alloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mem$[ebp], eax

; 6809 :     if (!mem) return 0;

	cmp	DWORD PTR _mem$[ebp], 0
	jne	SHORT $LN1@nk_str_app
	xor	eax, eax
	jmp	SHORT $LN4@nk_str_app
$LN1@nk_str_app:

; 6810 :     NK_MEMCPY(mem, str, (nk_size)len * sizeof(char));

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mem$[ebp]
	push	edx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 6811 :     s->len += nk_utf_len(str, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_nk_utf_len
	add	esp, 8
	mov	edx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 6812 :     return len;

	mov	eax, DWORD PTR _len$[ebp]
$LN4@nk_str_app:

; 6813 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_append_text_char ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_free
_TEXT	SEGMENT
_str$ = 8						; size = 4
_nk_str_free PROC					; COMDAT

; 7241 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7242 :     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN3@nk_str_fre
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_free@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@nk_str_fre:

; 7243 :     nk_buffer_free(&str->buffer);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_nk_buffer_free
	add	esp, 4

; 7244 :     str->len = 0;

	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR [eax+60], 0

; 7245 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_clear
_TEXT	SEGMENT
_str$ = 8						; size = 4
_nk_str_clear PROC					; COMDAT

; 7233 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7234 :     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN3@nk_str_cle
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_str_clear@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@nk_str_cle:

; 7235 :     nk_buffer_clear(&str->buffer);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_nk_buffer_clear
	add	esp, 4

; 7236 :     str->len = 0;

	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR [eax+60], 0

; 7237 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_clear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_init_fixed
_TEXT	SEGMENT
_str$ = 8						; size = 4
_memory$ = 12						; size = 4
_size$ = 16						; size = 4
_nk_str_init_fixed PROC					; COMDAT

; 6796 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6797 :     nk_buffer_init_fixed(&str->buffer, memory, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_nk_buffer_init_fixed
	add	esp, 12					; 0000000cH

; 6798 :     str->len = 0;

	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR [eax+60], 0

; 6799 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_init_fixed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_init
_TEXT	SEGMENT
_str$ = 8						; size = 4
_alloc$ = 12						; size = 4
_size$ = 16						; size = 4
_nk_str_init PROC					; COMDAT

; 6789 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6790 :     nk_buffer_init(&str->buffer, alloc, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_nk_buffer_init
	add	esp, 12					; 0000000cH

; 6791 :     str->len = 0;

	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR [eax+60], 0

; 6792 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_str_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_str_init_default
_TEXT	SEGMENT
_alloc$ = -16						; size = 12
_str$ = 8						; size = 4
_nk_str_init_default PROC				; COMDAT

; 6777 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6778 :     struct nk_allocator alloc;
; 6779 :     alloc.userdata.ptr = 0;

	mov	DWORD PTR _alloc$[ebp], 0

; 6780 :     alloc.alloc = nk_malloc;

	mov	DWORD PTR _alloc$[ebp+4], OFFSET _nk_malloc

; 6781 :     alloc.free = nk_mfree;

	mov	DWORD PTR _alloc$[ebp+8], OFFSET _nk_mfree

; 6782 :     nk_buffer_init(&str->buffer, &alloc, 32);

	push	32					; 00000020H
	lea	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_nk_buffer_init
	add	esp, 12					; 0000000cH

; 6783 :     str->len = 0;

	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR [eax+60], 0

; 6784 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_str_ini
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@nk_str_ini:
	DD	1
	DD	$LN4@nk_str_ini
$LN4@nk_str_ini:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN3@nk_str_ini
$LN3@nk_str_ini:
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	0
_nk_str_init_default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_buffer_total
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_nk_buffer_total PROC					; COMDAT

; 6761 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6762 :     NK_ASSERT(buffer);

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN4@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_total@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@KMGMBAKN@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_buffer_:

; 6763 :     if (!buffer) return 0;

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN1@nk_buffer_
	xor	eax, eax
	jmp	SHORT $LN2@nk_buffer_
$LN1@nk_buffer_:

; 6764 :     return buffer->memory.size;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR [eax+36]
$LN2@nk_buffer_:

; 6765 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_buffer_total ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_buffer_memory_const
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_nk_buffer_memory_const PROC				; COMDAT

; 6753 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6754 :     NK_ASSERT(buffer);

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN4@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_memory_const@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@KMGMBAKN@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_buffer_:

; 6755 :     if (!buffer) return 0;

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN1@nk_buffer_
	xor	eax, eax
	jmp	SHORT $LN2@nk_buffer_
$LN1@nk_buffer_:

; 6756 :     return buffer->memory.ptr;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR [eax+32]
$LN2@nk_buffer_:

; 6757 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_buffer_memory_const ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_buffer_memory
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_nk_buffer_memory PROC					; COMDAT

; 6745 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6746 :     NK_ASSERT(buffer);

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN4@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_memory@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@KMGMBAKN@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_buffer_:

; 6747 :     if (!buffer) return 0;

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN1@nk_buffer_
	xor	eax, eax
	jmp	SHORT $LN2@nk_buffer_
$LN1@nk_buffer_:

; 6748 :     return buffer->memory.ptr;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR [eax+32]
$LN2@nk_buffer_:

; 6749 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_buffer_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_buffer_free
_TEXT	SEGMENT
_b$ = 8							; size = 4
_nk_buffer_free PROC					; COMDAT

; 6721 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6722 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN7@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_free@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_buffer_:

; 6723 :     if (!b || !b->memory.ptr) return;

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN3@nk_buffer_
	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN4@nk_buffer_
$LN3@nk_buffer_:
	jmp	SHORT $LN5@nk_buffer_
$LN4@nk_buffer_:

; 6724 :     if (b->type == NK_BUFFER_FIXED) return;

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@nk_buffer_
	jmp	SHORT $LN5@nk_buffer_
$LN2@nk_buffer_:

; 6725 :     if (!b->pool.free) return;

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN1@nk_buffer_
	jmp	SHORT $LN5@nk_buffer_
$LN1@nk_buffer_:

; 6726 :     NK_ASSERT(b->pool.free);

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN8@nk_buffer_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_buffer_free@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@HIMMPAND@?$AAb?$AA?9?$AA?$DO?$AAp?$AAo?$AAo?$AAl?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_buffer_:

; 6727 :     b->pool.free(b->pool.userdata, b->memory.ptr);

	mov	esi, esp
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@nk_buffer_:

; 6728 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_buffer_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_buffer_clear
_TEXT	SEGMENT
_b$ = 8							; size = 4
_nk_buffer_clear PROC					; COMDAT

; 6710 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6711 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN4@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_clear@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_buffer_:

; 6712 :     if (!b) return;

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN1@nk_buffer_
	jmp	SHORT $LN2@nk_buffer_
$LN1@nk_buffer_:

; 6713 :     b->allocated = 0;

	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+44], 0

; 6714 :     b->size = b->memory.size;

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+56], edx

; 6715 :     b->calls = 0;

	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+52], 0

; 6716 :     b->needed = 0;

	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+48], 0
$LN2@nk_buffer_:

; 6717 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_buffer_clear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_buffer_reset
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_type$ = 12						; size = 4
_nk_buffer_reset PROC					; COMDAT

; 6688 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6689 :     NK_ASSERT(buffer);

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN10@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_reset@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@KMGMBAKN@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_buffer_:

; 6690 :     if (!buffer) return;

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN7@nk_buffer_
	jmp	$LN8@nk_buffer_
$LN7@nk_buffer_:

; 6691 :     if (type == NK_BUFFER_BACK) {

	cmp	DWORD PTR _type$[ebp], 1
	jne	SHORT $LN6@nk_buffer_

; 6692 :         /* reset back buffer either back to marker or empty */
; 6693 :         buffer->needed -= (buffer->memory.size - buffer->marker[type].offset);

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR [eax+36]
	sub	eax, DWORD PTR [edx+ecx*8+4]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	sub	edx, eax
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [eax+48], edx

; 6694 :         if (buffer->marker[type].active)

	mov	eax, DWORD PTR _type$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	cmp	DWORD PTR [ecx+eax*8], 0
	je	SHORT $LN5@nk_buffer_

; 6695 :             buffer->size = buffer->marker[type].offset;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	mov	DWORD PTR [eax+56], ecx
	jmp	SHORT $LN4@nk_buffer_
$LN5@nk_buffer_:

; 6696 :         else buffer->size = buffer->memory.size;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+56], edx
$LN4@nk_buffer_:

; 6697 :         buffer->marker[type].active = nk_false;

	mov	eax, DWORD PTR _type$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [ecx+eax*8], 0

; 6698 :     } else {

	jmp	SHORT $LN8@nk_buffer_
$LN6@nk_buffer_:

; 6699 :         /* reset front buffer either back to back marker or empty */
; 6700 :         buffer->needed -= (buffer->allocated - buffer->marker[type].offset);

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR [eax+44]
	sub	eax, DWORD PTR [edx+ecx*8+4]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	sub	edx, eax
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [eax+48], edx

; 6701 :         if (buffer->marker[type].active)

	mov	eax, DWORD PTR _type$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	cmp	DWORD PTR [ecx+eax*8], 0
	je	SHORT $LN2@nk_buffer_

; 6702 :             buffer->allocated = buffer->marker[type].offset;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	mov	DWORD PTR [eax+44], ecx
	jmp	SHORT $LN1@nk_buffer_
$LN2@nk_buffer_:

; 6703 :         else buffer->allocated = 0;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [eax+44], 0
$LN1@nk_buffer_:

; 6704 :         buffer->marker[type].active = nk_false;

	mov	eax, DWORD PTR _type$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [ecx+eax*8], 0
$LN8@nk_buffer_:

; 6705 :     }
; 6706 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_buffer_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_buffer_mark
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_type$ = 12						; size = 4
_nk_buffer_mark PROC					; COMDAT

; 6677 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6678 :     NK_ASSERT(buffer);

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN6@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_mark@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@KMGMBAKN@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_buffer_:

; 6679 :     if (!buffer) return;

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN3@nk_buffer_
	jmp	SHORT $LN4@nk_buffer_
$LN3@nk_buffer_:

; 6680 :     buffer->marker[type].active = nk_true;

	mov	eax, DWORD PTR _type$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [ecx+eax*8], 1

; 6681 :     if (type == NK_BUFFER_BACK)

	cmp	DWORD PTR _type$[ebp], 1
	jne	SHORT $LN2@nk_buffer_

; 6682 :         buffer->marker[type].offset = buffer->size;

	mov	eax, DWORD PTR _type$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [edx+56]
	mov	DWORD PTR [ecx+eax*8+4], edx
	jmp	SHORT $LN4@nk_buffer_
$LN2@nk_buffer_:

; 6683 :     else buffer->marker[type].offset = buffer->allocated;

	mov	eax, DWORD PTR _type$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+eax*8+4], edx
$LN4@nk_buffer_:

; 6684 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_buffer_mark ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_buffer_push
_TEXT	SEGMENT
_mem$ = -8						; size = 4
_b$ = 8							; size = 4
_type$ = 12						; size = 4
_memory$ = 16						; size = 4
_size$ = 20						; size = 4
_align$ = 24						; size = 4
_nk_buffer_push PROC					; COMDAT

; 6669 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6670 :     void *mem = nk_buffer_alloc(b, type, size, align);

	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_nk_buffer_alloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mem$[ebp], eax

; 6671 :     if (!mem) return;

	cmp	DWORD PTR _mem$[ebp], 0
	jne	SHORT $LN1@nk_buffer_
	jmp	SHORT $LN2@nk_buffer_
$LN1@nk_buffer_:

; 6672 :     NK_MEMCPY(mem, memory, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mem$[ebp]
	push	edx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH
$LN2@nk_buffer_:

; 6673 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_buffer_push ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_buffer_info
_TEXT	SEGMENT
_s$ = 8							; size = 4
_b$ = 12						; size = 4
_nk_buffer_info PROC					; COMDAT

; 6732 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6733 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN5@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_info@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_buffer_:

; 6734 :     NK_ASSERT(s);

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN6@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_info@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_buffer_:

; 6735 :     if (!s || !b) return;

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN1@nk_buffer_
	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN2@nk_buffer_
$LN1@nk_buffer_:
	jmp	SHORT $LN3@nk_buffer_
$LN2@nk_buffer_:

; 6736 :     s->allocated = b->allocated;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+12], edx

; 6737 :     s->size =  b->memory.size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+8], edx

; 6738 :     s->needed = b->needed;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+16], edx

; 6739 :     s->memory = b->memory.ptr;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax], edx

; 6740 :     s->calls = b->calls;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+20], edx
$LN3@nk_buffer_:

; 6741 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_buffer_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_buffer_init_fixed
_TEXT	SEGMENT
_b$ = 8							; size = 4
_m$ = 12						; size = 4
_size$ = 16						; size = 4
_nk_buffer_init_fixed PROC				; COMDAT

; 6531 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6532 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN5@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_init_fixed@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_buffer_:

; 6533 :     NK_ASSERT(m);

	cmp	DWORD PTR _m$[ebp], 0
	jne	SHORT $LN6@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_init_fixed@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13BHPHAPDN@?$AAm?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_buffer_:

; 6534 :     NK_ASSERT(size);

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN7@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_init_fixed@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19GIOODLBE@?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_buffer_:

; 6535 :     if (!b || !m || !size) return;

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN1@nk_buffer_
	cmp	DWORD PTR _m$[ebp], 0
	je	SHORT $LN1@nk_buffer_
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN2@nk_buffer_
$LN1@nk_buffer_:
	jmp	SHORT $LN3@nk_buffer_
$LN2@nk_buffer_:

; 6536 : 
; 6537 :     nk_zero(b, sizeof(*b));

	push	60					; 0000003cH
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 6538 :     b->type = NK_BUFFER_FIXED;

	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+28], 0

; 6539 :     b->memory.ptr = m;

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 6540 :     b->memory.size = size;

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+36], ecx

; 6541 :     b->size = size;

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+56], ecx
$LN3@nk_buffer_:

; 6542 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_buffer_init_fixed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_buffer_init
_TEXT	SEGMENT
_b$ = 8							; size = 4
_a$ = 12						; size = 4
_initial_size$ = 16					; size = 4
_nk_buffer_init PROC					; COMDAT

; 6514 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6515 :     NK_ASSERT(b);

	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN5@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_init@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_buffer_:

; 6516 :     NK_ASSERT(a);

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN6@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_init@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13FNCBLAIF@?$AAa?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_buffer_:

; 6517 :     NK_ASSERT(initial_size);

	cmp	DWORD PTR _initial_size$[ebp], 0
	jne	SHORT $LN7@nk_buffer_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_buffer_init@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@GKDKIPLP@?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_buffer_:

; 6518 :     if (!b || !a || !initial_size) return;

	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN1@nk_buffer_
	cmp	DWORD PTR _a$[ebp], 0
	je	SHORT $LN1@nk_buffer_
	cmp	DWORD PTR _initial_size$[ebp], 0
	jne	SHORT $LN2@nk_buffer_
$LN1@nk_buffer_:
	jmp	SHORT $LN3@nk_buffer_
$LN2@nk_buffer_:

; 6519 : 
; 6520 :     nk_zero(b, sizeof(*b));

	push	60					; 0000003cH
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 6521 :     b->type = NK_BUFFER_DYNAMIC;

	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+28], 1

; 6522 :     b->memory.ptr = a->alloc(a->userdata,0, initial_size);

	mov	esi, esp
	mov	eax, DWORD PTR _initial_size$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+32], eax

; 6523 :     b->memory.size = initial_size;

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _initial_size$[ebp]
	mov	DWORD PTR [eax+36], ecx

; 6524 :     b->size = initial_size;

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _initial_size$[ebp]
	mov	DWORD PTR [eax+56], ecx

; 6525 :     b->grow_factor = 2.0f;

	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [eax+40], xmm0

; 6526 :     b->pool = *a;

	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
$LN3@nk_buffer_:

; 6527 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_buffer_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_buffer_init_default
_TEXT	SEGMENT
_alloc$ = -16						; size = 12
_buffer$ = 8						; size = 4
_nk_buffer_init_default PROC				; COMDAT

; 6502 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6503 :     struct nk_allocator alloc;
; 6504 :     alloc.userdata.ptr = 0;

	mov	DWORD PTR _alloc$[ebp], 0

; 6505 :     alloc.alloc = nk_malloc;

	mov	DWORD PTR _alloc$[ebp+4], OFFSET _nk_malloc

; 6506 :     alloc.free = nk_mfree;

	mov	DWORD PTR _alloc$[ebp+8], OFFSET _nk_mfree

; 6507 :     nk_buffer_init(buffer, &alloc, NK_BUFFER_DEFAULT_INITIAL_SIZE);

	push	4096					; 00001000H
	lea	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_nk_buffer_init
	add	esp, 12					; 0000000cH

; 6508 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_buffer_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@nk_buffer_:
	DD	1
	DD	$LN4@nk_buffer_
$LN4@nk_buffer_:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN3@nk_buffer_
$LN3@nk_buffer_:
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	0
_nk_buffer_init_default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_atlas_clear
_TEXT	SEGMENT
_next$1 = -20						; size = 4
_iter$2 = -8						; size = 4
_atlas$ = 8						; size = 4
_nk_font_atlas_clear PROC				; COMDAT

; 12511: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12512:     NK_ASSERT(atlas);

	cmp	DWORD PTR _atlas$[ebp], 0
	jne	SHORT $LN10@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_clear@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@PFBJFKGM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_font_at:

; 12513:     NK_ASSERT(atlas->temporary.alloc);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN11@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_clear@@9@9
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@BIKDIHM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_font_at:

; 12514:     NK_ASSERT(atlas->temporary.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN12@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_clear@@9@9
	add	ecx, 3
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@BKPFMKJJ@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_font_at:

; 12515:     NK_ASSERT(atlas->permanent.alloc);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN13@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_clear@@9@9
	add	ecx, 4
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@LNDLDAN@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_font_at:

; 12516:     NK_ASSERT(atlas->permanent.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN14@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_clear@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@IMJOFDOF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_font_at:

; 12517:     if (!atlas || !atlas->permanent.alloc || !atlas->permanent.free) return;

	cmp	DWORD PTR _atlas$[ebp], 0
	je	SHORT $LN6@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN6@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN7@nk_font_at
$LN6@nk_font_at:
	jmp	$LN8@nk_font_at
$LN7@nk_font_at:

; 12518: 
; 12519:     nk_font_atlas_cleanup(atlas);

	mov	eax, DWORD PTR _atlas$[ebp]
	push	eax
	call	_nk_font_atlas_cleanup
	add	esp, 4

; 12520:     if (atlas->fonts) {

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+280], 0
	je	SHORT $LN5@nk_font_at

; 12521:         struct nk_font *iter, *next;
; 12522:         for (iter = atlas->fonts; iter; iter = next) {

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	mov	DWORD PTR _iter$2[ebp], ecx
	jmp	SHORT $LN4@nk_font_at
$LN3@nk_font_at:
	mov	eax, DWORD PTR _next$1[ebp]
	mov	DWORD PTR _iter$2[ebp], eax
$LN4@nk_font_at:
	cmp	DWORD PTR _iter$2[ebp], 0
	je	SHORT $LN2@nk_font_at

; 12523:             next = iter->next;

	mov	eax, DWORD PTR _iter$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _next$1[ebp], ecx

; 12524:             atlas->permanent.free(atlas->permanent.userdata, iter);

	mov	esi, esp
	mov	eax, DWORD PTR _iter$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 12525:         }

	jmp	SHORT $LN3@nk_font_at
$LN2@nk_font_at:

; 12526:         atlas->fonts = 0;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [eax+280], 0
$LN5@nk_font_at:

; 12527:     }
; 12528:     if (atlas->glyphs)

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+272], 0
	je	SHORT $LN1@nk_font_at

; 12529:         atlas->permanent.free(atlas->permanent.userdata, atlas->glyphs);

	mov	esi, esp
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+272]
	push	ecx
	mov	edx, DWORD PTR _atlas$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@nk_font_at:

; 12530:     nk_zero_struct(*atlas);

	push	292					; 00000124H
	mov	eax, DWORD PTR _atlas$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8
$LN8@nk_font_at:

; 12531: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_atlas_clear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_atlas_cleanup
_TEXT	SEGMENT
_next$1 = -20						; size = 4
_iter$2 = -8						; size = 4
_atlas$ = 8						; size = 4
_nk_font_atlas_cleanup PROC				; COMDAT

; 12490: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12491:     NK_ASSERT(atlas);

	cmp	DWORD PTR _atlas$[ebp], 0
	jne	SHORT $LN9@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_cleanup@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@PFBJFKGM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_font_at:

; 12492:     NK_ASSERT(atlas->temporary.alloc);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN10@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_cleanup@@9@9
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@BIKDIHM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_font_at:

; 12493:     NK_ASSERT(atlas->temporary.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN11@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_cleanup@@9@9
	add	ecx, 3
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@BKPFMKJJ@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_font_at:

; 12494:     NK_ASSERT(atlas->permanent.alloc);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN12@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_cleanup@@9@9
	add	ecx, 4
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@LNDLDAN@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_font_at:

; 12495:     NK_ASSERT(atlas->permanent.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN13@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_cleanup@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@IMJOFDOF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_font_at:

; 12496: 
; 12497:     if (!atlas || !atlas->permanent.alloc || !atlas->permanent.free) return;

	cmp	DWORD PTR _atlas$[ebp], 0
	je	SHORT $LN5@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN5@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN6@nk_font_at
$LN5@nk_font_at:
	jmp	SHORT $LN7@nk_font_at
$LN6@nk_font_at:

; 12498:     if (atlas->config) {

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+284], 0
	je	SHORT $LN7@nk_font_at

; 12499:         struct nk_font_config *iter, *next;
; 12500:         for (iter = atlas->config; iter; iter = next) {

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	mov	DWORD PTR _iter$2[ebp], ecx
	jmp	SHORT $LN3@nk_font_at
$LN2@nk_font_at:
	mov	eax, DWORD PTR _next$1[ebp]
	mov	DWORD PTR _iter$2[ebp], eax
$LN3@nk_font_at:
	cmp	DWORD PTR _iter$2[ebp], 0
	je	SHORT $LN1@nk_font_at

; 12501:             next = iter->next;

	mov	eax, DWORD PTR _iter$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _next$1[ebp], ecx

; 12502:             atlas->permanent.free(atlas->permanent.userdata, iter->ttf_blob);

	mov	esi, esp
	mov	eax, DWORD PTR _iter$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _atlas$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 12503:             atlas->permanent.free(atlas->permanent.userdata, iter);

	mov	esi, esp
	mov	eax, DWORD PTR _iter$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 12504:         }

	jmp	SHORT $LN2@nk_font_at
$LN1@nk_font_at:

; 12505:         atlas->config = 0;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [eax+284], 0
$LN7@nk_font_at:

; 12506:     }
; 12507: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_atlas_cleanup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_find_glyph
_TEXT	SEGMENT
_diff$1 = -80						; size = 4
_t$2 = -68						; size = 4
_f$3 = -56						; size = 4
_glyph$ = -44						; size = 4
_total_glyphs$ = -32					; size = 4
_count$ = -20						; size = 4
_i$ = -8						; size = 4
_font$ = 8						; size = 4
_unicode$ = 12						; size = 4
_nk_font_find_glyph PROC				; COMDAT

; 11686: {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11687:     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 11688:     int count;
; 11689:     int total_glyphs = 0;

	mov	DWORD PTR _total_glyphs$[ebp], 0

; 11690:     const struct nk_font_glyph *glyph = 0;

	mov	DWORD PTR _glyph$[ebp], 0

; 11691: 
; 11692:     NK_ASSERT(font);

	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN9@nk_font_fi
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_find_glyph@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_font_fi:

; 11693:     NK_ASSERT(font->glyphs);

	mov	eax, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN10@nk_font_fi
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_find_glyph@@9@9
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@JHIPEEHJ@?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAg?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_font_fi:

; 11694:     NK_ASSERT(font->info.ranges);

	mov	eax, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN11@nk_font_fi
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_find_glyph@@9@9
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CE@EGBHPFHC@?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAr?$AAa?$AAn?$AAg?$AAe?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_font_fi:

; 11695:     if (!font || !font->glyphs) return 0;

	cmp	DWORD PTR _font$[ebp], 0
	je	SHORT $LN5@nk_font_fi
	mov	eax, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN6@nk_font_fi
$LN5@nk_font_fi:
	xor	eax, eax
	jmp	$LN7@nk_font_fi
$LN6@nk_font_fi:

; 11696: 
; 11697:     glyph = font->fallback;

	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _glyph$[ebp], ecx

; 11698:     count = nk_range_count(font->info.ranges);

	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_nk_range_count
	add	esp, 4
	mov	DWORD PTR _count$[ebp], eax

; 11699:     for (i = 0; i < count; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@nk_font_fi
$LN3@nk_font_fi:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@nk_font_fi:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN2@nk_font_fi

; 11700:         nk_rune f = font->info.ranges[(i*2)+0];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _f$3[ebp], eax

; 11701:         nk_rune t = font->info.ranges[(i*2)+1];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR [edx+eax*4+4]
	mov	DWORD PTR _t$2[ebp], eax

; 11702:         int diff = (int)((t - f) + 1);

	mov	eax, DWORD PTR _t$2[ebp]
	sub	eax, DWORD PTR _f$3[ebp]
	add	eax, 1
	mov	DWORD PTR _diff$1[ebp], eax

; 11703:         if (unicode >= f && unicode <= t)

	mov	eax, DWORD PTR _unicode$[ebp]
	cmp	eax, DWORD PTR _f$3[ebp]
	jb	SHORT $LN1@nk_font_fi
	mov	eax, DWORD PTR _unicode$[ebp]
	cmp	eax, DWORD PTR _t$2[ebp]
	ja	SHORT $LN1@nk_font_fi

; 11704:             return &font->glyphs[((nk_rune)total_glyphs + (unicode - f))];

	mov	eax, DWORD PTR _unicode$[ebp]
	sub	eax, DWORD PTR _f$3[ebp]
	add	eax, DWORD PTR _total_glyphs$[ebp]
	imul	eax, eax, 48
	mov	ecx, DWORD PTR _font$[ebp]
	add	eax, DWORD PTR [ecx+52]
	jmp	SHORT $LN7@nk_font_fi
$LN1@nk_font_fi:

; 11705:         total_glyphs += diff;

	mov	eax, DWORD PTR _total_glyphs$[ebp]
	add	eax, DWORD PTR _diff$1[ebp]
	mov	DWORD PTR _total_glyphs$[ebp], eax

; 11706:     }

	jmp	SHORT $LN3@nk_font_fi
$LN2@nk_font_fi:

; 11707:     return glyph;

	mov	eax, DWORD PTR _glyph$[ebp]
$LN7@nk_font_fi:

; 11708: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_find_glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_atlas_end
_TEXT	SEGMENT
_font_iter$ = -20					; size = 4
_i$ = -8						; size = 4
_atlas$ = 8						; size = 4
_texture$ = 12						; size = 4
_null$ = 16						; size = 4
_nk_font_atlas_end PROC					; COMDAT

; 12455: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12456:     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 12457:     struct nk_font *font_iter;
; 12458:     NK_ASSERT(atlas);

	cmp	DWORD PTR _atlas$[ebp], 0
	jne	SHORT $LN12@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_end@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@PFBJFKGM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_font_at:

; 12459:     if (!atlas) {

	cmp	DWORD PTR _atlas$[ebp], 0
	jne	SHORT $LN9@nk_font_at

; 12460:         if (!null) return;

	cmp	DWORD PTR _null$[ebp], 0
	jne	SHORT $LN8@nk_font_at
	jmp	$LN10@nk_font_at
$LN8@nk_font_at:

; 12461:         null->texture = texture;

	mov	eax, DWORD PTR _null$[ebp]
	mov	ecx, DWORD PTR _texture$[ebp]
	mov	DWORD PTR [eax], ecx

; 12462:         null->uv = nk_vec2(0.5f,0.5f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _null$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
$LN9@nk_font_at:

; 12463:     }
; 12464:     if (null) {

	cmp	DWORD PTR _null$[ebp], 0
	je	SHORT $LN7@nk_font_at

; 12465:         null->texture = texture;

	mov	eax, DWORD PTR _null$[ebp]
	mov	ecx, DWORD PTR _texture$[ebp]
	mov	DWORD PTR [eax], ecx

; 12466:         null->uv.x = (atlas->custom.x + 0.5f)/(float)atlas->tex_width;

	mov	eax, DWORD PTR _atlas$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	cvtsi2ss xmm0, ecx
	addss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _atlas$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+4]
	divss	xmm0, xmm1
	mov	eax, DWORD PTR _null$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 12467:         null->uv.y = (atlas->custom.y + 0.5f)/(float)atlas->tex_height;

	mov	eax, DWORD PTR _atlas$[ebp]
	movsx	ecx, WORD PTR [eax+38]
	cvtsi2ss xmm0, ecx
	addss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _atlas$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+8]
	divss	xmm0, xmm1
	mov	eax, DWORD PTR _null$[ebp]
	movss	DWORD PTR [eax+8], xmm0
$LN7@nk_font_at:

; 12468:     }
; 12469:     for (font_iter = atlas->fonts; font_iter; font_iter = font_iter->next) {

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	mov	DWORD PTR _font_iter$[ebp], ecx
	jmp	SHORT $LN6@nk_font_at
$LN5@nk_font_at:
	mov	eax, DWORD PTR _font_iter$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _font_iter$[ebp], ecx
$LN6@nk_font_at:
	cmp	DWORD PTR _font_iter$[ebp], 0
	je	SHORT $LN4@nk_font_at

; 12470:         font_iter->texture = texture;

	mov	eax, DWORD PTR _font_iter$[ebp]
	mov	ecx, DWORD PTR _texture$[ebp]
	mov	DWORD PTR [eax+64], ecx

; 12471: #ifdef NK_INCLUDE_VERTEX_BUFFER_OUTPUT
; 12472:         font_iter->handle.texture = texture;

	mov	eax, DWORD PTR _font_iter$[ebp]
	mov	ecx, DWORD PTR _texture$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 12473: #endif
; 12474:     }

	jmp	SHORT $LN5@nk_font_at
$LN4@nk_font_at:

; 12475:     for (i = 0; i < NK_CURSOR_COUNT; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_font_at
$LN2@nk_font_at:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_font_at:
	cmp	DWORD PTR _i$[ebp], 7
	jge	SHORT $LN1@nk_font_at

; 12476:         atlas->cursors[i].img.handle = texture;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR _texture$[ebp]
	mov	DWORD PTR [ecx+eax+44], edx
	jmp	SHORT $LN2@nk_font_at
$LN1@nk_font_at:

; 12477: 
; 12478:     atlas->temporary.free(atlas->temporary.userdata, atlas->pixel);

	mov	esi, esp
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _atlas$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 12479:     atlas->pixel = 0;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [eax], 0

; 12480:     atlas->tex_width = 0;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [eax+4], 0

; 12481:     atlas->tex_height = 0;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [eax+8], 0

; 12482:     atlas->custom.x = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	WORD PTR [ecx+36], ax

; 12483:     atlas->custom.y = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	WORD PTR [ecx+38], ax

; 12484:     atlas->custom.w = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	WORD PTR [ecx+40], ax

; 12485:     atlas->custom.h = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	WORD PTR [ecx+42], ax
$LN10@nk_font_at:

; 12486: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_atlas_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_atlas_bake
_TEXT	SEGMENT
_cursor$1 = -116					; size = 4
_config$2 = -104					; size = 4
_font$3 = -92						; size = 4
_img_rgba$4 = -80					; size = 4
_baker$ = -68						; size = 4
_font_iter$ = -56					; size = 4
_img_size$ = -44					; size = 4
_tmp_size$ = -32					; size = 4
_tmp$ = -20						; size = 4
_i$ = -8						; size = 4
_atlas$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_fmt$ = 20						; size = 4
_nk_font_atlas_bake PROC				; COMDAT

; 12330: {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12331:     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 12332:     void *tmp = 0;

	mov	DWORD PTR _tmp$[ebp], 0

; 12333:     nk_size tmp_size, img_size;
; 12334:     struct nk_font *font_iter;
; 12335:     struct nk_font_baker *baker;
; 12336: 
; 12337:     NK_ASSERT(atlas);

	cmp	DWORD PTR _atlas$[ebp], 0
	jne	SHORT $LN22@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_bake@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@PFBJFKGM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN22@nk_font_at:

; 12338:     NK_ASSERT(atlas->temporary.alloc);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN23@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_bake@@9@9
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@BIKDIHM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN23@nk_font_at:

; 12339:     NK_ASSERT(atlas->temporary.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN24@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_bake@@9@9
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@BKPFMKJJ@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN24@nk_font_at:

; 12340:     NK_ASSERT(atlas->permanent.alloc);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN25@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_bake@@9@9
	add	ecx, 10					; 0000000aH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@LNDLDAN@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN25@nk_font_at:

; 12341:     NK_ASSERT(atlas->permanent.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN26@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_bake@@9@9
	add	ecx, 11					; 0000000bH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@IMJOFDOF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN26@nk_font_at:

; 12342: 
; 12343:     NK_ASSERT(width);

	cmp	DWORD PTR _width$[ebp], 0
	jne	SHORT $LN27@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_bake@@9@9
	add	eax, 13					; 0000000dH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@MDIKEACL@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN27@nk_font_at:

; 12344:     NK_ASSERT(height);

	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN28@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_bake@@9@9
	add	eax, 14					; 0000000eH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@NGBHDANL@?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN28@nk_font_at:

; 12345:     if (!atlas || !width || !height ||
; 12346:         !atlas->temporary.alloc || !atlas->temporary.free ||
; 12347:         !atlas->permanent.alloc || !atlas->permanent.free)

	cmp	DWORD PTR _atlas$[ebp], 0
	je	SHORT $LN18@nk_font_at
	cmp	DWORD PTR _width$[ebp], 0
	je	SHORT $LN18@nk_font_at
	cmp	DWORD PTR _height$[ebp], 0
	je	SHORT $LN18@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN18@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN18@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN18@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN19@nk_font_at
$LN18@nk_font_at:

; 12348:         return 0;

	xor	eax, eax
	jmp	$LN20@nk_font_at
$LN19@nk_font_at:

; 12349: 
; 12350: #ifdef NK_INCLUDE_DEFAULT_FONT
; 12351:     /* no font added so just use default font */
; 12352:     if (!atlas->font_num)

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+288], 0
	jne	SHORT $LN17@nk_font_at

; 12353:         atlas->default_font = nk_font_atlas_add_default(atlas, 13.0f, 0);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@41500000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _atlas$[ebp]
	push	eax
	call	_nk_font_atlas_add_default
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [ecx+276], eax
$LN17@nk_font_at:

; 12354: #endif
; 12355:     NK_ASSERT(atlas->font_num);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+288], 0
	jne	SHORT $LN29@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_bake@@9@9
	add	ecx, 25					; 00000019H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CA@JLAHHNKC@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAf?$AAo?$AAn?$AAt?$AA_?$AAn?$AAu?$AAm?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN29@nk_font_at:

; 12356:     if (!atlas->font_num) return 0;

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+288], 0
	jne	SHORT $LN16@nk_font_at
	xor	eax, eax
	jmp	$LN20@nk_font_at
$LN16@nk_font_at:

; 12357: 
; 12358:     /* allocate temporary baker memory required for the baking process */
; 12359:     nk_font_baker_memory(&tmp_size, &atlas->glyph_count, atlas->config, atlas->font_num);

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+288]
	push	ecx
	mov	edx, DWORD PTR _atlas$[ebp]
	mov	eax, DWORD PTR [edx+284]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	add	ecx, 268				; 0000010cH
	push	ecx
	lea	edx, DWORD PTR _tmp_size$[ebp]
	push	edx
	call	_nk_font_baker_memory
	add	esp, 16					; 00000010H

; 12360:     tmp = atlas->temporary.alloc(atlas->temporary.userdata,0, tmp_size);

	mov	esi, esp
	mov	eax, DWORD PTR _tmp_size$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tmp$[ebp], eax

; 12361:     NK_ASSERT(tmp);

	cmp	DWORD PTR _tmp$[ebp], 0
	jne	SHORT $LN30@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_bake@@9@9
	add	eax, 31					; 0000001fH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17GNJCADOE@?$AAt?$AAm?$AAp?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN30@nk_font_at:

; 12362:     if (!tmp) goto failed;

	cmp	DWORD PTR _tmp$[ebp], 0
	jne	SHORT $LN15@nk_font_at
	jmp	$failed$38
$LN15@nk_font_at:

; 12363: 
; 12364:     /* allocate glyph memory for all fonts */
; 12365:     baker = nk_font_baker(tmp, atlas->glyph_count, atlas->font_num, &atlas->temporary);

	mov	eax, DWORD PTR _atlas$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	push	edx
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	mov	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	_nk_font_baker
	add	esp, 16					; 00000010H
	mov	DWORD PTR _baker$[ebp], eax

; 12366:     atlas->glyphs = (struct nk_font_glyph*)atlas->permanent.alloc(
; 12367:         atlas->permanent.userdata,0, sizeof(struct nk_font_glyph)*(nk_size)atlas->glyph_count);

	mov	eax, DWORD PTR _atlas$[ebp]
	imul	ecx, DWORD PTR [eax+268], 48
	mov	esi, esp
	push	ecx
	push	0
	mov	edx, DWORD PTR _atlas$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [ecx+272], eax

; 12368:     NK_ASSERT(atlas->glyphs);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+272], 0
	jne	SHORT $LN31@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_bake@@9@9
	add	ecx, 38					; 00000026H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BM@DILOJDLD@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAg?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN31@nk_font_at:

; 12369:     if (!atlas->glyphs)

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+272], 0
	jne	SHORT $LN14@nk_font_at

; 12370:         goto failed;

	jmp	$failed$38
$LN14@nk_font_at:

; 12371: 
; 12372:     /* pack all glyphs into a tight fit space */
; 12373:     atlas->custom.w = (NK_CURSOR_DATA_W*2)+1;

	mov	eax, 181				; 000000b5H
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	WORD PTR [ecx+40], ax

; 12374:     atlas->custom.h = NK_CURSOR_DATA_H + 1;

	mov	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	WORD PTR [ecx+42], ax

; 12375:     if (!nk_font_bake_pack(baker, &img_size, width, height, &atlas->custom,
; 12376:         atlas->config, atlas->font_num, &atlas->temporary))

	mov	eax, DWORD PTR _atlas$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	push	edx
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _atlas$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	lea	edx, DWORD PTR _img_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _baker$[ebp]
	push	eax
	call	_nk_font_bake_pack
	add	esp, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN13@nk_font_at

; 12377:         goto failed;

	jmp	$failed$38
$LN13@nk_font_at:

; 12378: 
; 12379:     /* allocate memory for the baked image font atlas */
; 12380:     atlas->pixel = atlas->temporary.alloc(atlas->temporary.userdata,0, img_size);

	mov	esi, esp
	mov	eax, DWORD PTR _img_size$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [edx], eax

; 12381:     NK_ASSERT(atlas->pixel);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN32@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_bake@@9@9
	add	ecx, 51					; 00000033H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@NNCEIJDJ@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAi?$AAx?$AAe?$AAl?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN32@nk_font_at:

; 12382:     if (!atlas->pixel)

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN12@nk_font_at

; 12383:         goto failed;

	jmp	$failed$38
$LN12@nk_font_at:

; 12384: 
; 12385:     /* bake glyphs and custom white pixel into image */
; 12386:     nk_font_bake(baker, atlas->pixel, *width, *height,
; 12387:         atlas->glyphs, atlas->glyph_count, atlas->config, atlas->font_num);

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+288]
	push	ecx
	mov	edx, DWORD PTR _atlas$[ebp]
	mov	eax, DWORD PTR [edx+284]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+272]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _baker$[ebp]
	push	edx
	call	_nk_font_bake
	add	esp, 32					; 00000020H

; 12388:     nk_font_bake_custom_data(atlas->pixel, *width, *height, atlas->custom,
; 12389:             nk_custom_cursor_data, NK_CURSOR_DATA_W, NK_CURSOR_DATA_H, '.', 'X');

	push	88					; 00000058H
	push	46					; 0000002eH
	push	27					; 0000001bH
	push	90					; 0000005aH
	push	OFFSET _nk_custom_cursor_data
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR [eax+36]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_nk_font_bake_custom_data
	add	esp, 40					; 00000028H

; 12390: 
; 12391:     if (fmt == NK_FONT_ATLAS_RGBA32) {

	cmp	DWORD PTR _fmt$[ebp], 1
	jne	$LN11@nk_font_at

; 12392:         /* convert alpha8 image into rgba32 image */
; 12393:         void *img_rgba = atlas->temporary.alloc(atlas->temporary.userdata,0,
; 12394:                             (nk_size)(*width * *height * 4));

	mov	eax, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	mov	edx, DWORD PTR [eax]
	imul	edx, DWORD PTR [ecx]
	shl	edx, 2
	mov	esi, esp
	push	edx
	push	0
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _atlas$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _img_rgba$4[ebp], eax

; 12395:         NK_ASSERT(img_rgba);

	cmp	DWORD PTR _img_rgba$4[ebp], 0
	jne	SHORT $LN33@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_bake@@9@9
	add	eax, 65					; 00000041H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BC@POOMANHF@?$AAi?$AAm?$AAg?$AA_?$AAr?$AAg?$AAb?$AAa?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN33@nk_font_at:

; 12396:         if (!img_rgba) goto failed;

	cmp	DWORD PTR _img_rgba$4[ebp], 0
	jne	SHORT $LN10@nk_font_at
	jmp	$failed$38
$LN10@nk_font_at:

; 12397:         nk_font_bake_convert(img_rgba, *width, *height, atlas->pixel);

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _img_rgba$4[ebp]
	push	eax
	call	_nk_font_bake_convert
	add	esp, 16					; 00000010H

; 12398:         atlas->temporary.free(atlas->temporary.userdata, atlas->pixel);

	mov	esi, esp
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _atlas$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 12399:         atlas->pixel = img_rgba;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR _img_rgba$4[ebp]
	mov	DWORD PTR [eax], ecx
$LN11@nk_font_at:

; 12400:     }
; 12401:     atlas->tex_width = *width;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 12402:     atlas->tex_height = *height;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx

; 12403: 
; 12404:     /* initialize each font */
; 12405:     for (font_iter = atlas->fonts; font_iter; font_iter = font_iter->next) {

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	mov	DWORD PTR _font_iter$[ebp], ecx
	jmp	SHORT $LN9@nk_font_at
$LN8@nk_font_at:
	mov	eax, DWORD PTR _font_iter$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _font_iter$[ebp], ecx
$LN9@nk_font_at:
	cmp	DWORD PTR _font_iter$[ebp], 0
	je	SHORT $LN7@nk_font_at

; 12406:         struct nk_font *font = font_iter;

	mov	eax, DWORD PTR _font_iter$[ebp]
	mov	DWORD PTR _font$3[ebp], eax

; 12407:         struct nk_font_config *config = font->config;

	mov	eax, DWORD PTR _font$3[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _config$2[ebp], ecx

; 12408:         nk_font_init(font, config->size, config->fallback_glyph, atlas->glyphs,
; 12409:             config->font, nk_handle_ptr(0));

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _config$2[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _atlas$[ebp]
	mov	eax, DWORD PTR [edx+272]
	push	eax
	mov	ecx, DWORD PTR _config$2[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _config$2[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _font$3[ebp]
	push	ecx
	call	_nk_font_init
	add	esp, 24					; 00000018H

; 12410:     }

	jmp	SHORT $LN8@nk_font_at
$LN7@nk_font_at:

; 12411: 
; 12412:     /* initialize each cursor */
; 12413:     {NK_STORAGE const struct nk_vec2 nk_cursor_data[NK_CURSOR_COUNT][3] = {
; 12414:         /* Pos ----- Size ------- Offset --*/
; 12415:         {{ 0, 3},   {12,19},    { 0, 0}},
; 12416:         {{13, 0},   { 7,16},    { 4, 8}},
; 12417:         {{31, 0},   {23,23},    {11,11}},
; 12418:         {{21, 0},   { 9, 23},   { 5,11}},
; 12419:         {{55,18},   {23, 9},    {11, 5}},
; 12420:         {{73, 0},   {17,17},    { 9, 9}},
; 12421:         {{55, 0},   {17,17},    { 9, 9}}
; 12422:     };
; 12423:     for (i = 0; i < NK_CURSOR_COUNT; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@nk_font_at
$LN5@nk_font_at:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@nk_font_at:
	cmp	DWORD PTR _i$[ebp], 7
	jge	$LN4@nk_font_at

; 12424:         struct nk_cursor *cursor = &atlas->cursors[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _atlas$[ebp]
	lea	edx, DWORD PTR [ecx+eax+44]
	mov	DWORD PTR _cursor$1[ebp], edx

; 12425:         cursor->img.w = (unsigned short)*width;

	mov	eax, DWORD PTR _cursor$1[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax+4], dx

; 12426:         cursor->img.h = (unsigned short)*height;

	mov	eax, DWORD PTR _cursor$1[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax+6], dx

; 12427:         cursor->img.region[0] = (unsigned short)(atlas->custom.x + nk_cursor_data[i][0].x);

	mov	eax, DWORD PTR _atlas$[ebp]
	movsx	ecx, WORD PTR [eax+36]
	cvtsi2ss xmm0, ecx
	imul	edx, DWORD PTR _i$[ebp], 24
	mov	eax, 8
	imul	ecx, eax, 0
	addss	xmm0, DWORD PTR ?nk_cursor_data@?5??nk_font_atlas_bake@@9@9[edx+ecx]
	cvttss2si edx, xmm0
	mov	eax, 2
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _cursor$1[ebp]
	mov	WORD PTR [eax+ecx+8], dx

; 12428:         cursor->img.region[1] = (unsigned short)(atlas->custom.y + nk_cursor_data[i][0].y);

	mov	eax, DWORD PTR _atlas$[ebp]
	movsx	ecx, WORD PTR [eax+38]
	cvtsi2ss xmm0, ecx
	imul	edx, DWORD PTR _i$[ebp], 24
	mov	eax, 8
	imul	ecx, eax, 0
	addss	xmm0, DWORD PTR ?nk_cursor_data@?5??nk_font_atlas_bake@@9@9[edx+ecx+4]
	cvttss2si edx, xmm0
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _cursor$1[ebp]
	mov	WORD PTR [ecx+eax+8], dx

; 12429:         cursor->img.region[2] = (unsigned short)nk_cursor_data[i][1].x;

	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, 8
	shl	ecx, 0
	cvttss2si edx, DWORD PTR ?nk_cursor_data@?5??nk_font_atlas_bake@@9@9[eax+ecx]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _cursor$1[ebp]
	mov	WORD PTR [ecx+eax+8], dx

; 12430:         cursor->img.region[3] = (unsigned short)nk_cursor_data[i][1].y;

	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, 8
	shl	ecx, 0
	cvttss2si edx, DWORD PTR ?nk_cursor_data@?5??nk_font_atlas_bake@@9@9[eax+ecx+4]
	mov	eax, 2
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _cursor$1[ebp]
	mov	WORD PTR [eax+ecx+8], dx

; 12431:         cursor->size = nk_cursor_data[i][1];

	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR ?nk_cursor_data@?5??nk_font_atlas_bake@@9@9[eax+ecx]
	mov	eax, DWORD PTR ?nk_cursor_data@?5??nk_font_atlas_bake@@9@9[eax+ecx+4]
	mov	ecx, DWORD PTR _cursor$1[ebp]
	mov	DWORD PTR [ecx+16], edx
	mov	DWORD PTR [ecx+20], eax

; 12432:         cursor->offset = nk_cursor_data[i][2];

	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR ?nk_cursor_data@?5??nk_font_atlas_bake@@9@9[eax+ecx]
	mov	eax, DWORD PTR ?nk_cursor_data@?5??nk_font_atlas_bake@@9@9[eax+ecx+4]
	mov	ecx, DWORD PTR _cursor$1[ebp]
	mov	DWORD PTR [ecx+24], edx
	mov	DWORD PTR [ecx+28], eax

; 12433:     }}

	jmp	$LN5@nk_font_at
$LN4@nk_font_at:

; 12434:     /* free temporary memory */
; 12435:     atlas->temporary.free(atlas->temporary.userdata, tmp);

	mov	esi, esp
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 12436:     return atlas->pixel;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	eax, DWORD PTR [eax]
	jmp	$LN20@nk_font_at
$failed$38:

; 12437: 
; 12438: failed:
; 12439:     /* error so cleanup all memory */
; 12440:     if (tmp) atlas->temporary.free(atlas->temporary.userdata, tmp);

	cmp	DWORD PTR _tmp$[ebp], 0
	je	SHORT $LN3@nk_font_at
	mov	esi, esp
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@nk_font_at:

; 12441:     if (atlas->glyphs) {

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+272], 0
	je	SHORT $LN2@nk_font_at

; 12442:         atlas->permanent.free(atlas->permanent.userdata, atlas->glyphs);

	mov	esi, esp
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+272]
	push	ecx
	mov	edx, DWORD PTR _atlas$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 12443:         atlas->glyphs = 0;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [eax+272], 0
$LN2@nk_font_at:

; 12444:     }
; 12445:     if (atlas->pixel) {

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@nk_font_at

; 12446:         atlas->temporary.free(atlas->temporary.userdata, atlas->pixel);

	mov	esi, esp
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _atlas$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 12447:         atlas->pixel = 0;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [eax], 0
$LN1@nk_font_at:

; 12448:     }
; 12449:     return 0;

	xor	eax, eax
$LN20@nk_font_at:

; 12450: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN37@nk_font_at
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN37@nk_font_at:
	DD	2
	DD	$LN36@nk_font_at
$LN36@nk_font_at:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN34@nk_font_at
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN35@nk_font_at
$LN35@nk_font_at:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN34@nk_font_at:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_nk_font_atlas_bake ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_atlas_add_compressed_base85
_TEXT	SEGMENT
_font$ = -32						; size = 4
_compressed_data$ = -20					; size = 4
_compressed_size$ = -8					; size = 4
_atlas$ = 8						; size = 4
_data_base85$ = 12					; size = 4
_height$ = 16						; size = 4
_config$ = 20						; size = 4
_nk_font_atlas_add_compressed_base85 PROC		; COMDAT

; 12285: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12286:     int compressed_size;
; 12287:     void *compressed_data;
; 12288:     struct nk_font *font;
; 12289: 
; 12290:     NK_ASSERT(atlas);

	cmp	DWORD PTR _atlas$[ebp], 0
	jne	SHORT $LN6@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_compressed_base85@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@PFBJFKGM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_font_at:

; 12291:     NK_ASSERT(atlas->temporary.alloc);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN7@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_compressed_base85@@9@9
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@BIKDIHM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_font_at:

; 12292:     NK_ASSERT(atlas->temporary.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN8@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_compressed_base85@@9@9
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@BKPFMKJJ@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_font_at:

; 12293:     NK_ASSERT(atlas->permanent.alloc);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN9@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_compressed_base85@@9@9
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@LNDLDAN@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_font_at:

; 12294:     NK_ASSERT(atlas->permanent.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN10@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_compressed_base85@@9@9
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@IMJOFDOF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_font_at:

; 12295: 
; 12296:     NK_ASSERT(data_base85);

	cmp	DWORD PTR _data_base85$[ebp], 0
	jne	SHORT $LN11@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_compressed_base85@@9@9
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BI@DCDGNPB@?$AAd?$AAa?$AAt?$AAa?$AA_?$AAb?$AAa?$AAs?$AAe?$AA8?$AA5?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_font_at:

; 12297:     if (!atlas || !data_base85 || !atlas->temporary.alloc || !atlas->temporary.free ||
; 12298:         !atlas->permanent.alloc || !atlas->permanent.free)

	cmp	DWORD PTR _atlas$[ebp], 0
	je	SHORT $LN2@nk_font_at
	cmp	DWORD PTR _data_base85$[ebp], 0
	je	SHORT $LN2@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN2@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN2@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN3@nk_font_at
$LN2@nk_font_at:

; 12299:         return 0;

	xor	eax, eax
	jmp	$LN4@nk_font_at
$LN3@nk_font_at:

; 12300: 
; 12301:     compressed_size = (((int)nk_strlen(data_base85) + 4) / 5) * 4;

	mov	eax, DWORD PTR _data_base85$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	add	eax, 4
	cdq
	mov	ecx, 5
	idiv	ecx
	shl	eax, 2
	mov	DWORD PTR _compressed_size$[ebp], eax

; 12302:     compressed_data = atlas->temporary.alloc(atlas->temporary.userdata,0, (nk_size)compressed_size);

	mov	esi, esp
	mov	eax, DWORD PTR _compressed_size$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _compressed_data$[ebp], eax

; 12303:     NK_ASSERT(compressed_data);

	cmp	DWORD PTR _compressed_data$[ebp], 0
	jne	SHORT $LN12@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_compressed_base85@@9@9
	add	eax, 18					; 00000012H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CA@NPEFJEMF@?$AAc?$AAo?$AAm?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_font_at:

; 12304:     if (!compressed_data) return 0;

	cmp	DWORD PTR _compressed_data$[ebp], 0
	jne	SHORT $LN1@nk_font_at
	xor	eax, eax
	jmp	SHORT $LN4@nk_font_at
$LN1@nk_font_at:

; 12305:     nk_decode_85((unsigned char*)compressed_data, (const unsigned char*)data_base85);

	mov	eax, DWORD PTR _data_base85$[ebp]
	push	eax
	mov	ecx, DWORD PTR _compressed_data$[ebp]
	push	ecx
	call	_nk_decode_85
	add	esp, 8

; 12306:     font = nk_font_atlas_add_compressed(atlas, compressed_data,
; 12307:                     (nk_size)compressed_size, height, config);

	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _compressed_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _compressed_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _atlas$[ebp]
	push	eax
	call	_nk_font_atlas_add_compressed
	add	esp, 20					; 00000014H
	mov	DWORD PTR _font$[ebp], eax

; 12308:     atlas->temporary.free(atlas->temporary.userdata, compressed_data);

	mov	esi, esp
	mov	eax, DWORD PTR _compressed_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 12309:     return font;

	mov	eax, DWORD PTR _font$[ebp]
$LN4@nk_font_at:

; 12310: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_atlas_add_compressed_base85 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_atlas_add_compressed
_TEXT	SEGMENT
tv174 = -336						; size = 4
$T1 = -328						; size = 48
_cfg$ = -80						; size = 48
_decompressed_data$ = -24				; size = 4
_decompressed_size$ = -12				; size = 4
__$ArrayPad$ = -4					; size = 4
_atlas$ = 8						; size = 4
_compressed_data$ = 12					; size = 4
_compressed_size$ = 16					; size = 4
_height$ = 20						; size = 4
_config$ = 24						; size = 4
_nk_font_atlas_add_compressed PROC			; COMDAT

; 12250: {

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 12251:     unsigned int decompressed_size;
; 12252:     void *decompressed_data;
; 12253:     struct nk_font_config cfg;
; 12254: 
; 12255:     NK_ASSERT(atlas);

	cmp	DWORD PTR _atlas$[ebp], 0
	jne	SHORT $LN6@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_compressed@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@PFBJFKGM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_font_at:

; 12256:     NK_ASSERT(atlas->temporary.alloc);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN7@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_compressed@@9@9
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@BIKDIHM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_font_at:

; 12257:     NK_ASSERT(atlas->temporary.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN8@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_compressed@@9@9
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@BKPFMKJJ@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_font_at:

; 12258:     NK_ASSERT(atlas->permanent.alloc);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN9@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_compressed@@9@9
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@LNDLDAN@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_font_at:

; 12259:     NK_ASSERT(atlas->permanent.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN10@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_compressed@@9@9
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@IMJOFDOF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_font_at:

; 12260: 
; 12261:     NK_ASSERT(compressed_data);

	cmp	DWORD PTR _compressed_data$[ebp], 0
	jne	SHORT $LN11@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_compressed@@9@9
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CA@NPEFJEMF@?$AAc?$AAo?$AAm?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_font_at:

; 12262:     NK_ASSERT(compressed_size);

	cmp	DWORD PTR _compressed_size$[ebp], 0
	jne	SHORT $LN12@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_compressed@@9@9
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CA@HMLKODMG@?$AAc?$AAo?$AAm?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_font_at:

; 12263:     if (!atlas || !compressed_data || !atlas->temporary.alloc || !atlas->temporary.free ||
; 12264:         !atlas->permanent.alloc || !atlas->permanent.free)

	cmp	DWORD PTR _atlas$[ebp], 0
	je	SHORT $LN2@nk_font_at
	cmp	DWORD PTR _compressed_data$[ebp], 0
	je	SHORT $LN2@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN2@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN2@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN3@nk_font_at
$LN2@nk_font_at:

; 12265:         return 0;

	xor	eax, eax
	jmp	$LN4@nk_font_at
$LN3@nk_font_at:

; 12266: 
; 12267:     decompressed_size = nk_decompress_length((unsigned char*)compressed_data);

	mov	eax, DWORD PTR _compressed_data$[ebp]
	push	eax
	call	_nk_decompress_length
	add	esp, 4
	mov	DWORD PTR _decompressed_size$[ebp], eax

; 12268:     decompressed_data = atlas->permanent.alloc(atlas->permanent.userdata,0,decompressed_size);

	mov	esi, esp
	mov	eax, DWORD PTR _decompressed_size$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _decompressed_data$[ebp], eax

; 12269:     NK_ASSERT(decompressed_data);

	cmp	DWORD PTR _decompressed_data$[ebp], 0
	jne	SHORT $LN13@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_compressed@@9@9
	add	eax, 19					; 00000013H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CE@NFICCMAF@?$AAd?$AAe?$AAc?$AAo?$AAm?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_font_at:

; 12270:     if (!decompressed_data) return 0;

	cmp	DWORD PTR _decompressed_data$[ebp], 0
	jne	SHORT $LN1@nk_font_at
	xor	eax, eax
	jmp	SHORT $LN4@nk_font_at
$LN1@nk_font_at:

; 12271:     nk_decompress((unsigned char*)decompressed_data, (unsigned char*)compressed_data,
; 12272:         (unsigned int)compressed_size);

	mov	eax, DWORD PTR _compressed_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _compressed_data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _decompressed_data$[ebp]
	push	edx
	call	_nk_decompress
	add	esp, 12					; 0000000cH

; 12273: 
; 12274:     cfg = (config) ? *config: nk_font_config(height);

	cmp	DWORD PTR _config$[ebp], 0
	je	SHORT $LN14@nk_font_at
	mov	eax, DWORD PTR _config$[ebp]
	mov	DWORD PTR tv174[ebp], eax
	jmp	SHORT $LN15@nk_font_at
$LN14@nk_font_at:
	push	ecx
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_nk_font_config
	add	esp, 8
	mov	DWORD PTR tv174[ebp], eax
$LN15@nk_font_at:
	mov	ecx, 12					; 0000000cH
	mov	esi, DWORD PTR tv174[ebp]
	lea	edi, DWORD PTR _cfg$[ebp]
	rep movsd

; 12275:     cfg.ttf_blob = decompressed_data;

	mov	eax, DWORD PTR _decompressed_data$[ebp]
	mov	DWORD PTR _cfg$[ebp+4], eax

; 12276:     cfg.ttf_size = decompressed_size;

	mov	eax, DWORD PTR _decompressed_size$[ebp]
	mov	DWORD PTR _cfg$[ebp+8], eax

; 12277:     cfg.size = height;

	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR _cfg$[ebp+20], xmm0

; 12278:     cfg.ttf_data_owned_by_atlas = 1;

	mov	BYTE PTR _cfg$[ebp+12], 1

; 12279:     return nk_font_atlas_add(atlas, &cfg);

	lea	eax, DWORD PTR _cfg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	push	ecx
	call	_nk_font_atlas_add
	add	esp, 8
$LN4@nk_font_at:

; 12280: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@nk_font_at
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN18@nk_font_at:
	DD	1
	DD	$LN17@nk_font_at
$LN17@nk_font_at:
	DD	-80					; ffffffb0H
	DD	48					; 00000030H
	DD	$LN16@nk_font_at
$LN16@nk_font_at:
	DB	99					; 00000063H
	DB	102					; 00000066H
	DB	103					; 00000067H
	DB	0
_nk_font_atlas_add_compressed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_atlas_add_from_file
_TEXT	SEGMENT
tv142 = -336						; size = 4
$T1 = -328						; size = 48
_cfg$ = -80						; size = 48
_memory$ = -24						; size = 4
_size$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_atlas$ = 8						; size = 4
_file_path$ = 12					; size = 4
_height$ = 16						; size = 4
_config$ = 20						; size = 4
_nk_font_atlas_add_from_file PROC			; COMDAT

; 12222: {

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 12223:     nk_size size;
; 12224:     char *memory;
; 12225:     struct nk_font_config cfg;
; 12226: 
; 12227:     NK_ASSERT(atlas);

	cmp	DWORD PTR _atlas$[ebp], 0
	jne	SHORT $LN6@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_from_file@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@PFBJFKGM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_font_at:

; 12228:     NK_ASSERT(atlas->temporary.alloc);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN7@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_from_file@@9@9
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@BIKDIHM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_font_at:

; 12229:     NK_ASSERT(atlas->temporary.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN8@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_from_file@@9@9
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@BKPFMKJJ@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_font_at:

; 12230:     NK_ASSERT(atlas->permanent.alloc);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN9@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_from_file@@9@9
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@LNDLDAN@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_font_at:

; 12231:     NK_ASSERT(atlas->permanent.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN10@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_from_file@@9@9
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@IMJOFDOF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_font_at:

; 12232: 
; 12233:     if (!atlas || !file_path) return 0;

	cmp	DWORD PTR _atlas$[ebp], 0
	je	SHORT $LN2@nk_font_at
	cmp	DWORD PTR _file_path$[ebp], 0
	jne	SHORT $LN3@nk_font_at
$LN2@nk_font_at:
	xor	eax, eax
	jmp	$LN4@nk_font_at
$LN3@nk_font_at:

; 12234:     memory = nk_file_load(file_path, &size, &atlas->permanent);

	mov	eax, DWORD PTR _atlas$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _file_path$[ebp]
	push	edx
	call	_nk_file_load
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _memory$[ebp], eax

; 12235:     if (!memory) return 0;

	cmp	DWORD PTR _memory$[ebp], 0
	jne	SHORT $LN1@nk_font_at
	xor	eax, eax
	jmp	SHORT $LN4@nk_font_at
$LN1@nk_font_at:

; 12236: 
; 12237:     cfg = (config) ? *config: nk_font_config(height);

	cmp	DWORD PTR _config$[ebp], 0
	je	SHORT $LN11@nk_font_at
	mov	eax, DWORD PTR _config$[ebp]
	mov	DWORD PTR tv142[ebp], eax
	jmp	SHORT $LN12@nk_font_at
$LN11@nk_font_at:
	push	ecx
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_nk_font_config
	add	esp, 8
	mov	DWORD PTR tv142[ebp], eax
$LN12@nk_font_at:
	mov	ecx, 12					; 0000000cH
	mov	esi, DWORD PTR tv142[ebp]
	lea	edi, DWORD PTR _cfg$[ebp]
	rep movsd

; 12238:     cfg.ttf_blob = memory;

	mov	eax, DWORD PTR _memory$[ebp]
	mov	DWORD PTR _cfg$[ebp+4], eax

; 12239:     cfg.ttf_size = size;

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _cfg$[ebp+8], eax

; 12240:     cfg.size = height;

	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR _cfg$[ebp+20], xmm0

; 12241:     cfg.ttf_data_owned_by_atlas = 1;

	mov	BYTE PTR _cfg$[ebp+12], 1

; 12242:     return nk_font_atlas_add(atlas, &cfg);

	lea	eax, DWORD PTR _cfg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	push	ecx
	call	_nk_font_atlas_add
	add	esp, 8
$LN4@nk_font_at:

; 12243: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@nk_font_at
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN16@nk_font_at:
	DD	2
	DD	$LN15@nk_font_at
$LN15@nk_font_at:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN13@nk_font_at
	DD	-80					; ffffffb0H
	DD	48					; 00000030H
	DD	$LN14@nk_font_at
$LN14@nk_font_at:
	DB	99					; 00000063H
	DB	102					; 00000066H
	DB	103					; 00000067H
	DB	0
$LN13@nk_font_at:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_nk_font_atlas_add_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_atlas_add_from_memory
_TEXT	SEGMENT
tv157 = -312						; size = 4
$T1 = -304						; size = 48
_cfg$ = -56						; size = 48
__$ArrayPad$ = -4					; size = 4
_atlas$ = 8						; size = 4
_memory$ = 12						; size = 4
_size$ = 16						; size = 4
_height$ = 20						; size = 4
_config$ = 24						; size = 4
_nk_font_atlas_add_from_memory PROC			; COMDAT

; 12196: {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 12197:     struct nk_font_config cfg;
; 12198:     NK_ASSERT(memory);

	cmp	DWORD PTR _memory$[ebp], 0
	jne	SHORT $LN5@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_from_memory@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@NIJNBMFJ@?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_font_at:

; 12199:     NK_ASSERT(size);

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN6@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_from_memory@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19GIOODLBE@?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_font_at:

; 12200: 
; 12201:     NK_ASSERT(atlas);

	cmp	DWORD PTR _atlas$[ebp], 0
	jne	SHORT $LN7@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_from_memory@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@PFBJFKGM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_font_at:

; 12202:     NK_ASSERT(atlas->temporary.alloc);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN8@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_from_memory@@9@9
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@BIKDIHM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_font_at:

; 12203:     NK_ASSERT(atlas->temporary.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN9@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_from_memory@@9@9
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@BKPFMKJJ@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_font_at:

; 12204:     NK_ASSERT(atlas->permanent.alloc);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN10@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_from_memory@@9@9
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@LNDLDAN@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_font_at:

; 12205:     NK_ASSERT(atlas->permanent.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN11@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_from_memory@@9@9
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@IMJOFDOF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_font_at:

; 12206:     if (!atlas || !atlas->temporary.alloc || !atlas->temporary.free || !memory || !size ||
; 12207:         !atlas->permanent.alloc || !atlas->permanent.free)

	cmp	DWORD PTR _atlas$[ebp], 0
	je	SHORT $LN1@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN1@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN1@nk_font_at
	cmp	DWORD PTR _memory$[ebp], 0
	je	SHORT $LN1@nk_font_at
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN1@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN2@nk_font_at
$LN1@nk_font_at:

; 12208:         return 0;

	xor	eax, eax
	jmp	SHORT $LN3@nk_font_at
$LN2@nk_font_at:

; 12209: 
; 12210:     cfg = (config) ? *config: nk_font_config(height);

	cmp	DWORD PTR _config$[ebp], 0
	je	SHORT $LN12@nk_font_at
	mov	eax, DWORD PTR _config$[ebp]
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN13@nk_font_at
$LN12@nk_font_at:
	push	ecx
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_nk_font_config
	add	esp, 8
	mov	DWORD PTR tv157[ebp], eax
$LN13@nk_font_at:
	mov	ecx, 12					; 0000000cH
	mov	esi, DWORD PTR tv157[ebp]
	lea	edi, DWORD PTR _cfg$[ebp]
	rep movsd

; 12211:     cfg.ttf_blob = memory;

	mov	eax, DWORD PTR _memory$[ebp]
	mov	DWORD PTR _cfg$[ebp+4], eax

; 12212:     cfg.ttf_size = size;

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _cfg$[ebp+8], eax

; 12213:     cfg.size = height;

	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR _cfg$[ebp+20], xmm0

; 12214:     cfg.ttf_data_owned_by_atlas = 0;

	mov	BYTE PTR _cfg$[ebp+12], 0

; 12215:     return nk_font_atlas_add(atlas, &cfg);

	lea	eax, DWORD PTR _cfg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	push	ecx
	call	_nk_font_atlas_add
	add	esp, 8
$LN3@nk_font_at:

; 12216: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@nk_font_at
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@nk_font_at:
	DD	1
	DD	$LN15@nk_font_at
$LN15@nk_font_at:
	DD	-56					; ffffffc8H
	DD	48					; 00000030H
	DD	$LN14@nk_font_at
$LN14@nk_font_at:
	DB	99					; 00000063H
	DB	102					; 00000066H
	DB	103					; 00000067H
	DB	0
_nk_font_atlas_add_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_atlas_add_default
_TEXT	SEGMENT
_atlas$ = 8						; size = 4
_pixel_height$ = 12					; size = 4
_config$ = 16						; size = 4
_nk_font_atlas_add_default PROC				; COMDAT

; 12316: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12317:     NK_ASSERT(atlas);

	cmp	DWORD PTR _atlas$[ebp], 0
	jne	SHORT $LN3@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_default@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@PFBJFKGM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@nk_font_at:

; 12318:     NK_ASSERT(atlas->temporary.alloc);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_default@@9@9
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@BIKDIHM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_font_at:

; 12319:     NK_ASSERT(atlas->temporary.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN5@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_default@@9@9
	add	ecx, 3
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@BKPFMKJJ@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_font_at:

; 12320:     NK_ASSERT(atlas->permanent.alloc);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN6@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_default@@9@9
	add	ecx, 4
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@LNDLDAN@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_font_at:

; 12321:     NK_ASSERT(atlas->permanent.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN7@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add_default@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@IMJOFDOF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_font_at:

; 12322:     return nk_font_atlas_add_compressed_base85(atlas,
; 12323:         nk_proggy_clean_ttf_compressed_data_base85, pixel_height, config);

	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _pixel_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET _nk_proggy_clean_ttf_compressed_data_base85
	mov	ecx, DWORD PTR _atlas$[ebp]
	push	ecx
	call	_nk_font_atlas_add_compressed_base85
	add	esp, 16					; 00000010H

; 12324: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_atlas_add_default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_atlas_add
_TEXT	SEGMENT
_cfg$ = -20						; size = 4
_font$ = -8						; size = 4
_atlas$ = 8						; size = 4
_config$ = 12						; size = 4
_nk_font_atlas_add PROC					; COMDAT

; 12121: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12122:     struct nk_font *font = 0;

	mov	DWORD PTR _font$[ebp], 0

; 12123:     struct nk_font_config *cfg;
; 12124: 
; 12125:     NK_ASSERT(atlas);

	cmp	DWORD PTR _atlas$[ebp], 0
	jne	SHORT $LN15@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@PFBJFKGM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@nk_font_at:

; 12126:     NK_ASSERT(atlas->permanent.alloc);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN16@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@LNDLDAN@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN16@nk_font_at:

; 12127:     NK_ASSERT(atlas->permanent.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN17@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add@@9@9
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@IMJOFDOF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN17@nk_font_at:

; 12128:     NK_ASSERT(atlas->temporary.alloc);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN18@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add@@9@9
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@BIKDIHM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@nk_font_at:

; 12129:     NK_ASSERT(atlas->temporary.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN19@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add@@9@9
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@BKPFMKJJ@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAf?$AAr?$AAe?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@nk_font_at:

; 12130: 
; 12131:     NK_ASSERT(config);

	cmp	DWORD PTR _config$[ebp], 0
	jne	SHORT $LN20@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add@@9@9
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@NEJONDGE@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN20@nk_font_at:

; 12132:     NK_ASSERT(config->ttf_blob);

	mov	eax, DWORD PTR _config$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN21@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add@@9@9
	add	ecx, 11					; 0000000bH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CC@EMLJIHOH@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAt?$AAt?$AAf?$AA_?$AAb?$AAl?$AAo?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN21@nk_font_at:

; 12133:     NK_ASSERT(config->ttf_size);

	mov	eax, DWORD PTR _config$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN22@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add@@9@9
	add	ecx, 12					; 0000000cH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CC@CPJMIME@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAt?$AAt?$AAf?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN22@nk_font_at:

; 12134:     NK_ASSERT(config->size > 0.0f);

	mov	eax, DWORD PTR _config$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN23@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add@@9@9
	add	ecx, 13					; 0000000dH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CI@EPKOFENI@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AAf?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN23@nk_font_at:

; 12135: 
; 12136:     if (!atlas || !config || !config->ttf_blob || !config->ttf_size || config->size <= 0.0f||
; 12137:         !atlas->permanent.alloc || !atlas->permanent.free ||
; 12138:         !atlas->temporary.alloc || !atlas->temporary.free)

	cmp	DWORD PTR _atlas$[ebp], 0
	je	SHORT $LN11@nk_font_at
	cmp	DWORD PTR _config$[ebp], 0
	je	SHORT $LN11@nk_font_at
	mov	eax, DWORD PTR _config$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN11@nk_font_at
	mov	eax, DWORD PTR _config$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN11@nk_font_at
	mov	eax, DWORD PTR _config$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+20]
	jae	SHORT $LN11@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN11@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN11@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN11@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN12@nk_font_at
$LN11@nk_font_at:

; 12139:         return 0;

	xor	eax, eax
	jmp	$LN13@nk_font_at
$LN12@nk_font_at:

; 12140: 
; 12141:     /* allocate and insert font config into list */
; 12142:     cfg = (struct nk_font_config*)
; 12143:         atlas->permanent.alloc(atlas->permanent.userdata,0, sizeof(struct nk_font_config));

	mov	esi, esp
	push	48					; 00000030H
	push	0
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _atlas$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cfg$[ebp], eax

; 12144:     NK_MEMCPY(cfg, config, sizeof(*config));

	push	48					; 00000030H
	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cfg$[ebp]
	push	ecx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 12145:     if (!atlas->config) {

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+284], 0
	jne	SHORT $LN10@nk_font_at

; 12146:         atlas->config = cfg;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR _cfg$[ebp]
	mov	DWORD PTR [eax+284], ecx

; 12147:         cfg->next = 0;

	mov	eax, DWORD PTR _cfg$[ebp]
	mov	DWORD PTR [eax], 0

; 12148:     } else {

	jmp	SHORT $LN9@nk_font_at
$LN10@nk_font_at:

; 12149:         cfg->next = atlas->config;

	mov	eax, DWORD PTR _cfg$[ebp]
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	mov	DWORD PTR [eax], edx

; 12150:         atlas->config = cfg;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR _cfg$[ebp]
	mov	DWORD PTR [eax+284], ecx
$LN9@nk_font_at:

; 12151:     }
; 12152: 
; 12153:     /* allocate new font */
; 12154:     if (!config->merge_mode) {

	mov	eax, DWORD PTR _config$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN8@nk_font_at

; 12155:         font = (struct nk_font*)
; 12156:             atlas->permanent.alloc(atlas->permanent.userdata,0, sizeof(struct nk_font));

	mov	esi, esp
	push	72					; 00000048H
	push	0
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _atlas$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _font$[ebp], eax

; 12157:         NK_ASSERT(font);

	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN24@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add@@9@9
	add	eax, 36					; 00000024H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN24@nk_font_at:

; 12158:         if (!font) return 0;

	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN7@nk_font_at
	xor	eax, eax
	jmp	$LN13@nk_font_at
$LN7@nk_font_at:

; 12159:         font->config = cfg;

	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR _cfg$[ebp]
	mov	DWORD PTR [eax+68], ecx

; 12160:     } else {

	jmp	SHORT $LN6@nk_font_at
$LN8@nk_font_at:

; 12161:         NK_ASSERT(atlas->font_num);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+288], 0
	jne	SHORT $LN25@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add@@9@9
	add	ecx, 40					; 00000028H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CA@JLAHHNKC@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAf?$AAo?$AAn?$AAt?$AA_?$AAn?$AAu?$AAm?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN25@nk_font_at:

; 12162:         font = atlas->fonts;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	mov	DWORD PTR _font$[ebp], ecx

; 12163:         font->config = cfg;

	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR _cfg$[ebp]
	mov	DWORD PTR [eax+68], ecx
$LN6@nk_font_at:

; 12164:     }
; 12165: 
; 12166:     /* insert font into list */
; 12167:     if (!config->merge_mode) {

	mov	eax, DWORD PTR _config$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN5@nk_font_at

; 12168:         if (!atlas->fonts) {

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+280], 0
	jne	SHORT $LN4@nk_font_at

; 12169:             atlas->fonts = font;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax+280], ecx

; 12170:             font->next = 0;

	mov	eax, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax], 0

; 12171:         } else {

	jmp	SHORT $LN3@nk_font_at
$LN4@nk_font_at:

; 12172:             font->next = atlas->fonts;

	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+280]
	mov	DWORD PTR [eax], edx

; 12173:             atlas->fonts = font;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax+280], ecx
$LN3@nk_font_at:

; 12174:         }
; 12175:         cfg->font = &font->info;

	mov	eax, DWORD PTR _font$[ebp]
	add	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _cfg$[ebp]
	mov	DWORD PTR [ecx+40], eax
$LN5@nk_font_at:

; 12176:     }
; 12177: 
; 12178:     /* create own copy of .TTF font blob */
; 12179:     if (!config->ttf_data_owned_by_atlas) {

	mov	eax, DWORD PTR _config$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	$LN2@nk_font_at

; 12180:         cfg->ttf_blob = atlas->permanent.alloc(atlas->permanent.userdata,0, cfg->ttf_size);

	mov	esi, esp
	mov	eax, DWORD PTR _cfg$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	0
	mov	edx, DWORD PTR _atlas$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _cfg$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 12181:         NK_ASSERT(cfg->ttf_blob);

	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN26@nk_font_at
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_add@@9@9
	add	ecx, 60					; 0000003cH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BM@OLHJPPIM@?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAt?$AAt?$AAf?$AA_?$AAb?$AAl?$AAo?$AAb?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN26@nk_font_at:

; 12182:         if (!cfg->ttf_blob) {

	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@nk_font_at

; 12183:             atlas->font_num++;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+288]
	add	ecx, 1
	mov	edx, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [edx+288], ecx

; 12184:             return 0;

	xor	eax, eax
	jmp	SHORT $LN13@nk_font_at
$LN1@nk_font_at:

; 12185:         }
; 12186:         NK_MEMCPY(cfg->ttf_blob, config->ttf_blob, cfg->ttf_size);

	mov	eax, DWORD PTR _cfg$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _config$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _cfg$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 12187:         cfg->ttf_data_owned_by_atlas = 1;

	mov	eax, DWORD PTR _cfg$[ebp]
	mov	BYTE PTR [eax+12], 1
$LN2@nk_font_at:

; 12188:     }
; 12189:     atlas->font_num++;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+288]
	add	ecx, 1
	mov	edx, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [edx+288], ecx

; 12190:     return font;

	mov	eax, DWORD PTR _font$[ebp]
$LN13@nk_font_at:

; 12191: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_atlas_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_config
_TEXT	SEGMENT
_cfg$ = -56						; size = 48
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_pixel_height$ = 12					; size = 4
_nk_font_config PROC					; COMDAT

; 12042: {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 12043:     struct nk_font_config cfg;
; 12044:     nk_zero_struct(cfg);

	push	48					; 00000030H
	lea	eax, DWORD PTR _cfg$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 12045:     cfg.ttf_blob = 0;

	mov	DWORD PTR _cfg$[ebp+4], 0

; 12046:     cfg.ttf_size = 0;

	mov	DWORD PTR _cfg$[ebp+8], 0

; 12047:     cfg.ttf_data_owned_by_atlas = 0;

	mov	BYTE PTR _cfg$[ebp+12], 0

; 12048:     cfg.size = pixel_height;

	movss	xmm0, DWORD PTR _pixel_height$[ebp]
	movss	DWORD PTR _cfg$[ebp+20], xmm0

; 12049:     cfg.oversample_h = 3;

	mov	BYTE PTR _cfg$[ebp+16], 3

; 12050:     cfg.oversample_v = 1;

	mov	BYTE PTR _cfg$[ebp+15], 1

; 12051:     cfg.pixel_snap = 0;

	mov	BYTE PTR _cfg$[ebp+14], 0

; 12052:     cfg.coord_type = NK_COORD_UV;

	mov	DWORD PTR _cfg$[ebp+24], 0

; 12053:     cfg.spacing = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _cfg$[ebp+28], eax
	mov	DWORD PTR _cfg$[ebp+32], edx

; 12054:     cfg.range = nk_font_default_glyph_ranges();

	call	_nk_font_default_glyph_ranges
	mov	DWORD PTR _cfg$[ebp+36], eax

; 12055:     cfg.merge_mode = 0;

	mov	BYTE PTR _cfg$[ebp+13], 0

; 12056:     cfg.fallback_glyph = '?';

	mov	DWORD PTR _cfg$[ebp+44], 63		; 0000003fH

; 12057:     cfg.font = 0;

	mov	DWORD PTR _cfg$[ebp+40], 0

; 12058:     return cfg;

	mov	ecx, 12					; 0000000cH
	lea	esi, DWORD PTR _cfg$[ebp]
	mov	edi, DWORD PTR $T1[ebp]
	rep movsd
	mov	eax, DWORD PTR $T1[ebp]

; 12059: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_font_co
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@nk_font_co:
	DD	1
	DD	$LN4@nk_font_co
$LN4@nk_font_co:
	DD	-56					; ffffffc8H
	DD	48					; 00000030H
	DD	$LN3@nk_font_co
$LN3@nk_font_co:
	DB	99					; 00000063H
	DB	102					; 00000066H
	DB	103					; 00000067H
	DB	0
_nk_font_config ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_atlas_begin
_TEXT	SEGMENT
_atlas$ = 8						; size = 4
_nk_font_atlas_begin PROC				; COMDAT

; 12103: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12104:     NK_ASSERT(atlas);

	cmp	DWORD PTR _atlas$[ebp], 0
	jne	SHORT $LN7@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_begin@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@PFBJFKGM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_font_at:

; 12105:     NK_ASSERT(atlas->temporary.alloc && atlas->temporary.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN8@nk_font_at
	mov	ecx, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	jne	SHORT $LN9@nk_font_at
$LN8@nk_font_at:
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_begin@@9@9
	add	edx, 2
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1GA@MNJGNIH@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_font_at:

; 12106:     NK_ASSERT(atlas->permanent.alloc && atlas->permanent.free);

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN10@nk_font_at
	mov	ecx, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN11@nk_font_at
$LN10@nk_font_at:
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_begin@@9@9
	add	edx, 3
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1GA@EALBBIL@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?4?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_font_at:

; 12107:     if (!atlas || !atlas->permanent.alloc || !atlas->permanent.free ||
; 12108:         !atlas->temporary.alloc || !atlas->temporary.free) return;

	cmp	DWORD PTR _atlas$[ebp], 0
	je	SHORT $LN3@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN3@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN3@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN3@nk_font_at
	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN4@nk_font_at
$LN3@nk_font_at:
	jmp	SHORT $LN5@nk_font_at
$LN4@nk_font_at:

; 12109:     if (atlas->glyphs) {

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax+272], 0
	je	SHORT $LN2@nk_font_at

; 12110:         atlas->permanent.free(atlas->permanent.userdata, atlas->glyphs);

	mov	esi, esp
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax+272]
	push	ecx
	mov	edx, DWORD PTR _atlas$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 12111:         atlas->glyphs = 0;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [eax+272], 0
$LN2@nk_font_at:

; 12112:     }
; 12113:     if (atlas->pixel) {

	mov	eax, DWORD PTR _atlas$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@nk_font_at

; 12114:         atlas->permanent.free(atlas->permanent.userdata, atlas->pixel);

	mov	esi, esp
	mov	eax, DWORD PTR _atlas$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _atlas$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _atlas$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 12115:         atlas->pixel = 0;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@nk_font_at:

; 12116:     }
; 12117: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_atlas_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_atlas_init_custom
_TEXT	SEGMENT
_atlas$ = 8						; size = 4
_permanent$ = 12					; size = 4
_temporary$ = 16					; size = 4
_nk_font_atlas_init_custom PROC				; COMDAT

; 12091: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12092:     NK_ASSERT(atlas);

	cmp	DWORD PTR _atlas$[ebp], 0
	jne	SHORT $LN5@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_init_custom@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@PFBJFKGM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_font_at:

; 12093:     NK_ASSERT(permanent);

	cmp	DWORD PTR _permanent$[ebp], 0
	jne	SHORT $LN6@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_init_custom@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BE@GNEJBMGP@?$AAp?$AAe?$AAr?$AAm?$AAa?$AAn?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_font_at:

; 12094:     NK_ASSERT(temporary);

	cmp	DWORD PTR _temporary$[ebp], 0
	jne	SHORT $LN7@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_init_custom@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BE@EMLGEEBK@?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa?$AAr?$AAy?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_font_at:

; 12095:     if (!atlas || !permanent || !temporary) return;

	cmp	DWORD PTR _atlas$[ebp], 0
	je	SHORT $LN1@nk_font_at
	cmp	DWORD PTR _permanent$[ebp], 0
	je	SHORT $LN1@nk_font_at
	cmp	DWORD PTR _temporary$[ebp], 0
	jne	SHORT $LN2@nk_font_at
$LN1@nk_font_at:
	jmp	SHORT $LN3@nk_font_at
$LN2@nk_font_at:

; 12096:     nk_zero_struct(*atlas);

	push	292					; 00000124H
	mov	eax, DWORD PTR _atlas$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 12097:     atlas->permanent = *permanent;

	mov	eax, DWORD PTR _atlas$[ebp]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _permanent$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx

; 12098:     atlas->temporary = *temporary;

	mov	eax, DWORD PTR _atlas$[ebp]
	add	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _temporary$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
$LN3@nk_font_at:

; 12099: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_atlas_init_custom ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_atlas_init
_TEXT	SEGMENT
_atlas$ = 8						; size = 4
_alloc$ = 12						; size = 4
_nk_font_atlas_init PROC				; COMDAT

; 12079: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12080:     NK_ASSERT(atlas);

	cmp	DWORD PTR _atlas$[ebp], 0
	jne	SHORT $LN5@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_init@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@PFBJFKGM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_font_at:

; 12081:     NK_ASSERT(alloc);

	cmp	DWORD PTR _alloc$[ebp], 0
	jne	SHORT $LN6@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_init@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KLHDKNJP@?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_font_at:

; 12082:     if (!atlas || !alloc) return;

	cmp	DWORD PTR _atlas$[ebp], 0
	je	SHORT $LN1@nk_font_at
	cmp	DWORD PTR _alloc$[ebp], 0
	jne	SHORT $LN2@nk_font_at
$LN1@nk_font_at:
	jmp	SHORT $LN3@nk_font_at
$LN2@nk_font_at:

; 12083:     nk_zero_struct(*atlas);

	push	292					; 00000124H
	mov	eax, DWORD PTR _atlas$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 12084:     atlas->permanent = *alloc;

	mov	eax, DWORD PTR _atlas$[ebp]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx

; 12085:     atlas->temporary = *alloc;

	mov	eax, DWORD PTR _atlas$[ebp]
	add	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
$LN3@nk_font_at:

; 12086: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_atlas_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_atlas_init_default
_TEXT	SEGMENT
_atlas$ = 8						; size = 4
_nk_font_atlas_init_default PROC			; COMDAT

; 12064: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12065:     NK_ASSERT(atlas);

	cmp	DWORD PTR _atlas$[ebp], 0
	jne	SHORT $LN4@nk_font_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_font_atlas_init_default@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@PFBJFKGM@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_font_at:

; 12066:     if (!atlas) return;

	cmp	DWORD PTR _atlas$[ebp], 0
	jne	SHORT $LN1@nk_font_at
	jmp	SHORT $LN2@nk_font_at
$LN1@nk_font_at:

; 12067:     nk_zero_struct(*atlas);

	push	292					; 00000124H
	mov	eax, DWORD PTR _atlas$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 12068:     atlas->temporary.userdata.ptr = 0;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [eax+24], 0

; 12069:     atlas->temporary.alloc = nk_malloc;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [eax+28], OFFSET _nk_malloc

; 12070:     atlas->temporary.free = nk_mfree;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _nk_mfree

; 12071:     atlas->permanent.userdata.ptr = 0;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [eax+12], 0

; 12072:     atlas->permanent.alloc = nk_malloc;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _nk_malloc

; 12073:     atlas->permanent.free = nk_mfree;

	mov	eax, DWORD PTR _atlas$[ebp]
	mov	DWORD PTR [eax+20], OFFSET _nk_mfree
$LN2@nk_font_at:

; 12074: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_atlas_init_default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_korean_glyph_ranges
_TEXT	SEGMENT
_nk_font_korean_glyph_ranges PROC			; COMDAT

; 11286: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11287:     NK_STORAGE const nk_rune ranges[] = {
; 11288:         0x0020, 0x00FF,
; 11289:         0x3131, 0x3163,
; 11290:         0xAC00, 0xD79D,
; 11291:         0
; 11292:     };
; 11293:     return ranges;

	mov	eax, OFFSET ?ranges@?1??nk_font_korean_glyph_ranges@@9@9

; 11294: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_korean_glyph_ranges ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_cyrillic_glyph_ranges
_TEXT	SEGMENT
_nk_font_cyrillic_glyph_ranges PROC			; COMDAT

; 11273: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11274:     NK_STORAGE const nk_rune ranges[] = {
; 11275:         0x0020, 0x00FF,
; 11276:         0x0400, 0x052F,
; 11277:         0x2DE0, 0x2DFF,
; 11278:         0xA640, 0xA69F,
; 11279:         0
; 11280:     };
; 11281:     return ranges;

	mov	eax, OFFSET ?ranges@?1??nk_font_cyrillic_glyph_ranges@@9@9

; 11282: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_cyrillic_glyph_ranges ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_chinese_glyph_ranges
_TEXT	SEGMENT
_nk_font_chinese_glyph_ranges PROC			; COMDAT

; 11259: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11260:     NK_STORAGE const nk_rune ranges[] = {
; 11261:         0x0020, 0x00FF,
; 11262:         0x3000, 0x30FF,
; 11263:         0x31F0, 0x31FF,
; 11264:         0xFF00, 0xFFEF,
; 11265:         0x4e00, 0x9FAF,
; 11266:         0
; 11267:     };
; 11268:     return ranges;

	mov	eax, OFFSET ?ranges@?1??nk_font_chinese_glyph_ranges@@9@9

; 11269: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_chinese_glyph_ranges ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_font_default_glyph_ranges
_TEXT	SEGMENT
_nk_font_default_glyph_ranges PROC			; COMDAT

; 11252: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11253:     NK_STORAGE const nk_rune ranges[] = {0x0020, 0x00FF, 0};
; 11254:     return ranges;

	mov	eax, OFFSET ?ranges@?1??nk_font_default_glyph_ranges@@9@9

; 11255: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_font_default_glyph_ranges ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_utf_at
_TEXT	SEGMENT
_text_len$ = -56					; size = 4
_text$ = -44						; size = 4
_glyph_len$ = -32					; size = 4
_src_len$ = -20						; size = 4
_i$ = -8						; size = 4
_buffer$ = 8						; size = 4
_length$ = 12						; size = 4
_index$ = 16						; size = 4
_unicode$ = 20						; size = 4
_len$ = 24						; size = 4
_nk_utf_at PROC						; COMDAT

; 6454 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6455 :     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 6456 :     int src_len = 0;

	mov	DWORD PTR _src_len$[ebp], 0

; 6457 :     int glyph_len = 0;

	mov	DWORD PTR _glyph_len$[ebp], 0

; 6458 :     const char *text;
; 6459 :     int text_len;
; 6460 : 
; 6461 :     NK_ASSERT(buffer);

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN10@nk_utf_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_utf_at@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@KMGMBAKN@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_utf_at:

; 6462 :     NK_ASSERT(unicode);

	cmp	DWORD PTR _unicode$[ebp], 0
	jne	SHORT $LN11@nk_utf_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_utf_at@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BA@OIEABBIM@?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_utf_at:

; 6463 :     NK_ASSERT(len);

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN12@nk_utf_at
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_utf_at@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17JOFJILLL@?$AAl?$AAe?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_utf_at:

; 6464 : 
; 6465 :     if (!buffer || !unicode || !len) return 0;

	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN6@nk_utf_at
	cmp	DWORD PTR _unicode$[ebp], 0
	je	SHORT $LN6@nk_utf_at
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN7@nk_utf_at
$LN6@nk_utf_at:
	xor	eax, eax
	jmp	$LN8@nk_utf_at
$LN7@nk_utf_at:

; 6466 :     if (index < 0) {

	cmp	DWORD PTR _index$[ebp], 0
	jge	SHORT $LN5@nk_utf_at

; 6467 :         *unicode = NK_UTF_INVALID;

	mov	eax, DWORD PTR _unicode$[ebp]
	mov	DWORD PTR [eax], 65533			; 0000fffdH

; 6468 :         *len = 0;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax], 0

; 6469 :         return 0;

	xor	eax, eax
	jmp	SHORT $LN8@nk_utf_at
$LN5@nk_utf_at:

; 6470 :     }
; 6471 : 
; 6472 :     text = buffer;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _text$[ebp], eax

; 6473 :     text_len = length;

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _text_len$[ebp], eax

; 6474 :     glyph_len = nk_utf_decode(text, unicode, text_len);

	mov	eax, DWORD PTR _text_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax
$LN4@nk_utf_at:

; 6475 :     while (glyph_len) {

	cmp	DWORD PTR _glyph_len$[ebp], 0
	je	SHORT $LN3@nk_utf_at

; 6476 :         if (i == index) {

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	jne	SHORT $LN2@nk_utf_at

; 6477 :             *len = glyph_len;

	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _glyph_len$[ebp]
	mov	DWORD PTR [eax], ecx

; 6478 :             break;

	jmp	SHORT $LN3@nk_utf_at
$LN2@nk_utf_at:

; 6479 :         }
; 6480 : 
; 6481 :         i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 6482 :         src_len = src_len + glyph_len;

	mov	eax, DWORD PTR _src_len$[ebp]
	add	eax, DWORD PTR _glyph_len$[ebp]
	mov	DWORD PTR _src_len$[ebp], eax

; 6483 :         glyph_len = nk_utf_decode(text + src_len, unicode, text_len - src_len);

	mov	eax, DWORD PTR _text_len$[ebp]
	sub	eax, DWORD PTR _src_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	add	edx, DWORD PTR _src_len$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax

; 6484 :     }

	jmp	SHORT $LN4@nk_utf_at
$LN3@nk_utf_at:

; 6485 :     if (i != index) return 0;

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	je	SHORT $LN1@nk_utf_at
	xor	eax, eax
	jmp	SHORT $LN8@nk_utf_at
$LN1@nk_utf_at:

; 6486 :     return buffer + src_len;

	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, DWORD PTR _src_len$[ebp]
$LN8@nk_utf_at:

; 6487 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_utf_at ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_utf_len
_TEXT	SEGMENT
_unicode$ = -68						; size = 4
_src_len$ = -56						; size = 4
_glyph_len$ = -44					; size = 4
_text_len$ = -32					; size = 4
_glyphs$ = -20						; size = 4
_text$ = -8						; size = 4
_str$ = 8						; size = 4
_len$ = 12						; size = 4
_nk_utf_len PROC					; COMDAT

; 6429 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6430 :     const char *text;
; 6431 :     int glyphs = 0;

	mov	DWORD PTR _glyphs$[ebp], 0

; 6432 :     int text_len;
; 6433 :     int glyph_len;
; 6434 :     int src_len = 0;

	mov	DWORD PTR _src_len$[ebp], 0

; 6435 :     nk_rune unicode;
; 6436 : 
; 6437 :     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN7@nk_utf_len
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_utf_len@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_utf_len:

; 6438 :     if (!str || !len) return 0;

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN3@nk_utf_len
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN4@nk_utf_len
$LN3@nk_utf_len:
	xor	eax, eax
	jmp	SHORT $LN5@nk_utf_len
$LN4@nk_utf_len:

; 6439 : 
; 6440 :     text = str;

	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR _text$[ebp], eax

; 6441 :     text_len = len;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _text_len$[ebp], eax

; 6442 :     glyph_len = nk_utf_decode(text, &unicode, text_len);

	mov	eax, DWORD PTR _text_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax
$LN2@nk_utf_len:

; 6443 :     while (glyph_len && src_len < len) {

	cmp	DWORD PTR _glyph_len$[ebp], 0
	je	SHORT $LN1@nk_utf_len
	mov	eax, DWORD PTR _src_len$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN1@nk_utf_len

; 6444 :         glyphs++;

	mov	eax, DWORD PTR _glyphs$[ebp]
	add	eax, 1
	mov	DWORD PTR _glyphs$[ebp], eax

; 6445 :         src_len = src_len + glyph_len;

	mov	eax, DWORD PTR _src_len$[ebp]
	add	eax, DWORD PTR _glyph_len$[ebp]
	mov	DWORD PTR _src_len$[ebp], eax

; 6446 :         glyph_len = nk_utf_decode(text + src_len, &unicode, text_len - src_len);

	mov	eax, DWORD PTR _text_len$[ebp]
	sub	eax, DWORD PTR _src_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	add	edx, DWORD PTR _src_len$[ebp]
	push	edx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _glyph_len$[ebp], eax

; 6447 :     }

	jmp	SHORT $LN2@nk_utf_len
$LN1@nk_utf_len:

; 6448 :     return glyphs;

	mov	eax, DWORD PTR _glyphs$[ebp]
$LN5@nk_utf_len:

; 6449 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@nk_utf_len
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@nk_utf_len:
	DD	1
	DD	$LN9@nk_utf_len
$LN9@nk_utf_len:
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN8@nk_utf_len
$LN8@nk_utf_len:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_nk_utf_len ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_utf_encode
_TEXT	SEGMENT
_i$ = -20						; size = 4
_len$ = -8						; size = 4
_u$ = 8							; size = 4
_c$ = 12						; size = 4
_clen$ = 16						; size = 4
_nk_utf_encode PROC					; COMDAT

; 6413 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6414 :     int len, i;
; 6415 :     len = nk_utf_validate(&u, 0);

	push	0
	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	call	_nk_utf_validate
	add	esp, 8
	mov	DWORD PTR _len$[ebp], eax

; 6416 :     if (clen < len || !len || len > NK_UTF_SIZE)

	mov	eax, DWORD PTR _clen$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jl	SHORT $LN4@nk_utf_enc
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN4@nk_utf_enc
	cmp	DWORD PTR _len$[ebp], 4
	jle	SHORT $LN5@nk_utf_enc
$LN4@nk_utf_enc:

; 6417 :         return 0;

	xor	eax, eax
	jmp	SHORT $LN6@nk_utf_enc
$LN5@nk_utf_enc:

; 6418 : 
; 6419 :     for (i = len - 1; i != 0; --i) {

	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@nk_utf_enc
$LN2@nk_utf_enc:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_utf_enc:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN1@nk_utf_enc

; 6420 :         c[i] = nk_utf_encode_byte(u, 0);

	push	0
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	_nk_utf_encode_byte
	add	esp, 8
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx], al

; 6421 :         u >>= 6;

	mov	eax, DWORD PTR _u$[ebp]
	shr	eax, 6
	mov	DWORD PTR _u$[ebp], eax

; 6422 :     }

	jmp	SHORT $LN2@nk_utf_enc
$LN1@nk_utf_enc:

; 6423 :     c[0] = nk_utf_encode_byte(u, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_nk_utf_encode_byte
	add	esp, 8
	mov	edx, 1
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 6424 :     return len;

	mov	eax, DWORD PTR _len$[ebp]
$LN6@nk_utf_enc:

; 6425 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_utf_encode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_utf_decode
_TEXT	SEGMENT
_udecoded$ = -56					; size = 4
_type$ = -44						; size = 4
_len$ = -32						; size = 4
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_c$ = 8							; size = 4
_u$ = 12						; size = 4
_clen$ = 16						; size = 4
_nk_utf_decode PROC					; COMDAT

; 6378 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6379 :     int i, j, len, type=0;

	mov	DWORD PTR _type$[ebp], 0

; 6380 :     nk_rune udecoded;
; 6381 : 
; 6382 :     NK_ASSERT(c);

	cmp	DWORD PTR _c$[ebp], 0
	jne	SHORT $LN13@nk_utf_dec
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_utf_decode@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13PHCIHIAO@?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_utf_dec:

; 6383 :     NK_ASSERT(u);

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN14@nk_utf_dec
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_utf_decode@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_13ICFKHAEN@?$AAu?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_utf_dec:

; 6384 : 
; 6385 :     if (!c || !u) return 0;

	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN9@nk_utf_dec
	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN10@nk_utf_dec
$LN9@nk_utf_dec:
	xor	eax, eax
	jmp	$LN11@nk_utf_dec
$LN10@nk_utf_dec:

; 6386 :     if (!clen) return 0;

	cmp	DWORD PTR _clen$[ebp], 0
	jne	SHORT $LN8@nk_utf_dec
	xor	eax, eax
	jmp	$LN11@nk_utf_dec
$LN8@nk_utf_dec:

; 6387 :     *u = NK_UTF_INVALID;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR [eax], 65533			; 0000fffdH

; 6388 : 
; 6389 :     udecoded = nk_utf_decode_byte(c[0], &len);

	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	push	ecx
	call	_nk_utf_decode_byte
	add	esp, 8
	mov	DWORD PTR _udecoded$[ebp], eax

; 6390 :     if (!NK_BETWEEN(len, 1, NK_UTF_SIZE))

	cmp	DWORD PTR _len$[ebp], 1
	jl	SHORT $LN6@nk_utf_dec
	cmp	DWORD PTR _len$[ebp], 4
	jl	SHORT $LN7@nk_utf_dec
$LN6@nk_utf_dec:

; 6391 :         return 1;

	mov	eax, 1
	jmp	$LN11@nk_utf_dec
$LN7@nk_utf_dec:

; 6392 : 
; 6393 :     for (i = 1, j = 1; i < clen && j < len; ++i, ++j) {

	mov	DWORD PTR _i$[ebp], 1
	mov	DWORD PTR _j$[ebp], 1
	jmp	SHORT $LN5@nk_utf_dec
$LN4@nk_utf_dec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN5@nk_utf_dec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _clen$[ebp]
	jge	SHORT $LN3@nk_utf_dec
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN3@nk_utf_dec

; 6394 :         udecoded = (udecoded << 6) | nk_utf_decode_byte(c[i], &type);

	mov	esi, DWORD PTR _udecoded$[ebp]
	shl	esi, 6
	lea	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	call	_nk_utf_decode_byte
	add	esp, 8
	or	esi, eax
	mov	DWORD PTR _udecoded$[ebp], esi

; 6395 :         if (type != 0)

	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN2@nk_utf_dec

; 6396 :             return j;

	mov	eax, DWORD PTR _j$[ebp]
	jmp	SHORT $LN11@nk_utf_dec
$LN2@nk_utf_dec:

; 6397 :     }

	jmp	SHORT $LN4@nk_utf_dec
$LN3@nk_utf_dec:

; 6398 :     if (j < len)

	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN1@nk_utf_dec

; 6399 :         return 0;

	xor	eax, eax
	jmp	SHORT $LN11@nk_utf_dec
$LN1@nk_utf_dec:

; 6400 :     *u = udecoded;

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR _udecoded$[ebp]
	mov	DWORD PTR [eax], ecx

; 6401 :     nk_utf_validate(u, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_nk_utf_validate
	add	esp, 8

; 6402 :     return len;

	mov	eax, DWORD PTR _len$[ebp]
$LN11@nk_utf_dec:

; 6403 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@nk_utf_dec
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@nk_utf_dec:
	DD	2
	DD	$LN17@nk_utf_dec
$LN17@nk_utf_dec:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN15@nk_utf_dec
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN16@nk_utf_dec
$LN16@nk_utf_dec:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN15@nk_utf_dec:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_nk_utf_decode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_strmatch_fuzzy_text
_TEXT	SEGMENT
tv188 = -400						; size = 4
tv183 = -400						; size = 4
tv148 = -400						; size = 4
tv139 = -400						; size = 4
tv135 = -400						; size = 4
tv132 = -400						; size = 4
tv91 = -400						; size = 4
_penalty$1 = -200					; size = 4
_count$2 = -188						; size = 4
_new_score$3 = -176					; size = 4
_pattern_repeat$4 = -164				; size = 4
_advanced$5 = -152					; size = 4
_rematch$6 = -140					; size = 4
_next_match$7 = -128					; size = 4
_str_letter$8 = -113					; size = 1
_pattern_letter$9 = -101				; size = 1
_best_letter_score$ = -92				; size = 4
_best_letter$ = -80					; size = 4
_prev_separator$ = -68					; size = 4
_prev_lower$ = -56					; size = 4
_prev_matched$ = -44					; size = 4
_str_iter$ = -32					; size = 4
_pattern_iter$ = -20					; size = 4
_score$ = -8						; size = 4
_str$ = 8						; size = 4
_str_len$ = 12						; size = 4
_pattern$ = 16						; size = 4
_out_score$ = 20					; size = 4
_nk_strmatch_fuzzy_text PROC				; COMDAT

; 4889 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 400				; 00000190H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-400]
	mov	ecx, 100				; 00000064H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4890 :     /* Returns true if each character in pattern is found sequentially within str
; 4891 :      * if found then out_score is also set. Score value has no intrinsic meaning.
; 4892 :      * Range varies with pattern. Can only compare scores with same search pattern. */
; 4893 : 
; 4894 :     /* ------- scores --------- */
; 4895 :     /* bonus for adjacent matches */
; 4896 :     #define NK_ADJACENCY_BONUS 5
; 4897 :     /* bonus if match occurs after a separator */
; 4898 :     #define NK_SEPARATOR_BONUS 10
; 4899 :     /* bonus if match is uppercase and prev is lower */
; 4900 :     #define NK_CAMEL_BONUS 10
; 4901 :     /* penalty applied for every letter in str before the first match */
; 4902 :     #define NK_LEADING_LETTER_PENALTY (-3)
; 4903 :     /* maximum penalty for leading letters */
; 4904 :     #define NK_MAX_LEADING_LETTER_PENALTY (-9)
; 4905 :     /* penalty for every letter that doesn't matter */
; 4906 :     #define NK_UNMATCHED_LETTER_PENALTY (-1)
; 4907 : 
; 4908 :     /* loop variables */
; 4909 :     int score = 0;

	mov	DWORD PTR _score$[ebp], 0

; 4910 :     char const * pattern_iter = pattern;

	mov	eax, DWORD PTR _pattern$[ebp]
	mov	DWORD PTR _pattern_iter$[ebp], eax

; 4911 :     int str_iter = 0;

	mov	DWORD PTR _str_iter$[ebp], 0

; 4912 :     int prev_matched = nk_false;

	mov	DWORD PTR _prev_matched$[ebp], 0

; 4913 :     int prev_lower = nk_false;

	mov	DWORD PTR _prev_lower$[ebp], 0

; 4914 :     /* true so if first letter match gets separator bonus*/
; 4915 :     int prev_separator = nk_true;

	mov	DWORD PTR _prev_separator$[ebp], 1

; 4916 : 
; 4917 :     /* use "best" matched letter if multiple string letters match the pattern */
; 4918 :     char const * best_letter = 0;

	mov	DWORD PTR _best_letter$[ebp], 0

; 4919 :     int best_letter_score = 0;

	mov	DWORD PTR _best_letter_score$[ebp], 0

; 4920 : 
; 4921 :     /* loop over strings */
; 4922 :     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN23@nk_strmatc
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_strmatch_fuzzy_text@@9@9
	add	eax, 33					; 00000021H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN23@nk_strmatc:

; 4923 :     NK_ASSERT(pattern);

	cmp	DWORD PTR _pattern$[ebp], 0
	jne	SHORT $LN24@nk_strmatc
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_strmatch_fuzzy_text@@9@9
	add	eax, 34					; 00000022H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BA@GHEKA@?$AAp?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN24@nk_strmatc:

; 4924 :     if (!str || !str_len || !pattern) return 0;

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN19@nk_strmatc
	cmp	DWORD PTR _str_len$[ebp], 0
	je	SHORT $LN19@nk_strmatc
	cmp	DWORD PTR _pattern$[ebp], 0
	jne	SHORT $LN18@nk_strmatc
$LN19@nk_strmatc:
	xor	eax, eax
	jmp	$LN21@nk_strmatc
$LN18@nk_strmatc:

; 4925 :     while (str_iter < str_len)

	mov	eax, DWORD PTR _str_iter$[ebp]
	cmp	eax, DWORD PTR _str_len$[ebp]
	jge	$LN17@nk_strmatc

; 4926 :     {
; 4927 :         const char pattern_letter = *pattern_iter;

	mov	eax, DWORD PTR _pattern_iter$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _pattern_letter$9[ebp], cl

; 4928 :         const char str_letter = str[str_iter];

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _str_iter$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _str_letter$8[ebp], cl

; 4929 : 
; 4930 :         int next_match = *pattern_iter != '\0' &&
; 4931 :             nk_to_lower(pattern_letter) == nk_to_lower(str_letter);

	mov	eax, DWORD PTR _pattern_iter$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN25@nk_strmatc
	movsx	edx, BYTE PTR _pattern_letter$9[ebp]
	push	edx
	call	_nk_to_lower
	add	esp, 4
	mov	esi, eax
	movsx	eax, BYTE PTR _str_letter$8[ebp]
	push	eax
	call	_nk_to_lower
	add	esp, 4
	cmp	esi, eax
	jne	SHORT $LN25@nk_strmatc
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN26@nk_strmatc
$LN25@nk_strmatc:
	mov	DWORD PTR tv91[ebp], 0
$LN26@nk_strmatc:
	mov	ecx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _next_match$7[ebp], ecx

; 4932 :         int rematch = best_letter && nk_to_upper(*best_letter) == nk_to_upper(str_letter);

	cmp	DWORD PTR _best_letter$[ebp], 0
	je	SHORT $LN27@nk_strmatc
	mov	eax, DWORD PTR _best_letter$[ebp]
	movsx	ecx, BYTE PTR [eax]
	push	ecx
	call	_nk_to_upper
	add	esp, 4
	mov	esi, eax
	movsx	edx, BYTE PTR _str_letter$8[ebp]
	push	edx
	call	_nk_to_upper
	add	esp, 4
	cmp	esi, eax
	jne	SHORT $LN27@nk_strmatc
	mov	DWORD PTR tv132[ebp], 1
	jmp	SHORT $LN28@nk_strmatc
$LN27@nk_strmatc:
	mov	DWORD PTR tv132[ebp], 0
$LN28@nk_strmatc:
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR _rematch$6[ebp], eax

; 4933 : 
; 4934 :         int advanced = next_match && best_letter;

	cmp	DWORD PTR _next_match$7[ebp], 0
	je	SHORT $LN29@nk_strmatc
	cmp	DWORD PTR _best_letter$[ebp], 0
	je	SHORT $LN29@nk_strmatc
	mov	DWORD PTR tv135[ebp], 1
	jmp	SHORT $LN30@nk_strmatc
$LN29@nk_strmatc:
	mov	DWORD PTR tv135[ebp], 0
$LN30@nk_strmatc:
	mov	eax, DWORD PTR tv135[ebp]
	mov	DWORD PTR _advanced$5[ebp], eax

; 4935 :         int pattern_repeat = best_letter && *pattern_iter != '\0';

	cmp	DWORD PTR _best_letter$[ebp], 0
	je	SHORT $LN31@nk_strmatc
	mov	eax, DWORD PTR _pattern_iter$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN31@nk_strmatc
	mov	DWORD PTR tv139[ebp], 1
	jmp	SHORT $LN32@nk_strmatc
$LN31@nk_strmatc:
	mov	DWORD PTR tv139[ebp], 0
$LN32@nk_strmatc:
	mov	edx, DWORD PTR tv139[ebp]
	mov	DWORD PTR _pattern_repeat$4[ebp], edx

; 4936 :         pattern_repeat = pattern_repeat &&
; 4937 :             nk_to_lower(*best_letter) == nk_to_lower(pattern_letter);

	cmp	DWORD PTR _pattern_repeat$4[ebp], 0
	je	SHORT $LN33@nk_strmatc
	mov	eax, DWORD PTR _best_letter$[ebp]
	movsx	ecx, BYTE PTR [eax]
	push	ecx
	call	_nk_to_lower
	add	esp, 4
	mov	esi, eax
	movsx	edx, BYTE PTR _pattern_letter$9[ebp]
	push	edx
	call	_nk_to_lower
	add	esp, 4
	cmp	esi, eax
	jne	SHORT $LN33@nk_strmatc
	mov	DWORD PTR tv148[ebp], 1
	jmp	SHORT $LN34@nk_strmatc
$LN33@nk_strmatc:
	mov	DWORD PTR tv148[ebp], 0
$LN34@nk_strmatc:
	mov	eax, DWORD PTR tv148[ebp]
	mov	DWORD PTR _pattern_repeat$4[ebp], eax

; 4938 : 
; 4939 :         if (advanced || pattern_repeat) {

	cmp	DWORD PTR _advanced$5[ebp], 0
	jne	SHORT $LN15@nk_strmatc
	cmp	DWORD PTR _pattern_repeat$4[ebp], 0
	je	SHORT $LN16@nk_strmatc
$LN15@nk_strmatc:

; 4940 :             score += best_letter_score;

	mov	eax, DWORD PTR _score$[ebp]
	add	eax, DWORD PTR _best_letter_score$[ebp]
	mov	DWORD PTR _score$[ebp], eax

; 4941 :             best_letter = 0;

	mov	DWORD PTR _best_letter$[ebp], 0

; 4942 :             best_letter_score = 0;

	mov	DWORD PTR _best_letter_score$[ebp], 0
$LN16@nk_strmatc:

; 4943 :         }
; 4944 : 
; 4945 :         if (next_match || rematch)

	cmp	DWORD PTR _next_match$7[ebp], 0
	jne	SHORT $LN13@nk_strmatc
	cmp	DWORD PTR _rematch$6[ebp], 0
	je	$LN14@nk_strmatc
$LN13@nk_strmatc:

; 4946 :         {
; 4947 :             int new_score = 0;

	mov	DWORD PTR _new_score$3[ebp], 0

; 4948 :             /* Apply penalty for each letter before the first pattern match */
; 4949 :             if (pattern_iter == pattern) {

	mov	eax, DWORD PTR _pattern_iter$[ebp]
	cmp	eax, DWORD PTR _pattern$[ebp]
	jne	SHORT $LN12@nk_strmatc

; 4950 :                 int count = (int)(&str[str_iter] - str);

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _str_iter$[ebp]
	sub	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR _count$2[ebp], eax

; 4951 :                 int penalty = NK_LEADING_LETTER_PENALTY * count;

	imul	eax, DWORD PTR _count$2[ebp], -3
	mov	DWORD PTR _penalty$1[ebp], eax

; 4952 :                 if (penalty < NK_MAX_LEADING_LETTER_PENALTY)

	cmp	DWORD PTR _penalty$1[ebp], -9		; fffffff7H
	jge	SHORT $LN11@nk_strmatc

; 4953 :                     penalty = NK_MAX_LEADING_LETTER_PENALTY;

	mov	DWORD PTR _penalty$1[ebp], -9		; fffffff7H
$LN11@nk_strmatc:

; 4954 : 
; 4955 :                 score += penalty;

	mov	eax, DWORD PTR _score$[ebp]
	add	eax, DWORD PTR _penalty$1[ebp]
	mov	DWORD PTR _score$[ebp], eax
$LN12@nk_strmatc:

; 4956 :             }
; 4957 : 
; 4958 :             /* apply bonus for consecutive bonuses */
; 4959 :             if (prev_matched)

	cmp	DWORD PTR _prev_matched$[ebp], 0
	je	SHORT $LN10@nk_strmatc

; 4960 :                 new_score += NK_ADJACENCY_BONUS;

	mov	eax, DWORD PTR _new_score$3[ebp]
	add	eax, 5
	mov	DWORD PTR _new_score$3[ebp], eax
$LN10@nk_strmatc:

; 4961 : 
; 4962 :             /* apply bonus for matches after a separator */
; 4963 :             if (prev_separator)

	cmp	DWORD PTR _prev_separator$[ebp], 0
	je	SHORT $LN9@nk_strmatc

; 4964 :                 new_score += NK_SEPARATOR_BONUS;

	mov	eax, DWORD PTR _new_score$3[ebp]
	add	eax, 10					; 0000000aH
	mov	DWORD PTR _new_score$3[ebp], eax
$LN9@nk_strmatc:

; 4965 : 
; 4966 :             /* apply bonus across camel case boundaries */
; 4967 :             if (prev_lower && nk_is_upper(str_letter))

	cmp	DWORD PTR _prev_lower$[ebp], 0
	je	SHORT $LN8@nk_strmatc
	movsx	eax, BYTE PTR _str_letter$8[ebp]
	push	eax
	call	_nk_is_upper
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@nk_strmatc

; 4968 :                 new_score += NK_CAMEL_BONUS;

	mov	eax, DWORD PTR _new_score$3[ebp]
	add	eax, 10					; 0000000aH
	mov	DWORD PTR _new_score$3[ebp], eax
$LN8@nk_strmatc:

; 4969 : 
; 4970 :             /* update pattern iter IFF the next pattern letter was matched */
; 4971 :             if (next_match)

	cmp	DWORD PTR _next_match$7[ebp], 0
	je	SHORT $LN7@nk_strmatc

; 4972 :                 ++pattern_iter;

	mov	eax, DWORD PTR _pattern_iter$[ebp]
	add	eax, 1
	mov	DWORD PTR _pattern_iter$[ebp], eax
$LN7@nk_strmatc:

; 4973 : 
; 4974 :             /* update best letter in str which may be for a "next" letter or a rematch */
; 4975 :             if (new_score >= best_letter_score) {

	mov	eax, DWORD PTR _new_score$3[ebp]
	cmp	eax, DWORD PTR _best_letter_score$[ebp]
	jl	SHORT $LN6@nk_strmatc

; 4976 :                 /* apply penalty for now skipped letter */
; 4977 :                 if (best_letter != 0)

	cmp	DWORD PTR _best_letter$[ebp], 0
	je	SHORT $LN5@nk_strmatc

; 4978 :                     score += NK_UNMATCHED_LETTER_PENALTY;

	mov	eax, DWORD PTR _score$[ebp]
	sub	eax, 1
	mov	DWORD PTR _score$[ebp], eax
$LN5@nk_strmatc:

; 4979 : 
; 4980 :                 best_letter = &str[str_iter];

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _str_iter$[ebp]
	mov	DWORD PTR _best_letter$[ebp], eax

; 4981 :                 best_letter_score = new_score;

	mov	eax, DWORD PTR _new_score$3[ebp]
	mov	DWORD PTR _best_letter_score$[ebp], eax
$LN6@nk_strmatc:

; 4982 :             }
; 4983 :             prev_matched = nk_true;

	mov	DWORD PTR _prev_matched$[ebp], 1

; 4984 :         } else {

	jmp	SHORT $LN4@nk_strmatc
$LN14@nk_strmatc:

; 4985 :             score += NK_UNMATCHED_LETTER_PENALTY;

	mov	eax, DWORD PTR _score$[ebp]
	sub	eax, 1
	mov	DWORD PTR _score$[ebp], eax

; 4986 :             prev_matched = nk_false;

	mov	DWORD PTR _prev_matched$[ebp], 0
$LN4@nk_strmatc:

; 4987 :         }
; 4988 : 
; 4989 :         /* separators should be more easily defined */
; 4990 :         prev_lower = nk_is_lower(str_letter) != 0;

	movsx	eax, BYTE PTR _str_letter$8[ebp]
	push	eax
	call	_nk_is_lower
	add	esp, 4
	test	eax, eax
	je	SHORT $LN35@nk_strmatc
	mov	DWORD PTR tv183[ebp], 1
	jmp	SHORT $LN36@nk_strmatc
$LN35@nk_strmatc:
	mov	DWORD PTR tv183[ebp], 0
$LN36@nk_strmatc:
	mov	ecx, DWORD PTR tv183[ebp]
	mov	DWORD PTR _prev_lower$[ebp], ecx

; 4991 :         prev_separator = str_letter == '_' || str_letter == ' ';

	movsx	eax, BYTE PTR _str_letter$8[ebp]
	cmp	eax, 95					; 0000005fH
	je	SHORT $LN37@nk_strmatc
	movsx	ecx, BYTE PTR _str_letter$8[ebp]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN37@nk_strmatc
	mov	DWORD PTR tv188[ebp], 0
	jmp	SHORT $LN38@nk_strmatc
$LN37@nk_strmatc:
	mov	DWORD PTR tv188[ebp], 1
$LN38@nk_strmatc:
	mov	edx, DWORD PTR tv188[ebp]
	mov	DWORD PTR _prev_separator$[ebp], edx

; 4992 : 
; 4993 :         ++str_iter;

	mov	eax, DWORD PTR _str_iter$[ebp]
	add	eax, 1
	mov	DWORD PTR _str_iter$[ebp], eax

; 4994 :     }

	jmp	$LN18@nk_strmatc
$LN17@nk_strmatc:

; 4995 : 
; 4996 :     /* apply score for last match */
; 4997 :     if (best_letter)

	cmp	DWORD PTR _best_letter$[ebp], 0
	je	SHORT $LN3@nk_strmatc

; 4998 :         score += best_letter_score;

	mov	eax, DWORD PTR _score$[ebp]
	add	eax, DWORD PTR _best_letter_score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
$LN3@nk_strmatc:

; 4999 : 
; 5000 :     /* did not match full pattern */
; 5001 :     if (*pattern_iter != '\0')

	mov	eax, DWORD PTR _pattern_iter$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@nk_strmatc

; 5002 :         return nk_false;

	xor	eax, eax
	jmp	SHORT $LN21@nk_strmatc
$LN2@nk_strmatc:

; 5003 : 
; 5004 :     if (out_score)

	cmp	DWORD PTR _out_score$[ebp], 0
	je	SHORT $LN1@nk_strmatc

; 5005 :         *out_score = score;

	mov	eax, DWORD PTR _out_score$[ebp]
	mov	ecx, DWORD PTR _score$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@nk_strmatc:

; 5006 :     return nk_true;

	mov	eax, 1
$LN21@nk_strmatc:

; 5007 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 400				; 00000190H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_strmatch_fuzzy_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_strmatch_fuzzy_string
_TEXT	SEGMENT
_str$ = 8						; size = 4
_pattern$ = 12						; size = 4
_out_score$ = 16					; size = 4
_nk_strmatch_fuzzy_string PROC				; COMDAT

; 5011 : {return nk_strmatch_fuzzy_text(str, nk_strlen(str), pattern, out_score);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _out_score$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pattern$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_nk_strmatch_fuzzy_text
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_strmatch_fuzzy_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_strfilter
_TEXT	SEGMENT
tv80 = -200						; size = 4
tv79 = -196						; size = 4
_text$ = 8						; size = 4
_regexp$ = 12						; size = 4
_nk_strfilter PROC					; COMDAT

; 4870 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4871 :     /*
; 4872 :     c    matches any literal character c
; 4873 :     .    matches any single character
; 4874 :     ^    matches the beginning of the input string
; 4875 :     $    matches the end of the input string
; 4876 :     *    matches zero or more occurrences of the previous character*/
; 4877 :     if (regexp[0] == '^')

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _regexp$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 94					; 0000005eH
	jne	SHORT $LN4@nk_strfilt

; 4878 :         return nk_str_match_here(regexp+1, text);

	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	add	ecx, 1
	push	ecx
	call	_nk_str_match_here
	add	esp, 8
	jmp	SHORT $LN6@nk_strfilt
$LN4@nk_strfilt:

; 4879 :     do {    /* must look even if string is empty */
; 4880 :         if (nk_str_match_here(regexp, text))

	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	_nk_str_match_here
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@nk_strfilt

; 4881 :             return 1;

	mov	eax, 1
	jmp	SHORT $LN6@nk_strfilt
$LN3@nk_strfilt:

; 4882 :     } while (*text++ != '\0');

	mov	eax, DWORD PTR _text$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv79[ebp], ecx
	mov	edx, DWORD PTR _text$[ebp]
	add	edx, 1
	mov	DWORD PTR _text$[ebp], edx
	cmp	DWORD PTR tv79[ebp], 0
	je	SHORT $LN8@nk_strfilt
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN9@nk_strfilt
$LN8@nk_strfilt:
	mov	DWORD PTR tv80[ebp], 0
$LN9@nk_strfilt:
	cmp	DWORD PTR tv80[ebp], 0
	jne	SHORT $LN4@nk_strfilt

; 4883 :     return 0;

	xor	eax, eax
$LN6@nk_strfilt:

; 4884 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_strfilter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_strtod
_TEXT	SEGMENT
_div$1 = -108						; size = 4
_pow$2 = -96						; size = 4
_i$3 = -84						; size = 4
_number$ = -72						; size = 8
_value$ = -56						; size = 8
_p$ = -40						; size = 4
_neg$ = -28						; size = 8
_m$ = -12						; size = 8
_str$ = 8						; size = 4
_endptr$ = 12						; size = 4
_nk_strtod PROC						; COMDAT

; 4729 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4730 :     double m;
; 4731 :     double neg = 1.0;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _neg$[ebp], xmm0

; 4732 :     const char *p = str;

	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 4733 :     double value = 0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _value$[ebp], xmm0

; 4734 :     double number = 0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _number$[ebp], xmm0

; 4735 : 
; 4736 :     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN27@nk_strtod
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_strtod@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN27@nk_strtod:

; 4737 :     if (!str) return 0;

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN24@nk_strtod
	fldz
	jmp	$LN25@nk_strtod
$LN24@nk_strtod:

; 4738 : 
; 4739 :     /* skip whitespace */
; 4740 :     while (*p == ' ') p++;

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN22@nk_strtod
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN24@nk_strtod
$LN22@nk_strtod:

; 4741 :     if (*p == '-') {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN21@nk_strtod

; 4742 :         neg = -1.0;

	movsd	xmm0, QWORD PTR __real@bff0000000000000
	movsd	QWORD PTR _neg$[ebp], xmm0

; 4743 :         p++;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN21@nk_strtod:

; 4744 :     }
; 4745 : 
; 4746 :     while (*p && *p != '.' && *p != 'e') {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN19@nk_strtod
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 46					; 0000002eH
	je	SHORT $LN19@nk_strtod
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 101				; 00000065H
	je	SHORT $LN19@nk_strtod

; 4747 :         value = value * 10.0 + (double) (*p - '0');

	movsd	xmm0, QWORD PTR _value$[ebp]
	mulsd	xmm0, QWORD PTR __real@4024000000000000
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	sub	ecx, 48					; 00000030H
	cvtsi2sd xmm1, ecx
	addsd	xmm0, xmm1
	movsd	QWORD PTR _value$[ebp], xmm0

; 4748 :         p++;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 4749 :     }

	jmp	SHORT $LN21@nk_strtod
$LN19@nk_strtod:

; 4750 : 
; 4751 :     if (*p == '.') {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 46					; 0000002eH
	jne	SHORT $LN15@nk_strtod

; 4752 :         p++;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 4753 :         for(m = 0.1; *p && *p != 'e'; p++ ) {

	movsd	xmm0, QWORD PTR __real@3fb999999999999a
	movsd	QWORD PTR _m$[ebp], xmm0
	jmp	SHORT $LN17@nk_strtod
$LN16@nk_strtod:
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN17@nk_strtod:
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN15@nk_strtod
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 101				; 00000065H
	je	SHORT $LN15@nk_strtod

; 4754 :             value = value + (double) (*p - '0') * m;

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	sub	ecx, 48					; 00000030H
	cvtsi2sd xmm0, ecx
	mulsd	xmm0, QWORD PTR _m$[ebp]
	addsd	xmm0, QWORD PTR _value$[ebp]
	movsd	QWORD PTR _value$[ebp], xmm0

; 4755 :             m *= 0.1;

	movsd	xmm0, QWORD PTR _m$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fb999999999999a
	movsd	QWORD PTR _m$[ebp], xmm0

; 4756 :         }

	jmp	SHORT $LN16@nk_strtod
$LN15@nk_strtod:

; 4757 :     }
; 4758 :     if (*p == 'e') {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 101				; 00000065H
	jne	$LN2@nk_strtod

; 4759 :         int i, pow, div;
; 4760 :         p++;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 4761 :         if (*p == '-') {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN13@nk_strtod

; 4762 :             div = nk_true;

	mov	DWORD PTR _div$1[ebp], 1

; 4763 :             p++;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN10@nk_strtod
$LN13@nk_strtod:

; 4764 :         } else if (*p == '+') {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 43					; 0000002bH
	jne	SHORT $LN11@nk_strtod

; 4765 :             div = nk_false;

	mov	DWORD PTR _div$1[ebp], 0

; 4766 :             p++;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN10@nk_strtod
$LN11@nk_strtod:

; 4767 :         } else div = nk_false;

	mov	DWORD PTR _div$1[ebp], 0
$LN10@nk_strtod:

; 4768 : 
; 4769 :         for (pow = 0; *p; p++)

	mov	DWORD PTR _pow$2[ebp], 0
	jmp	SHORT $LN9@nk_strtod
$LN8@nk_strtod:
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN9@nk_strtod:
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN7@nk_strtod

; 4770 :             pow = pow * 10 + (int) (*p - '0');

	imul	eax, DWORD PTR _pow$2[ebp], 10
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-48]
	mov	DWORD PTR _pow$2[ebp], eax
	jmp	SHORT $LN8@nk_strtod
$LN7@nk_strtod:

; 4771 : 
; 4772 :         for (m = 1.0, i = 0; i < pow; i++)

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _m$[ebp], xmm0
	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN6@nk_strtod
$LN5@nk_strtod:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN6@nk_strtod:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _pow$2[ebp]
	jge	SHORT $LN4@nk_strtod

; 4773 :             m *= 10.0;

	movsd	xmm0, QWORD PTR _m$[ebp]
	mulsd	xmm0, QWORD PTR __real@4024000000000000
	movsd	QWORD PTR _m$[ebp], xmm0
	jmp	SHORT $LN5@nk_strtod
$LN4@nk_strtod:

; 4774 : 
; 4775 :         if (div)

	cmp	DWORD PTR _div$1[ebp], 0
	je	SHORT $LN3@nk_strtod

; 4776 :             value /= m;

	movsd	xmm0, QWORD PTR _value$[ebp]
	divsd	xmm0, QWORD PTR _m$[ebp]
	movsd	QWORD PTR _value$[ebp], xmm0
	jmp	SHORT $LN2@nk_strtod
$LN3@nk_strtod:

; 4777 :         else value *= m;

	movsd	xmm0, QWORD PTR _value$[ebp]
	mulsd	xmm0, QWORD PTR _m$[ebp]
	movsd	QWORD PTR _value$[ebp], xmm0
$LN2@nk_strtod:

; 4778 :     }
; 4779 :     number = value * neg;

	movsd	xmm0, QWORD PTR _value$[ebp]
	mulsd	xmm0, QWORD PTR _neg$[ebp]
	movsd	QWORD PTR _number$[ebp], xmm0

; 4780 :     if (endptr)

	cmp	DWORD PTR _endptr$[ebp], 0
	je	SHORT $LN1@nk_strtod

; 4781 :         *endptr = p;

	mov	eax, DWORD PTR _endptr$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@nk_strtod:

; 4782 :     return number;

	fld	QWORD PTR _number$[ebp]
$LN25@nk_strtod:

; 4783 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_strtod ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_strtof
_TEXT	SEGMENT
_double_value$ = -24					; size = 8
_float_value$ = -8					; size = 4
_str$ = 8						; size = 4
_endptr$ = 12						; size = 4
_nk_strtof PROC						; COMDAT

; 4787 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4788 :     float float_value;
; 4789 :     double double_value;
; 4790 :     double_value = NK_STRTOD(str, endptr);

	mov	eax, DWORD PTR _endptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_nk_strtod
	add	esp, 8
	fstp	QWORD PTR _double_value$[ebp]

; 4791 :     float_value = (float)double_value;

	cvtsd2ss xmm0, QWORD PTR _double_value$[ebp]
	movss	DWORD PTR _float_value$[ebp], xmm0

; 4792 :     return float_value;

	fld	DWORD PTR _float_value$[ebp]

; 4793 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_strtof ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_strtoi
_TEXT	SEGMENT
_value$ = -32						; size = 4
_p$ = -20						; size = 4
_neg$ = -8						; size = 4
_str$ = 8						; size = 4
_endptr$ = 12						; size = 4
_nk_strtoi PROC						; COMDAT

; 4704 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4705 :     int neg = 1;

	mov	DWORD PTR _neg$[ebp], 1

; 4706 :     const char *p = str;

	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 4707 :     int value = 0;

	mov	DWORD PTR _value$[ebp], 0

; 4708 : 
; 4709 :     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN10@nk_strtoi
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_strtoi@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_strtoi:

; 4710 :     if (!str) return 0;

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN6@nk_strtoi
	xor	eax, eax
	jmp	$LN8@nk_strtoi
$LN6@nk_strtoi:

; 4711 : 
; 4712 :     /* skip whitespace */
; 4713 :     while (*p == ' ') p++;

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN5@nk_strtoi
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN6@nk_strtoi
$LN5@nk_strtoi:

; 4714 :     if (*p == '-') {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN3@nk_strtoi

; 4715 :         neg = -1;

	mov	DWORD PTR _neg$[ebp], -1

; 4716 :         p++;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN3@nk_strtoi:

; 4717 :     }
; 4718 :     while (*p && *p >= '0' && *p <= '9') {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@nk_strtoi
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN2@nk_strtoi
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN2@nk_strtoi

; 4719 :         value = value * 10 + (int) (*p - '0');

	imul	eax, DWORD PTR _value$[ebp], 10
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-48]
	mov	DWORD PTR _value$[ebp], eax

; 4720 :         p++;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 4721 :     }

	jmp	SHORT $LN3@nk_strtoi
$LN2@nk_strtoi:

; 4722 :     if (endptr)

	cmp	DWORD PTR _endptr$[ebp], 0
	je	SHORT $LN1@nk_strtoi

; 4723 :         *endptr = p;

	mov	eax, DWORD PTR _endptr$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@nk_strtoi:

; 4724 :     return neg*value;

	mov	eax, DWORD PTR _neg$[ebp]
	imul	eax, DWORD PTR _value$[ebp]
$LN8@nk_strtoi:

; 4725 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_strtoi ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_stricmpn
_TEXT	SEGMENT
tv88 = -232						; size = 4
tv75 = -232						; size = 4
_d$ = -32						; size = 4
_c2$ = -20						; size = 4
_c1$ = -8						; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_n$ = 16						; size = 4
_nk_stricmpn PROC					; COMDAT

; 4820 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4821 :     int c1,c2,d;
; 4822 :     NK_ASSERT(n >= 0);

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN10@nk_stricmp
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_stricmpn@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@OOEGIONJ@?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_stricmp:

; 4823 :     do {
; 4824 :         c1 = *s1++;

	mov	eax, DWORD PTR _s1$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _c1$[ebp], ecx
	mov	edx, DWORD PTR _s1$[ebp]
	add	edx, 1
	mov	DWORD PTR _s1$[ebp], edx

; 4825 :         c2 = *s2++;

	mov	eax, DWORD PTR _s2$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _c2$[ebp], ecx
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, 1
	mov	DWORD PTR _s2$[ebp], edx

; 4826 :         if (!n--) return 0;

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR tv75[ebp], eax
	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
	cmp	DWORD PTR tv75[ebp], 0
	jne	SHORT $LN7@nk_stricmp
	xor	eax, eax
	jmp	SHORT $LN11@nk_stricmp
$LN7@nk_stricmp:

; 4827 : 
; 4828 :         d = c1 - c2;

	mov	eax, DWORD PTR _c1$[ebp]
	sub	eax, DWORD PTR _c2$[ebp]
	mov	DWORD PTR _d$[ebp], eax
$LN6@nk_stricmp:

; 4829 :         while (d) {

	cmp	DWORD PTR _d$[ebp], 0
	je	SHORT $LN9@nk_stricmp

; 4830 :             if (c1 <= 'Z' && c1 >= 'A') {

	cmp	DWORD PTR _c1$[ebp], 90			; 0000005aH
	jg	SHORT $LN4@nk_stricmp
	cmp	DWORD PTR _c1$[ebp], 65			; 00000041H
	jl	SHORT $LN4@nk_stricmp

; 4831 :                 d += ('a' - 'A');

	mov	eax, DWORD PTR _d$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _d$[ebp], eax

; 4832 :                 if (!d) break;

	jne	SHORT $LN4@nk_stricmp
	jmp	SHORT $LN9@nk_stricmp
$LN4@nk_stricmp:

; 4833 :             }
; 4834 :             if (c2 <= 'Z' && c2 >= 'A') {

	cmp	DWORD PTR _c2$[ebp], 90			; 0000005aH
	jg	SHORT $LN2@nk_stricmp
	cmp	DWORD PTR _c2$[ebp], 65			; 00000041H
	jl	SHORT $LN2@nk_stricmp

; 4835 :                 d -= ('a' - 'A');

	mov	eax, DWORD PTR _d$[ebp]
	sub	eax, 32					; 00000020H
	mov	DWORD PTR _d$[ebp], eax

; 4836 :                 if (!d) break;

	jne	SHORT $LN2@nk_stricmp
	jmp	SHORT $LN9@nk_stricmp
$LN2@nk_stricmp:

; 4837 :             }
; 4838 :             return ((d >= 0) << 1) - 1;

	cmp	DWORD PTR _d$[ebp], 0
	jl	SHORT $LN14@nk_stricmp
	mov	DWORD PTR tv88[ebp], 1
	jmp	SHORT $LN15@nk_stricmp
$LN14@nk_stricmp:
	mov	DWORD PTR tv88[ebp], 0
$LN15@nk_stricmp:
	mov	eax, DWORD PTR tv88[ebp]
	lea	eax, DWORD PTR [eax+eax-1]
	jmp	SHORT $LN11@nk_stricmp

; 4839 :         }

	jmp	SHORT $LN6@nk_stricmp
$LN9@nk_stricmp:

; 4840 :     } while (c1);

	cmp	DWORD PTR _c1$[ebp], 0
	jne	$LN10@nk_stricmp

; 4841 :     return 0;

	xor	eax, eax
$LN11@nk_stricmp:

; 4842 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_stricmpn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_stricmp
_TEXT	SEGMENT
tv79 = -232						; size = 4
_d$ = -32						; size = 4
_c2$ = -20						; size = 4
_c1$ = -8						; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_nk_stricmp PROC					; COMDAT

; 4797 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN9@nk_stricmp:

; 4798 :     nk_int c1,c2,d;
; 4799 :     do {
; 4800 :         c1 = *s1++;

	mov	eax, DWORD PTR _s1$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _c1$[ebp], ecx
	mov	edx, DWORD PTR _s1$[ebp]
	add	edx, 1
	mov	DWORD PTR _s1$[ebp], edx

; 4801 :         c2 = *s2++;

	mov	eax, DWORD PTR _s2$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _c2$[ebp], ecx
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, 1
	mov	DWORD PTR _s2$[ebp], edx

; 4802 :         d = c1 - c2;

	mov	eax, DWORD PTR _c1$[ebp]
	sub	eax, DWORD PTR _c2$[ebp]
	mov	DWORD PTR _d$[ebp], eax
$LN6@nk_stricmp:

; 4803 :         while (d) {

	cmp	DWORD PTR _d$[ebp], 0
	je	SHORT $LN8@nk_stricmp

; 4804 :             if (c1 <= 'Z' && c1 >= 'A') {

	cmp	DWORD PTR _c1$[ebp], 90			; 0000005aH
	jg	SHORT $LN4@nk_stricmp
	cmp	DWORD PTR _c1$[ebp], 65			; 00000041H
	jl	SHORT $LN4@nk_stricmp

; 4805 :                 d += ('a' - 'A');

	mov	eax, DWORD PTR _d$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _d$[ebp], eax

; 4806 :                 if (!d) break;

	jne	SHORT $LN4@nk_stricmp
	jmp	SHORT $LN8@nk_stricmp
$LN4@nk_stricmp:

; 4807 :             }
; 4808 :             if (c2 <= 'Z' && c2 >= 'A') {

	cmp	DWORD PTR _c2$[ebp], 90			; 0000005aH
	jg	SHORT $LN2@nk_stricmp
	cmp	DWORD PTR _c2$[ebp], 65			; 00000041H
	jl	SHORT $LN2@nk_stricmp

; 4809 :                 d -= ('a' - 'A');

	mov	eax, DWORD PTR _d$[ebp]
	sub	eax, 32					; 00000020H
	mov	DWORD PTR _d$[ebp], eax

; 4810 :                 if (!d) break;

	jne	SHORT $LN2@nk_stricmp
	jmp	SHORT $LN8@nk_stricmp
$LN2@nk_stricmp:

; 4811 :             }
; 4812 :             return ((d >= 0) << 1) - 1;

	cmp	DWORD PTR _d$[ebp], 0
	jl	SHORT $LN12@nk_stricmp
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN13@nk_stricmp
$LN12@nk_stricmp:
	mov	DWORD PTR tv79[ebp], 0
$LN13@nk_stricmp:
	mov	eax, DWORD PTR tv79[ebp]
	lea	eax, DWORD PTR [eax+eax-1]
	jmp	SHORT $LN10@nk_stricmp

; 4813 :         }

	jmp	SHORT $LN6@nk_stricmp
$LN8@nk_stricmp:

; 4814 :     } while (c1);

	cmp	DWORD PTR _c1$[ebp], 0
	jne	$LN9@nk_stricmp

; 4815 :     return 0;

	xor	eax, eax
$LN10@nk_stricmp:

; 4816 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_stricmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_strlen
_TEXT	SEGMENT
tv75 = -212						; size = 4
tv74 = -208						; size = 4
_siz$ = -8						; size = 4
_str$ = 8						; size = 4
_nk_strlen PROC						; COMDAT

; 4695 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4696 :     int siz = 0;

	mov	DWORD PTR _siz$[ebp], 0

; 4697 :     NK_ASSERT(str);

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN2@nk_strlen
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_strlen@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17OJIHJBCF@?$AAs?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN2@nk_strlen:

; 4698 :     while (str && *str++ != '\0') siz++;

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN1@nk_strlen
	mov	eax, DWORD PTR _str$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv74[ebp], ecx
	mov	edx, DWORD PTR _str$[ebp]
	add	edx, 1
	mov	DWORD PTR _str$[ebp], edx
	cmp	DWORD PTR tv74[ebp], 0
	je	SHORT $LN6@nk_strlen
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN7@nk_strlen
$LN6@nk_strlen:
	mov	DWORD PTR tv75[ebp], 0
$LN7@nk_strlen:
	cmp	DWORD PTR tv75[ebp], 0
	je	SHORT $LN1@nk_strlen
	mov	eax, DWORD PTR _siz$[ebp]
	add	eax, 1
	mov	DWORD PTR _siz$[ebp], eax
	jmp	SHORT $LN2@nk_strlen
$LN1@nk_strlen:

; 4699 :     return siz;

	mov	eax, DWORD PTR _siz$[ebp]

; 4700 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_strlen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rect_size
_TEXT	SEGMENT
_ret$ = -12						; size = 8
_r$ = 8							; size = 16
_nk_rect_size PROC					; COMDAT

; 4504 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4505 :     struct nk_vec2 ret;
; 4506 :     ret.x = r.w; ret.y = r.h;

	movss	xmm0, DWORD PTR _r$[ebp+8]
	movss	DWORD PTR _ret$[ebp], xmm0
	movss	xmm0, DWORD PTR _r$[ebp+12]
	movss	DWORD PTR _ret$[ebp+4], xmm0

; 4507 :     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _ret$[ebp+4]

; 4508 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_rect_si
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@nk_rect_si:
	DD	1
	DD	$LN4@nk_rect_si
$LN4@nk_rect_si:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@nk_rect_si
$LN3@nk_rect_si:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_nk_rect_size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rect_pos
_TEXT	SEGMENT
_ret$ = -12						; size = 8
_r$ = 8							; size = 16
_nk_rect_pos PROC					; COMDAT

; 4496 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4497 :     struct nk_vec2 ret;
; 4498 :     ret.x = r.x; ret.y = r.y;

	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR _ret$[ebp], xmm0
	movss	xmm0, DWORD PTR _r$[ebp+4]
	movss	DWORD PTR _ret$[ebp+4], xmm0

; 4499 :     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _ret$[ebp+4]

; 4500 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_rect_po
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@nk_rect_po:
	DD	1
	DD	$LN4@nk_rect_po
$LN4@nk_rect_po:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@nk_rect_po
$LN3@nk_rect_po:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_nk_rect_pos ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rectiv
_TEXT	SEGMENT
$T1 = -212						; size = 16
$T2 = 8							; size = 4
_r$ = 12						; size = 4
_nk_rectiv PROC						; COMDAT

; 4490 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4491 :     return nk_recti(r[0], r[1], r[2], r[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	_nk_recti
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T2[ebp]

; 4492 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_rectiv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rectv
_TEXT	SEGMENT
$T1 = -212						; size = 16
$T2 = 8							; size = 4
_r$ = 12						; size = 4
_nk_rectv PROC						; COMDAT

; 4484 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4485 :     return nk_rect(r[0], r[1], r[2], r[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _r$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _r$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _r$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_nk_rect
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR $T2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR $T2[ebp]

; 4486 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_rectv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_recta
_TEXT	SEGMENT
$T1 = -212						; size = 16
$T2 = 8							; size = 4
_pos$ = 12						; size = 8
_size$ = 20						; size = 8
_nk_recta PROC						; COMDAT

; 4478 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4479 :     return nk_rect(pos.x, pos.y, size.x, size.y);

	push	ecx
	movss	xmm0, DWORD PTR _size$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _size$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	_nk_rect
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T2[ebp]

; 4480 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_recta ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_recti
_TEXT	SEGMENT
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_w$ = 20						; size = 4
_h$ = 24						; size = 4
_nk_recti PROC						; COMDAT

; 4467 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 4468 :     struct nk_rect r;
; 4469 :     r.x = (float)x;

	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR _r$[ebp], xmm0

; 4470 :     r.y = (float)y;

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _r$[ebp+4], xmm0

; 4471 :     r.w = (float)w;

	cvtsi2ss xmm0, DWORD PTR _w$[ebp]
	movss	DWORD PTR _r$[ebp+8], xmm0

; 4472 :     r.h = (float)h;

	cvtsi2ss xmm0, DWORD PTR _h$[ebp]
	movss	DWORD PTR _r$[ebp+12], xmm0

; 4473 :     return r;

	mov	eax, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T1[ebp]

; 4474 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_recti
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@nk_recti:
	DD	1
	DD	$LN4@nk_recti
$LN4@nk_recti:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@nk_recti
$LN3@nk_recti:
	DB	114					; 00000072H
	DB	0
_nk_recti ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rect
_TEXT	SEGMENT
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_w$ = 20						; size = 4
_h$ = 24						; size = 4
_nk_rect PROC						; COMDAT

; 4458 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 4459 :     struct nk_rect r;
; 4460 :     r.x = x; r.y = y;

	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR _r$[ebp], xmm0
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _r$[ebp+4], xmm0

; 4461 :     r.w = w; r.h = h;

	movss	xmm0, DWORD PTR _w$[ebp]
	movss	DWORD PTR _r$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _h$[ebp]
	movss	DWORD PTR _r$[ebp+12], xmm0

; 4462 :     return r;

	mov	eax, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T1[ebp]

; 4463 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_rect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@nk_rect:
	DD	1
	DD	$LN4@nk_rect
$LN4@nk_rect:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@nk_rect
$LN3@nk_rect:
	DB	114					; 00000072H
	DB	0
_nk_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_get_null_rect
_TEXT	SEGMENT
$T1 = 8							; size = 4
_nk_get_null_rect PROC					; COMDAT

; 4452 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4453 :     return nk_null_rect;

	mov	eax, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR _nk_null_rect
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _nk_null_rect+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _nk_null_rect+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _nk_null_rect+12
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T1[ebp]

; 4454 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_get_null_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_vec2iv
_TEXT	SEGMENT
_v$ = 8							; size = 4
_nk_vec2iv PROC						; COMDAT

; 4559 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4560 :     return nk_vec2i(v[0], v[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_nk_vec2i
	add	esp, 8

; 4561 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_vec2iv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_vec2v
_TEXT	SEGMENT
_v$ = 8							; size = 4
_nk_vec2v PROC						; COMDAT

; 4553 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4554 :     return nk_vec2(v[0], v[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8

; 4555 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_vec2v ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_vec2i
_TEXT	SEGMENT
_ret$ = -12						; size = 8
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_nk_vec2i PROC						; COMDAT

; 4544 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4545 :     struct nk_vec2 ret;
; 4546 :     ret.x = (float)x;

	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR _ret$[ebp], xmm0

; 4547 :     ret.y = (float)y;

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _ret$[ebp+4], xmm0

; 4548 :     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _ret$[ebp+4]

; 4549 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_vec2i
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@nk_vec2i:
	DD	1
	DD	$LN4@nk_vec2i
$LN4@nk_vec2i:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@nk_vec2i
$LN3@nk_vec2i:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_nk_vec2i ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_vec2
_TEXT	SEGMENT
_ret$ = -12						; size = 8
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_nk_vec2 PROC						; COMDAT

; 4536 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4537 :     struct nk_vec2 ret;
; 4538 :     ret.x = x; ret.y = y;

	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR _ret$[ebp], xmm0
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _ret$[ebp+4], xmm0

; 4539 :     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _ret$[ebp+4]

; 4540 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_vec2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@nk_vec2:
	DD	1
	DD	$LN4@nk_vec2
$LN4@nk_vec2:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@nk_vec2
$LN3@nk_vec2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_nk_vec2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_triangle_from_direction
_TEXT	SEGMENT
tv81 = -220						; size = 4
tv75 = -220						; size = 4
_h_half$ = -20						; size = 4
_w_half$ = -8						; size = 4
_result$ = 8						; size = 4
_r$ = 12						; size = 16
_pad_x$ = 28						; size = 4
_pad_y$ = 32						; size = 4
_direction$ = 36					; size = 4
_nk_triangle_from_direction PROC			; COMDAT

; 6197 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6198 :     float w_half, h_half;
; 6199 :     NK_ASSERT(result);

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN9@nk_triangl
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_triangle_from_direction@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@PHBBLDEN@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_triangl:

; 6200 : 
; 6201 :     r.w = NK_MAX(2 * pad_x, r.w);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _pad_x$[ebp]
	movss	xmm1, DWORD PTR _r$[ebp+8]
	comiss	xmm1, xmm0
	jbe	SHORT $LN10@nk_triangl
	movss	xmm0, DWORD PTR _r$[ebp+8]
	movss	DWORD PTR tv75[ebp], xmm0
	jmp	SHORT $LN11@nk_triangl
$LN10@nk_triangl:
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _pad_x$[ebp]
	movss	DWORD PTR tv75[ebp], xmm0
$LN11@nk_triangl:
	movss	xmm0, DWORD PTR tv75[ebp]
	movss	DWORD PTR _r$[ebp+8], xmm0

; 6202 :     r.h = NK_MAX(2 * pad_y, r.h);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _pad_y$[ebp]
	movss	xmm1, DWORD PTR _r$[ebp+12]
	comiss	xmm1, xmm0
	jbe	SHORT $LN12@nk_triangl
	movss	xmm0, DWORD PTR _r$[ebp+12]
	movss	DWORD PTR tv81[ebp], xmm0
	jmp	SHORT $LN13@nk_triangl
$LN12@nk_triangl:
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _pad_y$[ebp]
	movss	DWORD PTR tv81[ebp], xmm0
$LN13@nk_triangl:
	movss	xmm0, DWORD PTR tv81[ebp]
	movss	DWORD PTR _r$[ebp+12], xmm0

; 6203 :     r.w = r.w - 2 * pad_x;

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _pad_x$[ebp]
	movss	xmm1, DWORD PTR _r$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _r$[ebp+8], xmm1

; 6204 :     r.h = r.h - 2 * pad_y;

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _pad_y$[ebp]
	movss	xmm1, DWORD PTR _r$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _r$[ebp+12], xmm1

; 6205 : 
; 6206 :     r.x = r.x + pad_x;

	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR _pad_x$[ebp]
	movss	DWORD PTR _r$[ebp], xmm0

; 6207 :     r.y = r.y + pad_y;

	movss	xmm0, DWORD PTR _r$[ebp+4]
	addss	xmm0, DWORD PTR _pad_y$[ebp]
	movss	DWORD PTR _r$[ebp+4], xmm0

; 6208 : 
; 6209 :     w_half = r.w / 2.0f;

	movss	xmm0, DWORD PTR _r$[ebp+8]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _w_half$[ebp], xmm0

; 6210 :     h_half = r.h / 2.0f;

	movss	xmm0, DWORD PTR _r$[ebp+12]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _h_half$[ebp], xmm0

; 6211 : 
; 6212 :     if (direction == NK_UP) {

	cmp	DWORD PTR _direction$[ebp], 0
	jne	$LN6@nk_triangl

; 6213 :         result[0] = nk_vec2(r.x + w_half, r.y);

	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR _w_half$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	imul	ecx, ecx, 0
	mov	esi, DWORD PTR _result$[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx

; 6214 :         result[1] = nk_vec2(r.x + r.w, r.y + r.h);

	movss	xmm0, DWORD PTR _r$[ebp+4]
	addss	xmm0, DWORD PTR _r$[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	shl	ecx, 0
	mov	esi, DWORD PTR _result$[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx

; 6215 :         result[2] = nk_vec2(r.x, r.y + r.h);

	movss	xmm0, DWORD PTR _r$[ebp+4]
	addss	xmm0, DWORD PTR _r$[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	shl	ecx, 1
	mov	esi, DWORD PTR _result$[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx
	jmp	$LN1@nk_triangl
$LN6@nk_triangl:

; 6216 :     } else if (direction == NK_RIGHT) {

	cmp	DWORD PTR _direction$[ebp], 1
	jne	$LN4@nk_triangl

; 6217 :         result[0] = nk_vec2(r.x, r.y);

	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	imul	ecx, ecx, 0
	mov	esi, DWORD PTR _result$[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx

; 6218 :         result[1] = nk_vec2(r.x + r.w, r.y + h_half);

	movss	xmm0, DWORD PTR _r$[ebp+4]
	addss	xmm0, DWORD PTR _h_half$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	shl	ecx, 0
	mov	esi, DWORD PTR _result$[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx

; 6219 :         result[2] = nk_vec2(r.x, r.y + r.h);

	movss	xmm0, DWORD PTR _r$[ebp+4]
	addss	xmm0, DWORD PTR _r$[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	shl	ecx, 1
	mov	esi, DWORD PTR _result$[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx
	jmp	$LN1@nk_triangl
$LN4@nk_triangl:

; 6220 :     } else if (direction == NK_DOWN) {

	cmp	DWORD PTR _direction$[ebp], 2
	jne	$LN2@nk_triangl

; 6221 :         result[0] = nk_vec2(r.x, r.y);

	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	imul	ecx, ecx, 0
	mov	esi, DWORD PTR _result$[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx

; 6222 :         result[1] = nk_vec2(r.x + r.w, r.y);

	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	shl	ecx, 0
	mov	esi, DWORD PTR _result$[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx

; 6223 :         result[2] = nk_vec2(r.x + w_half, r.y + r.h);

	movss	xmm0, DWORD PTR _r$[ebp+4]
	addss	xmm0, DWORD PTR _r$[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR _w_half$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	shl	ecx, 1
	mov	esi, DWORD PTR _result$[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx

; 6224 :     } else {

	jmp	$LN1@nk_triangl
$LN2@nk_triangl:

; 6225 :         result[0] = nk_vec2(r.x, r.y + h_half);

	movss	xmm0, DWORD PTR _r$[ebp+4]
	addss	xmm0, DWORD PTR _h_half$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	imul	ecx, ecx, 0
	mov	esi, DWORD PTR _result$[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx

; 6226 :         result[1] = nk_vec2(r.x + r.w, r.y);

	push	ecx
	movss	xmm0, DWORD PTR _r$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	shl	ecx, 0
	mov	esi, DWORD PTR _result$[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx

; 6227 :         result[2] = nk_vec2(r.x + r.w, r.y + r.h);

	movss	xmm0, DWORD PTR _r$[ebp+4]
	addss	xmm0, DWORD PTR _r$[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR _r$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, 8
	shl	ecx, 1
	mov	esi, DWORD PTR _result$[ebp]
	mov	DWORD PTR [esi+ecx], eax
	mov	DWORD PTR [esi+ecx+4], edx
$LN1@nk_triangl:

; 6228 :     }
; 6229 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_triangle_from_direction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_murmur_hash
_TEXT	SEGMENT
tv87 = -316						; size = 4
_i$ = -116						; size = 4
_k1$ = -104						; size = 4
_blocks$ = -92						; size = 4
_tail$ = -80						; size = 4
_c2$ = -68						; size = 4
_c1$ = -56						; size = 4
_h1$ = -44						; size = 4
_nblocks$ = -32						; size = 4
_data$ = -20						; size = 4
_conv$ = -8						; size = 4
_key$ = 8						; size = 4
_len$ = 12						; size = 4
_seed$ = 16						; size = 4
_nk_murmur_hash PROC					; COMDAT

; 5554 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5555 :     /* 32-Bit MurmurHash3: https://code.google.com/p/smhasher/wiki/MurmurHash3*/
; 5556 :     #define NK_ROTL(x,r) ((x) << (r) | ((x) >> (32 - r)))
; 5557 :     union {const nk_uint *i; const nk_byte *b;} conv = {0};

	mov	DWORD PTR _conv$[ebp], 0

; 5558 :     const nk_byte *data = (const nk_byte*)key;

	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _data$[ebp], eax

; 5559 :     const int nblocks = len/4;

	mov	eax, DWORD PTR _len$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _nblocks$[ebp], eax

; 5560 :     nk_uint h1 = seed;

	mov	eax, DWORD PTR _seed$[ebp]
	mov	DWORD PTR _h1$[ebp], eax

; 5561 :     const nk_uint c1 = 0xcc9e2d51;

	mov	DWORD PTR _c1$[ebp], -862048943		; cc9e2d51H

; 5562 :     const nk_uint c2 = 0x1b873593;

	mov	DWORD PTR _c2$[ebp], 461845907		; 1b873593H

; 5563 :     const nk_byte *tail;
; 5564 :     const nk_uint *blocks;
; 5565 :     nk_uint k1;
; 5566 :     int i;
; 5567 : 
; 5568 :     /* body */
; 5569 :     if (!key) return 0;

	cmp	DWORD PTR _key$[ebp], 0
	jne	SHORT $LN10@nk_murmur_
	xor	eax, eax
	jmp	$LN11@nk_murmur_
$LN10@nk_murmur_:

; 5570 :     conv.b = (data + nblocks*4);

	mov	eax, DWORD PTR _nblocks$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _conv$[ebp], edx

; 5571 :     blocks = (const nk_uint*)conv.i;

	mov	eax, DWORD PTR _conv$[ebp]
	mov	DWORD PTR _blocks$[ebp], eax

; 5572 :     for (i = -nblocks; i; ++i) {

	mov	eax, DWORD PTR _nblocks$[ebp]
	neg	eax
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN9@nk_murmur_
$LN8@nk_murmur_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@nk_murmur_:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN7@nk_murmur_

; 5573 :         k1 = blocks[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _blocks$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _k1$[ebp], edx

; 5574 :         k1 *= c1;

	mov	eax, DWORD PTR _k1$[ebp]
	imul	eax, DWORD PTR _c1$[ebp]
	mov	DWORD PTR _k1$[ebp], eax

; 5575 :         k1 = NK_ROTL(k1,15);

	mov	eax, DWORD PTR _k1$[ebp]
	shl	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _k1$[ebp]
	shr	ecx, 17					; 00000011H
	or	eax, ecx
	mov	DWORD PTR _k1$[ebp], eax

; 5576 :         k1 *= c2;

	mov	eax, DWORD PTR _k1$[ebp]
	imul	eax, DWORD PTR _c2$[ebp]
	mov	DWORD PTR _k1$[ebp], eax

; 5577 : 
; 5578 :         h1 ^= k1;

	mov	eax, DWORD PTR _h1$[ebp]
	xor	eax, DWORD PTR _k1$[ebp]
	mov	DWORD PTR _h1$[ebp], eax

; 5579 :         h1 = NK_ROTL(h1,13);

	mov	eax, DWORD PTR _h1$[ebp]
	shl	eax, 13					; 0000000dH
	mov	ecx, DWORD PTR _h1$[ebp]
	shr	ecx, 19					; 00000013H
	or	eax, ecx
	mov	DWORD PTR _h1$[ebp], eax

; 5580 :         h1 = h1*5+0xe6546b64;

	imul	eax, DWORD PTR _h1$[ebp], 5
	sub	eax, 430675100				; 19ab949cH
	mov	DWORD PTR _h1$[ebp], eax

; 5581 :     }

	jmp	SHORT $LN8@nk_murmur_
$LN7@nk_murmur_:

; 5582 : 
; 5583 :     /* tail */
; 5584 :     tail = (const nk_byte*)(data + nblocks*4);

	mov	eax, DWORD PTR _nblocks$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _tail$[ebp], edx

; 5585 :     k1 = 0;

	mov	DWORD PTR _k1$[ebp], 0

; 5586 :     switch (len & 3) {

	mov	eax, DWORD PTR _len$[ebp]
	and	eax, 3
	mov	DWORD PTR tv87[ebp], eax
	cmp	DWORD PTR tv87[ebp], 1
	je	SHORT $LN2@nk_murmur_
	cmp	DWORD PTR tv87[ebp], 2
	je	SHORT $LN3@nk_murmur_
	cmp	DWORD PTR tv87[ebp], 3
	je	SHORT $LN4@nk_murmur_
	jmp	SHORT $LN5@nk_murmur_
$LN4@nk_murmur_:

; 5587 :     case 3: k1 ^= (nk_uint)(tail[2] << 16);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _tail$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 16					; 00000010H
	xor	edx, DWORD PTR _k1$[ebp]
	mov	DWORD PTR _k1$[ebp], edx
$LN3@nk_murmur_:

; 5588 :     case 2: k1 ^= (nk_uint)(tail[1] << 8u);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _tail$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	xor	edx, DWORD PTR _k1$[ebp]
	mov	DWORD PTR _k1$[ebp], edx
$LN2@nk_murmur_:

; 5589 :     case 1: k1 ^= tail[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _tail$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	xor	eax, DWORD PTR _k1$[ebp]
	mov	DWORD PTR _k1$[ebp], eax

; 5590 :             k1 *= c1;

	mov	eax, DWORD PTR _k1$[ebp]
	imul	eax, DWORD PTR _c1$[ebp]
	mov	DWORD PTR _k1$[ebp], eax

; 5591 :             k1 = NK_ROTL(k1,15);

	mov	eax, DWORD PTR _k1$[ebp]
	shl	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _k1$[ebp]
	shr	ecx, 17					; 00000011H
	or	eax, ecx
	mov	DWORD PTR _k1$[ebp], eax

; 5592 :             k1 *= c2;

	mov	eax, DWORD PTR _k1$[ebp]
	imul	eax, DWORD PTR _c2$[ebp]
	mov	DWORD PTR _k1$[ebp], eax

; 5593 :             h1 ^= k1;

	mov	eax, DWORD PTR _h1$[ebp]
	xor	eax, DWORD PTR _k1$[ebp]
	mov	DWORD PTR _h1$[ebp], eax
$LN5@nk_murmur_:

; 5594 :     default: break;
; 5595 :     }
; 5596 : 
; 5597 :     /* finalization */
; 5598 :     h1 ^= (nk_uint)len;

	mov	eax, DWORD PTR _h1$[ebp]
	xor	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _h1$[ebp], eax

; 5599 :     /* fmix32 */
; 5600 :     h1 ^= h1 >> 16;

	mov	eax, DWORD PTR _h1$[ebp]
	shr	eax, 16					; 00000010H
	xor	eax, DWORD PTR _h1$[ebp]
	mov	DWORD PTR _h1$[ebp], eax

; 5601 :     h1 *= 0x85ebca6b;

	imul	eax, DWORD PTR _h1$[ebp], -2048144789
	mov	DWORD PTR _h1$[ebp], eax

; 5602 :     h1 ^= h1 >> 13;

	mov	eax, DWORD PTR _h1$[ebp]
	shr	eax, 13					; 0000000dH
	xor	eax, DWORD PTR _h1$[ebp]
	mov	DWORD PTR _h1$[ebp], eax

; 5603 :     h1 *= 0xc2b2ae35;

	imul	eax, DWORD PTR _h1$[ebp], -1028477387
	mov	DWORD PTR _h1$[ebp], eax

; 5604 :     h1 ^= h1 >> 16;

	mov	eax, DWORD PTR _h1$[ebp]
	shr	eax, 16					; 00000010H
	xor	eax, DWORD PTR _h1$[ebp]
	mov	DWORD PTR _h1$[ebp], eax

; 5605 : 
; 5606 :     #undef NK_ROTL
; 5607 :     return h1;

	mov	eax, DWORD PTR _h1$[ebp]
$LN11@nk_murmur_:

; 5608 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@nk_murmur_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN15@nk_murmur_:
	DD	1
	DD	$LN14@nk_murmur_
$LN14@nk_murmur_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN13@nk_murmur_
$LN13@nk_murmur_:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	0
_nk_murmur_hash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_subimage_handle
_TEXT	SEGMENT
_s$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_handle$ = 12						; size = 4
_w$ = 16						; size = 2
_h$ = 20						; size = 2
_r$ = 24						; size = 16
_nk_subimage_handle PROC				; COMDAT

; 6118 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 6119 :     struct nk_image s;
; 6120 :     nk_zero(&s, sizeof(s));

	push	16					; 00000010H
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 6121 :     s.handle = handle;

	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 6122 :     s.w = w; s.h = h;

	mov	ax, WORD PTR _w$[ebp]
	mov	WORD PTR _s$[ebp+4], ax
	mov	ax, WORD PTR _h$[ebp]
	mov	WORD PTR _s$[ebp+6], ax

; 6123 :     s.region[0] = (unsigned short)r.x;

	cvttss2si eax, DWORD PTR _r$[ebp]
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	WORD PTR _s$[ebp+edx+8], ax

; 6124 :     s.region[1] = (unsigned short)r.y;

	cvttss2si eax, DWORD PTR _r$[ebp+4]
	mov	ecx, 2
	shl	ecx, 0
	mov	WORD PTR _s$[ebp+ecx+8], ax

; 6125 :     s.region[2] = (unsigned short)r.w;

	cvttss2si eax, DWORD PTR _r$[ebp+8]
	mov	ecx, 2
	shl	ecx, 1
	mov	WORD PTR _s$[ebp+ecx+8], ax

; 6126 :     s.region[3] = (unsigned short)r.h;

	cvttss2si eax, DWORD PTR _r$[ebp+12]
	mov	ecx, 2
	imul	edx, ecx, 3
	mov	WORD PTR _s$[ebp+edx+8], ax

; 6127 :     return s;

	mov	eax, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _s$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _s$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _s$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T1[ebp]

; 6128 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_subimag
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@nk_subimag:
	DD	1
	DD	$LN4@nk_subimag
$LN4@nk_subimag:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@nk_subimag
$LN3@nk_subimag:
	DB	115					; 00000073H
	DB	0
_nk_subimage_handle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_subimage_id
_TEXT	SEGMENT
_s$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_id$ = 12						; size = 4
_w$ = 16						; size = 2
_h$ = 20						; size = 2
_r$ = 24						; size = 16
_nk_subimage_id PROC					; COMDAT

; 6103 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 6104 :     struct nk_image s;
; 6105 :     nk_zero(&s, sizeof(s));

	push	16					; 00000010H
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 6106 :     s.handle.id = id;

	mov	eax, DWORD PTR _id$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 6107 :     s.w = w; s.h = h;

	mov	ax, WORD PTR _w$[ebp]
	mov	WORD PTR _s$[ebp+4], ax
	mov	ax, WORD PTR _h$[ebp]
	mov	WORD PTR _s$[ebp+6], ax

; 6108 :     s.region[0] = (unsigned short)r.x;

	cvttss2si eax, DWORD PTR _r$[ebp]
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	WORD PTR _s$[ebp+edx+8], ax

; 6109 :     s.region[1] = (unsigned short)r.y;

	cvttss2si eax, DWORD PTR _r$[ebp+4]
	mov	ecx, 2
	shl	ecx, 0
	mov	WORD PTR _s$[ebp+ecx+8], ax

; 6110 :     s.region[2] = (unsigned short)r.w;

	cvttss2si eax, DWORD PTR _r$[ebp+8]
	mov	ecx, 2
	shl	ecx, 1
	mov	WORD PTR _s$[ebp+ecx+8], ax

; 6111 :     s.region[3] = (unsigned short)r.h;

	cvttss2si eax, DWORD PTR _r$[ebp+12]
	mov	ecx, 2
	imul	edx, ecx, 3
	mov	WORD PTR _s$[ebp+edx+8], ax

; 6112 :     return s;

	mov	eax, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _s$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _s$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _s$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T1[ebp]

; 6113 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_subimag
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@nk_subimag:
	DD	1
	DD	$LN4@nk_subimag
$LN4@nk_subimag:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@nk_subimag
$LN3@nk_subimag:
	DB	115					; 00000073H
	DB	0
_nk_subimage_id ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_subimage_ptr
_TEXT	SEGMENT
_s$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_ptr$ = 12						; size = 4
_w$ = 16						; size = 2
_h$ = 20						; size = 2
_r$ = 24						; size = 16
_nk_subimage_ptr PROC					; COMDAT

; 6089 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 6090 :     struct nk_image s;
; 6091 :     nk_zero(&s, sizeof(s));

	push	16					; 00000010H
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 6092 :     s.handle.ptr = ptr;

	mov	eax, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 6093 :     s.w = w; s.h = h;

	mov	ax, WORD PTR _w$[ebp]
	mov	WORD PTR _s$[ebp+4], ax
	mov	ax, WORD PTR _h$[ebp]
	mov	WORD PTR _s$[ebp+6], ax

; 6094 :     s.region[0] = (unsigned short)r.x;

	cvttss2si eax, DWORD PTR _r$[ebp]
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	WORD PTR _s$[ebp+edx+8], ax

; 6095 :     s.region[1] = (unsigned short)r.y;

	cvttss2si eax, DWORD PTR _r$[ebp+4]
	mov	ecx, 2
	shl	ecx, 0
	mov	WORD PTR _s$[ebp+ecx+8], ax

; 6096 :     s.region[2] = (unsigned short)r.w;

	cvttss2si eax, DWORD PTR _r$[ebp+8]
	mov	ecx, 2
	shl	ecx, 1
	mov	WORD PTR _s$[ebp+ecx+8], ax

; 6097 :     s.region[3] = (unsigned short)r.h;

	cvttss2si eax, DWORD PTR _r$[ebp+12]
	mov	ecx, 2
	imul	edx, ecx, 3
	mov	WORD PTR _s$[ebp+edx+8], ax

; 6098 :     return s;

	mov	eax, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _s$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _s$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _s$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T1[ebp]

; 6099 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_subimag
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@nk_subimag:
	DD	1
	DD	$LN4@nk_subimag
$LN4@nk_subimag:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@nk_subimag
$LN3@nk_subimag:
	DB	115					; 00000073H
	DB	0
_nk_subimage_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_image_is_subimage
_TEXT	SEGMENT
tv76 = -196						; size = 4
_img$ = 8						; size = 4
_nk_image_is_subimage PROC				; COMDAT

; 6175 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6176 :     NK_ASSERT(img);

	cmp	DWORD PTR _img$[ebp], 0
	jne	SHORT $LN3@nk_image_i
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_image_is_subimage@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17EHOCEIDI@?$AAi?$AAm?$AAg?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@nk_image_i:

; 6177 :     return !(img->w == 0 && img->h == 0);

	mov	eax, DWORD PTR _img$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN4@nk_image_i
	mov	edx, DWORD PTR _img$[ebp]
	movzx	eax, WORD PTR [edx+6]
	test	eax, eax
	jne	SHORT $LN4@nk_image_i
	mov	DWORD PTR tv76[ebp], 0
	jmp	SHORT $LN5@nk_image_i
$LN4@nk_image_i:
	mov	DWORD PTR tv76[ebp], 1
$LN5@nk_image_i:
	mov	eax, DWORD PTR tv76[ebp]

; 6178 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_image_is_subimage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_image_id
_TEXT	SEGMENT
_s$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_id$ = 12						; size = 4
_nk_image_id PROC					; COMDAT

; 6161 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 6162 :     struct nk_image s;
; 6163 :     nk_zero(&s, sizeof(s));

	push	16					; 00000010H
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 6164 :     s.handle.id = id;

	mov	eax, DWORD PTR _id$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 6165 :     s.w = 0; s.h = 0;

	xor	eax, eax
	mov	WORD PTR _s$[ebp+4], ax
	xor	eax, eax
	mov	WORD PTR _s$[ebp+6], ax

; 6166 :     s.region[0] = 0;

	mov	eax, 2
	imul	ecx, eax, 0
	xor	edx, edx
	mov	WORD PTR _s$[ebp+ecx+8], dx

; 6167 :     s.region[1] = 0;

	mov	eax, 2
	shl	eax, 0
	xor	ecx, ecx
	mov	WORD PTR _s$[ebp+eax+8], cx

; 6168 :     s.region[2] = 0;

	mov	eax, 2
	shl	eax, 1
	xor	ecx, ecx
	mov	WORD PTR _s$[ebp+eax+8], cx

; 6169 :     s.region[3] = 0;

	mov	eax, 2
	imul	ecx, eax, 3
	xor	edx, edx
	mov	WORD PTR _s$[ebp+ecx+8], dx

; 6170 :     return s;

	mov	eax, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _s$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _s$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _s$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T1[ebp]

; 6171 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_image_i
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@nk_image_i:
	DD	1
	DD	$LN4@nk_image_i
$LN4@nk_image_i:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@nk_image_i
$LN3@nk_image_i:
	DB	115					; 00000073H
	DB	0
_nk_image_id ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_image_ptr
_TEXT	SEGMENT
_s$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_ptr$ = 12						; size = 4
_nk_image_ptr PROC					; COMDAT

; 6146 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 6147 :     struct nk_image s;
; 6148 :     nk_zero(&s, sizeof(s));

	push	16					; 00000010H
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 6149 :     NK_ASSERT(ptr);

	cmp	DWORD PTR _ptr$[ebp], 0
	jne	SHORT $LN3@nk_image_p
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_image_ptr@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17GHAIJGMG@?$AAp?$AAt?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@nk_image_p:

; 6150 :     s.handle.ptr = ptr;

	mov	eax, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 6151 :     s.w = 0; s.h = 0;

	xor	eax, eax
	mov	WORD PTR _s$[ebp+4], ax
	xor	eax, eax
	mov	WORD PTR _s$[ebp+6], ax

; 6152 :     s.region[0] = 0;

	mov	eax, 2
	imul	ecx, eax, 0
	xor	edx, edx
	mov	WORD PTR _s$[ebp+ecx+8], dx

; 6153 :     s.region[1] = 0;

	mov	eax, 2
	shl	eax, 0
	xor	ecx, ecx
	mov	WORD PTR _s$[ebp+eax+8], cx

; 6154 :     s.region[2] = 0;

	mov	eax, 2
	shl	eax, 1
	xor	ecx, ecx
	mov	WORD PTR _s$[ebp+eax+8], cx

; 6155 :     s.region[3] = 0;

	mov	eax, 2
	imul	ecx, eax, 3
	xor	edx, edx
	mov	WORD PTR _s$[ebp+ecx+8], dx

; 6156 :     return s;

	mov	eax, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _s$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _s$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _s$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T1[ebp]

; 6157 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@nk_image_p
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@nk_image_p:
	DD	1
	DD	$LN5@nk_image_p
$LN5@nk_image_p:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN4@nk_image_p
$LN4@nk_image_p:
	DB	115					; 00000073H
	DB	0
_nk_image_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_image_handle
_TEXT	SEGMENT
_s$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_handle$ = 12						; size = 4
_nk_image_handle PROC					; COMDAT

; 6132 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 6133 :     struct nk_image s;
; 6134 :     nk_zero(&s, sizeof(s));

	push	16					; 00000010H
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 6135 :     s.handle = handle;

	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 6136 :     s.w = 0; s.h = 0;

	xor	eax, eax
	mov	WORD PTR _s$[ebp+4], ax
	xor	eax, eax
	mov	WORD PTR _s$[ebp+6], ax

; 6137 :     s.region[0] = 0;

	mov	eax, 2
	imul	ecx, eax, 0
	xor	edx, edx
	mov	WORD PTR _s$[ebp+ecx+8], dx

; 6138 :     s.region[1] = 0;

	mov	eax, 2
	shl	eax, 0
	xor	ecx, ecx
	mov	WORD PTR _s$[ebp+eax+8], cx

; 6139 :     s.region[2] = 0;

	mov	eax, 2
	shl	eax, 1
	xor	ecx, ecx
	mov	WORD PTR _s$[ebp+eax+8], cx

; 6140 :     s.region[3] = 0;

	mov	eax, 2
	imul	ecx, eax, 3
	xor	edx, edx
	mov	WORD PTR _s$[ebp+ecx+8], dx

; 6141 :     return s;

	mov	eax, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _s$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _s$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _s$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T1[ebp]

; 6142 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_image_h
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@nk_image_h:
	DD	1
	DD	$LN4@nk_image_h
$LN4@nk_image_h:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@nk_image_h
$LN3@nk_image_h:
	DB	115					; 00000073H
	DB	0
_nk_image_handle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_handle_id
_TEXT	SEGMENT
_handle$ = -8						; size = 4
_id$ = 8						; size = 4
_nk_handle_id PROC					; COMDAT

; 6080 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6081 :     nk_handle handle;
; 6082 :     nk_zero_struct(handle);

	push	4
	lea	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 6083 :     handle.id = id;

	mov	eax, DWORD PTR _id$[ebp]
	mov	DWORD PTR _handle$[ebp], eax

; 6084 :     return handle;

	mov	eax, DWORD PTR _handle$[ebp]

; 6085 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_handle_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@nk_handle_:
	DD	1
	DD	$LN4@nk_handle_
$LN4@nk_handle_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@nk_handle_
$LN3@nk_handle_:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
_nk_handle_id ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_handle_ptr
_TEXT	SEGMENT
_handle$ = -8						; size = 4
_ptr$ = 8						; size = 4
_nk_handle_ptr PROC					; COMDAT

; 6072 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6073 :     nk_handle handle = {0};

	mov	DWORD PTR _handle$[ebp], 0

; 6074 :     handle.ptr = ptr;

	mov	eax, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR _handle$[ebp], eax

; 6075 :     return handle;

	mov	eax, DWORD PTR _handle$[ebp]

; 6076 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_handle_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@nk_handle_:
	DD	1
	DD	$LN4@nk_handle_
$LN4@nk_handle_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@nk_handle_
$LN3@nk_handle_:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
_nk_handle_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_hsva_fv
_TEXT	SEGMENT
_out$ = 8						; size = 4
_in$ = 12						; size = 4
_nk_color_hsva_fv PROC					; COMDAT

; 5987 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5988 :     nk_color_hsva_f(&out[0], &out[1], &out[2], &out[3], in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_color_hsva_f
	add	esp, 20					; 00000014H

; 5989 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_color_hsva_fv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_hsva_f
_TEXT	SEGMENT
tv133 = -292						; size = 4
tv73 = -292						; size = 4
_t$1 = -92						; size = 4
_t$2 = -80						; size = 4
_a$ = -68						; size = 4
_b$ = -56						; size = 4
_g$ = -44						; size = 4
_r$ = -32						; size = 4
_K$ = -20						; size = 4
_chroma$ = -8						; size = 4
_out_h$ = 8						; size = 4
_out_s$ = 12						; size = 4
_out_v$ = 16						; size = 4
_out_a$ = 20						; size = 4
_in$ = 24						; size = 4
_nk_color_hsva_f PROC					; COMDAT

; 5964 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5965 :     float chroma;
; 5966 :     float K = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _K$[ebp], xmm0

; 5967 :     float r,g,b,a;
; 5968 : 
; 5969 :     nk_color_f(&r,&g,&b,&a, in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	lea	edx, DWORD PTR _b$[ebp]
	push	edx
	lea	eax, DWORD PTR _g$[ebp]
	push	eax
	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	_nk_color_f
	add	esp, 20					; 00000014H

; 5970 :     if (g < b) {

	movss	xmm0, DWORD PTR _b$[ebp]
	comiss	xmm0, DWORD PTR _g$[ebp]
	jbe	SHORT $LN2@nk_color_h

; 5971 :         const float t = g; g = b; b = t;

	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR _t$2[ebp], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR _g$[ebp], xmm0
	movss	xmm0, DWORD PTR _t$2[ebp]
	movss	DWORD PTR _b$[ebp], xmm0

; 5972 :         K = -1.f;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _K$[ebp], xmm0
$LN2@nk_color_h:

; 5973 :     }
; 5974 :     if (r < g) {

	movss	xmm0, DWORD PTR _g$[ebp]
	comiss	xmm0, DWORD PTR _r$[ebp]
	jbe	SHORT $LN1@nk_color_h

; 5975 :         const float t = r; r = g; g = t;

	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR _t$1[ebp], xmm0
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR _r$[ebp], xmm0
	movss	xmm0, DWORD PTR _t$1[ebp]
	movss	DWORD PTR _g$[ebp], xmm0

; 5976 :         K = -2.f/6.0f - K;

	movss	xmm0, DWORD PTR __real@beaaaaab
	subss	xmm0, DWORD PTR _K$[ebp]
	movss	DWORD PTR _K$[ebp], xmm0
$LN1@nk_color_h:

; 5977 :     }
; 5978 :     chroma = r - ((g < b) ? g: b);

	movss	xmm0, DWORD PTR _b$[ebp]
	comiss	xmm0, DWORD PTR _g$[ebp]
	jbe	SHORT $LN5@nk_color_h
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR tv73[ebp], xmm0
	jmp	SHORT $LN6@nk_color_h
$LN5@nk_color_h:
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR tv73[ebp], xmm0
$LN6@nk_color_h:
	movss	xmm0, DWORD PTR _r$[ebp]
	subss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR _chroma$[ebp], xmm0

; 5979 :     *out_h = NK_ABS(K + (g - b)/(6.0f * chroma + 1e-20f));

	movss	xmm0, DWORD PTR _g$[ebp]
	subss	xmm0, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR __real@40c00000
	mulss	xmm1, DWORD PTR _chroma$[ebp]
	addss	xmm1, DWORD PTR __real@1e3ce508
	divss	xmm0, xmm1
	addss	xmm0, DWORD PTR _K$[ebp]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN7@nk_color_h
	movss	xmm0, DWORD PTR _g$[ebp]
	subss	xmm0, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR __real@40c00000
	mulss	xmm1, DWORD PTR _chroma$[ebp]
	addss	xmm1, DWORD PTR __real@1e3ce508
	divss	xmm0, xmm1
	addss	xmm0, DWORD PTR _K$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv133[ebp], xmm0
	jmp	SHORT $LN8@nk_color_h
$LN7@nk_color_h:
	movss	xmm0, DWORD PTR _g$[ebp]
	subss	xmm0, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR __real@40c00000
	mulss	xmm1, DWORD PTR _chroma$[ebp]
	addss	xmm1, DWORD PTR __real@1e3ce508
	divss	xmm0, xmm1
	addss	xmm0, DWORD PTR _K$[ebp]
	movss	DWORD PTR tv133[ebp], xmm0
$LN8@nk_color_h:
	mov	eax, DWORD PTR _out_h$[ebp]
	movss	xmm0, DWORD PTR tv133[ebp]
	movss	DWORD PTR [eax], xmm0

; 5980 :     *out_s = chroma / (r + 1e-20f);

	movss	xmm0, DWORD PTR _r$[ebp]
	addss	xmm0, DWORD PTR __real@1e3ce508
	movss	xmm1, DWORD PTR _chroma$[ebp]
	divss	xmm1, xmm0
	mov	eax, DWORD PTR _out_s$[ebp]
	movss	DWORD PTR [eax], xmm1

; 5981 :     *out_v = r;

	mov	eax, DWORD PTR _out_v$[ebp]
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [eax], xmm0

; 5982 :     *out_a = (float)in.a / 255.0f;

	movzx	eax, BYTE PTR _in$[ebp+3]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	mov	ecx, DWORD PTR _out_a$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 5983 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_color_h
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@nk_color_h:
	DD	4
	DD	$LN13@nk_color_h
$LN13@nk_color_h:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN9@nk_color_h
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN10@nk_color_h
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN11@nk_color_h
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN12@nk_color_h
$LN12@nk_color_h:
	DB	97					; 00000061H
	DB	0
$LN11@nk_color_h:
	DB	98					; 00000062H
	DB	0
$LN10@nk_color_h:
	DB	103					; 00000067H
	DB	0
$LN9@nk_color_h:
	DB	114					; 00000072H
	DB	0
_nk_color_hsva_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_hsva_bv
_TEXT	SEGMENT
_tmp$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_in$ = 12						; size = 4
_nk_color_hsva_bv PROC					; COMDAT

; 6011 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 6012 :     int tmp[4];
; 6013 :     nk_color_hsva_i(&tmp[0], &tmp[1], &tmp[2], &tmp[3], in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	lea	eax, DWORD PTR _tmp$[ebp+edx]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	lea	edx, DWORD PTR _tmp$[ebp+ecx]
	push	edx
	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _tmp$[ebp+eax]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _tmp$[ebp+eax]
	push	ecx
	call	_nk_color_hsva_i
	add	esp, 20					; 00000014H

; 6014 :     out[0] = (nk_byte)tmp[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _out$[ebp]
	mov	cl, BYTE PTR _tmp$[ebp+ecx]
	mov	BYTE PTR [edx+eax], cl

; 6015 :     out[1] = (nk_byte)tmp[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _out$[ebp]
	mov	al, BYTE PTR _tmp$[ebp+eax]
	mov	BYTE PTR [edx+ecx], al

; 6016 :     out[2] = (nk_byte)tmp[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _out$[ebp]
	mov	al, BYTE PTR _tmp$[ebp+eax]
	mov	BYTE PTR [edx+ecx], al

; 6017 :     out[3] = (nk_byte)tmp[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _out$[ebp]
	mov	cl, BYTE PTR _tmp$[ebp+ecx]
	mov	BYTE PTR [edx+eax], cl

; 6018 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_color_h
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@nk_color_h:
	DD	1
	DD	$LN4@nk_color_h
$LN4@nk_color_h:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@nk_color_h
$LN3@nk_color_h:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_nk_color_hsva_bv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_hsva_iv
_TEXT	SEGMENT
_out$ = 8						; size = 4
_in$ = 12						; size = 4
_nk_color_hsva_iv PROC					; COMDAT

; 6005 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6006 :     nk_color_hsva_i(&out[0], &out[1], &out[2], &out[3], in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_nk_color_hsva_i
	add	esp, 20					; 00000014H

; 6007 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_color_hsva_iv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_hsva_b
_TEXT	SEGMENT
_tmp$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_h$ = 8							; size = 4
_s$ = 12						; size = 4
_v$ = 16						; size = 4
_a$ = 20						; size = 4
_in$ = 24						; size = 4
_nk_color_hsva_b PROC					; COMDAT

; 6022 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 6023 :     int tmp[4];
; 6024 :     nk_color_hsva_i(&tmp[0], &tmp[1], &tmp[2], &tmp[3], in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	lea	eax, DWORD PTR _tmp$[ebp+edx]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	lea	edx, DWORD PTR _tmp$[ebp+ecx]
	push	edx
	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _tmp$[ebp+eax]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _tmp$[ebp+eax]
	push	ecx
	call	_nk_color_hsva_i
	add	esp, 20					; 00000014H

; 6025 :     *h = (nk_byte)tmp[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _h$[ebp]
	mov	al, BYTE PTR _tmp$[ebp+ecx]
	mov	BYTE PTR [edx], al

; 6026 :     *s = (nk_byte)tmp[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR _tmp$[ebp+eax]
	mov	BYTE PTR [ecx], dl

; 6027 :     *v = (nk_byte)tmp[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _v$[ebp]
	mov	dl, BYTE PTR _tmp$[ebp+eax]
	mov	BYTE PTR [ecx], dl

; 6028 :     *a = (nk_byte)tmp[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _a$[ebp]
	mov	al, BYTE PTR _tmp$[ebp+ecx]
	mov	BYTE PTR [edx], al

; 6029 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_color_h
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@nk_color_h:
	DD	1
	DD	$LN4@nk_color_h
$LN4@nk_color_h:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@nk_color_h
$LN3@nk_color_h:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_nk_color_hsva_b ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_hsva_i
_TEXT	SEGMENT
_a$ = -44						; size = 4
_v$ = -32						; size = 4
_s$ = -20						; size = 4
_h$ = -8						; size = 4
_out_h$ = 8						; size = 4
_out_s$ = 12						; size = 4
_out_v$ = 16						; size = 4
_out_a$ = 20						; size = 4
_in$ = 24						; size = 4
_nk_color_hsva_i PROC					; COMDAT

; 5994 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5995 :     float h,s,v,a;
; 5996 :     nk_color_hsva_f(&h, &s, &v, &a, in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v$[ebp]
	push	edx
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	lea	ecx, DWORD PTR _h$[ebp]
	push	ecx
	call	_nk_color_hsva_f
	add	esp, 20					; 00000014H

; 5997 :     *out_h = (nk_byte)(h * 255.0f);

	movss	xmm0, DWORD PTR _h$[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	movzx	ecx, al
	mov	edx, DWORD PTR _out_h$[ebp]
	mov	DWORD PTR [edx], ecx

; 5998 :     *out_s = (nk_byte)(s * 255.0f);

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	movzx	ecx, al
	mov	edx, DWORD PTR _out_s$[ebp]
	mov	DWORD PTR [edx], ecx

; 5999 :     *out_v = (nk_byte)(v * 255.0f);

	movss	xmm0, DWORD PTR _v$[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	movzx	ecx, al
	mov	edx, DWORD PTR _out_v$[ebp]
	mov	DWORD PTR [edx], ecx

; 6000 :     *out_a = (nk_byte)(a * 255.0f);

	movss	xmm0, DWORD PTR _a$[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	movzx	ecx, al
	mov	edx, DWORD PTR _out_a$[ebp]
	mov	DWORD PTR [edx], ecx

; 6001 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@nk_color_h
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@nk_color_h:
	DD	4
	DD	$LN7@nk_color_h
$LN7@nk_color_h:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@nk_color_h
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@nk_color_h
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@nk_color_h
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN6@nk_color_h
$LN6@nk_color_h:
	DB	97					; 00000061H
	DB	0
$LN5@nk_color_h:
	DB	118					; 00000076H
	DB	0
$LN4@nk_color_h:
	DB	115					; 00000073H
	DB	0
$LN3@nk_color_h:
	DB	104					; 00000068H
	DB	0
_nk_color_hsva_i ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_hsv_fv
_TEXT	SEGMENT
_a$ = -8						; size = 4
_out$ = 8						; size = 4
_in$ = 12						; size = 4
_nk_color_hsv_fv PROC					; COMDAT

; 5956 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5957 :     float a;
; 5958 :     nk_color_hsva_f(&out[0], &out[1], &out[2], &a, in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_nk_color_hsva_f
	add	esp, 20					; 00000014H

; 5959 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_color_h
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@nk_color_h:
	DD	1
	DD	$LN4@nk_color_h
$LN4@nk_color_h:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@nk_color_h
$LN3@nk_color_h:
	DB	97					; 00000061H
	DB	0
_nk_color_hsv_fv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_hsv_f
_TEXT	SEGMENT
_a$ = -8						; size = 4
_out_h$ = 8						; size = 4
_out_s$ = 12						; size = 4
_out_v$ = 16						; size = 4
_in$ = 20						; size = 4
_nk_color_hsv_f PROC					; COMDAT

; 5949 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5950 :     float a;
; 5951 :     nk_color_hsva_f(out_h, out_s, out_v, &a, in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out_v$[ebp]
	push	edx
	mov	eax, DWORD PTR _out_s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out_h$[ebp]
	push	ecx
	call	_nk_color_hsva_f
	add	esp, 20					; 00000014H

; 5952 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_color_h
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@nk_color_h:
	DD	1
	DD	$LN4@nk_color_h
$LN4@nk_color_h:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@nk_color_h
$LN3@nk_color_h:
	DB	97					; 00000061H
	DB	0
_nk_color_hsv_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_hsv_bv
_TEXT	SEGMENT
_tmp$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_in$ = 12						; size = 4
_nk_color_hsv_bv PROC					; COMDAT

; 6056 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 6057 :     int tmp[4];
; 6058 :     nk_color_hsv_i(&tmp[0], &tmp[1], &tmp[2], in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	lea	edx, DWORD PTR _tmp$[ebp+ecx]
	push	edx
	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _tmp$[ebp+eax]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _tmp$[ebp+eax]
	push	ecx
	call	_nk_color_hsv_i
	add	esp, 16					; 00000010H

; 6059 :     out[0] = (nk_byte)tmp[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _out$[ebp]
	mov	cl, BYTE PTR _tmp$[ebp+ecx]
	mov	BYTE PTR [edx+eax], cl

; 6060 :     out[1] = (nk_byte)tmp[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _out$[ebp]
	mov	al, BYTE PTR _tmp$[ebp+eax]
	mov	BYTE PTR [edx+ecx], al

; 6061 :     out[2] = (nk_byte)tmp[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _out$[ebp]
	mov	al, BYTE PTR _tmp$[ebp+eax]
	mov	BYTE PTR [edx+ecx], al

; 6062 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_color_h
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@nk_color_h:
	DD	1
	DD	$LN4@nk_color_h
$LN4@nk_color_h:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@nk_color_h
$LN3@nk_color_h:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_nk_color_hsv_bv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_hsv_iv
_TEXT	SEGMENT
_out$ = 8						; size = 4
_in$ = 12						; size = 4
_nk_color_hsv_iv PROC					; COMDAT

; 6050 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6051 :     nk_color_hsv_i(&out[0], &out[1], &out[2], in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_color_hsv_i
	add	esp, 16					; 00000010H

; 6052 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_color_hsv_iv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_hsv_b
_TEXT	SEGMENT
_tmp$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_out_h$ = 8						; size = 4
_out_s$ = 12						; size = 4
_out_v$ = 16						; size = 4
_in$ = 20						; size = 4
_nk_color_hsv_b PROC					; COMDAT

; 6040 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 6041 :     int tmp[4];
; 6042 :     nk_color_hsva_i(&tmp[0], &tmp[1], &tmp[2], &tmp[3], in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	lea	eax, DWORD PTR _tmp$[ebp+edx]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	lea	edx, DWORD PTR _tmp$[ebp+ecx]
	push	edx
	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _tmp$[ebp+eax]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _tmp$[ebp+eax]
	push	ecx
	call	_nk_color_hsva_i
	add	esp, 20					; 00000014H

; 6043 :     *out_h = (nk_byte)tmp[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _out_h$[ebp]
	mov	al, BYTE PTR _tmp$[ebp+ecx]
	mov	BYTE PTR [edx], al

; 6044 :     *out_s = (nk_byte)tmp[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _out_s$[ebp]
	mov	dl, BYTE PTR _tmp$[ebp+eax]
	mov	BYTE PTR [ecx], dl

; 6045 :     *out_v = (nk_byte)tmp[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _out_v$[ebp]
	mov	dl, BYTE PTR _tmp$[ebp+eax]
	mov	BYTE PTR [ecx], dl

; 6046 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_color_h
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@nk_color_h:
	DD	1
	DD	$LN4@nk_color_h
$LN4@nk_color_h:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@nk_color_h
$LN3@nk_color_h:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_nk_color_hsv_b ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_hsv_i
_TEXT	SEGMENT
_a$ = -8						; size = 4
_out_h$ = 8						; size = 4
_out_s$ = 12						; size = 4
_out_v$ = 16						; size = 4
_in$ = 20						; size = 4
_nk_color_hsv_i PROC					; COMDAT

; 6033 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6034 :     int a;
; 6035 :     nk_color_hsva_i(out_h, out_s, out_v, &a, in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out_v$[ebp]
	push	edx
	mov	eax, DWORD PTR _out_s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out_h$[ebp]
	push	ecx
	call	_nk_color_hsva_i
	add	esp, 20					; 00000014H

; 6036 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_color_h
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@nk_color_h:
	DD	1
	DD	$LN4@nk_color_h
$LN4@nk_color_h:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@nk_color_h
$LN3@nk_color_h:
	DB	97					; 00000061H
	DB	0
_nk_color_hsv_i ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_hex_rgb
_TEXT	SEGMENT
tv181 = -196						; size = 4
tv168 = -196						; size = 4
tv152 = -196						; size = 4
tv139 = -196						; size = 4
tv91 = -196						; size = 4
tv78 = -196						; size = 4
_output$ = 8						; size = 4
_col$ = 12						; size = 4
_nk_color_hex_rgb PROC					; COMDAT

; 5725 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5726 :     #define NK_TO_HEX(i) ((i) <= 9 ? '0' + (i): 'A' - 10 + (i))
; 5727 :     output[0] = (char)NK_TO_HEX((col.r & 0xF0) >> 4);

	movzx	eax, BYTE PTR _col$[ebp]
	and	eax, 240				; 000000f0H
	sar	eax, 4
	cmp	eax, 9
	jg	SHORT $LN3@nk_color_h
	movzx	ecx, BYTE PTR _col$[ebp]
	and	ecx, 240				; 000000f0H
	sar	ecx, 4
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv78[ebp], ecx
	jmp	SHORT $LN4@nk_color_h
$LN3@nk_color_h:
	movzx	edx, BYTE PTR _col$[ebp]
	and	edx, 240				; 000000f0H
	sar	edx, 4
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv78[ebp], edx
$LN4@nk_color_h:
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _output$[ebp]
	mov	al, BYTE PTR tv78[ebp]
	mov	BYTE PTR [edx+ecx], al

; 5728 :     output[1] = (char)NK_TO_HEX((col.r & 0x0F));

	movzx	eax, BYTE PTR _col$[ebp]
	and	eax, 15					; 0000000fH
	cmp	eax, 9
	jg	SHORT $LN5@nk_color_h
	movzx	ecx, BYTE PTR _col$[ebp]
	and	ecx, 15					; 0000000fH
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv91[ebp], ecx
	jmp	SHORT $LN6@nk_color_h
$LN5@nk_color_h:
	movzx	edx, BYTE PTR _col$[ebp]
	and	edx, 15					; 0000000fH
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv91[ebp], edx
$LN6@nk_color_h:
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _output$[ebp]
	mov	dl, BYTE PTR tv91[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 5729 :     output[2] = (char)NK_TO_HEX((col.g & 0xF0) >> 4);

	movzx	eax, BYTE PTR _col$[ebp+1]
	and	eax, 240				; 000000f0H
	sar	eax, 4
	cmp	eax, 9
	jg	SHORT $LN7@nk_color_h
	movzx	ecx, BYTE PTR _col$[ebp+1]
	and	ecx, 240				; 000000f0H
	sar	ecx, 4
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv139[ebp], ecx
	jmp	SHORT $LN8@nk_color_h
$LN7@nk_color_h:
	movzx	edx, BYTE PTR _col$[ebp+1]
	and	edx, 240				; 000000f0H
	sar	edx, 4
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv139[ebp], edx
$LN8@nk_color_h:
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _output$[ebp]
	mov	dl, BYTE PTR tv139[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 5730 :     output[3] = (char)NK_TO_HEX((col.g & 0x0F));

	movzx	eax, BYTE PTR _col$[ebp+1]
	and	eax, 15					; 0000000fH
	cmp	eax, 9
	jg	SHORT $LN9@nk_color_h
	movzx	ecx, BYTE PTR _col$[ebp+1]
	and	ecx, 15					; 0000000fH
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv152[ebp], ecx
	jmp	SHORT $LN10@nk_color_h
$LN9@nk_color_h:
	movzx	edx, BYTE PTR _col$[ebp+1]
	and	edx, 15					; 0000000fH
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv152[ebp], edx
$LN10@nk_color_h:
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _output$[ebp]
	mov	al, BYTE PTR tv152[ebp]
	mov	BYTE PTR [edx+ecx], al

; 5731 :     output[4] = (char)NK_TO_HEX((col.b & 0xF0) >> 4);

	movzx	eax, BYTE PTR _col$[ebp+2]
	and	eax, 240				; 000000f0H
	sar	eax, 4
	cmp	eax, 9
	jg	SHORT $LN11@nk_color_h
	movzx	ecx, BYTE PTR _col$[ebp+2]
	and	ecx, 240				; 000000f0H
	sar	ecx, 4
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv168[ebp], ecx
	jmp	SHORT $LN12@nk_color_h
$LN11@nk_color_h:
	movzx	edx, BYTE PTR _col$[ebp+2]
	and	edx, 240				; 000000f0H
	sar	edx, 4
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv168[ebp], edx
$LN12@nk_color_h:
	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _output$[ebp]
	mov	dl, BYTE PTR tv168[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 5732 :     output[5] = (char)NK_TO_HEX((col.b & 0x0F));

	movzx	eax, BYTE PTR _col$[ebp+2]
	and	eax, 15					; 0000000fH
	cmp	eax, 9
	jg	SHORT $LN13@nk_color_h
	movzx	ecx, BYTE PTR _col$[ebp+2]
	and	ecx, 15					; 0000000fH
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv181[ebp], ecx
	jmp	SHORT $LN14@nk_color_h
$LN13@nk_color_h:
	movzx	edx, BYTE PTR _col$[ebp+2]
	and	edx, 15					; 0000000fH
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv181[ebp], edx
$LN14@nk_color_h:
	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _output$[ebp]
	mov	al, BYTE PTR tv181[ebp]
	mov	BYTE PTR [edx+ecx], al

; 5733 :     output[6] = '\0';

	mov	eax, 1
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _output$[ebp]
	mov	BYTE PTR [edx+ecx], 0

; 5734 :     #undef NK_TO_HEX
; 5735 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_color_hex_rgb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_hex_rgba
_TEXT	SEGMENT
tv210 = -196						; size = 4
tv197 = -196						; size = 4
tv181 = -196						; size = 4
tv168 = -196						; size = 4
tv152 = -196						; size = 4
tv139 = -196						; size = 4
tv91 = -196						; size = 4
tv78 = -196						; size = 4
_output$ = 8						; size = 4
_col$ = 12						; size = 4
_nk_color_hex_rgba PROC					; COMDAT

; 5709 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5710 :     #define NK_TO_HEX(i) ((i) <= 9 ? '0' + (i): 'A' - 10 + (i))
; 5711 :     output[0] = (char)NK_TO_HEX((col.r & 0xF0) >> 4);

	movzx	eax, BYTE PTR _col$[ebp]
	and	eax, 240				; 000000f0H
	sar	eax, 4
	cmp	eax, 9
	jg	SHORT $LN3@nk_color_h
	movzx	ecx, BYTE PTR _col$[ebp]
	and	ecx, 240				; 000000f0H
	sar	ecx, 4
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv78[ebp], ecx
	jmp	SHORT $LN4@nk_color_h
$LN3@nk_color_h:
	movzx	edx, BYTE PTR _col$[ebp]
	and	edx, 240				; 000000f0H
	sar	edx, 4
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv78[ebp], edx
$LN4@nk_color_h:
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _output$[ebp]
	mov	al, BYTE PTR tv78[ebp]
	mov	BYTE PTR [edx+ecx], al

; 5712 :     output[1] = (char)NK_TO_HEX((col.r & 0x0F));

	movzx	eax, BYTE PTR _col$[ebp]
	and	eax, 15					; 0000000fH
	cmp	eax, 9
	jg	SHORT $LN5@nk_color_h
	movzx	ecx, BYTE PTR _col$[ebp]
	and	ecx, 15					; 0000000fH
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv91[ebp], ecx
	jmp	SHORT $LN6@nk_color_h
$LN5@nk_color_h:
	movzx	edx, BYTE PTR _col$[ebp]
	and	edx, 15					; 0000000fH
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv91[ebp], edx
$LN6@nk_color_h:
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _output$[ebp]
	mov	dl, BYTE PTR tv91[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 5713 :     output[2] = (char)NK_TO_HEX((col.g & 0xF0) >> 4);

	movzx	eax, BYTE PTR _col$[ebp+1]
	and	eax, 240				; 000000f0H
	sar	eax, 4
	cmp	eax, 9
	jg	SHORT $LN7@nk_color_h
	movzx	ecx, BYTE PTR _col$[ebp+1]
	and	ecx, 240				; 000000f0H
	sar	ecx, 4
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv139[ebp], ecx
	jmp	SHORT $LN8@nk_color_h
$LN7@nk_color_h:
	movzx	edx, BYTE PTR _col$[ebp+1]
	and	edx, 240				; 000000f0H
	sar	edx, 4
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv139[ebp], edx
$LN8@nk_color_h:
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _output$[ebp]
	mov	dl, BYTE PTR tv139[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 5714 :     output[3] = (char)NK_TO_HEX((col.g & 0x0F));

	movzx	eax, BYTE PTR _col$[ebp+1]
	and	eax, 15					; 0000000fH
	cmp	eax, 9
	jg	SHORT $LN9@nk_color_h
	movzx	ecx, BYTE PTR _col$[ebp+1]
	and	ecx, 15					; 0000000fH
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv152[ebp], ecx
	jmp	SHORT $LN10@nk_color_h
$LN9@nk_color_h:
	movzx	edx, BYTE PTR _col$[ebp+1]
	and	edx, 15					; 0000000fH
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv152[ebp], edx
$LN10@nk_color_h:
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _output$[ebp]
	mov	al, BYTE PTR tv152[ebp]
	mov	BYTE PTR [edx+ecx], al

; 5715 :     output[4] = (char)NK_TO_HEX((col.b & 0xF0) >> 4);

	movzx	eax, BYTE PTR _col$[ebp+2]
	and	eax, 240				; 000000f0H
	sar	eax, 4
	cmp	eax, 9
	jg	SHORT $LN11@nk_color_h
	movzx	ecx, BYTE PTR _col$[ebp+2]
	and	ecx, 240				; 000000f0H
	sar	ecx, 4
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv168[ebp], ecx
	jmp	SHORT $LN12@nk_color_h
$LN11@nk_color_h:
	movzx	edx, BYTE PTR _col$[ebp+2]
	and	edx, 240				; 000000f0H
	sar	edx, 4
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv168[ebp], edx
$LN12@nk_color_h:
	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _output$[ebp]
	mov	dl, BYTE PTR tv168[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 5716 :     output[5] = (char)NK_TO_HEX((col.b & 0x0F));

	movzx	eax, BYTE PTR _col$[ebp+2]
	and	eax, 15					; 0000000fH
	cmp	eax, 9
	jg	SHORT $LN13@nk_color_h
	movzx	ecx, BYTE PTR _col$[ebp+2]
	and	ecx, 15					; 0000000fH
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv181[ebp], ecx
	jmp	SHORT $LN14@nk_color_h
$LN13@nk_color_h:
	movzx	edx, BYTE PTR _col$[ebp+2]
	and	edx, 15					; 0000000fH
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv181[ebp], edx
$LN14@nk_color_h:
	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _output$[ebp]
	mov	al, BYTE PTR tv181[ebp]
	mov	BYTE PTR [edx+ecx], al

; 5717 :     output[6] = (char)NK_TO_HEX((col.a & 0xF0) >> 4);

	movzx	eax, BYTE PTR _col$[ebp+3]
	and	eax, 240				; 000000f0H
	sar	eax, 4
	cmp	eax, 9
	jg	SHORT $LN15@nk_color_h
	movzx	ecx, BYTE PTR _col$[ebp+3]
	and	ecx, 240				; 000000f0H
	sar	ecx, 4
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv197[ebp], ecx
	jmp	SHORT $LN16@nk_color_h
$LN15@nk_color_h:
	movzx	edx, BYTE PTR _col$[ebp+3]
	and	edx, 240				; 000000f0H
	sar	edx, 4
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv197[ebp], edx
$LN16@nk_color_h:
	mov	eax, 1
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _output$[ebp]
	mov	al, BYTE PTR tv197[ebp]
	mov	BYTE PTR [edx+ecx], al

; 5718 :     output[7] = (char)NK_TO_HEX((col.a & 0x0F));

	movzx	eax, BYTE PTR _col$[ebp+3]
	and	eax, 15					; 0000000fH
	cmp	eax, 9
	jg	SHORT $LN17@nk_color_h
	movzx	ecx, BYTE PTR _col$[ebp+3]
	and	ecx, 15					; 0000000fH
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv210[ebp], ecx
	jmp	SHORT $LN18@nk_color_h
$LN17@nk_color_h:
	movzx	edx, BYTE PTR _col$[ebp+3]
	and	edx, 15					; 0000000fH
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv210[ebp], edx
$LN18@nk_color_h:
	mov	eax, 1
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _output$[ebp]
	mov	al, BYTE PTR tv210[ebp]
	mov	BYTE PTR [edx+ecx], al

; 5719 :     output[8] = '\0';

	mov	eax, 1
	shl	eax, 3
	mov	ecx, DWORD PTR _output$[ebp]
	mov	BYTE PTR [ecx+eax], 0

; 5720 :     #undef NK_TO_HEX
; 5721 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_color_hex_rgba ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_u32
_TEXT	SEGMENT
_out$ = -8						; size = 4
_in$ = 8						; size = 4
_nk_color_u32 PROC					; COMDAT

; 5907 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5908 :     nk_uint out = (nk_uint)in.r;

	movzx	eax, BYTE PTR _in$[ebp]
	mov	DWORD PTR _out$[ebp], eax

; 5909 :     out |= ((nk_uint)in.g << 8);

	movzx	eax, BYTE PTR _in$[ebp+1]
	shl	eax, 8
	or	eax, DWORD PTR _out$[ebp]
	mov	DWORD PTR _out$[ebp], eax

; 5910 :     out |= ((nk_uint)in.b << 16);

	movzx	eax, BYTE PTR _in$[ebp+2]
	shl	eax, 16					; 00000010H
	or	eax, DWORD PTR _out$[ebp]
	mov	DWORD PTR _out$[ebp], eax

; 5911 :     out |= ((nk_uint)in.a << 24);

	movzx	eax, BYTE PTR _in$[ebp+3]
	shl	eax, 24					; 00000018H
	or	eax, DWORD PTR _out$[ebp]
	mov	DWORD PTR _out$[ebp], eax

; 5912 :     return out;

	mov	eax, DWORD PTR _out$[ebp]

; 5913 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_color_u32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_dv
_TEXT	SEGMENT
_c$ = 8							; size = 4
_in$ = 12						; size = 4
_nk_color_dv PROC					; COMDAT

; 5943 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5944 :     nk_color_d(&c[0], &c[1], &c[2], &c[3], in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, 8
	imul	edx, ecx, 3
	add	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, 8
	shl	eax, 1
	add	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, 8
	shl	ecx, 0
	add	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, 8
	imul	eax, edx, 0
	add	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_nk_color_d
	add	esp, 20					; 00000014H

; 5945 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_color_dv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_d
_TEXT	SEGMENT
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
_in$ = 24						; size = 4
_nk_color_d PROC					; COMDAT

; 5933 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5934 :     NK_STORAGE const double s = 1.0/255.0;
; 5935 :     *r = (double)in.r * s;

	movzx	eax, BYTE PTR _in$[ebp]
	cvtsi2sd xmm0, eax
	mulsd	xmm0, QWORD PTR ?s@?1??nk_color_d@@9@9
	mov	ecx, DWORD PTR _r$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 5936 :     *g = (double)in.g * s;

	movzx	eax, BYTE PTR _in$[ebp+1]
	cvtsi2sd xmm0, eax
	mulsd	xmm0, QWORD PTR ?s@?1??nk_color_d@@9@9
	mov	ecx, DWORD PTR _g$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 5937 :     *b = (double)in.b * s;

	movzx	eax, BYTE PTR _in$[ebp+2]
	cvtsi2sd xmm0, eax
	mulsd	xmm0, QWORD PTR ?s@?1??nk_color_d@@9@9
	mov	ecx, DWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 5938 :     *a = (double)in.a * s;

	movzx	eax, BYTE PTR _in$[ebp+3]
	cvtsi2sd xmm0, eax
	mulsd	xmm0, QWORD PTR ?s@?1??nk_color_d@@9@9
	mov	ecx, DWORD PTR _a$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 5939 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_color_d ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_fv
_TEXT	SEGMENT
_c$ = 8							; size = 4
_in$ = 12						; size = 4
_nk_color_fv PROC					; COMDAT

; 5927 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5928 :     nk_color_f(&c[0], &c[1], &c[2], &c[3], in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_nk_color_f
	add	esp, 20					; 00000014H

; 5929 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_color_fv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_f
_TEXT	SEGMENT
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
_in$ = 24						; size = 4
_nk_color_f PROC					; COMDAT

; 5917 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5918 :     NK_STORAGE const float s = 1.0f/255.0f;
; 5919 :     *r = (float)in.r * s;

	movzx	eax, BYTE PTR _in$[ebp]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ?s@?1??nk_color_f@@9@9
	mov	ecx, DWORD PTR _r$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 5920 :     *g = (float)in.g * s;

	movzx	eax, BYTE PTR _in$[ebp+1]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ?s@?1??nk_color_f@@9@9
	mov	ecx, DWORD PTR _g$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 5921 :     *b = (float)in.b * s;

	movzx	eax, BYTE PTR _in$[ebp+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ?s@?1??nk_color_f@@9@9
	mov	ecx, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 5922 :     *a = (float)in.a * s;

	movzx	eax, BYTE PTR _in$[ebp+3]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ?s@?1??nk_color_f@@9@9
	mov	ecx, DWORD PTR _a$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 5923 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_color_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_hsva_fv
_TEXT	SEGMENT
_c$ = 8							; size = 4
_nk_hsva_fv PROC					; COMDAT

; 5901 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5902 :     return nk_hsva_f(c[0], c[1], c[2], c[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _c$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _c$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _c$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	call	_nk_hsva_f
	add	esp, 16					; 00000010H

; 5903 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_hsva_fv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_hsva_f
_TEXT	SEGMENT
tv87 = -284						; size = 4
_i$ = -84						; size = 4
_f$ = -72						; size = 4
_t$ = -60						; size = 4
_q$ = -48						; size = 4
_p$ = -36						; size = 4
_out$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_h$ = 8							; size = 4
_s$ = 12						; size = 4
_v$ = 16						; size = 4
_a$ = 20						; size = 4
_nk_hsva_f PROC						; COMDAT

; 5871 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 5872 :     struct nk_colorf out = {0,0,0,0};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _out$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _out$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _out$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _out$[ebp+12], xmm0

; 5873 :     float p, q, t, f;
; 5874 :     int i;
; 5875 : 
; 5876 :     if (s <= 0.0f) {

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _s$[ebp]
	jb	SHORT $LN9@nk_hsva_f

; 5877 :         out.r = v; out.g = v; out.b = v;

	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR _out$[ebp], xmm0
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR _out$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR _out$[ebp+8], xmm0

; 5878 :         return nk_rgb_f(out.r, out.g, out.b);

	push	ecx
	movss	xmm0, DWORD PTR _out$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _out$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _out$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_rgb_f
	add	esp, 12					; 0000000cH
	jmp	$LN10@nk_hsva_f
$LN9@nk_hsva_f:

; 5879 :     }
; 5880 : 
; 5881 :     h = h / (60.0f/360.0f);

	movss	xmm0, DWORD PTR _h$[ebp]
	divss	xmm0, DWORD PTR __real@3e2aaaab
	movss	DWORD PTR _h$[ebp], xmm0

; 5882 :     i = (int)h;

	cvttss2si eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR _i$[ebp], eax

; 5883 :     f = h - (float)i;

	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	movss	xmm1, DWORD PTR _h$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _f$[ebp], xmm1

; 5884 :     p = v * (1.0f - s);

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR _p$[ebp], xmm0

; 5885 :     q = v * (1.0f - (s * f));

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _f$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _v$[ebp]
	movss	DWORD PTR _q$[ebp], xmm1

; 5886 :     t = v * (1.0f - s * (1.0f - f));

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _f$[ebp]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _v$[ebp]
	movss	DWORD PTR _t$[ebp], xmm1

; 5887 : 
; 5888 :     switch (i) {

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv87[ebp], eax
	mov	ecx, DWORD PTR tv87[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv87[ebp], ecx
	cmp	DWORD PTR tv87[ebp], 4
	ja	SHORT $LN6@nk_hsva_f
	mov	edx, DWORD PTR tv87[ebp]
	jmp	DWORD PTR $LN15@nk_hsva_f[edx*4]
$LN6@nk_hsva_f:

; 5889 :     case 0: default: out.r = v; out.g = t; out.b = p; break;

	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR _out$[ebp], xmm0
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR _out$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR _out$[ebp+8], xmm0
	jmp	$LN7@nk_hsva_f
$LN5@nk_hsva_f:

; 5890 :     case 1: out.r = q; out.g = v; out.b = p; break;

	movss	xmm0, DWORD PTR _q$[ebp]
	movss	DWORD PTR _out$[ebp], xmm0
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR _out$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR _out$[ebp+8], xmm0
	jmp	SHORT $LN7@nk_hsva_f
$LN4@nk_hsva_f:

; 5891 :     case 2: out.r = p; out.g = v; out.b = t; break;

	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR _out$[ebp], xmm0
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR _out$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR _out$[ebp+8], xmm0
	jmp	SHORT $LN7@nk_hsva_f
$LN3@nk_hsva_f:

; 5892 :     case 3: out.r = p; out.g = q; out.b = v; break;

	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR _out$[ebp], xmm0
	movss	xmm0, DWORD PTR _q$[ebp]
	movss	DWORD PTR _out$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR _out$[ebp+8], xmm0
	jmp	SHORT $LN7@nk_hsva_f
$LN2@nk_hsva_f:

; 5893 :     case 4: out.r = t; out.g = p; out.b = v; break;

	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR _out$[ebp], xmm0
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR _out$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR _out$[ebp+8], xmm0
	jmp	SHORT $LN7@nk_hsva_f
$LN1@nk_hsva_f:

; 5894 :     case 5: out.r = v; out.g = p; out.b = q; break;

	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR _out$[ebp], xmm0
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR _out$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _q$[ebp]
	movss	DWORD PTR _out$[ebp+8], xmm0
$LN7@nk_hsva_f:

; 5895 :     }
; 5896 :     return nk_rgba_f(out.r, out.g, out.b, a);

	push	ecx
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _out$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _out$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _out$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_rgba_f
	add	esp, 16					; 00000010H
$LN10@nk_hsva_f:

; 5897 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_hsva_f
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@nk_hsva_f:
	DD	1
	DD	$LN13@nk_hsva_f
$LN13@nk_hsva_f:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN12@nk_hsva_f
$LN12@nk_hsva_f:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN15@nk_hsva_f:
	DD	$LN5@nk_hsva_f
	DD	$LN4@nk_hsva_f
	DD	$LN3@nk_hsva_f
	DD	$LN2@nk_hsva_f
	DD	$LN1@nk_hsva_f
_nk_hsva_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_hsva_bv
_TEXT	SEGMENT
_c$ = 8							; size = 4
_nk_hsva_bv PROC					; COMDAT

; 5865 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5866 :     return nk_hsva(c[0], c[1], c[2], c[3]);

	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	push	eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	push	ecx
	call	_nk_hsva
	add	esp, 16					; 00000010H

; 5867 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_hsva_bv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_hsva_iv
_TEXT	SEGMENT
_c$ = 8							; size = 4
_nk_hsva_iv PROC					; COMDAT

; 5859 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5860 :     return nk_hsva(c[0], c[1], c[2], c[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	_nk_hsva
	add	esp, 16					; 00000010H

; 5861 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_hsva_iv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_hsva
_TEXT	SEGMENT
tv95 = -252						; size = 4
tv86 = -252						; size = 4
tv77 = -252						; size = 4
tv68 = -252						; size = 4
tv128 = -248						; size = 4
tv87 = -248						; size = 4
tv78 = -248						; size = 4
tv69 = -248						; size = 4
tv92 = -244						; size = 4
tv83 = -244						; size = 4
tv74 = -244						; size = 4
tv65 = -244						; size = 4
_af$ = -44						; size = 4
_vf$ = -32						; size = 4
_sf$ = -20						; size = 4
_hf$ = -8						; size = 4
_h$ = 8							; size = 4
_s$ = 12						; size = 4
_v$ = 16						; size = 4
_a$ = 20						; size = 4
_nk_hsva PROC						; COMDAT

; 5849 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5850 :     float hf = ((float)NK_CLAMP(0, h, 255)) / 255.0f;

	cmp	DWORD PTR _h$[ebp], 255			; 000000ffH
	jge	SHORT $LN3@nk_hsva
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@nk_hsva
$LN3@nk_hsva:
	mov	DWORD PTR tv65[ebp], 255		; 000000ffH
$LN4@nk_hsva:
	cmp	DWORD PTR tv65[ebp], 0
	jge	SHORT $LN7@nk_hsva
	mov	DWORD PTR tv69[ebp], 0
	jmp	SHORT $LN8@nk_hsva
$LN7@nk_hsva:
	cmp	DWORD PTR _h$[ebp], 255			; 000000ffH
	jge	SHORT $LN5@nk_hsva
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN6@nk_hsva
$LN5@nk_hsva:
	mov	DWORD PTR tv68[ebp], 255		; 000000ffH
$LN6@nk_hsva:
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], edx
$LN8@nk_hsva:
	cvtsi2ss xmm0, DWORD PTR tv69[ebp]
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _hf$[ebp], xmm0

; 5851 :     float sf = ((float)NK_CLAMP(0, s, 255)) / 255.0f;

	cmp	DWORD PTR _s$[ebp], 255			; 000000ffH
	jge	SHORT $LN9@nk_hsva
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN10@nk_hsva
$LN9@nk_hsva:
	mov	DWORD PTR tv74[ebp], 255		; 000000ffH
$LN10@nk_hsva:
	cmp	DWORD PTR tv74[ebp], 0
	jge	SHORT $LN13@nk_hsva
	mov	DWORD PTR tv78[ebp], 0
	jmp	SHORT $LN14@nk_hsva
$LN13@nk_hsva:
	cmp	DWORD PTR _s$[ebp], 255			; 000000ffH
	jge	SHORT $LN11@nk_hsva
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR tv77[ebp], ecx
	jmp	SHORT $LN12@nk_hsva
$LN11@nk_hsva:
	mov	DWORD PTR tv77[ebp], 255		; 000000ffH
$LN12@nk_hsva:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv78[ebp], edx
$LN14@nk_hsva:
	cvtsi2ss xmm0, DWORD PTR tv78[ebp]
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _sf$[ebp], xmm0

; 5852 :     float vf = ((float)NK_CLAMP(0, v, 255)) / 255.0f;

	cmp	DWORD PTR _v$[ebp], 255			; 000000ffH
	jge	SHORT $LN15@nk_hsva
	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN16@nk_hsva
$LN15@nk_hsva:
	mov	DWORD PTR tv83[ebp], 255		; 000000ffH
$LN16@nk_hsva:
	cmp	DWORD PTR tv83[ebp], 0
	jge	SHORT $LN19@nk_hsva
	mov	DWORD PTR tv87[ebp], 0
	jmp	SHORT $LN20@nk_hsva
$LN19@nk_hsva:
	cmp	DWORD PTR _v$[ebp], 255			; 000000ffH
	jge	SHORT $LN17@nk_hsva
	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR tv86[ebp], ecx
	jmp	SHORT $LN18@nk_hsva
$LN17@nk_hsva:
	mov	DWORD PTR tv86[ebp], 255		; 000000ffH
$LN18@nk_hsva:
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR tv87[ebp], edx
$LN20@nk_hsva:
	cvtsi2ss xmm0, DWORD PTR tv87[ebp]
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _vf$[ebp], xmm0

; 5853 :     float af = ((float)NK_CLAMP(0, a, 255)) / 255.0f;

	cmp	DWORD PTR _a$[ebp], 255			; 000000ffH
	jge	SHORT $LN21@nk_hsva
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv92[ebp], eax
	jmp	SHORT $LN22@nk_hsva
$LN21@nk_hsva:
	mov	DWORD PTR tv92[ebp], 255		; 000000ffH
$LN22@nk_hsva:
	cmp	DWORD PTR tv92[ebp], 0
	jge	SHORT $LN25@nk_hsva
	mov	DWORD PTR tv128[ebp], 0
	jmp	SHORT $LN26@nk_hsva
$LN25@nk_hsva:
	cmp	DWORD PTR _a$[ebp], 255			; 000000ffH
	jge	SHORT $LN23@nk_hsva
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv95[ebp], ecx
	jmp	SHORT $LN24@nk_hsva
$LN23@nk_hsva:
	mov	DWORD PTR tv95[ebp], 255		; 000000ffH
$LN24@nk_hsva:
	mov	edx, DWORD PTR tv95[ebp]
	mov	DWORD PTR tv128[ebp], edx
$LN26@nk_hsva:
	cvtsi2ss xmm0, DWORD PTR tv128[ebp]
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR _af$[ebp], xmm0

; 5854 :     return nk_hsva_f(hf, sf, vf, af);

	push	ecx
	movss	xmm0, DWORD PTR _af$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vf$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sf$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _hf$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_hsva_f
	add	esp, 16					; 00000010H

; 5855 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_hsva ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_hsv_fv
_TEXT	SEGMENT
_c$ = 8							; size = 4
_nk_hsv_fv PROC						; COMDAT

; 5843 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5844 :     return nk_hsv_f(c[0], c[1], c[2]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _c$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _c$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	call	_nk_hsv_f
	add	esp, 12					; 0000000cH

; 5845 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_hsv_fv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_hsv_f
_TEXT	SEGMENT
_h$ = 8							; size = 4
_s$ = 12						; size = 4
_v$ = 16						; size = 4
_nk_hsv_f PROC						; COMDAT

; 5837 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5838 :     return nk_hsva_f(h, s, v, 1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _h$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_hsva_f
	add	esp, 16					; 00000010H

; 5839 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_hsv_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_hsv_bv
_TEXT	SEGMENT
_c$ = 8							; size = 4
_nk_hsv_bv PROC						; COMDAT

; 5831 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5832 :     return nk_hsv(c[0], c[1], c[2]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _c$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	push	edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _c$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	push	edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	push	eax
	call	_nk_hsv
	add	esp, 12					; 0000000cH

; 5833 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_hsv_bv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_hsv_iv
_TEXT	SEGMENT
_c$ = 8							; size = 4
_nk_hsv_iv PROC						; COMDAT

; 5825 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5826 :     return nk_hsv(c[0], c[1], c[2]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_nk_hsv
	add	esp, 12					; 0000000cH

; 5827 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_hsv_iv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_hsv
_TEXT	SEGMENT
_h$ = 8							; size = 4
_s$ = 12						; size = 4
_v$ = 16						; size = 4
_nk_hsv	PROC						; COMDAT

; 5819 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5820 :     return nk_hsva(h, s, v, 255);

	push	255					; 000000ffH
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _h$[ebp]
	push	edx
	call	_nk_hsva
	add	esp, 16					; 00000010H

; 5821 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_hsv	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rgba_hex
_TEXT	SEGMENT
_c$ = -20						; size = 4
_col$ = -8						; size = 4
_rgb$ = 8						; size = 4
_nk_rgba_hex PROC					; COMDAT

; 5696 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5697 :     struct nk_color col;
; 5698 :     const char *c = rgb;

	mov	eax, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 5699 :     if (*c == '#') c++;

	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 35					; 00000023H
	jne	SHORT $LN1@nk_rgba_he
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN1@nk_rgba_he:

; 5700 :     col.r = (nk_byte)nk_parse_hex(c, 2);

	push	2
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_nk_parse_hex
	add	esp, 8
	mov	BYTE PTR _col$[ebp], al

; 5701 :     col.g = (nk_byte)nk_parse_hex(c+2, 2);

	push	2
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 2
	push	eax
	call	_nk_parse_hex
	add	esp, 8
	mov	BYTE PTR _col$[ebp+1], al

; 5702 :     col.b = (nk_byte)nk_parse_hex(c+4, 2);

	push	2
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 4
	push	eax
	call	_nk_parse_hex
	add	esp, 8
	mov	BYTE PTR _col$[ebp+2], al

; 5703 :     col.a = (nk_byte)nk_parse_hex(c+6, 2);

	push	2
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 6
	push	eax
	call	_nk_parse_hex
	add	esp, 8
	mov	BYTE PTR _col$[ebp+3], al

; 5704 :     return col;

	mov	eax, DWORD PTR _col$[ebp]

; 5705 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@nk_rgba_he
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@nk_rgba_he:
	DD	1
	DD	$LN5@nk_rgba_he
$LN5@nk_rgba_he:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@nk_rgba_he
$LN4@nk_rgba_he:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
_nk_rgba_hex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rgba_fv
_TEXT	SEGMENT
_c$ = 8							; size = 4
_nk_rgba_fv PROC					; COMDAT

; 5796 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5797 :     return nk_rgba_f(c[0], c[1], c[2], c[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _c$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _c$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _c$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	call	_nk_rgba_f
	add	esp, 16					; 00000010H

; 5798 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_rgba_fv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rgba_f
_TEXT	SEGMENT
tv128 = -216						; size = 4
tv87 = -216						; size = 4
tv78 = -216						; size = 4
tv69 = -216						; size = 4
tv95 = -212						; size = 4
tv86 = -212						; size = 4
tv77 = -212						; size = 4
tv68 = -212						; size = 4
tv92 = -208						; size = 4
tv83 = -208						; size = 4
tv74 = -208						; size = 4
tv65 = -208						; size = 4
_ret$ = -8						; size = 4
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
_nk_rgba_f PROC						; COMDAT

; 5785 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5786 :     struct nk_color ret;
; 5787 :     ret.r = (nk_byte)(NK_SATURATE(r) * 255.0f);

	movss	xmm0, DWORD PTR _r$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN3@nk_rgba_f
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv65[ebp], xmm0
	jmp	SHORT $LN4@nk_rgba_f
$LN3@nk_rgba_f:
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR tv65[ebp], xmm0
$LN4@nk_rgba_f:
	movss	xmm0, DWORD PTR tv65[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN7@nk_rgba_f
	movss	xmm0, DWORD PTR _r$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN5@nk_rgba_f
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv68[ebp], xmm0
	jmp	SHORT $LN6@nk_rgba_f
$LN5@nk_rgba_f:
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR tv68[ebp], xmm0
$LN6@nk_rgba_f:
	movss	xmm0, DWORD PTR tv68[ebp]
	movss	DWORD PTR tv69[ebp], xmm0
	jmp	SHORT $LN8@nk_rgba_f
$LN7@nk_rgba_f:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv69[ebp], xmm0
$LN8@nk_rgba_f:
	movss	xmm0, DWORD PTR tv69[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	mov	BYTE PTR _ret$[ebp], al

; 5788 :     ret.g = (nk_byte)(NK_SATURATE(g) * 255.0f);

	movss	xmm0, DWORD PTR _g$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN9@nk_rgba_f
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv74[ebp], xmm0
	jmp	SHORT $LN10@nk_rgba_f
$LN9@nk_rgba_f:
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR tv74[ebp], xmm0
$LN10@nk_rgba_f:
	movss	xmm0, DWORD PTR tv74[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN13@nk_rgba_f
	movss	xmm0, DWORD PTR _g$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN11@nk_rgba_f
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv77[ebp], xmm0
	jmp	SHORT $LN12@nk_rgba_f
$LN11@nk_rgba_f:
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR tv77[ebp], xmm0
$LN12@nk_rgba_f:
	movss	xmm0, DWORD PTR tv77[ebp]
	movss	DWORD PTR tv78[ebp], xmm0
	jmp	SHORT $LN14@nk_rgba_f
$LN13@nk_rgba_f:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv78[ebp], xmm0
$LN14@nk_rgba_f:
	movss	xmm0, DWORD PTR tv78[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	mov	BYTE PTR _ret$[ebp+1], al

; 5789 :     ret.b = (nk_byte)(NK_SATURATE(b) * 255.0f);

	movss	xmm0, DWORD PTR _b$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN15@nk_rgba_f
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv83[ebp], xmm0
	jmp	SHORT $LN16@nk_rgba_f
$LN15@nk_rgba_f:
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR tv83[ebp], xmm0
$LN16@nk_rgba_f:
	movss	xmm0, DWORD PTR tv83[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN19@nk_rgba_f
	movss	xmm0, DWORD PTR _b$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN17@nk_rgba_f
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv86[ebp], xmm0
	jmp	SHORT $LN18@nk_rgba_f
$LN17@nk_rgba_f:
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR tv86[ebp], xmm0
$LN18@nk_rgba_f:
	movss	xmm0, DWORD PTR tv86[ebp]
	movss	DWORD PTR tv87[ebp], xmm0
	jmp	SHORT $LN20@nk_rgba_f
$LN19@nk_rgba_f:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv87[ebp], xmm0
$LN20@nk_rgba_f:
	movss	xmm0, DWORD PTR tv87[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	mov	BYTE PTR _ret$[ebp+2], al

; 5790 :     ret.a = (nk_byte)(NK_SATURATE(a) * 255.0f);

	movss	xmm0, DWORD PTR _a$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN21@nk_rgba_f
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv92[ebp], xmm0
	jmp	SHORT $LN22@nk_rgba_f
$LN21@nk_rgba_f:
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv92[ebp], xmm0
$LN22@nk_rgba_f:
	movss	xmm0, DWORD PTR tv92[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN25@nk_rgba_f
	movss	xmm0, DWORD PTR _a$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN23@nk_rgba_f
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv95[ebp], xmm0
	jmp	SHORT $LN24@nk_rgba_f
$LN23@nk_rgba_f:
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR tv95[ebp], xmm0
$LN24@nk_rgba_f:
	movss	xmm0, DWORD PTR tv95[ebp]
	movss	DWORD PTR tv128[ebp], xmm0
	jmp	SHORT $LN26@nk_rgba_f
$LN25@nk_rgba_f:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv128[ebp], xmm0
$LN26@nk_rgba_f:
	movss	xmm0, DWORD PTR tv128[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	mov	BYTE PTR _ret$[ebp+3], al

; 5791 :     return ret;

	mov	eax, DWORD PTR _ret$[ebp]

; 5792 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@nk_rgba_f
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN29@nk_rgba_f:
	DD	1
	DD	$LN28@nk_rgba_f
$LN28@nk_rgba_f:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN27@nk_rgba_f
$LN27@nk_rgba_f:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_nk_rgba_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rgba_bv
_TEXT	SEGMENT
_c$ = 8							; size = 4
_nk_rgba_bv PROC					; COMDAT

; 5745 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5746 :     return nk_rgba(c[0], c[1], c[2], c[3]);

	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	push	eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	push	ecx
	call	_nk_rgba
	add	esp, 16					; 00000010H

; 5747 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_rgba_bv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rgba_iv
_TEXT	SEGMENT
_c$ = 8							; size = 4
_nk_rgba_iv PROC					; COMDAT

; 5739 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5740 :     return nk_rgba(c[0], c[1], c[2], c[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	_nk_rgba
	add	esp, 16					; 00000010H

; 5741 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_rgba_iv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rgba_u32
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_in$ = 8						; size = 4
_nk_rgba_u32 PROC					; COMDAT

; 5774 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5775 :     struct nk_color ret;
; 5776 :     ret.r = (in & 0xFF);

	mov	eax, DWORD PTR _in$[ebp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _ret$[ebp], al

; 5777 :     ret.g = ((in >> 8) & 0xFF);

	mov	eax, DWORD PTR _in$[ebp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _ret$[ebp+1], al

; 5778 :     ret.b = ((in >> 16) & 0xFF);

	mov	eax, DWORD PTR _in$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _ret$[ebp+2], al

; 5779 :     ret.a = (nk_byte)((in >> 24) & 0xFF);

	mov	eax, DWORD PTR _in$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _ret$[ebp+3], al

; 5780 :     return ret;

	mov	eax, DWORD PTR _ret$[ebp]

; 5781 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_rgba_u3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@nk_rgba_u3:
	DD	1
	DD	$LN4@nk_rgba_u3
$LN4@nk_rgba_u3:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@nk_rgba_u3
$LN3@nk_rgba_u3:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_nk_rgba_u32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rgba
_TEXT	SEGMENT
tv89 = -216						; size = 4
tv82 = -216						; size = 4
tv75 = -216						; size = 4
tv68 = -216						; size = 4
tv90 = -212						; size = 4
tv83 = -212						; size = 4
tv76 = -212						; size = 4
tv69 = -212						; size = 4
tv86 = -208						; size = 4
tv79 = -208						; size = 4
tv72 = -208						; size = 4
tv65 = -208						; size = 4
_ret$ = -8						; size = 4
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
_nk_rgba PROC						; COMDAT

; 5672 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5673 :     struct nk_color ret;
; 5674 :     ret.r = (nk_byte)NK_CLAMP(0, r, 255);

	cmp	DWORD PTR _r$[ebp], 255			; 000000ffH
	jge	SHORT $LN3@nk_rgba
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@nk_rgba
$LN3@nk_rgba:
	mov	DWORD PTR tv65[ebp], 255		; 000000ffH
$LN4@nk_rgba:
	cmp	DWORD PTR tv65[ebp], 0
	jge	SHORT $LN7@nk_rgba
	mov	DWORD PTR tv69[ebp], 0
	jmp	SHORT $LN8@nk_rgba
$LN7@nk_rgba:
	cmp	DWORD PTR _r$[ebp], 255			; 000000ffH
	jge	SHORT $LN5@nk_rgba
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN6@nk_rgba
$LN5@nk_rgba:
	mov	DWORD PTR tv68[ebp], 255		; 000000ffH
$LN6@nk_rgba:
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], edx
$LN8@nk_rgba:
	mov	al, BYTE PTR tv69[ebp]
	mov	BYTE PTR _ret$[ebp], al

; 5675 :     ret.g = (nk_byte)NK_CLAMP(0, g, 255);

	cmp	DWORD PTR _g$[ebp], 255			; 000000ffH
	jge	SHORT $LN9@nk_rgba
	mov	eax, DWORD PTR _g$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN10@nk_rgba
$LN9@nk_rgba:
	mov	DWORD PTR tv72[ebp], 255		; 000000ffH
$LN10@nk_rgba:
	cmp	DWORD PTR tv72[ebp], 0
	jge	SHORT $LN13@nk_rgba
	mov	DWORD PTR tv76[ebp], 0
	jmp	SHORT $LN14@nk_rgba
$LN13@nk_rgba:
	cmp	DWORD PTR _g$[ebp], 255			; 000000ffH
	jge	SHORT $LN11@nk_rgba
	mov	ecx, DWORD PTR _g$[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN12@nk_rgba
$LN11@nk_rgba:
	mov	DWORD PTR tv75[ebp], 255		; 000000ffH
$LN12@nk_rgba:
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR tv76[ebp], edx
$LN14@nk_rgba:
	mov	al, BYTE PTR tv76[ebp]
	mov	BYTE PTR _ret$[ebp+1], al

; 5676 :     ret.b = (nk_byte)NK_CLAMP(0, b, 255);

	cmp	DWORD PTR _b$[ebp], 255			; 000000ffH
	jge	SHORT $LN15@nk_rgba
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN16@nk_rgba
$LN15@nk_rgba:
	mov	DWORD PTR tv79[ebp], 255		; 000000ffH
$LN16@nk_rgba:
	cmp	DWORD PTR tv79[ebp], 0
	jge	SHORT $LN19@nk_rgba
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN20@nk_rgba
$LN19@nk_rgba:
	cmp	DWORD PTR _b$[ebp], 255			; 000000ffH
	jge	SHORT $LN17@nk_rgba
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv82[ebp], ecx
	jmp	SHORT $LN18@nk_rgba
$LN17@nk_rgba:
	mov	DWORD PTR tv82[ebp], 255		; 000000ffH
$LN18@nk_rgba:
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv83[ebp], edx
$LN20@nk_rgba:
	mov	al, BYTE PTR tv83[ebp]
	mov	BYTE PTR _ret$[ebp+2], al

; 5677 :     ret.a = (nk_byte)NK_CLAMP(0, a, 255);

	cmp	DWORD PTR _a$[ebp], 255			; 000000ffH
	jge	SHORT $LN21@nk_rgba
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN22@nk_rgba
$LN21@nk_rgba:
	mov	DWORD PTR tv86[ebp], 255		; 000000ffH
$LN22@nk_rgba:
	cmp	DWORD PTR tv86[ebp], 0
	jge	SHORT $LN25@nk_rgba
	mov	DWORD PTR tv90[ebp], 0
	jmp	SHORT $LN26@nk_rgba
$LN25@nk_rgba:
	cmp	DWORD PTR _a$[ebp], 255			; 000000ffH
	jge	SHORT $LN23@nk_rgba
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv89[ebp], ecx
	jmp	SHORT $LN24@nk_rgba
$LN23@nk_rgba:
	mov	DWORD PTR tv89[ebp], 255		; 000000ffH
$LN24@nk_rgba:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR tv90[ebp], edx
$LN26@nk_rgba:
	mov	al, BYTE PTR tv90[ebp]
	mov	BYTE PTR _ret$[ebp+3], al

; 5678 :     return ret;

	mov	eax, DWORD PTR _ret$[ebp]

; 5679 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@nk_rgba
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN29@nk_rgba:
	DD	1
	DD	$LN28@nk_rgba
$LN28@nk_rgba:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN27@nk_rgba
$LN27@nk_rgba:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_nk_rgba ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rgb_hex
_TEXT	SEGMENT
_c$ = -20						; size = 4
_col$ = -8						; size = 4
_rgb$ = 8						; size = 4
_nk_rgb_hex PROC					; COMDAT

; 5683 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5684 :     struct nk_color col;
; 5685 :     const char *c = rgb;

	mov	eax, DWORD PTR _rgb$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 5686 :     if (*c == '#') c++;

	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 35					; 00000023H
	jne	SHORT $LN1@nk_rgb_hex
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN1@nk_rgb_hex:

; 5687 :     col.r = (nk_byte)nk_parse_hex(c, 2);

	push	2
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_nk_parse_hex
	add	esp, 8
	mov	BYTE PTR _col$[ebp], al

; 5688 :     col.g = (nk_byte)nk_parse_hex(c+2, 2);

	push	2
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 2
	push	eax
	call	_nk_parse_hex
	add	esp, 8
	mov	BYTE PTR _col$[ebp+1], al

; 5689 :     col.b = (nk_byte)nk_parse_hex(c+4, 2);

	push	2
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 4
	push	eax
	call	_nk_parse_hex
	add	esp, 8
	mov	BYTE PTR _col$[ebp+2], al

; 5690 :     col.a = 255;

	mov	BYTE PTR _col$[ebp+3], 255		; 000000ffH

; 5691 :     return col;

	mov	eax, DWORD PTR _col$[ebp]

; 5692 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@nk_rgb_hex
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@nk_rgb_hex:
	DD	1
	DD	$LN5@nk_rgb_hex
$LN5@nk_rgb_hex:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@nk_rgb_hex
$LN4@nk_rgb_hex:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
_nk_rgb_hex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rgb_fv
_TEXT	SEGMENT
_c$ = 8							; size = 4
_nk_rgb_fv PROC						; COMDAT

; 5813 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5814 :     return nk_rgb_f(c[0], c[1], c[2]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _c$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _c$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	call	_nk_rgb_f
	add	esp, 12					; 0000000cH

; 5815 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_rgb_fv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rgb_f
_TEXT	SEGMENT
tv87 = -216						; size = 4
tv78 = -216						; size = 4
tv69 = -216						; size = 4
tv86 = -212						; size = 4
tv77 = -212						; size = 4
tv68 = -212						; size = 4
tv83 = -208						; size = 4
tv74 = -208						; size = 4
tv65 = -208						; size = 4
_ret$ = -8						; size = 4
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_nk_rgb_f PROC						; COMDAT

; 5802 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5803 :     struct nk_color ret;
; 5804 :     ret.r = (nk_byte)(NK_SATURATE(r) * 255.0f);

	movss	xmm0, DWORD PTR _r$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN3@nk_rgb_f
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv65[ebp], xmm0
	jmp	SHORT $LN4@nk_rgb_f
$LN3@nk_rgb_f:
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR tv65[ebp], xmm0
$LN4@nk_rgb_f:
	movss	xmm0, DWORD PTR tv65[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN7@nk_rgb_f
	movss	xmm0, DWORD PTR _r$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN5@nk_rgb_f
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv68[ebp], xmm0
	jmp	SHORT $LN6@nk_rgb_f
$LN5@nk_rgb_f:
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR tv68[ebp], xmm0
$LN6@nk_rgb_f:
	movss	xmm0, DWORD PTR tv68[ebp]
	movss	DWORD PTR tv69[ebp], xmm0
	jmp	SHORT $LN8@nk_rgb_f
$LN7@nk_rgb_f:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv69[ebp], xmm0
$LN8@nk_rgb_f:
	movss	xmm0, DWORD PTR tv69[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	mov	BYTE PTR _ret$[ebp], al

; 5805 :     ret.g = (nk_byte)(NK_SATURATE(g) * 255.0f);

	movss	xmm0, DWORD PTR _g$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN9@nk_rgb_f
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv74[ebp], xmm0
	jmp	SHORT $LN10@nk_rgb_f
$LN9@nk_rgb_f:
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR tv74[ebp], xmm0
$LN10@nk_rgb_f:
	movss	xmm0, DWORD PTR tv74[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN13@nk_rgb_f
	movss	xmm0, DWORD PTR _g$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN11@nk_rgb_f
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv77[ebp], xmm0
	jmp	SHORT $LN12@nk_rgb_f
$LN11@nk_rgb_f:
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR tv77[ebp], xmm0
$LN12@nk_rgb_f:
	movss	xmm0, DWORD PTR tv77[ebp]
	movss	DWORD PTR tv78[ebp], xmm0
	jmp	SHORT $LN14@nk_rgb_f
$LN13@nk_rgb_f:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv78[ebp], xmm0
$LN14@nk_rgb_f:
	movss	xmm0, DWORD PTR tv78[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	mov	BYTE PTR _ret$[ebp+1], al

; 5806 :     ret.b = (nk_byte)(NK_SATURATE(b) * 255.0f);

	movss	xmm0, DWORD PTR _b$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN15@nk_rgb_f
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv83[ebp], xmm0
	jmp	SHORT $LN16@nk_rgb_f
$LN15@nk_rgb_f:
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR tv83[ebp], xmm0
$LN16@nk_rgb_f:
	movss	xmm0, DWORD PTR tv83[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN19@nk_rgb_f
	movss	xmm0, DWORD PTR _b$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN17@nk_rgb_f
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv86[ebp], xmm0
	jmp	SHORT $LN18@nk_rgb_f
$LN17@nk_rgb_f:
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR tv86[ebp], xmm0
$LN18@nk_rgb_f:
	movss	xmm0, DWORD PTR tv86[ebp]
	movss	DWORD PTR tv87[ebp], xmm0
	jmp	SHORT $LN20@nk_rgb_f
$LN19@nk_rgb_f:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv87[ebp], xmm0
$LN20@nk_rgb_f:
	movss	xmm0, DWORD PTR tv87[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	mov	BYTE PTR _ret$[ebp+2], al

; 5807 :     ret.a = 255;

	mov	BYTE PTR _ret$[ebp+3], 255		; 000000ffH

; 5808 :     return ret;

	mov	eax, DWORD PTR _ret$[ebp]

; 5809 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@nk_rgb_f
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN23@nk_rgb_f:
	DD	1
	DD	$LN22@nk_rgb_f
$LN22@nk_rgb_f:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN21@nk_rgb_f
$LN21@nk_rgb_f:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_nk_rgb_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rgb_bv
_TEXT	SEGMENT
_c$ = 8							; size = 4
_nk_rgb_bv PROC						; COMDAT

; 5768 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5769 :     return nk_rgb(c[0], c[1], c[2]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _c$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	push	edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _c$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	push	edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	push	eax
	call	_nk_rgb
	add	esp, 12					; 0000000cH

; 5770 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_rgb_bv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rgb_iv
_TEXT	SEGMENT
_c$ = 8							; size = 4
_nk_rgb_iv PROC						; COMDAT

; 5762 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5763 :     return nk_rgb(c[0], c[1], c[2]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_nk_rgb
	add	esp, 12					; 0000000cH

; 5764 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_rgb_iv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_rgb
_TEXT	SEGMENT
tv82 = -216						; size = 4
tv75 = -216						; size = 4
tv68 = -216						; size = 4
tv83 = -212						; size = 4
tv76 = -212						; size = 4
tv69 = -212						; size = 4
tv79 = -208						; size = 4
tv72 = -208						; size = 4
tv65 = -208						; size = 4
_ret$ = -8						; size = 4
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_nk_rgb	PROC						; COMDAT

; 5751 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5752 :     struct nk_color ret;
; 5753 :     ret.r = (nk_byte)NK_CLAMP(0, r, 255);

	cmp	DWORD PTR _r$[ebp], 255			; 000000ffH
	jge	SHORT $LN3@nk_rgb
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@nk_rgb
$LN3@nk_rgb:
	mov	DWORD PTR tv65[ebp], 255		; 000000ffH
$LN4@nk_rgb:
	cmp	DWORD PTR tv65[ebp], 0
	jge	SHORT $LN7@nk_rgb
	mov	DWORD PTR tv69[ebp], 0
	jmp	SHORT $LN8@nk_rgb
$LN7@nk_rgb:
	cmp	DWORD PTR _r$[ebp], 255			; 000000ffH
	jge	SHORT $LN5@nk_rgb
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN6@nk_rgb
$LN5@nk_rgb:
	mov	DWORD PTR tv68[ebp], 255		; 000000ffH
$LN6@nk_rgb:
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], edx
$LN8@nk_rgb:
	mov	al, BYTE PTR tv69[ebp]
	mov	BYTE PTR _ret$[ebp], al

; 5754 :     ret.g = (nk_byte)NK_CLAMP(0, g, 255);

	cmp	DWORD PTR _g$[ebp], 255			; 000000ffH
	jge	SHORT $LN9@nk_rgb
	mov	eax, DWORD PTR _g$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN10@nk_rgb
$LN9@nk_rgb:
	mov	DWORD PTR tv72[ebp], 255		; 000000ffH
$LN10@nk_rgb:
	cmp	DWORD PTR tv72[ebp], 0
	jge	SHORT $LN13@nk_rgb
	mov	DWORD PTR tv76[ebp], 0
	jmp	SHORT $LN14@nk_rgb
$LN13@nk_rgb:
	cmp	DWORD PTR _g$[ebp], 255			; 000000ffH
	jge	SHORT $LN11@nk_rgb
	mov	ecx, DWORD PTR _g$[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN12@nk_rgb
$LN11@nk_rgb:
	mov	DWORD PTR tv75[ebp], 255		; 000000ffH
$LN12@nk_rgb:
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR tv76[ebp], edx
$LN14@nk_rgb:
	mov	al, BYTE PTR tv76[ebp]
	mov	BYTE PTR _ret$[ebp+1], al

; 5755 :     ret.b = (nk_byte)NK_CLAMP(0, b, 255);

	cmp	DWORD PTR _b$[ebp], 255			; 000000ffH
	jge	SHORT $LN15@nk_rgb
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN16@nk_rgb
$LN15@nk_rgb:
	mov	DWORD PTR tv79[ebp], 255		; 000000ffH
$LN16@nk_rgb:
	cmp	DWORD PTR tv79[ebp], 0
	jge	SHORT $LN19@nk_rgb
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN20@nk_rgb
$LN19@nk_rgb:
	cmp	DWORD PTR _b$[ebp], 255			; 000000ffH
	jge	SHORT $LN17@nk_rgb
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv82[ebp], ecx
	jmp	SHORT $LN18@nk_rgb
$LN17@nk_rgb:
	mov	DWORD PTR tv82[ebp], 255		; 000000ffH
$LN18@nk_rgb:
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv83[ebp], edx
$LN20@nk_rgb:
	mov	al, BYTE PTR tv83[ebp]
	mov	BYTE PTR _ret$[ebp+2], al

; 5756 :     ret.a = (nk_byte)255;

	mov	BYTE PTR _ret$[ebp+3], 255		; 000000ffH

; 5757 :     return ret;

	mov	eax, DWORD PTR _ret$[ebp]

; 5758 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@nk_rgb
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN23@nk_rgb:
	DD	1
	DD	$LN22@nk_rgb
$LN22@nk_rgb:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN21@nk_rgb
$LN21@nk_rgb:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_nk_rgb	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_pop_color
_TEXT	SEGMENT
tv82 = -220						; size = 4
_element$ = -20						; size = 4
_type_stack$ = -8					; size = 4
_ctx$ = 8						; size = 4
_nk_style_pop_color PROC				; COMDAT

; 17105: NK_API int NK_STYLE_POP_IMPLEMENATION(color,colors)

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_style_p
	push	17105					; 000042d1H
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_style_p:
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_style_p
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN2@nk_style_p:
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 6932				; 00001b14H
	mov	DWORD PTR _type_stack$[ebp], eax
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN6@nk_style_p
	push	17105					; 000042d1H
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@BNOCFFAG@?$AAt?$AAy?$AAp?$AAe?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 1
	jge	SHORT $LN1@nk_style_p
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN1@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
	mov	edx, DWORD PTR _type_stack$[ebp]
	mov	eax, DWORD PTR tv82[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR tv82[ebp]
	mov	edx, DWORD PTR _type_stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8+4]
	mov	DWORD PTR _element$[ebp], eax
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _element$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	eax, 1
$LN3@nk_style_p:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_pop_color ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_pop_flags
_TEXT	SEGMENT
tv82 = -220						; size = 4
_element$ = -20						; size = 4
_type_stack$ = -8					; size = 4
_ctx$ = 8						; size = 4
_nk_style_pop_flags PROC				; COMDAT

; 17104: NK_API int NK_STYLE_POP_IMPLEMENATION(flags,flags)

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_style_p
	push	17104					; 000042d0H
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_style_p:
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_style_p
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN2@nk_style_p:
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 6672				; 00001a10H
	mov	DWORD PTR _type_stack$[ebp], eax
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN6@nk_style_p
	push	17104					; 000042d0H
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@BNOCFFAG@?$AAt?$AAy?$AAp?$AAe?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 1
	jge	SHORT $LN1@nk_style_p
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN1@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
	mov	edx, DWORD PTR _type_stack$[ebp]
	mov	eax, DWORD PTR tv82[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR tv82[ebp]
	mov	edx, DWORD PTR _type_stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8+4]
	mov	DWORD PTR _element$[ebp], eax
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _element$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx], eax
	mov	eax, 1
$LN3@nk_style_p:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_pop_flags ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_pop_style_item
_TEXT	SEGMENT
tv82 = -220						; size = 4
_element$ = -20						; size = 4
_type_stack$ = -8					; size = 4
_ctx$ = 8						; size = 4
_nk_style_pop_style_item PROC				; COMDAT

; 17101: NK_API int NK_STYLE_POP_IMPLEMENATION(style_item, style_items)

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_style_p
	push	17101					; 000042cdH
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_style_p:
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_style_p
	xor	eax, eax
	jmp	$LN3@nk_style_p
$LN2@nk_style_p:
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5828				; 000016c4H
	mov	DWORD PTR _type_stack$[ebp], eax
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN6@nk_style_p
	push	17101					; 000042cdH
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@BNOCFFAG@?$AAt?$AAy?$AAp?$AAe?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 1
	jge	SHORT $LN1@nk_style_p
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN1@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
	mov	edx, DWORD PTR _type_stack$[ebp]
	mov	eax, DWORD PTR tv82[ebp]
	mov	DWORD PTR [edx], eax
	imul	ecx, DWORD PTR tv82[ebp], 24
	mov	edx, DWORD PTR _type_stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _element$[ebp], eax
	mov	eax, DWORD PTR _element$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _element$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax
	mov	eax, 1
$LN3@nk_style_p:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_pop_style_item ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_pop_vec2
_TEXT	SEGMENT
tv82 = -220						; size = 4
_element$ = -20						; size = 4
_type_stack$ = -8					; size = 4
_ctx$ = 8						; size = 4
_nk_style_pop_vec2 PROC					; COMDAT

; 17103: NK_API int NK_STYLE_POP_IMPLEMENATION(vec2, vectors)

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_style_p
	push	17103					; 000042cfH
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_style_p:
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_style_p
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN2@nk_style_p:
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 6476				; 0000194cH
	mov	DWORD PTR _type_stack$[ebp], eax
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN6@nk_style_p
	push	17103					; 000042cfH
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@BNOCFFAG@?$AAt?$AAy?$AAp?$AAe?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 1
	jge	SHORT $LN1@nk_style_p
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN1@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
	mov	edx, DWORD PTR _type_stack$[ebp]
	mov	eax, DWORD PTR tv82[ebp]
	mov	DWORD PTR [edx], eax
	imul	ecx, DWORD PTR tv82[ebp], 12
	mov	edx, DWORD PTR _type_stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _element$[ebp], eax
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _element$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, 1
$LN3@nk_style_p:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_pop_vec2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_pop_float
_TEXT	SEGMENT
tv82 = -220						; size = 4
_element$ = -20						; size = 4
_type_stack$ = -8					; size = 4
_ctx$ = 8						; size = 4
_nk_style_pop_float PROC				; COMDAT

; 17102: NK_API int NK_STYLE_POP_IMPLEMENATION(float,floats)

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_style_p
	push	17102					; 000042ceH
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_style_p:
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_style_p
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN2@nk_style_p:
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 6216				; 00001848H
	mov	DWORD PTR _type_stack$[ebp], eax
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN6@nk_style_p
	push	17102					; 000042ceH
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@BNOCFFAG@?$AAt?$AAy?$AAp?$AAe?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 1
	jge	SHORT $LN1@nk_style_p
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN1@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
	mov	edx, DWORD PTR _type_stack$[ebp]
	mov	eax, DWORD PTR tv82[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR tv82[ebp]
	mov	edx, DWORD PTR _type_stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8+4]
	mov	DWORD PTR _element$[ebp], eax
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _element$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx], eax
	mov	eax, 1
$LN3@nk_style_p:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_pop_float ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_pop_font
_TEXT	SEGMENT
tv84 = -220						; size = 4
_element$ = -20						; size = 4
_font_stack$ = -8					; size = 4
_ctx$ = 8						; size = 4
_nk_style_pop_font PROC					; COMDAT

; 17044: {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17045:     struct nk_config_stack_user_font *font_stack;
; 17046:     struct nk_config_stack_user_font_element *element;
; 17047: 
; 17048:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_style_p
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_style_pop_font@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_style_p:

; 17049:     if (!ctx) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_style_p
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN2@nk_style_p:

; 17050: 
; 17051:     font_stack = &ctx->stacks.fonts;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 7192				; 00001c18H
	mov	DWORD PTR _font_stack$[ebp], eax

; 17052:     NK_ASSERT(font_stack->head > 0);

	mov	eax, DWORD PTR _font_stack$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN6@nk_style_p
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_style_pop_font@@9@9
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@NLHKOOOH@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_style_p:

; 17053:     if (font_stack->head < 1)

	mov	eax, DWORD PTR _font_stack$[ebp]
	cmp	DWORD PTR [eax], 1
	jge	SHORT $LN1@nk_style_p

; 17054:         return 0;

	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN1@nk_style_p:

; 17055: 
; 17056:     element = &font_stack->elements[--font_stack->head];

	mov	eax, DWORD PTR _font_stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	DWORD PTR tv84[ebp], ecx
	mov	edx, DWORD PTR _font_stack$[ebp]
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR tv84[ebp]
	mov	edx, DWORD PTR _font_stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8+4]
	mov	DWORD PTR _element$[ebp], eax

; 17057:     *element->address = element->old_value;

	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _element$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx], eax

; 17058:     return 1;

	mov	eax, 1
$LN3@nk_style_p:

; 17059: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_pop_font ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_push_color
_TEXT	SEGMENT
_element$ = -20						; size = 4
_type_stack$ = -8					; size = 4
_ctx$ = 8						; size = 4
_address$ = 12						; size = 4
_value$ = 16						; size = 4
_nk_style_push_color PROC				; COMDAT

; 17099: NK_API int NK_STYLE_PUSH_IMPLEMENATION(struct nk,color, colors)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_style_p
	push	17099					; 000042cbH
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_style_p:
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_style_p
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN2@nk_style_p:
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 6932				; 00001b14H
	mov	DWORD PTR _type_stack$[ebp], eax
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 32			; 00000020H
	jl	SHORT $LN6@nk_style_p
	push	17099					; 000042cbH
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1KO@JLDKBNHN@?$AAt?$AAy?$AAp?$AAe?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 32			; 00000020H
	jl	SHORT $LN1@nk_style_p
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN1@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _type_stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8+4]
	mov	DWORD PTR _element$[ebp], eax
	mov	ecx, DWORD PTR _type_stack$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _type_stack$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR _address$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _address$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _element$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _address$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, 1
$LN3@nk_style_p:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_push_color ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_push_flags
_TEXT	SEGMENT
_element$ = -20						; size = 4
_type_stack$ = -8					; size = 4
_ctx$ = 8						; size = 4
_address$ = 12						; size = 4
_value$ = 16						; size = 4
_nk_style_push_flags PROC				; COMDAT

; 17098: NK_API int NK_STYLE_PUSH_IMPLEMENATION(nk,flags, flags)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_style_p
	push	17098					; 000042caH
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_style_p:
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_style_p
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN2@nk_style_p:
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 6672				; 00001a10H
	mov	DWORD PTR _type_stack$[ebp], eax
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 32			; 00000020H
	jl	SHORT $LN6@nk_style_p
	push	17098					; 000042caH
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1KO@JLDKBNHN@?$AAt?$AAy?$AAp?$AAe?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 32			; 00000020H
	jl	SHORT $LN1@nk_style_p
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN1@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _type_stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8+4]
	mov	DWORD PTR _element$[ebp], eax
	mov	ecx, DWORD PTR _type_stack$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _type_stack$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR _address$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR _address$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _address$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, 1
$LN3@nk_style_p:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_push_flags ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_push_style_item
_TEXT	SEGMENT
_element$ = -20						; size = 4
_type_stack$ = -8					; size = 4
_ctx$ = 8						; size = 4
_address$ = 12						; size = 4
_value$ = 16						; size = 20
_nk_style_push_style_item PROC				; COMDAT

; 17095: NK_API int NK_STYLE_PUSH_IMPLEMENATION(struct nk, style_item, style_items)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_style_p
	push	17095					; 000042c7H
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_style_p:
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_style_p
	xor	eax, eax
	jmp	$LN3@nk_style_p
$LN2@nk_style_p:
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5828				; 000016c4H
	mov	DWORD PTR _type_stack$[ebp], eax
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 16			; 00000010H
	jl	SHORT $LN6@nk_style_p
	push	17095					; 000042c7H
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1KO@JLDKBNHN@?$AAt?$AAy?$AAp?$AAe?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 16			; 00000010H
	jl	SHORT $LN1@nk_style_p
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN1@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	imul	ecx, DWORD PTR [eax], 24
	mov	edx, DWORD PTR _type_stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _element$[ebp], eax
	mov	ecx, DWORD PTR _type_stack$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _type_stack$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR _address$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _element$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _address$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ecx
	mov	eax, DWORD PTR _address$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _value$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _value$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _value$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	eax, 1
$LN3@nk_style_p:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_push_style_item ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_push_vec2
_TEXT	SEGMENT
_element$ = -20						; size = 4
_type_stack$ = -8					; size = 4
_ctx$ = 8						; size = 4
_address$ = 12						; size = 4
_value$ = 16						; size = 8
_nk_style_push_vec2 PROC				; COMDAT

; 17097: NK_API int NK_STYLE_PUSH_IMPLEMENATION(struct nk, vec2, vectors)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_style_p
	push	17097					; 000042c9H
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_style_p:
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_style_p
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN2@nk_style_p:
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 6476				; 0000194cH
	mov	DWORD PTR _type_stack$[ebp], eax
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 16			; 00000010H
	jl	SHORT $LN6@nk_style_p
	push	17097					; 000042c9H
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1KO@JLDKBNHN@?$AAt?$AAy?$AAp?$AAe?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 16			; 00000010H
	jl	SHORT $LN1@nk_style_p
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN1@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	imul	ecx, DWORD PTR [eax], 12
	mov	edx, DWORD PTR _type_stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _element$[ebp], eax
	mov	ecx, DWORD PTR _type_stack$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _type_stack$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR _address$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _address$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _element$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _address$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, 1
$LN3@nk_style_p:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_push_vec2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_push_float
_TEXT	SEGMENT
_element$ = -20						; size = 4
_type_stack$ = -8					; size = 4
_ctx$ = 8						; size = 4
_address$ = 12						; size = 4
_value$ = 16						; size = 4
_nk_style_push_float PROC				; COMDAT

; 17096: NK_API int NK_STYLE_PUSH_IMPLEMENATION(nk,float, floats)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_style_p
	push	17096					; 000042c8H
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_style_p:
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_style_p
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN2@nk_style_p:
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 6216				; 00001848H
	mov	DWORD PTR _type_stack$[ebp], eax
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 32			; 00000020H
	jl	SHORT $LN6@nk_style_p
	push	17096					; 000042c8H
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1KO@JLDKBNHN@?$AAt?$AAy?$AAp?$AAe?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	cmp	DWORD PTR [eax], 32			; 00000020H
	jl	SHORT $LN1@nk_style_p
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN1@nk_style_p:
	mov	eax, DWORD PTR _type_stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _type_stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8+4]
	mov	DWORD PTR _element$[ebp], eax
	mov	ecx, DWORD PTR _type_stack$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _type_stack$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR _address$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR _address$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _address$[ebp]
	movss	xmm0, DWORD PTR _value$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, 1
$LN3@nk_style_p:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_push_float ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_push_font
_TEXT	SEGMENT
_element$ = -20						; size = 4
_font_stack$ = -8					; size = 4
_ctx$ = 8						; size = 4
_font$ = 12						; size = 4
_nk_style_push_font PROC				; COMDAT

; 17023: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17024:     struct nk_config_stack_user_font *font_stack;
; 17025:     struct nk_config_stack_user_font_element *element;
; 17026: 
; 17027:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_style_p
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_style_push_font@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_style_p:

; 17028:     if (!ctx) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_style_p
	xor	eax, eax
	jmp	$LN3@nk_style_p
$LN2@nk_style_p:

; 17029: 
; 17030:     font_stack = &ctx->stacks.fonts;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 7192				; 00001c18H
	mov	DWORD PTR _font_stack$[ebp], eax

; 17031:     NK_ASSERT(font_stack->head < (int)NK_LEN(font_stack->elements));

	mov	eax, DWORD PTR _font_stack$[ebp]
	cmp	DWORD PTR [eax], 8
	jl	SHORT $LN6@nk_style_p
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_style_push_font@@9@9
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1KO@LJHFLGDM@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_style_p:

; 17032:     if (font_stack->head >= (int)NK_LEN(font_stack->elements))

	mov	eax, DWORD PTR _font_stack$[ebp]
	cmp	DWORD PTR [eax], 8
	jl	SHORT $LN1@nk_style_p

; 17033:         return 0;

	xor	eax, eax
	jmp	SHORT $LN3@nk_style_p
$LN1@nk_style_p:

; 17034: 
; 17035:     element = &font_stack->elements[font_stack->head++];

	mov	eax, DWORD PTR _font_stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _font_stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8+4]
	mov	DWORD PTR _element$[ebp], eax
	mov	ecx, DWORD PTR _font_stack$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _font_stack$[ebp]
	mov	DWORD PTR [eax], edx

; 17036:     element->address = &ctx->style.font;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _element$[ebp]
	mov	DWORD PTR [ecx], eax

; 17037:     element->old_value = ctx->style.font;

	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	mov	DWORD PTR [eax+4], edx

; 17038:     ctx->style.font = font;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax+360], ecx

; 17039:     return 1;

	mov	eax, 1
$LN3@nk_style_p:

; 17040: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_push_font ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_hide_cursor
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_style_hide_cursor PROC				; COMDAT

; 17129: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17130:     ctx->style.cursor_visible = nk_false;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+400], 0

; 17131: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_hide_cursor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_show_cursor
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_style_show_cursor PROC				; COMDAT

; 17123: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17124:     ctx->style.cursor_visible = nk_true;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+400], 1

; 17125: }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_show_cursor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_set_cursor
_TEXT	SEGMENT
_style$ = -8						; size = 4
_ctx$ = 8						; size = 4
_c$ = 12						; size = 4
_nk_style_set_cursor PROC				; COMDAT

; 17109: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17110:     struct nk_style *style;
; 17111:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_style_s
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_style_set_cursor@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_style_s:

; 17112:     if (!ctx) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_style_s
	xor	eax, eax
	jmp	SHORT $LN3@nk_style_s
$LN2@nk_style_s:

; 17113:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 17114:     if (style->cursors[c]) {

	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _style$[ebp]
	cmp	DWORD PTR [ecx+eax*4+4], 0
	je	SHORT $LN1@nk_style_s

; 17115:         style->cursor_active = style->cursors[c];

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+4]
	mov	DWORD PTR [eax+32], ecx

; 17116:         return 1;

	mov	eax, 1
	jmp	SHORT $LN3@nk_style_s
$LN1@nk_style_s:

; 17117:     }
; 17118:     return 0;

	xor	eax, eax
$LN3@nk_style_s:

; 17119: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_set_cursor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_set_font
_TEXT	SEGMENT
_style$ = -8						; size = 4
_ctx$ = 8						; size = 4
_font$ = 12						; size = 4
_nk_style_set_font PROC					; COMDAT

; 17009: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17010:     struct nk_style *style;
; 17011:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_style_s
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_style_set_font@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_style_s:

; 17012: 
; 17013:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_style_s
	jmp	SHORT $LN3@nk_style_s
$LN2@nk_style_s:

; 17014:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 17015:     style->font = font;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax], ecx

; 17016:     ctx->stacks.fonts.head = 0;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+7192], 0

; 17017:     if (ctx->current)

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_style_s

; 17018:         nk_layout_reset_min_row_height(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_layout_reset_min_row_height
	add	esp, 4
$LN3@nk_style_s:

; 17019: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_set_font ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_get_color_by_name
_TEXT	SEGMENT
_c$ = 8							; size = 4
_nk_style_get_color_by_name PROC			; COMDAT

; 16452: {return nk_color_names[c];}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _nk_color_names[eax*4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_get_color_by_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_load_all_cursors
_TEXT	SEGMENT
_style$ = -20						; size = 4
_i$ = -8						; size = 4
_ctx$ = 8						; size = 4
_cursors$ = 12						; size = 4
_nk_style_load_all_cursors PROC				; COMDAT

; 17146: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17147:     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 17148:     struct nk_style *style;
; 17149:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_style_l
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_style_load_all_cursors@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_style_l:

; 17150:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN4@nk_style_l
	jmp	SHORT $LN5@nk_style_l
$LN4@nk_style_l:

; 17151:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 17152:     for (i = 0; i < NK_CURSOR_COUNT; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_style_l
$LN2@nk_style_l:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_style_l:
	cmp	DWORD PTR _i$[ebp], 7
	jge	SHORT $LN1@nk_style_l

; 17153:         style->cursors[i] = &cursors[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _cursors$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _style$[ebp]
	mov	DWORD PTR [edx+ecx*4+4], eax
	jmp	SHORT $LN2@nk_style_l
$LN1@nk_style_l:

; 17154:     style->cursor_visible = nk_true;

	mov	eax, DWORD PTR _style$[ebp]
	mov	DWORD PTR [eax+40], 1
$LN5@nk_style_l:

; 17155: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_load_all_cursors ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_load_cursor
_TEXT	SEGMENT
_style$ = -8						; size = 4
_ctx$ = 8						; size = 4
_cursor$ = 12						; size = 4
_c$ = 16						; size = 4
_nk_style_load_cursor PROC				; COMDAT

; 17136: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17137:     struct nk_style *style;
; 17138:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN4@nk_style_l
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_style_load_cursor@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_style_l:

; 17139:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN1@nk_style_l
	jmp	SHORT $LN2@nk_style_l
$LN1@nk_style_l:

; 17140:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 17141:     style->cursors[cursor] = c;

	mov	eax, DWORD PTR _cursor$[ebp]
	mov	ecx, DWORD PTR _style$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+eax*4+4], edx
$LN2@nk_style_l:

; 17142: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_load_cursor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_from_table
_TEXT	SEGMENT
tv75 = -2776						; size = 4
tv73 = -2772						; size = 4
$T1 = -2764						; size = 20
$T2 = -2736						; size = 20
$T3 = -2708						; size = 20
$T4 = -2680						; size = 20
$T5 = -2652						; size = 20
$T6 = -2624						; size = 20
$T7 = -2596						; size = 20
$T8 = -2568						; size = 20
$T9 = -2540						; size = 20
$T10 = -2512						; size = 20
$T11 = -2484						; size = 20
$T12 = -2456						; size = 20
$T13 = -2428						; size = 20
$T14 = -2400						; size = 20
$T15 = -2372						; size = 20
$T16 = -2344						; size = 20
$T17 = -2316						; size = 20
$T18 = -2288						; size = 20
$T19 = -2260						; size = 20
$T20 = -2232						; size = 20
$T21 = -2204						; size = 20
$T22 = -2176						; size = 20
$T23 = -2148						; size = 20
$T24 = -2120						; size = 20
$T25 = -2092						; size = 20
$T26 = -2064						; size = 20
$T27 = -2036						; size = 20
$T28 = -2008						; size = 20
$T29 = -1980						; size = 20
$T30 = -1952						; size = 20
$T31 = -1924						; size = 20
$T32 = -1896						; size = 20
$T33 = -1868						; size = 20
$T34 = -1840						; size = 20
$T35 = -1812						; size = 20
$T36 = -1784						; size = 20
$T37 = -1756						; size = 20
$T38 = -1728						; size = 20
$T39 = -1700						; size = 20
$T40 = -1672						; size = 20
$T41 = -1644						; size = 20
$T42 = -1616						; size = 20
$T43 = -1588						; size = 20
$T44 = -1560						; size = 20
$T45 = -1532						; size = 20
$T46 = -1504						; size = 20
$T47 = -1476						; size = 20
$T48 = -1448						; size = 20
$T49 = -1420						; size = 20
$T50 = -1392						; size = 20
$T51 = -1364						; size = 20
$T52 = -1336						; size = 20
$T53 = -1308						; size = 20
$T54 = -1280						; size = 20
$T55 = -1252						; size = 20
$T56 = -1224						; size = 20
$T57 = -1196						; size = 20
$T58 = -1168						; size = 20
$T59 = -1140						; size = 20
$T60 = -1112						; size = 20
$T61 = -1084						; size = 20
$T62 = -1056						; size = 20
$T63 = -1028						; size = 20
$T64 = -1000						; size = 20
$T65 = -972						; size = 20
$T66 = -944						; size = 20
$T67 = -916						; size = 20
$T68 = -888						; size = 20
$T69 = -860						; size = 20
$T70 = -832						; size = 20
$T71 = -804						; size = 20
$T72 = -776						; size = 20
$T73 = -748						; size = 20
$T74 = -720						; size = 20
$T75 = -692						; size = 20
$T76 = -664						; size = 20
$T77 = -636						; size = 20
$T78 = -608						; size = 20
$T79 = -580						; size = 20
$T80 = -552						; size = 20
$T81 = -524						; size = 20
$T82 = -496						; size = 20
$T83 = -468						; size = 20
$T84 = -440						; size = 20
$T85 = -412						; size = 20
$T86 = -384						; size = 20
_win$ = -164						; size = 4
_tab$ = -152						; size = 4
_chart$ = -140						; size = 4
_combo$ = -128						; size = 4
_property$ = -116					; size = 4
_edit$ = -104						; size = 4
_scroll$ = -92						; size = 4
_prog$ = -80						; size = 4
_slider$ = -68						; size = 4
_select$ = -56						; size = 4
_toggle$ = -44						; size = 4
_button$ = -32						; size = 4
_text$ = -20						; size = 4
_style$ = -8						; size = 4
_ctx$ = 8						; size = 4
_table$ = 12						; size = 4
_nk_style_from_table PROC				; COMDAT

; 16465: {

	push	ebp
	mov	ebp, esp
	sub	esp, 2776				; 00000ad8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2776]
	mov	ecx, 694				; 000002b6H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 16466:     struct nk_style *style;
; 16467:     struct nk_style_text *text;
; 16468:     struct nk_style_button *button;
; 16469:     struct nk_style_toggle *toggle;
; 16470:     struct nk_style_selectable *select;
; 16471:     struct nk_style_slider *slider;
; 16472:     struct nk_style_progress *prog;
; 16473:     struct nk_style_scrollbar *scroll;
; 16474:     struct nk_style_edit *edit;
; 16475:     struct nk_style_property *property;
; 16476:     struct nk_style_combo *combo;
; 16477:     struct nk_style_chart *chart;
; 16478:     struct nk_style_tab *tab;
; 16479:     struct nk_style_window *win;
; 16480: 
; 16481:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN4@nk_style_f
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_style_from_table@@9@9
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_style_f:

; 16482:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN1@nk_style_f
	jmp	$LN2@nk_style_f
$LN1@nk_style_f:

; 16483:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 16484:     table = (!table) ? nk_default_color_style: table;

	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN5@nk_style_f
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN6@nk_style_f
$LN5@nk_style_f:
	mov	DWORD PTR tv73[ebp], 0
$LN6@nk_style_f:
	cmp	DWORD PTR tv73[ebp], 0
	je	SHORT $LN7@nk_style_f
	mov	DWORD PTR tv75[ebp], OFFSET _nk_default_color_style
	jmp	SHORT $LN8@nk_style_f
$LN7@nk_style_f:
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR tv75[ebp], eax
$LN8@nk_style_f:
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR _table$[ebp], ecx

; 16485: 
; 16486:     /* default text */
; 16487:     text = &style->text;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR _text$[ebp], eax

; 16488:     text->color = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _text$[ebp]
	mov	DWORD PTR [ecx], eax

; 16489:     text->padding = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _text$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx

; 16490: 
; 16491:     /* default button */
; 16492:     button = &style->button;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 56					; 00000038H
	mov	DWORD PTR _button$[ebp], eax

; 16493:     nk_zero_struct(*button);

	push	128					; 00000080H
	mov	eax, DWORD PTR _button$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 16494:     button->normal          = nk_style_item_color(table[NK_COLOR_BUTTON]);

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T36[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16495:     button->hover           = nk_style_item_color(table[NK_COLOR_BUTTON_HOVER]);

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T37[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _button$[ebp]
	add	edx, 20					; 00000014H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16496:     button->active          = nk_style_item_color(table[NK_COLOR_BUTTON_ACTIVE]);

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T38[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _button$[ebp]
	add	edx, 40					; 00000028H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16497:     button->border_color    = table[NK_COLOR_BORDER];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 16498:     button->text_background = table[NK_COLOR_BUTTON];

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+64], edx

; 16499:     button->text_normal     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 16500:     button->text_hover      = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 16501:     button->text_active     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 16502:     button->padding         = nk_vec2(2.0f,2.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+92], eax
	mov	DWORD PTR [ecx+96], edx

; 16503:     button->image_padding   = nk_vec2(0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+100], eax
	mov	DWORD PTR [ecx+104], edx

; 16504:     button->touch_padding   = nk_vec2(0.0f, 0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+108], eax
	mov	DWORD PTR [ecx+112], edx

; 16505:     button->userdata        = nk_handle_ptr(0);

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 16506:     button->text_alignment  = NK_TEXT_CENTERED;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+80], 18			; 00000012H

; 16507:     button->border          = 1.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+84], xmm0

; 16508:     button->rounding        = 4.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [eax+88], xmm0

; 16509:     button->draw_begin      = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+120], 0

; 16510:     button->draw_end        = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+124], 0

; 16511: 
; 16512:     /* contextual button */
; 16513:     button = &style->contextual_button;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 184				; 000000b8H
	mov	DWORD PTR _button$[ebp], eax

; 16514:     nk_zero_struct(*button);

	push	128					; 00000080H
	mov	eax, DWORD PTR _button$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 16515:     button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T39[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16516:     button->hover           = nk_style_item_color(table[NK_COLOR_BUTTON_HOVER]);

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T40[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _button$[ebp]
	add	edx, 20					; 00000014H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16517:     button->active          = nk_style_item_color(table[NK_COLOR_BUTTON_ACTIVE]);

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T41[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _button$[ebp]
	add	edx, 40					; 00000028H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16518:     button->border_color    = table[NK_COLOR_WINDOW];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+60], edx

; 16519:     button->text_background = table[NK_COLOR_WINDOW];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+64], edx

; 16520:     button->text_normal     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 16521:     button->text_hover      = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 16522:     button->text_active     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 16523:     button->padding         = nk_vec2(2.0f,2.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+92], eax
	mov	DWORD PTR [ecx+96], edx

; 16524:     button->touch_padding   = nk_vec2(0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+108], eax
	mov	DWORD PTR [ecx+112], edx

; 16525:     button->userdata        = nk_handle_ptr(0);

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 16526:     button->text_alignment  = NK_TEXT_CENTERED;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+80], 18			; 00000012H

; 16527:     button->border          = 0.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+84], xmm0

; 16528:     button->rounding        = 0.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+88], xmm0

; 16529:     button->draw_begin      = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+120], 0

; 16530:     button->draw_end        = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+124], 0

; 16531: 
; 16532:     /* menu button */
; 16533:     button = &style->menu_button;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 312				; 00000138H
	mov	DWORD PTR _button$[ebp], eax

; 16534:     nk_zero_struct(*button);

	push	128					; 00000080H
	mov	eax, DWORD PTR _button$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 16535:     button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T42[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16536:     button->hover           = nk_style_item_color(table[NK_COLOR_WINDOW]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T43[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16537:     button->active          = nk_style_item_color(table[NK_COLOR_WINDOW]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T44[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	add	ecx, 40					; 00000028H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16538:     button->border_color    = table[NK_COLOR_WINDOW];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+60], edx

; 16539:     button->text_background = table[NK_COLOR_WINDOW];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+64], edx

; 16540:     button->text_normal     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 16541:     button->text_hover      = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 16542:     button->text_active     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 16543:     button->padding         = nk_vec2(2.0f,2.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+92], eax
	mov	DWORD PTR [ecx+96], edx

; 16544:     button->touch_padding   = nk_vec2(0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+108], eax
	mov	DWORD PTR [ecx+112], edx

; 16545:     button->userdata        = nk_handle_ptr(0);

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 16546:     button->text_alignment  = NK_TEXT_CENTERED;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+80], 18			; 00000012H

; 16547:     button->border          = 0.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+84], xmm0

; 16548:     button->rounding        = 1.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+88], xmm0

; 16549:     button->draw_begin      = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+120], 0

; 16550:     button->draw_end        = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+124], 0

; 16551: 
; 16552:     /* checkbox toggle */
; 16553:     toggle = &style->checkbox;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 600				; 00000258H
	mov	DWORD PTR _toggle$[ebp], eax

; 16554:     nk_zero_struct(*toggle);

	push	160					; 000000a0H
	mov	eax, DWORD PTR _toggle$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 16555:     toggle->normal          = nk_style_item_color(table[NK_COLOR_TOGGLE]);

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T45[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _toggle$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16556:     toggle->hover           = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);

	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T46[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _toggle$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16557:     toggle->active          = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);

	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T47[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _toggle$[ebp]
	add	ecx, 40					; 00000028H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16558:     toggle->cursor_normal   = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);

	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T48[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _toggle$[ebp]
	add	edx, 64					; 00000040H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16559:     toggle->cursor_hover    = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);

	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T49[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _toggle$[ebp]
	add	edx, 84					; 00000054H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16560:     toggle->userdata        = nk_handle_ptr(0);

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	mov	ecx, DWORD PTR _toggle$[ebp]
	mov	DWORD PTR [ecx+148], eax

; 16561:     toggle->text_background = table[NK_COLOR_WINDOW];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _toggle$[ebp]
	mov	DWORD PTR [eax+116], edx

; 16562:     toggle->text_normal     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _toggle$[ebp]
	mov	DWORD PTR [ecx+104], eax

; 16563:     toggle->text_hover      = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _toggle$[ebp]
	mov	DWORD PTR [ecx+108], eax

; 16564:     toggle->text_active     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _toggle$[ebp]
	mov	DWORD PTR [ecx+112], eax

; 16565:     toggle->padding         = nk_vec2(2.0f, 2.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _toggle$[ebp]
	mov	DWORD PTR [ecx+124], eax
	mov	DWORD PTR [ecx+128], edx

; 16566:     toggle->touch_padding   = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _toggle$[ebp]
	mov	DWORD PTR [ecx+132], eax
	mov	DWORD PTR [ecx+136], edx

; 16567:     toggle->border_color    = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _toggle$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 16568:     toggle->border          = 0.0f;

	mov	eax, DWORD PTR _toggle$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+144], xmm0

; 16569:     toggle->spacing         = 4;

	mov	eax, DWORD PTR _toggle$[ebp]
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [eax+140], xmm0

; 16570: 
; 16571:     /* option toggle */
; 16572:     toggle = &style->option;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 440				; 000001b8H
	mov	DWORD PTR _toggle$[ebp], eax

; 16573:     nk_zero_struct(*toggle);

	push	160					; 000000a0H
	mov	eax, DWORD PTR _toggle$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 16574:     toggle->normal          = nk_style_item_color(table[NK_COLOR_TOGGLE]);

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T50[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _toggle$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16575:     toggle->hover           = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);

	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T51[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _toggle$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16576:     toggle->active          = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);

	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T52[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _toggle$[ebp]
	add	ecx, 40					; 00000028H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16577:     toggle->cursor_normal   = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);

	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T53[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _toggle$[ebp]
	add	edx, 64					; 00000040H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16578:     toggle->cursor_hover    = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);

	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T54[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _toggle$[ebp]
	add	edx, 84					; 00000054H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16579:     toggle->userdata        = nk_handle_ptr(0);

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	mov	ecx, DWORD PTR _toggle$[ebp]
	mov	DWORD PTR [ecx+148], eax

; 16580:     toggle->text_background = table[NK_COLOR_WINDOW];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _toggle$[ebp]
	mov	DWORD PTR [eax+116], edx

; 16581:     toggle->text_normal     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _toggle$[ebp]
	mov	DWORD PTR [ecx+104], eax

; 16582:     toggle->text_hover      = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _toggle$[ebp]
	mov	DWORD PTR [ecx+108], eax

; 16583:     toggle->text_active     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _toggle$[ebp]
	mov	DWORD PTR [ecx+112], eax

; 16584:     toggle->padding         = nk_vec2(3.0f, 3.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _toggle$[ebp]
	mov	DWORD PTR [ecx+124], eax
	mov	DWORD PTR [ecx+128], edx

; 16585:     toggle->touch_padding   = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _toggle$[ebp]
	mov	DWORD PTR [ecx+132], eax
	mov	DWORD PTR [ecx+136], edx

; 16586:     toggle->border_color    = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _toggle$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 16587:     toggle->border          = 0.0f;

	mov	eax, DWORD PTR _toggle$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+144], xmm0

; 16588:     toggle->spacing         = 4;

	mov	eax, DWORD PTR _toggle$[ebp]
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [eax+140], xmm0

; 16589: 
; 16590:     /* selectable */
; 16591:     select = &style->selectable;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 760				; 000002f8H
	mov	DWORD PTR _select$[ebp], eax

; 16592:     nk_zero_struct(*select);

	push	192					; 000000c0H
	mov	eax, DWORD PTR _select$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 16593:     select->normal          = nk_style_item_color(table[NK_COLOR_SELECT]);

	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T55[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _select$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16594:     select->hover           = nk_style_item_color(table[NK_COLOR_SELECT]);

	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T56[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _select$[ebp]
	add	edx, 20					; 00000014H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16595:     select->pressed         = nk_style_item_color(table[NK_COLOR_SELECT]);

	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T57[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _select$[ebp]
	add	edx, 40					; 00000028H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16596:     select->normal_active   = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);

	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T58[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _select$[ebp]
	add	edx, 60					; 0000003cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16597:     select->hover_active    = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);

	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T59[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _select$[ebp]
	add	edx, 80					; 00000050H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16598:     select->pressed_active  = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);

	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T60[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _select$[ebp]
	add	edx, 100				; 00000064H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16599:     select->text_normal     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _select$[ebp]
	mov	DWORD PTR [ecx+120], eax

; 16600:     select->text_hover      = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _select$[ebp]
	mov	DWORD PTR [ecx+124], eax

; 16601:     select->text_pressed    = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _select$[ebp]
	mov	DWORD PTR [ecx+128], eax

; 16602:     select->text_normal_active  = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _select$[ebp]
	mov	DWORD PTR [ecx+132], eax

; 16603:     select->text_hover_active   = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _select$[ebp]
	mov	DWORD PTR [ecx+136], eax

; 16604:     select->text_pressed_active = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _select$[ebp]
	mov	DWORD PTR [ecx+140], eax

; 16605:     select->padding         = nk_vec2(2.0f,2.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _select$[ebp]
	mov	DWORD PTR [ecx+156], eax
	mov	DWORD PTR [ecx+160], edx

; 16606:     select->touch_padding   = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _select$[ebp]
	mov	DWORD PTR [ecx+164], eax
	mov	DWORD PTR [ecx+168], edx

; 16607:     select->userdata        = nk_handle_ptr(0);

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	mov	ecx, DWORD PTR _select$[ebp]
	mov	DWORD PTR [ecx+180], eax

; 16608:     select->rounding        = 0.0f;

	mov	eax, DWORD PTR _select$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+152], xmm0

; 16609:     select->draw_begin      = 0;

	mov	eax, DWORD PTR _select$[ebp]
	mov	DWORD PTR [eax+184], 0

; 16610:     select->draw_end        = 0;

	mov	eax, DWORD PTR _select$[ebp]
	mov	DWORD PTR [eax+188], 0

; 16611: 
; 16612:     /* slider */
; 16613:     slider = &style->slider;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 952				; 000003b8H
	mov	DWORD PTR _slider$[ebp], eax

; 16614:     nk_zero_struct(*slider);

	push	456					; 000001c8H
	mov	eax, DWORD PTR _slider$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 16615:     slider->normal          = nk_style_item_hide();

	lea	eax, DWORD PTR $T61[ebp]
	push	eax
	call	_nk_style_item_hide
	add	esp, 4
	mov	ecx, DWORD PTR _slider$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16616:     slider->hover           = nk_style_item_hide();

	lea	eax, DWORD PTR $T62[ebp]
	push	eax
	call	_nk_style_item_hide
	add	esp, 4
	mov	ecx, DWORD PTR _slider$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16617:     slider->active          = nk_style_item_hide();

	lea	eax, DWORD PTR $T63[ebp]
	push	eax
	call	_nk_style_item_hide
	add	esp, 4
	mov	ecx, DWORD PTR _slider$[ebp]
	add	ecx, 40					; 00000028H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16618:     slider->bar_normal      = table[NK_COLOR_SLIDER];

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _slider$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 16619:     slider->bar_hover       = table[NK_COLOR_SLIDER];

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _slider$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 16620:     slider->bar_active      = table[NK_COLOR_SLIDER];

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _slider$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 16621:     slider->bar_filled      = table[NK_COLOR_SLIDER_CURSOR];

	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _slider$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 16622:     slider->cursor_normal   = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR]);

	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T64[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _slider$[ebp]
	add	edx, 80					; 00000050H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16623:     slider->cursor_hover    = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_HOVER]);

	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T65[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _slider$[ebp]
	add	edx, 100				; 00000064H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16624:     slider->cursor_active   = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_ACTIVE]);

	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T66[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _slider$[ebp]
	add	edx, 120				; 00000078H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16625:     slider->inc_symbol      = NK_SYMBOL_TRIANGLE_RIGHT;

	mov	eax, DWORD PTR _slider$[ebp]
	mov	DWORD PTR [eax+436], 10			; 0000000aH

; 16626:     slider->dec_symbol      = NK_SYMBOL_TRIANGLE_LEFT;

	mov	eax, DWORD PTR _slider$[ebp]
	mov	DWORD PTR [eax+440], 9

; 16627:     slider->cursor_size     = nk_vec2(16,16);

	push	ecx
	movss	xmm0, DWORD PTR __real@41800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _slider$[ebp]
	mov	DWORD PTR [ecx+168], eax
	mov	DWORD PTR [ecx+172], edx

; 16628:     slider->padding         = nk_vec2(2,2);

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _slider$[ebp]
	mov	DWORD PTR [ecx+152], eax
	mov	DWORD PTR [ecx+156], edx

; 16629:     slider->spacing         = nk_vec2(2,2);

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _slider$[ebp]
	mov	DWORD PTR [ecx+160], eax
	mov	DWORD PTR [ecx+164], edx

; 16630:     slider->userdata        = nk_handle_ptr(0);

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	mov	ecx, DWORD PTR _slider$[ebp]
	mov	DWORD PTR [ecx+444], eax

; 16631:     slider->show_buttons    = nk_false;

	mov	eax, DWORD PTR _slider$[ebp]
	mov	DWORD PTR [eax+176], 0

; 16632:     slider->bar_height      = 8;

	mov	eax, DWORD PTR _slider$[ebp]
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [eax+148], xmm0

; 16633:     slider->rounding        = 0;

	mov	eax, DWORD PTR _slider$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+144], xmm0

; 16634:     slider->draw_begin      = 0;

	mov	eax, DWORD PTR _slider$[ebp]
	mov	DWORD PTR [eax+448], 0

; 16635:     slider->draw_end        = 0;

	mov	eax, DWORD PTR _slider$[ebp]
	mov	DWORD PTR [eax+452], 0

; 16636: 
; 16637:     /* slider buttons */
; 16638:     button = &style->slider.inc_button;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 1132				; 0000046cH
	mov	DWORD PTR _button$[ebp], eax

; 16639:     button->normal          = nk_style_item_color(nk_rgb(40,40,40));

	push	40					; 00000028H
	push	40					; 00000028H
	push	40					; 00000028H
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T67[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16640:     button->hover           = nk_style_item_color(nk_rgb(42,42,42));

	push	42					; 0000002aH
	push	42					; 0000002aH
	push	42					; 0000002aH
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T68[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16641:     button->active          = nk_style_item_color(nk_rgb(44,44,44));

	push	44					; 0000002cH
	push	44					; 0000002cH
	push	44					; 0000002cH
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T69[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	add	ecx, 40					; 00000028H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16642:     button->border_color    = nk_rgb(65,65,65);

	push	65					; 00000041H
	push	65					; 00000041H
	push	65					; 00000041H
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 16643:     button->text_background = nk_rgb(40,40,40);

	push	40					; 00000028H
	push	40					; 00000028H
	push	40					; 00000028H
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 16644:     button->text_normal     = nk_rgb(175,175,175);

	push	175					; 000000afH
	push	175					; 000000afH
	push	175					; 000000afH
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 16645:     button->text_hover      = nk_rgb(175,175,175);

	push	175					; 000000afH
	push	175					; 000000afH
	push	175					; 000000afH
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 16646:     button->text_active     = nk_rgb(175,175,175);

	push	175					; 000000afH
	push	175					; 000000afH
	push	175					; 000000afH
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 16647:     button->padding         = nk_vec2(8.0f,8.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+92], eax
	mov	DWORD PTR [ecx+96], edx

; 16648:     button->touch_padding   = nk_vec2(0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+108], eax
	mov	DWORD PTR [ecx+112], edx

; 16649:     button->userdata        = nk_handle_ptr(0);

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 16650:     button->text_alignment  = NK_TEXT_CENTERED;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+80], 18			; 00000012H

; 16651:     button->border          = 1.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+84], xmm0

; 16652:     button->rounding        = 0.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+88], xmm0

; 16653:     button->draw_begin      = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+120], 0

; 16654:     button->draw_end        = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+124], 0

; 16655:     style->slider.dec_button = style->slider.inc_button;

	mov	esi, DWORD PTR _style$[ebp]
	add	esi, 1132				; 0000046cH
	mov	edi, DWORD PTR _style$[ebp]
	add	edi, 1260				; 000004ecH
	mov	ecx, 32					; 00000020H
	rep movsd

; 16656: 
; 16657:     /* progressbar */
; 16658:     prog = &style->progress;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 1408				; 00000580H
	mov	DWORD PTR _prog$[ebp], eax

; 16659:     nk_zero_struct(*prog);

	push	164					; 000000a4H
	mov	eax, DWORD PTR _prog$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 16660:     prog->normal            = nk_style_item_color(table[NK_COLOR_SLIDER]);

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T70[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _prog$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16661:     prog->hover             = nk_style_item_color(table[NK_COLOR_SLIDER]);

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T71[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _prog$[ebp]
	add	edx, 20					; 00000014H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16662:     prog->active            = nk_style_item_color(table[NK_COLOR_SLIDER]);

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T72[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _prog$[ebp]
	add	edx, 40					; 00000028H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16663:     prog->cursor_normal     = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR]);

	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T73[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _prog$[ebp]
	add	edx, 64					; 00000040H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16664:     prog->cursor_hover      = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_HOVER]);

	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T74[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _prog$[ebp]
	add	edx, 84					; 00000054H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16665:     prog->cursor_active     = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_ACTIVE]);

	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T75[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _prog$[ebp]
	add	edx, 104				; 00000068H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16666:     prog->border_color      = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _prog$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 16667:     prog->cursor_border_color = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _prog$[ebp]
	mov	DWORD PTR [ecx+124], eax

; 16668:     prog->userdata          = nk_handle_ptr(0);

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	mov	ecx, DWORD PTR _prog$[ebp]
	mov	DWORD PTR [ecx+152], eax

; 16669:     prog->padding           = nk_vec2(4,4);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _prog$[ebp]
	mov	DWORD PTR [ecx+144], eax
	mov	DWORD PTR [ecx+148], edx

; 16670:     prog->rounding          = 0;

	mov	eax, DWORD PTR _prog$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+128], xmm0

; 16671:     prog->border            = 0;

	mov	eax, DWORD PTR _prog$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+132], xmm0

; 16672:     prog->cursor_rounding   = 0;

	mov	eax, DWORD PTR _prog$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+140], xmm0

; 16673:     prog->cursor_border     = 0;

	mov	eax, DWORD PTR _prog$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+136], xmm0

; 16674:     prog->draw_begin        = 0;

	mov	eax, DWORD PTR _prog$[ebp]
	mov	DWORD PTR [eax+156], 0

; 16675:     prog->draw_end          = 0;

	mov	eax, DWORD PTR _prog$[ebp]
	mov	DWORD PTR [eax+160], 0

; 16676: 
; 16677:     /* scrollbars */
; 16678:     scroll = &style->scrollh;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 3132				; 00000c3cH
	mov	DWORD PTR _scroll$[ebp], eax

; 16679:     nk_zero_struct(*scroll);

	push	432					; 000001b0H
	mov	eax, DWORD PTR _scroll$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 16680:     scroll->normal          = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);

	mov	eax, 4
	imul	ecx, eax, 23
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T76[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _scroll$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16681:     scroll->hover           = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);

	mov	eax, 4
	imul	ecx, eax, 23
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T77[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _scroll$[ebp]
	add	edx, 20					; 00000014H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16682:     scroll->active          = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);

	mov	eax, 4
	imul	ecx, eax, 23
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T78[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _scroll$[ebp]
	add	edx, 40					; 00000028H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16683:     scroll->cursor_normal   = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR]);

	mov	eax, 4
	imul	ecx, eax, 24
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T79[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _scroll$[ebp]
	add	edx, 64					; 00000040H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16684:     scroll->cursor_hover    = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR_HOVER]);

	mov	eax, 4
	imul	ecx, eax, 25
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T80[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _scroll$[ebp]
	add	edx, 84					; 00000054H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16685:     scroll->cursor_active   = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR_ACTIVE]);

	mov	eax, 4
	imul	ecx, eax, 26
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T81[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _scroll$[ebp]
	add	edx, 104				; 00000068H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16686:     scroll->dec_symbol      = NK_SYMBOL_CIRCLE_SOLID;

	mov	eax, DWORD PTR _scroll$[ebp]
	mov	DWORD PTR [eax+416], 3

; 16687:     scroll->inc_symbol      = NK_SYMBOL_CIRCLE_SOLID;

	mov	eax, DWORD PTR _scroll$[ebp]
	mov	DWORD PTR [eax+412], 3

; 16688:     scroll->userdata        = nk_handle_ptr(0);

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	mov	ecx, DWORD PTR _scroll$[ebp]
	mov	DWORD PTR [ecx+420], eax

; 16689:     scroll->border_color    = table[NK_COLOR_SCROLLBAR];

	mov	eax, 4
	imul	ecx, eax, 23
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _scroll$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 16690:     scroll->cursor_border_color = table[NK_COLOR_SCROLLBAR];

	mov	eax, 4
	imul	ecx, eax, 23
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _scroll$[ebp]
	mov	DWORD PTR [ecx+124], eax

; 16691:     scroll->padding         = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _scroll$[ebp]
	mov	DWORD PTR [ecx+144], eax
	mov	DWORD PTR [ecx+148], edx

; 16692:     scroll->show_buttons    = nk_false;

	mov	eax, DWORD PTR _scroll$[ebp]
	mov	DWORD PTR [eax+152], 0

; 16693:     scroll->border          = 0;

	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+128], xmm0

; 16694:     scroll->rounding        = 0;

	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+132], xmm0

; 16695:     scroll->border_cursor   = 0;

	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+136], xmm0

; 16696:     scroll->rounding_cursor = 0;

	mov	eax, DWORD PTR _scroll$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+140], xmm0

; 16697:     scroll->draw_begin      = 0;

	mov	eax, DWORD PTR _scroll$[ebp]
	mov	DWORD PTR [eax+424], 0

; 16698:     scroll->draw_end        = 0;

	mov	eax, DWORD PTR _scroll$[ebp]
	mov	DWORD PTR [eax+428], 0

; 16699:     style->scrollv = style->scrollh;

	mov	esi, DWORD PTR _style$[ebp]
	add	esi, 3132				; 00000c3cH
	mov	edi, DWORD PTR _style$[ebp]
	add	edi, 3564				; 00000decH
	mov	ecx, 108				; 0000006cH
	rep movsd

; 16700: 
; 16701:     /* scrollbars buttons */
; 16702:     button = &style->scrollh.inc_button;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 3288				; 00000cd8H
	mov	DWORD PTR _button$[ebp], eax

; 16703:     button->normal          = nk_style_item_color(nk_rgb(40,40,40));

	push	40					; 00000028H
	push	40					; 00000028H
	push	40					; 00000028H
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T82[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16704:     button->hover           = nk_style_item_color(nk_rgb(42,42,42));

	push	42					; 0000002aH
	push	42					; 0000002aH
	push	42					; 0000002aH
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T83[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16705:     button->active          = nk_style_item_color(nk_rgb(44,44,44));

	push	44					; 0000002cH
	push	44					; 0000002cH
	push	44					; 0000002cH
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T84[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	add	ecx, 40					; 00000028H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16706:     button->border_color    = nk_rgb(65,65,65);

	push	65					; 00000041H
	push	65					; 00000041H
	push	65					; 00000041H
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 16707:     button->text_background = nk_rgb(40,40,40);

	push	40					; 00000028H
	push	40					; 00000028H
	push	40					; 00000028H
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 16708:     button->text_normal     = nk_rgb(175,175,175);

	push	175					; 000000afH
	push	175					; 000000afH
	push	175					; 000000afH
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 16709:     button->text_hover      = nk_rgb(175,175,175);

	push	175					; 000000afH
	push	175					; 000000afH
	push	175					; 000000afH
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 16710:     button->text_active     = nk_rgb(175,175,175);

	push	175					; 000000afH
	push	175					; 000000afH
	push	175					; 000000afH
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 16711:     button->padding         = nk_vec2(4.0f,4.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+92], eax
	mov	DWORD PTR [ecx+96], edx

; 16712:     button->touch_padding   = nk_vec2(0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+108], eax
	mov	DWORD PTR [ecx+112], edx

; 16713:     button->userdata        = nk_handle_ptr(0);

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 16714:     button->text_alignment  = NK_TEXT_CENTERED;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+80], 18			; 00000012H

; 16715:     button->border          = 1.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+84], xmm0

; 16716:     button->rounding        = 0.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+88], xmm0

; 16717:     button->draw_begin      = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+120], 0

; 16718:     button->draw_end        = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+124], 0

; 16719:     style->scrollh.dec_button = style->scrollh.inc_button;

	mov	esi, DWORD PTR _style$[ebp]
	add	esi, 3288				; 00000cd8H
	mov	edi, DWORD PTR _style$[ebp]
	add	edi, 3416				; 00000d58H
	mov	ecx, 32					; 00000020H
	rep movsd

; 16720:     style->scrollv.inc_button = style->scrollh.inc_button;

	mov	esi, DWORD PTR _style$[ebp]
	add	esi, 3288				; 00000cd8H
	mov	edi, DWORD PTR _style$[ebp]
	add	edi, 3720				; 00000e88H
	mov	ecx, 32					; 00000020H
	rep movsd

; 16721:     style->scrollv.dec_button = style->scrollh.inc_button;

	mov	esi, DWORD PTR _style$[ebp]
	add	esi, 3288				; 00000cd8H
	mov	edi, DWORD PTR _style$[ebp]
	add	edi, 3848				; 00000f08H
	mov	ecx, 32					; 00000020H
	rep movsd

; 16722: 
; 16723:     /* edit */
; 16724:     edit = &style->edit;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 2512				; 000009d0H
	mov	DWORD PTR _edit$[ebp], eax

; 16725:     nk_zero_struct(*edit);

	push	572					; 0000023cH
	mov	eax, DWORD PTR _edit$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 16726:     edit->normal            = nk_style_item_color(table[NK_COLOR_EDIT]);

	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T85[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16727:     edit->hover             = nk_style_item_color(table[NK_COLOR_EDIT]);

	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T86[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _edit$[ebp]
	add	edx, 20					; 00000014H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16728:     edit->active            = nk_style_item_color(table[NK_COLOR_EDIT]);

	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _edit$[ebp]
	add	edx, 40					; 00000028H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16729:     edit->cursor_normal     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+496], eax

; 16730:     edit->cursor_hover      = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+500], eax

; 16731:     edit->cursor_text_normal= table[NK_COLOR_EDIT];

	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+504], eax

; 16732:     edit->cursor_text_hover = table[NK_COLOR_EDIT];

	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+508], eax

; 16733:     edit->border_color      = table[NK_COLOR_BORDER];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 16734:     edit->text_normal       = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+512], eax

; 16735:     edit->text_hover        = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+516], eax

; 16736:     edit->text_active       = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+520], eax

; 16737:     edit->selected_normal   = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+524], eax

; 16738:     edit->selected_hover    = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+528], eax

; 16739:     edit->selected_text_normal  = table[NK_COLOR_EDIT];

	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+532], eax

; 16740:     edit->selected_text_hover   = table[NK_COLOR_EDIT];

	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+536], eax

; 16741:     edit->scrollbar_size    = nk_vec2(10,10);

	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+552], eax
	mov	DWORD PTR [ecx+556], edx

; 16742:     edit->scrollbar         = style->scrollv;

	mov	esi, DWORD PTR _style$[ebp]
	add	esi, 3564				; 00000decH
	mov	edi, DWORD PTR _edit$[ebp]
	add	edi, 64					; 00000040H
	mov	ecx, 108				; 0000006cH
	rep movsd

; 16743:     edit->padding           = nk_vec2(4,4);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+560], eax
	mov	DWORD PTR [ecx+564], edx

; 16744:     edit->row_padding       = 2;

	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [eax+568], xmm0

; 16745:     edit->cursor_size       = 4;

	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [eax+548], xmm0

; 16746:     edit->border            = 1;

	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+540], xmm0

; 16747:     edit->rounding          = 0;

	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+544], xmm0

; 16748: 
; 16749:     /* property */
; 16750:     property = &style->property;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 1572				; 00000624H
	mov	DWORD PTR _property$[ebp], eax

; 16751:     nk_zero_struct(*property);

	push	940					; 000003acH
	mov	eax, DWORD PTR _property$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 16752:     property->normal        = nk_style_item_color(table[NK_COLOR_PROPERTY]);

	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _property$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16753:     property->hover         = nk_style_item_color(table[NK_COLOR_PROPERTY]);

	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _property$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16754:     property->active        = nk_style_item_color(table[NK_COLOR_PROPERTY]);

	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _property$[ebp]
	add	ecx, 40					; 00000028H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16755:     property->border_color  = table[NK_COLOR_BORDER];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _property$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 16756:     property->label_normal  = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _property$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 16757:     property->label_hover   = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _property$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 16758:     property->label_active  = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _property$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 16759:     property->sym_left      = NK_SYMBOL_TRIANGLE_LEFT;

	mov	eax, DWORD PTR _property$[ebp]
	mov	DWORD PTR [eax+76], 9

; 16760:     property->sym_right     = NK_SYMBOL_TRIANGLE_RIGHT;

	mov	eax, DWORD PTR _property$[ebp]
	mov	DWORD PTR [eax+80], 10			; 0000000aH

; 16761:     property->userdata      = nk_handle_ptr(0);

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	mov	ecx, DWORD PTR _property$[ebp]
	mov	DWORD PTR [ecx+928], eax

; 16762:     property->padding       = nk_vec2(4,4);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _property$[ebp]
	mov	DWORD PTR [ecx+92], eax
	mov	DWORD PTR [ecx+96], edx

; 16763:     property->border        = 1;

	mov	eax, DWORD PTR _property$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+84], xmm0

; 16764:     property->rounding      = 10;

	mov	eax, DWORD PTR _property$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [eax+88], xmm0

; 16765:     property->draw_begin    = 0;

	mov	eax, DWORD PTR _property$[ebp]
	mov	DWORD PTR [eax+932], 0

; 16766:     property->draw_end      = 0;

	mov	eax, DWORD PTR _property$[ebp]
	mov	DWORD PTR [eax+936], 0

; 16767: 
; 16768:     /* property buttons */
; 16769:     button = &style->property.dec_button;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 2372				; 00000944H
	mov	DWORD PTR _button$[ebp], eax

; 16770:     nk_zero_struct(*button);

	push	128					; 00000080H
	mov	eax, DWORD PTR _button$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 16771:     button->normal          = nk_style_item_color(table[NK_COLOR_PROPERTY]);

	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16772:     button->hover           = nk_style_item_color(table[NK_COLOR_PROPERTY]);

	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16773:     button->active          = nk_style_item_color(table[NK_COLOR_PROPERTY]);

	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	add	ecx, 40					; 00000028H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16774:     button->border_color    = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 16775:     button->text_background = table[NK_COLOR_PROPERTY];

	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+64], edx

; 16776:     button->text_normal     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 16777:     button->text_hover      = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 16778:     button->text_active     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 16779:     button->padding         = nk_vec2(0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+92], eax
	mov	DWORD PTR [ecx+96], edx

; 16780:     button->touch_padding   = nk_vec2(0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+108], eax
	mov	DWORD PTR [ecx+112], edx

; 16781:     button->userdata        = nk_handle_ptr(0);

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 16782:     button->text_alignment  = NK_TEXT_CENTERED;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+80], 18			; 00000012H

; 16783:     button->border          = 0.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+84], xmm0

; 16784:     button->rounding        = 0.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+88], xmm0

; 16785:     button->draw_begin      = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+120], 0

; 16786:     button->draw_end        = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+124], 0

; 16787:     style->property.inc_button = style->property.dec_button;

	mov	esi, DWORD PTR _style$[ebp]
	add	esi, 2372				; 00000944H
	mov	edi, DWORD PTR _style$[ebp]
	add	edi, 2244				; 000008c4H
	mov	ecx, 32					; 00000020H
	rep movsd

; 16788: 
; 16789:     /* property edit */
; 16790:     edit = &style->property.edit;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 1672				; 00000688H
	mov	DWORD PTR _edit$[ebp], eax

; 16791:     nk_zero_struct(*edit);

	push	572					; 0000023cH
	mov	eax, DWORD PTR _edit$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 16792:     edit->normal            = nk_style_item_color(table[NK_COLOR_PROPERTY]);

	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T8[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16793:     edit->hover             = nk_style_item_color(table[NK_COLOR_PROPERTY]);

	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T9[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _edit$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16794:     edit->active            = nk_style_item_color(table[NK_COLOR_PROPERTY]);

	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T10[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _edit$[ebp]
	add	ecx, 40					; 00000028H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16795:     edit->border_color      = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 16796:     edit->cursor_normal     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+496], eax

; 16797:     edit->cursor_hover      = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+500], eax

; 16798:     edit->cursor_text_normal= table[NK_COLOR_EDIT];

	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+504], eax

; 16799:     edit->cursor_text_hover = table[NK_COLOR_EDIT];

	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+508], eax

; 16800:     edit->text_normal       = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+512], eax

; 16801:     edit->text_hover        = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+516], eax

; 16802:     edit->text_active       = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+520], eax

; 16803:     edit->selected_normal   = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+524], eax

; 16804:     edit->selected_hover    = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+528], eax

; 16805:     edit->selected_text_normal  = table[NK_COLOR_EDIT];

	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+532], eax

; 16806:     edit->selected_text_hover   = table[NK_COLOR_EDIT];

	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+536], eax

; 16807:     edit->padding           = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+560], eax
	mov	DWORD PTR [ecx+564], edx

; 16808:     edit->cursor_size       = 8;

	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [eax+548], xmm0

; 16809:     edit->border            = 0;

	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+540], xmm0

; 16810:     edit->rounding          = 0;

	mov	eax, DWORD PTR _edit$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+544], xmm0

; 16811: 
; 16812:     /* chart */
; 16813:     chart = &style->chart;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 3084				; 00000c0cH
	mov	DWORD PTR _chart$[ebp], eax

; 16814:     nk_zero_struct(*chart);

	push	48					; 00000030H
	mov	eax, DWORD PTR _chart$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 16815:     chart->background       = nk_style_item_color(table[NK_COLOR_CHART]);

	mov	eax, 4
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T11[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _chart$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16816:     chart->border_color     = table[NK_COLOR_BORDER];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _chart$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 16817:     chart->selected_color   = table[NK_COLOR_CHART_COLOR_HIGHLIGHT];

	mov	eax, 4
	imul	ecx, eax, 22
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _chart$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 16818:     chart->color            = table[NK_COLOR_CHART_COLOR];

	mov	eax, 4
	imul	ecx, eax, 21
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _chart$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 16819:     chart->padding          = nk_vec2(4,4);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _chart$[ebp]
	mov	DWORD PTR [ecx+40], eax
	mov	DWORD PTR [ecx+44], edx

; 16820:     chart->border           = 0;

	mov	eax, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+32], xmm0

; 16821:     chart->rounding         = 0;

	mov	eax, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+36], xmm0

; 16822: 
; 16823:     /* combo */
; 16824:     combo = &style->combo;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4572				; 000011dcH
	mov	DWORD PTR _combo$[ebp], eax

; 16825:     combo->normal           = nk_style_item_color(table[NK_COLOR_COMBO]);

	mov	eax, 4
	imul	ecx, eax, 19
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T12[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _combo$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16826:     combo->hover            = nk_style_item_color(table[NK_COLOR_COMBO]);

	mov	eax, 4
	imul	ecx, eax, 19
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T13[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _combo$[ebp]
	add	edx, 20					; 00000014H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16827:     combo->active           = nk_style_item_color(table[NK_COLOR_COMBO]);

	mov	eax, 4
	imul	ecx, eax, 19
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T14[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _combo$[ebp]
	add	edx, 40					; 00000028H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16828:     combo->border_color     = table[NK_COLOR_BORDER];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _combo$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 16829:     combo->label_normal     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _combo$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 16830:     combo->label_hover      = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _combo$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 16831:     combo->label_active     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _combo$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 16832:     combo->sym_normal       = NK_SYMBOL_TRIANGLE_DOWN;

	mov	eax, DWORD PTR _combo$[ebp]
	mov	DWORD PTR [eax+216], 8

; 16833:     combo->sym_hover        = NK_SYMBOL_TRIANGLE_DOWN;

	mov	eax, DWORD PTR _combo$[ebp]
	mov	DWORD PTR [eax+220], 8

; 16834:     combo->sym_active       = NK_SYMBOL_TRIANGLE_DOWN;

	mov	eax, DWORD PTR _combo$[ebp]
	mov	DWORD PTR [eax+224], 8

; 16835:     combo->content_padding  = nk_vec2(4,4);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _combo$[ebp]
	mov	DWORD PTR [ecx+236], eax
	mov	DWORD PTR [ecx+240], edx

; 16836:     combo->button_padding   = nk_vec2(0,4);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _combo$[ebp]
	mov	DWORD PTR [ecx+244], eax
	mov	DWORD PTR [ecx+248], edx

; 16837:     combo->spacing          = nk_vec2(4,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _combo$[ebp]
	mov	DWORD PTR [ecx+252], eax
	mov	DWORD PTR [ecx+256], edx

; 16838:     combo->border           = 1;

	mov	eax, DWORD PTR _combo$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+228], xmm0

; 16839:     combo->rounding         = 0;

	mov	eax, DWORD PTR _combo$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+232], xmm0

; 16840: 
; 16841:     /* combo button */
; 16842:     button = &style->combo.button;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4660				; 00001234H
	mov	DWORD PTR _button$[ebp], eax

; 16843:     nk_zero_struct(*button);

	push	128					; 00000080H
	mov	eax, DWORD PTR _button$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 16844:     button->normal          = nk_style_item_color(table[NK_COLOR_COMBO]);

	mov	eax, 4
	imul	ecx, eax, 19
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T15[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _button$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16845:     button->hover           = nk_style_item_color(table[NK_COLOR_COMBO]);

	mov	eax, 4
	imul	ecx, eax, 19
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T16[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _button$[ebp]
	add	edx, 20					; 00000014H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16846:     button->active          = nk_style_item_color(table[NK_COLOR_COMBO]);

	mov	eax, 4
	imul	ecx, eax, 19
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T17[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _button$[ebp]
	add	edx, 40					; 00000028H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16847:     button->border_color    = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 16848:     button->text_background = table[NK_COLOR_COMBO];

	mov	eax, 4
	imul	ecx, eax, 19
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 16849:     button->text_normal     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 16850:     button->text_hover      = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 16851:     button->text_active     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 16852:     button->padding         = nk_vec2(2.0f,2.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+92], eax
	mov	DWORD PTR [ecx+96], edx

; 16853:     button->touch_padding   = nk_vec2(0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+108], eax
	mov	DWORD PTR [ecx+112], edx

; 16854:     button->userdata        = nk_handle_ptr(0);

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 16855:     button->text_alignment  = NK_TEXT_CENTERED;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+80], 18			; 00000012H

; 16856:     button->border          = 0.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+84], xmm0

; 16857:     button->rounding        = 0.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+88], xmm0

; 16858:     button->draw_begin      = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+120], 0

; 16859:     button->draw_end        = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+124], 0

; 16860: 
; 16861:     /* tab */
; 16862:     tab = &style->tab;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 3996				; 00000f9cH
	mov	DWORD PTR _tab$[ebp], eax

; 16863:     tab->background         = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);

	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T18[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _tab$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16864:     tab->border_color       = table[NK_COLOR_BORDER];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 16865:     tab->text               = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 16866:     tab->sym_minimize       = NK_SYMBOL_TRIANGLE_RIGHT;

	mov	eax, DWORD PTR _tab$[ebp]
	mov	DWORD PTR [eax+540], 10			; 0000000aH

; 16867:     tab->sym_maximize       = NK_SYMBOL_TRIANGLE_DOWN;

	mov	eax, DWORD PTR _tab$[ebp]
	mov	DWORD PTR [eax+544], 8

; 16868:     tab->padding            = nk_vec2(4,4);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	DWORD PTR [ecx+560], eax
	mov	DWORD PTR [ecx+564], edx

; 16869:     tab->spacing            = nk_vec2(4,4);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	DWORD PTR [ecx+568], eax
	mov	DWORD PTR [ecx+572], edx

; 16870:     tab->indent             = 10.0f;

	mov	eax, DWORD PTR _tab$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [eax+556], xmm0

; 16871:     tab->border             = 1;

	mov	eax, DWORD PTR _tab$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+548], xmm0

; 16872:     tab->rounding           = 0;

	mov	eax, DWORD PTR _tab$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+552], xmm0

; 16873: 
; 16874:     /* tab button */
; 16875:     button = &style->tab.tab_minimize_button;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4152				; 00001038H
	mov	DWORD PTR _button$[ebp], eax

; 16876:     nk_zero_struct(*button);

	push	128					; 00000080H
	mov	eax, DWORD PTR _button$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 16877:     button->normal          = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);

	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T19[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _button$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16878:     button->hover           = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);

	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T20[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _button$[ebp]
	add	edx, 20					; 00000014H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16879:     button->active          = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);

	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T21[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _button$[ebp]
	add	edx, 40					; 00000028H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16880:     button->border_color    = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 16881:     button->text_background = table[NK_COLOR_TAB_HEADER];

	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 16882:     button->text_normal     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 16883:     button->text_hover      = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 16884:     button->text_active     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 16885:     button->padding         = nk_vec2(2.0f,2.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+92], eax
	mov	DWORD PTR [ecx+96], edx

; 16886:     button->touch_padding   = nk_vec2(0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+108], eax
	mov	DWORD PTR [ecx+112], edx

; 16887:     button->userdata        = nk_handle_ptr(0);

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 16888:     button->text_alignment  = NK_TEXT_CENTERED;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+80], 18			; 00000012H

; 16889:     button->border          = 0.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+84], xmm0

; 16890:     button->rounding        = 0.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+88], xmm0

; 16891:     button->draw_begin      = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+120], 0

; 16892:     button->draw_end        = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+124], 0

; 16893:     style->tab.tab_maximize_button =*button;

	mov	edi, DWORD PTR _style$[ebp]
	add	edi, 4024				; 00000fb8H
	mov	ecx, 32					; 00000020H
	mov	esi, DWORD PTR _button$[ebp]
	rep movsd

; 16894: 
; 16895:     /* node button */
; 16896:     button = &style->tab.node_minimize_button;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4408				; 00001138H
	mov	DWORD PTR _button$[ebp], eax

; 16897:     nk_zero_struct(*button);

	push	128					; 00000080H
	mov	eax, DWORD PTR _button$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 16898:     button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T22[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16899:     button->hover           = nk_style_item_color(table[NK_COLOR_WINDOW]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T23[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16900:     button->active          = nk_style_item_color(table[NK_COLOR_WINDOW]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T24[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	add	ecx, 40					; 00000028H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16901:     button->border_color    = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 16902:     button->text_background = table[NK_COLOR_TAB_HEADER];

	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 16903:     button->text_normal     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 16904:     button->text_hover      = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 16905:     button->text_active     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 16906:     button->padding         = nk_vec2(2.0f,2.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+92], eax
	mov	DWORD PTR [ecx+96], edx

; 16907:     button->touch_padding   = nk_vec2(0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+108], eax
	mov	DWORD PTR [ecx+112], edx

; 16908:     button->userdata        = nk_handle_ptr(0);

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 16909:     button->text_alignment  = NK_TEXT_CENTERED;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+80], 18			; 00000012H

; 16910:     button->border          = 0.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+84], xmm0

; 16911:     button->rounding        = 0.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+88], xmm0

; 16912:     button->draw_begin      = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+120], 0

; 16913:     button->draw_end        = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+124], 0

; 16914:     style->tab.node_maximize_button =*button;

	mov	edi, DWORD PTR _style$[ebp]
	add	edi, 4280				; 000010b8H
	mov	ecx, 32					; 00000020H
	mov	esi, DWORD PTR _button$[ebp]
	rep movsd

; 16915: 
; 16916:     /* window header */
; 16917:     win = &style->window;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4832				; 000012e0H
	mov	DWORD PTR _win$[ebp], eax

; 16918:     win->header.align = NK_HEADER_RIGHT;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+340], 1

; 16919:     win->header.close_symbol = NK_SYMBOL_X;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+316], 1

; 16920:     win->header.minimize_symbol = NK_SYMBOL_MINUS;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+320], 12			; 0000000cH

; 16921:     win->header.maximize_symbol = NK_SYMBOL_PLUS;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+324], 11			; 0000000bH

; 16922:     win->header.normal = nk_style_item_color(table[NK_COLOR_HEADER]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T25[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16923:     win->header.hover = nk_style_item_color(table[NK_COLOR_HEADER]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T26[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16924:     win->header.active = nk_style_item_color(table[NK_COLOR_HEADER]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T27[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 40					; 00000028H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16925:     win->header.label_normal = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+328], eax

; 16926:     win->header.label_hover = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+332], eax

; 16927:     win->header.label_active = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+336], eax

; 16928:     win->header.label_padding = nk_vec2(4,4);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+352], eax
	mov	DWORD PTR [ecx+356], edx

; 16929:     win->header.padding = nk_vec2(4,4);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+344], eax
	mov	DWORD PTR [ecx+348], edx

; 16930:     win->header.spacing = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+360], eax
	mov	DWORD PTR [ecx+364], edx

; 16931: 
; 16932:     /* window header close button */
; 16933:     button = &style->window.header.close_button;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4892				; 0000131cH
	mov	DWORD PTR _button$[ebp], eax

; 16934:     nk_zero_struct(*button);

	push	128					; 00000080H
	mov	eax, DWORD PTR _button$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 16935:     button->normal          = nk_style_item_color(table[NK_COLOR_HEADER]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T28[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16936:     button->hover           = nk_style_item_color(table[NK_COLOR_HEADER]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T29[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16937:     button->active          = nk_style_item_color(table[NK_COLOR_HEADER]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T30[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	add	ecx, 40					; 00000028H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16938:     button->border_color    = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 16939:     button->text_background = table[NK_COLOR_HEADER];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+64], edx

; 16940:     button->text_normal     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 16941:     button->text_hover      = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 16942:     button->text_active     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 16943:     button->padding         = nk_vec2(0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+92], eax
	mov	DWORD PTR [ecx+96], edx

; 16944:     button->touch_padding   = nk_vec2(0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+108], eax
	mov	DWORD PTR [ecx+112], edx

; 16945:     button->userdata        = nk_handle_ptr(0);

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 16946:     button->text_alignment  = NK_TEXT_CENTERED;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+80], 18			; 00000012H

; 16947:     button->border          = 0.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+84], xmm0

; 16948:     button->rounding        = 0.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+88], xmm0

; 16949:     button->draw_begin      = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+120], 0

; 16950:     button->draw_end        = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+124], 0

; 16951: 
; 16952:     /* window header minimize button */
; 16953:     button = &style->window.header.minimize_button;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 5020				; 0000139cH
	mov	DWORD PTR _button$[ebp], eax

; 16954:     nk_zero_struct(*button);

	push	128					; 00000080H
	mov	eax, DWORD PTR _button$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 16955:     button->normal          = nk_style_item_color(table[NK_COLOR_HEADER]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T31[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16956:     button->hover           = nk_style_item_color(table[NK_COLOR_HEADER]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T32[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16957:     button->active          = nk_style_item_color(table[NK_COLOR_HEADER]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T33[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	add	ecx, 40					; 00000028H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16958:     button->border_color    = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 16959:     button->text_background = table[NK_COLOR_HEADER];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+64], edx

; 16960:     button->text_normal     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 16961:     button->text_hover      = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 16962:     button->text_active     = table[NK_COLOR_TEXT];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 16963:     button->padding         = nk_vec2(0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+92], eax
	mov	DWORD PTR [ecx+96], edx

; 16964:     button->touch_padding   = nk_vec2(0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+108], eax
	mov	DWORD PTR [ecx+112], edx

; 16965:     button->userdata        = nk_handle_ptr(0);

	push	0
	call	_nk_handle_ptr
	add	esp, 4
	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 16966:     button->text_alignment  = NK_TEXT_CENTERED;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+80], 18			; 00000012H

; 16967:     button->border          = 0.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+84], xmm0

; 16968:     button->rounding        = 0.0f;

	mov	eax, DWORD PTR _button$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+88], xmm0

; 16969:     button->draw_begin      = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+120], 0

; 16970:     button->draw_end        = 0;

	mov	eax, DWORD PTR _button$[ebp]
	mov	DWORD PTR [eax+124], 0

; 16971: 
; 16972:     /* window */
; 16973:     win->background = table[NK_COLOR_WINDOW];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+388], edx

; 16974:     win->fixed_background = nk_style_item_color(table[NK_COLOR_WINDOW]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	lea	eax, DWORD PTR $T34[ebp]
	push	eax
	call	_nk_style_item_color
	add	esp, 8
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 368				; 00000170H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 16975:     win->border_color = table[NK_COLOR_BORDER];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+392], eax

; 16976:     win->popup_border_color = table[NK_COLOR_BORDER];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+396], eax

; 16977:     win->combo_border_color = table[NK_COLOR_BORDER];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+400], eax

; 16978:     win->contextual_border_color = table[NK_COLOR_BORDER];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+404], eax

; 16979:     win->menu_border_color = table[NK_COLOR_BORDER];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+408], eax

; 16980:     win->group_border_color = table[NK_COLOR_BORDER];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+412], eax

; 16981:     win->tooltip_border_color = table[NK_COLOR_BORDER];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+416], eax

; 16982:     win->scaler = nk_style_item_color(table[NK_COLOR_TEXT]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	lea	ecx, DWORD PTR $T35[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 420				; 000001a4H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 16983: 
; 16984:     win->rounding = 0.0f;

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+472], xmm0

; 16985:     win->spacing = nk_vec2(4,4);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+476], eax
	mov	DWORD PTR [ecx+480], edx

; 16986:     win->scrollbar_size = nk_vec2(10,10);

	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+484], eax
	mov	DWORD PTR [ecx+488], edx

; 16987:     win->min_size = nk_vec2(64,64);

	push	ecx
	movss	xmm0, DWORD PTR __real@42800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+492], eax
	mov	DWORD PTR [ecx+496], edx

; 16988: 
; 16989:     win->combo_border = 1.0f;

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+444], xmm0

; 16990:     win->contextual_border = 1.0f;

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+448], xmm0

; 16991:     win->menu_border = 1.0f;

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+452], xmm0

; 16992:     win->group_border = 1.0f;

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+456], xmm0

; 16993:     win->tooltip_border = 1.0f;

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+460], xmm0

; 16994:     win->popup_border = 1.0f;

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+464], xmm0

; 16995:     win->border = 2.0f;

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [eax+440], xmm0

; 16996:     win->min_row_height_padding = 8;

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [eax+468], xmm0

; 16997: 
; 16998:     win->padding = nk_vec2(4,4);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+500], eax
	mov	DWORD PTR [ecx+504], edx

; 16999:     win->group_padding = nk_vec2(4,4);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+508], eax
	mov	DWORD PTR [ecx+512], edx

; 17000:     win->popup_padding = nk_vec2(4,4);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+516], eax
	mov	DWORD PTR [ecx+520], edx

; 17001:     win->combo_padding = nk_vec2(4,4);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+524], eax
	mov	DWORD PTR [ecx+528], edx

; 17002:     win->contextual_padding = nk_vec2(4,4);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+532], eax
	mov	DWORD PTR [ecx+536], edx

; 17003:     win->menu_padding = nk_vec2(4,4);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+540], eax
	mov	DWORD PTR [ecx+544], edx

; 17004:     win->tooltip_padding = nk_vec2(4,4);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+548], eax
	mov	DWORD PTR [ecx+552], edx
$LN2@nk_style_f:

; 17005: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 2776				; 00000ad8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_from_table ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_style_default
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_style_default PROC					; COMDAT

; 16407: NK_API void nk_style_default(struct nk_context *ctx){nk_style_from_table(ctx, 0);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_style_from_table
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_style_default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_menu_end
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_menu_end PROC					; COMDAT

; 23633: {nk_contextual_end(ctx);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_contextual_end
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_menu_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_menu_close
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_menu_close PROC					; COMDAT

; 23629: {nk_contextual_close(ctx);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_contextual_close
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_menu_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_menu_item_symbol_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_sym$ = 12						; size = 4
_label$ = 16						; size = 4
_align$ = 20						; size = 4
_nk_menu_item_symbol_label PROC				; COMDAT

; 23626: {return nk_contextual_item_symbol_label(ctx, sym, label, align);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sym$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_contextual_item_symbol_label
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_menu_item_symbol_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_menu_item_symbol_text
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_sym$ = 12						; size = 4
_text$ = 16						; size = 4
_len$ = 20						; size = 4
_align$ = 24						; size = 4
_nk_menu_item_symbol_text PROC				; COMDAT

; 23622: {return nk_contextual_item_symbol_text(ctx, sym, text, len, align);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _sym$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_contextual_item_symbol_text
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_menu_item_symbol_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_menu_item_image_text
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_img$ = 12						; size = 16
_text$ = 28						; size = 4
_len$ = 32						; size = 4
_align$ = 36						; size = 4
_nk_menu_item_image_text PROC				; COMDAT

; 23618: {return nk_contextual_item_image_text(ctx, img, text, len, align);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _img$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_contextual_item_image_text
	add	esp, 32					; 00000020H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_menu_item_image_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_menu_item_image_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_img$ = 12						; size = 16
_label$ = 28						; size = 4
_align$ = 32						; size = 4
_nk_menu_item_image_label PROC				; COMDAT

; 23614: {return nk_contextual_item_image_label(ctx, img, label, align);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _img$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_contextual_item_image_label
	add	esp, 28					; 0000001cH
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_menu_item_image_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_menu_item_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_label$ = 12						; size = 4
_align$ = 16						; size = 4
_nk_menu_item_label PROC				; COMDAT

; 23610: {return nk_contextual_item_label(ctx, label, align);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_contextual_item_label
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_menu_item_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_menu_item_text
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_title$ = 12						; size = 4
_len$ = 16						; size = 4
_align$ = 20						; size = 4
_nk_menu_item_text PROC					; COMDAT

; 23607: {return nk_contextual_item_text(ctx, title, len, align);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _title$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_contextual_item_text
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_menu_item_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_menu_begin_symbol_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_title$ = 12						; size = 4
_align$ = 16						; size = 4
_sym$ = 20						; size = 4
_size$ = 24						; size = 8
_nk_menu_begin_symbol_label PROC			; COMDAT

; 23604: {return nk_menu_begin_symbol_text(ctx, title, nk_strlen(title), align,sym,size);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sym$[ebp]
	push	edx
	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _title$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_menu_begin_symbol_text
	add	esp, 28					; 0000001cH
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_menu_begin_symbol_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_menu_begin_symbol_text
_TEXT	SEGMENT
tv134 = -272						; size = 4
_state$ = -72						; size = 4
_is_clicked$ = -60					; size = 4
_in$ = -48						; size = 4
_header$ = -36						; size = 16
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_title$ = 12						; size = 4
_len$ = 16						; size = 4
_align$ = 20						; size = 4
_sym$ = 24						; size = 4
_size$ = 28						; size = 8
_nk_menu_begin_symbol_text PROC				; COMDAT

; 23578: {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 23579:     struct nk_window *win;
; 23580:     struct nk_rect header;
; 23581:     const struct nk_input *in;
; 23582:     int is_clicked = nk_false;

	mov	DWORD PTR _is_clicked$[ebp], 0

; 23583:     nk_flags state;
; 23584: 
; 23585:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_menu_be
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_menu_begin_symbol_text@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_menu_be:

; 23586:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_menu_be
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_menu_begin_symbol_text@@9@9
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_menu_be:

; 23587:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_menu_be
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_menu_begin_symbol_text@@9@9
	add	edx, 9
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_menu_be:

; 23588:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_menu_be
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_menu_be
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN4@nk_menu_be
$LN3@nk_menu_be:

; 23589:         return 0;

	xor	eax, eax
	jmp	$LN5@nk_menu_be
$LN4@nk_menu_be:

; 23590: 
; 23591:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 23592:     state = nk_widget(&header, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 23593:     if (!state) return 0;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN2@nk_menu_be
	xor	eax, eax
	jmp	$LN5@nk_menu_be
$LN2@nk_menu_be:

; 23594: 
; 23595:     in = (state == NK_WIDGET_ROM || win->layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN10@nk_menu_be
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 4096				; 00001000H
	jne	SHORT $LN10@nk_menu_be
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN11@nk_menu_be
$LN10@nk_menu_be:
	mov	DWORD PTR tv134[ebp], 0
$LN11@nk_menu_be:
	mov	ecx, DWORD PTR tv134[ebp]
	mov	DWORD PTR _in$[ebp], ecx

; 23596:     if (nk_do_button_text_symbol(&ctx->last_widget_state, &win->buffer,
; 23597:         header, sym, title, len, align, NK_BUTTON_DEFAULT, &ctx->style.menu_button,
; 23598:         ctx->style.font, in)) is_clicked = nk_true;

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 672				; 000002a0H
	push	eax
	push	0
	mov	ecx, DWORD PTR _align$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sym$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5820				; 000016bcH
	push	eax
	call	_nk_do_button_text_symbol
	add	esp, 56					; 00000038H
	test	eax, eax
	je	SHORT $LN1@nk_menu_be
	mov	DWORD PTR _is_clicked$[ebp], 1
$LN1@nk_menu_be:

; 23599:     return nk_menu_begin(ctx, win, title, is_clicked, header, size);

	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _is_clicked$[ebp]
	push	edx
	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_menu_begin
	add	esp, 40					; 00000028H
$LN5@nk_menu_be:

; 23600: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_menu_be
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@nk_menu_be:
	DD	1
	DD	$LN13@nk_menu_be
$LN13@nk_menu_be:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN12@nk_menu_be
$LN12@nk_menu_be:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_nk_menu_begin_symbol_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_menu_begin_symbol
_TEXT	SEGMENT
tv134 = -272						; size = 4
_state$ = -72						; size = 4
_is_clicked$ = -60					; size = 4
_header$ = -48						; size = 16
_in$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_id$ = 12						; size = 4
_sym$ = 16						; size = 4
_size$ = 20						; size = 8
_nk_menu_begin_symbol PROC				; COMDAT

; 23521: {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 23522:     struct nk_window *win;
; 23523:     const struct nk_input *in;
; 23524:     struct nk_rect header;
; 23525:     int is_clicked = nk_false;

	mov	DWORD PTR _is_clicked$[ebp], 0

; 23526:     nk_flags state;
; 23527: 
; 23528:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_menu_be
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_menu_begin_symbol@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_menu_be:

; 23529:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_menu_be
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_menu_begin_symbol@@9@9
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_menu_be:

; 23530:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_menu_be
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_menu_begin_symbol@@9@9
	add	edx, 9
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_menu_be:

; 23531:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_menu_be
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_menu_be
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN4@nk_menu_be
$LN3@nk_menu_be:

; 23532:         return 0;

	xor	eax, eax
	jmp	$LN5@nk_menu_be
$LN4@nk_menu_be:

; 23533: 
; 23534:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 23535:     state = nk_widget(&header, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 23536:     if (!state) return 0;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN2@nk_menu_be
	xor	eax, eax
	jmp	$LN5@nk_menu_be
$LN2@nk_menu_be:

; 23537:     in = (state == NK_WIDGET_ROM || win->layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN10@nk_menu_be
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 4096				; 00001000H
	jne	SHORT $LN10@nk_menu_be
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN11@nk_menu_be
$LN10@nk_menu_be:
	mov	DWORD PTR tv134[ebp], 0
$LN11@nk_menu_be:
	mov	ecx, DWORD PTR tv134[ebp]
	mov	DWORD PTR _in$[ebp], ecx

; 23538:     if (nk_do_button_symbol(&ctx->last_widget_state,  &win->buffer, header,
; 23539:         sym, NK_BUTTON_DEFAULT, &ctx->style.menu_button, in, ctx->style.font))

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 672				; 000002a0H
	push	eax
	push	0
	mov	ecx, DWORD PTR _sym$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5820				; 000016bcH
	push	eax
	call	_nk_do_button_symbol
	add	esp, 44					; 0000002cH
	test	eax, eax
	je	SHORT $LN1@nk_menu_be

; 23540:         is_clicked = nk_true;

	mov	DWORD PTR _is_clicked$[ebp], 1
$LN1@nk_menu_be:

; 23541:     return nk_menu_begin(ctx, win, id, is_clicked, header, size);

	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _is_clicked$[ebp]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_menu_begin
	add	esp, 40					; 00000028H
$LN5@nk_menu_be:

; 23542: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_menu_be
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@nk_menu_be:
	DD	1
	DD	$LN13@nk_menu_be
$LN13@nk_menu_be:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN12@nk_menu_be
$LN12@nk_menu_be:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_nk_menu_begin_symbol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_menu_begin_image_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_title$ = 12						; size = 4
_align$ = 16						; size = 4
_img$ = 20						; size = 16
_size$ = 36						; size = 8
_nk_menu_begin_image_label PROC				; COMDAT

; 23573: {return nk_menu_begin_image_text(ctx, title, nk_strlen(title), align, img, size);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _img$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _align$[ebp]
	push	edx
	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_menu_begin_image_text
	add	esp, 40					; 00000028H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_menu_begin_image_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_menu_begin_image_text
_TEXT	SEGMENT
tv134 = -272						; size = 4
_state$ = -72						; size = 4
_is_clicked$ = -60					; size = 4
_in$ = -48						; size = 4
_header$ = -36						; size = 16
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_title$ = 12						; size = 4
_len$ = 16						; size = 4
_align$ = 20						; size = 4
_img$ = 24						; size = 16
_size$ = 40						; size = 8
_nk_menu_begin_image_text PROC				; COMDAT

; 23547: {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 23548:     struct nk_window *win;
; 23549:     struct nk_rect header;
; 23550:     const struct nk_input *in;
; 23551:     int is_clicked = nk_false;

	mov	DWORD PTR _is_clicked$[ebp], 0

; 23552:     nk_flags state;
; 23553: 
; 23554:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_menu_be
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_menu_begin_image_text@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_menu_be:

; 23555:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_menu_be
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_menu_begin_image_text@@9@9
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_menu_be:

; 23556:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_menu_be
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_menu_begin_image_text@@9@9
	add	edx, 9
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_menu_be:

; 23557:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_menu_be
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_menu_be
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN4@nk_menu_be
$LN3@nk_menu_be:

; 23558:         return 0;

	xor	eax, eax
	jmp	$LN5@nk_menu_be
$LN4@nk_menu_be:

; 23559: 
; 23560:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 23561:     state = nk_widget(&header, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 23562:     if (!state) return 0;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN2@nk_menu_be
	xor	eax, eax
	jmp	$LN5@nk_menu_be
$LN2@nk_menu_be:

; 23563:     in = (state == NK_WIDGET_ROM || win->layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN10@nk_menu_be
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 4096				; 00001000H
	jne	SHORT $LN10@nk_menu_be
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN11@nk_menu_be
$LN10@nk_menu_be:
	mov	DWORD PTR tv134[ebp], 0
$LN11@nk_menu_be:
	mov	ecx, DWORD PTR tv134[ebp]
	mov	DWORD PTR _in$[ebp], ecx

; 23564:     if (nk_do_button_text_image(&ctx->last_widget_state, &win->buffer,
; 23565:         header, img, title, len, align, NK_BUTTON_DEFAULT, &ctx->style.menu_button,
; 23566:         ctx->style.font, in))

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 672				; 000002a0H
	push	eax
	push	0
	mov	ecx, DWORD PTR _align$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _img$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 5820				; 000016bcH
	push	edx
	call	_nk_do_button_text_image
	add	esp, 68					; 00000044H
	test	eax, eax
	je	SHORT $LN1@nk_menu_be

; 23567:         is_clicked = nk_true;

	mov	DWORD PTR _is_clicked$[ebp], 1
$LN1@nk_menu_be:

; 23568:     return nk_menu_begin(ctx, win, title, is_clicked, header, size);

	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _is_clicked$[ebp]
	push	edx
	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_menu_begin
	add	esp, 40					; 00000028H
$LN5@nk_menu_be:

; 23569: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_menu_be
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@nk_menu_be:
	DD	1
	DD	$LN13@nk_menu_be
$LN13@nk_menu_be:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN12@nk_menu_be
$LN12@nk_menu_be:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_nk_menu_begin_image_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_menu_begin_image
_TEXT	SEGMENT
tv134 = -272						; size = 4
_state$ = -72						; size = 4
_is_clicked$ = -60					; size = 4
_in$ = -48						; size = 4
_header$ = -36						; size = 16
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_id$ = 12						; size = 4
_img$ = 16						; size = 16
_size$ = 32						; size = 8
_nk_menu_begin_image PROC				; COMDAT

; 23495: {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 23496:     struct nk_window *win;
; 23497:     struct nk_rect header;
; 23498:     const struct nk_input *in;
; 23499:     int is_clicked = nk_false;

	mov	DWORD PTR _is_clicked$[ebp], 0

; 23500:     nk_flags state;
; 23501: 
; 23502:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_menu_be
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_menu_begin_image@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_menu_be:

; 23503:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_menu_be
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_menu_begin_image@@9@9
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_menu_be:

; 23504:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_menu_be
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_menu_begin_image@@9@9
	add	edx, 9
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_menu_be:

; 23505:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_menu_be
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_menu_be
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN4@nk_menu_be
$LN3@nk_menu_be:

; 23506:         return 0;

	xor	eax, eax
	jmp	$LN5@nk_menu_be
$LN4@nk_menu_be:

; 23507: 
; 23508:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 23509:     state = nk_widget(&header, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 23510:     if (!state) return 0;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN2@nk_menu_be
	xor	eax, eax
	jmp	$LN5@nk_menu_be
$LN2@nk_menu_be:

; 23511:     in = (state == NK_WIDGET_ROM || win->layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN10@nk_menu_be
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 4096				; 00001000H
	jne	SHORT $LN10@nk_menu_be
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN11@nk_menu_be
$LN10@nk_menu_be:
	mov	DWORD PTR tv134[ebp], 0
$LN11@nk_menu_be:
	mov	ecx, DWORD PTR tv134[ebp]
	mov	DWORD PTR _in$[ebp], ecx

; 23512:     if (nk_do_button_image(&ctx->last_widget_state, &win->buffer, header,
; 23513:         img, NK_BUTTON_DEFAULT, &ctx->style.menu_button, in))

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 672				; 000002a0H
	push	ecx
	push	0
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _img$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5820				; 000016bcH
	push	eax
	call	_nk_do_button_image
	add	esp, 52					; 00000034H
	test	eax, eax
	je	SHORT $LN1@nk_menu_be

; 23514:         is_clicked = nk_true;

	mov	DWORD PTR _is_clicked$[ebp], 1
$LN1@nk_menu_be:

; 23515:     return nk_menu_begin(ctx, win, id, is_clicked, header, size);

	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _is_clicked$[ebp]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_menu_begin
	add	esp, 40					; 00000028H
$LN5@nk_menu_be:

; 23516: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_menu_be
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@nk_menu_be:
	DD	1
	DD	$LN13@nk_menu_be
$LN13@nk_menu_be:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN12@nk_menu_be
$LN12@nk_menu_be:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_nk_menu_begin_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_menu_begin_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_text$ = 12						; size = 4
_align$ = 16						; size = 4
_size$ = 20						; size = 8
_nk_menu_begin_label PROC				; COMDAT

; 23490: {return nk_menu_begin_text(ctx, text, nk_strlen(text), align, size);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _align$[ebp]
	push	edx
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_menu_begin_text
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_menu_begin_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_menu_begin_text
_TEXT	SEGMENT
tv133 = -272						; size = 4
_state$ = -72						; size = 4
_is_clicked$ = -60					; size = 4
_header$ = -48						; size = 16
_in$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_title$ = 12						; size = 4
_len$ = 16						; size = 4
_align$ = 20						; size = 4
_size$ = 24						; size = 8
_nk_menu_begin_text PROC				; COMDAT

; 23465: {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 23466:     struct nk_window *win;
; 23467:     const struct nk_input *in;
; 23468:     struct nk_rect header;
; 23469:     int is_clicked = nk_false;

	mov	DWORD PTR _is_clicked$[ebp], 0

; 23470:     nk_flags state;
; 23471: 
; 23472:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_menu_be
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_menu_begin_text@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_menu_be:

; 23473:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_menu_be
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_menu_begin_text@@9@9
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_menu_be:

; 23474:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_menu_be
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_menu_begin_text@@9@9
	add	edx, 9
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_menu_be:

; 23475:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_menu_be
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_menu_be
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN4@nk_menu_be
$LN3@nk_menu_be:

; 23476:         return 0;

	xor	eax, eax
	jmp	$LN5@nk_menu_be
$LN4@nk_menu_be:

; 23477: 
; 23478:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 23479:     state = nk_widget(&header, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 23480:     if (!state) return 0;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN2@nk_menu_be
	xor	eax, eax
	jmp	$LN5@nk_menu_be
$LN2@nk_menu_be:

; 23481:     in = (state == NK_WIDGET_ROM || win->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN10@nk_menu_be
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN10@nk_menu_be
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv133[ebp], edx
	jmp	SHORT $LN11@nk_menu_be
$LN10@nk_menu_be:
	mov	DWORD PTR tv133[ebp], 0
$LN11@nk_menu_be:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 23482:     if (nk_do_button_text(&ctx->last_widget_state, &win->buffer, header,
; 23483:         title, len, align, NK_BUTTON_DEFAULT, &ctx->style.menu_button, in, ctx->style.font))

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 672				; 000002a0H
	push	eax
	push	0
	mov	ecx, DWORD PTR _align$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 5820				; 000016bcH
	push	edx
	call	_nk_do_button_text
	add	esp, 52					; 00000034H
	test	eax, eax
	je	SHORT $LN1@nk_menu_be

; 23484:         is_clicked = nk_true;

	mov	DWORD PTR _is_clicked$[ebp], 1
$LN1@nk_menu_be:

; 23485:     return nk_menu_begin(ctx, win, title, is_clicked, header, size);

	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _is_clicked$[ebp]
	push	edx
	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_menu_begin
	add	esp, 40					; 00000028H
$LN5@nk_menu_be:

; 23486: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_menu_be
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@nk_menu_be:
	DD	1
	DD	$LN13@nk_menu_be
$LN13@nk_menu_be:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN12@nk_menu_be
$LN12@nk_menu_be:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_nk_menu_begin_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_menubar_end
_TEXT	SEGMENT
_out$ = -32						; size = 4
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_menubar_end PROC					; COMDAT

; 19087: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19088:     struct nk_window *win;
; 19089:     struct nk_panel *layout;
; 19090:     struct nk_command_buffer *out;
; 19091: 
; 19092:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_menubar
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_menubar_end@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_menubar:

; 19093:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_menubar
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_menubar_end@@9@9
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_menubar:

; 19094:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_menubar
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_menubar_end@@9@9
	add	edx, 7
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_menubar:

; 19095:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_menubar
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_menubar
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN4@nk_menubar
$LN3@nk_menubar:

; 19096:         return;

	jmp	$LN5@nk_menubar
$LN4@nk_menubar:

; 19097: 
; 19098:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19099:     out = &win->buffer;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	mov	DWORD PTR _out$[ebp], eax

; 19100:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19101:     if (layout->flags & NK_WINDOW_HIDDEN || layout->flags & NK_WINDOW_MINIMIZED)

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 8192				; 00002000H
	jne	SHORT $LN1@nk_menubar
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@nk_menubar
$LN1@nk_menubar:

; 19102:         return;

	jmp	$LN5@nk_menubar
$LN2@nk_menubar:

; 19103: 
; 19104:     layout->menu.h = layout->at_y - layout->menu.y;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	subss	xmm0, DWORD PTR [ecx+80]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [edx+88], xmm0

; 19105:     layout->bounds.y += layout->menu.h + ctx->style.window.spacing.y + layout->row.height;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR [eax+88]
	addss	xmm0, DWORD PTR [ecx+5672]
	mov	edx, DWORD PTR _layout$[ebp]
	addss	xmm0, DWORD PTR [edx+108]
	mov	eax, DWORD PTR _layout$[ebp]
	addss	xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 19106:     layout->bounds.h -= layout->menu.h + ctx->style.window.spacing.y + layout->row.height;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR [eax+88]
	addss	xmm0, DWORD PTR [ecx+5672]
	mov	edx, DWORD PTR _layout$[ebp]
	addss	xmm0, DWORD PTR [edx+108]
	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm1, DWORD PTR [eax+20]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [ecx+20], xmm1

; 19107: 
; 19108:     *layout->offset_x = layout->menu.offset.x;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _layout$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	DWORD PTR [ecx], eax

; 19109:     *layout->offset_y = layout->menu.offset.y;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _layout$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR [ecx], eax

; 19110:     layout->at_y = layout->bounds.y - layout->row.height;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	subss	xmm0, DWORD PTR [ecx+108]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [edx+36], xmm0

; 19111: 
; 19112:     layout->clip.y = layout->bounds.y;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+64], edx

; 19113:     layout->clip.h = layout->bounds.h;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+72], edx

; 19114:     nk_push_scissor(out, layout->clip);

	mov	eax, DWORD PTR _layout$[ebp]
	add	eax, 60					; 0000003cH
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_nk_push_scissor
	add	esp, 20					; 00000014H
$LN5@nk_menubar:

; 19115: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_menubar_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_menubar_begin
_TEXT	SEGMENT
_layout$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_menubar_begin PROC					; COMDAT

; 19049: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19050:     struct nk_panel *layout;
; 19051:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_menubar
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_menubar_begin@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_menubar:

; 19052:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_menubar
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_menubar_begin@@9@9
	add	ecx, 3
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_menubar:

; 19053:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_menubar
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_menubar_begin@@9@9
	add	edx, 4
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_menubar:

; 19054:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_menubar
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_menubar
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN4@nk_menubar
$LN3@nk_menubar:

; 19055:         return;

	jmp	$LN5@nk_menubar
$LN4@nk_menubar:

; 19056: 
; 19057:     layout = ctx->current->layout;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR _layout$[ebp], edx

; 19058:     NK_ASSERT(layout->at_y == layout->bounds.y);

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	ucomiss	xmm0, DWORD PTR [ecx+12]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN10@nk_menubar
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_menubar_begin@@9@9
	add	edx, 9
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EC@NJLDBDNI@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAa?$AAt?$AA_?$AAy?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAb?$AAo?$AAu?$AAn?$AAd?$AAs?$AA?4?$AAy@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_menubar:

; 19059:     /* if this assert triggers you allocated space between nk_begin and nk_menubar_begin.
; 19060:     If you want a menubar the first nuklear function after `nk_begin` has to be a
; 19061:     `nk_menubar_begin` call. Inside the menubar you then have to allocate space for
; 19062:     widgets (also supports multiple rows).
; 19063:     Example:
; 19064:         if (nk_begin(...)) {
; 19065:             nk_menubar_begin(...);
; 19066:                 nk_layout_xxxx(...);
; 19067:                 nk_button(...);
; 19068:                 nk_layout_xxxx(...);
; 19069:                 nk_button(...);
; 19070:             nk_menubar_end(...);
; 19071:         }
; 19072:         nk_end(...);
; 19073:     */
; 19074:     if (layout->flags & NK_WINDOW_HIDDEN || layout->flags & NK_WINDOW_MINIMIZED)

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 8192				; 00002000H
	jne	SHORT $LN1@nk_menubar
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@nk_menubar
$LN1@nk_menubar:

; 19075:         return;

	jmp	SHORT $LN5@nk_menubar
$LN2@nk_menubar:

; 19076: 
; 19077:     layout->menu.x = layout->at_x;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+76], edx

; 19078:     layout->menu.y = layout->at_y + layout->row.height;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	addss	xmm0, DWORD PTR [ecx+108]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [edx+80], xmm0

; 19079:     layout->menu.w = layout->bounds.w;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+84], edx

; 19080:     layout->menu.offset.x = *layout->offset_x;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _layout$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+92], eax

; 19081:     layout->menu.offset.y = *layout->offset_y;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _layout$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+96], eax

; 19082:     *layout->offset_y = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx], 0
$LN5@nk_menubar:

; 19083: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_menubar_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tooltip_end
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_tooltip_end PROC					; COMDAT

; 22424: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 22425:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_tooltip
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_tooltip_end@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_tooltip:

; 22426:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_tooltip
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_tooltip_end@@9@9
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_tooltip:

; 22427:     if (!ctx || !ctx->current) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_tooltip
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_tooltip
$LN1@nk_tooltip:
	jmp	SHORT $LN3@nk_tooltip
$LN2@nk_tooltip:

; 22428:     ctx->current->seq--;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR [ecx], edx

; 22429:     nk_popup_close(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_popup_close
	add	esp, 4

; 22430:     nk_popup_end(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_popup_end
	add	esp, 4
$LN3@nk_tooltip:

; 22431: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tooltip_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tooltip_begin
_TEXT	SEGMENT
_ret$ = -60						; size = 4
_bounds$ = -48						; size = 16
_in$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_width$ = 12						; size = 4
_nk_tooltip_begin PROC					; COMDAT

; 22391: {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 22392:     struct nk_window *win;
; 22393:     const struct nk_input *in;
; 22394:     struct nk_rect bounds;
; 22395:     int ret;
; 22396: 
; 22397:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_tooltip
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_tooltip_begin@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_tooltip:

; 22398:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_tooltip
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_tooltip_begin@@9@9
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_tooltip:

; 22399:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_tooltip
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_tooltip_begin@@9@9
	add	edx, 8
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_tooltip:

; 22400:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_tooltip
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_tooltip
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN4@nk_tooltip
$LN3@nk_tooltip:

; 22401:         return 0;

	xor	eax, eax
	jmp	$LN5@nk_tooltip
$LN4@nk_tooltip:

; 22402: 
; 22403:     /* make sure that no nonblocking popup is currently active */
; 22404:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 22405:     in = &ctx->input;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 22406:     if (win->popup.win && (win->popup.type & NK_PANEL_SET_NONBLOCK))

	mov	eax, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [eax+252], 0
	je	SHORT $LN2@nk_tooltip
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+256]
	and	ecx, 240				; 000000f0H
	je	SHORT $LN2@nk_tooltip

; 22407:         return 0;

	xor	eax, eax
	jmp	$LN5@nk_tooltip
$LN2@nk_tooltip:

; 22408: 
; 22409:     bounds.w = width;

	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR _bounds$[ebp+8], xmm0

; 22410:     bounds.h = nk_null_rect.h;

	movss	xmm0, DWORD PTR _nk_null_rect+12
	movss	DWORD PTR _bounds$[ebp+12], xmm0

; 22411:     bounds.x = (in->mouse.pos.x + 1) - win->layout->clip.x;

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+324]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	subss	xmm0, DWORD PTR [edx+60]
	movss	DWORD PTR _bounds$[ebp], xmm0

; 22412:     bounds.y = (in->mouse.pos.y + 1) - win->layout->clip.y;

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	subss	xmm0, DWORD PTR [edx+64]
	movss	DWORD PTR _bounds$[ebp+4], xmm0

; 22413: 
; 22414:     ret = nk_popup_begin(ctx, NK_POPUP_DYNAMIC,
; 22415:         "__##Tooltip##__", NK_WINDOW_NO_SCROLLBAR|NK_WINDOW_BORDER, bounds);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	push	33					; 00000021H
	push	OFFSET ??_C@_0BA@FIOIOCM@__?$CD?$CDTooltip?$CD?$CD__?$AA@
	push	1
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_popup_begin
	add	esp, 32					; 00000020H
	mov	DWORD PTR _ret$[ebp], eax

; 22416:     if (ret) win->layout->flags &= ~(nk_flags)NK_WINDOW_ROM;

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN1@nk_tooltip
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, -4097				; ffffefffH
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR [ecx+4], edx
$LN1@nk_tooltip:

; 22417:     win->popup.type = NK_PANEL_TOOLTIP;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+256], 128		; 00000080H

; 22418:     ctx->current->layout->type = NK_PANEL_TOOLTIP;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR [edx], 128			; 00000080H

; 22419:     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN5@nk_tooltip:

; 22420: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@nk_tooltip
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@nk_tooltip:
	DD	1
	DD	$LN11@nk_tooltip
$LN11@nk_tooltip:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN10@nk_tooltip
$LN10@nk_tooltip:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_tooltip_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tooltip
_TEXT	SEGMENT
_text_height$ = -60					; size = 4
_text_width$ = -48					; size = 4
_text_len$ = -36					; size = 4
_padding$ = -24						; size = 8
_style$ = -8						; size = 4
_ctx$ = 8						; size = 4
_text$ = 12						; size = 4
_nk_tooltip PROC					; COMDAT

; 22435: {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 22436:     const struct nk_style *style;
; 22437:     struct nk_vec2 padding;
; 22438: 
; 22439:     int text_len;
; 22440:     float text_width;
; 22441:     float text_height;
; 22442: 
; 22443:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_tooltip
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_tooltip@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_tooltip:

; 22444:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN7@nk_tooltip
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_tooltip@@9@9
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_tooltip:

; 22445:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN8@nk_tooltip
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_tooltip@@9@9
	add	edx, 10					; 0000000aH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_tooltip:

; 22446:     NK_ASSERT(text);

	cmp	DWORD PTR _text$[ebp], 0
	jne	SHORT $LN9@nk_tooltip
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_tooltip@@9@9
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HIPAKEND@?$AAt?$AAe?$AAx?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_tooltip:

; 22447:     if (!ctx || !ctx->current || !ctx->current->layout || !text)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_tooltip
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN2@nk_tooltip
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN2@nk_tooltip
	cmp	DWORD PTR _text$[ebp], 0
	jne	SHORT $LN3@nk_tooltip
$LN2@nk_tooltip:

; 22448:         return;

	jmp	$LN1@nk_tooltip
$LN3@nk_tooltip:

; 22449: 
; 22450:     /* fetch configuration data */
; 22451:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 22452:     padding = style->window.padding;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5332]
	mov	edx, DWORD PTR [eax+5336]
	mov	DWORD PTR _padding$[ebp], ecx
	mov	DWORD PTR _padding$[ebp+4], edx

; 22453: 
; 22454:     /* calculate size of the text and tooltip */
; 22455:     text_len = nk_strlen(text);

	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _text_len$[ebp], eax

; 22456:     text_width = style->font->width(style->font->userdata,
; 22457:                     style->font->height, text, text_len);

	mov	esi, esp
	mov	eax, DWORD PTR _text_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR [edx]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _style$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _text_width$[ebp]

; 22458:     text_width += (4 * padding.x);

	movss	xmm0, DWORD PTR __real@40800000
	mulss	xmm0, DWORD PTR _padding$[ebp]
	addss	xmm0, DWORD PTR _text_width$[ebp]
	movss	DWORD PTR _text_width$[ebp], xmm0

; 22459:     text_height = (style->font->height + 2 * padding.y);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _padding$[ebp+4]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _text_height$[ebp], xmm0

; 22460: 
; 22461:     /* execute tooltip and fill with text */
; 22462:     if (nk_tooltip_begin(ctx, (float)text_width)) {

	push	ecx
	movss	xmm0, DWORD PTR _text_width$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_tooltip_begin
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@nk_tooltip

; 22463:         nk_layout_row_dynamic(ctx, (float)text_height, 1);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR _text_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 22464:         nk_text(ctx, text, text_len, NK_TEXT_LEFT);

	push	17					; 00000011H
	mov	eax, DWORD PTR _text_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_text
	add	esp, 16					; 00000010H

; 22465:         nk_tooltip_end(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_tooltip_end
	add	esp, 4
$LN1@nk_tooltip:

; 22466:     }
; 22467: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@nk_tooltip
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@nk_tooltip:
	DD	1
	DD	$LN11@nk_tooltip
$LN11@nk_tooltip:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN10@nk_tooltip
$LN10@nk_tooltip:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
_nk_tooltip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_contextual_end
_TEXT	SEGMENT
_in_body$1 = -88					; size = 4
_pressed$2 = -76					; size = 4
_padding$3 = -64					; size = 8
_body$4 = -48						; size = 16
_panel$ = -24						; size = 4
_popup$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_nk_contextual_end PROC					; COMDAT

; 22645: {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 22646:     struct nk_window *popup;
; 22647:     struct nk_panel *panel;
; 22648:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN9@nk_context
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_contextual_end@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_context:

; 22649:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN10@nk_context
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_contextual_end@@9@9
	add	ecx, 4
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_context:

; 22650:     if (!ctx || !ctx->current) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN5@nk_context
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_context
$LN5@nk_context:
	jmp	$LN7@nk_context
$LN6@nk_context:

; 22651: 
; 22652:     popup = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _popup$[ebp], ecx

; 22653:     panel = popup->layout;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _panel$[ebp], ecx

; 22654:     NK_ASSERT(popup->parent);

	mov	eax, DWORD PTR _popup$[ebp]
	cmp	DWORD PTR [eax+384], 0
	jne	SHORT $LN11@nk_context
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_contextual_end@@9@9
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BM@KLACOFEL@?$AAp?$AAo?$AAp?$AAu?$AAp?$AA?9?$AA?$DO?$AAp?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_context:

; 22655:     NK_ASSERT(panel->type & NK_PANEL_SET_POPUP);

	mov	eax, DWORD PTR _panel$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 244				; 000000f4H
	jne	SHORT $LN12@nk_context
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_contextual_end@@9@9
	add	edx, 10					; 0000000aH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EC@DJLEFCBF@?$AAp?$AAa?$AAn?$AAe?$AAl?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAP?$AAA?$AAN?$AAE?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAP?$AAO?$AAP?$AAU?$AAP@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_context:

; 22656:     if (panel->flags & NK_WINDOW_DYNAMIC) {

	mov	eax, DWORD PTR _panel$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2048				; 00000800H
	je	$LN2@nk_context

; 22657:         /* Close behavior
; 22658:         This is a bit of a hack solution since we do not know before we end our popup
; 22659:         how big it will be. We therefore do not directly know when a
; 22660:         click outside the non-blocking popup must close it at that direct frame.
; 22661:         Instead it will be closed in the next frame.*/
; 22662:         struct nk_rect body = {0,0,0,0};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _body$4[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _body$4[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _body$4[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _body$4[ebp+12], xmm0

; 22663:         if (panel->at_y < (panel->bounds.y + panel->bounds.h)) {

	mov	eax, DWORD PTR _panel$[ebp]
	mov	ecx, DWORD PTR _panel$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _panel$[ebp]
	comiss	xmm0, DWORD PTR [edx+36]
	jbe	SHORT $LN3@nk_context

; 22664:             struct nk_vec2 padding = nk_panel_get_padding(&ctx->style, panel->type);

	mov	eax, DWORD PTR _panel$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 360				; 00000168H
	push	edx
	call	_nk_panel_get_padding
	add	esp, 8
	mov	DWORD PTR _padding$3[ebp], eax
	mov	DWORD PTR _padding$3[ebp+4], edx

; 22665:             body = panel->bounds;

	mov	eax, DWORD PTR _panel$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _body$4[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _body$4[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _body$4[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _body$4[ebp+12], edx

; 22666:             body.y = (panel->at_y + panel->footer_height + panel->border + padding.y + panel->row.height);

	mov	eax, DWORD PTR _panel$[ebp]
	mov	ecx, DWORD PTR _panel$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	addss	xmm0, DWORD PTR [ecx+44]
	mov	edx, DWORD PTR _panel$[ebp]
	addss	xmm0, DWORD PTR [edx+52]
	addss	xmm0, DWORD PTR _padding$3[ebp+4]
	mov	eax, DWORD PTR _panel$[ebp]
	addss	xmm0, DWORD PTR [eax+108]
	movss	DWORD PTR _body$4[ebp+4], xmm0

; 22667:             body.h = (panel->bounds.y + panel->bounds.h) - body.y;

	mov	eax, DWORD PTR _panel$[ebp]
	mov	ecx, DWORD PTR _panel$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, DWORD PTR _body$4[ebp+4]
	movss	DWORD PTR _body$4[ebp+12], xmm0
$LN3@nk_context:

; 22668:         }
; 22669:         {int pressed = nk_input_is_mouse_pressed(&ctx->input, NK_BUTTON_LEFT);

	push	0
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_input_is_mouse_pressed
	add	esp, 8
	mov	DWORD PTR _pressed$2[ebp], eax

; 22670:         int in_body = nk_input_is_mouse_hovering_rect(&ctx->input, body);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _body$4[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _body$4[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _body$4[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _body$4[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	mov	DWORD PTR _in_body$1[ebp], eax

; 22671:         if (pressed && in_body)

	cmp	DWORD PTR _pressed$2[ebp], 0
	je	SHORT $LN2@nk_context
	cmp	DWORD PTR _in_body$1[ebp], 0
	je	SHORT $LN2@nk_context

; 22672:             popup->flags |= NK_WINDOW_HIDDEN;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	or	ecx, 8192				; 00002000H
	mov	edx, DWORD PTR _popup$[ebp]
	mov	DWORD PTR [edx+72], ecx
$LN2@nk_context:

; 22673:         }
; 22674:     }
; 22675:     if (popup->flags & NK_WINDOW_HIDDEN)

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 8192				; 00002000H
	je	SHORT $LN1@nk_context

; 22676:         popup->seq = 0;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	DWORD PTR [eax], 0
$LN1@nk_context:

; 22677:     nk_popup_end(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_popup_end
	add	esp, 4
$LN7@nk_context:

; 22678:     return;
; 22679: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@nk_context
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@nk_context:
	DD	2
	DD	$LN15@nk_context
$LN15@nk_context:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN13@nk_context
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN14@nk_context
$LN14@nk_context:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN13@nk_context:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	121					; 00000079H
	DB	0
_nk_contextual_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_contextual_close
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_contextual_close PROC				; COMDAT

; 22635: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 22636:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_context
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_contextual_close@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_context:

; 22637:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_context
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_contextual_close@@9@9
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_context:

; 22638:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN7@nk_context
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_contextual_close@@9@9
	add	edx, 3
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_context:

; 22639:     if (!ctx || !ctx->current || !ctx->current->layout) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_context
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN1@nk_context
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN2@nk_context
$LN1@nk_context:
	jmp	SHORT $LN3@nk_context
$LN2@nk_context:

; 22640:     nk_popup_close(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_popup_close
	add	esp, 4
$LN3@nk_context:

; 22641: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_contextual_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_contextual_item_symbol_text
_TEXT	SEGMENT
tv137 = -272						; size = 4
_state$ = -72						; size = 4
_bounds$ = -60						; size = 16
_style$ = -36						; size = 4
_in$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_symbol$ = 12						; size = 4
_text$ = 16						; size = 4
_len$ = 20						; size = 4
_align$ = 24						; size = 4
_nk_contextual_item_symbol_text PROC			; COMDAT

; 22601: {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 22602:     struct nk_window *win;
; 22603:     const struct nk_input *in;
; 22604:     const struct nk_style *style;
; 22605: 
; 22606:     struct nk_rect bounds;
; 22607:     enum nk_widget_layout_states state;
; 22608: 
; 22609:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_context
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_contextual_item_symbol_text@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_context:

; 22610:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_context
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_contextual_item_symbol_text@@9@9
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_context:

; 22611:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_context
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_contextual_item_symbol_text@@9@9
	add	edx, 10					; 0000000aH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_context:

; 22612:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_context
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_context
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN4@nk_context
$LN3@nk_context:

; 22613:         return 0;

	xor	eax, eax
	jmp	$LN5@nk_context
$LN4@nk_context:

; 22614: 
; 22615:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 22616:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 22617:     state = nk_widget_fitting(&bounds, ctx, style->contextual_button.padding);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	mov	edx, DWORD PTR [eax+276]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget_fitting
	add	esp, 16					; 00000010H
	mov	DWORD PTR _state$[ebp], eax

; 22618:     if (!state) return nk_false;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN2@nk_context
	xor	eax, eax
	jmp	$LN5@nk_context
$LN2@nk_context:

; 22619: 
; 22620:     in = (state == NK_WIDGET_ROM || win->layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN10@nk_context
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 4096				; 00001000H
	jne	SHORT $LN10@nk_context
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN11@nk_context
$LN10@nk_context:
	mov	DWORD PTR tv137[ebp], 0
$LN11@nk_context:
	mov	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR _in$[ebp], ecx

; 22621:     if (nk_do_button_text_symbol(&ctx->last_widget_state, &win->buffer, bounds,
; 22622:         symbol, text, len, align, NK_BUTTON_DEFAULT, &style->contextual_button, style->font, in)) {

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 184				; 000000b8H
	push	eax
	push	0
	mov	ecx, DWORD PTR _align$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _symbol$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5820				; 000016bcH
	push	eax
	call	_nk_do_button_text_symbol
	add	esp, 56					; 00000038H
	test	eax, eax
	je	SHORT $LN1@nk_context

; 22623:         nk_contextual_close(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_contextual_close
	add	esp, 4

; 22624:         return nk_true;

	mov	eax, 1
	jmp	SHORT $LN5@nk_context
$LN1@nk_context:

; 22625:     }
; 22626:     return nk_false;

	xor	eax, eax
$LN5@nk_context:

; 22627: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_context
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@nk_context:
	DD	1
	DD	$LN13@nk_context
$LN13@nk_context:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN12@nk_context
$LN12@nk_context:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_contextual_item_symbol_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_contextual_item_symbol_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_symbol$ = 12						; size = 4
_text$ = 16						; size = 4
_align$ = 20						; size = 4
_nk_contextual_item_symbol_label PROC			; COMDAT

; 22631: {return nk_contextual_item_symbol_text(ctx, symbol, text, nk_strlen(text), align);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _symbol$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_contextual_item_symbol_text
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_contextual_item_symbol_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_contextual_item_image_text
_TEXT	SEGMENT
tv137 = -272						; size = 4
_state$ = -72						; size = 4
_bounds$ = -60						; size = 16
_style$ = -36						; size = 4
_in$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_img$ = 12						; size = 16
_text$ = 28						; size = 4
_len$ = 32						; size = 4
_align$ = 36						; size = 4
_nk_contextual_item_image_text PROC			; COMDAT

; 22566: {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 22567:     struct nk_window *win;
; 22568:     const struct nk_input *in;
; 22569:     const struct nk_style *style;
; 22570: 
; 22571:     struct nk_rect bounds;
; 22572:     enum nk_widget_layout_states state;
; 22573: 
; 22574:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_context
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_contextual_item_image_text@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_context:

; 22575:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_context
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_contextual_item_image_text@@9@9
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_context:

; 22576:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_context
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_contextual_item_image_text@@9@9
	add	edx, 10					; 0000000aH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_context:

; 22577:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_context
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_context
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN4@nk_context
$LN3@nk_context:

; 22578:         return 0;

	xor	eax, eax
	jmp	$LN5@nk_context
$LN4@nk_context:

; 22579: 
; 22580:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 22581:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 22582:     state = nk_widget_fitting(&bounds, ctx, style->contextual_button.padding);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	mov	edx, DWORD PTR [eax+276]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget_fitting
	add	esp, 16					; 00000010H
	mov	DWORD PTR _state$[ebp], eax

; 22583:     if (!state) return nk_false;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN2@nk_context
	xor	eax, eax
	jmp	$LN5@nk_context
$LN2@nk_context:

; 22584: 
; 22585:     in = (state == NK_WIDGET_ROM || win->layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN10@nk_context
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 4096				; 00001000H
	jne	SHORT $LN10@nk_context
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN11@nk_context
$LN10@nk_context:
	mov	DWORD PTR tv137[ebp], 0
$LN11@nk_context:
	mov	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR _in$[ebp], ecx

; 22586:     if (nk_do_button_text_image(&ctx->last_widget_state, &win->buffer, bounds,
; 22587:         img, text, len, align, NK_BUTTON_DEFAULT, &style->contextual_button, style->font, in)){

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 184				; 000000b8H
	push	eax
	push	0
	mov	ecx, DWORD PTR _align$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _img$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 5820				; 000016bcH
	push	edx
	call	_nk_do_button_text_image
	add	esp, 68					; 00000044H
	test	eax, eax
	je	SHORT $LN1@nk_context

; 22588:         nk_contextual_close(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_contextual_close
	add	esp, 4

; 22589:         return nk_true;

	mov	eax, 1
	jmp	SHORT $LN5@nk_context
$LN1@nk_context:

; 22590:     }
; 22591:     return nk_false;

	xor	eax, eax
$LN5@nk_context:

; 22592: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_context
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@nk_context:
	DD	1
	DD	$LN13@nk_context
$LN13@nk_context:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN12@nk_context
$LN12@nk_context:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_contextual_item_image_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_contextual_item_image_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_img$ = 12						; size = 16
_label$ = 28						; size = 4
_align$ = 32						; size = 4
_nk_contextual_item_image_label PROC			; COMDAT

; 22596: {return nk_contextual_item_image_text(ctx, img, label, nk_strlen(label), align);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _label$[ebp]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _img$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_contextual_item_image_text
	add	esp, 32					; 00000020H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_contextual_item_image_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_contextual_item_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_label$ = 12						; size = 4
_align$ = 16						; size = 4
_nk_contextual_item_label PROC				; COMDAT

; 22561: {return nk_contextual_item_text(ctx, label, nk_strlen(label), align);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _label$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_contextual_item_text
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_contextual_item_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_contextual_item_text
_TEXT	SEGMENT
tv137 = -272						; size = 4
_state$ = -72						; size = 4
_bounds$ = -60						; size = 16
_style$ = -36						; size = 4
_in$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_text$ = 12						; size = 4
_len$ = 16						; size = 4
_alignment$ = 20					; size = 4
_nk_contextual_item_text PROC				; COMDAT

; 22532: {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 22533:     struct nk_window *win;
; 22534:     const struct nk_input *in;
; 22535:     const struct nk_style *style;
; 22536: 
; 22537:     struct nk_rect bounds;
; 22538:     enum nk_widget_layout_states state;
; 22539: 
; 22540:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_context
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_contextual_item_text@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_context:

; 22541:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_context
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_contextual_item_text@@9@9
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_context:

; 22542:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_context
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_contextual_item_text@@9@9
	add	edx, 10					; 0000000aH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_context:

; 22543:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_context
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_context
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN4@nk_context
$LN3@nk_context:

; 22544:         return 0;

	xor	eax, eax
	jmp	$LN5@nk_context
$LN4@nk_context:

; 22545: 
; 22546:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 22547:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 22548:     state = nk_widget_fitting(&bounds, ctx, style->contextual_button.padding);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	mov	edx, DWORD PTR [eax+276]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget_fitting
	add	esp, 16					; 00000010H
	mov	DWORD PTR _state$[ebp], eax

; 22549:     if (!state) return nk_false;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN2@nk_context
	xor	eax, eax
	jmp	$LN5@nk_context
$LN2@nk_context:

; 22550: 
; 22551:     in = (state == NK_WIDGET_ROM || win->layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN10@nk_context
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 4096				; 00001000H
	jne	SHORT $LN10@nk_context
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN11@nk_context
$LN10@nk_context:
	mov	DWORD PTR tv137[ebp], 0
$LN11@nk_context:
	mov	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR _in$[ebp], ecx

; 22552:     if (nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
; 22553:         text, len, alignment, NK_BUTTON_DEFAULT, &style->contextual_button, in, style->font)) {

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 184				; 000000b8H
	push	eax
	push	0
	mov	ecx, DWORD PTR _alignment$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 5820				; 000016bcH
	push	edx
	call	_nk_do_button_text
	add	esp, 52					; 00000034H
	test	eax, eax
	je	SHORT $LN1@nk_context

; 22554:         nk_contextual_close(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_contextual_close
	add	esp, 4

; 22555:         return nk_true;

	mov	eax, 1
	jmp	SHORT $LN5@nk_context
$LN1@nk_context:

; 22556:     }
; 22557:     return nk_false;

	xor	eax, eax
$LN5@nk_context:

; 22558: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_context
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@nk_context:
	DD	1
	DD	$LN13@nk_context
$LN13@nk_context:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN12@nk_context
$LN12@nk_context:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_contextual_item_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_contextual_begin
_TEXT	SEGMENT
tv131 = -296						; size = 4
_ret$ = -96						; size = 4
_is_open$ = -84						; size = 4
_is_active$ = -72					; size = 4
_is_clicked$ = -60					; size = 4
_body$ = -48						; size = 16
_popup$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_flags$ = 12						; size = 4
_size$ = 16						; size = 8
_trigger_bounds$ = 24					; size = 16
_nk_contextual_begin PROC				; COMDAT

; 22476: {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 22477:     struct nk_window *win;
; 22478:     struct nk_window *popup;
; 22479:     struct nk_rect body;
; 22480: 
; 22481:     NK_STORAGE const struct nk_rect null_rect = {0,0,0,0};
; 22482:     int is_clicked = 0;

	mov	DWORD PTR _is_clicked$[ebp], 0

; 22483:     int is_active = 0;

	mov	DWORD PTR _is_active$[ebp], 0

; 22484:     int is_open = 0;

	mov	DWORD PTR _is_open$[ebp], 0

; 22485:     int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 22486: 
; 22487:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN14@nk_context
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_contextual_begin@@9@9
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_context:

; 22488:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN15@nk_context
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_contextual_begin@@9@9
	add	ecx, 12					; 0000000cH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@nk_context:

; 22489:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN16@nk_context
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_contextual_begin@@9@9
	add	edx, 13					; 0000000dH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN16@nk_context:

; 22490:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN10@nk_context
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN10@nk_context
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN11@nk_context
$LN10@nk_context:

; 22491:         return 0;

	xor	eax, eax
	jmp	$LN12@nk_context
$LN11@nk_context:

; 22492: 
; 22493:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 22494:     ++win->popup.con_count;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	add	ecx, 1
	mov	edx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [edx+292], ecx

; 22495: 
; 22496:     /* check if currently active contextual is active */
; 22497:     popup = win->popup.win;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	mov	DWORD PTR _popup$[ebp], ecx

; 22498:     is_open = (popup && win->popup.type == NK_PANEL_CONTEXTUAL);

	cmp	DWORD PTR _popup$[ebp], 0
	je	SHORT $LN17@nk_context
	mov	eax, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [eax+256], 16			; 00000010H
	jne	SHORT $LN17@nk_context
	mov	DWORD PTR tv131[ebp], 1
	jmp	SHORT $LN18@nk_context
$LN17@nk_context:
	mov	DWORD PTR tv131[ebp], 0
$LN18@nk_context:
	mov	ecx, DWORD PTR tv131[ebp]
	mov	DWORD PTR _is_open$[ebp], ecx

; 22499:     is_clicked = nk_input_mouse_clicked(&ctx->input, NK_BUTTON_RIGHT, trigger_bounds);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _trigger_bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _trigger_bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _trigger_bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _trigger_bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	push	2
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_input_mouse_clicked
	add	esp, 24					; 00000018H
	mov	DWORD PTR _is_clicked$[ebp], eax

; 22500:     if (win->popup.active_con && win->popup.con_count != win->popup.active_con)

	mov	eax, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [eax+300], 0
	je	SHORT $LN9@nk_context
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [eax+292]
	cmp	edx, DWORD PTR [ecx+300]
	je	SHORT $LN9@nk_context

; 22501:         return 0;

	xor	eax, eax
	jmp	$LN12@nk_context
$LN9@nk_context:

; 22502:     if ((is_clicked && is_open && !is_active) || (!is_open && !is_active && !is_clicked))

	cmp	DWORD PTR _is_clicked$[ebp], 0
	je	SHORT $LN6@nk_context
	cmp	DWORD PTR _is_open$[ebp], 0
	je	SHORT $LN6@nk_context
	cmp	DWORD PTR _is_active$[ebp], 0
	je	SHORT $LN7@nk_context
$LN6@nk_context:
	cmp	DWORD PTR _is_open$[ebp], 0
	jne	SHORT $LN8@nk_context
	cmp	DWORD PTR _is_active$[ebp], 0
	jne	SHORT $LN8@nk_context
	cmp	DWORD PTR _is_clicked$[ebp], 0
	jne	SHORT $LN8@nk_context
$LN7@nk_context:

; 22503:         return 0;

	xor	eax, eax
	jmp	$LN12@nk_context
$LN8@nk_context:

; 22504: 
; 22505:     /* calculate contextual position on click */
; 22506:     win->popup.active_con = win->popup.con_count;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	DWORD PTR [eax+300], edx

; 22507:     if (is_clicked) {

	cmp	DWORD PTR _is_clicked$[ebp], 0
	je	SHORT $LN5@nk_context

; 22508:         body.x = ctx->input.mouse.pos.x;

	mov	eax, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR [eax+324]
	movss	DWORD PTR _body$[ebp], xmm0

; 22509:         body.y = ctx->input.mouse.pos.y;

	mov	eax, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	movss	DWORD PTR _body$[ebp+4], xmm0

; 22510:     } else {

	jmp	SHORT $LN4@nk_context
$LN5@nk_context:

; 22511:         body.x = popup->bounds.x;

	mov	eax, DWORD PTR _popup$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	movss	DWORD PTR _body$[ebp], xmm0

; 22512:         body.y = popup->bounds.y;

	mov	eax, DWORD PTR _popup$[ebp]
	movss	xmm0, DWORD PTR [eax+80]
	movss	DWORD PTR _body$[ebp+4], xmm0
$LN4@nk_context:

; 22513:     }
; 22514:     body.w = size.x;

	movss	xmm0, DWORD PTR _size$[ebp]
	movss	DWORD PTR _body$[ebp+8], xmm0

; 22515:     body.h = size.y;

	movss	xmm0, DWORD PTR _size$[ebp+4]
	movss	DWORD PTR _body$[ebp+12], xmm0

; 22516: 
; 22517:     /* start nonblocking contextual popup */
; 22518:     ret = nk_nonblock_begin(ctx, flags|NK_WINDOW_NO_SCROLLBAR, body,
; 22519:             null_rect, NK_PANEL_CONTEXTUAL);

	push	16					; 00000010H
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR ?null_rect@?1??nk_contextual_begin@@9@9
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?null_rect@?1??nk_contextual_begin@@9@9+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR ?null_rect@?1??nk_contextual_begin@@9@9+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR ?null_rect@?1??nk_contextual_begin@@9@9+12
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _body$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _body$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _body$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _body$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_nonblock_begin
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _ret$[ebp], eax

; 22520:     if (ret) win->popup.type = NK_PANEL_CONTEXTUAL;

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN3@nk_context
	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+256], 16			; 00000010H

; 22521:     else {

	jmp	SHORT $LN1@nk_context
$LN3@nk_context:

; 22522:         win->popup.active_con = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+300], 0

; 22523:         if (win->popup.win)

	mov	eax, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [eax+252], 0
	je	SHORT $LN1@nk_context

; 22524:             win->popup.win->flags = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	mov	DWORD PTR [ecx+72], 0
$LN1@nk_context:

; 22525:     }
; 22526:     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN12@nk_context:

; 22527: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@nk_context
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN21@nk_context:
	DD	1
	DD	$LN20@nk_context
$LN20@nk_context:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN19@nk_context
$LN19@nk_context:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	121					; 00000079H
	DB	0
_nk_contextual_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_end
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_combo_end PROC					; COMDAT

; 23277: {nk_contextual_end(ctx);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_contextual_end
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_combo_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_close
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_combo_close PROC					; COMDAT

; 23280: {nk_contextual_close(ctx);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_contextual_close
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_combo_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_item_symbol_text
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_sym$ = 12						; size = 4
_text$ = 16						; size = 4
_len$ = 20						; size = 4
_alignment$ = 24					; size = 4
_nk_combo_item_symbol_text PROC				; COMDAT

; 23270: {return nk_contextual_item_symbol_text(ctx, sym, text, len, alignment);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _alignment$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _sym$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_contextual_item_symbol_text
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_combo_item_symbol_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_item_symbol_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_sym$ = 12						; size = 4
_label$ = 16						; size = 4
_alignment$ = 20					; size = 4
_nk_combo_item_symbol_label PROC			; COMDAT

; 23274: {return nk_contextual_item_symbol_label(ctx, sym, label, alignment);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _alignment$[ebp]
	push	eax
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sym$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_contextual_item_symbol_label
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_combo_item_symbol_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_item_image_text
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_img$ = 12						; size = 16
_text$ = 28						; size = 4
_len$ = 32						; size = 4
_alignment$ = 36					; size = 4
_nk_combo_item_image_text PROC				; COMDAT

; 23262: {return nk_contextual_item_image_text(ctx, img, text, len, alignment);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _alignment$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _img$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_contextual_item_image_text
	add	esp, 32					; 00000020H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_combo_item_image_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_item_image_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_img$ = 12						; size = 16
_text$ = 28						; size = 4
_alignment$ = 32					; size = 4
_nk_combo_item_image_label PROC				; COMDAT

; 23266: {return nk_contextual_item_image_label(ctx, img, text, alignment);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _alignment$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _img$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_contextual_item_image_label
	add	esp, 28					; 0000001cH
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_combo_item_image_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_item_text
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_text$ = 12						; size = 4
_len$ = 16						; size = 4
_align$ = 20						; size = 4
_nk_combo_item_text PROC				; COMDAT

; 23255: {return nk_contextual_item_text(ctx, text, len, align);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_contextual_item_text
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_combo_item_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_item_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_label$ = 12						; size = 4
_align$ = 16						; size = 4
_nk_combo_item_label PROC				; COMDAT

; 23258: {return nk_contextual_item_label(ctx, label, align);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_contextual_item_label
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_combo_item_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_begin_image_text
_TEXT	SEGMENT
tv135 = -428						; size = 4
_sym$1 = -228						; size = 4
_image$2 = -216						; size = 16
_label$3 = -192						; size = 16
_button$4 = -168					; size = 16
_content$5 = -144					; size = 16
_text$ = -120						; size = 16
_background$ = -96					; size = 4
_s$ = -84						; size = 4
_is_clicked$ = -72					; size = 4
_header$ = -60						; size = 16
_in$ = -36						; size = 4
_style$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_selected$ = 12						; size = 4
_len$ = 16						; size = 4
_img$ = 20						; size = 16
_size$ = 36						; size = 8
_nk_combo_begin_image_text PROC				; COMDAT

; 23157: {

	push	ebp
	mov	ebp, esp
	sub	esp, 428				; 000001acH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-428]
	mov	ecx, 107				; 0000006bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 23158:     struct nk_window *win;
; 23159:     struct nk_style *style;
; 23160:     struct nk_input *in;
; 23161: 
; 23162:     struct nk_rect header;
; 23163:     int is_clicked = nk_false;

	mov	DWORD PTR _is_clicked$[ebp], 0

; 23164:     enum nk_widget_layout_states s;
; 23165:     const struct nk_style_item *background;
; 23166:     struct nk_text text;
; 23167: 
; 23168:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN17@nk_combo_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_combo_begin_image_text@@9@9
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN17@nk_combo_b:

; 23169:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN18@nk_combo_b
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_combo_begin_image_text@@9@9
	add	ecx, 12					; 0000000cH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@nk_combo_b:

; 23170:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN19@nk_combo_b
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_combo_begin_image_text@@9@9
	add	edx, 13					; 0000000dH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@nk_combo_b:

; 23171:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN13@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN13@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN14@nk_combo_b
$LN13@nk_combo_b:

; 23172:         return 0;

	xor	eax, eax
	jmp	$LN15@nk_combo_b
$LN14@nk_combo_b:

; 23173: 
; 23174:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 23175:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 23176:     s = nk_widget(&header, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax

; 23177:     if (!s) return 0;

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN12@nk_combo_b
	xor	eax, eax
	jmp	$LN15@nk_combo_b
$LN12@nk_combo_b:

; 23178: 
; 23179:     in = (win->layout->flags & NK_WINDOW_ROM || s == NK_WIDGET_ROM)? 0: &ctx->input;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 4096				; 00001000H
	jne	SHORT $LN20@nk_combo_b
	cmp	DWORD PTR _s$[ebp], 2
	je	SHORT $LN20@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN21@nk_combo_b
$LN20@nk_combo_b:
	mov	DWORD PTR tv135[ebp], 0
$LN21@nk_combo_b:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR _in$[ebp], ecx

; 23180:     if (nk_button_behavior(&ctx->last_widget_state, header, in, NK_BUTTON_DEFAULT))

	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 5820				; 000016bcH
	push	ecx
	call	_nk_button_behavior
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN11@nk_combo_b

; 23181:         is_clicked = nk_true;

	mov	DWORD PTR _is_clicked$[ebp], 1
$LN11@nk_combo_b:

; 23182: 
; 23183:     /* draw combo box header background and border */
; 23184:     if (ctx->last_widget_state & NK_WIDGET_STATE_ACTIVED) {

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 32					; 00000020H
	je	SHORT $LN10@nk_combo_b

; 23185:         background = &style->combo.active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4612				; 00001204H
	mov	DWORD PTR _background$[ebp], eax

; 23186:         text.text = style->combo.label_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4644]
	mov	DWORD PTR _text$[ebp+12], ecx
	jmp	SHORT $LN7@nk_combo_b
$LN10@nk_combo_b:

; 23187:     } else if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER) {

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 16					; 00000010H
	je	SHORT $LN8@nk_combo_b

; 23188:         background = &style->combo.hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4592				; 000011f0H
	mov	DWORD PTR _background$[ebp], eax

; 23189:         text.text = style->combo.label_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4640]
	mov	DWORD PTR _text$[ebp+12], ecx

; 23190:     } else {

	jmp	SHORT $LN7@nk_combo_b
$LN8@nk_combo_b:

; 23191:         background = &style->combo.normal;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4572				; 000011dcH
	mov	DWORD PTR _background$[ebp], eax

; 23192:         text.text = style->combo.label_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4636]
	mov	DWORD PTR _text$[ebp+12], ecx
$LN7@nk_combo_b:

; 23193:     }
; 23194:     if (background->type == NK_STYLE_ITEM_IMAGE) {

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN6@nk_combo_b

; 23195:         text.background = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	DWORD PTR _text$[ebp+8], eax

; 23196:         nk_draw_image(&win->buffer, header, &background->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _background$[ebp]
	add	ecx, 4
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 23197:     } else {

	jmp	$LN5@nk_combo_b
$LN6@nk_combo_b:

; 23198:         text.background = background->data.color;

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _text$[ebp+8], ecx

; 23199:         nk_fill_rect(&win->buffer, header, style->combo.rounding, background->data.color);

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4804]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 23200:         nk_stroke_rect(&win->buffer, header, style->combo.rounding, style->combo.border, style->combo.border_color);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4632]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4800]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4804]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	_nk_stroke_rect
	add	esp, 32					; 00000020H
$LN5@nk_combo_b:

; 23201:     }
; 23202:     {
; 23203:         struct nk_rect content;
; 23204:         struct nk_rect button;
; 23205:         struct nk_rect label;
; 23206:         struct nk_rect image;
; 23207: 
; 23208:         enum nk_symbol_type sym;
; 23209:         if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER)

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 16					; 00000010H
	je	SHORT $LN4@nk_combo_b

; 23210:             sym = style->combo.sym_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4792]
	mov	DWORD PTR _sym$1[ebp], ecx
	jmp	SHORT $LN1@nk_combo_b
$LN4@nk_combo_b:

; 23211:         else if (is_clicked)

	cmp	DWORD PTR _is_clicked$[ebp], 0
	je	SHORT $LN2@nk_combo_b

; 23212:             sym = style->combo.sym_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4796]
	mov	DWORD PTR _sym$1[ebp], ecx
	jmp	SHORT $LN1@nk_combo_b
$LN2@nk_combo_b:

; 23213:         else sym = style->combo.sym_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4788]
	mov	DWORD PTR _sym$1[ebp], ecx
$LN1@nk_combo_b:

; 23214: 
; 23215:         /* calculate button */
; 23216:         button.w = header.h - 2 * style->combo.button_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4820]
	movss	xmm1, DWORD PTR _header$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _button$4[ebp+8], xmm1

; 23217:         button.x = (header.x + header.w - header.h) - style->combo.button_padding.x;

	movss	xmm0, DWORD PTR _header$[ebp]
	addss	xmm0, DWORD PTR _header$[ebp+8]
	subss	xmm0, DWORD PTR _header$[ebp+12]
	mov	eax, DWORD PTR _style$[ebp]
	subss	xmm0, DWORD PTR [eax+4816]
	movss	DWORD PTR _button$4[ebp], xmm0

; 23218:         button.y = header.y + style->combo.button_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp+4]
	addss	xmm0, DWORD PTR [eax+4820]
	movss	DWORD PTR _button$4[ebp+4], xmm0

; 23219:         button.h = button.w;

	movss	xmm0, DWORD PTR _button$4[ebp+8]
	movss	DWORD PTR _button$4[ebp+12], xmm0

; 23220: 
; 23221:         content.x = button.x + style->combo.button.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$4[ebp]
	addss	xmm0, DWORD PTR [eax+4752]
	movss	DWORD PTR _content$5[ebp], xmm0

; 23222:         content.y = button.y + style->combo.button.padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$4[ebp+4]
	addss	xmm0, DWORD PTR [eax+4756]
	movss	DWORD PTR _content$5[ebp+4], xmm0

; 23223:         content.w = button.w - 2 * style->combo.button.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4752]
	movss	xmm1, DWORD PTR _button$4[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _content$5[ebp+8], xmm1

; 23224:         content.h = button.h - 2 * style->combo.button.padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4756]
	movss	xmm1, DWORD PTR _button$4[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _content$5[ebp+12], xmm1

; 23225:         nk_draw_button_symbol(&win->buffer, &button, &content, ctx->last_widget_state,
; 23226:             &ctx->style.combo.button, sym, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sym$1[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5020				; 0000139cH
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+5820]
	push	edx
	lea	eax, DWORD PTR _content$5[ebp]
	push	eax
	lea	ecx, DWORD PTR _button$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_button_symbol
	add	esp, 28					; 0000001cH

; 23227: 
; 23228:         /* draw image */
; 23229:         image.x = header.x + style->combo.content_padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp]
	addss	xmm0, DWORD PTR [eax+4808]
	movss	DWORD PTR _image$2[ebp], xmm0

; 23230:         image.y = header.y + style->combo.content_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp+4]
	addss	xmm0, DWORD PTR [eax+4812]
	movss	DWORD PTR _image$2[ebp+4], xmm0

; 23231:         image.h = header.h - 2 * style->combo.content_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4812]
	movss	xmm1, DWORD PTR _header$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _image$2[ebp+12], xmm1

; 23232:         image.w = image.h;

	movss	xmm0, DWORD PTR _image$2[ebp+12]
	movss	DWORD PTR _image$2[ebp+8], xmm0

; 23233:         nk_draw_image(&win->buffer, image, &img, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	lea	ecx, DWORD PTR _img$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _image$2[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _image$2[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _image$2[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _image$2[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 23234: 
; 23235:         /* draw label */
; 23236:         text.padding = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _text$[ebp], eax
	mov	DWORD PTR _text$[ebp+4], edx

; 23237:         label.x = image.x + image.w + style->combo.spacing.x + style->combo.content_padding.x;

	movss	xmm0, DWORD PTR _image$2[ebp]
	addss	xmm0, DWORD PTR _image$2[ebp+8]
	mov	eax, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [eax+4824]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+4808]
	movss	DWORD PTR _label$3[ebp], xmm0

; 23238:         label.y = header.y + style->combo.content_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp+4]
	addss	xmm0, DWORD PTR [eax+4812]
	movss	DWORD PTR _label$3[ebp+4], xmm0

; 23239:         label.w = (button.x - style->combo.content_padding.x) - label.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$4[ebp]
	subss	xmm0, DWORD PTR [eax+4808]
	subss	xmm0, DWORD PTR _label$3[ebp]
	movss	DWORD PTR _label$3[ebp+8], xmm0

; 23240:         label.h = header.h - 2 * style->combo.content_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4812]
	movss	xmm1, DWORD PTR _header$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _label$3[ebp+12], xmm1

; 23241:         nk_widget_text(&win->buffer, label, selected, len, &text, NK_TEXT_LEFT, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	17					; 00000011H
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _selected$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _label$3[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _label$3[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _label$3[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _label$3[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_widget_text
	add	esp, 40					; 00000028H

; 23242:     }
; 23243:     return nk_combo_begin(ctx, win, size, is_clicked, header);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _is_clicked$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_combo_begin
	add	esp, 36					; 00000024H
$LN15@nk_combo_b:

; 23244: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@nk_combo_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 428				; 000001acH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN29@nk_combo_b:
	DD	6
	DD	$LN28@nk_combo_b
$LN28@nk_combo_b:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN22@nk_combo_b
	DD	-120					; ffffff88H
	DD	16					; 00000010H
	DD	$LN23@nk_combo_b
	DD	-144					; ffffff70H
	DD	16					; 00000010H
	DD	$LN24@nk_combo_b
	DD	-168					; ffffff58H
	DD	16					; 00000010H
	DD	$LN25@nk_combo_b
	DD	-192					; ffffff40H
	DD	16					; 00000010H
	DD	$LN26@nk_combo_b
	DD	-216					; ffffff28H
	DD	16					; 00000010H
	DD	$LN27@nk_combo_b
$LN27@nk_combo_b:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
$LN26@nk_combo_b:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN25@nk_combo_b:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN24@nk_combo_b:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN23@nk_combo_b:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN22@nk_combo_b:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_nk_combo_begin_image_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_begin_image_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_selected$ = 12						; size = 4
_img$ = 16						; size = 16
_size$ = 32						; size = 8
_nk_combo_begin_image_label PROC			; COMDAT

; 23252: {return nk_combo_begin_image_text(ctx, selected, nk_strlen(selected), img, size);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _img$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _selected$[ebp]
	push	edx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _selected$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_combo_begin_image_text
	add	esp, 36					; 00000024H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_combo_begin_image_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_begin_image
_TEXT	SEGMENT
tv135 = -380						; size = 4
_sym$1 = -180						; size = 4
_button$2 = -168					; size = 16
_content$3 = -144					; size = 16
_bounds$4 = -120					; size = 16
_background$ = -96					; size = 4
_s$ = -84						; size = 4
_is_clicked$ = -72					; size = 4
_header$ = -60						; size = 16
_in$ = -36						; size = 4
_style$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_img$ = 12						; size = 16
_size$ = 28						; size = 8
_nk_combo_begin_image PROC				; COMDAT

; 23078: {

	push	ebp
	mov	ebp, esp
	sub	esp, 380				; 0000017cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-380]
	mov	ecx, 95					; 0000005fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 23079:     struct nk_window *win;
; 23080:     struct nk_style *style;
; 23081:     const struct nk_input *in;
; 23082: 
; 23083:     struct nk_rect header;
; 23084:     int is_clicked = nk_false;

	mov	DWORD PTR _is_clicked$[ebp], 0

; 23085:     enum nk_widget_layout_states s;
; 23086:     const struct nk_style_item *background;
; 23087: 
; 23088:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN17@nk_combo_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_combo_begin_image@@9@9
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN17@nk_combo_b:

; 23089:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN18@nk_combo_b
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_combo_begin_image@@9@9
	add	ecx, 11					; 0000000bH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@nk_combo_b:

; 23090:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN19@nk_combo_b
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_combo_begin_image@@9@9
	add	edx, 12					; 0000000cH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@nk_combo_b:

; 23091:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN13@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN13@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN14@nk_combo_b
$LN13@nk_combo_b:

; 23092:         return 0;

	xor	eax, eax
	jmp	$LN15@nk_combo_b
$LN14@nk_combo_b:

; 23093: 
; 23094:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 23095:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 23096:     s = nk_widget(&header, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax

; 23097:     if (s == NK_WIDGET_INVALID)

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN12@nk_combo_b

; 23098:         return 0;

	xor	eax, eax
	jmp	$LN15@nk_combo_b
$LN12@nk_combo_b:

; 23099: 
; 23100:     in = (win->layout->flags & NK_WINDOW_ROM || s == NK_WIDGET_ROM)? 0: &ctx->input;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 4096				; 00001000H
	jne	SHORT $LN20@nk_combo_b
	cmp	DWORD PTR _s$[ebp], 2
	je	SHORT $LN20@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN21@nk_combo_b
$LN20@nk_combo_b:
	mov	DWORD PTR tv135[ebp], 0
$LN21@nk_combo_b:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR _in$[ebp], ecx

; 23101:     if (nk_button_behavior(&ctx->last_widget_state, header, in, NK_BUTTON_DEFAULT))

	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 5820				; 000016bcH
	push	ecx
	call	_nk_button_behavior
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN11@nk_combo_b

; 23102:         is_clicked = nk_true;

	mov	DWORD PTR _is_clicked$[ebp], 1
$LN11@nk_combo_b:

; 23103: 
; 23104:     /* draw combo box header background and border */
; 23105:     if (ctx->last_widget_state & NK_WIDGET_STATE_ACTIVED)

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 32					; 00000020H
	je	SHORT $LN10@nk_combo_b

; 23106:         background = &style->combo.active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4612				; 00001204H
	mov	DWORD PTR _background$[ebp], eax
	jmp	SHORT $LN7@nk_combo_b
$LN10@nk_combo_b:

; 23107:     else if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER)

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 16					; 00000010H
	je	SHORT $LN8@nk_combo_b

; 23108:         background = &style->combo.hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4592				; 000011f0H
	mov	DWORD PTR _background$[ebp], eax
	jmp	SHORT $LN7@nk_combo_b
$LN8@nk_combo_b:

; 23109:     else background = &style->combo.normal;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4572				; 000011dcH
	mov	DWORD PTR _background$[ebp], eax
$LN7@nk_combo_b:

; 23110: 
; 23111:     if (background->type == NK_STYLE_ITEM_IMAGE) {

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN6@nk_combo_b

; 23112:         nk_draw_image(&win->buffer, header, &background->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _background$[ebp]
	add	ecx, 4
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 23113:     } else {

	jmp	$LN5@nk_combo_b
$LN6@nk_combo_b:

; 23114:         nk_fill_rect(&win->buffer, header, style->combo.rounding, background->data.color);

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4804]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 23115:         nk_stroke_rect(&win->buffer, header, style->combo.rounding, style->combo.border, style->combo.border_color);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4632]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4800]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4804]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	_nk_stroke_rect
	add	esp, 32					; 00000020H
$LN5@nk_combo_b:

; 23116:     }
; 23117:     {
; 23118:         struct nk_rect bounds = {0,0,0,0};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _bounds$4[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _bounds$4[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _bounds$4[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _bounds$4[ebp+12], xmm0

; 23119:         struct nk_rect content;
; 23120:         struct nk_rect button;
; 23121: 
; 23122:         enum nk_symbol_type sym;
; 23123:         if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER)

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 16					; 00000010H
	je	SHORT $LN4@nk_combo_b

; 23124:             sym = style->combo.sym_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4792]
	mov	DWORD PTR _sym$1[ebp], ecx
	jmp	SHORT $LN1@nk_combo_b
$LN4@nk_combo_b:

; 23125:         else if (is_clicked)

	cmp	DWORD PTR _is_clicked$[ebp], 0
	je	SHORT $LN2@nk_combo_b

; 23126:             sym = style->combo.sym_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4796]
	mov	DWORD PTR _sym$1[ebp], ecx
	jmp	SHORT $LN1@nk_combo_b
$LN2@nk_combo_b:

; 23127:         else sym = style->combo.sym_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4788]
	mov	DWORD PTR _sym$1[ebp], ecx
$LN1@nk_combo_b:

; 23128: 
; 23129:         /* calculate button */
; 23130:         button.w = header.h - 2 * style->combo.button_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4820]
	movss	xmm1, DWORD PTR _header$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _button$2[ebp+8], xmm1

; 23131:         button.x = (header.x + header.w - header.h) - style->combo.button_padding.y;

	movss	xmm0, DWORD PTR _header$[ebp]
	addss	xmm0, DWORD PTR _header$[ebp+8]
	subss	xmm0, DWORD PTR _header$[ebp+12]
	mov	eax, DWORD PTR _style$[ebp]
	subss	xmm0, DWORD PTR [eax+4820]
	movss	DWORD PTR _button$2[ebp], xmm0

; 23132:         button.y = header.y + style->combo.button_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp+4]
	addss	xmm0, DWORD PTR [eax+4820]
	movss	DWORD PTR _button$2[ebp+4], xmm0

; 23133:         button.h = button.w;

	movss	xmm0, DWORD PTR _button$2[ebp+8]
	movss	DWORD PTR _button$2[ebp+12], xmm0

; 23134: 
; 23135:         content.x = button.x + style->combo.button.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$2[ebp]
	addss	xmm0, DWORD PTR [eax+4752]
	movss	DWORD PTR _content$3[ebp], xmm0

; 23136:         content.y = button.y + style->combo.button.padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$2[ebp+4]
	addss	xmm0, DWORD PTR [eax+4756]
	movss	DWORD PTR _content$3[ebp+4], xmm0

; 23137:         content.w = button.w - 2 * style->combo.button.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4752]
	movss	xmm1, DWORD PTR _button$2[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _content$3[ebp+8], xmm1

; 23138:         content.h = button.h - 2 * style->combo.button.padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4756]
	movss	xmm1, DWORD PTR _button$2[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _content$3[ebp+12], xmm1

; 23139: 
; 23140:         /* draw image */
; 23141:         bounds.h = header.h - 2 * style->combo.content_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4812]
	movss	xmm1, DWORD PTR _header$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _bounds$4[ebp+12], xmm1

; 23142:         bounds.y = header.y + style->combo.content_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp+4]
	addss	xmm0, DWORD PTR [eax+4812]
	movss	DWORD PTR _bounds$4[ebp+4], xmm0

; 23143:         bounds.x = header.x + style->combo.content_padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp]
	addss	xmm0, DWORD PTR [eax+4808]
	movss	DWORD PTR _bounds$4[ebp], xmm0

; 23144:         bounds.w = (button.x - style->combo.content_padding.y) - bounds.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$2[ebp]
	subss	xmm0, DWORD PTR [eax+4812]
	subss	xmm0, DWORD PTR _bounds$4[ebp]
	movss	DWORD PTR _bounds$4[ebp+8], xmm0

; 23145:         nk_draw_image(&win->buffer, bounds, &img, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	lea	ecx, DWORD PTR _img$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _bounds$4[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _bounds$4[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _bounds$4[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _bounds$4[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 23146: 
; 23147:         /* draw open/close button */
; 23148:         nk_draw_button_symbol(&win->buffer, &bounds, &content, ctx->last_widget_state,
; 23149:             &ctx->style.combo.button, sym, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sym$1[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5020				; 0000139cH
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+5820]
	push	edx
	lea	eax, DWORD PTR _content$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_button_symbol
	add	esp, 28					; 0000001cH

; 23150:     }
; 23151:     return nk_combo_begin(ctx, win, size, is_clicked, header);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _is_clicked$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_combo_begin
	add	esp, 36					; 00000024H
$LN15@nk_combo_b:

; 23152: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@nk_combo_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 380				; 0000017cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@nk_combo_b:
	DD	4
	DD	$LN26@nk_combo_b
$LN26@nk_combo_b:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN22@nk_combo_b
	DD	-120					; ffffff88H
	DD	16					; 00000010H
	DD	$LN23@nk_combo_b
	DD	-144					; ffffff70H
	DD	16					; 00000010H
	DD	$LN24@nk_combo_b
	DD	-168					; ffffff58H
	DD	16					; 00000010H
	DD	$LN25@nk_combo_b
$LN25@nk_combo_b:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN24@nk_combo_b:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN23@nk_combo_b:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN22@nk_combo_b:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_nk_combo_begin_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_begin_symbol_text
_TEXT	SEGMENT
tv135 = -440						; size = 4
_sym$1 = -240						; size = 4
_image$2 = -228						; size = 16
_label$3 = -204						; size = 16
_button$4 = -180					; size = 16
_content$5 = -156					; size = 16
_text$ = -132						; size = 16
_symbol_color$ = -108					; size = 4
_background$ = -96					; size = 4
_s$ = -84						; size = 4
_is_clicked$ = -72					; size = 4
_header$ = -60						; size = 16
_in$ = -36						; size = 4
_style$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_selected$ = 12						; size = 4
_len$ = 16						; size = 4
_symbol$ = 20						; size = 4
_size$ = 24						; size = 8
_nk_combo_begin_symbol_text PROC			; COMDAT

; 22982: {

	push	ebp
	mov	ebp, esp
	sub	esp, 440				; 000001b8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-440]
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 22983:     struct nk_window *win;
; 22984:     struct nk_style *style;
; 22985:     struct nk_input *in;
; 22986: 
; 22987:     struct nk_rect header;
; 22988:     int is_clicked = nk_false;

	mov	DWORD PTR _is_clicked$[ebp], 0

; 22989:     enum nk_widget_layout_states s;
; 22990:     const struct nk_style_item *background;
; 22991:     struct nk_color symbol_color;
; 22992:     struct nk_text text;
; 22993: 
; 22994:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN17@nk_combo_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_combo_begin_symbol_text@@9@9
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN17@nk_combo_b:

; 22995:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN18@nk_combo_b
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_combo_begin_symbol_text@@9@9
	add	ecx, 13					; 0000000dH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@nk_combo_b:

; 22996:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN19@nk_combo_b
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_combo_begin_symbol_text@@9@9
	add	edx, 14					; 0000000eH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@nk_combo_b:

; 22997:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN13@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN13@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN14@nk_combo_b
$LN13@nk_combo_b:

; 22998:         return 0;

	xor	eax, eax
	jmp	$LN15@nk_combo_b
$LN14@nk_combo_b:

; 22999: 
; 23000:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 23001:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 23002:     s = nk_widget(&header, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax

; 23003:     if (!s) return 0;

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN12@nk_combo_b
	xor	eax, eax
	jmp	$LN15@nk_combo_b
$LN12@nk_combo_b:

; 23004: 
; 23005:     in = (win->layout->flags & NK_WINDOW_ROM || s == NK_WIDGET_ROM)? 0: &ctx->input;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 4096				; 00001000H
	jne	SHORT $LN20@nk_combo_b
	cmp	DWORD PTR _s$[ebp], 2
	je	SHORT $LN20@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN21@nk_combo_b
$LN20@nk_combo_b:
	mov	DWORD PTR tv135[ebp], 0
$LN21@nk_combo_b:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR _in$[ebp], ecx

; 23006:     if (nk_button_behavior(&ctx->last_widget_state, header, in, NK_BUTTON_DEFAULT))

	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 5820				; 000016bcH
	push	ecx
	call	_nk_button_behavior
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN11@nk_combo_b

; 23007:         is_clicked = nk_true;

	mov	DWORD PTR _is_clicked$[ebp], 1
$LN11@nk_combo_b:

; 23008: 
; 23009:     /* draw combo box header background and border */
; 23010:     if (ctx->last_widget_state & NK_WIDGET_STATE_ACTIVED) {

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 32					; 00000020H
	je	SHORT $LN10@nk_combo_b

; 23011:         background = &style->combo.active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4612				; 00001204H
	mov	DWORD PTR _background$[ebp], eax

; 23012:         symbol_color = style->combo.symbol_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4656]
	mov	DWORD PTR _symbol_color$[ebp], ecx

; 23013:         text.text = style->combo.label_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4644]
	mov	DWORD PTR _text$[ebp+12], ecx
	jmp	SHORT $LN7@nk_combo_b
$LN10@nk_combo_b:

; 23014:     } else if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER) {

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 16					; 00000010H
	je	SHORT $LN8@nk_combo_b

; 23015:         background = &style->combo.hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4592				; 000011f0H
	mov	DWORD PTR _background$[ebp], eax

; 23016:         symbol_color = style->combo.symbol_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4652]
	mov	DWORD PTR _symbol_color$[ebp], ecx

; 23017:         text.text = style->combo.label_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4640]
	mov	DWORD PTR _text$[ebp+12], ecx

; 23018:     } else {

	jmp	SHORT $LN7@nk_combo_b
$LN8@nk_combo_b:

; 23019:         background = &style->combo.normal;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4572				; 000011dcH
	mov	DWORD PTR _background$[ebp], eax

; 23020:         symbol_color = style->combo.symbol_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4648]
	mov	DWORD PTR _symbol_color$[ebp], ecx

; 23021:         text.text = style->combo.label_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4636]
	mov	DWORD PTR _text$[ebp+12], ecx
$LN7@nk_combo_b:

; 23022:     }
; 23023:     if (background->type == NK_STYLE_ITEM_IMAGE) {

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN6@nk_combo_b

; 23024:         text.background = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	DWORD PTR _text$[ebp+8], eax

; 23025:         nk_draw_image(&win->buffer, header, &background->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _background$[ebp]
	add	ecx, 4
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 23026:     } else {

	jmp	$LN5@nk_combo_b
$LN6@nk_combo_b:

; 23027:         text.background = background->data.color;

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _text$[ebp+8], ecx

; 23028:         nk_fill_rect(&win->buffer, header, style->combo.rounding, background->data.color);

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4804]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 23029:         nk_stroke_rect(&win->buffer, header, style->combo.rounding, style->combo.border, style->combo.border_color);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4632]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4800]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4804]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	_nk_stroke_rect
	add	esp, 32					; 00000020H
$LN5@nk_combo_b:

; 23030:     }
; 23031:     {
; 23032:         struct nk_rect content;
; 23033:         struct nk_rect button;
; 23034:         struct nk_rect label;
; 23035:         struct nk_rect image;
; 23036: 
; 23037:         enum nk_symbol_type sym;
; 23038:         if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER)

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 16					; 00000010H
	je	SHORT $LN4@nk_combo_b

; 23039:             sym = style->combo.sym_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4792]
	mov	DWORD PTR _sym$1[ebp], ecx
	jmp	SHORT $LN1@nk_combo_b
$LN4@nk_combo_b:

; 23040:         else if (is_clicked)

	cmp	DWORD PTR _is_clicked$[ebp], 0
	je	SHORT $LN2@nk_combo_b

; 23041:             sym = style->combo.sym_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4796]
	mov	DWORD PTR _sym$1[ebp], ecx
	jmp	SHORT $LN1@nk_combo_b
$LN2@nk_combo_b:

; 23042:         else sym = style->combo.sym_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4788]
	mov	DWORD PTR _sym$1[ebp], ecx
$LN1@nk_combo_b:

; 23043: 
; 23044:         /* calculate button */
; 23045:         button.w = header.h - 2 * style->combo.button_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4820]
	movss	xmm1, DWORD PTR _header$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _button$4[ebp+8], xmm1

; 23046:         button.x = (header.x + header.w - header.h) - style->combo.button_padding.x;

	movss	xmm0, DWORD PTR _header$[ebp]
	addss	xmm0, DWORD PTR _header$[ebp+8]
	subss	xmm0, DWORD PTR _header$[ebp+12]
	mov	eax, DWORD PTR _style$[ebp]
	subss	xmm0, DWORD PTR [eax+4816]
	movss	DWORD PTR _button$4[ebp], xmm0

; 23047:         button.y = header.y + style->combo.button_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp+4]
	addss	xmm0, DWORD PTR [eax+4820]
	movss	DWORD PTR _button$4[ebp+4], xmm0

; 23048:         button.h = button.w;

	movss	xmm0, DWORD PTR _button$4[ebp+8]
	movss	DWORD PTR _button$4[ebp+12], xmm0

; 23049: 
; 23050:         content.x = button.x + style->combo.button.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$4[ebp]
	addss	xmm0, DWORD PTR [eax+4752]
	movss	DWORD PTR _content$5[ebp], xmm0

; 23051:         content.y = button.y + style->combo.button.padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$4[ebp+4]
	addss	xmm0, DWORD PTR [eax+4756]
	movss	DWORD PTR _content$5[ebp+4], xmm0

; 23052:         content.w = button.w - 2 * style->combo.button.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4752]
	movss	xmm1, DWORD PTR _button$4[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _content$5[ebp+8], xmm1

; 23053:         content.h = button.h - 2 * style->combo.button.padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4756]
	movss	xmm1, DWORD PTR _button$4[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _content$5[ebp+12], xmm1

; 23054:         nk_draw_button_symbol(&win->buffer, &button, &content, ctx->last_widget_state,
; 23055:             &ctx->style.combo.button, sym, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sym$1[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5020				; 0000139cH
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+5820]
	push	edx
	lea	eax, DWORD PTR _content$5[ebp]
	push	eax
	lea	ecx, DWORD PTR _button$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_button_symbol
	add	esp, 28					; 0000001cH

; 23056: 
; 23057:         /* draw symbol */
; 23058:         image.x = header.x + style->combo.content_padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp]
	addss	xmm0, DWORD PTR [eax+4808]
	movss	DWORD PTR _image$2[ebp], xmm0

; 23059:         image.y = header.y + style->combo.content_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp+4]
	addss	xmm0, DWORD PTR [eax+4812]
	movss	DWORD PTR _image$2[ebp+4], xmm0

; 23060:         image.h = header.h - 2 * style->combo.content_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4812]
	movss	xmm1, DWORD PTR _header$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _image$2[ebp+12], xmm1

; 23061:         image.w = image.h;

	movss	xmm0, DWORD PTR _image$2[ebp+12]
	movss	DWORD PTR _image$2[ebp+8], xmm0

; 23062:         nk_draw_symbol(&win->buffer, symbol, image, text.background, symbol_color,
; 23063:             1.0f, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _symbol_color$[ebp]
	push	edx
	mov	eax, DWORD PTR _text$[ebp+8]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _image$2[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _image$2[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _image$2[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _image$2[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _symbol$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_symbol
	add	esp, 40					; 00000028H

; 23064: 
; 23065:         /* draw label */
; 23066:         text.padding = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _text$[ebp], eax
	mov	DWORD PTR _text$[ebp+4], edx

; 23067:         label.x = image.x + image.w + style->combo.spacing.x + style->combo.content_padding.x;

	movss	xmm0, DWORD PTR _image$2[ebp]
	addss	xmm0, DWORD PTR _image$2[ebp+8]
	mov	eax, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [eax+4824]
	mov	ecx, DWORD PTR _style$[ebp]
	addss	xmm0, DWORD PTR [ecx+4808]
	movss	DWORD PTR _label$3[ebp], xmm0

; 23068:         label.y = header.y + style->combo.content_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp+4]
	addss	xmm0, DWORD PTR [eax+4812]
	movss	DWORD PTR _label$3[ebp+4], xmm0

; 23069:         label.w = (button.x - style->combo.content_padding.x) - label.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$4[ebp]
	subss	xmm0, DWORD PTR [eax+4808]
	subss	xmm0, DWORD PTR _label$3[ebp]
	movss	DWORD PTR _label$3[ebp+8], xmm0

; 23070:         label.h = header.h - 2 * style->combo.content_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4812]
	movss	xmm1, DWORD PTR _header$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _label$3[ebp+12], xmm1

; 23071:         nk_widget_text(&win->buffer, label, selected, len, &text, NK_TEXT_LEFT, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	17					; 00000011H
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _selected$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _label$3[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _label$3[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _label$3[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _label$3[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_widget_text
	add	esp, 40					; 00000028H

; 23072:     }
; 23073:     return nk_combo_begin(ctx, win, size, is_clicked, header);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _is_clicked$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_combo_begin
	add	esp, 36					; 00000024H
$LN15@nk_combo_b:

; 23074: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@nk_combo_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 440				; 000001b8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN30@nk_combo_b:
	DD	7
	DD	$LN29@nk_combo_b
$LN29@nk_combo_b:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN22@nk_combo_b
	DD	-108					; ffffff94H
	DD	4
	DD	$LN23@nk_combo_b
	DD	-132					; ffffff7cH
	DD	16					; 00000010H
	DD	$LN24@nk_combo_b
	DD	-156					; ffffff64H
	DD	16					; 00000010H
	DD	$LN25@nk_combo_b
	DD	-180					; ffffff4cH
	DD	16					; 00000010H
	DD	$LN26@nk_combo_b
	DD	-204					; ffffff34H
	DD	16					; 00000010H
	DD	$LN27@nk_combo_b
	DD	-228					; ffffff1cH
	DD	16					; 00000010H
	DD	$LN28@nk_combo_b
$LN28@nk_combo_b:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
$LN27@nk_combo_b:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN26@nk_combo_b:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN25@nk_combo_b:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN24@nk_combo_b:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN23@nk_combo_b:
	DB	115					; 00000073H
	DB	121					; 00000079H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN22@nk_combo_b:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_nk_combo_begin_symbol_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_begin_symbol_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_selected$ = 12						; size = 4
_type$ = 16						; size = 4
_size$ = 20						; size = 8
_nk_combo_begin_symbol_label PROC			; COMDAT

; 23248: {return nk_combo_begin_symbol_text(ctx, selected, nk_strlen(selected), type, size);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	mov	eax, DWORD PTR _selected$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _selected$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_combo_begin_symbol_text
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_combo_begin_symbol_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_begin_symbol
_TEXT	SEGMENT
tv135 = -404						; size = 4
_sym$1 = -204						; size = 4
_button$2 = -192					; size = 16
_content$3 = -168					; size = 16
_bounds$4 = -144					; size = 16
_symbol_color$ = -120					; size = 4
_sym_background$ = -108					; size = 4
_background$ = -96					; size = 4
_s$ = -84						; size = 4
_is_clicked$ = -72					; size = 4
_header$ = -60						; size = 16
_in$ = -36						; size = 4
_style$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_symbol$ = 12						; size = 4
_size$ = 16						; size = 8
_nk_combo_begin_symbol PROC				; COMDAT

; 22893: {

	push	ebp
	mov	ebp, esp
	sub	esp, 404				; 00000194H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-404]
	mov	ecx, 101				; 00000065H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 22894:     struct nk_window *win;
; 22895:     struct nk_style *style;
; 22896:     const struct nk_input *in;
; 22897: 
; 22898:     struct nk_rect header;
; 22899:     int is_clicked = nk_false;

	mov	DWORD PTR _is_clicked$[ebp], 0

; 22900:     enum nk_widget_layout_states s;
; 22901:     const struct nk_style_item *background;
; 22902:     struct nk_color sym_background;
; 22903:     struct nk_color symbol_color;
; 22904: 
; 22905:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN17@nk_combo_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_combo_begin_symbol@@9@9
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN17@nk_combo_b:

; 22906:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN18@nk_combo_b
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_combo_begin_symbol@@9@9
	add	ecx, 13					; 0000000dH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@nk_combo_b:

; 22907:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN19@nk_combo_b
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_combo_begin_symbol@@9@9
	add	edx, 14					; 0000000eH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@nk_combo_b:

; 22908:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN13@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN13@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN14@nk_combo_b
$LN13@nk_combo_b:

; 22909:         return 0;

	xor	eax, eax
	jmp	$LN15@nk_combo_b
$LN14@nk_combo_b:

; 22910: 
; 22911:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 22912:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 22913:     s = nk_widget(&header, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax

; 22914:     if (s == NK_WIDGET_INVALID)

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN12@nk_combo_b

; 22915:         return 0;

	xor	eax, eax
	jmp	$LN15@nk_combo_b
$LN12@nk_combo_b:

; 22916: 
; 22917:     in = (win->layout->flags & NK_WINDOW_ROM || s == NK_WIDGET_ROM)? 0: &ctx->input;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 4096				; 00001000H
	jne	SHORT $LN20@nk_combo_b
	cmp	DWORD PTR _s$[ebp], 2
	je	SHORT $LN20@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN21@nk_combo_b
$LN20@nk_combo_b:
	mov	DWORD PTR tv135[ebp], 0
$LN21@nk_combo_b:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR _in$[ebp], ecx

; 22918:     if (nk_button_behavior(&ctx->last_widget_state, header, in, NK_BUTTON_DEFAULT))

	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 5820				; 000016bcH
	push	ecx
	call	_nk_button_behavior
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN11@nk_combo_b

; 22919:         is_clicked = nk_true;

	mov	DWORD PTR _is_clicked$[ebp], 1
$LN11@nk_combo_b:

; 22920: 
; 22921:     /* draw combo box header background and border */
; 22922:     if (ctx->last_widget_state & NK_WIDGET_STATE_ACTIVED) {

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 32					; 00000020H
	je	SHORT $LN10@nk_combo_b

; 22923:         background = &style->combo.active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4612				; 00001204H
	mov	DWORD PTR _background$[ebp], eax

; 22924:         symbol_color = style->combo.symbol_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4656]
	mov	DWORD PTR _symbol_color$[ebp], ecx
	jmp	SHORT $LN7@nk_combo_b
$LN10@nk_combo_b:

; 22925:     } else if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER) {

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 16					; 00000010H
	je	SHORT $LN8@nk_combo_b

; 22926:         background = &style->combo.hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4592				; 000011f0H
	mov	DWORD PTR _background$[ebp], eax

; 22927:         symbol_color = style->combo.symbol_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4652]
	mov	DWORD PTR _symbol_color$[ebp], ecx

; 22928:     } else {

	jmp	SHORT $LN7@nk_combo_b
$LN8@nk_combo_b:

; 22929:         background = &style->combo.normal;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4572				; 000011dcH
	mov	DWORD PTR _background$[ebp], eax

; 22930:         symbol_color = style->combo.symbol_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4652]
	mov	DWORD PTR _symbol_color$[ebp], ecx
$LN7@nk_combo_b:

; 22931:     }
; 22932: 
; 22933:     if (background->type == NK_STYLE_ITEM_IMAGE) {

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN6@nk_combo_b

; 22934:         sym_background = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	DWORD PTR _sym_background$[ebp], eax

; 22935:         nk_draw_image(&win->buffer, header, &background->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _background$[ebp]
	add	ecx, 4
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 22936:     } else {

	jmp	$LN5@nk_combo_b
$LN6@nk_combo_b:

; 22937:         sym_background = background->data.color;

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _sym_background$[ebp], ecx

; 22938:         nk_fill_rect(&win->buffer, header, style->combo.rounding, background->data.color);

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4804]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 22939:         nk_stroke_rect(&win->buffer, header, style->combo.rounding, style->combo.border, style->combo.border_color);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4632]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4800]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4804]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	_nk_stroke_rect
	add	esp, 32					; 00000020H
$LN5@nk_combo_b:

; 22940:     }
; 22941:     {
; 22942:         struct nk_rect bounds = {0,0,0,0};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _bounds$4[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _bounds$4[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _bounds$4[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _bounds$4[ebp+12], xmm0

; 22943:         struct nk_rect content;
; 22944:         struct nk_rect button;
; 22945: 
; 22946:         enum nk_symbol_type sym;
; 22947:         if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER)

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 16					; 00000010H
	je	SHORT $LN4@nk_combo_b

; 22948:             sym = style->combo.sym_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4792]
	mov	DWORD PTR _sym$1[ebp], ecx
	jmp	SHORT $LN1@nk_combo_b
$LN4@nk_combo_b:

; 22949:         else if (is_clicked)

	cmp	DWORD PTR _is_clicked$[ebp], 0
	je	SHORT $LN2@nk_combo_b

; 22950:             sym = style->combo.sym_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4796]
	mov	DWORD PTR _sym$1[ebp], ecx
	jmp	SHORT $LN1@nk_combo_b
$LN2@nk_combo_b:

; 22951:         else sym = style->combo.sym_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4788]
	mov	DWORD PTR _sym$1[ebp], ecx
$LN1@nk_combo_b:

; 22952: 
; 22953:         /* calculate button */
; 22954:         button.w = header.h - 2 * style->combo.button_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4820]
	movss	xmm1, DWORD PTR _header$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _button$2[ebp+8], xmm1

; 22955:         button.x = (header.x + header.w - header.h) - style->combo.button_padding.y;

	movss	xmm0, DWORD PTR _header$[ebp]
	addss	xmm0, DWORD PTR _header$[ebp+8]
	subss	xmm0, DWORD PTR _header$[ebp+12]
	mov	eax, DWORD PTR _style$[ebp]
	subss	xmm0, DWORD PTR [eax+4820]
	movss	DWORD PTR _button$2[ebp], xmm0

; 22956:         button.y = header.y + style->combo.button_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp+4]
	addss	xmm0, DWORD PTR [eax+4820]
	movss	DWORD PTR _button$2[ebp+4], xmm0

; 22957:         button.h = button.w;

	movss	xmm0, DWORD PTR _button$2[ebp+8]
	movss	DWORD PTR _button$2[ebp+12], xmm0

; 22958: 
; 22959:         content.x = button.x + style->combo.button.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$2[ebp]
	addss	xmm0, DWORD PTR [eax+4752]
	movss	DWORD PTR _content$3[ebp], xmm0

; 22960:         content.y = button.y + style->combo.button.padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$2[ebp+4]
	addss	xmm0, DWORD PTR [eax+4756]
	movss	DWORD PTR _content$3[ebp+4], xmm0

; 22961:         content.w = button.w - 2 * style->combo.button.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4752]
	movss	xmm1, DWORD PTR _button$2[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _content$3[ebp+8], xmm1

; 22962:         content.h = button.h - 2 * style->combo.button.padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4756]
	movss	xmm1, DWORD PTR _button$2[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _content$3[ebp+12], xmm1

; 22963: 
; 22964:         /* draw symbol */
; 22965:         bounds.h = header.h - 2 * style->combo.content_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4812]
	movss	xmm1, DWORD PTR _header$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _bounds$4[ebp+12], xmm1

; 22966:         bounds.y = header.y + style->combo.content_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp+4]
	addss	xmm0, DWORD PTR [eax+4812]
	movss	DWORD PTR _bounds$4[ebp+4], xmm0

; 22967:         bounds.x = header.x + style->combo.content_padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp]
	addss	xmm0, DWORD PTR [eax+4808]
	movss	DWORD PTR _bounds$4[ebp], xmm0

; 22968:         bounds.w = (button.x - style->combo.content_padding.y) - bounds.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$2[ebp]
	subss	xmm0, DWORD PTR [eax+4812]
	subss	xmm0, DWORD PTR _bounds$4[ebp]
	movss	DWORD PTR _bounds$4[ebp+8], xmm0

; 22969:         nk_draw_symbol(&win->buffer, symbol, bounds, sym_background, symbol_color,
; 22970:             1.0f, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _symbol_color$[ebp]
	push	edx
	mov	eax, DWORD PTR _sym_background$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$4[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$4[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$4[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$4[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _symbol$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_symbol
	add	esp, 40					; 00000028H

; 22971: 
; 22972:         /* draw open/close button */
; 22973:         nk_draw_button_symbol(&win->buffer, &bounds, &content, ctx->last_widget_state,
; 22974:             &ctx->style.combo.button, sym, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sym$1[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5020				; 0000139cH
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+5820]
	push	edx
	lea	eax, DWORD PTR _content$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_button_symbol
	add	esp, 28					; 0000001cH

; 22975:     }
; 22976:     return nk_combo_begin(ctx, win, size, is_clicked, header);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _is_clicked$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_combo_begin
	add	esp, 36					; 00000024H
$LN15@nk_combo_b:

; 22977: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@nk_combo_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 404				; 00000194H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN29@nk_combo_b:
	DD	6
	DD	$LN28@nk_combo_b
$LN28@nk_combo_b:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN22@nk_combo_b
	DD	-108					; ffffff94H
	DD	4
	DD	$LN23@nk_combo_b
	DD	-120					; ffffff88H
	DD	4
	DD	$LN24@nk_combo_b
	DD	-144					; ffffff70H
	DD	16					; 00000010H
	DD	$LN25@nk_combo_b
	DD	-168					; ffffff58H
	DD	16					; 00000010H
	DD	$LN26@nk_combo_b
	DD	-192					; ffffff40H
	DD	16					; 00000010H
	DD	$LN27@nk_combo_b
$LN27@nk_combo_b:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN26@nk_combo_b:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN25@nk_combo_b:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN24@nk_combo_b:
	DB	115					; 00000073H
	DB	121					; 00000079H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN23@nk_combo_b:
	DB	115					; 00000073H
	DB	121					; 00000079H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN22@nk_combo_b:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_nk_combo_begin_symbol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_begin_color
_TEXT	SEGMENT
tv135 = -380						; size = 4
_sym$1 = -180						; size = 4
_bounds$2 = -168					; size = 16
_button$3 = -144					; size = 16
_content$4 = -120					; size = 16
_background$ = -96					; size = 4
_s$ = -84						; size = 4
_is_clicked$ = -72					; size = 4
_header$ = -60						; size = 16
_in$ = -36						; size = 4
_style$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_color$ = 12						; size = 4
_size$ = 16						; size = 8
_nk_combo_begin_color PROC				; COMDAT

; 22815: {

	push	ebp
	mov	ebp, esp
	sub	esp, 380				; 0000017cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-380]
	mov	ecx, 95					; 0000005fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 22816:     struct nk_window *win;
; 22817:     struct nk_style *style;
; 22818:     const struct nk_input *in;
; 22819: 
; 22820:     struct nk_rect header;
; 22821:     int is_clicked = nk_false;

	mov	DWORD PTR _is_clicked$[ebp], 0

; 22822:     enum nk_widget_layout_states s;
; 22823:     const struct nk_style_item *background;
; 22824: 
; 22825:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN17@nk_combo_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_combo_begin_color@@9@9
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN17@nk_combo_b:

; 22826:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN18@nk_combo_b
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_combo_begin_color@@9@9
	add	ecx, 11					; 0000000bH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@nk_combo_b:

; 22827:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN19@nk_combo_b
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_combo_begin_color@@9@9
	add	edx, 12					; 0000000cH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@nk_combo_b:

; 22828:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN13@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN13@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN14@nk_combo_b
$LN13@nk_combo_b:

; 22829:         return 0;

	xor	eax, eax
	jmp	$LN15@nk_combo_b
$LN14@nk_combo_b:

; 22830: 
; 22831:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 22832:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 22833:     s = nk_widget(&header, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax

; 22834:     if (s == NK_WIDGET_INVALID)

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN12@nk_combo_b

; 22835:         return 0;

	xor	eax, eax
	jmp	$LN15@nk_combo_b
$LN12@nk_combo_b:

; 22836: 
; 22837:     in = (win->layout->flags & NK_WINDOW_ROM || s == NK_WIDGET_ROM)? 0: &ctx->input;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 4096				; 00001000H
	jne	SHORT $LN20@nk_combo_b
	cmp	DWORD PTR _s$[ebp], 2
	je	SHORT $LN20@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN21@nk_combo_b
$LN20@nk_combo_b:
	mov	DWORD PTR tv135[ebp], 0
$LN21@nk_combo_b:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR _in$[ebp], ecx

; 22838:     if (nk_button_behavior(&ctx->last_widget_state, header, in, NK_BUTTON_DEFAULT))

	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 5820				; 000016bcH
	push	ecx
	call	_nk_button_behavior
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN11@nk_combo_b

; 22839:         is_clicked = nk_true;

	mov	DWORD PTR _is_clicked$[ebp], 1
$LN11@nk_combo_b:

; 22840: 
; 22841:     /* draw combo box header background and border */
; 22842:     if (ctx->last_widget_state & NK_WIDGET_STATE_ACTIVED)

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 32					; 00000020H
	je	SHORT $LN10@nk_combo_b

; 22843:         background = &style->combo.active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4612				; 00001204H
	mov	DWORD PTR _background$[ebp], eax
	jmp	SHORT $LN7@nk_combo_b
$LN10@nk_combo_b:

; 22844:     else if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER)

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 16					; 00000010H
	je	SHORT $LN8@nk_combo_b

; 22845:         background = &style->combo.hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4592				; 000011f0H
	mov	DWORD PTR _background$[ebp], eax
	jmp	SHORT $LN7@nk_combo_b
$LN8@nk_combo_b:

; 22846:     else background = &style->combo.normal;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4572				; 000011dcH
	mov	DWORD PTR _background$[ebp], eax
$LN7@nk_combo_b:

; 22847: 
; 22848:     if (background->type == NK_STYLE_ITEM_IMAGE) {

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN6@nk_combo_b

; 22849:         nk_draw_image(&win->buffer, header, &background->data.image,nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _background$[ebp]
	add	ecx, 4
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 22850:     } else {

	jmp	$LN5@nk_combo_b
$LN6@nk_combo_b:

; 22851:         nk_fill_rect(&win->buffer, header, style->combo.rounding, background->data.color);

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4804]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 22852:         nk_stroke_rect(&win->buffer, header, style->combo.rounding, style->combo.border, style->combo.border_color);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4632]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4800]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4804]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	_nk_stroke_rect
	add	esp, 32					; 00000020H
$LN5@nk_combo_b:

; 22853:     }
; 22854:     {
; 22855:         struct nk_rect content;
; 22856:         struct nk_rect button;
; 22857:         struct nk_rect bounds;
; 22858: 
; 22859:         enum nk_symbol_type sym;
; 22860:         if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER)

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 16					; 00000010H
	je	SHORT $LN4@nk_combo_b

; 22861:             sym = style->combo.sym_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4792]
	mov	DWORD PTR _sym$1[ebp], ecx
	jmp	SHORT $LN1@nk_combo_b
$LN4@nk_combo_b:

; 22862:         else if (is_clicked)

	cmp	DWORD PTR _is_clicked$[ebp], 0
	je	SHORT $LN2@nk_combo_b

; 22863:             sym = style->combo.sym_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4796]
	mov	DWORD PTR _sym$1[ebp], ecx
	jmp	SHORT $LN1@nk_combo_b
$LN2@nk_combo_b:

; 22864:         else sym = style->combo.sym_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4788]
	mov	DWORD PTR _sym$1[ebp], ecx
$LN1@nk_combo_b:

; 22865: 
; 22866:         /* calculate button */
; 22867:         button.w = header.h - 2 * style->combo.button_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4820]
	movss	xmm1, DWORD PTR _header$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _button$3[ebp+8], xmm1

; 22868:         button.x = (header.x + header.w - header.h) - style->combo.button_padding.x;

	movss	xmm0, DWORD PTR _header$[ebp]
	addss	xmm0, DWORD PTR _header$[ebp+8]
	subss	xmm0, DWORD PTR _header$[ebp+12]
	mov	eax, DWORD PTR _style$[ebp]
	subss	xmm0, DWORD PTR [eax+4816]
	movss	DWORD PTR _button$3[ebp], xmm0

; 22869:         button.y = header.y + style->combo.button_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp+4]
	addss	xmm0, DWORD PTR [eax+4820]
	movss	DWORD PTR _button$3[ebp+4], xmm0

; 22870:         button.h = button.w;

	movss	xmm0, DWORD PTR _button$3[ebp+8]
	movss	DWORD PTR _button$3[ebp+12], xmm0

; 22871: 
; 22872:         content.x = button.x + style->combo.button.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$3[ebp]
	addss	xmm0, DWORD PTR [eax+4752]
	movss	DWORD PTR _content$4[ebp], xmm0

; 22873:         content.y = button.y + style->combo.button.padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$3[ebp+4]
	addss	xmm0, DWORD PTR [eax+4756]
	movss	DWORD PTR _content$4[ebp+4], xmm0

; 22874:         content.w = button.w - 2 * style->combo.button.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4752]
	movss	xmm1, DWORD PTR _button$3[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _content$4[ebp+8], xmm1

; 22875:         content.h = button.h - 2 * style->combo.button.padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4756]
	movss	xmm1, DWORD PTR _button$3[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _content$4[ebp+12], xmm1

; 22876: 
; 22877:         /* draw color */
; 22878:         bounds.h = header.h - 4 * style->combo.content_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40800000
	mulss	xmm0, DWORD PTR [eax+4812]
	movss	xmm1, DWORD PTR _header$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _bounds$2[ebp+12], xmm1

; 22879:         bounds.y = header.y + 2 * style->combo.content_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4812]
	addss	xmm0, DWORD PTR _header$[ebp+4]
	movss	DWORD PTR _bounds$2[ebp+4], xmm0

; 22880:         bounds.x = header.x + 2 * style->combo.content_padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4808]
	addss	xmm0, DWORD PTR _header$[ebp]
	movss	DWORD PTR _bounds$2[ebp], xmm0

; 22881:         bounds.w = (button.x - (style->combo.content_padding.x + style->combo.spacing.x)) - bounds.x;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR [eax+4808]
	addss	xmm0, DWORD PTR [ecx+4824]
	movss	xmm1, DWORD PTR _button$3[ebp]
	subss	xmm1, xmm0
	subss	xmm1, DWORD PTR _bounds$2[ebp]
	movss	DWORD PTR _bounds$2[ebp+8], xmm1

; 22882:         nk_fill_rect(&win->buffer, bounds, 0, color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$2[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$2[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$2[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$2[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 22883: 
; 22884:         /* draw open/close button */
; 22885:         nk_draw_button_symbol(&win->buffer, &button, &content, ctx->last_widget_state,
; 22886:             &ctx->style.combo.button, sym, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sym$1[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5020				; 0000139cH
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+5820]
	push	edx
	lea	eax, DWORD PTR _content$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _button$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_button_symbol
	add	esp, 28					; 0000001cH

; 22887:     }
; 22888:     return nk_combo_begin(ctx, win, size, is_clicked, header);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _is_clicked$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_combo_begin
	add	esp, 36					; 00000024H
$LN15@nk_combo_b:

; 22889: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@nk_combo_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 380				; 0000017cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN27@nk_combo_b:
	DD	4
	DD	$LN26@nk_combo_b
$LN26@nk_combo_b:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN22@nk_combo_b
	DD	-120					; ffffff88H
	DD	16					; 00000010H
	DD	$LN23@nk_combo_b
	DD	-144					; ffffff70H
	DD	16					; 00000010H
	DD	$LN24@nk_combo_b
	DD	-168					; ffffff58H
	DD	16					; 00000010H
	DD	$LN25@nk_combo_b
$LN25@nk_combo_b:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN24@nk_combo_b:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN23@nk_combo_b:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN22@nk_combo_b:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_nk_combo_begin_color ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_begin_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_selected$ = 12						; size = 4
_size$ = 16						; size = 8
_nk_combo_begin_label PROC				; COMDAT

; 22811: {return nk_combo_begin_text(ctx, selected, nk_strlen(selected), size);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _selected$[ebp]
	push	edx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _selected$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_combo_begin_text
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_combo_begin_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_begin_text
_TEXT	SEGMENT
tv142 = -404						; size = 4
_sym$1 = -204						; size = 4
_content$2 = -192					; size = 16
_button$3 = -168					; size = 16
_label$4 = -144						; size = 16
_text$ = -120						; size = 16
_background$ = -96					; size = 4
_header$ = -84						; size = 16
_is_clicked$ = -60					; size = 4
_s$ = -48						; size = 4
_style$ = -36						; size = 4
_win$ = -24						; size = 4
_in$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_selected$ = 12						; size = 4
_len$ = 16						; size = 4
_size$ = 20						; size = 8
_nk_combo_begin_text PROC				; COMDAT

; 22723: {

	push	ebp
	mov	ebp, esp
	sub	esp, 404				; 00000194H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-404]
	mov	ecx, 101				; 00000065H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 22724:     const struct nk_input *in;
; 22725:     struct nk_window *win;
; 22726:     struct nk_style *style;
; 22727: 
; 22728:     enum nk_widget_layout_states s;
; 22729:     int is_clicked = nk_false;

	mov	DWORD PTR _is_clicked$[ebp], 0

; 22730:     struct nk_rect header;
; 22731:     const struct nk_style_item *background;
; 22732:     struct nk_text text;
; 22733: 
; 22734:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN17@nk_combo_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_combo_begin_text@@9@9
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN17@nk_combo_b:

; 22735:     NK_ASSERT(selected);

	cmp	DWORD PTR _selected$[ebp], 0
	jne	SHORT $LN18@nk_combo_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_combo_begin_text@@9@9
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BC@BAHMPCLB@?$AAs?$AAe?$AAl?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@nk_combo_b:

; 22736:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN19@nk_combo_b
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_combo_begin_text@@9@9
	add	ecx, 13					; 0000000dH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@nk_combo_b:

; 22737:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN20@nk_combo_b
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_combo_begin_text@@9@9
	add	edx, 14					; 0000000eH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN20@nk_combo_b:

; 22738:     if (!ctx || !ctx->current || !ctx->current->layout || !selected)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN13@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN13@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN13@nk_combo_b
	cmp	DWORD PTR _selected$[ebp], 0
	jne	SHORT $LN14@nk_combo_b
$LN13@nk_combo_b:

; 22739:         return 0;

	xor	eax, eax
	jmp	$LN15@nk_combo_b
$LN14@nk_combo_b:

; 22740: 
; 22741:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 22742:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 22743:     s = nk_widget(&header, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax

; 22744:     if (s == NK_WIDGET_INVALID)

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN12@nk_combo_b

; 22745:         return 0;

	xor	eax, eax
	jmp	$LN15@nk_combo_b
$LN12@nk_combo_b:

; 22746: 
; 22747:     in = (win->layout->flags & NK_WINDOW_ROM || s == NK_WIDGET_ROM)? 0: &ctx->input;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 4096				; 00001000H
	jne	SHORT $LN21@nk_combo_b
	cmp	DWORD PTR _s$[ebp], 2
	je	SHORT $LN21@nk_combo_b
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv142[ebp], eax
	jmp	SHORT $LN22@nk_combo_b
$LN21@nk_combo_b:
	mov	DWORD PTR tv142[ebp], 0
$LN22@nk_combo_b:
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR _in$[ebp], ecx

; 22748:     if (nk_button_behavior(&ctx->last_widget_state, header, in, NK_BUTTON_DEFAULT))

	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 5820				; 000016bcH
	push	ecx
	call	_nk_button_behavior
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN11@nk_combo_b

; 22749:         is_clicked = nk_true;

	mov	DWORD PTR _is_clicked$[ebp], 1
$LN11@nk_combo_b:

; 22750: 
; 22751:     /* draw combo box header background and border */
; 22752:     if (ctx->last_widget_state & NK_WIDGET_STATE_ACTIVED) {

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 32					; 00000020H
	je	SHORT $LN10@nk_combo_b

; 22753:         background = &style->combo.active;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4612				; 00001204H
	mov	DWORD PTR _background$[ebp], eax

; 22754:         text.text = style->combo.label_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4644]
	mov	DWORD PTR _text$[ebp+12], ecx
	jmp	SHORT $LN7@nk_combo_b
$LN10@nk_combo_b:

; 22755:     } else if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER) {

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 16					; 00000010H
	je	SHORT $LN8@nk_combo_b

; 22756:         background = &style->combo.hover;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4592				; 000011f0H
	mov	DWORD PTR _background$[ebp], eax

; 22757:         text.text = style->combo.label_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4640]
	mov	DWORD PTR _text$[ebp+12], ecx

; 22758:     } else {

	jmp	SHORT $LN7@nk_combo_b
$LN8@nk_combo_b:

; 22759:         background = &style->combo.normal;

	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 4572				; 000011dcH
	mov	DWORD PTR _background$[ebp], eax

; 22760:         text.text = style->combo.label_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4636]
	mov	DWORD PTR _text$[ebp+12], ecx
$LN7@nk_combo_b:

; 22761:     }
; 22762:     if (background->type == NK_STYLE_ITEM_IMAGE) {

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN6@nk_combo_b

; 22763:         text.background = nk_rgba(0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	call	_nk_rgba
	add	esp, 16					; 00000010H
	mov	DWORD PTR _text$[ebp+8], eax

; 22764:         nk_draw_image(&win->buffer, header, &background->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _background$[ebp]
	add	ecx, 4
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 22765:     } else {

	jmp	$LN5@nk_combo_b
$LN6@nk_combo_b:

; 22766:         text.background = background->data.color;

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _text$[ebp+8], ecx

; 22767:         nk_fill_rect(&win->buffer, header, style->combo.rounding, background->data.color);

	mov	eax, DWORD PTR _background$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4804]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 22768:         nk_stroke_rect(&win->buffer, header, style->combo.rounding, style->combo.border, style->combo.border_color);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4632]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4800]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4804]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	_nk_stroke_rect
	add	esp, 32					; 00000020H
$LN5@nk_combo_b:

; 22769:     }
; 22770:     {
; 22771:         /* print currently selected text item */
; 22772:         struct nk_rect label;
; 22773:         struct nk_rect button;
; 22774:         struct nk_rect content;
; 22775: 
; 22776:         enum nk_symbol_type sym;
; 22777:         if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER)

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 16					; 00000010H
	je	SHORT $LN4@nk_combo_b

; 22778:             sym = style->combo.sym_hover;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4792]
	mov	DWORD PTR _sym$1[ebp], ecx
	jmp	SHORT $LN1@nk_combo_b
$LN4@nk_combo_b:

; 22779:         else if (is_clicked)

	cmp	DWORD PTR _is_clicked$[ebp], 0
	je	SHORT $LN2@nk_combo_b

; 22780:             sym = style->combo.sym_active;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4796]
	mov	DWORD PTR _sym$1[ebp], ecx
	jmp	SHORT $LN1@nk_combo_b
$LN2@nk_combo_b:

; 22781:         else sym = style->combo.sym_normal;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4788]
	mov	DWORD PTR _sym$1[ebp], ecx
$LN1@nk_combo_b:

; 22782: 
; 22783:         /* calculate button */
; 22784:         button.w = header.h - 2 * style->combo.button_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4820]
	movss	xmm1, DWORD PTR _header$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _button$3[ebp+8], xmm1

; 22785:         button.x = (header.x + header.w - header.h) - style->combo.button_padding.x;

	movss	xmm0, DWORD PTR _header$[ebp]
	addss	xmm0, DWORD PTR _header$[ebp+8]
	subss	xmm0, DWORD PTR _header$[ebp+12]
	mov	eax, DWORD PTR _style$[ebp]
	subss	xmm0, DWORD PTR [eax+4816]
	movss	DWORD PTR _button$3[ebp], xmm0

; 22786:         button.y = header.y + style->combo.button_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp+4]
	addss	xmm0, DWORD PTR [eax+4820]
	movss	DWORD PTR _button$3[ebp+4], xmm0

; 22787:         button.h = button.w;

	movss	xmm0, DWORD PTR _button$3[ebp+8]
	movss	DWORD PTR _button$3[ebp+12], xmm0

; 22788: 
; 22789:         content.x = button.x + style->combo.button.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$3[ebp]
	addss	xmm0, DWORD PTR [eax+4752]
	movss	DWORD PTR _content$2[ebp], xmm0

; 22790:         content.y = button.y + style->combo.button.padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _button$3[ebp+4]
	addss	xmm0, DWORD PTR [eax+4756]
	movss	DWORD PTR _content$2[ebp+4], xmm0

; 22791:         content.w = button.w - 2 * style->combo.button.padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4752]
	movss	xmm1, DWORD PTR _button$3[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _content$2[ebp+8], xmm1

; 22792:         content.h = button.h - 2 * style->combo.button.padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4756]
	movss	xmm1, DWORD PTR _button$3[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _content$2[ebp+12], xmm1

; 22793: 
; 22794:         /* draw selected label */
; 22795:         text.padding = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _text$[ebp], eax
	mov	DWORD PTR _text$[ebp+4], edx

; 22796:         label.x = header.x + style->combo.content_padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp]
	addss	xmm0, DWORD PTR [eax+4808]
	movss	DWORD PTR _label$4[ebp], xmm0

; 22797:         label.y = header.y + style->combo.content_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _header$[ebp+4]
	addss	xmm0, DWORD PTR [eax+4812]
	movss	DWORD PTR _label$4[ebp+4], xmm0

; 22798:         label.w = button.x - (style->combo.content_padding.x + style->combo.spacing.x) - label.x;;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR [eax+4808]
	addss	xmm0, DWORD PTR [ecx+4824]
	movss	xmm1, DWORD PTR _button$3[ebp]
	subss	xmm1, xmm0
	subss	xmm1, DWORD PTR _label$4[ebp]
	movss	DWORD PTR _label$4[ebp+8], xmm1

; 22799:         label.h = header.h - 2 * style->combo.content_padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4812]
	movss	xmm1, DWORD PTR _header$[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _label$4[ebp+12], xmm1

; 22800:         nk_widget_text(&win->buffer, label, selected, len, &text,
; 22801:             NK_TEXT_LEFT, ctx->style.font);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	push	ecx
	push	17					; 00000011H
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _selected$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _label$4[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _label$4[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _label$4[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _label$4[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_widget_text
	add	esp, 40					; 00000028H

; 22802: 
; 22803:         /* draw open/close button */
; 22804:         nk_draw_button_symbol(&win->buffer, &button, &content, ctx->last_widget_state,
; 22805:             &ctx->style.combo.button, sym, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sym$1[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5020				; 0000139cH
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+5820]
	push	edx
	lea	eax, DWORD PTR _content$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _button$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_button_symbol
	add	esp, 28					; 0000001cH

; 22806:     }
; 22807:     return nk_combo_begin(ctx, win, size, is_clicked, header);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _header$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _header$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _header$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _is_clicked$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_combo_begin
	add	esp, 36					; 00000024H
$LN15@nk_combo_b:

; 22808: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@nk_combo_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 404				; 00000194H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN29@nk_combo_b:
	DD	5
	DD	$LN28@nk_combo_b
$LN28@nk_combo_b:
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$LN23@nk_combo_b
	DD	-120					; ffffff88H
	DD	16					; 00000010H
	DD	$LN24@nk_combo_b
	DD	-144					; ffffff70H
	DD	16					; 00000010H
	DD	$LN25@nk_combo_b
	DD	-168					; ffffff58H
	DD	16					; 00000010H
	DD	$LN26@nk_combo_b
	DD	-192					; ffffff40H
	DD	16					; 00000010H
	DD	$LN27@nk_combo_b
$LN27@nk_combo_b:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN26@nk_combo_b:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN25@nk_combo_b:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN24@nk_combo_b:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN23@nk_combo_b:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_nk_combo_begin_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combobox_callback
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_item_getter$ = 12					; size = 4
_userdata$ = 16						; size = 4
_selected$ = 20						; size = 4
_count$ = 24						; size = 4
_item_height$ = 28					; size = 4
_size$ = 32						; size = 8
_nk_combobox_callback PROC				; COMDAT

; 23419: {*selected = nk_combo_callback(ctx, item_getter, userdata,  *selected, count, item_height, size);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _item_height$[ebp]
	push	edx
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _selected$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _userdata$[ebp]
	push	eax
	mov	ecx, DWORD PTR _item_getter$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_combo_callback
	add	esp, 32					; 00000020H
	mov	ecx, DWORD PTR _selected$[ebp]
	mov	DWORD PTR [ecx], eax
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_combobox_callback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combobox_separator
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_items_separated_by_separator$ = 12			; size = 4
_separator$ = 16					; size = 4
_selected$ = 20						; size = 4
_count$ = 24						; size = 4
_item_height$ = 28					; size = 4
_size$ = 32						; size = 8
_nk_combobox_separator PROC				; COMDAT

; 23413: {*selected = nk_combo_separator(ctx, items_separated_by_separator, separator,

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 23414:     *selected, count, item_height, size);}

	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _item_height$[ebp]
	push	edx
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _selected$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _separator$[ebp]
	push	eax
	mov	ecx, DWORD PTR _items_separated_by_separator$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_combo_separator
	add	esp, 32					; 00000020H
	mov	ecx, DWORD PTR _selected$[ebp]
	mov	DWORD PTR [ecx], eax
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_combobox_separator ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combobox_string
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_items_separated_by_zeros$ = 12				; size = 4
_selected$ = 16						; size = 4
_count$ = 20						; size = 4
_item_height$ = 24					; size = 4
_size$ = 28						; size = 8
_nk_combobox_string PROC				; COMDAT

; 23409: {*selected = nk_combo_string(ctx, items_separated_by_zeros, *selected, count, item_height, size);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _item_height$[ebp]
	push	edx
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _selected$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _items_separated_by_zeros$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_combo_string
	add	esp, 28					; 0000001cH
	mov	edx, DWORD PTR _selected$[ebp]
	mov	DWORD PTR [edx], eax
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_combobox_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combobox
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_items$ = 12						; size = 4
_count$ = 16						; size = 4
_selected$ = 20						; size = 4
_item_height$ = 24					; size = 4
_size$ = 28						; size = 8
_nk_combobox PROC					; COMDAT

; 23405: {*selected = nk_combo(ctx, items, count, *selected, item_height, size);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _item_height$[ebp]
	push	edx
	mov	eax, DWORD PTR _selected$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _items$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_combo
	add	esp, 28					; 0000001cH
	mov	edx, DWORD PTR _selected$[ebp]
	mov	DWORD PTR [edx], eax
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_combobox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_callback
_TEXT	SEGMENT
tv134 = -264						; size = 4
_item$ = -64						; size = 4
_window_padding$ = -52					; size = 8
_item_spacing$ = -36					; size = 8
_max_height$ = -20					; size = 4
_i$ = -8						; size = 4
_ctx$ = 8						; size = 4
_item_getter$ = 12					; size = 4
_userdata$ = 16						; size = 4
_selected$ = 20						; size = 4
_count$ = 24						; size = 4
_item_height$ = 28					; size = 4
_size$ = 32						; size = 8
_nk_combo_callback PROC					; COMDAT

; 23371: {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 23372:     int i;
; 23373:     int max_height;
; 23374:     struct nk_vec2 item_spacing;
; 23375:     struct nk_vec2 window_padding;
; 23376:     const char *item;
; 23377: 
; 23378:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN10@nk_combo_c
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_combo_callback@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_combo_c:

; 23379:     NK_ASSERT(item_getter);

	cmp	DWORD PTR _item_getter$[ebp], 0
	jne	SHORT $LN11@nk_combo_c
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_combo_callback@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BI@CBJAPKKM@?$AAi?$AAt?$AAe?$AAm?$AA_?$AAg?$AAe?$AAt?$AAt?$AAe?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_combo_c:

; 23380:     if (!ctx || !item_getter)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN6@nk_combo_c
	cmp	DWORD PTR _item_getter$[ebp], 0
	jne	SHORT $LN7@nk_combo_c
$LN6@nk_combo_c:

; 23381:         return selected;

	mov	eax, DWORD PTR _selected$[ebp]
	jmp	$LN8@nk_combo_c
$LN7@nk_combo_c:

; 23382: 
; 23383:     /* calculate popup window */
; 23384:     item_spacing = ctx->style.window.spacing;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5668]
	mov	edx, DWORD PTR [eax+5672]
	mov	DWORD PTR _item_spacing$[ebp], ecx
	mov	DWORD PTR _item_spacing$[ebp+4], edx

; 23385:     window_padding = nk_panel_get_padding(&ctx->style, ctx->current->layout->type);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 360				; 00000168H
	push	ecx
	call	_nk_panel_get_padding
	add	esp, 8
	mov	DWORD PTR _window_padding$[ebp], eax
	mov	DWORD PTR _window_padding$[ebp+4], edx

; 23386:     max_height = count * item_height + count * (int)item_spacing.y;

	mov	eax, DWORD PTR _count$[ebp]
	imul	eax, DWORD PTR _item_height$[ebp]
	cvttss2si ecx, DWORD PTR _item_spacing$[ebp+4]
	imul	ecx, DWORD PTR _count$[ebp]
	add	eax, ecx
	mov	DWORD PTR _max_height$[ebp], eax

; 23387:     max_height += (int)item_spacing.y * 2 + (int)window_padding.y * 2;

	cvttss2si eax, DWORD PTR _item_spacing$[ebp+4]
	cvttss2si ecx, DWORD PTR _window_padding$[ebp+4]
	mov	edx, DWORD PTR _max_height$[ebp]
	lea	eax, DWORD PTR [edx+eax*2]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _max_height$[ebp], ecx

; 23388:     size.y = NK_MIN(size.y, (float)max_height);

	cvtsi2ss xmm0, DWORD PTR _max_height$[ebp]
	comiss	xmm0, DWORD PTR _size$[ebp+4]
	jbe	SHORT $LN12@nk_combo_c
	movss	xmm0, DWORD PTR _size$[ebp+4]
	movss	DWORD PTR tv134[ebp], xmm0
	jmp	SHORT $LN13@nk_combo_c
$LN12@nk_combo_c:
	cvtsi2ss xmm0, DWORD PTR _max_height$[ebp]
	movss	DWORD PTR tv134[ebp], xmm0
$LN13@nk_combo_c:
	movss	xmm0, DWORD PTR tv134[ebp]
	movss	DWORD PTR _size$[ebp+4], xmm0

; 23389: 
; 23390:     item_getter(userdata, selected, &item);

	mov	esi, esp
	lea	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _selected$[ebp]
	push	ecx
	mov	edx, DWORD PTR _userdata$[ebp]
	push	edx
	call	DWORD PTR _item_getter$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 23391:     if (nk_combo_begin_label(ctx, item, size)) {

	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _item$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_combo_begin_label
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN5@nk_combo_c

; 23392:         nk_layout_row_dynamic(ctx, (float)item_height, 1);

	push	1
	cvtsi2ss xmm0, DWORD PTR _item_height$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 23393:         for (i = 0; i < count; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@nk_combo_c
$LN3@nk_combo_c:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@nk_combo_c:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN2@nk_combo_c

; 23394:             item_getter(userdata, i, &item);

	mov	esi, esp
	lea	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _userdata$[ebp]
	push	edx
	call	DWORD PTR _item_getter$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 23395:             if (nk_combo_item_label(ctx, item, NK_TEXT_LEFT))

	push	17					; 00000011H
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_combo_item_label
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@nk_combo_c

; 23396:                 selected = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _selected$[ebp], eax
$LN1@nk_combo_c:

; 23397:         }

	jmp	SHORT $LN3@nk_combo_c
$LN2@nk_combo_c:

; 23398:         nk_combo_end(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_combo_end
	add	esp, 4
$LN5@nk_combo_c:

; 23399:     }
; 23400:     return selected;

	mov	eax, DWORD PTR _selected$[ebp]
$LN8@nk_combo_c:

; 23401: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@nk_combo_c
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@nk_combo_c:
	DD	3
	DD	$LN17@nk_combo_c
$LN17@nk_combo_c:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN14@nk_combo_c
	DD	-52					; ffffffccH
	DD	8
	DD	$LN15@nk_combo_c
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN16@nk_combo_c
$LN16@nk_combo_c:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
$LN15@nk_combo_c:
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN14@nk_combo_c:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
_nk_combo_callback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_string
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_items_separated_by_zeros$ = 12				; size = 4
_selected$ = 16						; size = 4
_count$ = 20						; size = 4
_item_height$ = 24					; size = 4
_size$ = 28						; size = 8
_nk_combo_string PROC					; COMDAT

; 23366: {return nk_combo_separator(ctx, items_separated_by_zeros, '\0', selected, count, item_height, size);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _item_height$[ebp]
	push	edx
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _selected$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _items_separated_by_zeros$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_combo_separator
	add	esp, 32					; 00000020H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_combo_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo_separator
_TEXT	SEGMENT
tv134 = -288						; size = 4
_length$ = -88						; size = 4
_iter$ = -76						; size = 4
_current_item$ = -64					; size = 4
_window_padding$ = -52					; size = 8
_item_spacing$ = -36					; size = 8
_max_height$ = -20					; size = 4
_i$ = -8						; size = 4
_ctx$ = 8						; size = 4
_items_separated_by_separator$ = 12			; size = 4
_separator$ = 16					; size = 4
_selected$ = 20						; size = 4
_count$ = 24						; size = 4
_item_height$ = 28					; size = 4
_size$ = 32						; size = 8
_nk_combo_separator PROC				; COMDAT

; 23316: {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 23317:     int i;
; 23318:     int max_height;
; 23319:     struct nk_vec2 item_spacing;
; 23320:     struct nk_vec2 window_padding;
; 23321:     const char *current_item;
; 23322:     const char *iter;
; 23323:     int length = 0;

	mov	DWORD PTR _length$[ebp], 0

; 23324: 
; 23325:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN18@nk_combo_s
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_combo_separator@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@nk_combo_s:

; 23326:     NK_ASSERT(items_separated_by_separator);

	cmp	DWORD PTR _items_separated_by_separator$[ebp], 0
	jne	SHORT $LN19@nk_combo_s
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_combo_separator@@9@9
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1DK@MJNAGHOF@?$AAi?$AAt?$AAe?$AAm?$AAs?$AA_?$AAs?$AAe?$AAp?$AAa?$AAr?$AAa?$AAt?$AAe?$AAd?$AA_?$AAb?$AAy?$AA_?$AAs?$AAe?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@nk_combo_s:

; 23327:     if (!ctx || !items_separated_by_separator)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN14@nk_combo_s
	cmp	DWORD PTR _items_separated_by_separator$[ebp], 0
	jne	SHORT $LN15@nk_combo_s
$LN14@nk_combo_s:

; 23328:         return selected;

	mov	eax, DWORD PTR _selected$[ebp]
	jmp	$LN16@nk_combo_s
$LN15@nk_combo_s:

; 23329: 
; 23330:     /* calculate popup window */
; 23331:     item_spacing = ctx->style.window.spacing;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5668]
	mov	edx, DWORD PTR [eax+5672]
	mov	DWORD PTR _item_spacing$[ebp], ecx
	mov	DWORD PTR _item_spacing$[ebp+4], edx

; 23332:     window_padding = nk_panel_get_padding(&ctx->style, ctx->current->layout->type);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 360				; 00000168H
	push	ecx
	call	_nk_panel_get_padding
	add	esp, 8
	mov	DWORD PTR _window_padding$[ebp], eax
	mov	DWORD PTR _window_padding$[ebp+4], edx

; 23333:     max_height = count * item_height + count * (int)item_spacing.y;

	mov	eax, DWORD PTR _count$[ebp]
	imul	eax, DWORD PTR _item_height$[ebp]
	cvttss2si ecx, DWORD PTR _item_spacing$[ebp+4]
	imul	ecx, DWORD PTR _count$[ebp]
	add	eax, ecx
	mov	DWORD PTR _max_height$[ebp], eax

; 23334:     max_height += (int)item_spacing.y * 2 + (int)window_padding.y * 2;

	cvttss2si eax, DWORD PTR _item_spacing$[ebp+4]
	cvttss2si ecx, DWORD PTR _window_padding$[ebp+4]
	mov	edx, DWORD PTR _max_height$[ebp]
	lea	eax, DWORD PTR [edx+eax*2]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _max_height$[ebp], ecx

; 23335:     size.y = NK_MIN(size.y, (float)max_height);

	cvtsi2ss xmm0, DWORD PTR _max_height$[ebp]
	comiss	xmm0, DWORD PTR _size$[ebp+4]
	jbe	SHORT $LN20@nk_combo_s
	movss	xmm0, DWORD PTR _size$[ebp+4]
	movss	DWORD PTR tv134[ebp], xmm0
	jmp	SHORT $LN21@nk_combo_s
$LN20@nk_combo_s:
	cvtsi2ss xmm0, DWORD PTR _max_height$[ebp]
	movss	DWORD PTR tv134[ebp], xmm0
$LN21@nk_combo_s:
	movss	xmm0, DWORD PTR tv134[ebp]
	movss	DWORD PTR _size$[ebp+4], xmm0

; 23336: 
; 23337:     /* find selected item */
; 23338:     current_item = items_separated_by_separator;

	mov	eax, DWORD PTR _items_separated_by_separator$[ebp]
	mov	DWORD PTR _current_item$[ebp], eax

; 23339:     for (i = 0; i < count; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@nk_combo_s
$LN12@nk_combo_s:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@nk_combo_s:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN11@nk_combo_s

; 23340:         iter = current_item;

	mov	eax, DWORD PTR _current_item$[ebp]
	mov	DWORD PTR _iter$[ebp], eax
$LN10@nk_combo_s:

; 23341:         while (*iter && *iter != separator) iter++;

	mov	eax, DWORD PTR _iter$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN9@nk_combo_s
	mov	eax, DWORD PTR _iter$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, DWORD PTR _separator$[ebp]
	je	SHORT $LN9@nk_combo_s
	mov	eax, DWORD PTR _iter$[ebp]
	add	eax, 1
	mov	DWORD PTR _iter$[ebp], eax
	jmp	SHORT $LN10@nk_combo_s
$LN9@nk_combo_s:

; 23342:         length = (int)(iter - current_item);

	mov	eax, DWORD PTR _iter$[ebp]
	sub	eax, DWORD PTR _current_item$[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 23343:         if (i == selected) break;

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _selected$[ebp]
	jne	SHORT $LN8@nk_combo_s
	jmp	SHORT $LN11@nk_combo_s
$LN8@nk_combo_s:

; 23344:         current_item = iter + 1;

	mov	eax, DWORD PTR _iter$[ebp]
	add	eax, 1
	mov	DWORD PTR _current_item$[ebp], eax

; 23345:     }

	jmp	SHORT $LN12@nk_combo_s
$LN11@nk_combo_s:

; 23346: 
; 23347:     if (nk_combo_begin_text(ctx, current_item, length, size)) {

	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _current_item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_combo_begin_text
	add	esp, 20					; 00000014H
	test	eax, eax
	je	$LN7@nk_combo_s

; 23348:         current_item = items_separated_by_separator;

	mov	eax, DWORD PTR _items_separated_by_separator$[ebp]
	mov	DWORD PTR _current_item$[ebp], eax

; 23349:         nk_layout_row_dynamic(ctx, (float)item_height, 1);

	push	1
	cvtsi2ss xmm0, DWORD PTR _item_height$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 23350:         for (i = 0; i < count; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@nk_combo_s
$LN5@nk_combo_s:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@nk_combo_s:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN4@nk_combo_s

; 23351:             iter = current_item;

	mov	eax, DWORD PTR _current_item$[ebp]
	mov	DWORD PTR _iter$[ebp], eax
$LN3@nk_combo_s:

; 23352:             while (*iter && *iter != separator) iter++;

	mov	eax, DWORD PTR _iter$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@nk_combo_s
	mov	eax, DWORD PTR _iter$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, DWORD PTR _separator$[ebp]
	je	SHORT $LN2@nk_combo_s
	mov	eax, DWORD PTR _iter$[ebp]
	add	eax, 1
	mov	DWORD PTR _iter$[ebp], eax
	jmp	SHORT $LN3@nk_combo_s
$LN2@nk_combo_s:

; 23353:             length = (int)(iter - current_item);

	mov	eax, DWORD PTR _iter$[ebp]
	sub	eax, DWORD PTR _current_item$[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 23354:             if (nk_combo_item_text(ctx, current_item, length, NK_TEXT_LEFT))

	push	17					; 00000011H
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _current_item$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_combo_item_text
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN1@nk_combo_s

; 23355:                 selected = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _selected$[ebp], eax
$LN1@nk_combo_s:

; 23356:             current_item = current_item + length + 1;

	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _current_item$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _current_item$[ebp], edx

; 23357:         }

	jmp	SHORT $LN5@nk_combo_s
$LN4@nk_combo_s:

; 23358:         nk_combo_end(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_combo_end
	add	esp, 4
$LN7@nk_combo_s:

; 23359:     }
; 23360:     return selected;

	mov	eax, DWORD PTR _selected$[ebp]
$LN16@nk_combo_s:

; 23361: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@nk_combo_s
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN25@nk_combo_s:
	DD	2
	DD	$LN24@nk_combo_s
$LN24@nk_combo_s:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN22@nk_combo_s
	DD	-52					; ffffffccH
	DD	8
	DD	$LN23@nk_combo_s
$LN23@nk_combo_s:
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN22@nk_combo_s:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
_nk_combo_separator ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_combo
_TEXT	SEGMENT
tv142 = -252						; size = 4
_window_padding$ = -52					; size = 8
_item_spacing$ = -36					; size = 8
_max_height$ = -20					; size = 4
_i$ = -8						; size = 4
_ctx$ = 8						; size = 4
_items$ = 12						; size = 4
_count$ = 16						; size = 4
_selected$ = 20						; size = 4
_item_height$ = 24					; size = 4
_size$ = 28						; size = 8
_nk_combo PROC						; COMDAT

; 23285: {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 23286:     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 23287:     int max_height;
; 23288:     struct nk_vec2 item_spacing;
; 23289:     struct nk_vec2 window_padding;
; 23290: 
; 23291:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN10@nk_combo
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_combo@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_combo:

; 23292:     NK_ASSERT(items);

	cmp	DWORD PTR _items$[ebp], 0
	jne	SHORT $LN11@nk_combo
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_combo@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@JLJIPHMC@?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_combo:

; 23293:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN12@nk_combo
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_combo@@9@9
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_combo:

; 23294:     if (!ctx || !items ||!count)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN6@nk_combo
	cmp	DWORD PTR _items$[ebp], 0
	je	SHORT $LN6@nk_combo
	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN7@nk_combo
$LN6@nk_combo:

; 23295:         return selected;

	mov	eax, DWORD PTR _selected$[ebp]
	jmp	$LN8@nk_combo
$LN7@nk_combo:

; 23296: 
; 23297:     item_spacing = ctx->style.window.spacing;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5668]
	mov	edx, DWORD PTR [eax+5672]
	mov	DWORD PTR _item_spacing$[ebp], ecx
	mov	DWORD PTR _item_spacing$[ebp+4], edx

; 23298:     window_padding = nk_panel_get_padding(&ctx->style, ctx->current->layout->type);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 360				; 00000168H
	push	ecx
	call	_nk_panel_get_padding
	add	esp, 8
	mov	DWORD PTR _window_padding$[ebp], eax
	mov	DWORD PTR _window_padding$[ebp+4], edx

; 23299:     max_height = count * item_height + count * (int)item_spacing.y;

	mov	eax, DWORD PTR _count$[ebp]
	imul	eax, DWORD PTR _item_height$[ebp]
	cvttss2si ecx, DWORD PTR _item_spacing$[ebp+4]
	imul	ecx, DWORD PTR _count$[ebp]
	add	eax, ecx
	mov	DWORD PTR _max_height$[ebp], eax

; 23300:     max_height += (int)item_spacing.y * 2 + (int)window_padding.y * 2;

	cvttss2si eax, DWORD PTR _item_spacing$[ebp+4]
	cvttss2si ecx, DWORD PTR _window_padding$[ebp+4]
	mov	edx, DWORD PTR _max_height$[ebp]
	lea	eax, DWORD PTR [edx+eax*2]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _max_height$[ebp], ecx

; 23301:     size.y = NK_MIN(size.y, (float)max_height);

	cvtsi2ss xmm0, DWORD PTR _max_height$[ebp]
	comiss	xmm0, DWORD PTR _size$[ebp+4]
	jbe	SHORT $LN13@nk_combo
	movss	xmm0, DWORD PTR _size$[ebp+4]
	movss	DWORD PTR tv142[ebp], xmm0
	jmp	SHORT $LN14@nk_combo
$LN13@nk_combo:
	cvtsi2ss xmm0, DWORD PTR _max_height$[ebp]
	movss	DWORD PTR tv142[ebp], xmm0
$LN14@nk_combo:
	movss	xmm0, DWORD PTR tv142[ebp]
	movss	DWORD PTR _size$[ebp+4], xmm0

; 23302:     if (nk_combo_begin_label(ctx, items[selected], size)) {

	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _selected$[ebp]
	mov	eax, DWORD PTR _items$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_combo_begin_label
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN5@nk_combo

; 23303:         nk_layout_row_dynamic(ctx, (float)item_height, 1);

	push	1
	cvtsi2ss xmm0, DWORD PTR _item_height$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_layout_row_dynamic
	add	esp, 12					; 0000000cH

; 23304:         for (i = 0; i < count; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@nk_combo
$LN3@nk_combo:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@nk_combo:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN2@nk_combo

; 23305:             if (nk_combo_item_label(ctx, items[i], NK_TEXT_LEFT))

	push	17					; 00000011H
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _items$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_combo_item_label
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@nk_combo

; 23306:                 selected = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _selected$[ebp], eax
$LN1@nk_combo:

; 23307:         }

	jmp	SHORT $LN3@nk_combo
$LN2@nk_combo:

; 23308:         nk_combo_end(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_combo_end
	add	esp, 4
$LN5@nk_combo:

; 23309:     }
; 23310:     return selected;

	mov	eax, DWORD PTR _selected$[ebp]
$LN8@nk_combo:

; 23311: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@nk_combo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@nk_combo:
	DD	2
	DD	$LN17@nk_combo
$LN17@nk_combo:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN15@nk_combo
	DD	-52					; ffffffccH
	DD	8
	DD	$LN16@nk_combo
$LN16@nk_combo:
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN15@nk_combo:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
_nk_combo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_popup_end
_TEXT	SEGMENT
_root$1 = -32						; size = 4
_popup$ = -20						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_popup_end PROC					; COMDAT

; 22354: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 22355:     struct nk_window *win;
; 22356:     struct nk_window *popup;
; 22357: 
; 22358:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN9@nk_popup_e
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_popup_end@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_popup_e:

; 22359:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN10@nk_popup_e
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_popup_end@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_popup_e:

; 22360:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN11@nk_popup_e
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_popup_end@@9@9
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_popup_e:

; 22361:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN5@nk_popup_e
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN5@nk_popup_e
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN6@nk_popup_e
$LN5@nk_popup_e:

; 22362:         return;

	jmp	$LN7@nk_popup_e
$LN6@nk_popup_e:

; 22363: 
; 22364:     popup = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _popup$[ebp], ecx

; 22365:     if (!popup->parent) return;

	mov	eax, DWORD PTR _popup$[ebp]
	cmp	DWORD PTR [eax+384], 0
	jne	SHORT $LN4@nk_popup_e
	jmp	$LN7@nk_popup_e
$LN4@nk_popup_e:

; 22366:     win = popup->parent;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR [eax+384]
	mov	DWORD PTR _win$[ebp], ecx

; 22367:     if (popup->flags & NK_WINDOW_HIDDEN) {

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 8192				; 00002000H
	je	SHORT $LN3@nk_popup_e

; 22368:         struct nk_panel *root;
; 22369:         root = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _root$1[ebp], ecx
$LN2@nk_popup_e:

; 22370:         while (root) {

	cmp	DWORD PTR _root$1[ebp], 0
	je	SHORT $LN1@nk_popup_e

; 22371:             root->flags |= NK_WINDOW_REMOVE_ROM;

	mov	eax, DWORD PTR _root$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, 65536				; 00010000H
	mov	edx, DWORD PTR _root$1[ebp]
	mov	DWORD PTR [edx+4], ecx

; 22372:             root = root->parent;

	mov	eax, DWORD PTR _root$1[ebp]
	mov	ecx, DWORD PTR [eax+408]
	mov	DWORD PTR _root$1[ebp], ecx

; 22373:         }

	jmp	SHORT $LN2@nk_popup_e
$LN1@nk_popup_e:

; 22374:         win->popup.active = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+284], 0
$LN3@nk_popup_e:

; 22375:     }
; 22376:     nk_push_scissor(&popup->buffer, nk_null_rect);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _nk_null_rect
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _nk_null_rect+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _nk_null_rect+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _nk_null_rect+12
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _popup$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_nk_push_scissor
	add	esp, 20					; 00000014H

; 22377:     nk_end(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_end
	add	esp, 4

; 22378: 
; 22379:     win->buffer = popup->buffer;

	mov	esi, DWORD PTR _popup$[ebp]
	add	esi, 100				; 00000064H
	mov	edi, DWORD PTR _win$[ebp]
	add	edi, 100				; 00000064H
	mov	ecx, 10					; 0000000aH
	rep movsd

; 22380:     nk_finish_popup(ctx, win);

	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_finish_popup
	add	esp, 8

; 22381:     ctx->current = win;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+12940], ecx

; 22382:     nk_push_scissor(&win->buffer, win->layout->clip);

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	add	ecx, 60					; 0000003cH
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_push_scissor
	add	esp, 20					; 00000014H
$LN7@nk_popup_e:

; 22383: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_popup_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_popup_close
_TEXT	SEGMENT
_popup$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_popup_close PROC					; COMDAT

; 22341: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 22342:     struct nk_window *popup;
; 22343:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_popup_c
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_popup_close@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_popup_c:

; 22344:     if (!ctx || !ctx->current) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_popup_c
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_popup_c
$LN1@nk_popup_c:
	jmp	SHORT $LN3@nk_popup_c
$LN2@nk_popup_c:

; 22345: 
; 22346:     popup = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _popup$[ebp], ecx

; 22347:     NK_ASSERT(popup->parent);

	mov	eax, DWORD PTR _popup$[ebp]
	cmp	DWORD PTR [eax+384], 0
	jne	SHORT $LN6@nk_popup_c
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_popup_close@@9@9
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BM@KLACOFEL@?$AAp?$AAo?$AAp?$AAu?$AAp?$AA?9?$AA?$DO?$AAp?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_popup_c:

; 22348:     NK_ASSERT(popup->layout->type & NK_PANEL_SET_POPUP);

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [ecx]
	and	edx, 244				; 000000f4H
	jne	SHORT $LN7@nk_popup_c
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_popup_close@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1FC@NEPNGFGJ@?$AAp?$AAo?$AAp?$AAu?$AAp?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAP?$AAA?$AAN?$AAE?$AAL?$AA_?$AAS@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_popup_c:

; 22349:     popup->flags |= NK_WINDOW_HIDDEN;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	or	ecx, 8192				; 00002000H
	mov	edx, DWORD PTR _popup$[ebp]
	mov	DWORD PTR [edx+72], ecx
$LN3@nk_popup_c:

; 22350: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_popup_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_popup_begin
_TEXT	SEGMENT
_root$1 = -92						; size = 4
_root$2 = -80						; size = 4
_allocated$ = -68					; size = 4
_title_hash$ = -56					; size = 4
_title_len$ = -44					; size = 4
_panel$ = -32						; size = 4
_win$ = -20						; size = 4
_popup$ = -8						; size = 4
_ctx$ = 8						; size = 4
_type$ = 12						; size = 4
_title$ = 16						; size = 4
_flags$ = 20						; size = 4
_rect$ = 24						; size = 16
_nk_popup_begin PROC					; COMDAT

; 22164: {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 22165:     struct nk_window *popup;
; 22166:     struct nk_window *win;
; 22167:     struct nk_panel *panel;
; 22168: 
; 22169:     int title_len;
; 22170:     nk_hash title_hash;
; 22171:     nk_size allocated;
; 22172: 
; 22173:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN16@nk_popup_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_popup_begin@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN16@nk_popup_b:

; 22174:     NK_ASSERT(title);

	cmp	DWORD PTR _title$[ebp], 0
	jne	SHORT $LN17@nk_popup_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_popup_begin@@9@9
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@NFEAPLNL@?$AAt?$AAi?$AAt?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN17@nk_popup_b:

; 22175:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN18@nk_popup_b
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_popup_begin@@9@9
	add	ecx, 11					; 0000000bH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@nk_popup_b:

; 22176:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN19@nk_popup_b
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_popup_begin@@9@9
	add	edx, 12					; 0000000cH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@nk_popup_b:

; 22177:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN12@nk_popup_b
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN12@nk_popup_b
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN13@nk_popup_b
$LN12@nk_popup_b:

; 22178:         return 0;

	xor	eax, eax
	jmp	$LN3@nk_popup_b
$LN13@nk_popup_b:

; 22179: 
; 22180:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 22181:     panel = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _panel$[ebp], ecx

; 22182:     NK_ASSERT(!(panel->type & NK_PANEL_SET_POPUP) && "popups are not allowed to have popups");

	mov	eax, DWORD PTR _panel$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 244				; 000000f4H
	jne	SHORT $LN20@nk_popup_b
	mov	edx, OFFSET ??_C@_0CG@PGMENGHG@popups?5are?5not?5allowed?5to?5have?5p@
	test	edx, edx
	jne	SHORT $LN21@nk_popup_b
$LN20@nk_popup_b:
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_popup_begin@@9@9
	add	eax, 18					; 00000012H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1JO@DBBBPONP@?$AA?$CB?$AA?$CI?$AAp?$AAa?$AAn?$AAe?$AAl?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAP?$AAA?$AAN?$AAE?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAP?$AAO?$AAP@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN21@nk_popup_b:

; 22183:     (void)panel;
; 22184:     title_len = (int)nk_strlen(title);

	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _title_len$[ebp], eax

; 22185:     title_hash = nk_murmur_hash(title, (int)title_len, NK_PANEL_POPUP);

	push	4
	mov	eax, DWORD PTR _title_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	call	_nk_murmur_hash
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _title_hash$[ebp], eax

; 22186: 
; 22187:     popup = win->popup.win;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	mov	DWORD PTR _popup$[ebp], ecx

; 22188:     if (!popup) {

	cmp	DWORD PTR _popup$[ebp], 0
	jne	SHORT $LN11@nk_popup_b

; 22189:         popup = (struct nk_window*)nk_create_window(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_create_window
	add	esp, 4
	mov	DWORD PTR _popup$[ebp], eax

; 22190:         popup->parent = win;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+384], ecx

; 22191:         win->popup.win = popup;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _popup$[ebp]
	mov	DWORD PTR [eax+252], ecx

; 22192:         win->popup.active = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+284], 0

; 22193:         win->popup.type = NK_PANEL_POPUP;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+256], 4
$LN11@nk_popup_b:

; 22194:     }
; 22195: 
; 22196:     /* make sure we have correct popup */
; 22197:     if (win->popup.name != title_hash) {

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	cmp	ecx, DWORD PTR _title_hash$[ebp]
	je	SHORT $LN8@nk_popup_b

; 22198:         if (!win->popup.active) {

	mov	eax, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [eax+284], 0
	jne	SHORT $LN9@nk_popup_b

; 22199:             nk_zero(popup, sizeof(*popup));

	push	388					; 00000184H
	mov	eax, DWORD PTR _popup$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 22200:             win->popup.name = title_hash;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _title_hash$[ebp]
	mov	DWORD PTR [eax+280], ecx

; 22201:             win->popup.active = 1;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+284], 1

; 22202:             win->popup.type = NK_PANEL_POPUP;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+256], 4
	jmp	SHORT $LN8@nk_popup_b
$LN9@nk_popup_b:

; 22203:         } else return 0;

	xor	eax, eax
	jmp	$LN3@nk_popup_b
$LN8@nk_popup_b:

; 22204:     }
; 22205: 
; 22206:     /* popup position is local to window */
; 22207:     ctx->current = popup;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _popup$[ebp]
	mov	DWORD PTR [eax+12940], ecx

; 22208:     rect.x += win->layout->clip.x;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	movss	xmm0, DWORD PTR _rect$[ebp]
	addss	xmm0, DWORD PTR [ecx+60]
	movss	DWORD PTR _rect$[ebp], xmm0

; 22209:     rect.y += win->layout->clip.y;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	movss	xmm0, DWORD PTR _rect$[ebp+4]
	addss	xmm0, DWORD PTR [ecx+64]
	movss	DWORD PTR _rect$[ebp+4], xmm0

; 22210: 
; 22211:     /* setup popup data */
; 22212:     popup->parent = win;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+384], ecx

; 22213:     popup->bounds = rect;

	mov	eax, DWORD PTR _popup$[ebp]
	add	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _rect$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR [eax+12], edx

; 22214:     popup->seq = ctx->seq;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+12952]
	mov	DWORD PTR [eax], edx

; 22215:     popup->layout = (struct nk_panel*)nk_create_panel(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_create_panel
	add	esp, 4
	mov	ecx, DWORD PTR _popup$[ebp]
	mov	DWORD PTR [ecx+140], eax

; 22216:     popup->flags = flags;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [eax+72], ecx

; 22217:     popup->flags |= NK_WINDOW_BORDER;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	or	ecx, 1
	mov	edx, DWORD PTR _popup$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 22218:     if (type == NK_POPUP_DYNAMIC)

	cmp	DWORD PTR _type$[ebp], 1
	jne	SHORT $LN7@nk_popup_b

; 22219:         popup->flags |= NK_WINDOW_DYNAMIC;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	or	ecx, 2048				; 00000800H
	mov	edx, DWORD PTR _popup$[ebp]
	mov	DWORD PTR [edx+72], ecx
$LN7@nk_popup_b:

; 22220: 
; 22221:     popup->buffer = win->buffer;

	mov	esi, DWORD PTR _win$[ebp]
	add	esi, 100				; 00000064H
	mov	edi, DWORD PTR _popup$[ebp]
	add	edi, 100				; 00000064H
	mov	ecx, 10					; 0000000aH
	rep movsd

; 22222:     nk_start_popup(ctx, win);

	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_start_popup
	add	esp, 8

; 22223:     allocated = ctx->memory.allocated;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	DWORD PTR _allocated$[ebp], ecx

; 22224:     nk_push_scissor(&popup->buffer, nk_null_rect);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _nk_null_rect
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _nk_null_rect+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _nk_null_rect+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _nk_null_rect+12
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _popup$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_nk_push_scissor
	add	esp, 20					; 00000014H

; 22225: 
; 22226:     if (nk_panel_begin(ctx, title, NK_PANEL_POPUP)) {

	push	4
	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_panel_begin
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN6@nk_popup_b

; 22227:         /* popup is running therefore invalidate parent panels */
; 22228:         struct nk_panel *root;
; 22229:         root = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _root$2[ebp], ecx
$LN5@nk_popup_b:

; 22230:         while (root) {

	cmp	DWORD PTR _root$2[ebp], 0
	je	SHORT $LN4@nk_popup_b

; 22231:             root->flags |= NK_WINDOW_ROM;

	mov	eax, DWORD PTR _root$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, 4096				; 00001000H
	mov	edx, DWORD PTR _root$2[ebp]
	mov	DWORD PTR [edx+4], ecx

; 22232:             root->flags &= ~(nk_flags)NK_WINDOW_REMOVE_ROM;

	mov	eax, DWORD PTR _root$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -65537				; fffeffffH
	mov	edx, DWORD PTR _root$2[ebp]
	mov	DWORD PTR [edx+4], ecx

; 22233:             root = root->parent;

	mov	eax, DWORD PTR _root$2[ebp]
	mov	ecx, DWORD PTR [eax+408]
	mov	DWORD PTR _root$2[ebp], ecx

; 22234:         }

	jmp	SHORT $LN5@nk_popup_b
$LN4@nk_popup_b:

; 22235:         win->popup.active = 1;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+284], 1

; 22236:         popup->layout->offset_x = &popup->scrollbar.x;

	mov	eax, DWORD PTR _popup$[ebp]
	add	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _popup$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR [edx+24], eax

; 22237:         popup->layout->offset_y = &popup->scrollbar.y;

	mov	eax, DWORD PTR _popup$[ebp]
	add	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _popup$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR [edx+28], eax

; 22238:         popup->layout->parent = win->layout;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	DWORD PTR [ecx+408], eax

; 22239:         return 1;

	mov	eax, 1
	jmp	$LN3@nk_popup_b

; 22240:     } else {

	jmp	$LN3@nk_popup_b
$LN6@nk_popup_b:

; 22241:         /* popup was closed/is invalid so cleanup */
; 22242:         struct nk_panel *root;
; 22243:         root = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _root$1[ebp], ecx
$LN2@nk_popup_b:

; 22244:         while (root) {

	cmp	DWORD PTR _root$1[ebp], 0
	je	SHORT $LN1@nk_popup_b

; 22245:             root->flags |= NK_WINDOW_REMOVE_ROM;

	mov	eax, DWORD PTR _root$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, 65536				; 00010000H
	mov	edx, DWORD PTR _root$1[ebp]
	mov	DWORD PTR [edx+4], ecx

; 22246:             root = root->parent;

	mov	eax, DWORD PTR _root$1[ebp]
	mov	ecx, DWORD PTR [eax+408]
	mov	DWORD PTR _root$1[ebp], ecx

; 22247:         }

	jmp	SHORT $LN2@nk_popup_b
$LN1@nk_popup_b:

; 22248:         win->popup.buf.active = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+276], 0

; 22249:         win->popup.active = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+284], 0

; 22250:         ctx->memory.allocated = allocated;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _allocated$[ebp]
	mov	DWORD PTR [eax+5792], ecx

; 22251:         ctx->current = win;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+12940], ecx

; 22252:         nk_free_panel(ctx, popup->layout);

	mov	eax, DWORD PTR _popup$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_free_panel
	add	esp, 8

; 22253:         popup->layout = 0;

	mov	eax, DWORD PTR _popup$[ebp]
	mov	DWORD PTR [eax+140], 0

; 22254:         return 0;

	xor	eax, eax
$LN3@nk_popup_b:

; 22255:     }
; 22256: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_popup_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_plot_function
_TEXT	SEGMENT
tv91 = -244						; size = 4
tv89 = -244						; size = 4
_value$1 = -44						; size = 4
_max_value$ = -32					; size = 4
_min_value$ = -20					; size = 4
_i$ = -8						; size = 4
_ctx$ = 8						; size = 4
_type$ = 12						; size = 4
_userdata$ = 16						; size = 4
_value_getter$ = 20					; size = 4
_count$ = 24						; size = 4
_offset$ = 28						; size = 4
_nk_plot_function PROC					; COMDAT

; 21899: {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 21900:     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 21901:     float min_value;
; 21902:     float max_value;
; 21903: 
; 21904:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN12@nk_plot_fu
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_plot_function@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_plot_fu:

; 21905:     NK_ASSERT(value_getter);

	cmp	DWORD PTR _value_getter$[ebp], 0
	jne	SHORT $LN13@nk_plot_fu
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_plot_function@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@MGBAIKDD@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA_?$AAg?$AAe?$AAt?$AAt?$AAe?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_plot_fu:

; 21906:     if (!ctx || !value_getter || !count) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN8@nk_plot_fu
	cmp	DWORD PTR _value_getter$[ebp], 0
	je	SHORT $LN8@nk_plot_fu
	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN9@nk_plot_fu
$LN8@nk_plot_fu:
	jmp	$LN4@nk_plot_fu
$LN9@nk_plot_fu:

; 21907: 
; 21908:     max_value = min_value = value_getter(userdata, offset);

	mov	esi, esp
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _userdata$[ebp]
	push	ecx
	call	DWORD PTR _value_getter$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _min_value$[ebp]
	movss	xmm0, DWORD PTR _min_value$[ebp]
	movss	DWORD PTR _max_value$[ebp], xmm0

; 21909:     for (i = 0; i < count; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@nk_plot_fu
$LN6@nk_plot_fu:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@nk_plot_fu:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	$LN5@nk_plot_fu

; 21910:         float value = value_getter(userdata, i + offset);

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _userdata$[ebp]
	push	ecx
	call	DWORD PTR _value_getter$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _value$1[ebp]

; 21911:         min_value = NK_MIN(value, min_value);

	movss	xmm0, DWORD PTR _min_value$[ebp]
	comiss	xmm0, DWORD PTR _value$1[ebp]
	jbe	SHORT $LN14@nk_plot_fu
	movss	xmm0, DWORD PTR _value$1[ebp]
	movss	DWORD PTR tv89[ebp], xmm0
	jmp	SHORT $LN15@nk_plot_fu
$LN14@nk_plot_fu:
	movss	xmm0, DWORD PTR _min_value$[ebp]
	movss	DWORD PTR tv89[ebp], xmm0
$LN15@nk_plot_fu:
	movss	xmm0, DWORD PTR tv89[ebp]
	movss	DWORD PTR _min_value$[ebp], xmm0

; 21912:         max_value = NK_MAX(value, max_value);

	movss	xmm0, DWORD PTR _max_value$[ebp]
	comiss	xmm0, DWORD PTR _value$1[ebp]
	jbe	SHORT $LN16@nk_plot_fu
	movss	xmm0, DWORD PTR _max_value$[ebp]
	movss	DWORD PTR tv91[ebp], xmm0
	jmp	SHORT $LN17@nk_plot_fu
$LN16@nk_plot_fu:
	movss	xmm0, DWORD PTR _value$1[ebp]
	movss	DWORD PTR tv91[ebp], xmm0
$LN17@nk_plot_fu:
	movss	xmm0, DWORD PTR tv91[ebp]
	movss	DWORD PTR _max_value$[ebp], xmm0

; 21913:     }

	jmp	$LN6@nk_plot_fu
$LN5@nk_plot_fu:

; 21914: 
; 21915:     if (nk_chart_begin(ctx, type, count, min_value, max_value)) {

	push	ecx
	movss	xmm0, DWORD PTR _max_value$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _min_value$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_chart_begin
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN4@nk_plot_fu

; 21916:         for (i = 0; i < count; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_plot_fu
$LN2@nk_plot_fu:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_plot_fu:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN1@nk_plot_fu

; 21917:             nk_chart_push(ctx, value_getter(userdata, i + offset));

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _userdata$[ebp]
	push	ecx
	call	DWORD PTR _value_getter$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_chart_push
	add	esp, 8
	jmp	SHORT $LN2@nk_plot_fu
$LN1@nk_plot_fu:

; 21918:         nk_chart_end(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_chart_end
	add	esp, 4
$LN4@nk_plot_fu:

; 21919:     }
; 21920: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_plot_function ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_plot
_TEXT	SEGMENT
tv136 = -232						; size = 4
tv94 = -232						; size = 4
_max_value$ = -32					; size = 4
_min_value$ = -20					; size = 4
_i$ = -8						; size = 4
_ctx$ = 8						; size = 4
_type$ = 12						; size = 4
_values$ = 16						; size = 4
_count$ = 20						; size = 4
_offset$ = 24						; size = 4
_nk_plot PROC						; COMDAT

; 21873: {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 21874:     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 21875:     float min_value;
; 21876:     float max_value;
; 21877: 
; 21878:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN12@nk_plot
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_plot@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_plot:

; 21879:     NK_ASSERT(values);

	cmp	DWORD PTR _values$[ebp], 0
	jne	SHORT $LN13@nk_plot
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_plot@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@IBMGLEDN@?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_plot:

; 21880:     if (!ctx || !values || !count) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN8@nk_plot
	cmp	DWORD PTR _values$[ebp], 0
	je	SHORT $LN8@nk_plot
	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN9@nk_plot
$LN8@nk_plot:
	jmp	$LN4@nk_plot
$LN9@nk_plot:

; 21881: 
; 21882:     min_value = values[offset];

	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR _min_value$[ebp], xmm0

; 21883:     max_value = values[offset];

	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR _max_value$[ebp], xmm0

; 21884:     for (i = 0; i < count; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@nk_plot
$LN6@nk_plot:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@nk_plot:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	$LN5@nk_plot

; 21885:         min_value = NK_MIN(values[i + offset], min_value);

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR _min_value$[ebp]
	comiss	xmm0, DWORD PTR [ecx+eax*4]
	jbe	SHORT $LN14@nk_plot
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv94[ebp], xmm0
	jmp	SHORT $LN15@nk_plot
$LN14@nk_plot:
	movss	xmm0, DWORD PTR _min_value$[ebp]
	movss	DWORD PTR tv94[ebp], xmm0
$LN15@nk_plot:
	movss	xmm0, DWORD PTR tv94[ebp]
	movss	DWORD PTR _min_value$[ebp], xmm0

; 21886:         max_value = NK_MAX(values[i + offset], max_value);

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR _max_value$[ebp]
	comiss	xmm0, DWORD PTR [ecx+eax*4]
	jbe	SHORT $LN16@nk_plot
	movss	xmm0, DWORD PTR _max_value$[ebp]
	movss	DWORD PTR tv136[ebp], xmm0
	jmp	SHORT $LN17@nk_plot
$LN16@nk_plot:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR _values$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv136[ebp], xmm0
$LN17@nk_plot:
	movss	xmm0, DWORD PTR tv136[ebp]
	movss	DWORD PTR _max_value$[ebp], xmm0

; 21887:     }

	jmp	$LN6@nk_plot
$LN5@nk_plot:

; 21888: 
; 21889:     if (nk_chart_begin(ctx, type, count, min_value, max_value)) {

	push	ecx
	movss	xmm0, DWORD PTR _max_value$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _min_value$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_chart_begin
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN4@nk_plot

; 21890:         for (i = 0; i < count; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_plot
$LN2@nk_plot:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_plot:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN1@nk_plot

; 21891:             nk_chart_push(ctx, values[i + offset]);

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_chart_push
	add	esp, 8
	jmp	SHORT $LN2@nk_plot
$LN1@nk_plot:

; 21892:         nk_chart_end(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_chart_end
	add	esp, 4
$LN4@nk_plot:

; 21893:     }
; 21894: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_plot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_chart_end
_TEXT	SEGMENT
_chart$ = -20						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_chart_end PROC					; COMDAT

; 21855: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 21856:     struct nk_window *win;
; 21857:     struct nk_chart *chart;
; 21858: 
; 21859:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_chart_e
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_chart_end@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_chart_e:

; 21860:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_chart_e
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_chart_end@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_chart_e:

; 21861:     if (!ctx || !ctx->current)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_chart_e
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_chart_e
$LN1@nk_chart_e:

; 21862:         return;

	jmp	SHORT $LN3@nk_chart_e
$LN2@nk_chart_e:

; 21863: 
; 21864:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 21865:     chart = &win->layout->chart;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	add	ecx, 224				; 000000e0H
	mov	DWORD PTR _chart$[ebp], ecx

; 21866:     NK_MEMSET(chart, 0, sizeof(*chart));

	push	180					; 000000b4H
	push	0
	mov	eax, DWORD PTR _chart$[ebp]
	push	eax
	call	_nk_memset
	add	esp, 12					; 0000000cH
$LN3@nk_chart_e:

; 21867:     return;
; 21868: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_chart_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_chart_push_slot
_TEXT	SEGMENT
tv142 = -220						; size = 4
_win$ = -20						; size = 4
_flags$ = -8						; size = 4
_ctx$ = 8						; size = 4
_value$ = 12						; size = 4
_slot$ = 16						; size = 4
_nk_chart_push_slot PROC				; COMDAT

; 21824: {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 21825:     nk_flags flags;
; 21826:     struct nk_window *win;
; 21827: 
; 21828:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN12@nk_chart_p
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_chart_push_slot@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_chart_p:

; 21829:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN13@nk_chart_p
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_chart_push_slot@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_chart_p:

; 21830:     NK_ASSERT(slot >= 0 && slot < NK_CHART_MAX_SLOT);

	cmp	DWORD PTR _slot$[ebp], 0
	jl	SHORT $LN14@nk_chart_p
	cmp	DWORD PTR _slot$[ebp], 4
	jl	SHORT $LN15@nk_chart_p
$LN14@nk_chart_p:
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_chart_push_slot@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@OFPHFACA@?$AAs?$AAl?$AAo?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAl?$AAo?$AAt?$AA?5?$AA?$DM?$AA?5?$AA4?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@nk_chart_p:

; 21831:     NK_ASSERT(slot < ctx->current->layout->chart.slot);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR _slot$[ebp]
	cmp	eax, DWORD PTR [edx+224]
	jl	SHORT $LN16@nk_chart_p
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_chart_push_slot@@9@9
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1FA@NCCAOEEL@?$AAs?$AAl?$AAo?$AAt?$AA?5?$AA?$DM?$AA?5?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAa@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN16@nk_chart_p:

; 21832:     if (!ctx || !ctx->current || slot >= NK_CHART_MAX_SLOT) return nk_false;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN8@nk_chart_p
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN8@nk_chart_p
	cmp	DWORD PTR _slot$[ebp], 4
	jl	SHORT $LN9@nk_chart_p
$LN8@nk_chart_p:
	xor	eax, eax
	jmp	$LN10@nk_chart_p
$LN9@nk_chart_p:

; 21833:     if (slot >= ctx->current->layout->chart.slot) return nk_false;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR _slot$[ebp]
	cmp	eax, DWORD PTR [edx+224]
	jl	SHORT $LN7@nk_chart_p
	xor	eax, eax
	jmp	$LN10@nk_chart_p
$LN7@nk_chart_p:

; 21834: 
; 21835:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 21836:     if (win->layout->chart.slot < slot) return nk_false;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [ecx+224]
	cmp	edx, DWORD PTR _slot$[ebp]
	jge	SHORT $LN6@nk_chart_p
	xor	eax, eax
	jmp	$LN10@nk_chart_p
$LN6@nk_chart_p:

; 21837:     switch (win->layout->chart.slots[slot].type) {

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	imul	edx, DWORD PTR _slot$[ebp], 40
	mov	eax, DWORD PTR [ecx+edx+244]
	mov	DWORD PTR tv142[ebp], eax
	cmp	DWORD PTR tv142[ebp], 0
	je	SHORT $LN3@nk_chart_p
	cmp	DWORD PTR tv142[ebp], 1
	je	SHORT $LN2@nk_chart_p
	jmp	SHORT $LN1@nk_chart_p
$LN3@nk_chart_p:

; 21838:     case NK_CHART_LINES:
; 21839:         flags = nk_chart_push_line(ctx, win, &win->layout->chart, value, slot); break;

	mov	eax, DWORD PTR _slot$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _value$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	add	edx, 224				; 000000e0H
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_chart_push_line
	add	esp, 20					; 00000014H
	mov	DWORD PTR _flags$[ebp], eax
	jmp	SHORT $LN4@nk_chart_p
$LN2@nk_chart_p:

; 21840:     case NK_CHART_COLUMN:
; 21841:         flags = nk_chart_push_column(ctx, win, &win->layout->chart, value, slot); break;

	mov	eax, DWORD PTR _slot$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _value$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	add	edx, 224				; 000000e0H
	push	edx
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_chart_push_column
	add	esp, 20					; 00000014H
	mov	DWORD PTR _flags$[ebp], eax
	jmp	SHORT $LN4@nk_chart_p
$LN1@nk_chart_p:

; 21842:     default:
; 21843:     case NK_CHART_MAX:
; 21844:         flags = 0;

	mov	DWORD PTR _flags$[ebp], 0
$LN4@nk_chart_p:

; 21845:     }
; 21846:     return flags;

	mov	eax, DWORD PTR _flags$[ebp]
$LN10@nk_chart_p:

; 21847: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_chart_push_slot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_chart_push
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_value$ = 12						; size = 4
_nk_chart_push PROC					; COMDAT

; 21851: {return nk_chart_push_slot(ctx, value, 0);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	ecx
	movss	xmm0, DWORD PTR _value$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_chart_push_slot
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_chart_push ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_chart_add_slot_colored
_TEXT	SEGMENT
tv155 = -220						; size = 4
tv152 = -220						; size = 4
_slot$1 = -20						; size = 4
_chart$2 = -8						; size = 4
_ctx$ = 8						; size = 4
_type$ = 12						; size = 4
_color$ = 16						; size = 4
_highlight$ = 20					; size = 4
_count$ = 24						; size = 4
_min_value$ = 28					; size = 4
_max_value$ = 32					; size = 4
_nk_chart_add_slot_colored PROC				; COMDAT

; 21679: {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 21680:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_chart_a
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_chart_add_slot_colored@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_chart_a:

; 21681:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN7@nk_chart_a
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_chart_add_slot_colored@@9@9
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_chart_a:

; 21682:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN8@nk_chart_a
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_chart_add_slot_colored@@9@9
	add	edx, 3
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_chart_a:

; 21683:     NK_ASSERT(ctx->current->layout->chart.slot < NK_CHART_MAX_SLOT);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	cmp	DWORD PTR [edx+224], 4
	jl	SHORT $LN9@nk_chart_a
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_chart_add_slot_colored@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EK@IHPMBODD@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAa?$AAr?$AAt?$AA?4?$AAs?$AAl?$AAo?$AAt@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_chart_a:

; 21684:     if (!ctx || !ctx->current || !ctx->current->layout) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_chart_a
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN2@nk_chart_a
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN3@nk_chart_a
$LN2@nk_chart_a:
	jmp	$LN4@nk_chart_a
$LN3@nk_chart_a:

; 21685:     if (ctx->current->layout->chart.slot >= NK_CHART_MAX_SLOT) return;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	cmp	DWORD PTR [edx+224], 4
	jl	SHORT $LN1@nk_chart_a
	jmp	$LN4@nk_chart_a
$LN1@nk_chart_a:

; 21686: 
; 21687:     /* add another slot into the graph */
; 21688:     {struct nk_chart *chart = &ctx->current->layout->chart;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	add	edx, 224				; 000000e0H
	mov	DWORD PTR _chart$2[ebp], edx

; 21689:     struct nk_chart_slot *slot = &chart->slots[chart->slot++];

	mov	eax, DWORD PTR _chart$2[ebp]
	imul	ecx, DWORD PTR [eax], 40
	mov	edx, DWORD PTR _chart$2[ebp]
	lea	eax, DWORD PTR [edx+ecx+20]
	mov	DWORD PTR _slot$1[ebp], eax
	mov	ecx, DWORD PTR _chart$2[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _chart$2[ebp]
	mov	DWORD PTR [eax], edx

; 21690:     slot->type = type;

	mov	eax, DWORD PTR _slot$1[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], ecx

; 21691:     slot->count = count;

	mov	eax, DWORD PTR _slot$1[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 21692:     slot->color = color;

	mov	eax, DWORD PTR _slot$1[ebp]
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 21693:     slot->highlight = highlight;

	mov	eax, DWORD PTR _slot$1[ebp]
	mov	ecx, DWORD PTR _highlight$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 21694:     slot->min = NK_MIN(min_value, max_value);

	movss	xmm0, DWORD PTR _max_value$[ebp]
	comiss	xmm0, DWORD PTR _min_value$[ebp]
	jbe	SHORT $LN10@nk_chart_a
	movss	xmm0, DWORD PTR _min_value$[ebp]
	movss	DWORD PTR tv152[ebp], xmm0
	jmp	SHORT $LN11@nk_chart_a
$LN10@nk_chart_a:
	movss	xmm0, DWORD PTR _max_value$[ebp]
	movss	DWORD PTR tv152[ebp], xmm0
$LN11@nk_chart_a:
	mov	eax, DWORD PTR _slot$1[ebp]
	movss	xmm0, DWORD PTR tv152[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 21695:     slot->max = NK_MAX(min_value, max_value);

	movss	xmm0, DWORD PTR _max_value$[ebp]
	comiss	xmm0, DWORD PTR _min_value$[ebp]
	jbe	SHORT $LN12@nk_chart_a
	movss	xmm0, DWORD PTR _max_value$[ebp]
	movss	DWORD PTR tv155[ebp], xmm0
	jmp	SHORT $LN13@nk_chart_a
$LN12@nk_chart_a:
	movss	xmm0, DWORD PTR _min_value$[ebp]
	movss	DWORD PTR tv155[ebp], xmm0
$LN13@nk_chart_a:
	mov	eax, DWORD PTR _slot$1[ebp]
	movss	xmm0, DWORD PTR tv155[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 21696:     slot->range = slot->max - slot->min;}

	mov	eax, DWORD PTR _slot$1[ebp]
	mov	ecx, DWORD PTR _slot$1[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	subss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _slot$1[ebp]
	movss	DWORD PTR [edx+20], xmm0
$LN4@nk_chart_a:

; 21697: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_chart_add_slot_colored ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_chart_add_slot
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_type$ = 12						; size = 4
_count$ = 16						; size = 4
_min_value$ = 20					; size = 4
_max_value$ = 24					; size = 4
_nk_chart_add_slot PROC					; COMDAT

; 21702: {nk_chart_add_slot_colored(ctx, type, ctx->style.chart.color, ctx->style.chart.selected_color, count, min_value, max_value);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR _max_value$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _min_value$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+3468]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+3472]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_chart_add_slot_colored
	add	esp, 28					; 0000001cH
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_chart_add_slot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_chart_begin_colored
_TEXT	SEGMENT
tv195 = -320						; size = 4
tv192 = -320						; size = 4
tv178 = -320						; size = 4
tv165 = -320						; size = 4
$T1 = -312						; size = 16
_slot$2 = -96						; size = 4
_bounds$ = -84						; size = 16
_background$ = -60					; size = 4
_style$ = -48						; size = 4
_config$ = -36						; size = 4
_chart$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_type$ = 12						; size = 4
_color$ = 16						; size = 4
_highlight$ = 20					; size = 4
_count$ = 24						; size = 4
_min_value$ = 28					; size = 4
_max_value$ = 32					; size = 4
_nk_chart_begin_colored PROC				; COMDAT

; 21614: {

	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21615:     struct nk_window *win;
; 21616:     struct nk_chart *chart;
; 21617:     const struct nk_style *config;
; 21618:     const struct nk_style_chart *style;
; 21619: 
; 21620:     const struct nk_style_item *background;
; 21621:     struct nk_rect bounds = {0, 0, 0, 0};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _bounds$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _bounds$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _bounds$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _bounds$[ebp+12], xmm0

; 21622: 
; 21623:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN8@nk_chart_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_chart_begin_colored@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_chart_b:

; 21624:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN9@nk_chart_b
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_chart_begin_colored@@9@9
	add	ecx, 10					; 0000000aH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_chart_b:

; 21625:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN10@nk_chart_b
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_chart_begin_colored@@9@9
	add	edx, 11					; 0000000bH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_chart_b:

; 21626: 
; 21627:     if (!ctx || !ctx->current || !ctx->current->layout) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN4@nk_chart_b
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN4@nk_chart_b
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN5@nk_chart_b
$LN4@nk_chart_b:
	xor	eax, eax
	jmp	$LN6@nk_chart_b
$LN5@nk_chart_b:

; 21628:     if (!nk_widget(&bounds, ctx)) {

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@nk_chart_b

; 21629:         chart = &ctx->current->layout->chart;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	add	edx, 224				; 000000e0H
	mov	DWORD PTR _chart$[ebp], edx

; 21630:         nk_zero(chart, sizeof(*chart));

	push	180					; 000000b4H
	mov	eax, DWORD PTR _chart$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 21631:         return 0;

	xor	eax, eax
	jmp	$LN6@nk_chart_b
$LN3@nk_chart_b:

; 21632:     }
; 21633: 
; 21634:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 21635:     config = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _config$[ebp], eax

; 21636:     chart = &win->layout->chart;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	add	ecx, 224				; 000000e0H
	mov	DWORD PTR _chart$[ebp], ecx

; 21637:     style = &config->chart;

	mov	eax, DWORD PTR _config$[ebp]
	add	eax, 3084				; 00000c0cH
	mov	DWORD PTR _style$[ebp], eax

; 21638: 
; 21639:     /* setup basic generic chart  */
; 21640:     nk_zero(chart, sizeof(*chart));

	push	180					; 000000b4H
	mov	eax, DWORD PTR _chart$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 21641:     chart->x = bounds.x + style->padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _bounds$[ebp]
	addss	xmm0, DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _chart$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 21642:     chart->y = bounds.y + style->padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	addss	xmm0, DWORD PTR [eax+44]
	mov	ecx, DWORD PTR _chart$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 21643:     chart->w = bounds.w - 2 * style->padding.x;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+40]
	movss	xmm1, DWORD PTR _bounds$[ebp+8]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _chart$[ebp]
	movss	DWORD PTR [ecx+12], xmm1

; 21644:     chart->h = bounds.h - 2 * style->padding.y;

	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+44]
	movss	xmm1, DWORD PTR _bounds$[ebp+12]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _chart$[ebp]
	movss	DWORD PTR [ecx+16], xmm1

; 21645:     chart->w = NK_MAX(chart->w, 2 * style->padding.x);

	mov	eax, DWORD PTR _chart$[ebp]
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+40]
	comiss	xmm0, DWORD PTR [eax+12]
	jbe	SHORT $LN11@nk_chart_b
	mov	edx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+40]
	movss	DWORD PTR tv165[ebp], xmm0
	jmp	SHORT $LN12@nk_chart_b
$LN11@nk_chart_b:
	mov	eax, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR tv165[ebp], xmm0
$LN12@nk_chart_b:
	mov	ecx, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR tv165[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 21646:     chart->h = NK_MAX(chart->h, 2 * style->padding.y);

	mov	eax, DWORD PTR _chart$[ebp]
	mov	ecx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+44]
	comiss	xmm0, DWORD PTR [eax+16]
	jbe	SHORT $LN13@nk_chart_b
	mov	edx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+44]
	movss	DWORD PTR tv178[ebp], xmm0
	jmp	SHORT $LN14@nk_chart_b
$LN13@nk_chart_b:
	mov	eax, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR tv178[ebp], xmm0
$LN14@nk_chart_b:
	mov	ecx, DWORD PTR _chart$[ebp]
	movss	xmm0, DWORD PTR tv178[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 21647: 
; 21648:     /* add first slot into chart */
; 21649:     {struct nk_chart_slot *slot = &chart->slots[chart->slot++];

	mov	eax, DWORD PTR _chart$[ebp]
	imul	ecx, DWORD PTR [eax], 40
	mov	edx, DWORD PTR _chart$[ebp]
	lea	eax, DWORD PTR [edx+ecx+20]
	mov	DWORD PTR _slot$2[ebp], eax
	mov	ecx, DWORD PTR _chart$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _chart$[ebp]
	mov	DWORD PTR [eax], edx

; 21650:     slot->type = type;

	mov	eax, DWORD PTR _slot$2[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], ecx

; 21651:     slot->count = count;

	mov	eax, DWORD PTR _slot$2[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 21652:     slot->color = color;

	mov	eax, DWORD PTR _slot$2[ebp]
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 21653:     slot->highlight = highlight;

	mov	eax, DWORD PTR _slot$2[ebp]
	mov	ecx, DWORD PTR _highlight$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 21654:     slot->min = NK_MIN(min_value, max_value);

	movss	xmm0, DWORD PTR _max_value$[ebp]
	comiss	xmm0, DWORD PTR _min_value$[ebp]
	jbe	SHORT $LN15@nk_chart_b
	movss	xmm0, DWORD PTR _min_value$[ebp]
	movss	DWORD PTR tv192[ebp], xmm0
	jmp	SHORT $LN16@nk_chart_b
$LN15@nk_chart_b:
	movss	xmm0, DWORD PTR _max_value$[ebp]
	movss	DWORD PTR tv192[ebp], xmm0
$LN16@nk_chart_b:
	mov	eax, DWORD PTR _slot$2[ebp]
	movss	xmm0, DWORD PTR tv192[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 21655:     slot->max = NK_MAX(min_value, max_value);

	movss	xmm0, DWORD PTR _max_value$[ebp]
	comiss	xmm0, DWORD PTR _min_value$[ebp]
	jbe	SHORT $LN17@nk_chart_b
	movss	xmm0, DWORD PTR _max_value$[ebp]
	movss	DWORD PTR tv195[ebp], xmm0
	jmp	SHORT $LN18@nk_chart_b
$LN17@nk_chart_b:
	movss	xmm0, DWORD PTR _min_value$[ebp]
	movss	DWORD PTR tv195[ebp], xmm0
$LN18@nk_chart_b:
	mov	eax, DWORD PTR _slot$2[ebp]
	movss	xmm0, DWORD PTR tv195[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 21656:     slot->range = slot->max - slot->min;}

	mov	eax, DWORD PTR _slot$2[ebp]
	mov	ecx, DWORD PTR _slot$2[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	subss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _slot$2[ebp]
	movss	DWORD PTR [edx+20], xmm0

; 21657: 
; 21658:     /* draw chart background */
; 21659:     background = &style->background;

	mov	eax, DWORD PTR _style$[ebp]
	mov	DWORD PTR _background$[ebp], eax

; 21660:     if (background->type == NK_STYLE_ITEM_IMAGE) {

	mov	eax, DWORD PTR _background$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN2@nk_chart_b

; 21661:         nk_draw_image(&win->buffer, bounds, &background->data.image, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	mov	ecx, DWORD PTR _background$[ebp]
	add	ecx, 4
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_image
	add	esp, 28					; 0000001cH

; 21662:     } else {

	jmp	$LN1@nk_chart_b
$LN2@nk_chart_b:

; 21663:         nk_fill_rect(&win->buffer, bounds, style->rounding, style->border_color);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+36]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH

; 21664:         nk_fill_rect(&win->buffer, nk_shrink_rect(bounds, style->border),
; 21665:             style->rounding, style->background.data.color);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+36]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _style$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_nk_shrink_rect
	add	esp, 8
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	_nk_fill_rect
	add	esp, 28					; 0000001cH
$LN1@nk_chart_b:

; 21666:     }
; 21667:     return 1;

	mov	eax, 1
$LN6@nk_chart_b:

; 21668: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@nk_chart_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN21@nk_chart_b:
	DD	1
	DD	$LN20@nk_chart_b
$LN20@nk_chart_b:
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$LN19@nk_chart_b
$LN19@nk_chart_b:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_chart_begin_colored ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_chart_begin
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_type$ = 12						; size = 4
_count$ = 16						; size = 4
_min_value$ = 20					; size = 4
_max_value$ = 24					; size = 4
_nk_chart_begin PROC					; COMDAT

; 21673: {return nk_chart_begin_colored(ctx, type, ctx->style.chart.color, ctx->style.chart.selected_color, count, min_value, max_value);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR _max_value$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _min_value$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+3468]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+3472]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_chart_begin_colored
	add	esp, 28					; 0000001cH
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_chart_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_edit_unfocus
_TEXT	SEGMENT
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_edit_unfocus PROC					; COMDAT

; 21189: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 21190:     struct nk_window *win;
; 21191:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_edit_un
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_edit_unfocus@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_edit_un:

; 21192:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_edit_un
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_edit_unfocus@@9@9
	add	ecx, 3
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_edit_un:

; 21193:     if (!ctx || !ctx->current) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_edit_un
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_edit_un
$LN1@nk_edit_un:
	jmp	SHORT $LN3@nk_edit_un
$LN2@nk_edit_un:

; 21194: 
; 21195:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 21196:     win->edit.active = nk_false;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+332], 0

; 21197:     win->edit.name = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+320], 0
$LN3@nk_edit_un:

; 21198: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_edit_unfocus ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_edit_focus
_TEXT	SEGMENT
_win$ = -20						; size = 4
_hash$ = -8						; size = 4
_ctx$ = 8						; size = 4
_flags$ = 12						; size = 4
_nk_edit_focus PROC					; COMDAT

; 21171: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 21172:     nk_hash hash;
; 21173:     struct nk_window *win;
; 21174: 
; 21175:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_edit_fo
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_edit_focus@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_edit_fo:

; 21176:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN7@nk_edit_fo
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_edit_focus@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_edit_fo:

; 21177:     if (!ctx || !ctx->current) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_edit_fo
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN3@nk_edit_fo
$LN2@nk_edit_fo:
	jmp	SHORT $LN4@nk_edit_fo
$LN3@nk_edit_fo:

; 21178: 
; 21179:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 21180:     hash = win->edit.seq;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+324]
	mov	DWORD PTR _hash$[ebp], ecx

; 21181:     win->edit.active = nk_true;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+332], 1

; 21182:     win->edit.name = hash;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR [eax+320], ecx

; 21183:     if (flags & NK_EDIT_ALWAYS_INSERT_MODE)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 512				; 00000200H
	je	SHORT $LN4@nk_edit_fo

; 21184:         win->edit.mode = NK_TEXT_EDIT_MODE_INSERT;

	mov	eax, DWORD PTR _win$[ebp]
	mov	BYTE PTR [eax+360], 1
$LN4@nk_edit_fo:

; 21185: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_edit_focus ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_edit_buffer
_TEXT	SEGMENT
tv167 = -312						; size = 4
tv171 = -308						; size = 4
tv165 = -308						; size = 4
tv140 = -308						; size = 4
_hash$ = -108						; size = 4
_prev_state$ = -93					; size = 1
_ret_flags$ = -84					; size = 4
_bounds$ = -72						; size = 16
_state$ = -48						; size = 4
_in$ = -36						; size = 4
_style$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_flags$ = 12						; size = 4
_edit$ = 16						; size = 4
_filter$ = 20						; size = 4
_nk_edit_buffer PROC					; COMDAT

; 21261: {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21262:     struct nk_window *win;
; 21263:     struct nk_style *style;
; 21264:     struct nk_input *in;
; 21265: 
; 21266:     enum nk_widget_layout_states state;
; 21267:     struct nk_rect bounds;
; 21268: 
; 21269:     nk_flags ret_flags = 0;

	mov	DWORD PTR _ret_flags$[ebp], 0

; 21270:     unsigned char prev_state;
; 21271:     nk_hash hash;
; 21272: 
; 21273:     /* make sure correct values */
; 21274:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN14@nk_edit_bu
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_edit_buffer@@9@9
	add	eax, 13					; 0000000dH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_edit_bu:

; 21275:     NK_ASSERT(edit);

	cmp	DWORD PTR _edit$[ebp], 0
	jne	SHORT $LN15@nk_edit_bu
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_edit_buffer@@9@9
	add	eax, 14					; 0000000eH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19LELMJPKF@?$AAe?$AAd?$AAi?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@nk_edit_bu:

; 21276:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN16@nk_edit_bu
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_edit_buffer@@9@9
	add	ecx, 15					; 0000000fH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN16@nk_edit_bu:

; 21277:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN17@nk_edit_bu
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_edit_buffer@@9@9
	add	edx, 16					; 00000010H
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN17@nk_edit_bu:

; 21278:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN10@nk_edit_bu
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN10@nk_edit_bu
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN11@nk_edit_bu
$LN10@nk_edit_bu:

; 21279:         return 0;

	xor	eax, eax
	jmp	$LN12@nk_edit_bu
$LN11@nk_edit_bu:

; 21280: 
; 21281:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 21282:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 21283:     state = nk_widget(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 21284:     if (!state) return state;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN9@nk_edit_bu
	mov	eax, DWORD PTR _state$[ebp]
	jmp	$LN12@nk_edit_bu
$LN9@nk_edit_bu:

; 21285:     in = (win->layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 4096				; 00001000H
	je	SHORT $LN18@nk_edit_bu
	mov	DWORD PTR tv140[ebp], 0
	jmp	SHORT $LN19@nk_edit_bu
$LN18@nk_edit_bu:
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv140[ebp], eax
$LN19@nk_edit_bu:
	mov	ecx, DWORD PTR tv140[ebp]
	mov	DWORD PTR _in$[ebp], ecx

; 21286: 
; 21287:     /* check if edit is currently hot item */
; 21288:     hash = win->edit.seq++;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+324]
	mov	DWORD PTR _hash$[ebp], ecx
	mov	edx, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [edx+324]
	add	eax, 1
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+324], eax

; 21289:     if (win->edit.active && hash == win->edit.name) {

	mov	eax, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN8@nk_edit_bu
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	cmp	ecx, DWORD PTR [eax+320]
	jne	SHORT $LN8@nk_edit_bu

; 21290:         if (flags & NK_EDIT_NO_CURSOR)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN7@nk_edit_bu

; 21291:             edit->cursor = edit->string.len;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+88], edx
$LN7@nk_edit_bu:

; 21292:         if (!(flags & NK_EDIT_SELECTABLE)) {

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 32					; 00000020H
	jne	SHORT $LN6@nk_edit_bu

; 21293:             edit->select_start = edit->cursor;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+92], edx

; 21294:             edit->select_end = edit->cursor;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+96], edx
$LN6@nk_edit_bu:

; 21295:         }
; 21296:         if (flags & NK_EDIT_CLIPBOARD)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 64					; 00000040H
	je	SHORT $LN8@nk_edit_bu

; 21297:             edit->clip = ctx->clip;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5808				; 000016b0H
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
$LN8@nk_edit_bu:

; 21298:     }
; 21299: 
; 21300:     filter = (!filter) ? nk_filter_default: filter;

	cmp	DWORD PTR _filter$[ebp], 0
	jne	SHORT $LN20@nk_edit_bu
	mov	DWORD PTR tv165[ebp], 1
	jmp	SHORT $LN21@nk_edit_bu
$LN20@nk_edit_bu:
	mov	DWORD PTR tv165[ebp], 0
$LN21@nk_edit_bu:
	cmp	DWORD PTR tv165[ebp], 0
	je	SHORT $LN22@nk_edit_bu
	mov	DWORD PTR tv167[ebp], OFFSET _nk_filter_default
	jmp	SHORT $LN23@nk_edit_bu
$LN22@nk_edit_bu:
	mov	eax, DWORD PTR _filter$[ebp]
	mov	DWORD PTR tv167[ebp], eax
$LN23@nk_edit_bu:
	mov	ecx, DWORD PTR tv167[ebp]
	mov	DWORD PTR _filter$[ebp], ecx

; 21301:     prev_state = (unsigned char)edit->active;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	cl, BYTE PTR [eax+105]
	mov	BYTE PTR _prev_state$[ebp], cl

; 21302:     in = (flags & NK_EDIT_READ_ONLY) ? 0: in;

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 1
	je	SHORT $LN24@nk_edit_bu
	mov	DWORD PTR tv171[ebp], 0
	jmp	SHORT $LN25@nk_edit_bu
$LN24@nk_edit_bu:
	mov	ecx, DWORD PTR _in$[ebp]
	mov	DWORD PTR tv171[ebp], ecx
$LN25@nk_edit_bu:
	mov	edx, DWORD PTR tv171[ebp]
	mov	DWORD PTR _in$[ebp], edx

; 21303:     ret_flags = nk_do_edit(&ctx->last_widget_state, &win->buffer, bounds, flags,
; 21304:                     filter, edit, &style->edit, in, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 2512				; 000009d0H
	push	eax
	mov	ecx, DWORD PTR _edit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _filter$[ebp]
	push	edx
	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 5820				; 000016bcH
	push	edx
	call	_nk_do_edit
	add	esp, 48					; 00000030H
	mov	DWORD PTR _ret_flags$[ebp], eax

; 21305: 
; 21306:     if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER)

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 16					; 00000010H
	je	SHORT $LN4@nk_edit_bu

; 21307:         ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_TEXT];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+eax+364]
	mov	DWORD PTR [ecx+392], eax
$LN4@nk_edit_bu:

; 21308:     if (edit->active && prev_state != edit->active) {

	mov	eax, DWORD PTR _edit$[ebp]
	movzx	ecx, BYTE PTR [eax+105]
	test	ecx, ecx
	je	SHORT $LN3@nk_edit_bu
	movzx	eax, BYTE PTR _prev_state$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	movzx	edx, BYTE PTR [ecx+105]
	cmp	eax, edx
	je	SHORT $LN3@nk_edit_bu

; 21309:         /* current edit is now hot */
; 21310:         win->edit.active = nk_true;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+332], 1

; 21311:         win->edit.name = hash;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR [eax+320], ecx
	jmp	SHORT $LN2@nk_edit_bu
$LN3@nk_edit_bu:

; 21312:     } else if (prev_state && !edit->active) {

	movzx	eax, BYTE PTR _prev_state$[ebp]
	test	eax, eax
	je	SHORT $LN2@nk_edit_bu
	mov	eax, DWORD PTR _edit$[ebp]
	movzx	ecx, BYTE PTR [eax+105]
	test	ecx, ecx
	jne	SHORT $LN2@nk_edit_bu

; 21313:         /* current edit is now cold */
; 21314:         win->edit.active = nk_false;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+332], 0
$LN2@nk_edit_bu:

; 21315:     }
; 21316:     return ret_flags;

	mov	eax, DWORD PTR _ret_flags$[ebp]
$LN12@nk_edit_bu:

; 21317: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@nk_edit_bu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN28@nk_edit_bu:
	DD	1
	DD	$LN27@nk_edit_bu
$LN27@nk_edit_bu:
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN26@nk_edit_bu
$LN26@nk_edit_bu:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_edit_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_edit_string_zero_terminated
_TEXT	SEGMENT
tv82 = -228						; size = 4
tv81 = -224						; size = 4
tv76 = -220						; size = 4
_len$ = -20						; size = 4
_result$ = -8						; size = 4
_ctx$ = 8						; size = 4
_flags$ = 12						; size = 4
_buffer$ = 16						; size = 4
_max$ = 20						; size = 4
_filter$ = 24						; size = 4
_nk_edit_string_zero_terminated PROC			; COMDAT

; 21322: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 21323:     nk_flags result;
; 21324:     int len = nk_strlen(buffer);

	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax

; 21325:     result = nk_edit_string(ctx, flags, buffer, &len, max, filter);

	mov	eax, DWORD PTR _filter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _max$[ebp]
	push	ecx
	lea	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_edit_string
	add	esp, 24					; 00000018H
	mov	DWORD PTR _result$[ebp], eax

; 21326:     buffer[NK_MIN(NK_MAX(max-1,0), len)] = '\0';

	mov	eax, DWORD PTR _max$[ebp]
	sub	eax, 1
	jns	SHORT $LN3@nk_edit_st
	mov	DWORD PTR tv76[ebp], 0
	jmp	SHORT $LN4@nk_edit_st
$LN3@nk_edit_st:
	mov	ecx, DWORD PTR _max$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv76[ebp], ecx
$LN4@nk_edit_st:
	mov	edx, DWORD PTR tv76[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	jge	SHORT $LN7@nk_edit_st
	mov	eax, DWORD PTR _max$[ebp]
	sub	eax, 1
	jns	SHORT $LN5@nk_edit_st
	mov	DWORD PTR tv81[ebp], 0
	jmp	SHORT $LN6@nk_edit_st
$LN5@nk_edit_st:
	mov	ecx, DWORD PTR _max$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv81[ebp], ecx
$LN6@nk_edit_st:
	mov	edx, DWORD PTR tv81[ebp]
	mov	DWORD PTR tv82[ebp], edx
	jmp	SHORT $LN8@nk_edit_st
$LN7@nk_edit_st:
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR tv82[ebp], eax
$LN8@nk_edit_st:
	mov	ecx, DWORD PTR _buffer$[ebp]
	add	ecx, DWORD PTR tv82[ebp]
	mov	BYTE PTR [ecx], 0

; 21327:     return result;

	mov	eax, DWORD PTR _result$[ebp]

; 21328: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@nk_edit_st
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@nk_edit_st:
	DD	1
	DD	$LN10@nk_edit_st
$LN10@nk_edit_st:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@nk_edit_st
$LN9@nk_edit_st:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_nk_edit_string_zero_terminated ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_edit_string
_TEXT	SEGMENT
tv265 = -252						; size = 8
tv254 = -252						; size = 8
tv88 = -248						; size = 4
tv261 = -244						; size = 4
tv250 = -244						; size = 4
tv168 = -244						; size = 4
tv164 = -244						; size = 4
tv95 = -244						; size = 4
tv86 = -244						; size = 4
_win$ = -44						; size = 4
_edit$ = -32						; size = 4
_state$ = -20						; size = 4
_hash$ = -8						; size = 4
_ctx$ = 8						; size = 4
_flags$ = 12						; size = 4
_memory$ = 16						; size = 4
_len$ = 20						; size = 4
_max$ = 24						; size = 4
_filter$ = 28						; size = 4
_nk_edit_string PROC					; COMDAT

; 21203: {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 21204:     nk_hash hash;
; 21205:     nk_flags state;
; 21206:     struct nk_text_edit *edit;
; 21207:     struct nk_window *win;
; 21208: 
; 21209:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN12@nk_edit_st
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_edit_string@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_edit_st:

; 21210:     NK_ASSERT(memory);

	cmp	DWORD PTR _memory$[ebp], 0
	jne	SHORT $LN13@nk_edit_st
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_edit_string@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@NIJNBMFJ@?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_edit_st:

; 21211:     NK_ASSERT(len);

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN14@nk_edit_st
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_edit_string@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17JOFJILLL@?$AAl?$AAe?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_edit_st:

; 21212:     if (!ctx || !memory || !len)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN8@nk_edit_st
	cmp	DWORD PTR _memory$[ebp], 0
	je	SHORT $LN8@nk_edit_st
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN9@nk_edit_st
$LN8@nk_edit_st:

; 21213:         return 0;

	xor	eax, eax
	jmp	$LN10@nk_edit_st
$LN9@nk_edit_st:

; 21214: 
; 21215:     filter = (!filter) ? nk_filter_default: filter;

	cmp	DWORD PTR _filter$[ebp], 0
	jne	SHORT $LN15@nk_edit_st
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN16@nk_edit_st
$LN15@nk_edit_st:
	mov	DWORD PTR tv86[ebp], 0
$LN16@nk_edit_st:
	cmp	DWORD PTR tv86[ebp], 0
	je	SHORT $LN17@nk_edit_st
	mov	DWORD PTR tv88[ebp], OFFSET _nk_filter_default
	jmp	SHORT $LN18@nk_edit_st
$LN17@nk_edit_st:
	mov	eax, DWORD PTR _filter$[ebp]
	mov	DWORD PTR tv88[ebp], eax
$LN18@nk_edit_st:
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR _filter$[ebp], ecx

; 21216:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 21217:     hash = win->edit.seq;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+324]
	mov	DWORD PTR _hash$[ebp], ecx

; 21218:     edit = &ctx->text_edit;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 7536				; 00001d70H
	mov	DWORD PTR _edit$[ebp], eax

; 21219:     nk_textedit_clear_state(&ctx->text_edit, (flags & NK_EDIT_MULTILINE)?
; 21220:         NK_TEXT_EDIT_MULTI_LINE: NK_TEXT_EDIT_SINGLE_LINE, filter);

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 1024				; 00000400H
	je	SHORT $LN19@nk_edit_st
	mov	DWORD PTR tv95[ebp], 1
	jmp	SHORT $LN20@nk_edit_st
$LN19@nk_edit_st:
	mov	DWORD PTR tv95[ebp], 0
$LN20@nk_edit_st:
	mov	ecx, DWORD PTR _filter$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv95[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 7536				; 00001d70H
	push	eax
	call	_nk_textedit_clear_state
	add	esp, 12					; 0000000cH

; 21221: 
; 21222:     if (win->edit.active && hash == win->edit.name) {

	mov	eax, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [eax+332], 0
	je	$LN7@nk_edit_st
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	cmp	ecx, DWORD PTR [eax+320]
	jne	$LN7@nk_edit_st

; 21223:         if (flags & NK_EDIT_NO_CURSOR)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN6@nk_edit_st

; 21224:             edit->cursor = nk_utf_len(memory, *len);

	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_nk_utf_len
	add	esp, 8
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+88], eax
	jmp	SHORT $LN5@nk_edit_st
$LN6@nk_edit_st:

; 21225:         else edit->cursor = win->edit.cursor;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+340]
	mov	DWORD PTR [eax+88], edx
$LN5@nk_edit_st:

; 21226:         if (!(flags & NK_EDIT_SELECTABLE)) {

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 32					; 00000020H
	jne	SHORT $LN4@nk_edit_st

; 21227:             edit->select_start = win->edit.cursor;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+340]
	mov	DWORD PTR [eax+92], edx

; 21228:             edit->select_end = win->edit.cursor;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+340]
	mov	DWORD PTR [eax+96], edx

; 21229:         } else {

	jmp	SHORT $LN3@nk_edit_st
$LN4@nk_edit_st:

; 21230:             edit->select_start = win->edit.sel_start;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+344]
	mov	DWORD PTR [eax+92], edx

; 21231:             edit->select_end = win->edit.sel_end;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+348]
	mov	DWORD PTR [eax+96], edx
$LN3@nk_edit_st:

; 21232:         }
; 21233:         edit->mode = win->edit.mode;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	dl, BYTE PTR [ecx+360]
	mov	BYTE PTR [eax+100], dl

; 21234:         edit->scrollbar.x = (float)win->edit.scrollbar.x;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+352]
	mov	DWORD PTR tv250[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv250[ebp]
	mov	edx, DWORD PTR tv250[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv254[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv254[ebp]
	mov	eax, DWORD PTR _edit$[ebp]
	movss	DWORD PTR [eax+80], xmm0

; 21235:         edit->scrollbar.y = (float)win->edit.scrollbar.y;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+356]
	mov	DWORD PTR tv261[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv261[ebp]
	mov	edx, DWORD PTR tv261[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv265[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv265[ebp]
	mov	eax, DWORD PTR _edit$[ebp]
	movss	DWORD PTR [eax+84], xmm0

; 21236:         edit->active = nk_true;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	BYTE PTR [eax+105], 1
	jmp	SHORT $LN2@nk_edit_st
$LN7@nk_edit_st:

; 21237:     } else edit->active = nk_false;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	BYTE PTR [eax+105], 0
$LN2@nk_edit_st:

; 21238: 
; 21239:     max = NK_MAX(1, max);

	cmp	DWORD PTR _max$[ebp], 1
	jle	SHORT $LN21@nk_edit_st
	mov	eax, DWORD PTR _max$[ebp]
	mov	DWORD PTR tv164[ebp], eax
	jmp	SHORT $LN22@nk_edit_st
$LN21@nk_edit_st:
	mov	DWORD PTR tv164[ebp], 1
$LN22@nk_edit_st:
	mov	ecx, DWORD PTR tv164[ebp]
	mov	DWORD PTR _max$[ebp], ecx

; 21240:     *len = NK_MIN(*len, max-1);

	mov	eax, DWORD PTR _max$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	DWORD PTR [ecx], eax
	jge	SHORT $LN23@nk_edit_st
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv168[ebp], eax
	jmp	SHORT $LN24@nk_edit_st
$LN23@nk_edit_st:
	mov	ecx, DWORD PTR _max$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv168[ebp], ecx
$LN24@nk_edit_st:
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR tv168[ebp]
	mov	DWORD PTR [edx], eax

; 21241:     nk_str_init_fixed(&edit->string, memory, (nk_size)max);

	mov	eax, DWORD PTR _max$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _edit$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_nk_str_init_fixed
	add	esp, 12					; 0000000cH

; 21242:     edit->string.buffer.allocated = (nk_size)*len;

	mov	eax, DWORD PTR _edit$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+56], edx

; 21243:     edit->string.len = nk_utf_len(memory, *len);

	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_nk_utf_len
	add	esp, 8
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 21244:     state = nk_edit_buffer(ctx, flags, edit, filter);

	mov	eax, DWORD PTR _filter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _edit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_edit_buffer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _state$[ebp], eax

; 21245:     *len = (int)edit->string.buffer.allocated;

	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax], edx

; 21246: 
; 21247:     if (edit->active) {

	mov	eax, DWORD PTR _edit$[ebp]
	movzx	ecx, BYTE PTR [eax+105]
	test	ecx, ecx
	je	SHORT $LN1@nk_edit_st

; 21248:         win->edit.cursor = edit->cursor;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+340], edx

; 21249:         win->edit.sel_start = edit->select_start;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR [eax+344], edx

; 21250:         win->edit.sel_end = edit->select_end;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+348], edx

; 21251:         win->edit.mode = edit->mode;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _edit$[ebp]
	mov	dl, BYTE PTR [ecx+100]
	mov	BYTE PTR [eax+360], dl

; 21252:         win->edit.scrollbar.x = (nk_ushort)edit->scrollbar.x;

	mov	eax, DWORD PTR _edit$[ebp]
	cvttss2si ecx, DWORD PTR [eax+80]
	movzx	edx, cx
	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+352], edx

; 21253:         win->edit.scrollbar.y = (nk_ushort)edit->scrollbar.y;

	mov	eax, DWORD PTR _edit$[ebp]
	cvttss2si ecx, DWORD PTR [eax+84]
	movzx	edx, cx
	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+356], edx
$LN1@nk_edit_st:

; 21254:     }
; 21255:     return state;

	mov	eax, DWORD PTR _state$[ebp]
$LN10@nk_edit_st:

; 21256: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_edit_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_propertyd
_TEXT	SEGMENT
$T1 = -288						; size = 40
_variant$ = -48						; size = 40
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_min$ = 16						; size = 8
_val$ = 24						; size = 8
_max$ = 32						; size = 8
_step$ = 40						; size = 8
_inc_per_pixel$ = 48					; size = 4
_nk_propertyd PROC					; COMDAT

; 21551: {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21552:     struct nk_property_variant variant;
; 21553:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_propert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_propertyd@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_propert:

; 21554:     NK_ASSERT(name);

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN6@nk_propert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_propertyd@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HHIIBINK@?$AAn?$AAa?$AAm?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_propert:

; 21555: 
; 21556:     if (!ctx || !ctx->current || !name) return val;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_propert
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN1@nk_propert
	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN2@nk_propert
$LN1@nk_propert:
	fld	QWORD PTR _val$[ebp]
	jmp	SHORT $LN3@nk_propert
$LN2@nk_propert:

; 21557:     variant = nk_property_variant_double(val, min, max, step);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _step$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _max$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _min$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _val$[ebp]
	movsd	QWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	_nk_property_variant_double
	add	esp, 36					; 00000024H
	mov	ecx, 10					; 0000000aH
	mov	esi, eax
	lea	edi, DWORD PTR _variant$[ebp]
	rep movsd

; 21558:     nk_property(ctx, name, &variant, inc_per_pixel, NK_FILTER_FLOAT);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR _inc_per_pixel$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _variant$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_property
	add	esp, 20					; 00000014H

; 21559:     val = variant.value.d;

	movsd	xmm0, QWORD PTR _variant$[ebp+8]
	movsd	QWORD PTR _val$[ebp], xmm0

; 21560:     return val;

	fld	QWORD PTR _val$[ebp]
$LN3@nk_propert:

; 21561: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@nk_propert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@nk_propert:
	DD	1
	DD	$LN8@nk_propert
$LN8@nk_propert:
	DD	-48					; ffffffd0H
	DD	40					; 00000028H
	DD	$LN7@nk_propert
$LN7@nk_propert:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_nk_propertyd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_propertyf
_TEXT	SEGMENT
$T1 = -288						; size = 40
_variant$ = -48						; size = 40
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_min$ = 16						; size = 4
_val$ = 20						; size = 4
_max$ = 24						; size = 4
_step$ = 28						; size = 4
_inc_per_pixel$ = 32					; size = 4
_nk_propertyf PROC					; COMDAT

; 21536: {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21537:     struct nk_property_variant variant;
; 21538:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_propert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_propertyf@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_propert:

; 21539:     NK_ASSERT(name);

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN6@nk_propert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_propertyf@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HHIIBINK@?$AAn?$AAa?$AAm?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_propert:

; 21540: 
; 21541:     if (!ctx || !ctx->current || !name) return val;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_propert
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN1@nk_propert
	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN2@nk_propert
$LN1@nk_propert:
	fld	DWORD PTR _val$[ebp]
	jmp	SHORT $LN3@nk_propert
$LN2@nk_propert:

; 21542:     variant = nk_property_variant_float(val, min, max, step);

	push	ecx
	movss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	_nk_property_variant_float
	add	esp, 20					; 00000014H
	mov	ecx, 10					; 0000000aH
	mov	esi, eax
	lea	edi, DWORD PTR _variant$[ebp]
	rep movsd

; 21543:     nk_property(ctx, name, &variant, inc_per_pixel, NK_FILTER_FLOAT);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR _inc_per_pixel$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _variant$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_property
	add	esp, 20					; 00000014H

; 21544:     val = variant.value.f;

	movss	xmm0, DWORD PTR _variant$[ebp+8]
	movss	DWORD PTR _val$[ebp], xmm0

; 21545:     return val;

	fld	DWORD PTR _val$[ebp]
$LN3@nk_propert:

; 21546: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@nk_propert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@nk_propert:
	DD	1
	DD	$LN8@nk_propert
$LN8@nk_propert:
	DD	-48					; ffffffd0H
	DD	40					; 00000028H
	DD	$LN7@nk_propert
$LN7@nk_propert:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_nk_propertyf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_propertyi
_TEXT	SEGMENT
$T1 = -288						; size = 40
_variant$ = -48						; size = 40
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_min$ = 16						; size = 4
_val$ = 20						; size = 4
_max$ = 24						; size = 4
_step$ = 28						; size = 4
_inc_per_pixel$ = 32					; size = 4
_nk_propertyi PROC					; COMDAT

; 21521: {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21522:     struct nk_property_variant variant;
; 21523:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_propert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_propertyi@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_propert:

; 21524:     NK_ASSERT(name);

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN6@nk_propert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_propertyi@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HHIIBINK@?$AAn?$AAa?$AAm?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_propert:

; 21525: 
; 21526:     if (!ctx || !ctx->current || !name) return val;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_propert
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN1@nk_propert
	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN2@nk_propert
$LN1@nk_propert:
	mov	eax, DWORD PTR _val$[ebp]
	jmp	SHORT $LN3@nk_propert
$LN2@nk_propert:

; 21527:     variant = nk_property_variant_int(val, min, max, step);

	mov	eax, DWORD PTR _step$[ebp]
	push	eax
	mov	ecx, DWORD PTR _max$[ebp]
	push	ecx
	mov	edx, DWORD PTR _min$[ebp]
	push	edx
	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_nk_property_variant_int
	add	esp, 20					; 00000014H
	mov	ecx, 10					; 0000000aH
	mov	esi, eax
	lea	edi, DWORD PTR _variant$[ebp]
	rep movsd

; 21528:     nk_property(ctx, name, &variant, inc_per_pixel, NK_FILTER_INT);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR _inc_per_pixel$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _variant$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_property
	add	esp, 20					; 00000014H

; 21529:     val = variant.value.i;

	mov	eax, DWORD PTR _variant$[ebp+8]
	mov	DWORD PTR _val$[ebp], eax

; 21530:     return val;

	mov	eax, DWORD PTR _val$[ebp]
$LN3@nk_propert:

; 21531: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@nk_propert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@nk_propert:
	DD	1
	DD	$LN8@nk_propert
$LN8@nk_propert:
	DD	-48					; ffffffd0H
	DD	40					; 00000028H
	DD	$LN7@nk_propert
$LN7@nk_propert:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_nk_propertyi ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_property_double
_TEXT	SEGMENT
$T1 = -288						; size = 40
_variant$ = -48						; size = 40
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_min$ = 16						; size = 8
_val$ = 24						; size = 4
_max$ = 28						; size = 8
_step$ = 36						; size = 8
_inc_per_pixel$ = 44					; size = 4
_nk_property_double PROC				; COMDAT

; 21506: {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21507:     struct nk_property_variant variant;
; 21508:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_propert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_property_double@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_propert:

; 21509:     NK_ASSERT(name);

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN6@nk_propert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_property_double@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HHIIBINK@?$AAn?$AAa?$AAm?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_propert:

; 21510:     NK_ASSERT(val);

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN7@nk_propert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_property_double@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17ECLKCMMF@?$AAv?$AAa?$AAl?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_propert:

; 21511: 
; 21512:     if (!ctx || !ctx->current || !name || !val) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_propert
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN1@nk_propert
	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN1@nk_propert
	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN2@nk_propert
$LN1@nk_propert:
	jmp	SHORT $LN3@nk_propert
$LN2@nk_propert:

; 21513:     variant = nk_property_variant_double(*val, min, max, step);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _step$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _max$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _min$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _val$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_nk_property_variant_double
	add	esp, 36					; 00000024H
	mov	ecx, 10					; 0000000aH
	mov	esi, eax
	lea	edi, DWORD PTR _variant$[ebp]
	rep movsd

; 21514:     nk_property(ctx, name, &variant, inc_per_pixel, NK_FILTER_FLOAT);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR _inc_per_pixel$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _variant$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_property
	add	esp, 20					; 00000014H

; 21515:     *val = variant.value.d;

	mov	eax, DWORD PTR _val$[ebp]
	movsd	xmm0, QWORD PTR _variant$[ebp+8]
	movsd	QWORD PTR [eax], xmm0
$LN3@nk_propert:

; 21516: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@nk_propert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@nk_propert:
	DD	1
	DD	$LN9@nk_propert
$LN9@nk_propert:
	DD	-48					; ffffffd0H
	DD	40					; 00000028H
	DD	$LN8@nk_propert
$LN8@nk_propert:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_nk_property_double ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_property_float
_TEXT	SEGMENT
$T1 = -288						; size = 40
_variant$ = -48						; size = 40
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_min$ = 16						; size = 4
_val$ = 20						; size = 4
_max$ = 24						; size = 4
_step$ = 28						; size = 4
_inc_per_pixel$ = 32					; size = 4
_nk_property_float PROC					; COMDAT

; 21491: {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21492:     struct nk_property_variant variant;
; 21493:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_propert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_property_float@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_propert:

; 21494:     NK_ASSERT(name);

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN6@nk_propert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_property_float@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HHIIBINK@?$AAn?$AAa?$AAm?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_propert:

; 21495:     NK_ASSERT(val);

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN7@nk_propert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_property_float@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17ECLKCMMF@?$AAv?$AAa?$AAl?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_propert:

; 21496: 
; 21497:     if (!ctx || !ctx->current || !name || !val) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_propert
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN1@nk_propert
	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN1@nk_propert
	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN2@nk_propert
$LN1@nk_propert:
	jmp	SHORT $LN3@nk_propert
$LN2@nk_propert:

; 21498:     variant = nk_property_variant_float(*val, min, max, step);

	push	ecx
	movss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _val$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_nk_property_variant_float
	add	esp, 20					; 00000014H
	mov	ecx, 10					; 0000000aH
	mov	esi, eax
	lea	edi, DWORD PTR _variant$[ebp]
	rep movsd

; 21499:     nk_property(ctx, name, &variant, inc_per_pixel, NK_FILTER_FLOAT);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR _inc_per_pixel$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _variant$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_property
	add	esp, 20					; 00000014H

; 21500:     *val = variant.value.f;

	mov	eax, DWORD PTR _val$[ebp]
	movss	xmm0, DWORD PTR _variant$[ebp+8]
	movss	DWORD PTR [eax], xmm0
$LN3@nk_propert:

; 21501: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@nk_propert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@nk_propert:
	DD	1
	DD	$LN9@nk_propert
$LN9@nk_propert:
	DD	-48					; ffffffd0H
	DD	40					; 00000028H
	DD	$LN8@nk_propert
$LN8@nk_propert:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_nk_property_float ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_property_int
_TEXT	SEGMENT
$T1 = -288						; size = 40
_variant$ = -48						; size = 40
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_min$ = 16						; size = 4
_val$ = 20						; size = 4
_max$ = 24						; size = 4
_step$ = 28						; size = 4
_inc_per_pixel$ = 32					; size = 4
_nk_property_int PROC					; COMDAT

; 21476: {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21477:     struct nk_property_variant variant;
; 21478:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_propert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_property_int@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_propert:

; 21479:     NK_ASSERT(name);

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN6@nk_propert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_property_int@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HHIIBINK@?$AAn?$AAa?$AAm?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_propert:

; 21480:     NK_ASSERT(val);

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN7@nk_propert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_property_int@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17ECLKCMMF@?$AAv?$AAa?$AAl?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_propert:

; 21481: 
; 21482:     if (!ctx || !ctx->current || !name || !val) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_propert
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN1@nk_propert
	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN1@nk_propert
	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN2@nk_propert
$LN1@nk_propert:
	jmp	SHORT $LN3@nk_propert
$LN2@nk_propert:

; 21483:     variant = nk_property_variant_int(*val, min, max, step);

	mov	eax, DWORD PTR _step$[ebp]
	push	eax
	mov	ecx, DWORD PTR _max$[ebp]
	push	ecx
	mov	edx, DWORD PTR _min$[ebp]
	push	edx
	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	_nk_property_variant_int
	add	esp, 20					; 00000014H
	mov	ecx, 10					; 0000000aH
	mov	esi, eax
	lea	edi, DWORD PTR _variant$[ebp]
	rep movsd

; 21484:     nk_property(ctx, name, &variant, inc_per_pixel, NK_FILTER_INT);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR _inc_per_pixel$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _variant$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_property
	add	esp, 20					; 00000014H

; 21485:     *val = variant.value.i;

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR _variant$[ebp+8]
	mov	DWORD PTR [eax], ecx
$LN3@nk_propert:

; 21486: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@nk_propert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@nk_propert:
	DD	1
	DD	$LN9@nk_propert
$LN9@nk_propert:
	DD	-48					; ffffffd0H
	DD	40					; 00000028H
	DD	$LN8@nk_propert
$LN8@nk_propert:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_nk_property_int ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_pick
_TEXT	SEGMENT
tv142 = -284						; size = 4
_bounds$ = -84						; size = 16
_state$ = -60						; size = 4
_in$ = -48						; size = 4
_config$ = -36						; size = 4
_layout$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_color$ = 12						; size = 4
_fmt$ = 16						; size = 4
_nk_color_pick PROC					; COMDAT

; 21571: {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21572:     struct nk_window *win;
; 21573:     struct nk_panel *layout;
; 21574:     const struct nk_style *config;
; 21575:     const struct nk_input *in;
; 21576: 
; 21577:     enum nk_widget_layout_states state;
; 21578:     struct nk_rect bounds;
; 21579: 
; 21580:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_color_p
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_color_pick@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_color_p:

; 21581:     NK_ASSERT(color);

	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN7@nk_color_p
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_color_pick@@9@9
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@EENKLIPJ@?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_color_p:

; 21582:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_color_p
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_color_pick@@9@9
	add	ecx, 11					; 0000000bH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_color_p:

; 21583:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_color_p
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_color_pick@@9@9
	add	edx, 12					; 0000000cH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_color_p:

; 21584:     if (!ctx || !ctx->current || !ctx->current->layout || !color)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_color_p
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN2@nk_color_p
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN2@nk_color_p
	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN3@nk_color_p
$LN2@nk_color_p:

; 21585:         return 0;

	xor	eax, eax
	jmp	$LN4@nk_color_p
$LN3@nk_color_p:

; 21586: 
; 21587:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 21588:     config = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _config$[ebp], eax

; 21589:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 21590:     state = nk_widget(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 21591:     if (!state) return 0;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN1@nk_color_p
	xor	eax, eax
	jmp	$LN4@nk_color_p
$LN1@nk_color_p:

; 21592:     in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN10@nk_color_p
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN10@nk_color_p
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv142[ebp], edx
	jmp	SHORT $LN11@nk_color_p
$LN10@nk_color_p:
	mov	DWORD PTR tv142[ebp], 0
$LN11@nk_color_p:
	mov	eax, DWORD PTR tv142[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 21593:     return nk_do_color_picker(&ctx->last_widget_state, &win->buffer, color, fmt, bounds,
; 21594:                 nk_vec2(0,0), in, config->font);

	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _fmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _color$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5820				; 000016bcH
	push	eax
	call	_nk_do_color_picker
	add	esp, 48					; 00000030H
$LN4@nk_color_p:

; 21595: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_color_p
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@nk_color_p:
	DD	1
	DD	$LN13@nk_color_p
$LN13@nk_color_p:
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$LN12@nk_color_p
$LN12@nk_color_p:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_color_pick ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_color_picker
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_color$ = 12						; size = 4
_fmt$ = 16						; size = 4
_nk_color_picker PROC					; COMDAT

; 21600: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 21601:     nk_color_pick(ctx, &color, fmt);

	mov	eax, DWORD PTR _fmt$[ebp]
	push	eax
	lea	ecx, DWORD PTR _color$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_color_pick
	add	esp, 12					; 0000000cH

; 21602:     return color;

	mov	eax, DWORD PTR _color$[ebp]

; 21603: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_color_picker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_prog
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_cur$ = 12						; size = 4
_max$ = 16						; size = 4
_modifyable$ = 20					; size = 4
_nk_prog PROC						; COMDAT

; 21162: {nk_progress(ctx, &cur, max, modifyable);return cur;}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _modifyable$[ebp]
	push	eax
	mov	ecx, DWORD PTR _max$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_progress
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _cur$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_prog ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_progress
_TEXT	SEGMENT
tv156 = -296						; size = 4
tv142 = -296						; size = 4
_old_value$ = -96					; size = 4
_state$ = -84						; size = 4
_bounds$ = -72						; size = 16
_in$ = -48						; size = 4
_style$ = -36						; size = 4
_layout$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_cur$ = 12						; size = 4
_max$ = 16						; size = 4
_is_modifyable$ = 20					; size = 4
_nk_progress PROC					; COMDAT

; 21131: {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21132:     struct nk_window *win;
; 21133:     struct nk_panel *layout;
; 21134:     const struct nk_style *style;
; 21135:     const struct nk_input *in;
; 21136: 
; 21137:     struct nk_rect bounds;
; 21138:     enum nk_widget_layout_states state;
; 21139:     nk_size old_value;
; 21140: 
; 21141:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_progres
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_progress@@9@9
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_progres:

; 21142:     NK_ASSERT(cur);

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN7@nk_progres
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_progress@@9@9
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17FOGAHDKL@?$AAc?$AAu?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_progres:

; 21143:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_progres
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_progress@@9@9
	add	ecx, 12					; 0000000cH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_progres:

; 21144:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_progres
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_progress@@9@9
	add	edx, 13					; 0000000dH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_progres:

; 21145:     if (!ctx || !ctx->current || !ctx->current->layout || !cur)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_progres
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN2@nk_progres
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN2@nk_progres
	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN3@nk_progres
$LN2@nk_progres:

; 21146:         return 0;

	xor	eax, eax
	jmp	$LN4@nk_progres
$LN3@nk_progres:

; 21147: 
; 21148:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 21149:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 21150:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 21151:     state = nk_widget(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 21152:     if (!state) return 0;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN1@nk_progres
	xor	eax, eax
	jmp	$LN4@nk_progres
$LN1@nk_progres:

; 21153: 
; 21154:     in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN10@nk_progres
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN10@nk_progres
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv142[ebp], edx
	jmp	SHORT $LN11@nk_progres
$LN10@nk_progres:
	mov	DWORD PTR tv142[ebp], 0
$LN11@nk_progres:
	mov	eax, DWORD PTR tv142[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 21155:     old_value = *cur;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _old_value$[ebp], ecx

; 21156:     *cur = nk_do_progress(&ctx->last_widget_state, &win->buffer, bounds,
; 21157:             *cur, max, is_modifyable, &style->progress, in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	add	ecx, 1408				; 00000580H
	push	ecx
	mov	edx, DWORD PTR _is_modifyable$[ebp]
	push	edx
	mov	eax, DWORD PTR _max$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 5820				; 000016bcH
	push	ecx
	call	_nk_do_progress
	add	esp, 44					; 0000002cH
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx], eax

; 21158:     return (*cur != old_value);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _old_value$[ebp]
	je	SHORT $LN12@nk_progres
	mov	DWORD PTR tv156[ebp], 1
	jmp	SHORT $LN13@nk_progres
$LN12@nk_progres:
	mov	DWORD PTR tv156[ebp], 0
$LN13@nk_progres:
	mov	eax, DWORD PTR tv156[ebp]
$LN4@nk_progres:

; 21159: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@nk_progres
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@nk_progres:
	DD	1
	DD	$LN15@nk_progres
$LN15@nk_progres:
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN14@nk_progres
$LN14@nk_progres:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_progress ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_slider_int
_TEXT	SEGMENT
_value$ = -20						; size = 4
_ret$ = -8						; size = 4
_ctx$ = 8						; size = 4
_min$ = 12						; size = 4
_val$ = 16						; size = 4
_max$ = 20						; size = 4
_step$ = 24						; size = 4
_nk_slider_int PROC					; COMDAT

; 21116: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 21117:     int ret;
; 21118:     float value = (float)*val;

	mov	eax, DWORD PTR _val$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax]
	movss	DWORD PTR _value$[ebp], xmm0

; 21119:     ret = nk_slider_float(ctx, (float)min, &value, (float)max, (float)step);

	cvtsi2ss xmm0, DWORD PTR _step$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _max$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _value$[ebp]
	push	eax
	cvtsi2ss xmm0, DWORD PTR _min$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_slider_float
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax

; 21120:     *val =  (int)value;

	cvttss2si eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR [ecx], eax

; 21121:     return ret;

	mov	eax, DWORD PTR _ret$[ebp]

; 21122: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_slider_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@nk_slider_:
	DD	1
	DD	$LN4@nk_slider_
$LN4@nk_slider_:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@nk_slider_
$LN3@nk_slider_:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
_nk_slider_int ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_slider_float
_TEXT	SEGMENT
tv160 = -308						; size = 4
tv142 = -308						; size = 4
_state$ = -108						; size = 4
_bounds$ = -96						; size = 16
_old_value$ = -72					; size = 4
_ret$ = -60						; size = 4
_style$ = -48						; size = 4
_in$ = -36						; size = 4
_layout$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_min_value$ = 12					; size = 4
_value$ = 16						; size = 4
_max_value$ = 20					; size = 4
_value_step$ = 24					; size = 4
_nk_slider_float PROC					; COMDAT

; 21068: {

	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21069:     struct nk_window *win;
; 21070:     struct nk_panel *layout;
; 21071:     struct nk_input *in;
; 21072:     const struct nk_style *style;
; 21073: 
; 21074:     int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 21075:     float old_value;
; 21076:     struct nk_rect bounds;
; 21077:     enum nk_widget_layout_states state;
; 21078: 
; 21079:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_slider_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_slider_float@@9@9
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_slider_:

; 21080:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN7@nk_slider_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_slider_float@@9@9
	add	ecx, 12					; 0000000cH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_slider_:

; 21081:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN8@nk_slider_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_slider_float@@9@9
	add	edx, 13					; 0000000dH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_slider_:

; 21082:     NK_ASSERT(value);

	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN9@nk_slider_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_slider_float@@9@9
	add	eax, 14					; 0000000eH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KBCLFMHN@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_slider_:

; 21083:     if (!ctx || !ctx->current || !ctx->current->layout || !value)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_slider_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN2@nk_slider_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN2@nk_slider_
	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN3@nk_slider_
$LN2@nk_slider_:

; 21084:         return ret;

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN4@nk_slider_
$LN3@nk_slider_:

; 21085: 
; 21086:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 21087:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 21088:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 21089: 
; 21090:     state = nk_widget(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 21091:     if (!state) return ret;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN1@nk_slider_
	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN4@nk_slider_
$LN1@nk_slider_:

; 21092:     in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN10@nk_slider_
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN10@nk_slider_
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv142[ebp], edx
	jmp	SHORT $LN11@nk_slider_
$LN10@nk_slider_:
	mov	DWORD PTR tv142[ebp], 0
$LN11@nk_slider_:
	mov	eax, DWORD PTR tv142[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 21093: 
; 21094:     old_value = *value;

	mov	eax, DWORD PTR _value$[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _old_value$[ebp], xmm0

; 21095:     *value = nk_do_slider(&ctx->last_widget_state, &win->buffer, bounds, min_value,
; 21096:                 old_value, max_value, value_step, &style->slider, in, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 952				; 000003b8H
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _value_step$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _max_value$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _old_value$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _min_value$[ebp]
	movss	DWORD PTR [esp], xmm0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 5820				; 000016bcH
	push	edx
	call	_nk_do_slider
	add	esp, 52					; 00000034H
	mov	eax, DWORD PTR _value$[ebp]
	fstp	DWORD PTR [eax]

; 21097:     return (old_value > *value || old_value < *value);

	mov	eax, DWORD PTR _value$[ebp]
	movss	xmm0, DWORD PTR _old_value$[ebp]
	comiss	xmm0, DWORD PTR [eax]
	ja	SHORT $LN12@nk_slider_
	mov	ecx, DWORD PTR _value$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	comiss	xmm0, DWORD PTR _old_value$[ebp]
	ja	SHORT $LN12@nk_slider_
	mov	DWORD PTR tv160[ebp], 0
	jmp	SHORT $LN13@nk_slider_
$LN12@nk_slider_:
	mov	DWORD PTR tv160[ebp], 1
$LN13@nk_slider_:
	mov	eax, DWORD PTR tv160[ebp]
$LN4@nk_slider_:

; 21098: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@nk_slider_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@nk_slider_:
	DD	1
	DD	$LN15@nk_slider_
$LN15@nk_slider_:
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN14@nk_slider_
$LN14@nk_slider_:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_slider_float ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_slide_int
_TEXT	SEGMENT
_value$ = -8						; size = 4
_ctx$ = 8						; size = 4
_min$ = 12						; size = 4
_val$ = 16						; size = 4
_max$ = 20						; size = 4
_step$ = 24						; size = 4
_nk_slide_int PROC					; COMDAT

; 21108: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 21109:     float value = (float)val;

	cvtsi2ss xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR _value$[ebp], xmm0

; 21110:     nk_slider_float(ctx, (float)min, &value, (float)max, (float)step);

	cvtsi2ss xmm0, DWORD PTR _step$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _max$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _value$[ebp]
	push	eax
	cvtsi2ss xmm0, DWORD PTR _min$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_slider_float
	add	esp, 20					; 00000014H

; 21111:     return (int)value;

	cvttss2si eax, DWORD PTR _value$[ebp]

; 21112: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_slide_i
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@nk_slide_i:
	DD	1
	DD	$LN4@nk_slide_i
$LN4@nk_slide_i:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@nk_slide_i
$LN3@nk_slide_i:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
_nk_slide_int ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_slide_float
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_min$ = 12						; size = 4
_val$ = 16						; size = 4
_max$ = 20						; size = 4
_step$ = 24						; size = 4
_nk_slide_float PROC					; COMDAT

; 21102: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 21103:     nk_slider_float(ctx, min, &val, max, step); return val;

	push	ecx
	movss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_slider_float
	add	esp, 20					; 00000014H
	fld	DWORD PTR _val$[ebp]

; 21104: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_slide_float ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_select_image_text
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_img$ = 12						; size = 16
_str$ = 28						; size = 4
_len$ = 32						; size = 4
_align$ = 36						; size = 4
_value$ = 40						; size = 4
_nk_select_image_text PROC				; COMDAT

; 20908: {nk_selectable_image_text(ctx, img, str, len, align, &value);return value;}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _align$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _img$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_selectable_image_text
	add	esp, 36					; 00000024H
	mov	eax, DWORD PTR _value$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_select_image_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_select_image_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_img$ = 12						; size = 16
_str$ = 28						; size = 4
_align$ = 32						; size = 4
_value$ = 36						; size = 4
_nk_select_image_label PROC				; COMDAT

; 20904: {nk_selectable_image_text(ctx, img, str, nk_strlen(str), align, &value);return value;}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _align$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _img$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_selectable_image_text
	add	esp, 36					; 00000024H
	mov	eax, DWORD PTR _value$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_select_image_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_select_text
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_str$ = 12						; size = 4
_len$ = 16						; size = 4
_align$ = 20						; size = 4
_value$ = 24						; size = 4
_nk_select_text PROC					; COMDAT

; 20890: {nk_selectable_text(ctx, str, len, align, &value);return value;}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _align$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_selectable_text
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR _value$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_select_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_select_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_str$ = 12						; size = 4
_align$ = 16						; size = 4
_value$ = 20						; size = 4
_nk_select_label PROC					; COMDAT

; 20900: {nk_selectable_text(ctx, str, nk_strlen(str), align, &value);return value;}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _align$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_selectable_text
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR _value$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_select_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_selectable_image_text
_TEXT	SEGMENT
tv142 = -284						; size = 4
_bounds$ = -84						; size = 16
_state$ = -60						; size = 4
_style$ = -48						; size = 4
_in$ = -36						; size = 4
_layout$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_img$ = 12						; size = 16
_str$ = 28						; size = 4
_len$ = 32						; size = 4
_align$ = 36						; size = 4
_value$ = 40						; size = 4
_nk_selectable_image_text PROC				; COMDAT

; 20861: {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20862:     struct nk_window *win;
; 20863:     struct nk_panel *layout;
; 20864:     const struct nk_input *in;
; 20865:     const struct nk_style *style;
; 20866: 
; 20867:     enum nk_widget_layout_states state;
; 20868:     struct nk_rect bounds;
; 20869: 
; 20870:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_selecta
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_selectable_image_text@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_selecta:

; 20871:     NK_ASSERT(value);

	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN7@nk_selecta
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_selectable_image_text@@9@9
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KBCLFMHN@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_selecta:

; 20872:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_selecta
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_selectable_image_text@@9@9
	add	ecx, 11					; 0000000bH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_selecta:

; 20873:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_selecta
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_selectable_image_text@@9@9
	add	edx, 12					; 0000000cH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_selecta:

; 20874:     if (!ctx || !ctx->current || !ctx->current->layout || !value)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_selecta
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN2@nk_selecta
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN2@nk_selecta
	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN3@nk_selecta
$LN2@nk_selecta:

; 20875:         return 0;

	xor	eax, eax
	jmp	$LN4@nk_selecta
$LN3@nk_selecta:

; 20876: 
; 20877:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 20878:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 20879:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 20880: 
; 20881:     state = nk_widget(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 20882:     if (!state) return 0;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN1@nk_selecta
	xor	eax, eax
	jmp	$LN4@nk_selecta
$LN1@nk_selecta:

; 20883:     in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN10@nk_selecta
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN10@nk_selecta
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv142[ebp], edx
	jmp	SHORT $LN11@nk_selecta
$LN10@nk_selecta:
	mov	DWORD PTR tv142[ebp], 0
$LN11@nk_selecta:
	mov	eax, DWORD PTR tv142[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 20884:     return nk_do_selectable_image(&ctx->last_widget_state, &win->buffer, bounds,
; 20885:                 str, len, align, value, &img, &style->selectable, in, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 760				; 000002f8H
	push	eax
	lea	ecx, DWORD PTR _img$[ebp]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 5820				; 000016bcH
	push	ecx
	call	_nk_do_selectable_image
	add	esp, 56					; 00000038H
$LN4@nk_selecta:

; 20886: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_selecta
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@nk_selecta:
	DD	1
	DD	$LN13@nk_selecta
$LN13@nk_selecta:
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$LN12@nk_selecta
$LN12@nk_selecta:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_selectable_image_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_selectable_image_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_img$ = 12						; size = 16
_str$ = 28						; size = 4
_align$ = 32						; size = 4
_value$ = 36						; size = 4
_nk_selectable_image_label PROC				; COMDAT

; 20897: {return nk_selectable_image_text(ctx, img, str, nk_strlen(str), align, value);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _align$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _img$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_selectable_image_text
	add	esp, 36					; 00000024H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_selectable_image_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_selectable_text
_TEXT	SEGMENT
tv142 = -284						; size = 4
_bounds$ = -84						; size = 16
_state$ = -60						; size = 4
_style$ = -48						; size = 4
_in$ = -36						; size = 4
_layout$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_str$ = 12						; size = 4
_len$ = 16						; size = 4
_align$ = 20						; size = 4
_value$ = 24						; size = 4
_nk_selectable_text PROC				; COMDAT

; 20831: {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20832:     struct nk_window *win;
; 20833:     struct nk_panel *layout;
; 20834:     const struct nk_input *in;
; 20835:     const struct nk_style *style;
; 20836: 
; 20837:     enum nk_widget_layout_states state;
; 20838:     struct nk_rect bounds;
; 20839: 
; 20840:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_selecta
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_selectable_text@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_selecta:

; 20841:     NK_ASSERT(value);

	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN7@nk_selecta
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_selectable_text@@9@9
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KBCLFMHN@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_selecta:

; 20842:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_selecta
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_selectable_text@@9@9
	add	ecx, 11					; 0000000bH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_selecta:

; 20843:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_selecta
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_selectable_text@@9@9
	add	edx, 12					; 0000000cH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_selecta:

; 20844:     if (!ctx || !ctx->current || !ctx->current->layout || !value)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_selecta
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN2@nk_selecta
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN2@nk_selecta
	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN3@nk_selecta
$LN2@nk_selecta:

; 20845:         return 0;

	xor	eax, eax
	jmp	$LN4@nk_selecta
$LN3@nk_selecta:

; 20846: 
; 20847:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 20848:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 20849:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 20850: 
; 20851:     state = nk_widget(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 20852:     if (!state) return 0;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN1@nk_selecta
	xor	eax, eax
	jmp	$LN4@nk_selecta
$LN1@nk_selecta:

; 20853:     in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN10@nk_selecta
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN10@nk_selecta
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv142[ebp], edx
	jmp	SHORT $LN11@nk_selecta
$LN10@nk_selecta:
	mov	DWORD PTR tv142[ebp], 0
$LN11@nk_selecta:
	mov	eax, DWORD PTR tv142[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 20854:     return nk_do_selectable(&ctx->last_widget_state, &win->buffer, bounds,
; 20855:                 str, len, align, value, &style->selectable, in, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 760				; 000002f8H
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _align$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5820				; 000016bcH
	push	eax
	call	_nk_do_selectable
	add	esp, 52					; 00000034H
$LN4@nk_selecta:

; 20856: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_selecta
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@nk_selecta:
	DD	1
	DD	$LN13@nk_selecta
$LN13@nk_selecta:
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$LN12@nk_selecta
$LN12@nk_selecta:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_selectable_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_selectable_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_str$ = 12						; size = 4
_align$ = 16						; size = 4
_value$ = 20						; size = 4
_nk_selectable_label PROC				; COMDAT

; 20893: {return nk_selectable_text(ctx, str, nk_strlen(str), align, value);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _align$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_selectable_text
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_selectable_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_option_text
_TEXT	SEGMENT
tv135 = -284						; size = 4
_state$ = -84						; size = 4
_bounds$ = -72						; size = 16
_style$ = -48						; size = 4
_in$ = -36						; size = 4
_layout$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_text$ = 12						; size = 4
_len$ = 16						; size = 4
_is_active$ = 20					; size = 4
_nk_option_text PROC					; COMDAT

; 21012: {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21013:     struct nk_window *win;
; 21014:     struct nk_panel *layout;
; 21015:     const struct nk_input *in;
; 21016:     const struct nk_style *style;
; 21017: 
; 21018:     struct nk_rect bounds;
; 21019:     enum nk_widget_layout_states state;
; 21020: 
; 21021:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_option_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_option_text@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_option_:

; 21022:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN7@nk_option_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_option_text@@9@9
	add	ecx, 10					; 0000000aH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_option_:

; 21023:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN8@nk_option_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_option_text@@9@9
	add	edx, 11					; 0000000bH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_option_:

; 21024:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_option_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN2@nk_option_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN3@nk_option_
$LN2@nk_option_:

; 21025:         return is_active;

	mov	eax, DWORD PTR _is_active$[ebp]
	jmp	$LN4@nk_option_
$LN3@nk_option_:

; 21026: 
; 21027:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 21028:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 21029:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 21030: 
; 21031:     state = nk_widget(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 21032:     if (!state) return state;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN1@nk_option_
	mov	eax, DWORD PTR _state$[ebp]
	jmp	$LN4@nk_option_
$LN1@nk_option_:

; 21033:     in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN9@nk_option_
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN9@nk_option_
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv135[ebp], edx
	jmp	SHORT $LN10@nk_option_
$LN9@nk_option_:
	mov	DWORD PTR tv135[ebp], 0
$LN10@nk_option_:
	mov	eax, DWORD PTR tv135[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 21034:     nk_do_toggle(&ctx->last_widget_state, &win->buffer, bounds, &is_active,
; 21035:         text, len, NK_TOGGLE_OPTION, &style->option, in, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 440				; 000001b8H
	push	eax
	push	1
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	lea	eax, DWORD PTR _is_active$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 5820				; 000016bcH
	push	edx
	call	_nk_do_toggle
	add	esp, 52					; 00000034H

; 21036:     return is_active;

	mov	eax, DWORD PTR _is_active$[ebp]
$LN4@nk_option_:

; 21037: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@nk_option_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@nk_option_:
	DD	1
	DD	$LN12@nk_option_
$LN12@nk_option_:
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN11@nk_option_
$LN11@nk_option_:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_option_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_option_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_label$ = 12						; size = 4
_active$ = 16						; size = 4
_nk_option_label PROC					; COMDAT

; 21054: {return nk_option_text(ctx, label, nk_strlen(label), active);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _active$[ebp]
	push	eax
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _label$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_option_text
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_option_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_radio_text
_TEXT	SEGMENT
tv91 = -208						; size = 4
_old_value$ = -8					; size = 4
_ctx$ = 8						; size = 4
_text$ = 12						; size = 4
_len$ = 16						; size = 4
_active$ = 20						; size = 4
_nk_radio_text PROC					; COMDAT

; 21041: {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 21042:     int old_value;
; 21043:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_radio_t
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_radio_text@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_radio_t:

; 21044:     NK_ASSERT(text);

	cmp	DWORD PTR _text$[ebp], 0
	jne	SHORT $LN6@nk_radio_t
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_radio_text@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HIPAKEND@?$AAt?$AAe?$AAx?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_radio_t:

; 21045:     NK_ASSERT(active);

	cmp	DWORD PTR _active$[ebp], 0
	jne	SHORT $LN7@nk_radio_t
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_radio_text@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@IBNPCBAA@?$AAa?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_radio_t:

; 21046:     if (!ctx || !text || !active) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_radio_t
	cmp	DWORD PTR _text$[ebp], 0
	je	SHORT $LN1@nk_radio_t
	cmp	DWORD PTR _active$[ebp], 0
	jne	SHORT $LN2@nk_radio_t
$LN1@nk_radio_t:
	xor	eax, eax
	jmp	SHORT $LN3@nk_radio_t
$LN2@nk_radio_t:

; 21047:     old_value = *active;

	mov	eax, DWORD PTR _active$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _old_value$[ebp], ecx

; 21048:     *active = nk_option_text(ctx, text, len, old_value);

	mov	eax, DWORD PTR _old_value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_option_text
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _active$[ebp]
	mov	DWORD PTR [ecx], eax

; 21049:     return old_value != *active;

	mov	eax, DWORD PTR _active$[ebp]
	mov	ecx, DWORD PTR _old_value$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN8@nk_radio_t
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN9@nk_radio_t
$LN8@nk_radio_t:
	mov	DWORD PTR tv91[ebp], 0
$LN9@nk_radio_t:
	mov	eax, DWORD PTR tv91[ebp]
$LN3@nk_radio_t:

; 21050: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_radio_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_radio_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_label$ = 12						; size = 4
_active$ = 16						; size = 4
_nk_radio_label PROC					; COMDAT

; 21058: {return nk_radio_text(ctx, label, nk_strlen(label), active);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _active$[ebp]
	push	eax
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _label$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_radio_text
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_radio_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_checkbox_flags_text
_TEXT	SEGMENT
_active$ = -8						; size = 4
_ctx$ = 8						; size = 4
_text$ = 12						; size = 4
_len$ = 16						; size = 4
_flags$ = 20						; size = 4
_value$ = 24						; size = 4
_nk_checkbox_flags_text PROC				; COMDAT

; 20975: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 20976:     int active;
; 20977:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN8@nk_checkbo
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_checkbox_flags_text@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_checkbo:

; 20978:     NK_ASSERT(text);

	cmp	DWORD PTR _text$[ebp], 0
	jne	SHORT $LN9@nk_checkbo
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_checkbox_flags_text@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HIPAKEND@?$AAt?$AAe?$AAx?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_checkbo:

; 20979:     NK_ASSERT(flags);

	cmp	DWORD PTR _flags$[ebp], 0
	jne	SHORT $LN10@nk_checkbo
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_checkbox_flags_text@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@PIKEIEDD@?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_checkbo:

; 20980:     if (!ctx || !text || !flags) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN4@nk_checkbo
	cmp	DWORD PTR _text$[ebp], 0
	je	SHORT $LN4@nk_checkbo
	cmp	DWORD PTR _flags$[ebp], 0
	jne	SHORT $LN5@nk_checkbo
$LN4@nk_checkbo:
	xor	eax, eax
	jmp	SHORT $LN6@nk_checkbo
$LN5@nk_checkbo:

; 20981: 
; 20982:     active = (int)((*flags & value) & value);

	mov	eax, DWORD PTR _flags$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, DWORD PTR _value$[ebp]
	and	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _active$[ebp], ecx

; 20983:     if (nk_checkbox_text(ctx, text, len, &active)) {

	lea	eax, DWORD PTR _active$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_checkbox_text
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN3@nk_checkbo

; 20984:         if (active) *flags |= value;

	cmp	DWORD PTR _active$[ebp], 0
	je	SHORT $LN2@nk_checkbo
	mov	eax, DWORD PTR _flags$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN1@nk_checkbo
$LN2@nk_checkbo:

; 20985:         else *flags &= ~value;

	mov	eax, DWORD PTR _value$[ebp]
	not	eax
	mov	ecx, DWORD PTR _flags$[ebp]
	and	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@nk_checkbo:

; 20986:         return 1;

	mov	eax, 1
	jmp	SHORT $LN6@nk_checkbo
$LN3@nk_checkbo:

; 20987:     }
; 20988:     return 0;

	xor	eax, eax
$LN6@nk_checkbo:

; 20989: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@nk_checkbo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@nk_checkbo:
	DD	1
	DD	$LN12@nk_checkbo
$LN12@nk_checkbo:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN11@nk_checkbo
$LN11@nk_checkbo:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	0
_nk_checkbox_flags_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_checkbox_flags_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_label$ = 12						; size = 4
_flags$ = 16						; size = 4
_value$ = 20						; size = 4
_nk_checkbox_flags_label PROC				; COMDAT

; 21003: {return nk_checkbox_flags_text(ctx, label, nk_strlen(label), flags, value);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _label$[ebp]
	push	edx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _label$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_checkbox_flags_text
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_checkbox_flags_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_checkbox_text
_TEXT	SEGMENT
tv91 = -208						; size = 4
_old_val$ = -8						; size = 4
_ctx$ = 8						; size = 4
_text$ = 12						; size = 4
_len$ = 16						; size = 4
_active$ = 20						; size = 4
_nk_checkbox_text PROC					; COMDAT

; 20961: {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 20962:     int old_val;
; 20963:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_checkbo
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_checkbox_text@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_checkbo:

; 20964:     NK_ASSERT(text);

	cmp	DWORD PTR _text$[ebp], 0
	jne	SHORT $LN6@nk_checkbo
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_checkbox_text@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HIPAKEND@?$AAt?$AAe?$AAx?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_checkbo:

; 20965:     NK_ASSERT(active);

	cmp	DWORD PTR _active$[ebp], 0
	jne	SHORT $LN7@nk_checkbo
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_checkbox_text@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@IBNPCBAA@?$AAa?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_checkbo:

; 20966:     if (!ctx || !text || !active) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_checkbo
	cmp	DWORD PTR _text$[ebp], 0
	je	SHORT $LN1@nk_checkbo
	cmp	DWORD PTR _active$[ebp], 0
	jne	SHORT $LN2@nk_checkbo
$LN1@nk_checkbo:
	xor	eax, eax
	jmp	SHORT $LN3@nk_checkbo
$LN2@nk_checkbo:

; 20967:     old_val = *active;

	mov	eax, DWORD PTR _active$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _old_val$[ebp], ecx

; 20968:     *active = nk_check_text(ctx, text, len, *active);

	mov	eax, DWORD PTR _active$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_check_text
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _active$[ebp]
	mov	DWORD PTR [edx], eax

; 20969:     return old_val != *active;

	mov	eax, DWORD PTR _active$[ebp]
	mov	ecx, DWORD PTR _old_val$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN8@nk_checkbo
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN9@nk_checkbo
$LN8@nk_checkbo:
	mov	DWORD PTR tv91[ebp], 0
$LN9@nk_checkbo:
	mov	eax, DWORD PTR tv91[ebp]
$LN3@nk_checkbo:

; 20970: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_checkbox_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_checkbox_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_label$ = 12						; size = 4
_active$ = 16						; size = 4
_nk_checkbox_label PROC					; COMDAT

; 20999: {return nk_checkbox_text(ctx, label, nk_strlen(label), active);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _active$[ebp]
	push	eax
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _label$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_checkbox_text
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_checkbox_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_check_flags_text
_TEXT	SEGMENT
_old_active$ = -8					; size = 4
_ctx$ = 8						; size = 4
_text$ = 12						; size = 4
_len$ = 16						; size = 4
_flags$ = 20						; size = 4
_value$ = 24						; size = 4
_nk_check_flags_text PROC				; COMDAT

; 20947: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 20948:     int old_active;
; 20949:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_check_f
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_check_flags_text@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_check_f:

; 20950:     NK_ASSERT(text);

	cmp	DWORD PTR _text$[ebp], 0
	jne	SHORT $LN8@nk_check_f
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_check_flags_text@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HIPAKEND@?$AAt?$AAe?$AAx?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_check_f:

; 20951:     if (!ctx || !text) return flags;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_check_f
	cmp	DWORD PTR _text$[ebp], 0
	jne	SHORT $LN4@nk_check_f
$LN3@nk_check_f:
	mov	eax, DWORD PTR _flags$[ebp]
	jmp	SHORT $LN5@nk_check_f
$LN4@nk_check_f:

; 20952:     old_active = (int)((flags & value) & value);

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, DWORD PTR _value$[ebp]
	and	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _old_active$[ebp], eax

; 20953:     if (nk_check_text(ctx, text, len, old_active))

	mov	eax, DWORD PTR _old_active$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_check_text
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN2@nk_check_f

; 20954:         flags |= value;

	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _flags$[ebp], eax
	jmp	SHORT $LN1@nk_check_f
$LN2@nk_check_f:

; 20955:     else flags &= ~value;

	mov	eax, DWORD PTR _value$[ebp]
	not	eax
	and	eax, DWORD PTR _flags$[ebp]
	mov	DWORD PTR _flags$[ebp], eax
$LN1@nk_check_f:

; 20956:     return flags;

	mov	eax, DWORD PTR _flags$[ebp]
$LN5@nk_check_f:

; 20957: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_check_flags_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_check_flags_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_label$ = 12						; size = 4
_flags$ = 16						; size = 4
_value$ = 20						; size = 4
_nk_check_flags_label PROC				; COMDAT

; 20996: {return nk_check_flags_text(ctx, label, nk_strlen(label), flags, value);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _label$[ebp]
	push	edx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _label$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_check_flags_text
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_check_flags_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_check_text
_TEXT	SEGMENT
tv135 = -284						; size = 4
_state$ = -84						; size = 4
_bounds$ = -72						; size = 16
_style$ = -48						; size = 4
_in$ = -36						; size = 4
_layout$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_text$ = 12						; size = 4
_len$ = 16						; size = 4
_active$ = 20						; size = 4
_nk_check_text PROC					; COMDAT

; 20917: {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20918:     struct nk_window *win;
; 20919:     struct nk_panel *layout;
; 20920:     const struct nk_input *in;
; 20921:     const struct nk_style *style;
; 20922: 
; 20923:     struct nk_rect bounds;
; 20924:     enum nk_widget_layout_states state;
; 20925: 
; 20926:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_check_t
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_check_text@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_check_t:

; 20927:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN7@nk_check_t
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_check_text@@9@9
	add	ecx, 10					; 0000000aH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_check_t:

; 20928:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN8@nk_check_t
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_check_text@@9@9
	add	edx, 11					; 0000000bH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_check_t:

; 20929:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_check_t
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN2@nk_check_t
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN3@nk_check_t
$LN2@nk_check_t:

; 20930:         return active;

	mov	eax, DWORD PTR _active$[ebp]
	jmp	$LN4@nk_check_t
$LN3@nk_check_t:

; 20931: 
; 20932:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 20933:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 20934:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 20935: 
; 20936:     state = nk_widget(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 20937:     if (!state) return active;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN1@nk_check_t
	mov	eax, DWORD PTR _active$[ebp]
	jmp	$LN4@nk_check_t
$LN1@nk_check_t:

; 20938:     in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN9@nk_check_t
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN9@nk_check_t
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv135[ebp], edx
	jmp	SHORT $LN10@nk_check_t
$LN9@nk_check_t:
	mov	DWORD PTR tv135[ebp], 0
$LN10@nk_check_t:
	mov	eax, DWORD PTR tv135[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 20939:     nk_do_toggle(&ctx->last_widget_state, &win->buffer, bounds, &active,
; 20940:         text, len, NK_TOGGLE_CHECK, &style->checkbox, in, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 600				; 00000258H
	push	eax
	push	0
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	lea	eax, DWORD PTR _active$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 5820				; 000016bcH
	push	edx
	call	_nk_do_toggle
	add	esp, 52					; 00000034H

; 20941:     return active;

	mov	eax, DWORD PTR _active$[ebp]
$LN4@nk_check_t:

; 20942: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@nk_check_t
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@nk_check_t:
	DD	1
	DD	$LN12@nk_check_t
$LN12@nk_check_t:
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN11@nk_check_t
$LN11@nk_check_t:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_check_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_check_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_label$ = 12						; size = 4
_active$ = 16						; size = 4
_nk_check_label PROC					; COMDAT

; 20992: {return nk_check_text(ctx, label, nk_strlen(label), active);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _active$[ebp]
	push	eax
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _label$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_check_text
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_check_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_pop_behavior
_TEXT	SEGMENT
tv84 = -220						; size = 4
_element$ = -20						; size = 4
_button_stack$ = -8					; size = 4
_ctx$ = 8						; size = 4
_nk_button_pop_behavior PROC				; COMDAT

; 20567: {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 20568:     struct nk_config_stack_button_behavior *button_stack;
; 20569:     struct nk_config_stack_button_behavior_element *element;
; 20570: 
; 20571:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_button_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_button_pop_behavior@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_button_:

; 20572:     if (!ctx) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_button_
	xor	eax, eax
	jmp	SHORT $LN3@nk_button_
$LN2@nk_button_:

; 20573: 
; 20574:     button_stack = &ctx->stacks.button_behaviors;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 7260				; 00001c5cH
	mov	DWORD PTR _button_stack$[ebp], eax

; 20575:     NK_ASSERT(button_stack->head > 0);

	mov	eax, DWORD PTR _button_stack$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN6@nk_button_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_button_pop_behavior@@9@9
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@FDFLJFOK@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_button_:

; 20576:     if (button_stack->head < 1)

	mov	eax, DWORD PTR _button_stack$[ebp]
	cmp	DWORD PTR [eax], 1
	jge	SHORT $LN1@nk_button_

; 20577:         return 0;

	xor	eax, eax
	jmp	SHORT $LN3@nk_button_
$LN1@nk_button_:

; 20578: 
; 20579:     element = &button_stack->elements[--button_stack->head];

	mov	eax, DWORD PTR _button_stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	DWORD PTR tv84[ebp], ecx
	mov	edx, DWORD PTR _button_stack$[ebp]
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR tv84[ebp]
	mov	edx, DWORD PTR _button_stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8+4]
	mov	DWORD PTR _element$[ebp], eax

; 20580:     *element->address = element->old_value;

	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _element$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx], eax

; 20581:     return 1;

	mov	eax, 1
$LN3@nk_button_:

; 20582: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_button_pop_behavior ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_push_behavior
_TEXT	SEGMENT
_element$ = -20						; size = 4
_button_stack$ = -8					; size = 4
_ctx$ = 8						; size = 4
_behavior$ = 12						; size = 4
_nk_button_push_behavior PROC				; COMDAT

; 20546: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 20547:     struct nk_config_stack_button_behavior *button_stack;
; 20548:     struct nk_config_stack_button_behavior_element *element;
; 20549: 
; 20550:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_button_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_button_push_behavior@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_button_:

; 20551:     if (!ctx) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_button_
	xor	eax, eax
	jmp	$LN3@nk_button_
$LN2@nk_button_:

; 20552: 
; 20553:     button_stack = &ctx->stacks.button_behaviors;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 7260				; 00001c5cH
	mov	DWORD PTR _button_stack$[ebp], eax

; 20554:     NK_ASSERT(button_stack->head < (int)NK_LEN(button_stack->elements));

	mov	eax, DWORD PTR _button_stack$[ebp]
	cmp	DWORD PTR [eax], 8
	jl	SHORT $LN6@nk_button_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_button_push_behavior@@9@9
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1LK@JEBCHHPP@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAd?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_button_:

; 20555:     if (button_stack->head >= (int)NK_LEN(button_stack->elements))

	mov	eax, DWORD PTR _button_stack$[ebp]
	cmp	DWORD PTR [eax], 8
	jl	SHORT $LN1@nk_button_

; 20556:         return 0;

	xor	eax, eax
	jmp	SHORT $LN3@nk_button_
$LN1@nk_button_:

; 20557: 
; 20558:     element = &button_stack->elements[button_stack->head++];

	mov	eax, DWORD PTR _button_stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _button_stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8+4]
	mov	DWORD PTR _element$[ebp], eax
	mov	ecx, DWORD PTR _button_stack$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _button_stack$[ebp]
	mov	DWORD PTR [eax], edx

; 20559:     element->address = &ctx->button_behavior;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5824				; 000016c0H
	mov	ecx, DWORD PTR _element$[ebp]
	mov	DWORD PTR [ecx], eax

; 20560:     element->old_value = ctx->button_behavior;

	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+5824]
	mov	DWORD PTR [eax+4], edx

; 20561:     ctx->button_behavior = behavior;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _behavior$[ebp]
	mov	DWORD PTR [eax+5824], ecx

; 20562:     return 1;

	mov	eax, 1
$LN3@nk_button_:

; 20563: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_button_push_behavior ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_set_behavior
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_behavior$ = 12						; size = 4
_nk_button_set_behavior PROC				; COMDAT

; 20538: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 20539:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN4@nk_button_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_button_set_behavior@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_button_:

; 20540:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN1@nk_button_
	jmp	SHORT $LN2@nk_button_
$LN1@nk_button_:

; 20541:     ctx->button_behavior = behavior;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _behavior$[ebp]
	mov	DWORD PTR [eax+5824], ecx
$LN2@nk_button_:

; 20542: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_button_set_behavior ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_image_text_styled
_TEXT	SEGMENT
tv134 = -272						; size = 4
_state$ = -72						; size = 4
_bounds$ = -60						; size = 16
_in$ = -36						; size = 4
_layout$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_style$ = 12						; size = 4
_img$ = 16						; size = 16
_text$ = 32						; size = 4
_len$ = 36						; size = 4
_align$ = 40						; size = 4
_nk_button_image_text_styled PROC			; COMDAT

; 20783: {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20784:     struct nk_window *win;
; 20785:     struct nk_panel *layout;
; 20786:     const struct nk_input *in;
; 20787: 
; 20788:     struct nk_rect bounds;
; 20789:     enum nk_widget_layout_states state;
; 20790: 
; 20791:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_button_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_button_image_text_styled@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_button_:

; 20792:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN7@nk_button_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_button_image_text_styled@@9@9
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_button_:

; 20793:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN8@nk_button_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_button_image_text_styled@@9@9
	add	edx, 10					; 0000000aH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_button_:

; 20794:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_button_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN2@nk_button_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN3@nk_button_
$LN2@nk_button_:

; 20795:         return 0;

	xor	eax, eax
	jmp	$LN4@nk_button_
$LN3@nk_button_:

; 20796: 
; 20797:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 20798:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 20799: 
; 20800:     state = nk_widget(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 20801:     if (!state) return 0;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN1@nk_button_
	xor	eax, eax
	jmp	$LN4@nk_button_
$LN1@nk_button_:

; 20802:     in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN9@nk_button_
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN9@nk_button_
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv134[ebp], edx
	jmp	SHORT $LN10@nk_button_
$LN9@nk_button_:
	mov	DWORD PTR tv134[ebp], 0
$LN10@nk_button_:
	mov	eax, DWORD PTR tv134[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 20803:     return nk_do_button_text_image(&ctx->last_widget_state, &win->buffer,
; 20804:             bounds, img, text, len, align, ctx->button_behavior,
; 20805:             style, ctx->style.font, in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+5824]
	push	edx
	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _img$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 5820				; 000016bcH
	push	ecx
	call	_nk_do_button_text_image
	add	esp, 68					; 00000044H
$LN4@nk_button_:

; 20806: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@nk_button_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@nk_button_:
	DD	1
	DD	$LN12@nk_button_
$LN12@nk_button_:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN11@nk_button_
$LN11@nk_button_:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_button_image_text_styled ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_image_label_styled
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_style$ = 12						; size = 4
_img$ = 16						; size = 16
_label$ = 32						; size = 4
_text_alignment$ = 36					; size = 4
_nk_button_image_label_styled PROC			; COMDAT

; 20821: {return nk_button_image_text_styled(ctx, style, img, label, nk_strlen(label), text_alignment);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _text_alignment$[ebp]
	push	eax
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _label$[ebp]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _img$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _style$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_button_image_text_styled
	add	esp, 36					; 00000024H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_button_image_label_styled ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_symbol_label_styled
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_style$ = 12						; size = 4
_symbol$ = 16						; size = 4
_title$ = 20						; size = 4
_align$ = 24						; size = 4
_nk_button_symbol_label_styled PROC			; COMDAT

; 20777: {return nk_button_symbol_text_styled(ctx, style, symbol, title, nk_strlen(title), align);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _title$[ebp]
	push	edx
	mov	eax, DWORD PTR _symbol$[ebp]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_button_symbol_text_styled
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_button_symbol_label_styled ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_symbol_text_styled
_TEXT	SEGMENT
tv134 = -272						; size = 4
_state$ = -72						; size = 4
_bounds$ = -60						; size = 16
_in$ = -36						; size = 4
_layout$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_style$ = 12						; size = 4
_symbol$ = 16						; size = 4
_text$ = 20						; size = 4
_len$ = 24						; size = 4
_align$ = 28						; size = 4
_nk_button_symbol_text_styled PROC			; COMDAT

; 20736: {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20737:     struct nk_window *win;
; 20738:     struct nk_panel *layout;
; 20739:     const struct nk_input *in;
; 20740: 
; 20741:     struct nk_rect bounds;
; 20742:     enum nk_widget_layout_states state;
; 20743: 
; 20744:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_button_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_button_symbol_text_styled@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_button_:

; 20745:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN7@nk_button_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_button_symbol_text_styled@@9@9
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_button_:

; 20746:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN8@nk_button_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_button_symbol_text_styled@@9@9
	add	edx, 10					; 0000000aH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_button_:

; 20747:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_button_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN2@nk_button_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN3@nk_button_
$LN2@nk_button_:

; 20748:         return 0;

	xor	eax, eax
	jmp	$LN4@nk_button_
$LN3@nk_button_:

; 20749: 
; 20750:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 20751:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 20752: 
; 20753:     state = nk_widget(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 20754:     if (!state) return 0;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN1@nk_button_
	xor	eax, eax
	jmp	$LN4@nk_button_
$LN1@nk_button_:

; 20755:     in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN9@nk_button_
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN9@nk_button_
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv134[ebp], edx
	jmp	SHORT $LN10@nk_button_
$LN9@nk_button_:
	mov	DWORD PTR tv134[ebp], 0
$LN10@nk_button_:
	mov	eax, DWORD PTR tv134[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 20756:     return nk_do_button_text_symbol(&ctx->last_widget_state, &win->buffer, bounds,
; 20757:                 symbol, text, len, align, ctx->button_behavior,
; 20758:                 style, ctx->style.font, in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+5824]
	push	edx
	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _symbol$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 5820				; 000016bcH
	push	edx
	call	_nk_do_button_text_symbol
	add	esp, 56					; 00000038H
$LN4@nk_button_:

; 20759: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@nk_button_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@nk_button_:
	DD	1
	DD	$LN12@nk_button_
$LN12@nk_button_:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN11@nk_button_
$LN11@nk_button_:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_button_symbol_text_styled ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_image_styled
_TEXT	SEGMENT
tv134 = -272						; size = 4
_state$ = -72						; size = 4
_bounds$ = -60						; size = 16
_in$ = -36						; size = 4
_layout$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_style$ = 12						; size = 4
_img$ = 16						; size = 16
_nk_button_image_styled PROC				; COMDAT

; 20700: {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20701:     struct nk_window *win;
; 20702:     struct nk_panel *layout;
; 20703:     const struct nk_input *in;
; 20704: 
; 20705:     struct nk_rect bounds;
; 20706:     enum nk_widget_layout_states state;
; 20707: 
; 20708:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_button_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_button_image_styled@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_button_:

; 20709:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN7@nk_button_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_button_image_styled@@9@9
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_button_:

; 20710:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN8@nk_button_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_button_image_styled@@9@9
	add	edx, 10					; 0000000aH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_button_:

; 20711:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_button_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN2@nk_button_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN3@nk_button_
$LN2@nk_button_:

; 20712:         return 0;

	xor	eax, eax
	jmp	$LN4@nk_button_
$LN3@nk_button_:

; 20713: 
; 20714:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 20715:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 20716: 
; 20717:     state = nk_widget(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 20718:     if (!state) return 0;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN1@nk_button_
	xor	eax, eax
	jmp	$LN4@nk_button_
$LN1@nk_button_:

; 20719:     in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN9@nk_button_
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN9@nk_button_
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv134[ebp], edx
	jmp	SHORT $LN10@nk_button_
$LN9@nk_button_:
	mov	DWORD PTR tv134[ebp], 0
$LN10@nk_button_:
	mov	eax, DWORD PTR tv134[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 20720:     return nk_do_button_image(&ctx->last_widget_state, &win->buffer, bounds,
; 20721:                 img, ctx->button_behavior, style, in);

	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _style$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+5824]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _img$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 5820				; 000016bcH
	push	edx
	call	_nk_do_button_image
	add	esp, 52					; 00000034H
$LN4@nk_button_:

; 20722: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@nk_button_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@nk_button_:
	DD	1
	DD	$LN12@nk_button_
$LN12@nk_button_:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN11@nk_button_
$LN11@nk_button_:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_button_image_styled ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_symbol_styled
_TEXT	SEGMENT
tv134 = -272						; size = 4
_state$ = -72						; size = 4
_bounds$ = -60						; size = 16
_in$ = -36						; size = 4
_layout$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_style$ = 12						; size = 4
_symbol$ = 16						; size = 4
_nk_button_symbol_styled PROC				; COMDAT

; 20666: {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20667:     struct nk_window *win;
; 20668:     struct nk_panel *layout;
; 20669:     const struct nk_input *in;
; 20670: 
; 20671:     struct nk_rect bounds;
; 20672:     enum nk_widget_layout_states state;
; 20673: 
; 20674:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_button_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_button_symbol_styled@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_button_:

; 20675:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN7@nk_button_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_button_symbol_styled@@9@9
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_button_:

; 20676:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN8@nk_button_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_button_symbol_styled@@9@9
	add	edx, 10					; 0000000aH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_button_:

; 20677:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_button_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN2@nk_button_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN3@nk_button_
$LN2@nk_button_:

; 20678:         return 0;

	xor	eax, eax
	jmp	$LN4@nk_button_
$LN3@nk_button_:

; 20679: 
; 20680:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 20681:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 20682:     state = nk_widget(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 20683:     if (!state) return 0;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN1@nk_button_
	xor	eax, eax
	jmp	$LN4@nk_button_
$LN1@nk_button_:

; 20684:     in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN9@nk_button_
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN9@nk_button_
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv134[ebp], edx
	jmp	SHORT $LN10@nk_button_
$LN9@nk_button_:
	mov	DWORD PTR tv134[ebp], 0
$LN10@nk_button_:
	mov	eax, DWORD PTR tv134[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 20685:     return nk_do_button_symbol(&ctx->last_widget_state, &win->buffer, bounds,
; 20686:             symbol, ctx->button_behavior, style, in, ctx->style.font);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+5824]
	push	edx
	mov	eax, DWORD PTR _symbol$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 5820				; 000016bcH
	push	edx
	call	_nk_do_button_symbol
	add	esp, 44					; 0000002cH
$LN4@nk_button_:

; 20687: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@nk_button_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@nk_button_:
	DD	1
	DD	$LN12@nk_button_
$LN12@nk_button_:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN11@nk_button_
$LN11@nk_button_:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_button_symbol_styled ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_label_styled
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_style$ = 12						; size = 4
_title$ = 16						; size = 4
_nk_button_label_styled PROC				; COMDAT

; 20622: {return nk_button_text_styled(ctx, style, title, nk_strlen(title));}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_button_text_styled
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_button_label_styled ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_text_styled
_TEXT	SEGMENT
tv141 = -272						; size = 4
_state$ = -72						; size = 4
_bounds$ = -60						; size = 16
_in$ = -36						; size = 4
_layout$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_style$ = 12						; size = 4
_title$ = 16						; size = 4
_len$ = 20						; size = 4
_nk_button_text_styled PROC				; COMDAT

; 20587: {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20588:     struct nk_window *win;
; 20589:     struct nk_panel *layout;
; 20590:     const struct nk_input *in;
; 20591: 
; 20592:     struct nk_rect bounds;
; 20593:     enum nk_widget_layout_states state;
; 20594: 
; 20595:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_button_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_button_text_styled@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_button_:

; 20596:     NK_ASSERT(style);

	cmp	DWORD PTR _style$[ebp], 0
	jne	SHORT $LN7@nk_button_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_button_text_styled@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@OIINANNN@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_button_:

; 20597:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_button_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_button_text_styled@@9@9
	add	ecx, 10					; 0000000aH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_button_:

; 20598:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_button_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_button_text_styled@@9@9
	add	edx, 11					; 0000000bH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_button_:

; 20599:     if (!style || !ctx || !ctx->current || !ctx->current->layout) return 0;

	cmp	DWORD PTR _style$[ebp], 0
	je	SHORT $LN2@nk_button_
	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_button_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN2@nk_button_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN3@nk_button_
$LN2@nk_button_:
	xor	eax, eax
	jmp	$LN4@nk_button_
$LN3@nk_button_:

; 20600: 
; 20601:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 20602:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 20603:     state = nk_widget(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 20604: 
; 20605:     if (!state) return 0;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN1@nk_button_
	xor	eax, eax
	jmp	$LN4@nk_button_
$LN1@nk_button_:

; 20606:     in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN10@nk_button_
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN10@nk_button_
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN11@nk_button_
$LN10@nk_button_:
	mov	DWORD PTR tv141[ebp], 0
$LN11@nk_button_:
	mov	eax, DWORD PTR tv141[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 20607:     return nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
; 20608:                     title, len, style->text_alignment, ctx->button_behavior,
; 20609:                     style, in, ctx->style.font);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+5824]
	push	edx
	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 5820				; 000016bcH
	push	edx
	call	_nk_do_button_text
	add	esp, 52					; 00000034H
$LN4@nk_button_:

; 20610: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_button_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@nk_button_:
	DD	1
	DD	$LN13@nk_button_
$LN13@nk_button_:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN12@nk_button_
$LN12@nk_button_:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_button_text_styled ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_image_text
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_img$ = 12						; size = 16
_text$ = 28						; size = 4
_len$ = 32						; size = 4
_align$ = 36						; size = 4
_nk_button_image_text PROC				; COMDAT

; 20811: {return nk_button_image_text_styled(ctx, &ctx->style.button,img, text, len, align);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _img$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 416				; 000001a0H
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_button_image_text_styled
	add	esp, 36					; 00000024H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_button_image_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_image_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_img$ = 12						; size = 16
_label$ = 28						; size = 4
_align$ = 32						; size = 4
_nk_button_image_label PROC				; COMDAT

; 20816: {return nk_button_image_text(ctx, img, label, nk_strlen(label), align);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _label$[ebp]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _img$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_button_image_text
	add	esp, 32					; 00000020H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_button_image_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_symbol_text
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_symbol$ = 12						; size = 4
_text$ = 16						; size = 4
_len$ = 20						; size = 4
_align$ = 24						; size = 4
_nk_button_symbol_text PROC				; COMDAT

; 20764: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 20765:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN4@nk_button_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_button_symbol_text@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_button_:

; 20766:     if (!ctx) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN1@nk_button_
	xor	eax, eax
	jmp	SHORT $LN2@nk_button_
$LN1@nk_button_:

; 20767:     return nk_button_symbol_text_styled(ctx, &ctx->style.button, symbol, text, len, align);

	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _symbol$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 416				; 000001a0H
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_button_symbol_text_styled
	add	esp, 24					; 00000018H
$LN2@nk_button_:

; 20768: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_button_symbol_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_symbol_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_symbol$ = 12						; size = 4
_label$ = 16						; size = 4
_align$ = 20						; size = 4
_nk_button_symbol_label PROC				; COMDAT

; 20772: {return nk_button_symbol_text(ctx, symbol, label, nk_strlen(label), align);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _label$[ebp]
	push	edx
	mov	eax, DWORD PTR _symbol$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_button_symbol_text
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_button_symbol_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_image
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_img$ = 12						; size = 16
_nk_button_image PROC					; COMDAT

; 20726: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 20727:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN4@nk_button_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_button_image@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_button_:

; 20728:     if (!ctx) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN1@nk_button_
	xor	eax, eax
	jmp	SHORT $LN2@nk_button_
$LN1@nk_button_:

; 20729:     return nk_button_image_styled(ctx, &ctx->style.button, img);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _img$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _img$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _img$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _img$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 416				; 000001a0H
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_button_image_styled
	add	esp, 24					; 00000018H
$LN2@nk_button_:

; 20730: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_button_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_symbol
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_symbol$ = 12						; size = 4
_nk_button_symbol PROC					; COMDAT

; 20691: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 20692:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN4@nk_button_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_button_symbol@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_button_:

; 20693:     if (!ctx) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN1@nk_button_
	xor	eax, eax
	jmp	SHORT $LN2@nk_button_
$LN1@nk_button_:

; 20694:     return nk_button_symbol_styled(ctx, &ctx->style.button, symbol);

	mov	eax, DWORD PTR _symbol$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 416				; 000001a0H
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_button_symbol_styled
	add	esp, 12					; 0000000cH
$LN2@nk_button_:

; 20695: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_button_symbol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_color
_TEXT	SEGMENT
tv134 = -528						; size = 4
$T1 = -520						; size = 20
$T2 = -492						; size = 20
$T3 = -464						; size = 20
_state$ = -244						; size = 4
_content$ = -232					; size = 16
_bounds$ = -208						; size = 16
_ret$ = -184						; size = 4
_button$ = -172						; size = 128
_in$ = -36						; size = 4
_layout$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_color$ = 12						; size = 4
_nk_button_color PROC					; COMDAT

; 20629: {

	push	ebp
	mov	ebp, esp
	sub	esp, 528				; 00000210H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-528]
	mov	ecx, 132				; 00000084H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20630:     struct nk_window *win;
; 20631:     struct nk_panel *layout;
; 20632:     const struct nk_input *in;
; 20633:     struct nk_style_button button;
; 20634: 
; 20635:     int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 20636:     struct nk_rect bounds;
; 20637:     struct nk_rect content;
; 20638:     enum nk_widget_layout_states state;
; 20639: 
; 20640:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_button_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_button_color@@9@9
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_button_:

; 20641:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN7@nk_button_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_button_color@@9@9
	add	ecx, 12					; 0000000cH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_button_:

; 20642:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN8@nk_button_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_button_color@@9@9
	add	edx, 13					; 0000000dH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_button_:

; 20643:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_button_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN2@nk_button_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN3@nk_button_
$LN2@nk_button_:

; 20644:         return 0;

	xor	eax, eax
	jmp	$LN4@nk_button_
$LN3@nk_button_:

; 20645: 
; 20646:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 20647:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 20648: 
; 20649:     state = nk_widget(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 20650:     if (!state) return 0;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN1@nk_button_
	xor	eax, eax
	jmp	$LN4@nk_button_
$LN1@nk_button_:

; 20651:     in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;

	cmp	DWORD PTR _state$[ebp], 2
	je	SHORT $LN9@nk_button_
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN9@nk_button_
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR tv134[ebp], edx
	jmp	SHORT $LN10@nk_button_
$LN9@nk_button_:
	mov	DWORD PTR tv134[ebp], 0
$LN10@nk_button_:
	mov	eax, DWORD PTR tv134[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 20652: 
; 20653:     button = ctx->style.button;

	mov	esi, DWORD PTR _ctx$[ebp]
	add	esi, 416				; 000001a0H
	mov	ecx, 32					; 00000020H
	lea	edi, DWORD PTR _button$[ebp]
	rep movsd

; 20654:     button.normal = nk_style_item_color(color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _button$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _button$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _button$[ebp+8], edx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _button$[ebp+12], ecx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR _button$[ebp+16], edx

; 20655:     button.hover = nk_style_item_color(color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _button$[ebp+20], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _button$[ebp+24], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _button$[ebp+28], edx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _button$[ebp+32], ecx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR _button$[ebp+36], edx

; 20656:     button.active = nk_style_item_color(color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	_nk_style_item_color
	add	esp, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _button$[ebp+40], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _button$[ebp+44], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _button$[ebp+48], edx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _button$[ebp+52], ecx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR _button$[ebp+56], edx

; 20657:     ret = nk_do_button(&ctx->last_widget_state, &win->buffer, bounds,
; 20658:                 &button, in, ctx->button_behavior, &content);

	lea	eax, DWORD PTR _content$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+5824]
	push	edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	lea	ecx, DWORD PTR _button$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5820				; 000016bcH
	push	eax
	call	_nk_do_button
	add	esp, 40					; 00000028H
	mov	DWORD PTR _ret$[ebp], eax

; 20659:     nk_draw_button(&win->buffer, &bounds, ctx->last_widget_state, &button);

	lea	eax, DWORD PTR _button$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+5820]
	push	edx
	lea	eax, DWORD PTR _bounds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	_nk_draw_button
	add	esp, 16					; 00000010H

; 20660:     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN4@nk_button_:

; 20661: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@nk_button_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 528				; 00000210H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@nk_button_:
	DD	3
	DD	$LN14@nk_button_
$LN14@nk_button_:
	DD	-172					; ffffff54H
	DD	128					; 00000080H
	DD	$LN11@nk_button_
	DD	-208					; ffffff30H
	DD	16					; 00000010H
	DD	$LN12@nk_button_
	DD	-232					; ffffff18H
	DD	16					; 00000010H
	DD	$LN13@nk_button_
$LN13@nk_button_:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN12@nk_button_:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN11@nk_button_:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
_nk_button_color ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_title$ = 12						; size = 4
_nk_button_label PROC					; COMDAT

; 20625: {return nk_button_text(ctx, title, nk_strlen(title));}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_button_text
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_button_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_button_text
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_title$ = 12						; size = 4
_len$ = 16						; size = 4
_nk_button_text PROC					; COMDAT

; 20614: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 20615:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN4@nk_button_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_button_text@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_button_:

; 20616:     if (!ctx) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN1@nk_button_
	xor	eax, eax
	jmp	SHORT $LN2@nk_button_
$LN1@nk_button_:

; 20617:     return nk_button_text_styled(ctx, &ctx->style.button, title, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 416				; 000001a0H
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_button_text_styled
	add	esp, 16					; 00000010H
$LN2@nk_button_:

; 20618: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_button_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_value_color_hex
_TEXT	SEGMENT
_hex$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_prefix$ = 12						; size = 4
_color$ = 16						; size = 4
_nk_value_color_hex PROC				; COMDAT

; 20475: {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20476:     char hex[16];
; 20477:     nk_color_hex_rgba(hex, color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	lea	ecx, DWORD PTR _hex$[ebp]
	push	ecx
	call	_nk_color_hex_rgba
	add	esp, 8

; 20478:     nk_labelf(ctx, NK_TEXT_LEFT, "%s: %s", prefix, hex);

	lea	eax, DWORD PTR _hex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	push	OFFSET ??_C@_06DJHOIPC@?$CFs?3?5?$CFs?$AA@
	push	17					; 00000011H
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_labelf
	add	esp, 20					; 00000014H

; 20479: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_value_c
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@nk_value_c:
	DD	1
	DD	$LN4@nk_value_c
$LN4@nk_value_c:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@nk_value_c
$LN3@nk_value_c:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
_nk_value_color_hex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_value_color_float
_TEXT	SEGMENT
_c$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_p$ = 12						; size = 4
_color$ = 16						; size = 4
_nk_value_color_float PROC				; COMDAT

; 20467: {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20468:     double c[4]; nk_color_dv(c, color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	lea	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	_nk_color_dv
	add	esp, 8

; 20469:     nk_labelf(ctx, NK_TEXT_LEFT, "%s: (%.2f, %.2f, %.2f, %.2f)",
; 20470:         p, c[0], c[1], c[2], c[3]);

	mov	eax, 8
	imul	ecx, eax, 3
	sub	esp, 8
	movsd	xmm0, QWORD PTR _c$[ebp+ecx]
	movsd	QWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 1
	sub	esp, 8
	movsd	xmm0, QWORD PTR _c$[ebp+edx]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _c$[ebp+eax]
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, 8
	imul	edx, ecx, 0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _c$[ebp+edx]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	push	OFFSET ??_C@_0BN@KPPADBIM@?$CFs?3?5?$CI?$CF?42f?0?5?$CF?42f?0?5?$CF?42f?0?5?$CF?42f?$CJ?$AA@
	push	17					; 00000011H
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_labelf
	add	esp, 48					; 00000030H

; 20471: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_value_c
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@nk_value_c:
	DD	1
	DD	$LN4@nk_value_c
$LN4@nk_value_c:
	DD	-40					; ffffffd8H
	DD	32					; 00000020H
	DD	$LN3@nk_value_c
$LN3@nk_value_c:
	DB	99					; 00000063H
	DB	0
_nk_value_color_float ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_value_color_byte
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_p$ = 12						; size = 4
_c$ = 16						; size = 4
_nk_value_color_byte PROC				; COMDAT

; 20463: {nk_labelf(ctx, NK_TEXT_LEFT, "%s: (%d, %d, %d, %d)", p, c.r, c.g, c.b, c.a);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	eax, BYTE PTR _c$[ebp+3]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp+2]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp+1]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BF@LMCNFMJH@?$CFs?3?5?$CI?$CFd?0?5?$CFd?0?5?$CFd?0?5?$CFd?$CJ?$AA@
	push	17					; 00000011H
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_labelf
	add	esp, 32					; 00000020H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_value_color_byte ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_value_float
_TEXT	SEGMENT
_double_value$ = -12					; size = 8
_ctx$ = 8						; size = 4
_prefix$ = 12						; size = 4
_value$ = 16						; size = 4
_nk_value_float PROC					; COMDAT

; 20456: {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 20457:     double double_value = (double)value;

	cvtss2sd xmm0, DWORD PTR _value$[ebp]
	movsd	QWORD PTR _double_value$[ebp], xmm0

; 20458:     nk_labelf(ctx, NK_TEXT_LEFT, "%s: %.3f", prefix, double_value);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _double_value$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	push	OFFSET ??_C@_08KELGKKHF@?$CFs?3?5?$CF?43f?$AA@
	push	17					; 00000011H
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_labelf
	add	esp, 24					; 00000018H

; 20459: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_value_float ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_value_uint
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_prefix$ = 12						; size = 4
_value$ = 16						; size = 4
_nk_value_uint PROC					; COMDAT

; 20452: {nk_labelf(ctx, NK_TEXT_LEFT, "%s: %u", prefix, value);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	push	OFFSET ??_C@_06FFMNEPHE@?$CFs?3?5?$CFu?$AA@
	push	17					; 00000011H
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_labelf
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_value_uint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_value_int
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_prefix$ = 12						; size = 4
_value$ = 16						; size = 4
_nk_value_int PROC					; COMDAT

; 20448: {nk_labelf(ctx, NK_TEXT_LEFT, "%s: %d", prefix, value);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	push	OFFSET ??_C@_06GBEGMGE@?$CFs?3?5?$CFd?$AA@
	push	17					; 00000011H
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_labelf
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_value_int ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_value_bool
_TEXT	SEGMENT
tv65 = -196						; size = 4
_ctx$ = 8						; size = 4
_prefix$ = 12						; size = 4
_value$ = 16						; size = 4
_nk_value_bool PROC					; COMDAT

; 20444: {nk_labelf(ctx, NK_TEXT_LEFT, "%s: %s", prefix, ((value) ? "true": "false"));}

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN3@nk_value_b
	mov	DWORD PTR tv65[ebp], OFFSET ??_C@_04LOAJBDKD@true?$AA@
	jmp	SHORT $LN4@nk_value_b
$LN3@nk_value_b:
	mov	DWORD PTR tv65[ebp], OFFSET ??_C@_05LAPONLG@false?$AA@
$LN4@nk_value_b:
	mov	eax, DWORD PTR tv65[ebp]
	push	eax
	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	push	OFFSET ??_C@_06DJHOIPC@?$CFs?3?5?$CFs?$AA@
	push	17					; 00000011H
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_labelf
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_value_bool ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_labelf_colored_wrap
_TEXT	SEGMENT
_args$ = -276						; size = 4
_buf$ = -264						; size = 256
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_color$ = 12						; size = 4
_fmt$ = 16						; size = 4
_nk_labelf_colored_wrap PROC				; COMDAT

; 20411: {

	push	ebp
	mov	ebp, esp
	sub	esp, 472				; 000001d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-472]
	mov	ecx, 118				; 00000076H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20412:     char buf[256];
; 20413:     va_list args;
; 20414:     va_start(args, fmt);

	lea	eax, DWORD PTR _fmt$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 20415:     nk_strfmt(buf, NK_LEN(buf), fmt, args);

	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fmt$[ebp]
	push	ecx
	push	256					; 00000100H
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_nk_strfmt
	add	esp, 16					; 00000010H

; 20416:     nk_label_colored_wrap(ctx, buf, color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_label_colored_wrap
	add	esp, 12					; 0000000cH

; 20417:     va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 20418: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_labelf_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 472				; 000001d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@nk_labelf_:
	DD	1
	DD	$LN4@nk_labelf_
$LN4@nk_labelf_:
	DD	-264					; fffffef8H
	DD	256					; 00000100H
	DD	$LN3@nk_labelf_
$LN3@nk_labelf_:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_nk_labelf_colored_wrap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_labelf_wrap
_TEXT	SEGMENT
_args$ = -276						; size = 4
_buf$ = -264						; size = 256
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_fmt$ = 12						; size = 4
_nk_labelf_wrap PROC					; COMDAT

; 20433: {

	push	ebp
	mov	ebp, esp
	sub	esp, 472				; 000001d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-472]
	mov	ecx, 118				; 00000076H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20434:     char buf[256];
; 20435:     va_list args;
; 20436:     va_start(args, fmt);

	lea	eax, DWORD PTR _fmt$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 20437:     nk_strfmt(buf, NK_LEN(buf), fmt, args);

	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fmt$[ebp]
	push	ecx
	push	256					; 00000100H
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_nk_strfmt
	add	esp, 16					; 00000010H

; 20438:     nk_label_wrap(ctx, buf);

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_label_wrap
	add	esp, 8

; 20439:     va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 20440: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_labelf_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 472				; 000001d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@nk_labelf_:
	DD	1
	DD	$LN4@nk_labelf_
$LN4@nk_labelf_:
	DD	-264					; fffffef8H
	DD	256					; 00000100H
	DD	$LN3@nk_labelf_
$LN3@nk_labelf_:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_nk_labelf_wrap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_labelf_colored
_TEXT	SEGMENT
_args$ = -276						; size = 4
_buf$ = -264						; size = 256
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_flags$ = 12						; size = 4
_color$ = 16						; size = 4
_fmt$ = 20						; size = 4
_nk_labelf_colored PROC					; COMDAT

; 20399: {

	push	ebp
	mov	ebp, esp
	sub	esp, 472				; 000001d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-472]
	mov	ecx, 118				; 00000076H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20400:     char buf[256];
; 20401:     va_list args;
; 20402:     va_start(args, fmt);

	lea	eax, DWORD PTR _fmt$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 20403:     nk_strfmt(buf, NK_LEN(buf), fmt, args);

	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fmt$[ebp]
	push	ecx
	push	256					; 00000100H
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_nk_strfmt
	add	esp, 16					; 00000010H

; 20404:     nk_label_colored(ctx, buf, flags, color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flags$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_label_colored
	add	esp, 16					; 00000010H

; 20405:     va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 20406: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_labelf_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 472				; 000001d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@nk_labelf_:
	DD	1
	DD	$LN4@nk_labelf_
$LN4@nk_labelf_:
	DD	-264					; fffffef8H
	DD	256					; 00000100H
	DD	$LN3@nk_labelf_
$LN3@nk_labelf_:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_nk_labelf_colored ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_labelf
_TEXT	SEGMENT
_args$ = -276						; size = 4
_buf$ = -264						; size = 256
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_flags$ = 12						; size = 4
_fmt$ = 16						; size = 4
_nk_labelf PROC						; COMDAT

; 20422: {

	push	ebp
	mov	ebp, esp
	sub	esp, 472				; 000001d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-472]
	mov	ecx, 118				; 00000076H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20423:     char buf[256];
; 20424:     va_list args;
; 20425:     va_start(args, fmt);

	lea	eax, DWORD PTR _fmt$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 20426:     nk_strfmt(buf, NK_LEN(buf), fmt, args);

	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fmt$[ebp]
	push	ecx
	push	256					; 00000100H
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_nk_strfmt
	add	esp, 16					; 00000010H

; 20427:     nk_label(ctx, buf, flags);

	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_label
	add	esp, 12					; 0000000cH

; 20428:     va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 20429: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_labelf
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 472				; 000001d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@nk_labelf:
	DD	1
	DD	$LN4@nk_labelf
$LN4@nk_labelf:
	DD	-264					; fffffef8H
	DD	256					; 00000100H
	DD	$LN3@nk_labelf
$LN3@nk_labelf:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_nk_labelf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_image
_TEXT	SEGMENT
_bounds$ = -36						; size = 16
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_img$ = 12						; size = 16
_nk_image PROC						; COMDAT

; 20517: {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20518:     struct nk_window *win;
; 20519:     struct nk_rect bounds;
; 20520: 
; 20521:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_image
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_image@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_image:

; 20522:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN7@nk_image
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_image@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_image:

; 20523:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN8@nk_image
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_image@@9@9
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_image:

; 20524:     if (!ctx || !ctx->current || !ctx->current->layout) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_image
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN2@nk_image
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN3@nk_image
$LN2@nk_image:
	jmp	SHORT $LN4@nk_image
$LN3@nk_image:

; 20525: 
; 20526:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 20527:     if (!nk_widget(&bounds, ctx)) return;

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@nk_image
	jmp	SHORT $LN4@nk_image
$LN1@nk_image:

; 20528:     nk_draw_image(&win->buffer, bounds, &img, nk_white);

	mov	eax, DWORD PTR _nk_white
	push	eax
	lea	ecx, DWORD PTR _img$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_draw_image
	add	esp, 28					; 0000001cH
$LN4@nk_image:

; 20529: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@nk_image
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@nk_image:
	DD	1
	DD	$LN10@nk_image
$LN10@nk_image:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN9@nk_image
$LN9@nk_image:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_label_colored_wrap
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_str$ = 12						; size = 4
_color$ = 16						; size = 4
_nk_label_colored_wrap PROC				; COMDAT

; 20513: {nk_text_wrap_colored(ctx, str, nk_strlen(str), color);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_text_wrap_colored
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_label_colored_wrap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_label_wrap
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_str$ = 12						; size = 4
_nk_label_wrap PROC					; COMDAT

; 20509: {nk_text_wrap(ctx, str, nk_strlen(str));}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_text_wrap
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_label_wrap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_label_colored
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_str$ = 12						; size = 4
_align$ = 16						; size = 4
_color$ = 20						; size = 4
_nk_label_colored PROC					; COMDAT

; 20505: {nk_text_colored(ctx, str, nk_strlen(str), align, color);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, DWORD PTR _align$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_text_colored
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_label_colored ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_label
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_str$ = 12						; size = 4
_alignment$ = 16					; size = 4
_nk_label PROC						; COMDAT

; 20500: {nk_text(ctx, str, nk_strlen(str), alignment);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _alignment$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_nk_strlen
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_text
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_text_wrap_colored
_TEXT	SEGMENT
_text$ = -88						; size = 16
_bounds$ = -64						; size = 16
_item_padding$ = -40					; size = 8
_style$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_str$ = 12						; size = 4
_len$ = 16						; size = 4
_color$ = 20						; size = 4
_nk_text_wrap_colored PROC				; COMDAT

; 20370: {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20371:     struct nk_window *win;
; 20372:     const struct nk_style *style;
; 20373: 
; 20374:     struct nk_vec2 item_padding;
; 20375:     struct nk_rect bounds;
; 20376:     struct nk_text text;
; 20377: 
; 20378:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_text_wr
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_text_wrap_colored@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_text_wr:

; 20379:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_text_wr
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_text_wrap_colored@@9@9
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_text_wr:

; 20380:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN7@nk_text_wr
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_text_wrap_colored@@9@9
	add	edx, 10					; 0000000aH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_text_wr:

; 20381:     if (!ctx || !ctx->current || !ctx->current->layout) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_text_wr
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN1@nk_text_wr
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN2@nk_text_wr
$LN1@nk_text_wr:
	jmp	$LN3@nk_text_wr
$LN2@nk_text_wr:

; 20382: 
; 20383:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 20384:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 20385:     nk_panel_alloc_space(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_panel_alloc_space
	add	esp, 8

; 20386:     item_padding = style->text.padding;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [eax+52]
	mov	DWORD PTR _item_padding$[ebp], ecx
	mov	DWORD PTR _item_padding$[ebp+4], edx

; 20387: 
; 20388:     text.padding.x = item_padding.x;

	movss	xmm0, DWORD PTR _item_padding$[ebp]
	movss	DWORD PTR _text$[ebp], xmm0

; 20389:     text.padding.y = item_padding.y;

	movss	xmm0, DWORD PTR _item_padding$[ebp+4]
	movss	DWORD PTR _text$[ebp+4], xmm0

; 20390:     text.background = style->window.background;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5220]
	mov	DWORD PTR _text$[ebp+8], ecx

; 20391:     text.text = color;

	mov	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR _text$[ebp+12], eax

; 20392:     nk_widget_text_wrap(&win->buffer, bounds, str, len, &text, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_nk_widget_text_wrap
	add	esp, 36					; 00000024H
$LN3@nk_text_wr:

; 20393: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@nk_text_wr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@nk_text_wr:
	DD	3
	DD	$LN11@nk_text_wr
$LN11@nk_text_wr:
	DD	-40					; ffffffd8H
	DD	8
	DD	$LN8@nk_text_wr
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN9@nk_text_wr
	DD	-88					; ffffffa8H
	DD	16					; 00000010H
	DD	$LN10@nk_text_wr
$LN10@nk_text_wr:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN9@nk_text_wr:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN8@nk_text_wr:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
_nk_text_wrap_colored ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_text_wrap
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_str$ = 12						; size = 4
_len$ = 16						; size = 4
_nk_text_wrap PROC					; COMDAT

; 20492: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 20493:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN4@nk_text_wr
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_text_wrap@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_text_wr:

; 20494:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN1@nk_text_wr
	jmp	SHORT $LN2@nk_text_wr
$LN1@nk_text_wr:

; 20495:     nk_text_wrap_colored(ctx, str, len, ctx->style.text.color);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_text_wrap_colored
	add	esp, 16					; 00000010H
$LN2@nk_text_wr:

; 20496: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_text_wrap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_text_colored
_TEXT	SEGMENT
_text$ = -88						; size = 16
_bounds$ = -64						; size = 16
_item_padding$ = -40					; size = 8
_style$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_str$ = 12						; size = 4
_len$ = 16						; size = 4
_alignment$ = 20					; size = 4
_color$ = 24						; size = 4
_nk_text_colored PROC					; COMDAT

; 20342: {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20343:     struct nk_window *win;
; 20344:     const struct nk_style *style;
; 20345: 
; 20346:     struct nk_vec2 item_padding;
; 20347:     struct nk_rect bounds;
; 20348:     struct nk_text text;
; 20349: 
; 20350:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_text_co
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_text_colored@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_text_co:

; 20351:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_text_co
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_text_colored@@9@9
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_text_co:

; 20352:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN7@nk_text_co
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_text_colored@@9@9
	add	edx, 10					; 0000000aH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_text_co:

; 20353:     if (!ctx || !ctx->current || !ctx->current->layout) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_text_co
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN1@nk_text_co
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN2@nk_text_co
$LN1@nk_text_co:
	jmp	$LN3@nk_text_co
$LN2@nk_text_co:

; 20354: 
; 20355:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 20356:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 20357:     nk_panel_alloc_space(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_panel_alloc_space
	add	esp, 8

; 20358:     item_padding = style->text.padding;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [eax+52]
	mov	DWORD PTR _item_padding$[ebp], ecx
	mov	DWORD PTR _item_padding$[ebp+4], edx

; 20359: 
; 20360:     text.padding.x = item_padding.x;

	movss	xmm0, DWORD PTR _item_padding$[ebp]
	movss	DWORD PTR _text$[ebp], xmm0

; 20361:     text.padding.y = item_padding.y;

	movss	xmm0, DWORD PTR _item_padding$[ebp+4]
	movss	DWORD PTR _text$[ebp+4], xmm0

; 20362:     text.background = style->window.background;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5220]
	mov	DWORD PTR _text$[ebp+8], ecx

; 20363:     text.text = color;

	mov	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR _text$[ebp+12], eax

; 20364:     nk_widget_text(&win->buffer, bounds, str, len, &text, alignment, style->font);

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _alignment$[ebp]
	push	edx
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_nk_widget_text
	add	esp, 40					; 00000028H
$LN3@nk_text_co:

; 20365: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@nk_text_co
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@nk_text_co:
	DD	3
	DD	$LN11@nk_text_co
$LN11@nk_text_co:
	DD	-40					; ffffffd8H
	DD	8
	DD	$LN8@nk_text_co
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN9@nk_text_co
	DD	-88					; ffffffa8H
	DD	16					; 00000010H
	DD	$LN10@nk_text_co
$LN10@nk_text_co:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN9@nk_text_co:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN8@nk_text_co:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
_nk_text_colored ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_text
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_str$ = 12						; size = 4
_len$ = 16						; size = 4
_alignment$ = 20					; size = 4
_nk_text PROC						; COMDAT

; 20484: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 20485:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN4@nk_text
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_text@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_text:

; 20486:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN1@nk_text
	jmp	SHORT $LN2@nk_text
$LN1@nk_text:

; 20487:     nk_text_colored(ctx, str, len, alignment, ctx->style.text.color);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	push	ecx
	mov	edx, DWORD PTR _alignment$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_text_colored
	add	esp, 20					; 00000014H
$LN2@nk_text:

; 20488: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_spacing
_TEXT	SEGMENT
_rows$ = -84						; size = 4
_index$ = -72						; size = 4
_i$ = -60						; size = 4
_none$ = -48						; size = 16
_layout$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_cols$ = 12						; size = 4
_nk_spacing PROC					; COMDAT

; 20303: {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20304:     struct nk_window *win;
; 20305:     struct nk_panel *layout;
; 20306:     struct nk_rect none;
; 20307:     int i, index, rows;
; 20308: 
; 20309:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN13@nk_spacing
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_spacing@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_spacing:

; 20310:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN14@nk_spacing
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_spacing@@9@9
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_spacing:

; 20311:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN15@nk_spacing
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_spacing@@9@9
	add	edx, 8
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@nk_spacing:

; 20312:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN9@nk_spacing
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN9@nk_spacing
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN10@nk_spacing
$LN9@nk_spacing:

; 20313:         return;

	jmp	$LN11@nk_spacing
$LN10@nk_spacing:

; 20314: 
; 20315:     /* spacing over row boundaries */
; 20316:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 20317:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 20318:     index = (layout->row.index + cols) % layout->row.columns;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	eax, DWORD PTR [eax+104]
	add	eax, DWORD PTR _cols$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	cdq
	idiv	DWORD PTR [ecx+116]
	mov	DWORD PTR _index$[ebp], edx

; 20319:     rows = (layout->row.index + cols) / layout->row.columns;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	eax, DWORD PTR [eax+104]
	add	eax, DWORD PTR _cols$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	cdq
	idiv	DWORD PTR [ecx+116]
	mov	DWORD PTR _rows$[ebp], eax

; 20320:     if (rows) {

	cmp	DWORD PTR _rows$[ebp], 0
	je	SHORT $LN8@nk_spacing

; 20321:         for (i = 0; i < rows; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@nk_spacing
$LN6@nk_spacing:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@nk_spacing:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _rows$[ebp]
	jge	SHORT $LN5@nk_spacing

; 20322:             nk_panel_alloc_row(ctx, win);

	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_panel_alloc_row
	add	esp, 8
	jmp	SHORT $LN6@nk_spacing
$LN5@nk_spacing:

; 20323:         cols = index;

	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _cols$[ebp], eax
$LN8@nk_spacing:

; 20324:     }
; 20325:     /* non table layout need to allocate space */
; 20326:     if (layout->row.type != NK_LAYOUT_DYNAMIC_FIXED &&
; 20327:         layout->row.type != NK_LAYOUT_STATIC_FIXED) {

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+100], 0
	je	SHORT $LN4@nk_spacing
	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+100], 4
	je	SHORT $LN4@nk_spacing

; 20328:         for (i = 0; i < cols; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_spacing
$LN2@nk_spacing:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_spacing:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _cols$[ebp]
	jge	SHORT $LN4@nk_spacing

; 20329:             nk_panel_alloc_space(&none, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _none$[ebp]
	push	ecx
	call	_nk_panel_alloc_space
	add	esp, 8
	jmp	SHORT $LN2@nk_spacing
$LN4@nk_spacing:

; 20330:     }
; 20331:     layout->row.index = index;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR [eax+104], ecx
$LN11@nk_spacing:

; 20332: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@nk_spacing
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@nk_spacing:
	DD	1
	DD	$LN17@nk_spacing
$LN17@nk_spacing:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN16@nk_spacing
$LN16@nk_spacing:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
_nk_spacing ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_widget_has_mouse_click_down
_TEXT	SEGMENT
_bounds$ = -72						; size = 16
_v$ = -48						; size = 16
_c$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_btn$ = 12						; size = 4
_down$ = 16						; size = 4
_nk_widget_has_mouse_click_down PROC			; COMDAT

; 20192: {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20193:     struct nk_rect c, v;
; 20194:     struct nk_rect bounds;
; 20195:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_widget_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_widget_has_mouse_click_down@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_widget_:

; 20196:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_widget_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_widget_has_mouse_click_down@@9@9
	add	ecx, 4
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_widget_:

; 20197:     if (!ctx || !ctx->current || ctx->active != ctx->current)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_widget_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_widget_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [eax+12936]
	cmp	edx, DWORD PTR [ecx+12940]
	je	SHORT $LN4@nk_widget_
$LN3@nk_widget_:

; 20198:         return 0;

	xor	eax, eax
	jmp	$LN5@nk_widget_
$LN4@nk_widget_:

; 20199: 
; 20200:     c = ctx->current->layout->clip;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	add	edx, 60					; 0000003cH
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _c$[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _c$[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _c$[ebp+12], ecx

; 20201:     c.x = (float)((int)c.x);

	cvttss2si eax, DWORD PTR _c$[ebp]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _c$[ebp], xmm0

; 20202:     c.y = (float)((int)c.y);

	cvttss2si eax, DWORD PTR _c$[ebp+4]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _c$[ebp+4], xmm0

; 20203:     c.w = (float)((int)c.w);

	cvttss2si eax, DWORD PTR _c$[ebp+8]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _c$[ebp+8], xmm0

; 20204:     c.h = (float)((int)c.h);

	cvttss2si eax, DWORD PTR _c$[ebp+12]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _c$[ebp+12], xmm0

; 20205: 
; 20206:     nk_layout_peek(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_layout_peek
	add	esp, 8

; 20207:     nk_unify(&v, &c, bounds.x, bounds.y, bounds.x + bounds.w, bounds.y + bounds.h);

	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	addss	xmm0, DWORD PTR _bounds$[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _bounds$[ebp]
	addss	xmm0, DWORD PTR _bounds$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_nk_unify
	add	esp, 24					; 00000018H

; 20208:     if (!NK_INTERSECT(c.x, c.y, c.w, c.h, bounds.x, bounds.y, bounds.w, bounds.h))

	movss	xmm0, DWORD PTR _c$[ebp]
	addss	xmm0, DWORD PTR _c$[ebp+8]
	movss	xmm1, DWORD PTR _bounds$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN1@nk_widget_
	movss	xmm0, DWORD PTR _bounds$[ebp]
	addss	xmm0, DWORD PTR _bounds$[ebp+8]
	movss	xmm1, DWORD PTR _c$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN1@nk_widget_
	movss	xmm0, DWORD PTR _c$[ebp+4]
	addss	xmm0, DWORD PTR _c$[ebp+12]
	movss	xmm1, DWORD PTR _bounds$[ebp+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN1@nk_widget_
	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	addss	xmm0, DWORD PTR _bounds$[ebp+12]
	movss	xmm1, DWORD PTR _c$[ebp+4]
	comiss	xmm1, xmm0
	jbe	SHORT $LN2@nk_widget_
$LN1@nk_widget_:

; 20209:         return 0;

	xor	eax, eax
	jmp	SHORT $LN5@nk_widget_
$LN2@nk_widget_:

; 20210:     return nk_input_has_mouse_click_down_in_rect(&ctx->input, btn, bounds, down);

	mov	eax, DWORD PTR _down$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _btn$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_input_has_mouse_click_down_in_rect
	add	esp, 28					; 0000001cH
$LN5@nk_widget_:

; 20211: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@nk_widget_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@nk_widget_:
	DD	3
	DD	$LN12@nk_widget_
$LN12@nk_widget_:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN9@nk_widget_
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN10@nk_widget_
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN11@nk_widget_
$LN11@nk_widget_:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN10@nk_widget_:
	DB	118					; 00000076H
	DB	0
$LN9@nk_widget_:
	DB	99					; 00000063H
	DB	0
_nk_widget_has_mouse_click_down ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_widget_is_mouse_clicked
_TEXT	SEGMENT
_bounds$ = -72						; size = 16
_v$ = -48						; size = 16
_c$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_btn$ = 12						; size = 4
_nk_widget_is_mouse_clicked PROC			; COMDAT

; 20169: {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20170:     struct nk_rect c, v;
; 20171:     struct nk_rect bounds;
; 20172:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_widget_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_widget_is_mouse_clicked@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_widget_:

; 20173:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_widget_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_widget_is_mouse_clicked@@9@9
	add	ecx, 4
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_widget_:

; 20174:     if (!ctx || !ctx->current || ctx->active != ctx->current)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_widget_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_widget_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [eax+12936]
	cmp	edx, DWORD PTR [ecx+12940]
	je	SHORT $LN4@nk_widget_
$LN3@nk_widget_:

; 20175:         return 0;

	xor	eax, eax
	jmp	$LN5@nk_widget_
$LN4@nk_widget_:

; 20176: 
; 20177:     c = ctx->current->layout->clip;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	add	edx, 60					; 0000003cH
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _c$[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _c$[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _c$[ebp+12], ecx

; 20178:     c.x = (float)((int)c.x);

	cvttss2si eax, DWORD PTR _c$[ebp]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _c$[ebp], xmm0

; 20179:     c.y = (float)((int)c.y);

	cvttss2si eax, DWORD PTR _c$[ebp+4]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _c$[ebp+4], xmm0

; 20180:     c.w = (float)((int)c.w);

	cvttss2si eax, DWORD PTR _c$[ebp+8]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _c$[ebp+8], xmm0

; 20181:     c.h = (float)((int)c.h);

	cvttss2si eax, DWORD PTR _c$[ebp+12]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _c$[ebp+12], xmm0

; 20182: 
; 20183:     nk_layout_peek(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_layout_peek
	add	esp, 8

; 20184:     nk_unify(&v, &c, bounds.x, bounds.y, bounds.x + bounds.w, bounds.y + bounds.h);

	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	addss	xmm0, DWORD PTR _bounds$[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _bounds$[ebp]
	addss	xmm0, DWORD PTR _bounds$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_nk_unify
	add	esp, 24					; 00000018H

; 20185:     if (!NK_INTERSECT(c.x, c.y, c.w, c.h, bounds.x, bounds.y, bounds.w, bounds.h))

	movss	xmm0, DWORD PTR _c$[ebp]
	addss	xmm0, DWORD PTR _c$[ebp+8]
	movss	xmm1, DWORD PTR _bounds$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN1@nk_widget_
	movss	xmm0, DWORD PTR _bounds$[ebp]
	addss	xmm0, DWORD PTR _bounds$[ebp+8]
	movss	xmm1, DWORD PTR _c$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN1@nk_widget_
	movss	xmm0, DWORD PTR _c$[ebp+4]
	addss	xmm0, DWORD PTR _c$[ebp+12]
	movss	xmm1, DWORD PTR _bounds$[ebp+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN1@nk_widget_
	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	addss	xmm0, DWORD PTR _bounds$[ebp+12]
	movss	xmm1, DWORD PTR _c$[ebp+4]
	comiss	xmm1, xmm0
	jbe	SHORT $LN2@nk_widget_
$LN1@nk_widget_:

; 20186:         return 0;

	xor	eax, eax
	jmp	SHORT $LN5@nk_widget_
$LN2@nk_widget_:

; 20187:     return nk_input_mouse_clicked(&ctx->input, btn, bounds);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _btn$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_mouse_clicked
	add	esp, 24					; 00000018H
$LN5@nk_widget_:

; 20188: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@nk_widget_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@nk_widget_:
	DD	3
	DD	$LN12@nk_widget_
$LN12@nk_widget_:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN9@nk_widget_
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN10@nk_widget_
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN11@nk_widget_
$LN11@nk_widget_:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN10@nk_widget_:
	DB	118					; 00000076H
	DB	0
$LN9@nk_widget_:
	DB	99					; 00000063H
	DB	0
_nk_widget_is_mouse_clicked ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_widget_is_hovered
_TEXT	SEGMENT
_bounds$ = -72						; size = 16
_v$ = -48						; size = 16
_c$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_nk_widget_is_hovered PROC				; COMDAT

; 20146: {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20147:     struct nk_rect c, v;
; 20148:     struct nk_rect bounds;
; 20149:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_widget_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_widget_is_hovered@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_widget_:

; 20150:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_widget_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_widget_is_hovered@@9@9
	add	ecx, 4
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_widget_:

; 20151:     if (!ctx || !ctx->current || ctx->active != ctx->current)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_widget_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_widget_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [eax+12936]
	cmp	edx, DWORD PTR [ecx+12940]
	je	SHORT $LN4@nk_widget_
$LN3@nk_widget_:

; 20152:         return 0;

	xor	eax, eax
	jmp	$LN5@nk_widget_
$LN4@nk_widget_:

; 20153: 
; 20154:     c = ctx->current->layout->clip;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	add	edx, 60					; 0000003cH
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _c$[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _c$[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _c$[ebp+12], ecx

; 20155:     c.x = (float)((int)c.x);

	cvttss2si eax, DWORD PTR _c$[ebp]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _c$[ebp], xmm0

; 20156:     c.y = (float)((int)c.y);

	cvttss2si eax, DWORD PTR _c$[ebp+4]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _c$[ebp+4], xmm0

; 20157:     c.w = (float)((int)c.w);

	cvttss2si eax, DWORD PTR _c$[ebp+8]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _c$[ebp+8], xmm0

; 20158:     c.h = (float)((int)c.h);

	cvttss2si eax, DWORD PTR _c$[ebp+12]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _c$[ebp+12], xmm0

; 20159: 
; 20160:     nk_layout_peek(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_layout_peek
	add	esp, 8

; 20161:     nk_unify(&v, &c, bounds.x, bounds.y, bounds.x + bounds.w, bounds.y + bounds.h);

	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	addss	xmm0, DWORD PTR _bounds$[ebp+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _bounds$[ebp]
	addss	xmm0, DWORD PTR _bounds$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_nk_unify
	add	esp, 24					; 00000018H

; 20162:     if (!NK_INTERSECT(c.x, c.y, c.w, c.h, bounds.x, bounds.y, bounds.w, bounds.h))

	movss	xmm0, DWORD PTR _c$[ebp]
	addss	xmm0, DWORD PTR _c$[ebp+8]
	movss	xmm1, DWORD PTR _bounds$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN1@nk_widget_
	movss	xmm0, DWORD PTR _bounds$[ebp]
	addss	xmm0, DWORD PTR _bounds$[ebp+8]
	movss	xmm1, DWORD PTR _c$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN1@nk_widget_
	movss	xmm0, DWORD PTR _c$[ebp+4]
	addss	xmm0, DWORD PTR _c$[ebp+12]
	movss	xmm1, DWORD PTR _bounds$[ebp+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN1@nk_widget_
	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	addss	xmm0, DWORD PTR _bounds$[ebp+12]
	movss	xmm1, DWORD PTR _c$[ebp+4]
	comiss	xmm1, xmm0
	jbe	SHORT $LN2@nk_widget_
$LN1@nk_widget_:

; 20163:         return 0;

	xor	eax, eax
	jmp	SHORT $LN5@nk_widget_
$LN2@nk_widget_:

; 20164:     return nk_input_is_mouse_hovering_rect(&ctx->input, bounds);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
$LN5@nk_widget_:

; 20165: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@nk_widget_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@nk_widget_:
	DD	3
	DD	$LN12@nk_widget_
$LN12@nk_widget_:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN9@nk_widget_
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN10@nk_widget_
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN11@nk_widget_
$LN11@nk_widget_:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN10@nk_widget_:
	DB	118					; 00000076H
	DB	0
$LN9@nk_widget_:
	DB	99					; 00000063H
	DB	0
_nk_widget_is_hovered ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_widget_height
_TEXT	SEGMENT
_bounds$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_nk_widget_height PROC					; COMDAT

; 20133: {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20134:     struct nk_rect bounds;
; 20135:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_widget_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_widget_height@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_widget_:

; 20136:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_widget_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_widget_height@@9@9
	add	ecx, 3
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_widget_:

; 20137:     if (!ctx || !ctx->current)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_widget_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_widget_
$LN1@nk_widget_:

; 20138:         return 0;

	fldz
	jmp	SHORT $LN3@nk_widget_
$LN2@nk_widget_:

; 20139: 
; 20140:     nk_layout_peek(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_layout_peek
	add	esp, 8

; 20141:     return bounds.h;

	fld	DWORD PTR _bounds$[ebp+12]
$LN3@nk_widget_:

; 20142: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@nk_widget_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@nk_widget_:
	DD	1
	DD	$LN8@nk_widget_
$LN8@nk_widget_:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN7@nk_widget_
$LN7@nk_widget_:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_widget_height ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_widget_width
_TEXT	SEGMENT
_bounds$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_nk_widget_width PROC					; COMDAT

; 20120: {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20121:     struct nk_rect bounds;
; 20122:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_widget_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_widget_width@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_widget_:

; 20123:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_widget_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_widget_width@@9@9
	add	ecx, 3
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_widget_:

; 20124:     if (!ctx || !ctx->current)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_widget_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_widget_
$LN1@nk_widget_:

; 20125:         return 0;

	fldz
	jmp	SHORT $LN3@nk_widget_
$LN2@nk_widget_:

; 20126: 
; 20127:     nk_layout_peek(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_layout_peek
	add	esp, 8

; 20128:     return bounds.w;

	fld	DWORD PTR _bounds$[ebp+8]
$LN3@nk_widget_:

; 20129: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@nk_widget_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@nk_widget_:
	DD	1
	DD	$LN8@nk_widget_
$LN8@nk_widget_:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN7@nk_widget_
$LN7@nk_widget_:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_widget_width ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_widget_size
_TEXT	SEGMENT
_bounds$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_nk_widget_size PROC					; COMDAT

; 20107: {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20108:     struct nk_rect bounds;
; 20109:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_widget_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_widget_size@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_widget_:

; 20110:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_widget_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_widget_size@@9@9
	add	ecx, 3
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_widget_:

; 20111:     if (!ctx || !ctx->current)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_widget_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_widget_
$LN1@nk_widget_:

; 20112:         return nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	jmp	SHORT $LN3@nk_widget_
$LN2@nk_widget_:

; 20113: 
; 20114:     nk_layout_peek(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_layout_peek
	add	esp, 8

; 20115:     return nk_vec2(bounds.w, bounds.h);

	push	ecx
	movss	xmm0, DWORD PTR _bounds$[ebp+12]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _bounds$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
$LN3@nk_widget_:

; 20116: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@nk_widget_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@nk_widget_:
	DD	1
	DD	$LN8@nk_widget_
$LN8@nk_widget_:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN7@nk_widget_
$LN7@nk_widget_:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_widget_size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_widget_position
_TEXT	SEGMENT
_bounds$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_nk_widget_position PROC				; COMDAT

; 20094: {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20095:     struct nk_rect bounds;
; 20096:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_widget_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_widget_position@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_widget_:

; 20097:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_widget_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_widget_position@@9@9
	add	ecx, 3
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_widget_:

; 20098:     if (!ctx || !ctx->current)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_widget_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_widget_
$LN1@nk_widget_:

; 20099:         return nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	jmp	SHORT $LN3@nk_widget_
$LN2@nk_widget_:

; 20100: 
; 20101:     nk_layout_peek(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_layout_peek
	add	esp, 8

; 20102:     return nk_vec2(bounds.x, bounds.y);

	push	ecx
	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
$LN3@nk_widget_:

; 20103: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@nk_widget_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@nk_widget_:
	DD	1
	DD	$LN8@nk_widget_
$LN8@nk_widget_:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN7@nk_widget_
$LN7@nk_widget_:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_widget_position ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_widget_bounds
_TEXT	SEGMENT
$T1 = -240						; size = 16
_bounds$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
$T2 = 8							; size = 4
_ctx$ = 12						; size = 4
_nk_widget_bounds PROC					; COMDAT

; 20082: {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20083:     struct nk_rect bounds;
; 20084:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_widget_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_widget_bounds@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_widget_:

; 20085:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_widget_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_widget_bounds@@9@9
	add	ecx, 3
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_widget_:

; 20086:     if (!ctx || !ctx->current)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_widget_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_widget_
$LN1@nk_widget_:

; 20087:         return nk_rect(0,0,0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	_nk_rect
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T2[ebp]
	jmp	SHORT $LN3@nk_widget_
$LN2@nk_widget_:

; 20088:     nk_layout_peek(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_layout_peek
	add	esp, 8

; 20089:     return bounds;

	mov	eax, DWORD PTR $T2[ebp]
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T2[ebp]
$LN3@nk_widget_:

; 20090: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@nk_widget_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@nk_widget_:
	DD	1
	DD	$LN8@nk_widget_
$LN8@nk_widget_:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN7@nk_widget_
$LN7@nk_widget_:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_widget_bounds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_widget_fitting
_TEXT	SEGMENT
_panel_padding$ = -60					; size = 8
_state$ = -44						; size = 4
_layout$ = -32						; size = 4
_style$ = -20						; size = 4
_win$ = -8						; size = 4
_bounds$ = 8						; size = 4
_ctx$ = 12						; size = 4
_item_padding$ = 16					; size = 8
_nk_widget_fitting PROC					; COMDAT

; 20265: {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 20266:     /* update the bounds to stand without padding  */
; 20267:     struct nk_window *win;
; 20268:     struct nk_style *style;
; 20269:     struct nk_panel *layout;
; 20270:     enum nk_widget_layout_states state;
; 20271:     struct nk_vec2 panel_padding;
; 20272: 
; 20273:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN9@nk_widget_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_widget_fitting@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_widget_:

; 20274:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN10@nk_widget_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_widget_fitting@@9@9
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_widget_:

; 20275:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN11@nk_widget_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_widget_fitting@@9@9
	add	edx, 10					; 0000000aH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_widget_:

; 20276:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN5@nk_widget_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN5@nk_widget_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN6@nk_widget_
$LN5@nk_widget_:

; 20277:         return NK_WIDGET_INVALID;

	xor	eax, eax
	jmp	$LN7@nk_widget_
$LN6@nk_widget_:

; 20278: 
; 20279:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 20280:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 20281:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 20282:     state = nk_widget(bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_widget
	add	esp, 8
	mov	DWORD PTR _state$[ebp], eax

; 20283: 
; 20284:     panel_padding = nk_panel_get_padding(style, layout->type);

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _style$[ebp]
	push	edx
	call	_nk_panel_get_padding
	add	esp, 8
	mov	DWORD PTR _panel_padding$[ebp], eax
	mov	DWORD PTR _panel_padding$[ebp+4], edx

; 20285:     if (layout->row.index == 1) {

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+104], 1
	jne	SHORT $LN4@nk_widget_

; 20286:         bounds->w += panel_padding.x;

	mov	eax, DWORD PTR _bounds$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR _panel_padding$[ebp]
	mov	ecx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 20287:         bounds->x -= panel_padding.x;

	mov	eax, DWORD PTR _bounds$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR _panel_padding$[ebp]
	mov	ecx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [ecx], xmm0
	jmp	SHORT $LN3@nk_widget_
$LN4@nk_widget_:

; 20288:     } else bounds->x -= item_padding.x;

	mov	eax, DWORD PTR _bounds$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR _item_padding$[ebp]
	mov	ecx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [ecx], xmm0
$LN3@nk_widget_:

; 20289: 
; 20290:     if (layout->row.index == layout->row.columns)

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [eax+104]
	cmp	edx, DWORD PTR [ecx+116]
	jne	SHORT $LN2@nk_widget_

; 20291:         bounds->w += panel_padding.x;

	mov	eax, DWORD PTR _bounds$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR _panel_padding$[ebp]
	mov	ecx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	jmp	SHORT $LN1@nk_widget_
$LN2@nk_widget_:

; 20292:     else bounds->w += item_padding.x;

	mov	eax, DWORD PTR _bounds$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR _item_padding$[ebp]
	mov	ecx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
$LN1@nk_widget_:

; 20293:     return state;

	mov	eax, DWORD PTR _state$[ebp]
$LN7@nk_widget_:

; 20294: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@nk_widget_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@nk_widget_:
	DD	1
	DD	$LN13@nk_widget_
$LN13@nk_widget_:
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN12@nk_widget_
$LN12@nk_widget_:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
_nk_widget_fitting ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_widget
_TEXT	SEGMENT
_in$ = -84						; size = 4
_layout$ = -72						; size = 4
_win$ = -60						; size = 4
_v$ = -48						; size = 16
_c$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_bounds$ = 8						; size = 4
_ctx$ = 12						; size = 4
_nk_widget PROC						; COMDAT

; 20215: {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20216:     struct nk_rect c, v;
; 20217:     struct nk_window *win;
; 20218:     struct nk_panel *layout;
; 20219:     const struct nk_input *in;
; 20220: 
; 20221:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN10@nk_widget
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_widget@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_widget:

; 20222:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN11@nk_widget
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_widget@@9@9
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_widget:

; 20223:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN12@nk_widget
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_widget@@9@9
	add	edx, 8
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_widget:

; 20224:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN6@nk_widget
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN6@nk_widget
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN7@nk_widget
$LN6@nk_widget:

; 20225:         return NK_WIDGET_INVALID;

	xor	eax, eax
	jmp	$LN8@nk_widget
$LN7@nk_widget:

; 20226: 
; 20227:     /* allocate space and check if the widget needs to be updated and drawn */
; 20228:     nk_panel_alloc_space(bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_panel_alloc_space
	add	esp, 8

; 20229:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 20230:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 20231:     in = &ctx->input;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 20232:     c = layout->clip;

	mov	eax, DWORD PTR _layout$[ebp]
	add	eax, 60					; 0000003cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _c$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _c$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _c$[ebp+12], edx

; 20233: 
; 20234:     /*  if one of these triggers you forgot to add an `if` condition around either
; 20235:         a window, group, popup, combobox or contextual menu `begin` and `end` block.
; 20236:         Example:
; 20237:             if (nk_begin(...) {...} nk_end(...); or
; 20238:             if (nk_group_begin(...) { nk_group_end(...);} */
; 20239:     NK_ASSERT(!(layout->flags & NK_WINDOW_MINIMIZED));

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN13@nk_widget
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_widget@@9@9
	add	edx, 24					; 00000018H
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EO@JPIFGEEN@?$AA?$CB?$AA?$CI?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAW?$AAI?$AAN?$AAD?$AAO?$AAW?$AA_?$AAM?$AAI?$AAN?$AAI@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_widget:

; 20240:     NK_ASSERT(!(layout->flags & NK_WINDOW_HIDDEN));

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 8192				; 00002000H
	je	SHORT $LN14@nk_widget
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_widget@@9@9
	add	edx, 25					; 00000019H
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EI@DELDILCF@?$AA?$CB?$AA?$CI?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAW?$AAI?$AAN?$AAD?$AAO?$AAW?$AA_?$AAH?$AAI?$AAD?$AAD@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_widget:

; 20241:     NK_ASSERT(!(layout->flags & NK_WINDOW_CLOSED));

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 16384				; 00004000H
	je	SHORT $LN15@nk_widget
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_widget@@9@9
	add	edx, 26					; 0000001aH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EI@PPLANDAM@?$AA?$CB?$AA?$CI?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAN?$AAK?$AA_?$AAW?$AAI?$AAN?$AAD?$AAO?$AAW?$AA_?$AAC?$AAL?$AAO?$AAS@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@nk_widget:

; 20242: 
; 20243:     /* need to convert to int here to remove floating point errors */
; 20244:     bounds->x = (float)((int)bounds->x);

	mov	eax, DWORD PTR _bounds$[ebp]
	cvttss2si ecx, DWORD PTR [eax]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [edx], xmm0

; 20245:     bounds->y = (float)((int)bounds->y);

	mov	eax, DWORD PTR _bounds$[ebp]
	cvttss2si ecx, DWORD PTR [eax+4]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 20246:     bounds->w = (float)((int)bounds->w);

	mov	eax, DWORD PTR _bounds$[ebp]
	cvttss2si ecx, DWORD PTR [eax+8]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 20247:     bounds->h = (float)((int)bounds->h);

	mov	eax, DWORD PTR _bounds$[ebp]
	cvttss2si ecx, DWORD PTR [eax+12]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _bounds$[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 20248: 
; 20249:     c.x = (float)((int)c.x);

	cvttss2si eax, DWORD PTR _c$[ebp]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _c$[ebp], xmm0

; 20250:     c.y = (float)((int)c.y);

	cvttss2si eax, DWORD PTR _c$[ebp+4]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _c$[ebp+4], xmm0

; 20251:     c.w = (float)((int)c.w);

	cvttss2si eax, DWORD PTR _c$[ebp+8]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _c$[ebp+8], xmm0

; 20252:     c.h = (float)((int)c.h);

	cvttss2si eax, DWORD PTR _c$[ebp+12]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _c$[ebp+12], xmm0

; 20253: 
; 20254:     nk_unify(&v, &c, bounds->x, bounds->y, bounds->x + bounds->w, bounds->y + bounds->h);

	mov	eax, DWORD PTR _bounds$[ebp]
	mov	ecx, DWORD PTR _bounds$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	eax, DWORD PTR _bounds$[ebp]
	movss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR [eax+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _bounds$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_nk_unify
	add	esp, 24					; 00000018H

; 20255:     if (!NK_INTERSECT(c.x, c.y, c.w, c.h, bounds->x, bounds->y, bounds->w, bounds->h))

	movss	xmm0, DWORD PTR _c$[ebp]
	addss	xmm0, DWORD PTR _c$[ebp+8]
	mov	eax, DWORD PTR _bounds$[ebp]
	movss	xmm1, DWORD PTR [eax]
	comiss	xmm1, xmm0
	ja	SHORT $LN4@nk_widget
	mov	eax, DWORD PTR _bounds$[ebp]
	mov	ecx, DWORD PTR _bounds$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR _c$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN4@nk_widget
	movss	xmm0, DWORD PTR _c$[ebp+4]
	addss	xmm0, DWORD PTR _c$[ebp+12]
	mov	eax, DWORD PTR _bounds$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN4@nk_widget
	mov	eax, DWORD PTR _bounds$[ebp]
	mov	ecx, DWORD PTR _bounds$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	xmm1, DWORD PTR _c$[ebp+4]
	comiss	xmm1, xmm0
	jbe	SHORT $LN5@nk_widget
$LN4@nk_widget:

; 20256:         return NK_WIDGET_INVALID;

	xor	eax, eax
	jmp	SHORT $LN8@nk_widget
$LN5@nk_widget:

; 20257:     if (!NK_INBOX(in->mouse.pos.x, in->mouse.pos.y, v.x, v.y, v.w, v.h))

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+324]
	comiss	xmm0, DWORD PTR _v$[ebp]
	jb	SHORT $LN1@nk_widget
	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR _v$[ebp]
	addss	xmm0, DWORD PTR _v$[ebp+8]
	comiss	xmm0, DWORD PTR [eax+324]
	jbe	SHORT $LN1@nk_widget
	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	comiss	xmm0, DWORD PTR _v$[ebp+4]
	jb	SHORT $LN1@nk_widget
	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR _v$[ebp+4]
	addss	xmm0, DWORD PTR _v$[ebp+12]
	comiss	xmm0, DWORD PTR [eax+328]
	ja	SHORT $LN3@nk_widget
$LN1@nk_widget:

; 20258:         return NK_WIDGET_ROM;

	mov	eax, 2
	jmp	SHORT $LN8@nk_widget
$LN3@nk_widget:

; 20259:     return NK_WIDGET_VALID;

	mov	eax, 1
$LN8@nk_widget:

; 20260: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@nk_widget
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@nk_widget:
	DD	2
	DD	$LN18@nk_widget
$LN18@nk_widget:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN16@nk_widget
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN17@nk_widget
$LN17@nk_widget:
	DB	118					; 00000076H
	DB	0
$LN16@nk_widget:
	DB	99					; 00000063H
	DB	0
_nk_widget ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tree_state_pop
_TEXT	SEGMENT
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_tree_state_pop PROC					; COMDAT

; 20041: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 20042:     struct nk_window *win = 0;

	mov	DWORD PTR _win$[ebp], 0

; 20043:     struct nk_panel *layout = 0;

	mov	DWORD PTR _layout$[ebp], 0

; 20044: 
; 20045:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_tree_st
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_tree_state_pop@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_tree_st:

; 20046:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_tree_st
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_tree_state_pop@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_tree_st:

; 20047:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN7@nk_tree_st
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_tree_state_pop@@9@9
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_tree_st:

; 20048:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_tree_st
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN1@nk_tree_st
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN2@nk_tree_st
$LN1@nk_tree_st:

; 20049:         return;

	jmp	$LN3@nk_tree_st
$LN2@nk_tree_st:

; 20050: 
; 20051:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 20052:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 20053:     layout->at_x -= ctx->style.tab.indent + ctx->style.window.padding.x;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR [eax+4912]
	addss	xmm0, DWORD PTR [ecx+5692]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	xmm1, DWORD PTR [edx+32]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [eax+32], xmm1

; 20054:     layout->bounds.w += ctx->style.tab.indent + ctx->style.window.padding.x;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR [eax+4912]
	addss	xmm0, DWORD PTR [ecx+5692]
	mov	edx, DWORD PTR _layout$[ebp]
	addss	xmm0, DWORD PTR [edx+16]
	mov	eax, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 20055:     NK_ASSERT(layout->row.tree_depth);

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+156], 0
	jne	SHORT $LN8@nk_tree_st
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_tree_state_pop@@9@9
	add	ecx, 14					; 0000000eH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CO@ONCLGDAH@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAr?$AAe?$AAe?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_tree_st:

; 20056:     layout->row.tree_depth--;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	sub	ecx, 1
	mov	edx, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [edx+156], ecx
$LN3@nk_tree_st:

; 20057: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tree_state_pop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tree_state_image_push
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_type$ = 12						; size = 4
_img$ = 16						; size = 16
_title$ = 32						; size = 4
_state$ = 36						; size = 4
_nk_tree_state_image_push PROC				; COMDAT

; 20037: {return nk_tree_state_base(ctx, type, &img, title, state);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	lea	edx, DWORD PTR _img$[ebp]
	push	edx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_tree_state_base
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tree_state_image_push ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tree_state_push
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_type$ = 12						; size = 4
_title$ = 16						; size = 4
_state$ = 20						; size = 4
_nk_tree_state_push PROC				; COMDAT

; 20032: {return nk_tree_state_base(ctx, type, 0, title, state);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_tree_state_base
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tree_state_push ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tree_pop
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_tree_pop PROC					; COMDAT

; 20073: {nk_tree_state_pop(ctx);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_tree_state_pop
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tree_pop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tree_image_push_hashed
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_type$ = 12						; size = 4
_img$ = 16						; size = 16
_title$ = 32						; size = 4
_initial_state$ = 36					; size = 4
_hash$ = 40						; size = 4
_len$ = 44						; size = 4
_seed$ = 48						; size = 4
_nk_tree_image_push_hashed PROC				; COMDAT

; 20069: {return nk_tree_base(ctx, type, &img, title, initial_state, hash, len, seed);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _seed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hash$[ebp]
	push	edx
	mov	eax, DWORD PTR _initial_state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	lea	edx, DWORD PTR _img$[ebp]
	push	edx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_tree_base
	add	esp, 32					; 00000020H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tree_image_push_hashed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_tree_push_hashed
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_type$ = 12						; size = 4
_title$ = 16						; size = 4
_initial_state$ = 20					; size = 4
_hash$ = 24						; size = 4
_len$ = 28						; size = 4
_line$ = 32						; size = 4
_nk_tree_push_hashed PROC				; COMDAT

; 20063: {return nk_tree_base(ctx, type, 0, title, initial_state, hash, len, line);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hash$[ebp]
	push	edx
	mov	eax, DWORD PTR _initial_state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_tree_base
	add	esp, 32					; 00000020H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_tree_push_hashed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_list_view_end
_TEXT	SEGMENT
_layout$ = -32						; size = 4
_win$ = -20						; size = 4
_ctx$ = -8						; size = 4
_view$ = 8						; size = 4
_nk_list_view_end PROC					; COMDAT

; 22138: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 22139:     struct nk_context *ctx;
; 22140:     struct nk_window *win;
; 22141:     struct nk_panel *layout;
; 22142: 
; 22143:     NK_ASSERT(view);

	cmp	DWORD PTR _view$[ebp], 0
	jne	SHORT $LN5@nk_list_vi
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_list_view_end@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19IGFHNPAK@?$AAv?$AAi?$AAe?$AAw?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_list_vi:

; 22144:     NK_ASSERT(view->ctx);

	mov	eax, DWORD PTR _view$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN6@nk_list_vi
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_list_view_end@@9@9
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BE@PIEBDDFH@?$AAv?$AAi?$AAe?$AAw?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_list_vi:

; 22145:     NK_ASSERT(view->scroll_pointer);

	mov	eax, DWORD PTR _view$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN7@nk_list_vi
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_list_view_end@@9@9
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@PJMKKIBM@?$AAv?$AAi?$AAe?$AAw?$AA?9?$AA?$DO?$AAs?$AAc?$AAr?$AAo?$AAl?$AAl?$AA_?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_list_vi:

; 22146:     if (!view || !view->ctx) return;

	cmp	DWORD PTR _view$[ebp], 0
	je	SHORT $LN1@nk_list_vi
	mov	eax, DWORD PTR _view$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN2@nk_list_vi
$LN1@nk_list_vi:
	jmp	SHORT $LN3@nk_list_vi
$LN2@nk_list_vi:

; 22147: 
; 22148:     ctx = view->ctx;

	mov	eax, DWORD PTR _view$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _ctx$[ebp], ecx

; 22149:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 22150:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 22151:     layout->at_y = layout->bounds.y + (float)view->total_height;

	mov	eax, DWORD PTR _view$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _layout$[ebp]
	addss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [edx+36], xmm0

; 22152:     *view->scroll_pointer = *view->scroll_pointer + view->scroll_value;

	mov	eax, DWORD PTR _view$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _view$[ebp]
	add	edx, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _view$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax], edx

; 22153:     nk_group_end(view->ctx);

	mov	eax, DWORD PTR _view$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_nk_group_end
	add	esp, 4
$LN3@nk_list_vi:

; 22154: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_list_view_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_list_view_begin
_TEXT	SEGMENT
tv295 = -332						; size = 8
tv291 = -324						; size = 4
tv193 = -320						; size = 4
tv283 = -316						; size = 8
tv279 = -308						; size = 4
tv209 = -308						; size = 4
tv177 = -308						; size = 4
tv92 = -308						; size = 4
_item_spacing$ = -108					; size = 8
_style$ = -92						; size = 4
_layout$ = -80						; size = 4
_win$ = -68						; size = 4
_result$ = -56						; size = 4
_y_offset$ = -44					; size = 4
_x_offset$ = -32					; size = 4
_title_hash$ = -20					; size = 4
_title_len$ = -8					; size = 4
_ctx$ = 8						; size = 4
_view$ = 12						; size = 4
_title$ = 16						; size = 4
_flags$ = 20						; size = 4
_row_height$ = 24					; size = 4
_row_count$ = 28					; size = 4
_nk_list_view_begin PROC				; COMDAT

; 22085: {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 22086:     int title_len;
; 22087:     nk_hash title_hash;
; 22088:     nk_uint *x_offset;
; 22089:     nk_uint *y_offset;
; 22090: 
; 22091:     int result;
; 22092:     struct nk_window *win;
; 22093:     struct nk_panel *layout;
; 22094:     const struct nk_style *style;
; 22095:     struct nk_vec2 item_spacing;
; 22096: 
; 22097:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN9@nk_list_vi
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_list_view_begin@@9@9
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_list_vi:

; 22098:     NK_ASSERT(view);

	cmp	DWORD PTR _view$[ebp], 0
	jne	SHORT $LN10@nk_list_vi
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_list_view_begin@@9@9
	add	eax, 13					; 0000000dH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19IGFHNPAK@?$AAv?$AAi?$AAe?$AAw?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_list_vi:

; 22099:     NK_ASSERT(title);

	cmp	DWORD PTR _title$[ebp], 0
	jne	SHORT $LN11@nk_list_vi
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_list_view_begin@@9@9
	add	eax, 14					; 0000000eH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@NFEAPLNL@?$AAt?$AAi?$AAt?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_list_vi:

; 22100:     if (!ctx || !view || !title) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN5@nk_list_vi
	cmp	DWORD PTR _view$[ebp], 0
	je	SHORT $LN5@nk_list_vi
	cmp	DWORD PTR _title$[ebp], 0
	jne	SHORT $LN6@nk_list_vi
$LN5@nk_list_vi:
	xor	eax, eax
	jmp	$LN7@nk_list_vi
$LN6@nk_list_vi:

; 22101: 
; 22102:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 22103:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 22104:     item_spacing = style->window.spacing;

	mov	eax, DWORD PTR _style$[ebp]
	mov	ecx, DWORD PTR [eax+5308]
	mov	edx, DWORD PTR [eax+5312]
	mov	DWORD PTR _item_spacing$[ebp], ecx
	mov	DWORD PTR _item_spacing$[ebp+4], edx

; 22105:     row_height += NK_MAX(0, (int)item_spacing.y);

	cvttss2si eax, DWORD PTR _item_spacing$[ebp+4]
	test	eax, eax
	jle	SHORT $LN12@nk_list_vi
	cvttss2si ecx, DWORD PTR _item_spacing$[ebp+4]
	mov	DWORD PTR tv92[ebp], ecx
	jmp	SHORT $LN13@nk_list_vi
$LN12@nk_list_vi:
	mov	DWORD PTR tv92[ebp], 0
$LN13@nk_list_vi:
	mov	edx, DWORD PTR _row_height$[ebp]
	add	edx, DWORD PTR tv92[ebp]
	mov	DWORD PTR _row_height$[ebp], edx

; 22106: 
; 22107:     /* find persistent list view scrollbar offset */
; 22108:     title_len = (int)nk_strlen(title);

	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _title_len$[ebp], eax

; 22109:     title_hash = nk_murmur_hash(title, (int)title_len, NK_PANEL_GROUP);

	push	2
	mov	eax, DWORD PTR _title_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	call	_nk_murmur_hash
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _title_hash$[ebp], eax

; 22110:     x_offset = nk_find_value(win, title_hash);

	mov	eax, DWORD PTR _title_hash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	call	_nk_find_value
	add	esp, 8
	mov	DWORD PTR _x_offset$[ebp], eax

; 22111:     if (!x_offset) {

	cmp	DWORD PTR _x_offset$[ebp], 0
	jne	$LN4@nk_list_vi

; 22112:         x_offset = nk_add_value(ctx, win, title_hash, 0);

	push	0
	mov	eax, DWORD PTR _title_hash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_add_value
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x_offset$[ebp], eax

; 22113:         y_offset = nk_add_value(ctx, win, title_hash+1, 0);

	push	0
	mov	eax, DWORD PTR _title_hash$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_add_value
	add	esp, 16					; 00000010H
	mov	DWORD PTR _y_offset$[ebp], eax

; 22114: 
; 22115:         NK_ASSERT(x_offset);

	cmp	DWORD PTR _x_offset$[ebp], 0
	jne	SHORT $LN14@nk_list_vi
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_list_view_begin@@9@9
	add	eax, 30					; 0000001eH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BC@FPAKBMPJ@?$AAx?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_list_vi:

; 22116:         NK_ASSERT(y_offset);

	cmp	DWORD PTR _y_offset$[ebp], 0
	jne	SHORT $LN15@nk_list_vi
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_list_view_begin@@9@9
	add	eax, 31					; 0000001fH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BC@LAFIKKBI@?$AAy?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@nk_list_vi:

; 22117:         if (!x_offset || !y_offset) return 0;

	cmp	DWORD PTR _x_offset$[ebp], 0
	je	SHORT $LN2@nk_list_vi
	cmp	DWORD PTR _y_offset$[ebp], 0
	jne	SHORT $LN3@nk_list_vi
$LN2@nk_list_vi:
	xor	eax, eax
	jmp	$LN7@nk_list_vi
$LN3@nk_list_vi:

; 22118:         *x_offset = *y_offset = 0;

	mov	eax, DWORD PTR _y_offset$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _x_offset$[ebp]
	mov	DWORD PTR [ecx], 0
	jmp	SHORT $LN1@nk_list_vi
$LN4@nk_list_vi:

; 22119:     } else y_offset = nk_find_value(win, title_hash+1);

	mov	eax, DWORD PTR _title_hash$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	call	_nk_find_value
	add	esp, 8
	mov	DWORD PTR _y_offset$[ebp], eax
$LN1@nk_list_vi:

; 22120:     view->scroll_value = *y_offset;

	mov	eax, DWORD PTR _view$[ebp]
	mov	ecx, DWORD PTR _y_offset$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+24], edx

; 22121:     view->scroll_pointer = y_offset;

	mov	eax, DWORD PTR _view$[ebp]
	mov	ecx, DWORD PTR _y_offset$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 22122: 
; 22123:     *y_offset = 0;

	mov	eax, DWORD PTR _y_offset$[ebp]
	mov	DWORD PTR [eax], 0

; 22124:     result = nk_group_scrolled_offset_begin(ctx, x_offset, y_offset, title, flags);

	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_offset$[ebp]
	push	edx
	mov	eax, DWORD PTR _x_offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_group_scrolled_offset_begin
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax

; 22125:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 22126:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 22127: 
; 22128:     view->total_height = row_height * NK_MAX(row_count,1);

	cmp	DWORD PTR _row_count$[ebp], 1
	jge	SHORT $LN16@nk_list_vi
	mov	DWORD PTR tv177[ebp], 1
	jmp	SHORT $LN17@nk_list_vi
$LN16@nk_list_vi:
	mov	eax, DWORD PTR _row_count$[ebp]
	mov	DWORD PTR tv177[ebp], eax
$LN17@nk_list_vi:
	mov	ecx, DWORD PTR _row_height$[ebp]
	imul	ecx, DWORD PTR tv177[ebp]
	mov	edx, DWORD PTR _view$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 22129:     view->begin = (int)NK_MAX(((float)view->scroll_value / (float)row_height), 0.0f);

	mov	eax, DWORD PTR _view$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv279[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv279[ebp]
	mov	edx, DWORD PTR tv279[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv283[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv283[ebp]
	cvtsi2ss xmm1, DWORD PTR _row_height$[ebp]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN18@nk_list_vi
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv193[ebp], xmm0
	jmp	SHORT $LN19@nk_list_vi
$LN18@nk_list_vi:
	mov	eax, DWORD PTR _view$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv291[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv291[ebp]
	mov	edx, DWORD PTR tv291[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv295[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv295[ebp]
	cvtsi2ss xmm1, DWORD PTR _row_height$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR tv193[ebp], xmm0
$LN19@nk_list_vi:
	cvttss2si eax, DWORD PTR tv193[ebp]
	mov	ecx, DWORD PTR _view$[ebp]
	mov	DWORD PTR [ecx], eax

; 22130:     view->count = (int)NK_MAX(nk_iceilf((layout->clip.h)/(float)row_height), 0);

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+72]
	cvtsi2ss xmm1, DWORD PTR _row_height$[ebp]
	divss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_iceilf
	add	esp, 4
	test	eax, eax
	jge	SHORT $LN20@nk_list_vi
	mov	DWORD PTR tv209[ebp], 0
	jmp	SHORT $LN21@nk_list_vi
$LN20@nk_list_vi:
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [ecx+72]
	cvtsi2ss xmm1, DWORD PTR _row_height$[ebp]
	divss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_iceilf
	add	esp, 4
	mov	DWORD PTR tv209[ebp], eax
$LN21@nk_list_vi:
	mov	edx, DWORD PTR _view$[ebp]
	mov	eax, DWORD PTR tv209[ebp]
	mov	DWORD PTR [edx+8], eax

; 22131:     view->end = view->begin + view->count;

	mov	eax, DWORD PTR _view$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _view$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _view$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 22132:     view->ctx = ctx;

	mov	eax, DWORD PTR _view$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 22133:     return result;

	mov	eax, DWORD PTR _result$[ebp]
$LN7@nk_list_vi:

; 22134: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@nk_list_vi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN24@nk_list_vi:
	DD	1
	DD	$LN23@nk_list_vi
$LN23@nk_list_vi:
	DD	-108					; ffffff94H
	DD	8
	DD	$LN22@nk_list_vi
$LN22@nk_list_vi:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
_nk_list_view_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_group_end
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_group_end PROC					; COMDAT

; 22080: {nk_group_scrolled_end(ctx);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_group_scrolled_end
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_group_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_group_scrolled_end
_TEXT	SEGMENT
_panel_padding$ = -472					; size = 8
_pan$ = -456						; size = 388
_clip$ = -60						; size = 16
_g$ = -36						; size = 4
_parent$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_nk_group_scrolled_end PROC				; COMDAT

; 21979: {

	push	ebp
	mov	ebp, esp
	sub	esp, 668				; 0000029cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-668]
	mov	ecx, 167				; 000000a7H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21980:     struct nk_window *win;
; 21981:     struct nk_panel *parent;
; 21982:     struct nk_panel *g;
; 21983: 
; 21984:     struct nk_rect clip;
; 21985:     struct nk_window pan;
; 21986:     struct nk_vec2 panel_padding;
; 21987: 
; 21988:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_group_s
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_group_scrolled_end@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_group_s:

; 21989:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_group_s
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_group_scrolled_end@@9@9
	add	ecx, 10					; 0000000aH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_group_s:

; 21990:     if (!ctx || !ctx->current)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_group_s
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN4@nk_group_s
$LN3@nk_group_s:

; 21991:         return;

	jmp	$LN5@nk_group_s
$LN4@nk_group_s:

; 21992: 
; 21993:     /* make sure nk_group_begin was called correctly */
; 21994:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN9@nk_group_s
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_group_scrolled_end@@9@9
	add	ecx, 15					; 0000000fH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_group_s:

; 21995:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 21996:     NK_ASSERT(win->layout);

	mov	eax, DWORD PTR _win$[ebp]
	cmp	DWORD PTR [eax+140], 0
	jne	SHORT $LN10@nk_group_s
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_group_scrolled_end@@9@9
	add	ecx, 17					; 00000011H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BI@MGIMHMOI@?$AAw?$AAi?$AAn?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_group_s:

; 21997:     g = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _g$[ebp], ecx

; 21998:     NK_ASSERT(g->parent);

	mov	eax, DWORD PTR _g$[ebp]
	cmp	DWORD PTR [eax+408], 0
	jne	SHORT $LN11@nk_group_s
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_group_scrolled_end@@9@9
	add	ecx, 19					; 00000013H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BE@KEJBMHNG@?$AAg?$AA?9?$AA?$DO?$AAp?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_group_s:

; 21999:     parent = g->parent;

	mov	eax, DWORD PTR _g$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	mov	DWORD PTR _parent$[ebp], ecx

; 22000: 
; 22001:     /* dummy window */
; 22002:     nk_zero_struct(pan);

	push	388					; 00000184H
	lea	eax, DWORD PTR _pan$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 22003:     panel_padding = nk_panel_get_padding(&ctx->style, NK_PANEL_GROUP);

	push	2
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	push	eax
	call	_nk_panel_get_padding
	add	esp, 8
	mov	DWORD PTR _panel_padding$[ebp], eax
	mov	DWORD PTR _panel_padding$[ebp+4], edx

; 22004:     pan.bounds.y = g->bounds.y - (g->header_height + g->menu.h);

	mov	eax, DWORD PTR _g$[ebp]
	mov	ecx, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR [eax+48]
	addss	xmm0, DWORD PTR [ecx+88]
	mov	edx, DWORD PTR _g$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _pan$[ebp+80], xmm1

; 22005:     pan.bounds.x = g->bounds.x - panel_padding.x;

	mov	eax, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR _panel_padding$[ebp]
	movss	DWORD PTR _pan$[ebp+76], xmm0

; 22006:     pan.bounds.w = g->bounds.w + 2 * panel_padding.x;

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _panel_padding$[ebp]
	mov	eax, DWORD PTR _g$[ebp]
	addss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR _pan$[ebp+84], xmm0

; 22007:     pan.bounds.h = g->bounds.h + g->header_height + g->menu.h;

	mov	eax, DWORD PTR _g$[ebp]
	mov	ecx, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	addss	xmm0, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _g$[ebp]
	addss	xmm0, DWORD PTR [edx+88]
	movss	DWORD PTR _pan$[ebp+88], xmm0

; 22008:     if (g->flags & NK_WINDOW_BORDER) {

	mov	eax, DWORD PTR _g$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 1
	je	SHORT $LN2@nk_group_s

; 22009:         pan.bounds.x -= g->border;

	mov	eax, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR _pan$[ebp+76]
	subss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR _pan$[ebp+76], xmm0

; 22010:         pan.bounds.y -= g->border;

	mov	eax, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR _pan$[ebp+80]
	subss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR _pan$[ebp+80], xmm0

; 22011:         pan.bounds.w += 2*g->border;

	mov	eax, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+52]
	addss	xmm0, DWORD PTR _pan$[ebp+84]
	movss	DWORD PTR _pan$[ebp+84], xmm0

; 22012:         pan.bounds.h += 2*g->border;

	mov	eax, DWORD PTR _g$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+52]
	addss	xmm0, DWORD PTR _pan$[ebp+88]
	movss	DWORD PTR _pan$[ebp+88], xmm0
$LN2@nk_group_s:

; 22013:     }
; 22014:     if (!(g->flags & NK_WINDOW_NO_SCROLLBAR)) {

	mov	eax, DWORD PTR _g$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32					; 00000020H
	jne	SHORT $LN1@nk_group_s

; 22015:         pan.bounds.w += ctx->style.window.scrollbar_size.x;

	mov	eax, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR _pan$[ebp+84]
	addss	xmm0, DWORD PTR [eax+5676]
	movss	DWORD PTR _pan$[ebp+84], xmm0

; 22016:         pan.bounds.h += ctx->style.window.scrollbar_size.y;

	mov	eax, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR _pan$[ebp+88]
	addss	xmm0, DWORD PTR [eax+5680]
	movss	DWORD PTR _pan$[ebp+88], xmm0
$LN1@nk_group_s:

; 22017:     }
; 22018:     pan.scrollbar.x = *g->offset_x;

	mov	eax, DWORD PTR _g$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pan$[ebp+92], edx

; 22019:     pan.scrollbar.y = *g->offset_y;

	mov	eax, DWORD PTR _g$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pan$[ebp+96], edx

; 22020:     pan.flags = g->flags;

	mov	eax, DWORD PTR _g$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _pan$[ebp+72], ecx

; 22021:     pan.buffer = win->buffer;

	mov	esi, DWORD PTR _win$[ebp]
	add	esi, 100				; 00000064H
	mov	ecx, 10					; 0000000aH
	lea	edi, DWORD PTR _pan$[ebp+100]
	rep movsd

; 22022:     pan.layout = g;

	mov	eax, DWORD PTR _g$[ebp]
	mov	DWORD PTR _pan$[ebp+140], eax

; 22023:     pan.parent = win;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR _pan$[ebp+384], eax

; 22024:     ctx->current = &pan;

	mov	eax, DWORD PTR _ctx$[ebp]
	lea	ecx, DWORD PTR _pan$[ebp]
	mov	DWORD PTR [eax+12940], ecx

; 22025: 
; 22026:     /* make sure group has correct clipping rectangle */
; 22027:     nk_unify(&clip, &parent->clip, pan.bounds.x, pan.bounds.y,
; 22028:         pan.bounds.x + pan.bounds.w, pan.bounds.y + pan.bounds.h + panel_padding.x);

	movss	xmm0, DWORD PTR _pan$[ebp+80]
	addss	xmm0, DWORD PTR _pan$[ebp+88]
	addss	xmm0, DWORD PTR _panel_padding$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pan$[ebp+76]
	addss	xmm0, DWORD PTR _pan$[ebp+84]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pan$[ebp+80]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pan$[ebp+76]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _parent$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	lea	ecx, DWORD PTR _clip$[ebp]
	push	ecx
	call	_nk_unify
	add	esp, 24					; 00000018H

; 22029:     nk_push_scissor(&pan.buffer, clip);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _clip$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _clip$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _clip$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _clip$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	lea	eax, DWORD PTR _pan$[ebp+100]
	push	eax
	call	_nk_push_scissor
	add	esp, 20					; 00000014H

; 22030:     nk_end(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_end
	add	esp, 4

; 22031: 
; 22032:     win->buffer = pan.buffer;

	mov	edi, DWORD PTR _win$[ebp]
	add	edi, 100				; 00000064H
	mov	ecx, 10					; 0000000aH
	lea	esi, DWORD PTR _pan$[ebp+100]
	rep movsd

; 22033:     nk_push_scissor(&win->buffer, parent->clip);

	mov	eax, DWORD PTR _parent$[ebp]
	add	eax, 60					; 0000003cH
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	_nk_push_scissor
	add	esp, 20					; 00000014H

; 22034:     ctx->current = win;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+12940], ecx

; 22035:     win->layout = parent;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _parent$[ebp]
	mov	DWORD PTR [eax+140], ecx

; 22036:     g->bounds = pan.bounds;

	mov	eax, DWORD PTR _g$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR _pan$[ebp+76]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _pan$[ebp+80]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _pan$[ebp+84]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _pan$[ebp+88]
	mov	DWORD PTR [eax+12], edx
$LN5@nk_group_s:

; 22037:     return;
; 22038: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@nk_group_s
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 668				; 0000029cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@nk_group_s:
	DD	3
	DD	$LN15@nk_group_s
$LN15@nk_group_s:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN12@nk_group_s
	DD	-456					; fffffe38H
	DD	388					; 00000184H
	DD	$LN13@nk_group_s
	DD	-472					; fffffe28H
	DD	8
	DD	$LN14@nk_group_s
$LN14@nk_group_s:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN13@nk_group_s:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	0
$LN12@nk_group_s:
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	0
_nk_group_scrolled_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_group_scrolled_begin
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_scroll$ = 12						; size = 4
_title$ = 16						; size = 4
_flags$ = 20						; size = 4
_nk_group_scrolled_begin PROC				; COMDAT

; 22043: {return nk_group_scrolled_offset_begin(ctx, &scroll->x, &scroll->y, title, flags);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scroll$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _scroll$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_group_scrolled_offset_begin
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_group_scrolled_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_group_scrolled_offset_begin
_TEXT	SEGMENT
tv136 = -656						; size = 4
_f$1 = -456						; size = 4
_c$2 = -444						; size = 4
_win$ = -432						; size = 4
_panel$ = -420						; size = 388
_bounds$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_x_offset$ = 12						; size = 4
_y_offset$ = 16						; size = 4
_title$ = 20						; size = 4
_flags$ = 24						; size = 4
_nk_group_scrolled_offset_begin PROC			; COMDAT

; 21930: {

	push	ebp
	mov	ebp, esp
	sub	esp, 656				; 00000290H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-656]
	mov	ecx, 164				; 000000a4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 21931:     struct nk_rect bounds;
; 21932:     struct nk_window panel;
; 21933:     struct nk_window *win;
; 21934: 
; 21935:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 21936:     nk_panel_alloc_space(&bounds, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$[ebp]
	push	ecx
	call	_nk_panel_alloc_space
	add	esp, 8

; 21937:     {const struct nk_rect *c = &win->layout->clip;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	add	ecx, 60					; 0000003cH
	mov	DWORD PTR _c$2[ebp], ecx

; 21938:     if (!NK_INTERSECT(c->x, c->y, c->w, c->h, bounds.x, bounds.y, bounds.w, bounds.h) &&
; 21939:         !(flags & NK_WINDOW_MOVABLE)) {

	mov	eax, DWORD PTR _c$2[ebp]
	mov	ecx, DWORD PTR _c$2[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR _bounds$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN6@nk_group_s
	movss	xmm0, DWORD PTR _bounds$[ebp]
	addss	xmm0, DWORD PTR _bounds$[ebp+8]
	mov	eax, DWORD PTR _c$2[ebp]
	movss	xmm1, DWORD PTR [eax]
	comiss	xmm1, xmm0
	ja	SHORT $LN6@nk_group_s
	mov	eax, DWORD PTR _c$2[ebp]
	mov	ecx, DWORD PTR _c$2[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	xmm1, DWORD PTR _bounds$[ebp+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN6@nk_group_s
	movss	xmm0, DWORD PTR _bounds$[ebp+4]
	addss	xmm0, DWORD PTR _bounds$[ebp+12]
	mov	eax, DWORD PTR _c$2[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	comiss	xmm1, xmm0
	jbe	SHORT $LN7@nk_group_s
$LN6@nk_group_s:
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 2
	jne	SHORT $LN7@nk_group_s

; 21940:         return 0;

	xor	eax, eax
	jmp	$LN8@nk_group_s
$LN7@nk_group_s:

; 21941:     }}
; 21942:     if (win->flags & NK_WINDOW_ROM)

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 4096				; 00001000H
	je	SHORT $LN5@nk_group_s

; 21943:         flags |= NK_WINDOW_ROM;

	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 4096				; 00001000H
	mov	DWORD PTR _flags$[ebp], eax
$LN5@nk_group_s:

; 21944: 
; 21945:     /* initialize a fake window to create the panel from */
; 21946:     nk_zero(&panel, sizeof(panel));

	push	388					; 00000184H
	lea	eax, DWORD PTR _panel$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 21947:     panel.bounds = bounds;

	mov	eax, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR _panel$[ebp+76], eax
	mov	ecx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR _panel$[ebp+80], ecx
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR _panel$[ebp+84], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR _panel$[ebp+88], eax

; 21948:     panel.flags = flags;

	mov	eax, DWORD PTR _flags$[ebp]
	mov	DWORD PTR _panel$[ebp+72], eax

; 21949:     panel.scrollbar.x = *x_offset;

	mov	eax, DWORD PTR _x_offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _panel$[ebp+92], ecx

; 21950:     panel.scrollbar.y = *y_offset;

	mov	eax, DWORD PTR _y_offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _panel$[ebp+96], ecx

; 21951:     panel.buffer = win->buffer;

	mov	esi, DWORD PTR _win$[ebp]
	add	esi, 100				; 00000064H
	mov	ecx, 10					; 0000000aH
	lea	edi, DWORD PTR _panel$[ebp+100]
	rep movsd

; 21952:     panel.layout = (struct nk_panel*)nk_create_panel(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_create_panel
	add	esp, 4
	mov	DWORD PTR _panel$[ebp+140], eax

; 21953:     ctx->current = &panel;

	mov	eax, DWORD PTR _ctx$[ebp]
	lea	ecx, DWORD PTR _panel$[ebp]
	mov	DWORD PTR [eax+12940], ecx

; 21954:     nk_panel_begin(ctx, (flags & NK_WINDOW_TITLE) ? title: 0, NK_PANEL_GROUP);

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 64					; 00000040H
	je	SHORT $LN10@nk_group_s
	mov	ecx, DWORD PTR _title$[ebp]
	mov	DWORD PTR tv136[ebp], ecx
	jmp	SHORT $LN11@nk_group_s
$LN10@nk_group_s:
	mov	DWORD PTR tv136[ebp], 0
$LN11@nk_group_s:
	push	2
	mov	edx, DWORD PTR tv136[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_panel_begin
	add	esp, 12					; 0000000cH

; 21955: 
; 21956:     win->buffer = panel.buffer;

	mov	edi, DWORD PTR _win$[ebp]
	add	edi, 100				; 00000064H
	mov	ecx, 10					; 0000000aH
	lea	esi, DWORD PTR _panel$[ebp+100]
	rep movsd

; 21957:     win->buffer.clip = panel.layout->clip;

	mov	eax, DWORD PTR _panel$[ebp+140]
	add	eax, 60					; 0000003cH
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 104				; 00000068H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 21958:     panel.layout->offset_x = x_offset;

	mov	eax, DWORD PTR _panel$[ebp+140]
	mov	ecx, DWORD PTR _x_offset$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 21959:     panel.layout->offset_y = y_offset;

	mov	eax, DWORD PTR _panel$[ebp+140]
	mov	ecx, DWORD PTR _y_offset$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 21960:     panel.layout->parent = win->layout;

	mov	eax, DWORD PTR _panel$[ebp+140]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR [eax+408], edx

; 21961:     win->layout = panel.layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _panel$[ebp+140]
	mov	DWORD PTR [eax+140], ecx

; 21962: 
; 21963:     ctx->current = win;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+12940], ecx

; 21964:     if ((panel.layout->flags & NK_WINDOW_CLOSED) ||
; 21965:         (panel.layout->flags & NK_WINDOW_MINIMIZED))

	mov	eax, DWORD PTR _panel$[ebp+140]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 16384				; 00004000H
	jne	SHORT $LN3@nk_group_s
	mov	eax, DWORD PTR _panel$[ebp+140]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN1@nk_group_s
$LN3@nk_group_s:

; 21966:     {
; 21967:         nk_flags f = panel.layout->flags;

	mov	eax, DWORD PTR _panel$[ebp+140]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _f$1[ebp], ecx

; 21968:         nk_group_scrolled_end(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_group_scrolled_end
	add	esp, 4

; 21969:         if (f & NK_WINDOW_CLOSED)

	mov	eax, DWORD PTR _f$1[ebp]
	and	eax, 16384				; 00004000H
	je	SHORT $LN2@nk_group_s

; 21970:             return NK_WINDOW_CLOSED;

	mov	eax, 16384				; 00004000H
	jmp	SHORT $LN8@nk_group_s
$LN2@nk_group_s:

; 21971:         if (f & NK_WINDOW_MINIMIZED)

	mov	eax, DWORD PTR _f$1[ebp]
	and	eax, 32768				; 00008000H
	je	SHORT $LN1@nk_group_s

; 21972:             return NK_WINDOW_MINIMIZED;

	mov	eax, 32768				; 00008000H
	jmp	SHORT $LN8@nk_group_s
$LN1@nk_group_s:

; 21973:     }
; 21974:     return 1;

	mov	eax, 1
$LN8@nk_group_s:

; 21975: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@nk_group_s
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 656				; 00000290H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN15@nk_group_s:
	DD	2
	DD	$LN14@nk_group_s
$LN14@nk_group_s:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN12@nk_group_s
	DD	-420					; fffffe5cH
	DD	388					; 00000184H
	DD	$LN13@nk_group_s
$LN13@nk_group_s:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN12@nk_group_s:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_group_scrolled_offset_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_group_begin
_TEXT	SEGMENT
_y_offset$ = -56					; size = 4
_x_offset$ = -44					; size = 4
_win$ = -32						; size = 4
_title_hash$ = -20					; size = 4
_title_len$ = -8					; size = 4
_ctx$ = 8						; size = 4
_title$ = 12						; size = 4
_flags$ = 16						; size = 4
_nk_group_begin PROC					; COMDAT

; 22047: {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 22048:     int title_len;
; 22049:     nk_hash title_hash;
; 22050:     struct nk_window *win;
; 22051:     nk_uint *x_offset;
; 22052:     nk_uint *y_offset;
; 22053: 
; 22054:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN9@nk_group_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_group_begin@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_group_b:

; 22055:     NK_ASSERT(title);

	cmp	DWORD PTR _title$[ebp], 0
	jne	SHORT $LN10@nk_group_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_group_begin@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@NFEAPLNL@?$AAt?$AAi?$AAt?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_group_b:

; 22056:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN11@nk_group_b
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_group_begin@@9@9
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_group_b:

; 22057:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN12@nk_group_b
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_group_begin@@9@9
	add	edx, 10					; 0000000aH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_group_b:

; 22058:     if (!ctx || !ctx->current || !ctx->current->layout || !title)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN5@nk_group_b
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN5@nk_group_b
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN5@nk_group_b
	cmp	DWORD PTR _title$[ebp], 0
	jne	SHORT $LN6@nk_group_b
$LN5@nk_group_b:

; 22059:         return 0;

	xor	eax, eax
	jmp	$LN7@nk_group_b
$LN6@nk_group_b:

; 22060: 
; 22061:     /* find persistent group scrollbar value */
; 22062:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 22063:     title_len = (int)nk_strlen(title);

	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _title_len$[ebp], eax

; 22064:     title_hash = nk_murmur_hash(title, (int)title_len, NK_PANEL_GROUP);

	push	2
	mov	eax, DWORD PTR _title_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	call	_nk_murmur_hash
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _title_hash$[ebp], eax

; 22065:     x_offset = nk_find_value(win, title_hash);

	mov	eax, DWORD PTR _title_hash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	call	_nk_find_value
	add	esp, 8
	mov	DWORD PTR _x_offset$[ebp], eax

; 22066:     if (!x_offset) {

	cmp	DWORD PTR _x_offset$[ebp], 0
	jne	$LN4@nk_group_b

; 22067:         x_offset = nk_add_value(ctx, win, title_hash, 0);

	push	0
	mov	eax, DWORD PTR _title_hash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_add_value
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x_offset$[ebp], eax

; 22068:         y_offset = nk_add_value(ctx, win, title_hash+1, 0);

	push	0
	mov	eax, DWORD PTR _title_hash$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_add_value
	add	esp, 16					; 00000010H
	mov	DWORD PTR _y_offset$[ebp], eax

; 22069: 
; 22070:         NK_ASSERT(x_offset);

	cmp	DWORD PTR _x_offset$[ebp], 0
	jne	SHORT $LN13@nk_group_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_group_begin@@9@9
	add	eax, 23					; 00000017H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BC@FPAKBMPJ@?$AAx?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_group_b:

; 22071:         NK_ASSERT(y_offset);

	cmp	DWORD PTR _y_offset$[ebp], 0
	jne	SHORT $LN14@nk_group_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_group_begin@@9@9
	add	eax, 24					; 00000018H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BC@LAFIKKBI@?$AAy?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_group_b:

; 22072:         if (!x_offset || !y_offset) return 0;

	cmp	DWORD PTR _x_offset$[ebp], 0
	je	SHORT $LN2@nk_group_b
	cmp	DWORD PTR _y_offset$[ebp], 0
	jne	SHORT $LN3@nk_group_b
$LN2@nk_group_b:
	xor	eax, eax
	jmp	SHORT $LN7@nk_group_b
$LN3@nk_group_b:

; 22073:         *x_offset = *y_offset = 0;

	mov	eax, DWORD PTR _y_offset$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _x_offset$[ebp]
	mov	DWORD PTR [ecx], 0
	jmp	SHORT $LN1@nk_group_b
$LN4@nk_group_b:

; 22074:     } else y_offset = nk_find_value(win, title_hash+1);

	mov	eax, DWORD PTR _title_hash$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	call	_nk_find_value
	add	esp, 8
	mov	DWORD PTR _y_offset$[ebp], eax
$LN1@nk_group_b:

; 22075:     return nk_group_scrolled_offset_begin(ctx, x_offset, y_offset, title, flags);

	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_offset$[ebp]
	push	edx
	mov	eax, DWORD PTR _x_offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_group_scrolled_offset_begin
	add	esp, 20					; 00000014H
$LN7@nk_group_b:

; 22076: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_group_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_space_rect_to_local
_TEXT	SEGMENT
tv166 = -228						; size = 8
tv153 = -228						; size = 8
tv162 = -220						; size = 4
tv149 = -220						; size = 4
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
$T1 = 8							; size = 4
_ctx$ = 12						; size = 4
_ret$ = 16						; size = 16
_nk_layout_space_rect_to_local PROC			; COMDAT

; 19692: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19693:     struct nk_window *win;
; 19694:     struct nk_panel *layout;
; 19695: 
; 19696:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN3@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_space_rect_to_local@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@nk_layout_:

; 19697:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN4@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_space_rect_to_local@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_layout_:

; 19698:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN5@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_space_rect_to_local@@9@9
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_layout_:

; 19699:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19700:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19701: 
; 19702:     ret.x += -layout->at_x + (float)*layout->offset_x;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv149[ebp], eax
	cvtsi2sd xmm1, DWORD PTR tv149[ebp]
	mov	ecx, DWORD PTR tv149[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv153[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv153[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _ret$[ebp]
	movss	DWORD PTR _ret$[ebp], xmm0

; 19703:     ret.y += -layout->at_y + (float)*layout->offset_y;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv162[ebp], eax
	cvtsi2sd xmm1, DWORD PTR tv162[ebp]
	mov	ecx, DWORD PTR tv162[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv166[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv166[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _ret$[ebp+4]
	movss	DWORD PTR _ret$[ebp+4], xmm0

; 19704:     return ret;

	mov	eax, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _ret$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _ret$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _ret$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T1[ebp]

; 19705: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_space_rect_to_local ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_space_rect_to_screen
_TEXT	SEGMENT
tv162 = -228						; size = 8
tv149 = -228						; size = 8
tv158 = -220						; size = 4
tv145 = -220						; size = 4
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
$T1 = 8							; size = 4
_ctx$ = 12						; size = 4
_ret$ = 16						; size = 16
_nk_layout_space_rect_to_screen PROC			; COMDAT

; 19675: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19676:     struct nk_window *win;
; 19677:     struct nk_panel *layout;
; 19678: 
; 19679:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN3@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_space_rect_to_screen@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@nk_layout_:

; 19680:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN4@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_space_rect_to_screen@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_layout_:

; 19681:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN5@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_space_rect_to_screen@@9@9
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_layout_:

; 19682:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19683:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19684: 
; 19685:     ret.x += layout->at_x - (float)*layout->offset_x;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv145[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv145[ebp]
	mov	eax, DWORD PTR tv145[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv149[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv149[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	subss	xmm1, xmm0
	addss	xmm1, DWORD PTR _ret$[ebp]
	movss	DWORD PTR _ret$[ebp], xmm1

; 19686:     ret.y += layout->at_y - (float)*layout->offset_y;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv158[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv158[ebp]
	mov	eax, DWORD PTR tv158[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv162[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv162[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm1, DWORD PTR [ecx+36]
	subss	xmm1, xmm0
	addss	xmm1, DWORD PTR _ret$[ebp+4]
	movss	DWORD PTR _ret$[ebp+4], xmm1

; 19687:     return ret;

	mov	eax, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _ret$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _ret$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _ret$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T1[ebp]

; 19688: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_space_rect_to_screen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_space_to_local
_TEXT	SEGMENT
tv166 = -228						; size = 8
tv153 = -228						; size = 8
tv162 = -220						; size = 4
tv149 = -220						; size = 4
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_ret$ = 12						; size = 8
_nk_layout_space_to_local PROC				; COMDAT

; 19658: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19659:     struct nk_window *win;
; 19660:     struct nk_panel *layout;
; 19661: 
; 19662:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN3@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_space_to_local@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@nk_layout_:

; 19663:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN4@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_space_to_local@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_layout_:

; 19664:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN5@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_space_to_local@@9@9
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_layout_:

; 19665:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19666:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19667: 
; 19668:     ret.x += -layout->at_x + (float)*layout->offset_x;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv149[ebp], eax
	cvtsi2sd xmm1, DWORD PTR tv149[ebp]
	mov	ecx, DWORD PTR tv149[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv153[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv153[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _ret$[ebp]
	movss	DWORD PTR _ret$[ebp], xmm0

; 19669:     ret.y += -layout->at_y + (float)*layout->offset_y;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _layout$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv162[ebp], eax
	cvtsi2sd xmm1, DWORD PTR tv162[ebp]
	mov	ecx, DWORD PTR tv162[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv166[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv166[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _ret$[ebp+4]
	movss	DWORD PTR _ret$[ebp+4], xmm0

; 19670:     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _ret$[ebp+4]

; 19671: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_space_to_local ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_space_to_screen
_TEXT	SEGMENT
tv162 = -228						; size = 8
tv149 = -228						; size = 8
tv158 = -220						; size = 4
tv145 = -220						; size = 4
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_ret$ = 12						; size = 8
_nk_layout_space_to_screen PROC				; COMDAT

; 19641: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19642:     struct nk_window *win;
; 19643:     struct nk_panel *layout;
; 19644: 
; 19645:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN3@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_space_to_screen@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@nk_layout_:

; 19646:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN4@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_space_to_screen@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_layout_:

; 19647:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN5@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_space_to_screen@@9@9
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_layout_:

; 19648:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19649:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19650: 
; 19651:     ret.x += layout->at_x - (float)*layout->offset_x;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv145[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv145[ebp]
	mov	eax, DWORD PTR tv145[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv149[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv149[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	subss	xmm1, xmm0
	addss	xmm1, DWORD PTR _ret$[ebp]
	movss	DWORD PTR _ret$[ebp], xmm1

; 19652:     ret.y += layout->at_y - (float)*layout->offset_y;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv158[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv158[ebp]
	mov	eax, DWORD PTR tv158[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv162[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv162[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm1, DWORD PTR [ecx+36]
	subss	xmm1, xmm0
	addss	xmm1, DWORD PTR _ret$[ebp+4]
	movss	DWORD PTR _ret$[ebp+4], xmm1

; 19653:     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _ret$[ebp+4]

; 19654: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_space_to_screen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_space_bounds
_TEXT	SEGMENT
_layout$ = -48						; size = 4
_win$ = -36						; size = 4
_ret$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_ctx$ = 12						; size = 4
_nk_layout_space_bounds PROC				; COMDAT

; 19601: {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 19602:     struct nk_rect ret;
; 19603:     struct nk_window *win;
; 19604:     struct nk_panel *layout;
; 19605: 
; 19606:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN3@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_space_bounds@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@nk_layout_:

; 19607:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN4@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_space_bounds@@9@9
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_layout_:

; 19608:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN5@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_space_bounds@@9@9
	add	edx, 7
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_layout_:

; 19609:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19610:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19611: 
; 19612:     ret.x = layout->clip.x;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+60]
	movss	DWORD PTR _ret$[ebp], xmm0

; 19613:     ret.y = layout->clip.y;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+64]
	movss	DWORD PTR _ret$[ebp+4], xmm0

; 19614:     ret.w = layout->clip.w;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+68]
	movss	DWORD PTR _ret$[ebp+8], xmm0

; 19615:     ret.h = layout->row.height;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+108]
	movss	DWORD PTR _ret$[ebp+12], xmm0

; 19616:     return ret;

	mov	eax, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _ret$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _ret$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _ret$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T1[ebp]

; 19617: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@nk_layout_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@nk_layout_:
	DD	1
	DD	$LN7@nk_layout_
$LN7@nk_layout_:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN6@nk_layout_
$LN6@nk_layout_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_nk_layout_space_bounds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_space_end
_TEXT	SEGMENT
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_layout_space_end PROC				; COMDAT

; 19564: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19565:     struct nk_window *win;
; 19566:     struct nk_panel *layout;
; 19567: 
; 19568:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_space_end@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_layout_:

; 19569:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_space_end@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_layout_:

; 19570:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN7@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_space_end@@9@9
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_layout_:

; 19571:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN1@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN2@nk_layout_
$LN1@nk_layout_:

; 19572:         return;

	jmp	SHORT $LN3@nk_layout_
$LN2@nk_layout_:

; 19573: 
; 19574:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19575:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19576:     layout->row.item_width = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+124], xmm0

; 19577:     layout->row.item_height = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+128], xmm0

; 19578:     layout->row.item_offset = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+132], xmm0

; 19579:     nk_zero(&layout->row.item, sizeof(layout->row.item));

	push	16					; 00000010H
	mov	eax, DWORD PTR _layout$[ebp]
	add	eax, 140				; 0000008cH
	push	eax
	call	_nk_zero
	add	esp, 8
$LN3@nk_layout_:

; 19580: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_space_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_space_push
_TEXT	SEGMENT
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_rect$ = 12						; size = 16
_nk_layout_space_push PROC				; COMDAT

; 19584: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19585:     struct nk_window *win;
; 19586:     struct nk_panel *layout;
; 19587: 
; 19588:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_space_push@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_layout_:

; 19589:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_space_push@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_layout_:

; 19590:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN7@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_space_push@@9@9
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_layout_:

; 19591:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN1@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN2@nk_layout_
$LN1@nk_layout_:

; 19592:         return;

	jmp	SHORT $LN3@nk_layout_
$LN2@nk_layout_:

; 19593: 
; 19594:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19595:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19596:     layout->row.item = rect;

	mov	eax, DWORD PTR _layout$[ebp]
	add	eax, 140				; 0000008cH
	mov	ecx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _rect$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR [eax+12], edx
$LN3@nk_layout_:

; 19597: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_space_push ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_space_begin
_TEXT	SEGMENT
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_fmt$ = 12						; size = 4
_height$ = 16						; size = 4
_widget_count$ = 20					; size = 4
_nk_layout_space_begin PROC				; COMDAT

; 19539: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19540:     struct nk_window *win;
; 19541:     struct nk_panel *layout;
; 19542: 
; 19543:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_space_begin@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_layout_:

; 19544:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_space_begin@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_layout_:

; 19545:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_space_begin@@9@9
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_layout_:

; 19546:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN4@nk_layout_
$LN3@nk_layout_:

; 19547:         return;

	jmp	$LN5@nk_layout_
$LN4@nk_layout_:

; 19548: 
; 19549:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19550:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19551:     nk_panel_layout(ctx, win, height, widget_count);

	mov	eax, DWORD PTR _widget_count$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_panel_layout
	add	esp, 16					; 00000010H

; 19552:     if (fmt == NK_STATIC)

	cmp	DWORD PTR _fmt$[ebp], 1
	jne	SHORT $LN2@nk_layout_

; 19553:         layout->row.type = NK_LAYOUT_STATIC_FREE;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [eax+100], 6
	jmp	SHORT $LN1@nk_layout_
$LN2@nk_layout_:

; 19554:     else layout->row.type = NK_LAYOUT_DYNAMIC_FREE;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [eax+100], 2
$LN1@nk_layout_:

; 19555: 
; 19556:     layout->row.ratio = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [eax+120], 0

; 19557:     layout->row.filled = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+136], xmm0

; 19558:     layout->row.item_width = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+124], xmm0

; 19559:     layout->row.item_offset = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+132], xmm0
$LN5@nk_layout_:

; 19560: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_space_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_row_template_end
_TEXT	SEGMENT
tv190 = -356						; size = 4
tv191 = -352						; size = 4
tv177 = -352						; size = 4
tv170 = -352						; size = 4
tv166 = -352						; size = 4
tv147 = -352						; size = 4
_width$1 = -152						; size = 4
_enough_space$2 = -140					; size = 4
_var_width$3 = -128					; size = 4
_space$4 = -116						; size = 4
_width$5 = -104						; size = 4
_max_variable_width$ = -92				; size = 4
_total_fixed_width$ = -80				; size = 4
_min_fixed_width$ = -68					; size = 4
_min_variable_count$ = -56				; size = 4
_variable_count$ = -44					; size = 4
_i$ = -32						; size = 4
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_layout_row_template_end PROC			; COMDAT

; 19486: {

	push	ebp
	mov	ebp, esp
	sub	esp, 356				; 00000164H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-356]
	mov	ecx, 89					; 00000059H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19487:     struct nk_window *win;
; 19488:     struct nk_panel *layout;
; 19489: 
; 19490:     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 19491:     int variable_count = 0;

	mov	DWORD PTR _variable_count$[ebp], 0

; 19492:     int min_variable_count = 0;

	mov	DWORD PTR _min_variable_count$[ebp], 0

; 19493:     float min_fixed_width = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _min_fixed_width$[ebp], xmm0

; 19494:     float total_fixed_width = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _total_fixed_width$[ebp], xmm0

; 19495:     float max_variable_width = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _max_variable_width$[ebp], xmm0

; 19496: 
; 19497:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN18@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_end@@9@9
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@nk_layout_:

; 19498:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN19@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_end@@9@9
	add	ecx, 12					; 0000000cH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@nk_layout_:

; 19499:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN20@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_end@@9@9
	add	edx, 13					; 0000000dH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN20@nk_layout_:

; 19500:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN14@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN14@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN15@nk_layout_
$LN14@nk_layout_:

; 19501:         return;

	jmp	$LN1@nk_layout_
$LN15@nk_layout_:

; 19502: 
; 19503:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19504:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19505:     NK_ASSERT(layout->row.type == NK_LAYOUT_TEMPLATE);

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+100], 8
	je	SHORT $LN21@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_end@@9@9
	add	ecx, 19					; 00000013H
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EO@MCBIGAOG@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAL?$AAA?$AAY?$AAO?$AAU?$AAT?$AA_?$AAT?$AAE@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN21@nk_layout_:

; 19506:     if (layout->row.type != NK_LAYOUT_TEMPLATE) return;

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+100], 8
	je	SHORT $LN13@nk_layout_
	jmp	$LN1@nk_layout_
$LN13@nk_layout_:

; 19507:     for (i = 0; i < layout->row.columns; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@nk_layout_
$LN11@nk_layout_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@nk_layout_:
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+116]
	jge	$LN10@nk_layout_

; 19508:         float width = layout->row.templates[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+160]
	movss	DWORD PTR _width$5[ebp], xmm0

; 19509:         if (width >= 0.0f) {

	movss	xmm0, DWORD PTR _width$5[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN9@nk_layout_

; 19510:             total_fixed_width += width;

	movss	xmm0, DWORD PTR _total_fixed_width$[ebp]
	addss	xmm0, DWORD PTR _width$5[ebp]
	movss	DWORD PTR _total_fixed_width$[ebp], xmm0

; 19511:             min_fixed_width += width;

	movss	xmm0, DWORD PTR _min_fixed_width$[ebp]
	addss	xmm0, DWORD PTR _width$5[ebp]
	movss	DWORD PTR _min_fixed_width$[ebp], xmm0
	jmp	SHORT $LN6@nk_layout_
$LN9@nk_layout_:

; 19512:         } else if (width < -1.0f) {

	movss	xmm0, DWORD PTR __real@bf800000
	comiss	xmm0, DWORD PTR _width$5[ebp]
	jbe	SHORT $LN7@nk_layout_

; 19513:             width = -width;

	movss	xmm0, DWORD PTR _width$5[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _width$5[ebp], xmm0

; 19514:             total_fixed_width += width;

	movss	xmm0, DWORD PTR _total_fixed_width$[ebp]
	addss	xmm0, DWORD PTR _width$5[ebp]
	movss	DWORD PTR _total_fixed_width$[ebp], xmm0

; 19515:             max_variable_width = NK_MAX(max_variable_width, width);

	movss	xmm0, DWORD PTR _width$5[ebp]
	comiss	xmm0, DWORD PTR _max_variable_width$[ebp]
	jbe	SHORT $LN22@nk_layout_
	movss	xmm0, DWORD PTR _width$5[ebp]
	movss	DWORD PTR tv147[ebp], xmm0
	jmp	SHORT $LN23@nk_layout_
$LN22@nk_layout_:
	movss	xmm0, DWORD PTR _max_variable_width$[ebp]
	movss	DWORD PTR tv147[ebp], xmm0
$LN23@nk_layout_:
	movss	xmm0, DWORD PTR tv147[ebp]
	movss	DWORD PTR _max_variable_width$[ebp], xmm0

; 19516:             variable_count++;

	mov	eax, DWORD PTR _variable_count$[ebp]
	add	eax, 1
	mov	DWORD PTR _variable_count$[ebp], eax

; 19517:         } else {

	jmp	SHORT $LN6@nk_layout_
$LN7@nk_layout_:

; 19518:             min_variable_count++;

	mov	eax, DWORD PTR _min_variable_count$[ebp]
	add	eax, 1
	mov	DWORD PTR _min_variable_count$[ebp], eax

; 19519:             variable_count++;

	mov	eax, DWORD PTR _variable_count$[ebp]
	add	eax, 1
	mov	DWORD PTR _variable_count$[ebp], eax
$LN6@nk_layout_:

; 19520:         }
; 19521:     }

	jmp	$LN11@nk_layout_
$LN10@nk_layout_:

; 19522:     if (variable_count) {

	cmp	DWORD PTR _variable_count$[ebp], 0
	je	$LN1@nk_layout_

; 19523:         float space = nk_layout_row_calculate_usable_space(&ctx->style, layout->type,
; 19524:                             layout->bounds.w, layout->row.columns);

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR _layout$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 360				; 00000168H
	push	edx
	call	_nk_layout_row_calculate_usable_space
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _space$4[ebp]

; 19525:         float var_width = (NK_MAX(space-min_fixed_width,0.0f)) / (float)variable_count;

	movss	xmm0, DWORD PTR _space$4[ebp]
	subss	xmm0, DWORD PTR _min_fixed_width$[ebp]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@nk_layout_
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv166[ebp], xmm0
	jmp	SHORT $LN25@nk_layout_
$LN24@nk_layout_:
	movss	xmm0, DWORD PTR _space$4[ebp]
	subss	xmm0, DWORD PTR _min_fixed_width$[ebp]
	movss	DWORD PTR tv166[ebp], xmm0
$LN25@nk_layout_:
	cvtsi2ss xmm0, DWORD PTR _variable_count$[ebp]
	movss	xmm1, DWORD PTR tv166[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _var_width$3[ebp], xmm1

; 19526:         int enough_space = var_width >= max_variable_width;

	movss	xmm0, DWORD PTR _var_width$3[ebp]
	comiss	xmm0, DWORD PTR _max_variable_width$[ebp]
	jb	SHORT $LN26@nk_layout_
	mov	DWORD PTR tv170[ebp], 1
	jmp	SHORT $LN27@nk_layout_
$LN26@nk_layout_:
	mov	DWORD PTR tv170[ebp], 0
$LN27@nk_layout_:
	mov	eax, DWORD PTR tv170[ebp]
	mov	DWORD PTR _enough_space$2[ebp], eax

; 19527:         if (!enough_space)

	cmp	DWORD PTR _enough_space$2[ebp], 0
	jne	SHORT $LN4@nk_layout_

; 19528:             var_width = (NK_MAX(space-total_fixed_width,0)) / (float)min_variable_count;

	movss	xmm0, DWORD PTR _space$4[ebp]
	subss	xmm0, DWORD PTR _total_fixed_width$[ebp]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN28@nk_layout_
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv177[ebp], xmm0
	jmp	SHORT $LN29@nk_layout_
$LN28@nk_layout_:
	movss	xmm0, DWORD PTR _space$4[ebp]
	subss	xmm0, DWORD PTR _total_fixed_width$[ebp]
	movss	DWORD PTR tv177[ebp], xmm0
$LN29@nk_layout_:
	cvtsi2ss xmm0, DWORD PTR _min_variable_count$[ebp]
	movss	xmm1, DWORD PTR tv177[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _var_width$3[ebp], xmm1
$LN4@nk_layout_:

; 19529:         for (i = 0; i < layout->row.columns; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_layout_
$LN2@nk_layout_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_layout_:
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+116]
	jge	$LN1@nk_layout_

; 19530:             float *width = &layout->row.templates[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+160]
	mov	DWORD PTR _width$1[ebp], edx

; 19531:             *width = (*width >= 0.0f)? *width: (*width < -1.0f && !enough_space)? -(*width): var_width;

	mov	eax, DWORD PTR _width$1[ebp]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN32@nk_layout_
	mov	ecx, DWORD PTR _width$1[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR tv191[ebp], xmm0
	jmp	SHORT $LN33@nk_layout_
$LN32@nk_layout_:
	mov	edx, DWORD PTR _width$1[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	comiss	xmm0, DWORD PTR [edx]
	jbe	SHORT $LN30@nk_layout_
	cmp	DWORD PTR _enough_space$2[ebp], 0
	jne	SHORT $LN30@nk_layout_
	mov	eax, DWORD PTR _width$1[ebp]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv190[ebp], xmm0
	jmp	SHORT $LN31@nk_layout_
$LN30@nk_layout_:
	movss	xmm0, DWORD PTR _var_width$3[ebp]
	movss	DWORD PTR tv190[ebp], xmm0
$LN31@nk_layout_:
	movss	xmm0, DWORD PTR tv190[ebp]
	movss	DWORD PTR tv191[ebp], xmm0
$LN33@nk_layout_:
	mov	ecx, DWORD PTR _width$1[ebp]
	movss	xmm0, DWORD PTR tv191[ebp]
	movss	DWORD PTR [ecx], xmm0

; 19532:         }

	jmp	$LN2@nk_layout_
$LN1@nk_layout_:

; 19533:     }
; 19534: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 356				; 00000164H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_row_template_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_row_template_push_static
_TEXT	SEGMENT
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_width$ = 12						; size = 4
_nk_layout_row_template_push_static PROC		; COMDAT

; 19465: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19466:     struct nk_window *win;
; 19467:     struct nk_panel *layout;
; 19468: 
; 19469:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_push_static@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_layout_:

; 19470:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_push_static@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_layout_:

; 19471:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_push_static@@9@9
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_layout_:

; 19472:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN4@nk_layout_
$LN3@nk_layout_:

; 19473:         return;

	jmp	$LN5@nk_layout_
$LN4@nk_layout_:

; 19474: 
; 19475:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19476:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19477:     NK_ASSERT(layout->row.type == NK_LAYOUT_TEMPLATE);

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+100], 8
	je	SHORT $LN10@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_push_static@@9@9
	add	ecx, 12					; 0000000cH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EO@MCBIGAOG@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAL?$AAA?$AAY?$AAO?$AAU?$AAT?$AA_?$AAT?$AAE@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_layout_:

; 19478:     NK_ASSERT(layout->row.columns < NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS);

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+116], 16			; 00000010H
	jl	SHORT $LN11@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_push_static@@9@9
	add	ecx, 13					; 0000000dH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1DC@ELAOKKAE@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?5?$AA?$DM?$AA?5?$AA1?$AA6?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_layout_:

; 19479:     if (layout->row.type != NK_LAYOUT_TEMPLATE) return;

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+100], 8
	je	SHORT $LN2@nk_layout_
	jmp	SHORT $LN5@nk_layout_
$LN2@nk_layout_:

; 19480:     if (layout->row.columns >= NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS) return;

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+116], 16			; 00000010H
	jl	SHORT $LN1@nk_layout_
	jmp	SHORT $LN5@nk_layout_
$LN1@nk_layout_:

; 19481:     layout->row.templates[layout->row.columns++] = width;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [edx+ecx*4+160], xmm0
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	add	ecx, 1
	mov	edx, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [edx+116], ecx
$LN5@nk_layout_:

; 19482: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_row_template_push_static ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_row_template_push_variable
_TEXT	SEGMENT
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_min_width$ = 12					; size = 4
_nk_layout_row_template_push_variable PROC		; COMDAT

; 19444: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19445:     struct nk_window *win;
; 19446:     struct nk_panel *layout;
; 19447: 
; 19448:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_push_variable@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_layout_:

; 19449:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_push_variable@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_layout_:

; 19450:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_push_variable@@9@9
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_layout_:

; 19451:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN4@nk_layout_
$LN3@nk_layout_:

; 19452:         return;

	jmp	$LN5@nk_layout_
$LN4@nk_layout_:

; 19453: 
; 19454:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19455:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19456:     NK_ASSERT(layout->row.type == NK_LAYOUT_TEMPLATE);

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+100], 8
	je	SHORT $LN10@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_push_variable@@9@9
	add	ecx, 12					; 0000000cH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EO@MCBIGAOG@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAL?$AAA?$AAY?$AAO?$AAU?$AAT?$AA_?$AAT?$AAE@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_layout_:

; 19457:     NK_ASSERT(layout->row.columns < NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS);

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+116], 16			; 00000010H
	jl	SHORT $LN11@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_push_variable@@9@9
	add	ecx, 13					; 0000000dH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1DC@ELAOKKAE@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?5?$AA?$DM?$AA?5?$AA1?$AA6?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_layout_:

; 19458:     if (layout->row.type != NK_LAYOUT_TEMPLATE) return;

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+100], 8
	je	SHORT $LN2@nk_layout_
	jmp	SHORT $LN5@nk_layout_
$LN2@nk_layout_:

; 19459:     if (layout->row.columns >= NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS) return;

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+116], 16			; 00000010H
	jl	SHORT $LN1@nk_layout_
	jmp	SHORT $LN5@nk_layout_
$LN1@nk_layout_:

; 19460:     layout->row.templates[layout->row.columns++] = -min_width;

	movss	xmm0, DWORD PTR _min_width$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [edx+ecx*4+160], xmm0
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	add	ecx, 1
	mov	edx, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [edx+116], ecx
$LN5@nk_layout_:

; 19461: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_row_template_push_variable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_row_template_push_dynamic
_TEXT	SEGMENT
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_layout_row_template_push_dynamic PROC		; COMDAT

; 19423: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19424:     struct nk_window *win;
; 19425:     struct nk_panel *layout;
; 19426: 
; 19427:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_push_dynamic@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_layout_:

; 19428:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_push_dynamic@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_layout_:

; 19429:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_push_dynamic@@9@9
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_layout_:

; 19430:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN4@nk_layout_
$LN3@nk_layout_:

; 19431:         return;

	jmp	$LN5@nk_layout_
$LN4@nk_layout_:

; 19432: 
; 19433:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19434:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19435:     NK_ASSERT(layout->row.type == NK_LAYOUT_TEMPLATE);

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+100], 8
	je	SHORT $LN10@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_push_dynamic@@9@9
	add	ecx, 12					; 0000000cH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1EO@MCBIGAOG@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAL?$AAA?$AAY?$AAO?$AAU?$AAT?$AA_?$AAT?$AAE@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_layout_:

; 19436:     NK_ASSERT(layout->row.columns < NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS);

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+116], 16			; 00000010H
	jl	SHORT $LN11@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_push_dynamic@@9@9
	add	ecx, 13					; 0000000dH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1DC@ELAOKKAE@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?5?$AA?$DM?$AA?5?$AA1?$AA6?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_layout_:

; 19437:     if (layout->row.type != NK_LAYOUT_TEMPLATE) return;

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+100], 8
	je	SHORT $LN2@nk_layout_
	jmp	SHORT $LN5@nk_layout_
$LN2@nk_layout_:

; 19438:     if (layout->row.columns >= NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS) return;

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+116], 16			; 00000010H
	jl	SHORT $LN1@nk_layout_
	jmp	SHORT $LN5@nk_layout_
$LN1@nk_layout_:

; 19439:     layout->row.templates[layout->row.columns++] = -1.0f;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [edx+ecx*4+160], xmm0
	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	add	ecx, 1
	mov	edx, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [edx+116], ecx
$LN5@nk_layout_:

; 19440: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_row_template_push_dynamic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_row_template_begin
_TEXT	SEGMENT
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_height$ = 12						; size = 4
_nk_layout_row_template_begin PROC			; COMDAT

; 19395: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19396:     struct nk_window *win;
; 19397:     struct nk_panel *layout;
; 19398: 
; 19399:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_begin@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_layout_:

; 19400:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_begin@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_layout_:

; 19401:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN7@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_template_begin@@9@9
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_layout_:

; 19402:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN1@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN2@nk_layout_
$LN1@nk_layout_:

; 19403:         return;

	jmp	$LN3@nk_layout_
$LN2@nk_layout_:

; 19404: 
; 19405:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19406:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19407:     nk_panel_layout(ctx, win, height, 1);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_panel_layout
	add	esp, 16					; 00000010H

; 19408:     layout->row.type = NK_LAYOUT_TEMPLATE;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [eax+100], 8

; 19409:     layout->row.columns = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [eax+116], 0

; 19410:     layout->row.ratio = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [eax+120], 0

; 19411:     layout->row.item_width = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+124], xmm0

; 19412:     layout->row.item_height = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+128], xmm0

; 19413:     layout->row.item_offset = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+132], xmm0

; 19414:     layout->row.filled = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+136], xmm0

; 19415:     layout->row.item.x = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+140], xmm0

; 19416:     layout->row.item.y = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+144], xmm0

; 19417:     layout->row.item.w = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+148], xmm0

; 19418:     layout->row.item.h = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+152], xmm0
$LN3@nk_layout_:

; 19419: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_row_template_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_row
_TEXT	SEGMENT
tv153 = -264						; size = 4
tv152 = -260						; size = 4
tv161 = -256						; size = 4
tv145 = -256						; size = 4
_r$1 = -56						; size = 4
_layout$ = -44						; size = 4
_win$ = -32						; size = 4
_n_undef$ = -20						; size = 4
_i$ = -8						; size = 4
_ctx$ = 8						; size = 4
_fmt$ = 12						; size = 4
_height$ = 16						; size = 4
_cols$ = 20						; size = 4
_ratio$ = 24						; size = 4
_nk_layout_row PROC					; COMDAT

; 19356: {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19357:     int i;
; 19358:     int n_undef = 0;

	mov	DWORD PTR _n_undef$[ebp], 0

; 19359:     struct nk_window *win;
; 19360:     struct nk_panel *layout;
; 19361: 
; 19362:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN12@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_row@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_layout_:

; 19363:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN13@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_row@@9@9
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_layout_:

; 19364:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN14@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_row@@9@9
	add	edx, 8
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_layout_:

; 19365:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN8@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN8@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_layout_
$LN8@nk_layout_:

; 19366:         return;

	jmp	$LN10@nk_layout_
$LN9@nk_layout_:

; 19367: 
; 19368:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19369:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19370:     nk_panel_layout(ctx, win, height, cols);

	mov	eax, DWORD PTR _cols$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_panel_layout
	add	esp, 16					; 00000010H

; 19371:     if (fmt == NK_DYNAMIC) {

	cmp	DWORD PTR _fmt$[ebp], 0
	jne	$LN7@nk_layout_

; 19372:         /* calculate width of undefined widget ratios */
; 19373:         float r = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _r$1[ebp], xmm0

; 19374:         layout->row.ratio = ratio;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _ratio$[ebp]
	mov	DWORD PTR [eax+120], ecx

; 19375:         for (i = 0; i < cols; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@nk_layout_
$LN5@nk_layout_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@nk_layout_:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _cols$[ebp]
	jge	SHORT $LN4@nk_layout_

; 19376:             if (ratio[i] < 0.0f)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ratio$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+eax*4]
	jbe	SHORT $LN3@nk_layout_

; 19377:                 n_undef++;

	mov	eax, DWORD PTR _n_undef$[ebp]
	add	eax, 1
	mov	DWORD PTR _n_undef$[ebp], eax
	jmp	SHORT $LN2@nk_layout_
$LN3@nk_layout_:

; 19378:             else r += ratio[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ratio$[ebp]
	movss	xmm0, DWORD PTR _r$1[ebp]
	addss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR _r$1[ebp], xmm0
$LN2@nk_layout_:

; 19379:         }

	jmp	SHORT $LN5@nk_layout_
$LN4@nk_layout_:

; 19380:         r = NK_SATURATE(1.0f - r);

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _r$1[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN15@nk_layout_
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv145[ebp], xmm0
	jmp	SHORT $LN16@nk_layout_
$LN15@nk_layout_:
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _r$1[ebp]
	movss	DWORD PTR tv145[ebp], xmm0
$LN16@nk_layout_:
	movss	xmm0, DWORD PTR tv145[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN19@nk_layout_
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _r$1[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN17@nk_layout_
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv152[ebp], xmm0
	jmp	SHORT $LN18@nk_layout_
$LN17@nk_layout_:
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _r$1[ebp]
	movss	DWORD PTR tv152[ebp], xmm0
$LN18@nk_layout_:
	movss	xmm0, DWORD PTR tv152[ebp]
	movss	DWORD PTR tv153[ebp], xmm0
	jmp	SHORT $LN20@nk_layout_
$LN19@nk_layout_:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv153[ebp], xmm0
$LN20@nk_layout_:
	movss	xmm0, DWORD PTR tv153[ebp]
	movss	DWORD PTR _r$1[ebp], xmm0

; 19381:         layout->row.type = NK_LAYOUT_DYNAMIC;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [eax+100], 3

; 19382:         layout->row.item_width = (r > 0 && n_undef > 0) ? (r / (float)n_undef):0;

	movss	xmm0, DWORD PTR _r$1[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN21@nk_layout_
	cmp	DWORD PTR _n_undef$[ebp], 0
	jle	SHORT $LN21@nk_layout_
	cvtsi2ss xmm0, DWORD PTR _n_undef$[ebp]
	movss	xmm1, DWORD PTR _r$1[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR tv161[ebp], xmm1
	jmp	SHORT $LN22@nk_layout_
$LN21@nk_layout_:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv161[ebp], xmm0
$LN22@nk_layout_:
	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR tv161[ebp]
	movss	DWORD PTR [eax+124], xmm0

; 19383:     } else {

	jmp	SHORT $LN1@nk_layout_
$LN7@nk_layout_:

; 19384:         layout->row.ratio = ratio;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _ratio$[ebp]
	mov	DWORD PTR [eax+120], ecx

; 19385:         layout->row.type = NK_LAYOUT_STATIC;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [eax+100], 7

; 19386:         layout->row.item_width = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+124], xmm0

; 19387:         layout->row.item_offset = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+132], xmm0
$LN1@nk_layout_:

; 19388:     }
; 19389:     layout->row.item_offset = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+132], xmm0

; 19390:     layout->row.filled = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+136], xmm0
$LN10@nk_layout_:

; 19391: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_row ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_row_end
_TEXT	SEGMENT
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_layout_row_end PROC					; COMDAT

; 19334: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19335:     struct nk_window *win;
; 19336:     struct nk_panel *layout;
; 19337: 
; 19338:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_row_end@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_layout_:

; 19339:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN7@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_end@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_layout_:

; 19340:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN8@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_end@@9@9
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_layout_:

; 19341:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN2@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN3@nk_layout_
$LN2@nk_layout_:

; 19342:         return;

	jmp	SHORT $LN4@nk_layout_
$LN3@nk_layout_:

; 19343: 
; 19344:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19345:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19346:     NK_ASSERT(layout->row.type == NK_LAYOUT_STATIC_ROW || layout->row.type == NK_LAYOUT_DYNAMIC_ROW);

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+100], 5
	je	SHORT $LN9@nk_layout_
	mov	ecx, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [ecx+100], 1
	je	SHORT $LN9@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_end@@9@9
	add	edx, 12					; 0000000cH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1KM@KNMABCOH@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAL?$AAA?$AAY?$AAO?$AAU?$AAT?$AA_?$AAS?$AAT@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_layout_:

; 19347:     if (layout->row.type != NK_LAYOUT_STATIC_ROW && layout->row.type != NK_LAYOUT_DYNAMIC_ROW)

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+100], 5
	je	SHORT $LN1@nk_layout_
	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+100], 1
	je	SHORT $LN1@nk_layout_

; 19348:         return;

	jmp	SHORT $LN4@nk_layout_
$LN1@nk_layout_:

; 19349:     layout->row.item_width = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+124], xmm0

; 19350:     layout->row.item_offset = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+132], xmm0
$LN4@nk_layout_:

; 19351: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_row_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_row_push
_TEXT	SEGMENT
tv151 = -240						; size = 4
tv150 = -236						; size = 4
tv147 = -232						; size = 4
_ratio$1 = -32						; size = 4
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_ratio_or_width$ = 12					; size = 4
_nk_layout_row_push PROC				; COMDAT

; 19307: {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19308:     struct nk_window *win;
; 19309:     struct nk_panel *layout;
; 19310: 
; 19311:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN11@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_row_push@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@nk_layout_:

; 19312:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN12@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_push@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_layout_:

; 19313:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN13@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_push@@9@9
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@nk_layout_:

; 19314:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN7@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN7@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN8@nk_layout_
$LN7@nk_layout_:

; 19315:         return;

	jmp	$LN1@nk_layout_
$LN8@nk_layout_:

; 19316: 
; 19317:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19318:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19319:     NK_ASSERT(layout->row.type == NK_LAYOUT_STATIC_ROW || layout->row.type == NK_LAYOUT_DYNAMIC_ROW);

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+100], 5
	je	SHORT $LN14@nk_layout_
	mov	ecx, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [ecx+100], 1
	je	SHORT $LN14@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_push@@9@9
	add	edx, 12					; 0000000cH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1KM@KNMABCOH@?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?9?$AA?$DO?$AAr?$AAo?$AAw?$AA?4?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAK?$AA_?$AAL?$AAA?$AAY?$AAO?$AAU?$AAT?$AA_?$AAS?$AAT@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@nk_layout_:

; 19320:     if (layout->row.type != NK_LAYOUT_STATIC_ROW && layout->row.type != NK_LAYOUT_DYNAMIC_ROW)

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+100], 5
	je	SHORT $LN6@nk_layout_
	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+100], 1
	je	SHORT $LN6@nk_layout_

; 19321:         return;

	jmp	$LN1@nk_layout_
$LN6@nk_layout_:

; 19322: 
; 19323:     if (layout->row.type == NK_LAYOUT_DYNAMIC_ROW) {

	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax+100], 1
	jne	$LN5@nk_layout_

; 19324:         float ratio = ratio_or_width;

	movss	xmm0, DWORD PTR _ratio_or_width$[ebp]
	movss	DWORD PTR _ratio$1[ebp], xmm0

; 19325:         if ((ratio + layout->row.filled) > 1.0f) return;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR _ratio$1[ebp]
	addss	xmm0, DWORD PTR [eax+136]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN4@nk_layout_
	jmp	$LN1@nk_layout_
$LN4@nk_layout_:

; 19326:         if (ratio > 0.0f)

	movss	xmm0, DWORD PTR _ratio$1[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN3@nk_layout_

; 19327:             layout->row.item_width = NK_SATURATE(ratio);

	movss	xmm0, DWORD PTR _ratio$1[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN15@nk_layout_
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv147[ebp], xmm0
	jmp	SHORT $LN16@nk_layout_
$LN15@nk_layout_:
	movss	xmm0, DWORD PTR _ratio$1[ebp]
	movss	DWORD PTR tv147[ebp], xmm0
$LN16@nk_layout_:
	movss	xmm0, DWORD PTR tv147[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN19@nk_layout_
	movss	xmm0, DWORD PTR _ratio$1[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN17@nk_layout_
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv150[ebp], xmm0
	jmp	SHORT $LN18@nk_layout_
$LN17@nk_layout_:
	movss	xmm0, DWORD PTR _ratio$1[ebp]
	movss	DWORD PTR tv150[ebp], xmm0
$LN18@nk_layout_:
	movss	xmm0, DWORD PTR tv150[ebp]
	movss	DWORD PTR tv151[ebp], xmm0
	jmp	SHORT $LN20@nk_layout_
$LN19@nk_layout_:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv151[ebp], xmm0
$LN20@nk_layout_:
	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR tv151[ebp]
	movss	DWORD PTR [eax+124], xmm0
	jmp	SHORT $LN2@nk_layout_
$LN3@nk_layout_:

; 19328:         else layout->row.item_width = 1.0f - layout->row.filled;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [eax+136]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [ecx+124], xmm0
$LN2@nk_layout_:

; 19329:     } else layout->row.item_width = ratio_or_width;

	jmp	SHORT $LN1@nk_layout_
$LN5@nk_layout_:
	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR _ratio_or_width$[ebp]
	movss	DWORD PTR [eax+124], xmm0
$LN1@nk_layout_:

; 19330: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_row_push ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_row_begin
_TEXT	SEGMENT
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_fmt$ = 12						; size = 4
_row_height$ = 16					; size = 4
_cols$ = 20						; size = 4
_nk_layout_row_begin PROC				; COMDAT

; 19281: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19282:     struct nk_window *win;
; 19283:     struct nk_panel *layout;
; 19284: 
; 19285:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_row_begin@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_layout_:

; 19286:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN8@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_begin@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_layout_:

; 19287:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN9@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_row_begin@@9@9
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_layout_:

; 19288:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN3@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN4@nk_layout_
$LN3@nk_layout_:

; 19289:         return;

	jmp	$LN5@nk_layout_
$LN4@nk_layout_:

; 19290: 
; 19291:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19292:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19293:     nk_panel_layout(ctx, win, row_height, cols);

	mov	eax, DWORD PTR _cols$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _row_height$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_panel_layout
	add	esp, 16					; 00000010H

; 19294:     if (fmt == NK_DYNAMIC)

	cmp	DWORD PTR _fmt$[ebp], 0
	jne	SHORT $LN2@nk_layout_

; 19295:         layout->row.type = NK_LAYOUT_DYNAMIC_ROW;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [eax+100], 1
	jmp	SHORT $LN1@nk_layout_
$LN2@nk_layout_:

; 19296:     else layout->row.type = NK_LAYOUT_STATIC_ROW;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [eax+100], 5
$LN1@nk_layout_:

; 19297: 
; 19298:     layout->row.ratio = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	DWORD PTR [eax+120], 0

; 19299:     layout->row.filled = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+136], xmm0

; 19300:     layout->row.item_width = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+124], xmm0

; 19301:     layout->row.item_offset = 0;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+132], xmm0

; 19302:     layout->row.columns = cols;

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _cols$[ebp]
	mov	DWORD PTR [eax+116], ecx
$LN5@nk_layout_:

; 19303: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_row_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_row_static
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_height$ = 12						; size = 4
_item_width$ = 16					; size = 4
_cols$ = 20						; size = 4
_nk_layout_row_static PROC				; COMDAT

; 19274: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19275:     nk_row_layout(ctx, NK_STATIC, height, cols, item_width);

	mov	eax, DWORD PTR _item_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cols$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_row_layout
	add	esp, 20					; 00000014H

; 19276: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_row_static ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_row_dynamic
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_height$ = 12						; size = 4
_cols$ = 16						; size = 4
_nk_layout_row_dynamic PROC				; COMDAT

; 19268: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19269:     nk_row_layout(ctx, NK_DYNAMIC, height, cols, 0);

	push	0
	mov	eax, DWORD PTR _cols$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_row_layout
	add	esp, 20					; 00000014H

; 19270: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_row_dynamic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_ratio_from_pixel
_TEXT	SEGMENT
tv131 = -216						; size = 4
tv132 = -212						; size = 4
tv90 = -208						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_pixel_width$ = 12					; size = 4
_nk_layout_ratio_from_pixel PROC			; COMDAT

; 19257: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19258:     struct nk_window *win;
; 19259:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_ratio_from_pixel@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_layout_:

; 19260:     NK_ASSERT(pixel_width);

	movss	xmm0, DWORD PTR _pixel_width$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_ratio_from_pixel@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BI@OOJBMBEL@?$AAp?$AAi?$AAx?$AAe?$AAl?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_layout_:

; 19261:     if (!ctx || !ctx->current || !ctx->current->layout) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN1@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN2@nk_layout_
$LN1@nk_layout_:
	fldz
	jmp	$LN3@nk_layout_
$LN2@nk_layout_:

; 19262:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19263:     return NK_CLAMP(0.0f, pixel_width/win->bounds.x, 1.0f);

	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR _pixel_width$[ebp]
	divss	xmm0, DWORD PTR [eax+76]
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN7@nk_layout_
	mov	ecx, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR _pixel_width$[ebp]
	divss	xmm0, DWORD PTR [ecx+76]
	movss	DWORD PTR tv90[ebp], xmm0
	jmp	SHORT $LN8@nk_layout_
$LN7@nk_layout_:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv90[ebp], xmm0
$LN8@nk_layout_:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv90[ebp]
	jbe	SHORT $LN11@nk_layout_
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv132[ebp], xmm0
	jmp	SHORT $LN12@nk_layout_
$LN11@nk_layout_:
	mov	edx, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR _pixel_width$[ebp]
	divss	xmm0, DWORD PTR [edx+76]
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN9@nk_layout_
	mov	eax, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR _pixel_width$[ebp]
	divss	xmm0, DWORD PTR [eax+76]
	movss	DWORD PTR tv131[ebp], xmm0
	jmp	SHORT $LN10@nk_layout_
$LN9@nk_layout_:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv131[ebp], xmm0
$LN10@nk_layout_:
	movss	xmm0, DWORD PTR tv131[ebp]
	movss	DWORD PTR tv132[ebp], xmm0
$LN12@nk_layout_:
	fld	DWORD PTR tv132[ebp]
$LN3@nk_layout_:

; 19264: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_ratio_from_pixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_widget_bounds
_TEXT	SEGMENT
tv131 = -248						; size = 4
_layout$ = -48						; size = 4
_win$ = -36						; size = 4
_ret$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_ctx$ = 12						; size = 4
_nk_layout_widget_bounds PROC				; COMDAT

; 19621: {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 19622:     struct nk_rect ret;
; 19623:     struct nk_window *win;
; 19624:     struct nk_panel *layout;
; 19625: 
; 19626:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN3@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_widget_bounds@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@nk_layout_:

; 19627:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN4@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_widget_bounds@@9@9
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_layout_:

; 19628:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN5@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_widget_bounds@@9@9
	add	edx, 7
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_layout_:

; 19629:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19630:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19631: 
; 19632:     ret.x = layout->at_x;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR _ret$[ebp], xmm0

; 19633:     ret.y = layout->at_y;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR _ret$[ebp+4], xmm0

; 19634:     ret.w = layout->bounds.w - NK_MAX(layout->at_x - layout->bounds.x,0);

	mov	eax, DWORD PTR _layout$[ebp]
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	subss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN6@nk_layout_
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv131[ebp], xmm0
	jmp	SHORT $LN7@nk_layout_
$LN6@nk_layout_:
	mov	edx, DWORD PTR _layout$[ebp]
	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [edx+32]
	subss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR tv131[ebp], xmm0
$LN7@nk_layout_:
	mov	ecx, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, DWORD PTR tv131[ebp]
	movss	DWORD PTR _ret$[ebp+8], xmm0

; 19635:     ret.h = layout->row.height;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR [eax+108]
	movss	DWORD PTR _ret$[ebp+12], xmm0

; 19636:     return ret;

	mov	eax, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _ret$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _ret$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _ret$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T1[ebp]

; 19637: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@nk_layout_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@nk_layout_:
	DD	1
	DD	$LN9@nk_layout_
$LN9@nk_layout_:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN8@nk_layout_
$LN8@nk_layout_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_nk_layout_widget_bounds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_reset_min_row_height
_TEXT	SEGMENT
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_layout_reset_min_row_height PROC			; COMDAT

; 19140: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19141:     struct nk_window *win;
; 19142:     struct nk_panel *layout;
; 19143: 
; 19144:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_reset_min_row_height@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_layout_:

; 19145:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_reset_min_row_height@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_layout_:

; 19146:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN7@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_reset_min_row_height@@9@9
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_layout_:

; 19147:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN1@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN2@nk_layout_
$LN1@nk_layout_:

; 19148:         return;

	jmp	SHORT $LN3@nk_layout_
$LN2@nk_layout_:

; 19149: 
; 19150:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19151:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19152:     layout->row.min_height = ctx->style.font->height;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	mov	edx, DWORD PTR _layout$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+112], eax

; 19153:     layout->row.min_height += ctx->style.text.padding.y*2;

	mov	eax, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR [eax+412]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	ecx, DWORD PTR _layout$[ebp]
	addss	xmm0, DWORD PTR [ecx+112]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [edx+112], xmm0

; 19154:     layout->row.min_height += ctx->style.window.min_row_height_padding*2;

	mov	eax, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR [eax+5660]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	ecx, DWORD PTR _layout$[ebp]
	addss	xmm0, DWORD PTR [ecx+112]
	mov	edx, DWORD PTR _layout$[ebp]
	movss	DWORD PTR [edx+112], xmm0
$LN3@nk_layout_:

; 19155: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_reset_min_row_height ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_layout_set_min_row_height
_TEXT	SEGMENT
_layout$ = -20						; size = 4
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_height$ = 12						; size = 4
_nk_layout_set_min_row_height PROC			; COMDAT

; 19123: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19124:     struct nk_window *win;
; 19125:     struct nk_panel *layout;
; 19126: 
; 19127:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_layout_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_layout_set_min_row_height@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_layout_:

; 19128:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_layout_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_layout_set_min_row_height@@9@9
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_layout_:

; 19129:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN7@nk_layout_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_layout_set_min_row_height@@9@9
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_layout_:

; 19130:     if (!ctx || !ctx->current || !ctx->current->layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN1@nk_layout_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN2@nk_layout_
$LN1@nk_layout_:

; 19131:         return;

	jmp	SHORT $LN3@nk_layout_
$LN2@nk_layout_:

; 19132: 
; 19133:     win = ctx->current;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	DWORD PTR _win$[ebp], ecx

; 19134:     layout = win->layout;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _layout$[ebp], ecx

; 19135:     layout->row.min_height = height;

	mov	eax, DWORD PTR _layout$[ebp]
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR [eax+112], xmm0
$LN3@nk_layout_:

; 19136: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_layout_set_min_row_height ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_show_if
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_s$ = 16						; size = 4
_cond$ = 20						; size = 4
_nk_window_show_if PROC					; COMDAT

; 19017: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19018:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_show_if@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:

; 19019:     if (!ctx || !cond) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_window_
	cmp	DWORD PTR _cond$[ebp], 0
	jne	SHORT $LN2@nk_window_
$LN1@nk_window_:
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 19020:     nk_window_show(ctx, name, s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_window_show
	add	esp, 12					; 0000000cH
$LN3@nk_window_:

; 19021: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_show_if ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_show
_TEXT	SEGMENT
_win$ = -32						; size = 4
_title_hash$ = -20					; size = 4
_title_len$ = -8					; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_s$ = 16						; size = 4
_nk_window_show PROC					; COMDAT

; 18998: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18999:     int title_len;
; 19000:     nk_hash title_hash;
; 19001:     struct nk_window *win;
; 19002:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_show@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_window_:

; 19003:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN4@nk_window_
	jmp	SHORT $LN5@nk_window_
$LN4@nk_window_:

; 19004: 
; 19005:     title_len = (int)nk_strlen(name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _title_len$[ebp], eax

; 19006:     title_hash = nk_murmur_hash(name, (int)title_len, NK_WINDOW_TITLE);

	push	64					; 00000040H
	mov	eax, DWORD PTR _title_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_nk_murmur_hash
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _title_hash$[ebp], eax

; 19007:     win = nk_find_window(ctx, title_hash, name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title_hash$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_find_window
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _win$[ebp], eax

; 19008:     if (!win) return;

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN3@nk_window_
	jmp	SHORT $LN5@nk_window_
$LN3@nk_window_:

; 19009:     if (s == NK_HIDDEN) {

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN2@nk_window_

; 19010:         win->flags |= NK_WINDOW_HIDDEN;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	or	ecx, 8192				; 00002000H
	mov	edx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [edx+72], ecx
	jmp	SHORT $LN5@nk_window_
$LN2@nk_window_:

; 19011:     } else win->flags &= ~(nk_flags)NK_WINDOW_HIDDEN;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, -8193				; ffffdfffH
	mov	edx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [edx+72], ecx
$LN5@nk_window_:

; 19012: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_show ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_collapse_if
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_c$ = 16						; size = 4
_cond$ = 20						; size = 4
_nk_window_collapse_if PROC				; COMDAT

; 18990: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18991:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_collapse_if@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:

; 18992:     if (!ctx || !cond) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_window_
	cmp	DWORD PTR _cond$[ebp], 0
	jne	SHORT $LN2@nk_window_
$LN1@nk_window_:
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18993:     nk_window_collapse(ctx, name, c);

	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_window_collapse
	add	esp, 12					; 0000000cH
$LN3@nk_window_:

; 18994: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_collapse_if ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_collapse
_TEXT	SEGMENT
_win$ = -32						; size = 4
_title_hash$ = -20					; size = 4
_title_len$ = -8					; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_c$ = 16						; size = 4
_nk_window_collapse PROC				; COMDAT

; 18971: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18972:     int title_len;
; 18973:     nk_hash title_hash;
; 18974:     struct nk_window *win;
; 18975:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_collapse@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_window_:

; 18976:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN4@nk_window_
	jmp	SHORT $LN5@nk_window_
$LN4@nk_window_:

; 18977: 
; 18978:     title_len = (int)nk_strlen(name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _title_len$[ebp], eax

; 18979:     title_hash = nk_murmur_hash(name, (int)title_len, NK_WINDOW_TITLE);

	push	64					; 00000040H
	mov	eax, DWORD PTR _title_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_nk_murmur_hash
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _title_hash$[ebp], eax

; 18980:     win = nk_find_window(ctx, title_hash, name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title_hash$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_find_window
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _win$[ebp], eax

; 18981:     if (!win) return;

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN3@nk_window_
	jmp	SHORT $LN5@nk_window_
$LN3@nk_window_:

; 18982:     if (c == NK_MINIMIZED)

	cmp	DWORD PTR _c$[ebp], 0
	jne	SHORT $LN2@nk_window_

; 18983:         win->flags |= NK_WINDOW_MINIMIZED;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	or	ecx, 32768				; 00008000H
	mov	edx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [edx+72], ecx
	jmp	SHORT $LN5@nk_window_
$LN2@nk_window_:

; 18984:     else win->flags &= ~(nk_flags)NK_WINDOW_MINIMIZED;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, -32769				; ffff7fffH
	mov	edx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [edx+72], ecx
$LN5@nk_window_:

; 18985: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_collapse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_close
_TEXT	SEGMENT
_win$ = -8						; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_nk_window_close PROC					; COMDAT

; 18930: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18931:     struct nk_window *win;
; 18932:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_close@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_window_:

; 18933:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN3@nk_window_
	jmp	$LN4@nk_window_
$LN3@nk_window_:

; 18934:     win = nk_window_find(ctx, name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_window_find
	add	esp, 8
	mov	DWORD PTR _win$[ebp], eax

; 18935:     if (!win) return;

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN2@nk_window_
	jmp	SHORT $LN4@nk_window_
$LN2@nk_window_:

; 18936:     NK_ASSERT(ctx->current != win && "You cannot close a currently active window");

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	ecx, DWORD PTR _win$[ebp]
	je	SHORT $LN7@nk_window_
	mov	edx, OFFSET ??_C@_0CL@POGABMMP@You?5cannot?5close?5a?5currently?5act@
	test	edx, edx
	jne	SHORT $LN8@nk_window_
$LN7@nk_window_:
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_close@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1II@KEHDGIEG@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAw?$AAi?$AAn?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAY?$AAo?$AAu?$AA?5?$AAc?$AAa?$AAn?$AAn@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_window_:

; 18937:     if (ctx->current == win) return;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	ecx, DWORD PTR _win$[ebp]
	jne	SHORT $LN1@nk_window_
	jmp	SHORT $LN4@nk_window_
$LN1@nk_window_:

; 18938:     win->flags |= NK_WINDOW_HIDDEN;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	or	ecx, 8192				; 00002000H
	mov	edx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 18939:     win->flags |= NK_WINDOW_CLOSED;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	or	ecx, 16384				; 00004000H
	mov	edx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [edx+72], ecx
$LN4@nk_window_:

; 18940: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_set_focus
_TEXT	SEGMENT
_win$ = -32						; size = 4
_title_hash$ = -20					; size = 4
_title_len$ = -8					; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_nk_window_set_focus PROC				; COMDAT

; 19025: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19026:     int title_len;
; 19027:     nk_hash title_hash;
; 19028:     struct nk_window *win;
; 19029:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_set_focus@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:

; 19030:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_window_
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 19031: 
; 19032:     title_len = (int)nk_strlen(name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _title_len$[ebp], eax

; 19033:     title_hash = nk_murmur_hash(name, (int)title_len, NK_WINDOW_TITLE);

	push	64					; 00000040H
	mov	eax, DWORD PTR _title_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_nk_murmur_hash
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _title_hash$[ebp], eax

; 19034:     win = nk_find_window(ctx, title_hash, name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title_hash$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_find_window
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _win$[ebp], eax

; 19035:     if (win && ctx->end != win) {

	cmp	DWORD PTR _win$[ebp], 0
	je	SHORT $LN1@nk_window_
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12932]
	cmp	ecx, DWORD PTR _win$[ebp]
	je	SHORT $LN1@nk_window_

; 19036:         nk_remove_window(ctx, win);

	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_remove_window
	add	esp, 8

; 19037:         nk_insert_window(ctx, win, NK_INSERT_BACK);

	push	0
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_insert_window
	add	esp, 12					; 0000000cH
$LN1@nk_window_:

; 19038:     }
; 19039:     ctx->active = win;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+12936], ecx
$LN3@nk_window_:

; 19040: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_set_focus ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_set_size
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_size$ = 12						; size = 8
_nk_window_set_size PROC				; COMDAT

; 18961: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18962:     NK_ASSERT(ctx); NK_ASSERT(ctx->current);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_set_size@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_window_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_window_set_size@@9@9
	add	ecx, 1
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_window_:

; 18963:     if (!ctx || !ctx->current) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_window_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_window_
$LN1@nk_window_:
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18964:     ctx->current->bounds.w = size.x;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	movss	xmm0, DWORD PTR _size$[ebp]
	movss	DWORD PTR [ecx+84], xmm0

; 18965:     ctx->current->bounds.h = size.y;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	movss	xmm0, DWORD PTR _size$[ebp+4]
	movss	DWORD PTR [ecx+88], xmm0
$LN3@nk_window_:

; 18966: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_set_size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_set_position
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_pos$ = 12						; size = 8
_nk_window_set_position PROC				; COMDAT

; 18952: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18953:     NK_ASSERT(ctx); NK_ASSERT(ctx->current);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_set_position@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_window_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_window_set_position@@9@9
	add	ecx, 1
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_window_:

; 18954:     if (!ctx || !ctx->current) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_window_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_window_
$LN1@nk_window_:
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18955:     ctx->current->bounds.x = pos.x;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [ecx+76], xmm0

; 18956:     ctx->current->bounds.y = pos.y;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [ecx+80], xmm0
$LN3@nk_window_:

; 18957: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_set_position ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_set_bounds
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_bounds$ = 12						; size = 16
_nk_window_set_bounds PROC				; COMDAT

; 18944: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18945:     NK_ASSERT(ctx); NK_ASSERT(ctx->current);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_set_bounds@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_window_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_window_set_bounds@@9@9
	add	ecx, 1
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_window_:

; 18946:     if (!ctx || !ctx->current) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_window_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_window_
$LN1@nk_window_:
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18947:     ctx->current->bounds = bounds;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	add	ecx, 76					; 0000004cH
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
$LN3@nk_window_:

; 18948: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_set_bounds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_item_is_any_active
_TEXT	SEGMENT
tv70 = -220						; size = 4
_any_active$ = -20					; size = 4
_any_hovered$ = -8					; size = 4
_ctx$ = 8						; size = 4
_nk_item_is_any_active PROC				; COMDAT

; 18848: {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18849:     int any_hovered = nk_window_is_any_hovered(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_window_is_any_hovered
	add	esp, 4
	mov	DWORD PTR _any_hovered$[ebp], eax

; 18850:     int any_active = (ctx->last_widget_state & NK_WIDGET_STATE_MODIFIED);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	and	ecx, 2
	mov	DWORD PTR _any_active$[ebp], ecx

; 18851:     return any_hovered || any_active;

	cmp	DWORD PTR _any_hovered$[ebp], 0
	jne	SHORT $LN3@nk_item_is
	cmp	DWORD PTR _any_active$[ebp], 0
	jne	SHORT $LN3@nk_item_is
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@nk_item_is
$LN3@nk_item_is:
	mov	DWORD PTR tv70[ebp], 1
$LN4@nk_item_is:
	mov	eax, DWORD PTR tv70[ebp]

; 18852: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_item_is_any_active ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_is_any_hovered
_TEXT	SEGMENT
_header$1 = -36						; size = 16
_iter$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_nk_window_is_any_hovered PROC				; COMDAT

; 18820: {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 18821:     struct nk_window *iter;
; 18822:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN12@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_is_any_hovered@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@nk_window_:

; 18823:     if (!ctx) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN9@nk_window_
	xor	eax, eax
	jmp	$LN10@nk_window_
$LN9@nk_window_:

; 18824:     iter = ctx->begin;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12928]
	mov	DWORD PTR _iter$[ebp], ecx
$LN8@nk_window_:

; 18825:     while (iter) {

	cmp	DWORD PTR _iter$[ebp], 0
	je	$LN7@nk_window_

; 18826:         /* check if window is being hovered */
; 18827:         if(!(iter->flags & NK_WINDOW_HIDDEN)) {

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 8192				; 00002000H
	jne	$LN1@nk_window_

; 18828:             /* check if window popup is being hovered */
; 18829:             if (iter->popup.active && iter->popup.win && nk_input_is_mouse_hovering_rect(&ctx->input, iter->popup.win->bounds))

	mov	eax, DWORD PTR _iter$[ebp]
	cmp	DWORD PTR [eax+284], 0
	je	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR _iter$[ebp]
	cmp	DWORD PTR [eax+252], 0
	je	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	add	ecx, 76					; 0000004cH
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN5@nk_window_

; 18830:                 return 1;

	mov	eax, 1
	jmp	$LN10@nk_window_
$LN5@nk_window_:

; 18831: 
; 18832:             if (iter->flags & NK_WINDOW_MINIMIZED) {

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN4@nk_window_

; 18833:                 struct nk_rect header = iter->bounds;

	mov	eax, DWORD PTR _iter$[ebp]
	add	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _header$1[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _header$1[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _header$1[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _header$1[ebp+12], edx

; 18834:                 header.h = ctx->style.font->height + 2 * ctx->style.window.header.padding.y;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	mov	edx, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+5540]
	addss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR _header$1[ebp+12], xmm0

; 18835:                 if (nk_input_is_mouse_hovering_rect(&ctx->input, header))

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _header$1[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _header$1[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _header$1[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _header$1[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN3@nk_window_

; 18836:                     return 1;

	mov	eax, 1
	jmp	SHORT $LN10@nk_window_
$LN3@nk_window_:

; 18837:             } else if (nk_input_is_mouse_hovering_rect(&ctx->input, iter->bounds)) {

	jmp	SHORT $LN1@nk_window_
$LN4@nk_window_:
	mov	eax, DWORD PTR _iter$[ebp]
	add	eax, 76					; 0000004cH
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@nk_window_

; 18838:                 return 1;

	mov	eax, 1
	jmp	SHORT $LN10@nk_window_
$LN1@nk_window_:

; 18839:             }
; 18840:         }
; 18841:         iter = iter->next;

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+376]
	mov	DWORD PTR _iter$[ebp], ecx

; 18842:     }

	jmp	$LN8@nk_window_
$LN7@nk_window_:

; 18843:     return 0;

	xor	eax, eax
$LN10@nk_window_:

; 18844: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@nk_window_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@nk_window_:
	DD	1
	DD	$LN14@nk_window_
$LN14@nk_window_:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN13@nk_window_
$LN13@nk_window_:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_nk_window_is_any_hovered ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_is_hovered
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_window_is_hovered PROC				; COMDAT

; 18809: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18810:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_is_hovered@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_window_:

; 18811:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN7@nk_window_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_window_is_hovered@@9@9
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_window_:

; 18812:     if (!ctx || !ctx->current) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk_window_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN3@nk_window_
$LN2@nk_window_:
	xor	eax, eax
	jmp	SHORT $LN4@nk_window_
$LN3@nk_window_:

; 18813:     if(ctx->current->flags & NK_WINDOW_HIDDEN)

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+72]
	and	edx, 8192				; 00002000H
	je	SHORT $LN1@nk_window_

; 18814:         return 0;

	xor	eax, eax
	jmp	SHORT $LN4@nk_window_
$LN1@nk_window_:

; 18815:     return nk_input_is_mouse_hovering_rect(&ctx->input, ctx->current->bounds);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	add	ecx, 76					; 0000004cH
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
$LN4@nk_window_:

; 18816: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_is_hovered ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_is_active
_TEXT	SEGMENT
tv84 = -232						; size = 4
_win$ = -32						; size = 4
_title_hash$ = -20					; size = 4
_title_len$ = -8					; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_nk_window_is_active PROC				; COMDAT

; 18904: {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18905:     int title_len;
; 18906:     nk_hash title_hash;
; 18907:     struct nk_window *win;
; 18908:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_is_active@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:

; 18909:     if (!ctx) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_window_
	xor	eax, eax
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18910: 
; 18911:     title_len = (int)nk_strlen(name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _title_len$[ebp], eax

; 18912:     title_hash = nk_murmur_hash(name, (int)title_len, NK_WINDOW_TITLE);

	push	64					; 00000040H
	mov	eax, DWORD PTR _title_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_nk_murmur_hash
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _title_hash$[ebp], eax

; 18913:     win = nk_find_window(ctx, title_hash, name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title_hash$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_find_window
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _win$[ebp], eax

; 18914:     if (!win) return 0;

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN1@nk_window_
	xor	eax, eax
	jmp	SHORT $LN3@nk_window_
$LN1@nk_window_:

; 18915:     return win == ctx->active;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	cmp	ecx, DWORD PTR [eax+12936]
	jne	SHORT $LN6@nk_window_
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN7@nk_window_
$LN6@nk_window_:
	mov	DWORD PTR tv84[ebp], 0
$LN7@nk_window_:
	mov	eax, DWORD PTR tv84[ebp]
$LN3@nk_window_:

; 18916: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_is_active ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_is_hidden
_TEXT	SEGMENT
_win$ = -32						; size = 4
_title_hash$ = -20					; size = 4
_title_len$ = -8					; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_nk_window_is_hidden PROC				; COMDAT

; 18888: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18889:     int title_len;
; 18890:     nk_hash title_hash;
; 18891:     struct nk_window *win;
; 18892:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_is_hidden@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:

; 18893:     if (!ctx) return 1;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_window_
	mov	eax, 1
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18894: 
; 18895:     title_len = (int)nk_strlen(name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _title_len$[ebp], eax

; 18896:     title_hash = nk_murmur_hash(name, (int)title_len, NK_WINDOW_TITLE);

	push	64					; 00000040H
	mov	eax, DWORD PTR _title_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_nk_murmur_hash
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _title_hash$[ebp], eax

; 18897:     win = nk_find_window(ctx, title_hash, name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title_hash$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_find_window
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _win$[ebp], eax

; 18898:     if (!win) return 1;

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN1@nk_window_
	mov	eax, 1
	jmp	SHORT $LN3@nk_window_
$LN1@nk_window_:

; 18899:     return (win->flags & NK_WINDOW_HIDDEN);

	mov	eax, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [eax+72]
	and	eax, 8192				; 00002000H
$LN3@nk_window_:

; 18900: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_is_hidden ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_is_closed
_TEXT	SEGMENT
_win$ = -32						; size = 4
_title_hash$ = -20					; size = 4
_title_len$ = -8					; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_nk_window_is_closed PROC				; COMDAT

; 18872: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18873:     int title_len;
; 18874:     nk_hash title_hash;
; 18875:     struct nk_window *win;
; 18876:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_is_closed@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:

; 18877:     if (!ctx) return 1;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_window_
	mov	eax, 1
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18878: 
; 18879:     title_len = (int)nk_strlen(name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _title_len$[ebp], eax

; 18880:     title_hash = nk_murmur_hash(name, (int)title_len, NK_WINDOW_TITLE);

	push	64					; 00000040H
	mov	eax, DWORD PTR _title_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_nk_murmur_hash
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _title_hash$[ebp], eax

; 18881:     win = nk_find_window(ctx, title_hash, name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title_hash$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_find_window
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _win$[ebp], eax

; 18882:     if (!win) return 1;

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN1@nk_window_
	mov	eax, 1
	jmp	SHORT $LN3@nk_window_
$LN1@nk_window_:

; 18883:     return (win->flags & NK_WINDOW_CLOSED);

	mov	eax, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [eax+72]
	and	eax, 16384				; 00004000H
$LN3@nk_window_:

; 18884: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_is_closed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_is_collapsed
_TEXT	SEGMENT
_win$ = -32						; size = 4
_title_hash$ = -20					; size = 4
_title_len$ = -8					; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_nk_window_is_collapsed PROC				; COMDAT

; 18856: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18857:     int title_len;
; 18858:     nk_hash title_hash;
; 18859:     struct nk_window *win;
; 18860:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_is_collapsed@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:

; 18861:     if (!ctx) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_window_
	xor	eax, eax
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18862: 
; 18863:     title_len = (int)nk_strlen(name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _title_len$[ebp], eax

; 18864:     title_hash = nk_murmur_hash(name, (int)title_len, NK_WINDOW_TITLE);

	push	64					; 00000040H
	mov	eax, DWORD PTR _title_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_nk_murmur_hash
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _title_hash$[ebp], eax

; 18865:     win = nk_find_window(ctx, title_hash, name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title_hash$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_find_window
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _win$[ebp], eax

; 18866:     if (!win) return 0;

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN1@nk_window_
	xor	eax, eax
	jmp	SHORT $LN3@nk_window_
$LN1@nk_window_:

; 18867:     return win->flags & NK_WINDOW_MINIMIZED;

	mov	eax, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [eax+72]
	and	eax, 32768				; 00008000H
$LN3@nk_window_:

; 18868: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_is_collapsed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_has_focus
_TEXT	SEGMENT
tv91 = -196						; size = 4
_ctx$ = 8						; size = 4
_nk_window_has_focus PROC				; COMDAT

; 18799: {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18800:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_has_focus@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:

; 18801:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_window_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_window_has_focus@@9@9
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_window_:

; 18802:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN7@nk_window_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_window_has_focus@@9@9
	add	edx, 3
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_window_:

; 18803:     if (!ctx || !ctx->current) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_window_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_window_
$LN1@nk_window_:
	xor	eax, eax
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18804:     return ctx->current == ctx->active;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [eax+12940]
	cmp	edx, DWORD PTR [ecx+12936]
	jne	SHORT $LN8@nk_window_
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN9@nk_window_
$LN8@nk_window_:
	mov	DWORD PTR tv91[ebp], 0
$LN9@nk_window_:
	mov	eax, DWORD PTR tv91[ebp]
$LN3@nk_window_:

; 18805: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_has_focus ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_get_canvas
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_window_get_canvas PROC				; COMDAT

; 18780: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18781:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_get_canvas@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:

; 18782:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_window_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_window_get_canvas@@9@9
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_window_:

; 18783:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN7@nk_window_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_window_get_canvas@@9@9
	add	edx, 3
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_window_:

; 18784:     if (!ctx || !ctx->current) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_window_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_window_
$LN1@nk_window_:
	xor	eax, eax
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18785:     return &ctx->current->buffer;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [eax+12940]
	add	eax, 100				; 00000064H
$LN3@nk_window_:

; 18786: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_get_canvas ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_get_content_region_size
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_window_get_content_region_size PROC			; COMDAT

; 18770: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18771:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_get_content_region_size@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:

; 18772:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_window_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_window_get_content_region_size@@9@9
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_window_:

; 18773:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN7@nk_window_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_window_get_content_region_size@@9@9
	add	edx, 3
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_window_:

; 18774:     if (!ctx || !ctx->current) return nk_vec2(0,0);

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_window_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_window_
$LN1@nk_window_:
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18775:     return nk_vec2(ctx->current->layout->clip.w, ctx->current->layout->clip.h);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	push	ecx
	movss	xmm0, DWORD PTR [edx+72]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	push	ecx
	movss	xmm0, DWORD PTR [edx+68]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
$LN3@nk_window_:

; 18776: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_get_content_region_size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_get_content_region_max
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_window_get_content_region_max PROC			; COMDAT

; 18759: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18760:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_get_content_region_max@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:

; 18761:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_window_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_window_get_content_region_max@@9@9
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_window_:

; 18762:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN7@nk_window_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_window_get_content_region_max@@9@9
	add	edx, 3
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_window_:

; 18763:     if (!ctx || !ctx->current) return nk_vec2(0,0);

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_window_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_window_
$LN1@nk_window_:
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18764:     return nk_vec2(ctx->current->layout->clip.x + ctx->current->layout->clip.w,
; 18765:         ctx->current->layout->clip.y + ctx->current->layout->clip.h);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	eax, DWORD PTR [ecx+140]
	movss	xmm0, DWORD PTR [edx+64]
	addss	xmm0, DWORD PTR [eax+72]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+12940]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+12940]
	mov	ecx, DWORD PTR [edx+140]
	movss	xmm0, DWORD PTR [eax+60]
	addss	xmm0, DWORD PTR [ecx+68]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
$LN3@nk_window_:

; 18766: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_get_content_region_max ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_get_content_region_min
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_window_get_content_region_min PROC			; COMDAT

; 18749: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18750:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_get_content_region_min@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:

; 18751:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_window_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_window_get_content_region_min@@9@9
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_window_:

; 18752:     NK_ASSERT(ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	cmp	DWORD PTR [ecx+140], 0
	jne	SHORT $LN7@nk_window_
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_window_get_content_region_min@@9@9
	add	edx, 3
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@CGDEIPOI@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?9?$AA?$DO?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_window_:

; 18753:     if (!ctx || !ctx->current) return nk_vec2(0,0);

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_window_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_window_
$LN1@nk_window_:
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18754:     return nk_vec2(ctx->current->layout->clip.x, ctx->current->layout->clip.y);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	push	ecx
	movss	xmm0, DWORD PTR [edx+64]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	push	ecx
	movss	xmm0, DWORD PTR [edx+60]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
$LN3@nk_window_:

; 18755: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_get_content_region_min ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_get_content_region
_TEXT	SEGMENT
$T1 = -212						; size = 16
$T2 = 8							; size = 4
_ctx$ = 12						; size = 4
_nk_window_get_content_region PROC			; COMDAT

; 18740: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18741:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_get_content_region@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:

; 18742:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_window_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_window_get_content_region@@9@9
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_window_:

; 18743:     if (!ctx || !ctx->current) return nk_rect(0,0,0,0);

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_window_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_window_
$LN1@nk_window_:
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	_nk_rect
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T2[ebp]
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18744:     return ctx->current->layout->clip;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	add	edx, 60					; 0000003cH
	mov	eax, DWORD PTR $T2[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T2[ebp]
$LN3@nk_window_:

; 18745: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_get_content_region ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_get_panel
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_window_get_panel PROC				; COMDAT

; 18790: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18791:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_get_panel@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:

; 18792:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_window_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_window_get_panel@@9@9
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_window_:

; 18793:     if (!ctx || !ctx->current) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_window_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_window_
$LN1@nk_window_:
	xor	eax, eax
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18794:     return ctx->current->layout;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	eax, DWORD PTR [ecx+140]
$LN3@nk_window_:

; 18795: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_get_panel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_get_height
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_window_get_height PROC				; COMDAT

; 18731: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18732:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_get_height@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:

; 18733:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_window_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_window_get_height@@9@9
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_window_:

; 18734:     if (!ctx || !ctx->current) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_window_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_window_
$LN1@nk_window_:
	fldz
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18735:     return ctx->current->bounds.h;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	fld	DWORD PTR [ecx+88]
$LN3@nk_window_:

; 18736: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_get_height ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_get_width
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_window_get_width PROC				; COMDAT

; 18722: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18723:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_get_width@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:

; 18724:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_window_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_window_get_width@@9@9
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_window_:

; 18725:     if (!ctx || !ctx->current) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_window_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_window_
$LN1@nk_window_:
	fldz
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18726:     return ctx->current->bounds.w;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	fld	DWORD PTR [ecx+84]
$LN3@nk_window_:

; 18727: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_get_width ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_get_size
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_window_get_size PROC				; COMDAT

; 18713: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18714:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_get_size@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:

; 18715:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_window_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_window_get_size@@9@9
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_window_:

; 18716:     if (!ctx || !ctx->current) return nk_vec2(0,0);

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_window_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_window_
$LN1@nk_window_:
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18717:     return nk_vec2(ctx->current->bounds.w, ctx->current->bounds.h);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+88]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+12940]
	push	ecx
	movss	xmm0, DWORD PTR [eax+84]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
$LN3@nk_window_:

; 18718: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_get_size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_get_position
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_window_get_position PROC				; COMDAT

; 18704: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18705:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_get_position@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:

; 18706:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_window_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_window_get_position@@9@9
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_window_:

; 18707:     if (!ctx || !ctx->current) return nk_vec2(0,0);

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_window_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_window_
$LN1@nk_window_:
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18708:     return nk_vec2(ctx->current->bounds.x, ctx->current->bounds.y);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+80]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+12940]
	push	ecx
	movss	xmm0, DWORD PTR [eax+76]
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
$LN3@nk_window_:

; 18709: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_get_position ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_get_bounds
_TEXT	SEGMENT
$T1 = -212						; size = 16
$T2 = 8							; size = 4
_ctx$ = 12						; size = 4
_nk_window_get_bounds PROC				; COMDAT

; 18695: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18696:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_window_
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_window_get_bounds@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_window_:

; 18697:     NK_ASSERT(ctx->current);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN6@nk_window_
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_window_get_bounds@@9@9
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BK@LJAMLKOF@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_window_:

; 18698:     if (!ctx || !ctx->current) return nk_rect(0,0,0,0);

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN1@nk_window_
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN2@nk_window_
$LN1@nk_window_:
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	_nk_rect
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T2[ebp]
	jmp	SHORT $LN3@nk_window_
$LN2@nk_window_:

; 18699:     return ctx->current->bounds;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	add	ecx, 76					; 0000004cH
	mov	edx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR $T2[ebp]
$LN3@nk_window_:

; 18700: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_get_bounds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_window_find
_TEXT	SEGMENT
_title_hash$ = -20					; size = 4
_title_len$ = -8					; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_nk_window_find PROC					; COMDAT

; 18920: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18921:     int title_len;
; 18922:     nk_hash title_hash;
; 18923:     title_len = (int)nk_strlen(name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _title_len$[ebp], eax

; 18924:     title_hash = nk_murmur_hash(name, (int)title_len, NK_WINDOW_TITLE);

	push	64					; 00000040H
	mov	eax, DWORD PTR _title_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_nk_murmur_hash
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _title_hash$[ebp], eax

; 18925:     return nk_find_window(ctx, title_hash, name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title_hash$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_find_window
	add	esp, 12					; 0000000cH

; 18926: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_window_find ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_end
_TEXT	SEGMENT
_layout$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_end	PROC						; COMDAT

; 18676: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18677:     struct nk_panel *layout;
; 18678:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_end
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_end@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_end:

; 18679:     NK_ASSERT(ctx->current && "if this triggers you forgot to call `nk_begin`");

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	je	SHORT $LN8@nk_end
	mov	ecx, OFFSET ??_C@_0CP@PKIBPAED@if?5this?5triggers?5you?5forgot?5to?5c@
	test	ecx, ecx
	jne	SHORT $LN9@nk_end
$LN8@nk_end:
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_end@@9@9
	add	edx, 3
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1IC@IHIOPCBE@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAi?$AAf?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?5?$AAt?$AAr?$AAi?$AAg?$AAg?$AAe?$AAr@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@nk_end:

; 18680:     if (!ctx || !ctx->current)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@nk_end
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN4@nk_end
$LN3@nk_end:

; 18681:         return;

	jmp	SHORT $LN5@nk_end
$LN4@nk_end:

; 18682: 
; 18683:     layout = ctx->current->layout;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR _layout$[ebp], edx

; 18684:     if (!layout || (layout->type == NK_PANEL_WINDOW && (ctx->current->flags & NK_WINDOW_HIDDEN))) {

	cmp	DWORD PTR _layout$[ebp], 0
	je	SHORT $LN1@nk_end
	mov	eax, DWORD PTR _layout$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN2@nk_end
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+72]
	and	edx, 8192				; 00002000H
	je	SHORT $LN2@nk_end
$LN1@nk_end:

; 18685:         ctx->current = 0;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+12940], 0

; 18686:         return;

	jmp	SHORT $LN5@nk_end
$LN2@nk_end:

; 18687:     }
; 18688:     nk_panel_end(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_panel_end
	add	esp, 4

; 18689:     nk_free_panel(ctx, ctx->current->layout);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12940]
	mov	edx, DWORD PTR [ecx+140]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_free_panel
	add	esp, 8

; 18690:     ctx->current = 0;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+12940], 0
$LN5@nk_end:

; 18691: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_end	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_begin_titled
_TEXT	SEGMENT
tv401 = -468						; size = 4
tv297 = -468						; size = 4
tv251 = -468						; size = 4
tv389 = -464						; size = 4
tv285 = -464						; size = 4
tv267 = -464						; size = 4
tv239 = -464						; size = 4
tv178 = -464						; size = 4
$T1 = -456						; size = 16
$T2 = -432						; size = 16
$T3 = -408						; size = 16
_iter_bounds$4 = -192					; size = 16
_iter_bounds$5 = -168					; size = 16
_win_bounds$6 = -144					; size = 16
_h$7 = -120						; size = 4
_iter$8 = -108						; size = 4
_ishovered$9 = -96					; size = 4
_inpanel$10 = -84					; size = 4
_name_length$11 = -72					; size = 4
_ret$ = -60						; size = 4
_title_len$ = -48					; size = 4
_title_hash$ = -36					; size = 4
_style$ = -24						; size = 4
_win$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_title$ = 16						; size = 4
_bounds$ = 20						; size = 16
_flags$ = 36						; size = 4
_nk_begin_titled PROC					; COMDAT

; 18522: {

	push	ebp
	mov	ebp, esp
	sub	esp, 468				; 000001d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-468]
	mov	ecx, 117				; 00000075H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 18523:     struct nk_window *win;
; 18524:     struct nk_style *style;
; 18525:     nk_hash title_hash;
; 18526:     int title_len;
; 18527:     int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 18528: 
; 18529:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN31@nk_begin_t
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_begin_titled@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN31@nk_begin_t:

; 18530:     NK_ASSERT(name);

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN32@nk_begin_t
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_begin_titled@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19HHIIBINK@?$AAn?$AAa?$AAm?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN32@nk_begin_t:

; 18531:     NK_ASSERT(title);

	cmp	DWORD PTR _title$[ebp], 0
	jne	SHORT $LN33@nk_begin_t
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_begin_titled@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@NFEAPLNL@?$AAt?$AAi?$AAt?$AAl?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN33@nk_begin_t:

; 18532:     NK_ASSERT(ctx->style.font && ctx->style.font->width && "if this triggers you forgot to add a font");

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+360], 0
	je	SHORT $LN34@nk_begin_t
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN34@nk_begin_t
	mov	eax, OFFSET ??_C@_0CK@BJLINOEN@if?5this?5triggers?5you?5forgot?5to?5a@
	test	eax, eax
	jne	SHORT $LN35@nk_begin_t
$LN34@nk_begin_t:
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_begin_titled@@9@9
	add	ecx, 10					; 0000000aH
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1LC@NJCFCJDB@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?4?$AAf?$AAo?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?4?$AAf?$AAo@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN35@nk_begin_t:

; 18533:     NK_ASSERT(!ctx->current && "if this triggers you missed a `nk_end` call");

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN36@nk_begin_t
	mov	ecx, OFFSET ??_C@_0CM@NPLMGOOB@if?5this?5triggers?5you?5missed?5a?5?$GAn@
	test	ecx, ecx
	jne	SHORT $LN37@nk_begin_t
$LN36@nk_begin_t:
	mov	edx, DWORD PTR ?__LINE__Var@?1??nk_begin_titled@@9@9
	add	edx, 11					; 0000000bH
	push	edx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1HO@LCINIEJG@?$AA?$CB?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAi?$AAf?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?5?$AAt?$AAr?$AAi?$AAg?$AAg?$AAe@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN37@nk_begin_t:

; 18534:     if (!ctx || ctx->current || !title || !name)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN27@nk_begin_t
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12940], 0
	jne	SHORT $LN27@nk_begin_t
	cmp	DWORD PTR _title$[ebp], 0
	je	SHORT $LN27@nk_begin_t
	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN28@nk_begin_t
$LN27@nk_begin_t:

; 18535:         return 0;

	xor	eax, eax
	jmp	$LN29@nk_begin_t
$LN28@nk_begin_t:

; 18536: 
; 18537:     /* find or create window */
; 18538:     style = &ctx->style;

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	mov	DWORD PTR _style$[ebp], eax

; 18539:     title_len = (int)nk_strlen(name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _title_len$[ebp], eax

; 18540:     title_hash = nk_murmur_hash(name, (int)title_len, NK_WINDOW_TITLE);

	push	64					; 00000040H
	mov	eax, DWORD PTR _title_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_nk_murmur_hash
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _title_hash$[ebp], eax

; 18541:     win = nk_find_window(ctx, title_hash, name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _title_hash$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_find_window
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _win$[ebp], eax

; 18542:     if (!win) {

	cmp	DWORD PTR _win$[ebp], 0
	jne	$LN26@nk_begin_t

; 18543:         /* create new window */
; 18544:         nk_size name_length = (nk_size)nk_strlen(name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_nk_strlen
	add	esp, 4
	mov	DWORD PTR _name_length$11[ebp], eax

; 18545:         win = (struct nk_window*)nk_create_window(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_create_window
	add	esp, 4
	mov	DWORD PTR _win$[ebp], eax

; 18546:         NK_ASSERT(win);

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN38@nk_begin_t
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_begin_titled@@9@9
	add	eax, 24					; 00000018H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17MIEKGGLN@?$AAw?$AAi?$AAn?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN38@nk_begin_t:

; 18547:         if (!win) return 0;

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN25@nk_begin_t
	xor	eax, eax
	jmp	$LN29@nk_begin_t
$LN25@nk_begin_t:

; 18548: 
; 18549:         if (flags & NK_WINDOW_BACKGROUND)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 256				; 00000100H
	je	SHORT $LN24@nk_begin_t

; 18550:             nk_insert_window(ctx, win, NK_INSERT_FRONT);

	push	1
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_insert_window
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN23@nk_begin_t
$LN24@nk_begin_t:

; 18551:         else nk_insert_window(ctx, win, NK_INSERT_BACK);

	push	0
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_insert_window
	add	esp, 12					; 0000000cH
$LN23@nk_begin_t:

; 18552:         nk_command_buffer_init(&win->buffer, &ctx->memory, NK_CLIPPING_ON);

	push	1
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5748				; 00001674H
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	_nk_command_buffer_init
	add	esp, 12					; 0000000cH

; 18553: 
; 18554:         win->flags = flags;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [eax+72], ecx

; 18555:         win->bounds = bounds;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx

; 18556:         win->name = title_hash;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _title_hash$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 18557:         name_length = NK_MIN(name_length, NK_WINDOW_MAX_NAME-1);

	cmp	DWORD PTR _name_length$11[ebp], 63	; 0000003fH
	jae	SHORT $LN39@nk_begin_t
	mov	eax, DWORD PTR _name_length$11[ebp]
	mov	DWORD PTR tv178[ebp], eax
	jmp	SHORT $LN40@nk_begin_t
$LN39@nk_begin_t:
	mov	DWORD PTR tv178[ebp], 63		; 0000003fH
$LN40@nk_begin_t:
	mov	ecx, DWORD PTR tv178[ebp]
	mov	DWORD PTR _name_length$11[ebp], ecx

; 18558:         NK_MEMCPY(win->name_string, name, name_length);

	mov	eax, DWORD PTR _name_length$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 8
	push	edx
	call	_nk_memcopy
	add	esp, 12					; 0000000cH

; 18559:         win->name_string[name_length] = 0;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, DWORD PTR _name_length$11[ebp]
	mov	BYTE PTR [eax+8], 0

; 18560:         win->popup.win = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+252], 0

; 18561:         if (!ctx->active)

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12936], 0
	jne	SHORT $LN22@nk_begin_t

; 18562:             ctx->active = win;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+12936], ecx
$LN22@nk_begin_t:

; 18563:     } else {

	jmp	$LN19@nk_begin_t
$LN26@nk_begin_t:

; 18564:         /* update window */
; 18565:         win->flags &= ~(nk_flags)(NK_WINDOW_PRIVATE-1);

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, -2048				; fffff800H
	mov	edx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 18566:         win->flags |= flags;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	or	ecx, DWORD PTR _flags$[ebp]
	mov	edx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 18567:         if (!(win->flags & (NK_WINDOW_MOVABLE | NK_WINDOW_SCALABLE)))

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 6
	jne	SHORT $LN20@nk_begin_t

; 18568:             win->bounds = bounds;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [eax+12], edx
$LN20@nk_begin_t:

; 18569:         /* If this assert triggers you either:
; 18570:          *
; 18571:          * I.) Have more than one window with the same name or
; 18572:          * II.) You forgot to actually draw the window.
; 18573:          *      More specific you did not call `nk_clear` (nk_clear will be
; 18574:          *      automatically called for you if you are using one of the
; 18575:          *      provided demo backends). */
; 18576:         NK_ASSERT(win->seq != ctx->seq);

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+12952]
	jne	SHORT $LN41@nk_begin_t
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_begin_titled@@9@9
	add	eax, 54					; 00000036H
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CK@MJEFJAFE@?$AAw?$AAi?$AAn?$AA?9?$AA?$DO?$AAs?$AAe?$AAq?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAs?$AAe?$AAq?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN41@nk_begin_t:

; 18577:         win->seq = ctx->seq;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+12952]
	mov	DWORD PTR [eax], edx

; 18578:         if (!ctx->active && !(win->flags & NK_WINDOW_HIDDEN))

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12936], 0
	jne	SHORT $LN19@nk_begin_t
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 8192				; 00002000H
	jne	SHORT $LN19@nk_begin_t

; 18579:             ctx->active = win;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+12936], ecx
$LN19@nk_begin_t:

; 18580:     }
; 18581:     if (win->flags & NK_WINDOW_HIDDEN) {

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 8192				; 00002000H
	je	SHORT $LN18@nk_begin_t

; 18582:         ctx->current = win;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+12940], ecx

; 18583:         win->layout = 0;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+140], 0

; 18584:         return 0;

	xor	eax, eax
	jmp	$LN29@nk_begin_t
$LN18@nk_begin_t:

; 18585:     }
; 18586: 
; 18587:     /* window overlapping */
; 18588:     if (!(win->flags & NK_WINDOW_HIDDEN) && !(win->flags & NK_WINDOW_NO_INPUT))

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 8192				; 00002000H
	jne	$LN1@nk_begin_t
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 1024				; 00000400H
	jne	$LN1@nk_begin_t

; 18589:     {
; 18590:         int inpanel, ishovered;
; 18591:         struct nk_window *iter = win;

	mov	eax, DWORD PTR _win$[ebp]
	mov	DWORD PTR _iter$8[ebp], eax

; 18592:         float h = ctx->style.font->height + 2.0f * style->window.header.padding.y +
; 18593:             (2.0f * style->window.header.label_padding.y);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	mov	edx, DWORD PTR _style$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+5180]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _style$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [eax+5188]
	addss	xmm0, xmm1
	movss	DWORD PTR _h$7[ebp], xmm0

; 18594:         struct nk_rect win_bounds = (!(win->flags & NK_WINDOW_MINIMIZED))?
; 18595:             win->bounds: nk_rect(win->bounds.x, win->bounds.y, win->bounds.w, h);

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 32768				; 00008000H
	jne	SHORT $LN42@nk_begin_t
	mov	DWORD PTR tv239[ebp], 1
	jmp	SHORT $LN43@nk_begin_t
$LN42@nk_begin_t:
	mov	DWORD PTR tv239[ebp], 0
$LN43@nk_begin_t:
	cmp	DWORD PTR tv239[ebp], 0
	je	SHORT $LN44@nk_begin_t
	mov	edx, DWORD PTR _win$[ebp]
	add	edx, 76					; 0000004cH
	mov	DWORD PTR tv251[ebp], edx
	jmp	SHORT $LN45@nk_begin_t
$LN44@nk_begin_t:
	push	ecx
	movss	xmm0, DWORD PTR _h$7[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _win$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+84]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+80]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _win$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+76]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	_nk_rect
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv251[ebp], eax
$LN45@nk_begin_t:
	mov	ecx, DWORD PTR tv251[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _win_bounds$6[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _win_bounds$6[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _win_bounds$6[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _win_bounds$6[ebp+12], eax

; 18596: 
; 18597:         /* activate window if hovered and no other window is overlapping this window */
; 18598:         nk_start(ctx, win);

	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_start
	add	esp, 8

; 18599:         inpanel = nk_input_has_mouse_click_down_in_rect(&ctx->input, NK_BUTTON_LEFT, win_bounds, nk_true);

	push	1
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _win_bounds$6[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _win_bounds$6[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _win_bounds$6[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _win_bounds$6[ebp+12]
	mov	DWORD PTR [eax+12], edx
	push	0
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_input_has_mouse_click_down_in_rect
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _inpanel$10[ebp], eax

; 18600:         inpanel = inpanel && ctx->input.mouse.buttons[NK_BUTTON_LEFT].clicked;

	cmp	DWORD PTR _inpanel$10[ebp], 0
	je	SHORT $LN46@nk_begin_t
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+ecx+264], 0
	je	SHORT $LN46@nk_begin_t
	mov	DWORD PTR tv267[ebp], 1
	jmp	SHORT $LN47@nk_begin_t
$LN46@nk_begin_t:
	mov	DWORD PTR tv267[ebp], 0
$LN47@nk_begin_t:
	mov	eax, DWORD PTR tv267[ebp]
	mov	DWORD PTR _inpanel$10[ebp], eax

; 18601:         ishovered = nk_input_is_mouse_hovering_rect(&ctx->input, win_bounds);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _win_bounds$6[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _win_bounds$6[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _win_bounds$6[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _win_bounds$6[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_input_is_mouse_hovering_rect
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ishovered$9[ebp], eax

; 18602:         if ((win != ctx->active) && ishovered && !ctx->input.mouse.buttons[NK_BUTTON_LEFT].down) {

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	cmp	ecx, DWORD PTR [eax+12936]
	je	$LN14@nk_begin_t
	cmp	DWORD PTR _ishovered$9[ebp], 0
	je	$LN14@nk_begin_t
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+ecx+260], 0
	jne	$LN14@nk_begin_t

; 18603:             iter = win->next;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+376]
	mov	DWORD PTR _iter$8[ebp], ecx
$LN15@nk_begin_t:

; 18604:             while (iter) {

	cmp	DWORD PTR _iter$8[ebp], 0
	je	$LN14@nk_begin_t

; 18605:                 struct nk_rect iter_bounds = (!(iter->flags & NK_WINDOW_MINIMIZED))?
; 18606:                     iter->bounds: nk_rect(iter->bounds.x, iter->bounds.y, iter->bounds.w, h);

	mov	eax, DWORD PTR _iter$8[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 32768				; 00008000H
	jne	SHORT $LN48@nk_begin_t
	mov	DWORD PTR tv285[ebp], 1
	jmp	SHORT $LN49@nk_begin_t
$LN48@nk_begin_t:
	mov	DWORD PTR tv285[ebp], 0
$LN49@nk_begin_t:
	cmp	DWORD PTR tv285[ebp], 0
	je	SHORT $LN50@nk_begin_t
	mov	edx, DWORD PTR _iter$8[ebp]
	add	edx, 76					; 0000004cH
	mov	DWORD PTR tv297[ebp], edx
	jmp	SHORT $LN51@nk_begin_t
$LN50@nk_begin_t:
	push	ecx
	movss	xmm0, DWORD PTR _h$7[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iter$8[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+84]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _iter$8[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+80]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _iter$8[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+76]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	_nk_rect
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv297[ebp], eax
$LN51@nk_begin_t:
	mov	ecx, DWORD PTR tv297[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _iter_bounds$5[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _iter_bounds$5[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _iter_bounds$5[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _iter_bounds$5[ebp+12], eax

; 18607:                 if (NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
; 18608:                     iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
; 18609:                     (!(iter->flags & NK_WINDOW_HIDDEN)))

	movss	xmm0, DWORD PTR _win_bounds$6[ebp]
	addss	xmm0, DWORD PTR _win_bounds$6[ebp+8]
	movss	xmm1, DWORD PTR _iter_bounds$5[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN13@nk_begin_t
	movss	xmm0, DWORD PTR _iter_bounds$5[ebp]
	addss	xmm0, DWORD PTR _iter_bounds$5[ebp+8]
	movss	xmm1, DWORD PTR _win_bounds$6[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN13@nk_begin_t
	movss	xmm0, DWORD PTR _win_bounds$6[ebp+4]
	addss	xmm0, DWORD PTR _win_bounds$6[ebp+12]
	movss	xmm1, DWORD PTR _iter_bounds$5[ebp+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN13@nk_begin_t
	movss	xmm0, DWORD PTR _iter_bounds$5[ebp+4]
	addss	xmm0, DWORD PTR _iter_bounds$5[ebp+12]
	movss	xmm1, DWORD PTR _win_bounds$6[ebp+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN13@nk_begin_t
	mov	eax, DWORD PTR _iter$8[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 8192				; 00002000H
	jne	SHORT $LN13@nk_begin_t

; 18610:                     break;

	jmp	$LN14@nk_begin_t
$LN13@nk_begin_t:

; 18611: 
; 18612:                 if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
; 18613:                     NK_INTERSECT(win->bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
; 18614:                     iter->popup.win->bounds.x, iter->popup.win->bounds.y,
; 18615:                     iter->popup.win->bounds.w, iter->popup.win->bounds.h))

	mov	eax, DWORD PTR _iter$8[ebp]
	cmp	DWORD PTR [eax+252], 0
	je	$LN12@nk_begin_t
	mov	eax, DWORD PTR _iter$8[ebp]
	cmp	DWORD PTR [eax+284], 0
	je	$LN12@nk_begin_t
	mov	eax, DWORD PTR _iter$8[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 8192				; 00002000H
	jne	$LN12@nk_begin_t
	mov	eax, DWORD PTR _iter$8[ebp]
	mov	ecx, DWORD PTR [eax+252]
	mov	edx, DWORD PTR _win$[ebp]
	movss	xmm0, DWORD PTR [edx+76]
	addss	xmm0, DWORD PTR _win_bounds$6[ebp+8]
	movss	xmm1, DWORD PTR [ecx+76]
	comiss	xmm1, xmm0
	ja	SHORT $LN12@nk_begin_t
	mov	eax, DWORD PTR _iter$8[ebp]
	mov	ecx, DWORD PTR [eax+252]
	mov	edx, DWORD PTR _iter$8[ebp]
	mov	eax, DWORD PTR [edx+252]
	movss	xmm0, DWORD PTR [ecx+76]
	addss	xmm0, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _win$[ebp]
	movss	xmm1, DWORD PTR [ecx+76]
	comiss	xmm1, xmm0
	ja	SHORT $LN12@nk_begin_t
	mov	eax, DWORD PTR _iter$8[ebp]
	mov	ecx, DWORD PTR [eax+252]
	movss	xmm0, DWORD PTR _win_bounds$6[ebp+4]
	addss	xmm0, DWORD PTR _win_bounds$6[ebp+12]
	movss	xmm1, DWORD PTR [ecx+80]
	comiss	xmm1, xmm0
	ja	SHORT $LN12@nk_begin_t
	mov	eax, DWORD PTR _iter$8[ebp]
	mov	ecx, DWORD PTR [eax+252]
	mov	edx, DWORD PTR _iter$8[ebp]
	mov	eax, DWORD PTR [edx+252]
	movss	xmm0, DWORD PTR [ecx+80]
	addss	xmm0, DWORD PTR [eax+88]
	movss	xmm1, DWORD PTR _win_bounds$6[ebp+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN12@nk_begin_t

; 18616:                     break;

	jmp	SHORT $LN14@nk_begin_t
$LN12@nk_begin_t:

; 18617:                 iter = iter->next;

	mov	eax, DWORD PTR _iter$8[ebp]
	mov	ecx, DWORD PTR [eax+376]
	mov	DWORD PTR _iter$8[ebp], ecx

; 18618:             }

	jmp	$LN15@nk_begin_t
$LN14@nk_begin_t:

; 18619:         }
; 18620: 
; 18621:         /* activate window if clicked */
; 18622:         if (iter && inpanel && (win != ctx->end)) {

	cmp	DWORD PTR _iter$8[ebp], 0
	je	$LN9@nk_begin_t
	cmp	DWORD PTR _inpanel$10[ebp], 0
	je	$LN9@nk_begin_t
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	cmp	ecx, DWORD PTR [eax+12932]
	je	$LN9@nk_begin_t

; 18623:             iter = win->next;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+376]
	mov	DWORD PTR _iter$8[ebp], ecx
$LN10@nk_begin_t:

; 18624:             while (iter) {

	cmp	DWORD PTR _iter$8[ebp], 0
	je	$LN9@nk_begin_t

; 18625:                 /* try to find a panel with higher priority in the same position */
; 18626:                 struct nk_rect iter_bounds = (!(iter->flags & NK_WINDOW_MINIMIZED))?
; 18627:                 iter->bounds: nk_rect(iter->bounds.x, iter->bounds.y, iter->bounds.w, h);

	mov	eax, DWORD PTR _iter$8[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 32768				; 00008000H
	jne	SHORT $LN52@nk_begin_t
	mov	DWORD PTR tv389[ebp], 1
	jmp	SHORT $LN53@nk_begin_t
$LN52@nk_begin_t:
	mov	DWORD PTR tv389[ebp], 0
$LN53@nk_begin_t:
	cmp	DWORD PTR tv389[ebp], 0
	je	SHORT $LN54@nk_begin_t
	mov	edx, DWORD PTR _iter$8[ebp]
	add	edx, 76					; 0000004cH
	mov	DWORD PTR tv401[ebp], edx
	jmp	SHORT $LN55@nk_begin_t
$LN54@nk_begin_t:
	push	ecx
	movss	xmm0, DWORD PTR _h$7[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iter$8[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+84]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _iter$8[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+80]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _iter$8[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+76]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	_nk_rect
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv401[ebp], eax
$LN55@nk_begin_t:
	mov	ecx, DWORD PTR tv401[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _iter_bounds$4[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _iter_bounds$4[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _iter_bounds$4[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _iter_bounds$4[ebp+12], eax

; 18628:                 if (NK_INBOX(ctx->input.mouse.pos.x, ctx->input.mouse.pos.y,
; 18629:                     iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
; 18630:                     !(iter->flags & NK_WINDOW_HIDDEN))

	mov	eax, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR [eax+324]
	comiss	xmm0, DWORD PTR _iter_bounds$4[ebp]
	jb	SHORT $LN8@nk_begin_t
	mov	eax, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR _iter_bounds$4[ebp]
	addss	xmm0, DWORD PTR _iter_bounds$4[ebp+8]
	comiss	xmm0, DWORD PTR [eax+324]
	jbe	SHORT $LN8@nk_begin_t
	mov	eax, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	comiss	xmm0, DWORD PTR _iter_bounds$4[ebp+4]
	jb	SHORT $LN8@nk_begin_t
	mov	eax, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR _iter_bounds$4[ebp+4]
	addss	xmm0, DWORD PTR _iter_bounds$4[ebp+12]
	comiss	xmm0, DWORD PTR [eax+328]
	jbe	SHORT $LN8@nk_begin_t
	mov	eax, DWORD PTR _iter$8[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 8192				; 00002000H
	jne	SHORT $LN8@nk_begin_t

; 18631:                     break;

	jmp	$LN9@nk_begin_t
$LN8@nk_begin_t:

; 18632:                 if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
; 18633:                     NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
; 18634:                     iter->popup.win->bounds.x, iter->popup.win->bounds.y,
; 18635:                     iter->popup.win->bounds.w, iter->popup.win->bounds.h))

	mov	eax, DWORD PTR _iter$8[ebp]
	cmp	DWORD PTR [eax+252], 0
	je	$LN7@nk_begin_t
	mov	eax, DWORD PTR _iter$8[ebp]
	cmp	DWORD PTR [eax+284], 0
	je	$LN7@nk_begin_t
	mov	eax, DWORD PTR _iter$8[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 8192				; 00002000H
	jne	$LN7@nk_begin_t
	mov	eax, DWORD PTR _iter$8[ebp]
	mov	ecx, DWORD PTR [eax+252]
	movss	xmm0, DWORD PTR _win_bounds$6[ebp]
	addss	xmm0, DWORD PTR _win_bounds$6[ebp+8]
	movss	xmm1, DWORD PTR [ecx+76]
	comiss	xmm1, xmm0
	ja	SHORT $LN7@nk_begin_t
	mov	eax, DWORD PTR _iter$8[ebp]
	mov	ecx, DWORD PTR [eax+252]
	mov	edx, DWORD PTR _iter$8[ebp]
	mov	eax, DWORD PTR [edx+252]
	movss	xmm0, DWORD PTR [ecx+76]
	addss	xmm0, DWORD PTR [eax+84]
	movss	xmm1, DWORD PTR _win_bounds$6[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN7@nk_begin_t
	mov	eax, DWORD PTR _iter$8[ebp]
	mov	ecx, DWORD PTR [eax+252]
	movss	xmm0, DWORD PTR _win_bounds$6[ebp+4]
	addss	xmm0, DWORD PTR _win_bounds$6[ebp+12]
	movss	xmm1, DWORD PTR [ecx+80]
	comiss	xmm1, xmm0
	ja	SHORT $LN7@nk_begin_t
	mov	eax, DWORD PTR _iter$8[ebp]
	mov	ecx, DWORD PTR [eax+252]
	mov	edx, DWORD PTR _iter$8[ebp]
	mov	eax, DWORD PTR [edx+252]
	movss	xmm0, DWORD PTR [ecx+80]
	addss	xmm0, DWORD PTR [eax+88]
	movss	xmm1, DWORD PTR _win_bounds$6[ebp+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN7@nk_begin_t

; 18636:                     break;

	jmp	SHORT $LN9@nk_begin_t
$LN7@nk_begin_t:

; 18637:                 iter = iter->next;

	mov	eax, DWORD PTR _iter$8[ebp]
	mov	ecx, DWORD PTR [eax+376]
	mov	DWORD PTR _iter$8[ebp], ecx

; 18638:             }

	jmp	$LN10@nk_begin_t
$LN9@nk_begin_t:

; 18639:         }
; 18640:         if (iter && !(win->flags & NK_WINDOW_ROM) && (win->flags & NK_WINDOW_BACKGROUND)) {

	cmp	DWORD PTR _iter$8[ebp], 0
	je	$LN6@nk_begin_t
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 4096				; 00001000H
	jne	SHORT $LN6@nk_begin_t
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 256				; 00000100H
	je	SHORT $LN6@nk_begin_t

; 18641:             win->flags |= (nk_flags)NK_WINDOW_ROM;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	or	ecx, 4096				; 00001000H
	mov	edx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 18642:             iter->flags &= ~(nk_flags)NK_WINDOW_ROM;

	mov	eax, DWORD PTR _iter$8[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, -4097				; ffffefffH
	mov	edx, DWORD PTR _iter$8[ebp]
	mov	DWORD PTR [edx+72], ecx

; 18643:             ctx->active = iter;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _iter$8[ebp]
	mov	DWORD PTR [eax+12936], ecx

; 18644:             if (!(iter->flags & NK_WINDOW_BACKGROUND)) {

	mov	eax, DWORD PTR _iter$8[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 256				; 00000100H
	jne	SHORT $LN5@nk_begin_t

; 18645:                 /* current window is active in that position so transfer to top
; 18646:                  * at the highest priority in stack */
; 18647:                 nk_remove_window(ctx, iter);

	mov	eax, DWORD PTR _iter$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_remove_window
	add	esp, 8

; 18648:                 nk_insert_window(ctx, iter, NK_INSERT_BACK);

	push	0
	mov	eax, DWORD PTR _iter$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_insert_window
	add	esp, 12					; 0000000cH
$LN5@nk_begin_t:

; 18649:             }
; 18650:         } else {

	jmp	$LN1@nk_begin_t
$LN6@nk_begin_t:

; 18651:             if (!iter && ctx->end != win) {

	cmp	DWORD PTR _iter$8[ebp], 0
	jne	SHORT $LN3@nk_begin_t
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12932]
	cmp	ecx, DWORD PTR _win$[ebp]
	je	SHORT $LN3@nk_begin_t

; 18652:                 if (!(win->flags & NK_WINDOW_BACKGROUND)) {

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 256				; 00000100H
	jne	SHORT $LN2@nk_begin_t

; 18653:                     /* current window is active in that position so transfer to top
; 18654:                      * at the highest priority in stack */
; 18655:                     nk_remove_window(ctx, win);

	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_remove_window
	add	esp, 8

; 18656:                     nk_insert_window(ctx, win, NK_INSERT_BACK);

	push	0
	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_insert_window
	add	esp, 12					; 0000000cH
$LN2@nk_begin_t:

; 18657:                 }
; 18658:                 win->flags &= ~(nk_flags)NK_WINDOW_ROM;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, -4097				; ffffefffH
	mov	edx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 18659:                 ctx->active = win;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+12936], ecx
$LN3@nk_begin_t:

; 18660:             }
; 18661:             if (ctx->end != win && !(win->flags & NK_WINDOW_BACKGROUND))

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12932]
	cmp	ecx, DWORD PTR _win$[ebp]
	je	SHORT $LN1@nk_begin_t
	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 256				; 00000100H
	jne	SHORT $LN1@nk_begin_t

; 18662:                 win->flags |= NK_WINDOW_ROM;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	or	ecx, 4096				; 00001000H
	mov	edx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [edx+72], ecx
$LN1@nk_begin_t:

; 18663:         }
; 18664:     }
; 18665: 
; 18666:     win->layout = (struct nk_panel*)nk_create_panel(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_create_panel
	add	esp, 4
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+140], eax

; 18667:     ctx->current = win;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+12940], ecx

; 18668:     ret = nk_panel_begin(ctx, title, NK_PANEL_WINDOW);

	push	1
	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_panel_begin
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 18669:     win->layout->offset_x = &win->scrollbar.x;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR [edx+24], eax

; 18670:     win->layout->offset_y = &win->scrollbar.y;

	mov	eax, DWORD PTR _win$[ebp]
	add	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR [edx+28], eax

; 18671:     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN29@nk_begin_t:

; 18672: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN60@nk_begin_t
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 468				; 000001d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN60@nk_begin_t:
	DD	3
	DD	$LN59@nk_begin_t
$LN59@nk_begin_t:
	DD	-144					; ffffff70H
	DD	16					; 00000010H
	DD	$LN56@nk_begin_t
	DD	-168					; ffffff58H
	DD	16					; 00000010H
	DD	$LN57@nk_begin_t
	DD	-192					; ffffff40H
	DD	16					; 00000010H
	DD	$LN58@nk_begin_t
$LN58@nk_begin_t:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN57@nk_begin_t:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN56@nk_begin_t:
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_nk_begin_titled ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_begin
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_title$ = 12						; size = 4
_bounds$ = 16						; size = 16
_flags$ = 32						; size = 4
_nk_begin PROC						; COMDAT

; 18515: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 18516:     return nk_begin_titled(ctx, title, title, bounds, flags);

	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bounds$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bounds$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bounds$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	mov	edx, DWORD PTR _title$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_begin_titled
	add	esp, 32					; 00000020H

; 18517: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk__draw_next
_TEXT	SEGMENT
_cmd$ = 8						; size = 4
_buffer$ = 12						; size = 4
_ctx$ = 16						; size = 4
_nk__draw_next PROC					; COMDAT

; 9109 : {return nk__draw_list_next(cmd, buffer, &ctx->draw_list);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 7332				; 00001ca4H
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cmd$[ebp]
	push	edx
	call	_nk__draw_list_next
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk__draw_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk__draw_end
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_buffer$ = 12						; size = 4
_nk__draw_end PROC					; COMDAT

; 9104 : {return nk__draw_list_end(&ctx->draw_list, buffer);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 7332				; 00001ca4H
	push	ecx
	call	_nk__draw_list_end
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk__draw_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk__draw_begin
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_buffer$ = 12						; size = 4
_nk__draw_begin PROC					; COMDAT

; 9100 : {return nk__draw_list_begin(&ctx->draw_list, buffer);}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 7332				; 00001ca4H
	push	ecx
	call	_nk__draw_list_begin
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk__draw_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_convert
_TEXT	SEGMENT
tv798 = -664						; size = 4
tv793 = -664						; size = 4
tv788 = -664						; size = 4
tv164 = -664						; size = 4
$T1 = -656						; size = 16
$T2 = -632						; size = 16
$T3 = -608						; size = 16
$T4 = -584						; size = 16
$T5 = -560						; size = 16
$T6 = -536						; size = 16
_c$7 = -320						; size = 4
_i$8 = -308						; size = 4
_t$9 = -296						; size = 4
_pnt$10 = -284						; size = 8
_p$11 = -268						; size = 4
_i$12 = -256						; size = 4
_pnt$13 = -244						; size = 8
_p$14 = -228						; size = 4
_i$15 = -216						; size = 4
_pnt$16 = -204						; size = 8
_p$17 = -188						; size = 4
_i$18 = -176						; size = 4
_t$19 = -164						; size = 4
_t$20 = -152						; size = 4
_c$21 = -140						; size = 4
_c$22 = -128						; size = 4
_c$23 = -116						; size = 4
_c$24 = -104						; size = 4
_r$25 = -92						; size = 4
_r$26 = -80						; size = 4
_r$27 = -68						; size = 4
_q$28 = -56						; size = 4
_l$29 = -44						; size = 4
_s$30 = -32						; size = 4
_cmd$ = -20						; size = 4
_res$ = -8						; size = 4
_ctx$ = 8						; size = 4
_cmds$ = 12						; size = 4
_vertices$ = 16						; size = 4
_elements$ = 20						; size = 4
_config$ = 24						; size = 4
_nk_convert PROC					; COMDAT

; 8959 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 664				; 00000298H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-664]
	mov	ecx, 166				; 000000a6H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8960 :     nk_flags res = NK_CONVERT_SUCCESS;

	mov	DWORD PTR _res$[ebp], 0

; 8961 :     const struct nk_command *cmd;
; 8962 :     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN39@nk_convert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_convert@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN39@nk_convert:

; 8963 :     NK_ASSERT(cmds);

	cmp	DWORD PTR _cmds$[ebp], 0
	jne	SHORT $LN40@nk_convert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_convert@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19IHKENPKO@?$AAc?$AAm?$AAd?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN40@nk_convert:

; 8964 :     NK_ASSERT(vertices);

	cmp	DWORD PTR _vertices$[ebp], 0
	jne	SHORT $LN41@nk_convert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_convert@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BC@GCIAJMPE@?$AAv?$AAe?$AAr?$AAt?$AAi?$AAc?$AAe?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN41@nk_convert:

; 8965 :     NK_ASSERT(elements);

	cmp	DWORD PTR _elements$[ebp], 0
	jne	SHORT $LN42@nk_convert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_convert@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1BC@KAKDHGPA@?$AAe?$AAl?$AAe?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN42@nk_convert:

; 8966 :     NK_ASSERT(config);

	cmp	DWORD PTR _config$[ebp], 0
	jne	SHORT $LN43@nk_convert
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_convert@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@NEJONDGE@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN43@nk_convert:

; 8967 :     NK_ASSERT(config->vertex_layout);

	mov	eax, DWORD PTR _config$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN44@nk_convert
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_convert@@9@9
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CM@DMOLPMEO@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAv?$AAe?$AAr?$AAt?$AAe?$AAx?$AA_?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN44@nk_convert:

; 8968 :     NK_ASSERT(config->vertex_size);

	mov	eax, DWORD PTR _config$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN45@nk_convert
	mov	ecx, DWORD PTR ?__LINE__Var@?1??nk_convert@@9@9
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1CI@EPGEFOHG@?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?9?$AA?$DO?$AAv?$AAe?$AAr?$AAt?$AAe?$AAx?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN45@nk_convert:

; 8969 :     if (!ctx || !cmds || !vertices || !elements || !config || !config->vertex_layout)

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN35@nk_convert
	cmp	DWORD PTR _cmds$[ebp], 0
	je	SHORT $LN35@nk_convert
	cmp	DWORD PTR _vertices$[ebp], 0
	je	SHORT $LN35@nk_convert
	cmp	DWORD PTR _elements$[ebp], 0
	je	SHORT $LN35@nk_convert
	cmp	DWORD PTR _config$[ebp], 0
	je	SHORT $LN35@nk_convert
	mov	eax, DWORD PTR _config$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN36@nk_convert
$LN35@nk_convert:

; 8970 :         return NK_CONVERT_INVALID_PARAM;

	mov	eax, 1
	jmp	$LN37@nk_convert
$LN36@nk_convert:

; 8971 : 
; 8972 :     nk_draw_list_setup(&ctx->draw_list, config, cmds, vertices, elements,
; 8973 :         config->line_AA, config->shape_AA);

	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _config$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _elements$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vertices$[ebp]
	push	edx
	mov	eax, DWORD PTR _cmds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _config$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 7332				; 00001ca4H
	push	edx
	call	_nk_draw_list_setup
	add	esp, 28					; 0000001cH

; 8974 :     nk_foreach(cmd, ctx)

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk__begin
	add	esp, 4
	mov	DWORD PTR _cmd$[ebp], eax
	jmp	SHORT $LN34@nk_convert
$LN33@nk_convert:
	mov	eax, DWORD PTR _cmd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk__next
	add	esp, 8
	mov	DWORD PTR _cmd$[ebp], eax
$LN34@nk_convert:
	cmp	DWORD PTR _cmd$[ebp], 0
	je	$LN32@nk_convert

; 8975 :     {
; 8976 : #ifdef NK_INCLUDE_COMMAND_USERDATA
; 8977 :         ctx->draw_list.userdata = cmd->userdata;
; 8978 : #endif
; 8979 :         switch (cmd->type) {

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv164[ebp], ecx
	mov	edx, DWORD PTR tv164[ebp]
	sub	edx, 1
	mov	DWORD PTR tv164[ebp], edx
	cmp	DWORD PTR tv164[ebp], 17		; 00000011H
	ja	$LN1@nk_convert
	mov	eax, DWORD PTR tv164[ebp]
	jmp	DWORD PTR $LN57@nk_convert[eax*4]

; 8980 :         case NK_COMMAND_NOP: break;

	jmp	$LN30@nk_convert
$LN28@nk_convert:

; 8981 :         case NK_COMMAND_SCISSOR: {
; 8982 :             const struct nk_command_scissor *s = (const struct nk_command_scissor*)cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _s$30[ebp], eax

; 8983 :             nk_draw_list_add_clip(&ctx->draw_list, nk_rect(s->x, s->y, s->w, s->h));

	mov	eax, DWORD PTR _s$30[ebp]
	movzx	ecx, WORD PTR [eax+14]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _s$30[ebp]
	movzx	eax, WORD PTR [edx+12]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _s$30[ebp]
	movsx	edx, WORD PTR [ecx+10]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _s$30[ebp]
	movsx	ecx, WORD PTR [eax+8]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	_nk_rect
	add	esp, 4
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 7332				; 00001ca4H
	push	ecx
	call	_nk_draw_list_add_clip
	add	esp, 20					; 00000014H

; 8984 :         } break;

	jmp	$LN30@nk_convert
$LN27@nk_convert:

; 8985 :         case NK_COMMAND_LINE: {
; 8986 :             const struct nk_command_line *l = (const struct nk_command_line*)cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _l$29[ebp], eax

; 8987 :             nk_draw_list_stroke_line(&ctx->draw_list, nk_vec2(l->begin.x, l->begin.y),
; 8988 :                 nk_vec2(l->end.x, l->end.y), l->color, l->line_thickness);

	mov	eax, DWORD PTR _l$29[ebp]
	movzx	ecx, WORD PTR [eax+8]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _l$29[ebp]
	mov	eax, DWORD PTR [edx+18]
	push	eax
	mov	ecx, DWORD PTR _l$29[ebp]
	movsx	edx, WORD PTR [ecx+16]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _l$29[ebp]
	movsx	ecx, WORD PTR [eax+14]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	edx, DWORD PTR _l$29[ebp]
	movsx	eax, WORD PTR [edx+12]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _l$29[ebp]
	movsx	edx, WORD PTR [ecx+10]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 7332				; 00001ca4H
	push	eax
	call	_nk_draw_list_stroke_line
	add	esp, 28					; 0000001cH

; 8989 :         } break;

	jmp	$LN30@nk_convert
$LN26@nk_convert:

; 8990 :         case NK_COMMAND_CURVE: {
; 8991 :             const struct nk_command_curve *q = (const struct nk_command_curve*)cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _q$28[ebp], eax

; 8992 :             nk_draw_list_stroke_curve(&ctx->draw_list, nk_vec2(q->begin.x, q->begin.y),
; 8993 :                 nk_vec2(q->ctrl[0].x, q->ctrl[0].y), nk_vec2(q->ctrl[1].x,
; 8994 :                 q->ctrl[1].y), nk_vec2(q->end.x, q->end.y), q->color,
; 8995 :                 config->curve_segment_count, q->line_thickness);

	mov	eax, DWORD PTR _q$28[ebp]
	movzx	ecx, WORD PTR [eax+8]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _config$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _q$28[ebp]
	mov	edx, DWORD PTR [ecx+26]
	push	edx
	mov	eax, DWORD PTR _q$28[ebp]
	movsx	ecx, WORD PTR [eax+16]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _q$28[ebp]
	movsx	eax, WORD PTR [edx+14]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _q$28[ebp]
	movsx	eax, WORD PTR [edx+ecx+20]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _q$28[ebp]
	movsx	eax, WORD PTR [edx+ecx+18]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _q$28[ebp]
	movsx	ecx, WORD PTR [eax+edx+20]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _q$28[ebp]
	movsx	edx, WORD PTR [ecx+eax+18]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _q$28[ebp]
	movsx	ecx, WORD PTR [eax+12]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _q$28[ebp]
	movsx	eax, WORD PTR [edx+10]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 7332				; 00001ca4H
	push	ecx
	call	_nk_draw_list_stroke_curve
	add	esp, 48					; 00000030H

; 8996 :         } break;

	jmp	$LN30@nk_convert
$LN25@nk_convert:

; 8997 :         case NK_COMMAND_RECT: {
; 8998 :             const struct nk_command_rect *r = (const struct nk_command_rect*)cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _r$27[ebp], eax

; 8999 :             nk_draw_list_stroke_rect(&ctx->draw_list, nk_rect(r->x, r->y, r->w, r->h),
; 9000 :                 r->color, (float)r->rounding, r->line_thickness);

	mov	eax, DWORD PTR _r$27[ebp]
	movzx	ecx, WORD PTR [eax+10]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _r$27[ebp]
	movzx	eax, WORD PTR [edx+8]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _r$27[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _r$27[ebp]
	movzx	ecx, WORD PTR [eax+18]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _r$27[ebp]
	movzx	eax, WORD PTR [edx+16]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _r$27[ebp]
	movsx	edx, WORD PTR [ecx+14]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _r$27[ebp]
	movsx	ecx, WORD PTR [eax+12]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	_nk_rect
	add	esp, 4
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 7332				; 00001ca4H
	push	ecx
	call	_nk_draw_list_stroke_rect
	add	esp, 32					; 00000020H

; 9001 :         } break;

	jmp	$LN30@nk_convert
$LN24@nk_convert:

; 9002 :         case NK_COMMAND_RECT_FILLED: {
; 9003 :             const struct nk_command_rect_filled *r = (const struct nk_command_rect_filled*)cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _r$26[ebp], eax

; 9004 :             nk_draw_list_fill_rect(&ctx->draw_list, nk_rect(r->x, r->y, r->w, r->h),
; 9005 :                 r->color, (float)r->rounding);

	mov	eax, DWORD PTR _r$26[ebp]
	movzx	ecx, WORD PTR [eax+8]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _r$26[ebp]
	mov	eax, DWORD PTR [edx+18]
	push	eax
	mov	ecx, DWORD PTR _r$26[ebp]
	movzx	edx, WORD PTR [ecx+16]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _r$26[ebp]
	movzx	ecx, WORD PTR [eax+14]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _r$26[ebp]
	movsx	eax, WORD PTR [edx+12]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _r$26[ebp]
	movsx	edx, WORD PTR [ecx+10]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	_nk_rect
	add	esp, 4
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 7332				; 00001ca4H
	push	ecx
	call	_nk_draw_list_fill_rect
	add	esp, 28					; 0000001cH

; 9006 :         } break;

	jmp	$LN30@nk_convert
$LN23@nk_convert:

; 9007 :         case NK_COMMAND_RECT_MULTI_COLOR: {
; 9008 :             const struct nk_command_rect_multi_color *r = (const struct nk_command_rect_multi_color*)cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _r$25[ebp], eax

; 9009 :             nk_draw_list_fill_rect_multi_color(&ctx->draw_list, nk_rect(r->x, r->y, r->w, r->h),
; 9010 :                 r->left, r->top, r->right, r->bottom);

	mov	eax, DWORD PTR _r$25[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _r$25[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _r$25[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _r$25[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _r$25[ebp]
	movzx	eax, WORD PTR [edx+14]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _r$25[ebp]
	movzx	edx, WORD PTR [ecx+12]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _r$25[ebp]
	movsx	ecx, WORD PTR [eax+10]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _r$25[ebp]
	movsx	eax, WORD PTR [edx+8]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	_nk_rect
	add	esp, 4
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 7332				; 00001ca4H
	push	ecx
	call	_nk_draw_list_fill_rect_multi_color
	add	esp, 36					; 00000024H

; 9011 :         } break;

	jmp	$LN30@nk_convert
$LN22@nk_convert:

; 9012 :         case NK_COMMAND_CIRCLE: {
; 9013 :             const struct nk_command_circle *c = (const struct nk_command_circle*)cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _c$24[ebp], eax

; 9014 :             nk_draw_list_stroke_circle(&ctx->draw_list, nk_vec2((float)c->x + (float)c->w/2,
; 9015 :                 (float)c->y + (float)c->h/2), (float)c->w/2, c->color,
; 9016 :                 config->circle_segment_count, c->line_thickness);

	mov	eax, DWORD PTR _c$24[ebp]
	movzx	ecx, WORD PTR [eax+12]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _config$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _c$24[ebp]
	mov	edx, DWORD PTR [ecx+18]
	push	edx
	mov	eax, DWORD PTR _c$24[ebp]
	movzx	ecx, WORD PTR [eax+14]
	cvtsi2ss xmm0, ecx
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _c$24[ebp]
	movsx	eax, WORD PTR [edx+10]
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _c$24[ebp]
	movzx	edx, WORD PTR [ecx+16]
	cvtsi2ss xmm1, edx
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _c$24[ebp]
	movsx	ecx, WORD PTR [eax+8]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _c$24[ebp]
	movzx	eax, WORD PTR [edx+14]
	cvtsi2ss xmm1, eax
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 7332				; 00001ca4H
	push	ecx
	call	_nk_draw_list_stroke_circle
	add	esp, 28					; 0000001cH

; 9017 :         } break;

	jmp	$LN30@nk_convert
$LN21@nk_convert:

; 9018 :         case NK_COMMAND_CIRCLE_FILLED: {
; 9019 :             const struct nk_command_circle_filled *c = (const struct nk_command_circle_filled *)cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _c$23[ebp], eax

; 9020 :             nk_draw_list_fill_circle(&ctx->draw_list, nk_vec2((float)c->x + (float)c->w/2,
; 9021 :                 (float)c->y + (float)c->h/2), (float)c->w/2, c->color,
; 9022 :                 config->circle_segment_count);

	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _c$23[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _c$23[ebp]
	movzx	edx, WORD PTR [ecx+12]
	cvtsi2ss xmm0, edx
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _c$23[ebp]
	movsx	ecx, WORD PTR [eax+10]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _c$23[ebp]
	movzx	eax, WORD PTR [edx+14]
	cvtsi2ss xmm1, eax
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _c$23[ebp]
	movsx	edx, WORD PTR [ecx+8]
	cvtsi2ss xmm0, edx
	mov	eax, DWORD PTR _c$23[ebp]
	movzx	ecx, WORD PTR [eax+12]
	cvtsi2ss xmm1, ecx
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 7332				; 00001ca4H
	push	edx
	call	_nk_draw_list_fill_circle
	add	esp, 24					; 00000018H

; 9023 :         } break;

	jmp	$LN30@nk_convert
$LN20@nk_convert:

; 9024 :         case NK_COMMAND_ARC: {
; 9025 :             const struct nk_command_arc *c = (const struct nk_command_arc*)cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _c$22[ebp], eax

; 9026 :             nk_draw_list_path_line_to(&ctx->draw_list, nk_vec2(c->cx, c->cy));

	mov	eax, DWORD PTR _c$22[ebp]
	movsx	ecx, WORD PTR [eax+10]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _c$22[ebp]
	movsx	eax, WORD PTR [edx+8]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 7332				; 00001ca4H
	push	ecx
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 9027 :             nk_draw_list_path_arc_to(&ctx->draw_list, nk_vec2(c->cx, c->cy), c->r,
; 9028 :                 c->a[0], c->a[1], config->arc_segment_count);

	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _c$22[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+16]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _c$22[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+16]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _c$22[ebp]
	movzx	edx, WORD PTR [ecx+12]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _c$22[ebp]
	movsx	ecx, WORD PTR [eax+10]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _c$22[ebp]
	movsx	eax, WORD PTR [edx+8]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 7332				; 00001ca4H
	push	ecx
	call	_nk_draw_list_path_arc_to
	add	esp, 28					; 0000001cH

; 9029 :             nk_draw_list_path_stroke(&ctx->draw_list, c->color, NK_STROKE_CLOSED, c->line_thickness);

	mov	eax, DWORD PTR _c$22[ebp]
	movzx	ecx, WORD PTR [eax+14]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	edx, DWORD PTR _c$22[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 7332				; 00001ca4H
	push	ecx
	call	_nk_draw_list_path_stroke
	add	esp, 16					; 00000010H

; 9030 :         } break;

	jmp	$LN30@nk_convert
$LN19@nk_convert:

; 9031 :         case NK_COMMAND_ARC_FILLED: {
; 9032 :             const struct nk_command_arc_filled *c = (const struct nk_command_arc_filled*)cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _c$21[ebp], eax

; 9033 :             nk_draw_list_path_line_to(&ctx->draw_list, nk_vec2(c->cx, c->cy));

	mov	eax, DWORD PTR _c$21[ebp]
	movsx	ecx, WORD PTR [eax+10]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _c$21[ebp]
	movsx	eax, WORD PTR [edx+8]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 7332				; 00001ca4H
	push	ecx
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 9034 :             nk_draw_list_path_arc_to(&ctx->draw_list, nk_vec2(c->cx, c->cy), c->r,
; 9035 :                 c->a[0], c->a[1], config->arc_segment_count);

	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _c$21[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+16]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _c$21[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+16]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _c$21[ebp]
	movzx	edx, WORD PTR [ecx+12]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _c$21[ebp]
	movsx	ecx, WORD PTR [eax+10]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _c$21[ebp]
	movsx	eax, WORD PTR [edx+8]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 7332				; 00001ca4H
	push	ecx
	call	_nk_draw_list_path_arc_to
	add	esp, 28					; 0000001cH

; 9036 :             nk_draw_list_path_fill(&ctx->draw_list, c->color);

	mov	eax, DWORD PTR _c$21[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 7332				; 00001ca4H
	push	edx
	call	_nk_draw_list_path_fill
	add	esp, 8

; 9037 :         } break;

	jmp	$LN30@nk_convert
$LN18@nk_convert:

; 9038 :         case NK_COMMAND_TRIANGLE: {
; 9039 :             const struct nk_command_triangle *t = (const struct nk_command_triangle*)cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _t$20[ebp], eax

; 9040 :             nk_draw_list_stroke_triangle(&ctx->draw_list, nk_vec2(t->a.x, t->a.y),
; 9041 :                 nk_vec2(t->b.x, t->b.y), nk_vec2(t->c.x, t->c.y), t->color,
; 9042 :                 t->line_thickness);

	mov	eax, DWORD PTR _t$20[ebp]
	movzx	ecx, WORD PTR [eax+8]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _t$20[ebp]
	mov	eax, DWORD PTR [edx+22]
	push	eax
	mov	ecx, DWORD PTR _t$20[ebp]
	movsx	edx, WORD PTR [ecx+20]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _t$20[ebp]
	movsx	ecx, WORD PTR [eax+18]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	edx, DWORD PTR _t$20[ebp]
	movsx	eax, WORD PTR [edx+16]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _t$20[ebp]
	movsx	edx, WORD PTR [ecx+14]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _t$20[ebp]
	movsx	ecx, WORD PTR [eax+12]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _t$20[ebp]
	movsx	eax, WORD PTR [edx+10]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 7332				; 00001ca4H
	push	ecx
	call	_nk_draw_list_stroke_triangle
	add	esp, 36					; 00000024H

; 9043 :         } break;

	jmp	$LN30@nk_convert
$LN17@nk_convert:

; 9044 :         case NK_COMMAND_TRIANGLE_FILLED: {
; 9045 :             const struct nk_command_triangle_filled *t = (const struct nk_command_triangle_filled*)cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _t$19[ebp], eax

; 9046 :             nk_draw_list_fill_triangle(&ctx->draw_list, nk_vec2(t->a.x, t->a.y),
; 9047 :                 nk_vec2(t->b.x, t->b.y), nk_vec2(t->c.x, t->c.y), t->color);

	mov	eax, DWORD PTR _t$19[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _t$19[ebp]
	movsx	eax, WORD PTR [edx+18]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _t$19[ebp]
	movsx	edx, WORD PTR [ecx+16]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	eax, DWORD PTR _t$19[ebp]
	movsx	ecx, WORD PTR [eax+14]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _t$19[ebp]
	movsx	eax, WORD PTR [edx+12]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	ecx, DWORD PTR _t$19[ebp]
	movsx	edx, WORD PTR [ecx+10]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _t$19[ebp]
	movsx	ecx, WORD PTR [eax+8]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	push	edx
	push	eax
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 7332				; 00001ca4H
	push	edx
	call	_nk_draw_list_fill_triangle
	add	esp, 32					; 00000020H

; 9048 :         } break;

	jmp	$LN30@nk_convert
$LN16@nk_convert:

; 9049 :         case NK_COMMAND_POLYGON: {
; 9050 :             int i;
; 9051 :             const struct nk_command_polygon*p = (const struct nk_command_polygon*)cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _p$17[ebp], eax

; 9052 :             for (i = 0; i < p->point_count; ++i) {

	mov	DWORD PTR _i$18[ebp], 0
	jmp	SHORT $LN15@nk_convert
$LN14@nk_convert:
	mov	eax, DWORD PTR _i$18[ebp]
	add	eax, 1
	mov	DWORD PTR _i$18[ebp], eax
$LN15@nk_convert:
	mov	eax, DWORD PTR _p$17[ebp]
	movzx	ecx, WORD PTR [eax+14]
	cmp	DWORD PTR _i$18[ebp], ecx
	jge	SHORT $LN13@nk_convert

; 9053 :                 struct nk_vec2 pnt = nk_vec2((float)p->points[i].x, (float)p->points[i].y);

	mov	eax, DWORD PTR _i$18[ebp]
	mov	ecx, DWORD PTR _p$17[ebp]
	movsx	edx, WORD PTR [ecx+eax*4+18]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$18[ebp]
	mov	ecx, DWORD PTR _p$17[ebp]
	movsx	edx, WORD PTR [ecx+eax*4+16]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _pnt$16[ebp], eax
	mov	DWORD PTR _pnt$16[ebp+4], edx

; 9054 :                 nk_draw_list_path_line_to(&ctx->draw_list, pnt);

	mov	eax, DWORD PTR _pnt$16[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pnt$16[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 7332				; 00001ca4H
	push	edx
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 9055 :             }

	jmp	$LN14@nk_convert
$LN13@nk_convert:

; 9056 :             nk_draw_list_path_stroke(&ctx->draw_list, p->color, NK_STROKE_CLOSED, p->line_thickness);

	mov	eax, DWORD PTR _p$17[ebp]
	movzx	ecx, WORD PTR [eax+12]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	edx, DWORD PTR _p$17[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 7332				; 00001ca4H
	push	ecx
	call	_nk_draw_list_path_stroke
	add	esp, 16					; 00000010H

; 9057 :         } break;

	jmp	$LN30@nk_convert
$LN12@nk_convert:

; 9058 :         case NK_COMMAND_POLYGON_FILLED: {
; 9059 :             int i;
; 9060 :             const struct nk_command_polygon_filled *p = (const struct nk_command_polygon_filled*)cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _p$14[ebp], eax

; 9061 :             for (i = 0; i < p->point_count; ++i) {

	mov	DWORD PTR _i$15[ebp], 0
	jmp	SHORT $LN11@nk_convert
$LN10@nk_convert:
	mov	eax, DWORD PTR _i$15[ebp]
	add	eax, 1
	mov	DWORD PTR _i$15[ebp], eax
$LN11@nk_convert:
	mov	eax, DWORD PTR _p$14[ebp]
	movzx	ecx, WORD PTR [eax+12]
	cmp	DWORD PTR _i$15[ebp], ecx
	jge	SHORT $LN9@nk_convert

; 9062 :                 struct nk_vec2 pnt = nk_vec2((float)p->points[i].x, (float)p->points[i].y);

	mov	eax, DWORD PTR _i$15[ebp]
	mov	ecx, DWORD PTR _p$14[ebp]
	movsx	edx, WORD PTR [ecx+eax*4+16]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$15[ebp]
	mov	ecx, DWORD PTR _p$14[ebp]
	movsx	edx, WORD PTR [ecx+eax*4+14]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _pnt$13[ebp], eax
	mov	DWORD PTR _pnt$13[ebp+4], edx

; 9063 :                 nk_draw_list_path_line_to(&ctx->draw_list, pnt);

	mov	eax, DWORD PTR _pnt$13[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pnt$13[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 7332				; 00001ca4H
	push	edx
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 9064 :             }

	jmp	$LN10@nk_convert
$LN9@nk_convert:

; 9065 :             nk_draw_list_path_fill(&ctx->draw_list, p->color);

	mov	eax, DWORD PTR _p$14[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 7332				; 00001ca4H
	push	edx
	call	_nk_draw_list_path_fill
	add	esp, 8

; 9066 :         } break;

	jmp	$LN30@nk_convert
$LN8@nk_convert:

; 9067 :         case NK_COMMAND_POLYLINE: {
; 9068 :             int i;
; 9069 :             const struct nk_command_polyline *p = (const struct nk_command_polyline*)cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _p$11[ebp], eax

; 9070 :             for (i = 0; i < p->point_count; ++i) {

	mov	DWORD PTR _i$12[ebp], 0
	jmp	SHORT $LN7@nk_convert
$LN6@nk_convert:
	mov	eax, DWORD PTR _i$12[ebp]
	add	eax, 1
	mov	DWORD PTR _i$12[ebp], eax
$LN7@nk_convert:
	mov	eax, DWORD PTR _p$11[ebp]
	movzx	ecx, WORD PTR [eax+14]
	cmp	DWORD PTR _i$12[ebp], ecx
	jge	SHORT $LN5@nk_convert

; 9071 :                 struct nk_vec2 pnt = nk_vec2((float)p->points[i].x, (float)p->points[i].y);

	mov	eax, DWORD PTR _i$12[ebp]
	mov	ecx, DWORD PTR _p$11[ebp]
	movsx	edx, WORD PTR [ecx+eax*4+18]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$12[ebp]
	mov	ecx, DWORD PTR _p$11[ebp]
	movsx	edx, WORD PTR [ecx+eax*4+16]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	DWORD PTR _pnt$10[ebp], eax
	mov	DWORD PTR _pnt$10[ebp+4], edx

; 9072 :                 nk_draw_list_path_line_to(&ctx->draw_list, pnt);

	mov	eax, DWORD PTR _pnt$10[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pnt$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 7332				; 00001ca4H
	push	edx
	call	_nk_draw_list_path_line_to
	add	esp, 12					; 0000000cH

; 9073 :             }

	jmp	$LN6@nk_convert
$LN5@nk_convert:

; 9074 :             nk_draw_list_path_stroke(&ctx->draw_list, p->color, NK_STROKE_OPEN, p->line_thickness);

	mov	eax, DWORD PTR _p$11[ebp]
	movzx	ecx, WORD PTR [eax+12]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	edx, DWORD PTR _p$11[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 7332				; 00001ca4H
	push	ecx
	call	_nk_draw_list_path_stroke
	add	esp, 16					; 00000010H

; 9075 :         } break;

	jmp	$LN30@nk_convert
$LN4@nk_convert:

; 9076 :         case NK_COMMAND_TEXT: {
; 9077 :             const struct nk_command_text *t = (const struct nk_command_text*)cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _t$9[ebp], eax

; 9078 :             nk_draw_list_add_text(&ctx->draw_list, t->font, nk_rect(t->x, t->y, t->w, t->h),
; 9079 :                 t->string, t->length, t->height, t->foreground);

	mov	eax, DWORD PTR _t$9[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _t$9[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+28]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _t$9[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _t$9[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	eax, DWORD PTR _t$9[ebp]
	movzx	ecx, WORD PTR [eax+26]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _t$9[ebp]
	movzx	eax, WORD PTR [edx+24]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _t$9[ebp]
	movsx	edx, WORD PTR [ecx+22]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _t$9[ebp]
	movsx	ecx, WORD PTR [eax+20]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	call	_nk_rect
	add	esp, 4
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _t$9[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 7332				; 00001ca4H
	push	eax
	call	_nk_draw_list_add_text
	add	esp, 40					; 00000028H

; 9080 :         } break;

	jmp	$LN30@nk_convert
$LN3@nk_convert:

; 9081 :         case NK_COMMAND_IMAGE: {
; 9082 :             const struct nk_command_image *i = (const struct nk_command_image*)cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _i$8[ebp], eax

; 9083 :             nk_draw_list_add_image(&ctx->draw_list, i->img, nk_rect(i->x, i->y, i->w, i->h), i->col);

	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _i$8[ebp]
	movzx	eax, WORD PTR [edx+14]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$8[ebp]
	movzx	edx, WORD PTR [ecx+12]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$8[ebp]
	movsx	ecx, WORD PTR [eax+10]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$8[ebp]
	movsx	eax, WORD PTR [edx+8]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	call	_nk_rect
	add	esp, 4
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR _i$8[ebp]
	add	ecx, 16					; 00000010H
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 7332				; 00001ca4H
	push	edx
	call	_nk_draw_list_add_image
	add	esp, 40					; 00000028H

; 9084 :         } break;

	jmp	SHORT $LN30@nk_convert
$LN2@nk_convert:

; 9085 :         case NK_COMMAND_CUSTOM: {
; 9086 :             const struct nk_command_custom *c = (const struct nk_command_custom*)cmd;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR _c$7[ebp], eax

; 9087 :             c->callback(&ctx->draw_list, c->x, c->y, c->w, c->h, c->callback_data);

	mov	esi, esp
	mov	eax, DWORD PTR _c$7[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _c$7[ebp]
	movzx	eax, WORD PTR [edx+14]
	push	eax
	mov	ecx, DWORD PTR _c$7[ebp]
	movzx	edx, WORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _c$7[ebp]
	movzx	ecx, WORD PTR [eax+10]
	push	ecx
	mov	edx, DWORD PTR _c$7[ebp]
	movzx	eax, WORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 7332				; 00001ca4H
	push	ecx
	mov	edx, DWORD PTR _c$7[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@nk_convert:
$LN30@nk_convert:

; 9088 :         } break;
; 9089 :         default: break;
; 9090 :         }
; 9091 :     }

	jmp	$LN33@nk_convert
$LN32@nk_convert:

; 9092 :     res |= (cmds->needed > cmds->allocated + (cmds->memory.size - cmds->size)) ? NK_CONVERT_COMMAND_BUFFER_FULL: 0;

	mov	eax, DWORD PTR _cmds$[ebp]
	mov	ecx, DWORD PTR _cmds$[ebp]
	mov	edx, DWORD PTR [eax+36]
	sub	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _cmds$[ebp]
	add	edx, DWORD PTR [eax+44]
	mov	ecx, DWORD PTR _cmds$[ebp]
	cmp	DWORD PTR [ecx+48], edx
	jbe	SHORT $LN46@nk_convert
	mov	DWORD PTR tv788[ebp], 2
	jmp	SHORT $LN47@nk_convert
$LN46@nk_convert:
	mov	DWORD PTR tv788[ebp], 0
$LN47@nk_convert:
	mov	edx, DWORD PTR _res$[ebp]
	or	edx, DWORD PTR tv788[ebp]
	mov	DWORD PTR _res$[ebp], edx

; 9093 :     res |= (vertices->needed > vertices->allocated) ? NK_CONVERT_VERTEX_BUFFER_FULL: 0;

	mov	eax, DWORD PTR _vertices$[ebp]
	mov	ecx, DWORD PTR _vertices$[ebp]
	mov	edx, DWORD PTR [eax+48]
	cmp	edx, DWORD PTR [ecx+44]
	jbe	SHORT $LN48@nk_convert
	mov	DWORD PTR tv793[ebp], 4
	jmp	SHORT $LN49@nk_convert
$LN48@nk_convert:
	mov	DWORD PTR tv793[ebp], 0
$LN49@nk_convert:
	mov	eax, DWORD PTR _res$[ebp]
	or	eax, DWORD PTR tv793[ebp]
	mov	DWORD PTR _res$[ebp], eax

; 9094 :     res |= (elements->needed > elements->allocated) ? NK_CONVERT_ELEMENT_BUFFER_FULL: 0;

	mov	eax, DWORD PTR _elements$[ebp]
	mov	ecx, DWORD PTR _elements$[ebp]
	mov	edx, DWORD PTR [eax+48]
	cmp	edx, DWORD PTR [ecx+44]
	jbe	SHORT $LN50@nk_convert
	mov	DWORD PTR tv798[ebp], 8
	jmp	SHORT $LN51@nk_convert
$LN50@nk_convert:
	mov	DWORD PTR tv798[ebp], 0
$LN51@nk_convert:
	mov	eax, DWORD PTR _res$[ebp]
	or	eax, DWORD PTR tv798[ebp]
	mov	DWORD PTR _res$[ebp], eax

; 9095 :     return res;

	mov	eax, DWORD PTR _res$[ebp]
$LN37@nk_convert:

; 9096 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN56@nk_convert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 664				; 00000298H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN56@nk_convert:
	DD	3
	DD	$LN55@nk_convert
$LN55@nk_convert:
	DD	-204					; ffffff34H
	DD	8
	DD	$LN52@nk_convert
	DD	-244					; ffffff0cH
	DD	8
	DD	$LN53@nk_convert
	DD	-284					; fffffee4H
	DD	8
	DD	$LN54@nk_convert
$LN54@nk_convert:
	DB	112					; 00000070H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN53@nk_convert:
	DB	112					; 00000070H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN52@nk_convert:
	DB	112					; 00000070H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN57@nk_convert:
	DD	$LN28@nk_convert
	DD	$LN27@nk_convert
	DD	$LN26@nk_convert
	DD	$LN25@nk_convert
	DD	$LN24@nk_convert
	DD	$LN23@nk_convert
	DD	$LN22@nk_convert
	DD	$LN21@nk_convert
	DD	$LN20@nk_convert
	DD	$LN19@nk_convert
	DD	$LN18@nk_convert
	DD	$LN17@nk_convert
	DD	$LN16@nk_convert
	DD	$LN12@nk_convert
	DD	$LN8@nk_convert
	DD	$LN4@nk_convert
	DD	$LN3@nk_convert
	DD	$LN2@nk_convert
_nk_convert ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk__next
_TEXT	SEGMENT
_next$ = -20						; size = 4
_buffer$ = -8						; size = 4
_ctx$ = 8						; size = 4
_cmd$ = 12						; size = 4
_nk__next PROC						; COMDAT

; 17577: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17578:     nk_byte *buffer;
; 17579:     const struct nk_command *next;
; 17580:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk__next
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk__next@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk__next:

; 17581:     if (!ctx || !cmd || !ctx->count) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@nk__next
	cmp	DWORD PTR _cmd$[ebp], 0
	je	SHORT $LN2@nk__next
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12948], 0
	jne	SHORT $LN3@nk__next
$LN2@nk__next:
	xor	eax, eax
	jmp	SHORT $LN4@nk__next
$LN3@nk__next:

; 17582:     if (cmd->next >= ctx->memory.allocated) return 0;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+5792]
	jb	SHORT $LN1@nk__next
	xor	eax, eax
	jmp	SHORT $LN4@nk__next
$LN1@nk__next:

; 17583:     buffer = (nk_byte*)ctx->memory.memory.ptr;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5780]
	mov	DWORD PTR _buffer$[ebp], ecx

; 17584:     next = nk_ptr_add_const(struct nk_command, buffer, cmd->next);

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _next$[ebp], ecx

; 17585:     return next;

	mov	eax, DWORD PTR _next$[ebp]
$LN4@nk__next:

; 17586: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk__next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk__begin
_TEXT	SEGMENT
_buffer$ = -20						; size = 4
_iter$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk__begin PROC						; COMDAT

; 17556: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17557:     struct nk_window *iter;
; 17558:     nk_byte *buffer;
; 17559:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN10@nk__begin
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk__begin@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk__begin:

; 17560:     if (!ctx) return 0;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk__begin
	xor	eax, eax
	jmp	$LN8@nk__begin
$LN7@nk__begin:

; 17561:     if (!ctx->count) return 0;

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12948], 0
	jne	SHORT $LN6@nk__begin
	xor	eax, eax
	jmp	$LN8@nk__begin
$LN6@nk__begin:

; 17562: 
; 17563:     buffer = (nk_byte*)ctx->memory.memory.ptr;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+5780]
	mov	DWORD PTR _buffer$[ebp], ecx

; 17564:     if (!ctx->build) {

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12880], 0
	jne	SHORT $LN5@nk__begin

; 17565:         nk_build(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_build
	add	esp, 4

; 17566:         ctx->build = nk_true;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+12880], 1
$LN5@nk__begin:

; 17567:     }
; 17568:     iter = ctx->begin;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12928]
	mov	DWORD PTR _iter$[ebp], ecx
$LN4@nk__begin:

; 17569:     while (iter && ((iter->buffer.begin == iter->buffer.end) || (iter->flags & NK_WINDOW_HIDDEN)))

	cmp	DWORD PTR _iter$[ebp], 0
	je	SHORT $LN3@nk__begin
	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR _iter$[ebp]
	mov	edx, DWORD PTR [eax+128]
	cmp	edx, DWORD PTR [ecx+132]
	je	SHORT $LN2@nk__begin
	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 8192				; 00002000H
	je	SHORT $LN3@nk__begin
$LN2@nk__begin:

; 17570:         iter = iter->next;

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+376]
	mov	DWORD PTR _iter$[ebp], ecx
	jmp	SHORT $LN4@nk__begin
$LN3@nk__begin:

; 17571:     if (!iter) return 0;

	cmp	DWORD PTR _iter$[ebp], 0
	jne	SHORT $LN1@nk__begin
	xor	eax, eax
	jmp	SHORT $LN8@nk__begin
$LN1@nk__begin:

; 17572:     return nk_ptr_add_const(struct nk_command, buffer, iter->buffer.begin);

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	add	ecx, DWORD PTR [eax+128]
	mov	eax, ecx
$LN8@nk__begin:

; 17573: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk__begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_end
_TEXT	SEGMENT
_in$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_input_end PROC					; COMDAT

; 12561: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12562:     struct nk_input *in;
; 12563:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN6@nk_input_e
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_input_end@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@nk_input_e:

; 12564:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN3@nk_input_e
	jmp	SHORT $LN4@nk_input_e
$LN3@nk_input_e:

; 12565:     in = &ctx->input;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 12566:     if (in->mouse.grab)

	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, BYTE PTR [eax+356]
	test	ecx, ecx
	je	SHORT $LN2@nk_input_e

; 12567:         in->mouse.grab = 0;

	mov	eax, DWORD PTR _in$[ebp]
	mov	BYTE PTR [eax+356], 0
$LN2@nk_input_e:

; 12568:     if (in->mouse.ungrab) {

	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, BYTE PTR [eax+358]
	test	ecx, ecx
	je	SHORT $LN4@nk_input_e

; 12569:         in->mouse.grabbed = 0;

	mov	eax, DWORD PTR _in$[ebp]
	mov	BYTE PTR [eax+357], 0

; 12570:         in->mouse.ungrab = 0;

	mov	eax, DWORD PTR _in$[ebp]
	mov	BYTE PTR [eax+358], 0

; 12571:         in->mouse.grab = 0;

	mov	eax, DWORD PTR _in$[ebp]
	mov	BYTE PTR [eax+356], 0
$LN4@nk_input_e:

; 12572:     }
; 12573: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_unicode
_TEXT	SEGMENT
_rune$ = -8						; size = 4
_ctx$ = 8						; size = 4
_unicode$ = 12						; size = 4
_nk_input_unicode PROC					; COMDAT

; 12657: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12658:     nk_glyph rune;
; 12659:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN4@nk_input_u
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_input_unicode@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_input_u:

; 12660:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN1@nk_input_u
	jmp	SHORT $LN2@nk_input_u
$LN1@nk_input_u:

; 12661:     nk_utf_encode(unicode, rune, NK_UTF_SIZE);

	push	4
	lea	eax, DWORD PTR _rune$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unicode$[ebp]
	push	ecx
	call	_nk_utf_encode
	add	esp, 12					; 0000000cH

; 12662:     nk_input_glyph(ctx, rune);

	lea	eax, DWORD PTR _rune$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_glyph
	add	esp, 8
$LN2@nk_input_u:

; 12663: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@nk_input_u
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@nk_input_u:
	DD	1
	DD	$LN6@nk_input_u
$LN6@nk_input_u:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@nk_input_u
$LN5@nk_input_u:
	DB	114					; 00000072H
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
_nk_input_unicode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_glyph
_TEXT	SEGMENT
_in$ = -32						; size = 4
_unicode$ = -20						; size = 4
_len$ = -8						; size = 4
_ctx$ = 8						; size = 4
_glyph$ = 12						; size = 4
_nk_input_glyph PROC					; COMDAT

; 12628: {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12629:     int len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 12630:     nk_rune unicode;
; 12631:     struct nk_input *in;
; 12632: 
; 12633:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_input_g
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_input_glyph@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_input_g:

; 12634:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_input_g
	jmp	SHORT $LN3@nk_input_g
$LN2@nk_input_g:

; 12635:     in = &ctx->input;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 12636: 
; 12637:     len = nk_utf_decode(glyph, &unicode, NK_UTF_SIZE);

	push	4
	lea	eax, DWORD PTR _unicode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	call	_nk_utf_decode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _len$[ebp], eax

; 12638:     if (len && ((in->keyboard.text_len + len) < NK_INPUT_MAX)) {

	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN3@nk_input_g
	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR [eax+256]
	add	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, 16					; 00000010H
	jge	SHORT $LN3@nk_input_g

; 12639:         nk_utf_encode(unicode, &in->keyboard.text[in->keyboard.text_len],
; 12640:             NK_INPUT_MAX - in->keyboard.text_len);

	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, 16					; 00000010H
	sub	ecx, DWORD PTR [eax+256]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	mov	eax, DWORD PTR [edx+256]
	mov	ecx, DWORD PTR _in$[ebp]
	lea	edx, DWORD PTR [ecx+eax+240]
	push	edx
	mov	eax, DWORD PTR _unicode$[ebp]
	push	eax
	call	_nk_utf_encode
	add	esp, 12					; 0000000cH

; 12641:         in->keyboard.text_len += len;

	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR [eax+256]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _in$[ebp]
	mov	DWORD PTR [edx+256], ecx
$LN3@nk_input_g:

; 12642:     }
; 12643: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@nk_input_g
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@nk_input_g:
	DD	1
	DD	$LN7@nk_input_g
$LN7@nk_input_g:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@nk_input_g
$LN6@nk_input_g:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_nk_input_glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_char
_TEXT	SEGMENT
_glyph$ = -8						; size = 4
_ctx$ = 8						; size = 4
_c$ = 12						; size = 1
_nk_input_char PROC					; COMDAT

; 12647: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12648:     nk_glyph glyph;
; 12649:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN4@nk_input_c
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_input_char@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_input_c:

; 12650:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN1@nk_input_c
	jmp	SHORT $LN2@nk_input_c
$LN1@nk_input_c:

; 12651:     glyph[0] = c;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR _glyph$[ebp+ecx], dl

; 12652:     nk_input_glyph(ctx, glyph);

	lea	eax, DWORD PTR _glyph$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_input_glyph
	add	esp, 8
$LN2@nk_input_c:

; 12653: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@nk_input_c
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@nk_input_c:
	DD	1
	DD	$LN6@nk_input_c
$LN6@nk_input_c:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@nk_input_c
$LN5@nk_input_c:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	0
_nk_input_char ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_scroll
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_val$ = 12						; size = 8
_nk_input_scroll PROC					; COMDAT

; 12619: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12620:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN4@nk_input_s
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_input_scroll@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_input_s:

; 12621:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN1@nk_input_s
	jmp	SHORT $LN2@nk_input_s
$LN1@nk_input_s:

; 12622:     ctx->input.mouse.scroll_delta.x += val.x;

	mov	eax, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR [eax+348]
	addss	xmm0, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	movss	DWORD PTR [ecx+348], xmm0

; 12623:     ctx->input.mouse.scroll_delta.y += val.y;

	mov	eax, DWORD PTR _ctx$[ebp]
	movss	xmm0, DWORD PTR [eax+352]
	addss	xmm0, DWORD PTR _val$[ebp+4]
	mov	ecx, DWORD PTR _ctx$[ebp]
	movss	DWORD PTR [ecx+352], xmm0
$LN2@nk_input_s:

; 12624: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_scroll ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_button
_TEXT	SEGMENT
_in$ = -20						; size = 4
_btn$ = -8						; size = 4
_ctx$ = 8						; size = 4
_id$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_down$ = 24						; size = 4
_nk_input_button PROC					; COMDAT

; 12602: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12603:     struct nk_mouse_button *btn;
; 12604:     struct nk_input *in;
; 12605:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_input_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_input_button@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_input_b:

; 12606:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_input_b
	jmp	SHORT $LN3@nk_input_b
$LN2@nk_input_b:

; 12607:     in = &ctx->input;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 12608:     if (in->mouse.buttons[id].down == down) return;

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _in$[ebp]
	mov	edx, DWORD PTR [ecx+eax+260]
	cmp	edx, DWORD PTR _down$[ebp]
	jne	SHORT $LN1@nk_input_b
	jmp	SHORT $LN3@nk_input_b
$LN1@nk_input_b:

; 12609: 
; 12610:     btn = &in->mouse.buttons[id];

	mov	eax, DWORD PTR _id$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _in$[ebp]
	lea	edx, DWORD PTR [ecx+eax+260]
	mov	DWORD PTR _btn$[ebp], edx

; 12611:     btn->clicked_pos.x = (float)x;

	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _btn$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 12612:     btn->clicked_pos.y = (float)y;

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _btn$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 12613:     btn->down = down;

	mov	eax, DWORD PTR _btn$[ebp]
	mov	ecx, DWORD PTR _down$[ebp]
	mov	DWORD PTR [eax], ecx

; 12614:     btn->clicked++;

	mov	eax, DWORD PTR _btn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _btn$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN3@nk_input_b:

; 12615: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_button ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_key
_TEXT	SEGMENT
_in$ = -8						; size = 4
_ctx$ = 8						; size = 4
_key$ = 12						; size = 4
_down$ = 16						; size = 4
_nk_input_key PROC					; COMDAT

; 12590: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12591:     struct nk_input *in;
; 12592:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_input_k
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_input_key@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_input_k:

; 12593:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_input_k
	jmp	SHORT $LN3@nk_input_k
$LN2@nk_input_k:

; 12594:     in = &ctx->input;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 12595:     if (in->keyboard.keys[key].down != down)

	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	cmp	edx, DWORD PTR _down$[ebp]
	je	SHORT $LN1@nk_input_k

; 12596:         in->keyboard.keys[key].clicked++;

	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	add	edx, 1
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	mov	DWORD PTR [ecx+eax*8+4], edx
$LN1@nk_input_k:

; 12597:     in->keyboard.keys[key].down = down;

	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	mov	edx, DWORD PTR _down$[ebp]
	mov	DWORD PTR [ecx+eax*8], edx
$LN3@nk_input_k:

; 12598: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_motion
_TEXT	SEGMENT
_in$ = -8						; size = 4
_ctx$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_nk_input_motion PROC					; COMDAT

; 12577: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12578:     struct nk_input *in;
; 12579:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN4@nk_input_m
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_input_motion@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_input_m:

; 12580:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN1@nk_input_m
	jmp	SHORT $LN2@nk_input_m
$LN1@nk_input_m:

; 12581:     in = &ctx->input;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 12582:     in->mouse.pos.x = (float)x;

	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _in$[ebp]
	movss	DWORD PTR [eax+324], xmm0

; 12583:     in->mouse.pos.y = (float)y;

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _in$[ebp]
	movss	DWORD PTR [eax+328], xmm0

; 12584:     in->mouse.delta.x = in->mouse.pos.x - in->mouse.prev.x;

	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+324]
	subss	xmm0, DWORD PTR [ecx+332]
	mov	edx, DWORD PTR _in$[ebp]
	movss	DWORD PTR [edx+340], xmm0

; 12585:     in->mouse.delta.y = in->mouse.pos.y - in->mouse.prev.y;

	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	subss	xmm0, DWORD PTR [ecx+336]
	mov	edx, DWORD PTR _in$[ebp]
	movss	DWORD PTR [edx+344], xmm0
$LN2@nk_input_m:

; 12586: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_motion ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_input_begin
_TEXT	SEGMENT
_in$ = -20						; size = 4
_i$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_input_begin PROC					; COMDAT

; 12540: {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 12541:     int i;
; 12542:     struct nk_input *in;
; 12543:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN10@nk_input_b
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_input_begin@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@nk_input_b:

; 12544:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN7@nk_input_b
	jmp	$LN1@nk_input_b
$LN7@nk_input_b:

; 12545:     in = &ctx->input;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 12546:     for (i = 0; i < NK_BUTTON_MAX; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@nk_input_b
$LN5@nk_input_b:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@nk_input_b:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN4@nk_input_b

; 12547:         in->mouse.buttons[i].clicked = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _in$[ebp]
	mov	DWORD PTR [ecx+eax+264], 0
	jmp	SHORT $LN5@nk_input_b
$LN4@nk_input_b:

; 12548: 
; 12549:     in->keyboard.text_len = 0;

	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR [eax+256], 0

; 12550:     in->mouse.scroll_delta = nk_vec2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	_nk_vec2
	add	esp, 8
	mov	ecx, DWORD PTR _in$[ebp]
	mov	DWORD PTR [ecx+348], eax
	mov	DWORD PTR [ecx+352], edx

; 12551:     in->mouse.prev.x = in->mouse.pos.x;

	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	mov	edx, DWORD PTR [ecx+324]
	mov	DWORD PTR [eax+332], edx

; 12552:     in->mouse.prev.y = in->mouse.pos.y;

	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	mov	edx, DWORD PTR [ecx+328]
	mov	DWORD PTR [eax+336], edx

; 12553:     in->mouse.delta.x = 0;

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+340], xmm0

; 12554:     in->mouse.delta.y = 0;

	mov	eax, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+344], xmm0

; 12555:     for (i = 0; i < NK_KEY_MAX; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@nk_input_b
$LN2@nk_input_b:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@nk_input_b:
	cmp	DWORD PTR _i$[ebp], 30			; 0000001eH
	jge	SHORT $LN1@nk_input_b

; 12556:         in->keyboard.keys[i].clicked = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	mov	DWORD PTR [ecx+eax*8+4], 0
	jmp	SHORT $LN2@nk_input_b
$LN1@nk_input_b:

; 12557: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_input_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_free
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_nk_free PROC						; COMDAT

; 17322: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17323:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@nk_free
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_free@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@nk_free:

; 17324:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@nk_free
	jmp	$LN3@nk_free
$LN2@nk_free:

; 17325:     nk_buffer_free(&ctx->memory);

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5748				; 00001674H
	push	eax
	call	_nk_buffer_free
	add	esp, 4

; 17326:     if (ctx->use_pool)

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12884], 0
	je	SHORT $LN1@nk_free

; 17327:         nk_pool_free(&ctx->pool);

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 12888				; 00003258H
	push	eax
	call	_nk_pool_free
	add	esp, 4
$LN1@nk_free:

; 17328: 
; 17329:     nk_zero(&ctx->input, sizeof(ctx->input));

	push	360					; 00000168H
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 17330:     nk_zero(&ctx->style, sizeof(ctx->style));

	push	5388					; 0000150cH
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 360				; 00000168H
	push	eax
	call	_nk_zero
	add	esp, 8

; 17331:     nk_zero(&ctx->memory, sizeof(ctx->memory));

	push	60					; 0000003cH
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5748				; 00001674H
	push	eax
	call	_nk_zero
	add	esp, 8

; 17332: 
; 17333:     ctx->seq = 0;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+12952], 0

; 17334:     ctx->build = 0;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+12880], 0

; 17335:     ctx->begin = 0;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+12928], 0

; 17336:     ctx->end = 0;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+12932], 0

; 17337:     ctx->active = 0;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+12936], 0

; 17338:     ctx->current = 0;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+12940], 0

; 17339:     ctx->freelist = 0;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+12944], 0

; 17340:     ctx->count = 0;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+12948], 0
$LN3@nk_free:

; 17341: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_clear
_TEXT	SEGMENT
_it$1 = -44						; size = 4
_n$2 = -32						; size = 4
_next$ = -20						; size = 4
_iter$ = -8						; size = 4
_ctx$ = 8						; size = 4
_nk_clear PROC						; COMDAT

; 17345: {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17346:     struct nk_window *iter;
; 17347:     struct nk_window *next;
; 17348:     NK_ASSERT(ctx);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN19@nk_clear
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_clear@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_17PKIBEAGK@?$AAc?$AAt?$AAx?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@nk_clear:

; 17349: 
; 17350:     if (!ctx) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN16@nk_clear
	jmp	$LN17@nk_clear
$LN16@nk_clear:

; 17351:     if (ctx->use_pool)

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+12884], 0
	je	SHORT $LN15@nk_clear

; 17352:         nk_buffer_clear(&ctx->memory);

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5748				; 00001674H
	push	eax
	call	_nk_buffer_clear
	add	esp, 4
	jmp	SHORT $LN14@nk_clear
$LN15@nk_clear:

; 17353:     else nk_buffer_reset(&ctx->memory, NK_BUFFER_FRONT);

	push	0
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 5748				; 00001674H
	push	eax
	call	_nk_buffer_reset
	add	esp, 8
$LN14@nk_clear:

; 17354: 
; 17355:     ctx->build = 0;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+12880], 0

; 17356:     ctx->memory.calls = 0;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+5800], 0

; 17357:     ctx->last_widget_state = 0;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+5820], 0

; 17358:     ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_ARROW];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+364]
	mov	DWORD PTR [edx+392], ecx

; 17359:     NK_MEMSET(&ctx->overlay, 0, sizeof(ctx->overlay));

	push	40					; 00000028H
	push	0
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 12840				; 00003228H
	push	eax
	call	_nk_memset
	add	esp, 12					; 0000000cH

; 17360: #ifdef NK_INCLUDE_VERTEX_BUFFER_OUTPUT
; 17361:     nk_draw_list_clear(&ctx->draw_list);

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 7332				; 00001ca4H
	push	eax
	call	_nk_draw_list_clear
	add	esp, 4

; 17362: #endif
; 17363: 
; 17364:     /* garbage collector */
; 17365:     iter = ctx->begin;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12928]
	mov	DWORD PTR _iter$[ebp], ecx
$LN13@nk_clear:

; 17366:     while (iter) {

	cmp	DWORD PTR _iter$[ebp], 0
	je	$LN12@nk_clear

; 17367:         /* make sure minimized windows do not get removed */
; 17368:         if ((iter->flags & NK_WINDOW_MINIMIZED) &&
; 17369:             !(iter->flags & NK_WINDOW_CLOSED)) {

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN11@nk_clear
	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 16384				; 00004000H
	jne	SHORT $LN11@nk_clear

; 17370:             iter = iter->next;

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+376]
	mov	DWORD PTR _iter$[ebp], ecx

; 17371:             continue;

	jmp	SHORT $LN13@nk_clear
$LN11@nk_clear:

; 17372:         }
; 17373:         /* remove hotness from hidden or closed windows*/
; 17374:         if (((iter->flags & NK_WINDOW_HIDDEN) ||
; 17375:             (iter->flags & NK_WINDOW_CLOSED)) &&
; 17376:             iter == ctx->active)

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 8192				; 00002000H
	jne	SHORT $LN9@nk_clear
	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 16384				; 00004000H
	je	SHORT $LN10@nk_clear
$LN9@nk_clear:
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _iter$[ebp]
	cmp	ecx, DWORD PTR [eax+12936]
	jne	SHORT $LN10@nk_clear

; 17377:             ctx->active = iter->next;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _iter$[ebp]
	mov	edx, DWORD PTR [ecx+376]
	mov	DWORD PTR [eax+12936], edx
$LN10@nk_clear:

; 17378: 
; 17379:         /* free unused popup windows */
; 17380:         if (iter->popup.win && iter->popup.win->seq != ctx->seq) {

	mov	eax, DWORD PTR _iter$[ebp]
	cmp	DWORD PTR [eax+252], 0
	je	SHORT $LN8@nk_clear
	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+12952]
	je	SHORT $LN8@nk_clear

; 17381:             nk_free_window(ctx, iter->popup.win);

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_free_window
	add	esp, 8

; 17382:             iter->popup.win = 0;

	mov	eax, DWORD PTR _iter$[ebp]
	mov	DWORD PTR [eax+252], 0
$LN8@nk_clear:

; 17383:         }
; 17384:         /* remove unused window state tables */
; 17385:         {struct nk_table *n, *it = iter->tables;

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+368]
	mov	DWORD PTR _it$1[ebp], ecx
$LN7@nk_clear:

; 17386:         while (it) {

	cmp	DWORD PTR _it$1[ebp], 0
	je	SHORT $LN6@nk_clear

; 17387:             n = it->next;

	mov	eax, DWORD PTR _it$1[ebp]
	mov	ecx, DWORD PTR [eax+416]
	mov	DWORD PTR _n$2[ebp], ecx

; 17388:             if (it->seq != ctx->seq) {

	mov	eax, DWORD PTR _it$1[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+12952]
	je	SHORT $LN5@nk_clear

; 17389:                 nk_remove_table(iter, it);

	mov	eax, DWORD PTR _it$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _iter$[ebp]
	push	ecx
	call	_nk_remove_table
	add	esp, 8

; 17390:                 nk_zero(it, sizeof(union nk_page_data));

	push	424					; 000001a8H
	mov	eax, DWORD PTR _it$1[ebp]
	push	eax
	call	_nk_zero
	add	esp, 8

; 17391:                 nk_free_table(ctx, it);

	mov	eax, DWORD PTR _it$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_free_table
	add	esp, 8

; 17392:                 if (it == iter->tables)

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR _it$1[ebp]
	cmp	ecx, DWORD PTR [eax+368]
	jne	SHORT $LN5@nk_clear

; 17393:                     iter->tables = n;

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR _n$2[ebp]
	mov	DWORD PTR [eax+368], ecx
$LN5@nk_clear:

; 17394:             }
; 17395:             it = n;

	mov	eax, DWORD PTR _n$2[ebp]
	mov	DWORD PTR _it$1[ebp], eax

; 17396:         }}

	jmp	SHORT $LN7@nk_clear
$LN6@nk_clear:

; 17397:         /* window itself is not used anymore so free */
; 17398:         if (iter->seq != ctx->seq || iter->flags & NK_WINDOW_CLOSED) {

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+12952]
	jne	SHORT $LN2@nk_clear
	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 16384				; 00004000H
	je	SHORT $LN3@nk_clear
$LN2@nk_clear:

; 17399:             next = iter->next;

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+376]
	mov	DWORD PTR _next$[ebp], ecx

; 17400:             nk_remove_window(ctx, iter);

	mov	eax, DWORD PTR _iter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_remove_window
	add	esp, 8

; 17401:             nk_free_window(ctx, iter);

	mov	eax, DWORD PTR _iter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_free_window
	add	esp, 8

; 17402:             iter = next;

	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR _iter$[ebp], eax
	jmp	SHORT $LN1@nk_clear
$LN3@nk_clear:

; 17403:         } else iter = iter->next;

	mov	eax, DWORD PTR _iter$[ebp]
	mov	ecx, DWORD PTR [eax+376]
	mov	DWORD PTR _iter$[ebp], ecx
$LN1@nk_clear:

; 17404:     }

	jmp	$LN13@nk_clear
$LN12@nk_clear:

; 17405:     ctx->seq++;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12952]
	add	ecx, 1
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+12952], ecx
$LN17@nk_clear:

; 17406: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_clear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_init_custom
_TEXT	SEGMENT
_alloc$1 = -8						; size = 4
_ctx$ = 8						; size = 4
_cmds$ = 12						; size = 4
_pool$ = 16						; size = 4
_font$ = 20						; size = 4
_nk_init_custom PROC					; COMDAT

; 17277: {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17278:     NK_ASSERT(cmds);

	cmp	DWORD PTR _cmds$[ebp], 0
	jne	SHORT $LN7@nk_init_cu
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_init_custom@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19IHKENPKO@?$AAc?$AAm?$AAd?$AAs?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@nk_init_cu:

; 17279:     NK_ASSERT(pool);

	cmp	DWORD PTR _pool$[ebp], 0
	jne	SHORT $LN8@nk_init_cu
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_init_custom@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_19GLKFFFDC@?$AAp?$AAo?$AAo?$AAl?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@nk_init_cu:

; 17280:     if (!cmds || !pool) return 0;

	cmp	DWORD PTR _cmds$[ebp], 0
	je	SHORT $LN3@nk_init_cu
	cmp	DWORD PTR _pool$[ebp], 0
	jne	SHORT $LN4@nk_init_cu
$LN3@nk_init_cu:
	xor	eax, eax
	jmp	$LN5@nk_init_cu
$LN4@nk_init_cu:

; 17281: 
; 17282:     nk_setup(ctx, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_setup
	add	esp, 8

; 17283:     ctx->memory = *cmds;

	mov	edi, DWORD PTR _ctx$[ebp]
	add	edi, 5748				; 00001674H
	mov	ecx, 15					; 0000000fH
	mov	esi, DWORD PTR _cmds$[ebp]
	rep movsd

; 17284:     if (pool->type == NK_BUFFER_FIXED) {

	mov	eax, DWORD PTR _pool$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@nk_init_cu

; 17285:         /* take memory from buffer and alloc fixed pool */
; 17286:         nk_pool_init_fixed(&ctx->pool, pool->memory.ptr, pool->memory.size);

	mov	eax, DWORD PTR _pool$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _pool$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 12888				; 00003258H
	push	ecx
	call	_nk_pool_init_fixed
	add	esp, 12					; 0000000cH

; 17287:     } else {

	jmp	SHORT $LN1@nk_init_cu
$LN2@nk_init_cu:

; 17288:         /* create dynamic pool from buffer allocator */
; 17289:         struct nk_allocator *alloc = &pool->pool;

	mov	eax, DWORD PTR _pool$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _alloc$1[ebp], eax

; 17290:         nk_pool_init(&ctx->pool, alloc, NK_POOL_DEFAULT_CAPACITY);

	push	16					; 00000010H
	mov	eax, DWORD PTR _alloc$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 12888				; 00003258H
	push	ecx
	call	_nk_pool_init
	add	esp, 12					; 0000000cH
$LN1@nk_init_cu:

; 17291:     }
; 17292:     ctx->use_pool = nk_true;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+12884], 1

; 17293:     return 1;

	mov	eax, 1
$LN5@nk_init_cu:

; 17294: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_init_custom ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_init
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_alloc$ = 12						; size = 4
_font$ = 16						; size = 4
_nk_init PROC						; COMDAT

; 17299: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17300:     NK_ASSERT(alloc);

	cmp	DWORD PTR _alloc$[ebp], 0
	jne	SHORT $LN4@nk_init
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_init@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1M@KLHDKNJP@?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_init:

; 17301:     if (!alloc) return 0;

	cmp	DWORD PTR _alloc$[ebp], 0
	jne	SHORT $LN1@nk_init
	xor	eax, eax
	jmp	SHORT $LN2@nk_init
$LN1@nk_init:

; 17302:     nk_setup(ctx, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_setup
	add	esp, 8

; 17303:     nk_buffer_init(&ctx->memory, alloc, NK_DEFAULT_COMMAND_BUFFER_SIZE);

	push	4096					; 00001000H
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 5748				; 00001674H
	push	ecx
	call	_nk_buffer_init
	add	esp, 12					; 0000000cH

; 17304:     nk_pool_init(&ctx->pool, alloc, NK_POOL_DEFAULT_CAPACITY);

	push	16					; 00000010H
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 12888				; 00003258H
	push	ecx
	call	_nk_pool_init
	add	esp, 12					; 0000000cH

; 17305:     ctx->use_pool = nk_true;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+12884], 1

; 17306:     return 1;

	mov	eax, 1
$LN2@nk_init:

; 17307: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_init_fixed
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_memory$ = 12						; size = 4
_size$ = 16						; size = 4
_font$ = 20						; size = 4
_nk_init_fixed PROC					; COMDAT

; 17265: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17266:     NK_ASSERT(memory);

	cmp	DWORD PTR _memory$[ebp], 0
	jne	SHORT $LN4@nk_init_fi
	mov	eax, DWORD PTR ?__LINE__Var@?1??nk_init_fixed@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1GM@KFCELIHA@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAm?$AAa?$AAr?$AAc?$AAo?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAk?$AAt?$AAo?$AAp?$AA?2?$AAp?$AAr?$AAj?$AA?2?$AAm?$AAg?$AAe?$AAa@
	push	OFFSET ??_C@_1O@NIJNBMFJ@?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@nk_init_fi:

; 17267:     if (!memory) return 0;

	cmp	DWORD PTR _memory$[ebp], 0
	jne	SHORT $LN1@nk_init_fi
	xor	eax, eax
	jmp	SHORT $LN2@nk_init_fi
$LN1@nk_init_fi:

; 17268:     nk_setup(ctx, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_nk_setup
	add	esp, 8

; 17269:     nk_buffer_init_fixed(&ctx->memory, memory, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 5748				; 00001674H
	push	edx
	call	_nk_buffer_init_fixed
	add	esp, 12					; 0000000cH

; 17270:     ctx->use_pool = nk_false;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+12884], 0

; 17271:     return 1;

	mov	eax, 1
$LN2@nk_init_fi:

; 17272: }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nk_init_fixed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\nuklear.h
;	COMDAT _nk_init_default
_TEXT	SEGMENT
_alloc$ = -16						; size = 12
_ctx$ = 8						; size = 4
_font$ = 12						; size = 4
_nk_init_default PROC					; COMDAT

; 17253: {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17254:     struct nk_allocator alloc;
; 17255:     alloc.userdata.ptr = 0;

	mov	DWORD PTR _alloc$[ebp], 0

; 17256:     alloc.alloc = nk_malloc;

	mov	DWORD PTR _alloc$[ebp+4], OFFSET _nk_malloc

; 17257:     alloc.free = nk_mfree;

	mov	DWORD PTR _alloc$[ebp+8], OFFSET _nk_mfree

; 17258:     return nk_init(ctx, &alloc, font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	lea	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_nk_init
	add	esp, 12					; 0000000cH

; 17259: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nk_init_de
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@nk_init_de:
	DD	1
	DD	$LN4@nk_init_de
$LN4@nk_init_de:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN3@nk_init_de
$LN3@nk_init_de:
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	0
_nk_init_default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\dirent.h
;	COMDAT _dirent_set_errno
_TEXT	SEGMENT
_error$ = 8						; size = 4
_dirent_set_errno PROC					; COMDAT

; 819  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 820  : #if defined(_MSC_VER)  &&  _MSC_VER >= 1400
; 821  : 
; 822  :     /* Microsoft Visual Studio 2005 and later */
; 823  :     _set_errno (error);

	mov	eax, DWORD PTR _error$[ebp]
	push	eax
	call	__set_errno
	add	esp, 4

; 824  : 
; 825  : #else
; 826  : 
; 827  :     /* Non-Microsoft compiler or older Microsoft compiler */
; 828  :     errno = error;
; 829  : 
; 830  : #endif
; 831  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dirent_set_errno ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\dirent.h
;	COMDAT _dirent_wcstombs_s
_TEXT	SEGMENT
_error$ = -8						; size = 4
_pReturnValue$ = 8					; size = 4
_mbstr$ = 12						; size = 4
_sizeInBytes$ = 16					; size = 4
_wcstr$ = 20						; size = 4
_count$ = 24						; size = 4
_dirent_wcstombs_s PROC					; COMDAT

; 770  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 771  :     int error;
; 772  : 
; 773  : #if defined(_MSC_VER)  &&  _MSC_VER >= 1400
; 774  : 
; 775  :     /* Microsoft Visual Studio 2005 or later */
; 776  :     error = wcstombs_s (pReturnValue, mbstr, sizeInBytes, wcstr, count);

	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wcstr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sizeInBytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _mbstr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pReturnValue$[ebp]
	push	ecx
	call	_wcstombs_s
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax

; 777  : 
; 778  : #else
; 779  : 
; 780  :     /* Older Visual Studio or non-Microsoft compiler */
; 781  :     size_t n;
; 782  : 
; 783  :     /* Convert to multi-byte string (or count the number of bytes needed) */
; 784  :     n = wcstombs (mbstr, wcstr, sizeInBytes);
; 785  :     if (!mbstr  ||  n < count) {
; 786  : 
; 787  :         /* Zero-terminate output buffer */
; 788  :         if (mbstr  &&  sizeInBytes) {
; 789  :             if (n >= sizeInBytes) {
; 790  :                 n = sizeInBytes - 1;
; 791  :             }
; 792  :             mbstr[n] = '\0';
; 793  :         }
; 794  : 
; 795  :         /* Lenght of resulting multi-bytes string WITH zero-terminator */
; 796  :         if (pReturnValue) {
; 797  :             *pReturnValue = n + 1;
; 798  :         }
; 799  : 
; 800  :         /* Success */
; 801  :         error = 0;
; 802  : 
; 803  :     } else {
; 804  : 
; 805  :         /* Cannot convert string */
; 806  :         error = 1;
; 807  : 
; 808  :     }
; 809  : 
; 810  : #endif
; 811  : 
; 812  :     return error;

	mov	eax, DWORD PTR _error$[ebp]

; 813  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dirent_wcstombs_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\dirent.h
;	COMDAT _dirent_mbstowcs_s
_TEXT	SEGMENT
_error$ = -8						; size = 4
_pReturnValue$ = 8					; size = 4
_wcstr$ = 12						; size = 4
_sizeInWords$ = 16					; size = 4
_mbstr$ = 20						; size = 4
_count$ = 24						; size = 4
_dirent_mbstowcs_s PROC					; COMDAT

; 717  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 718  :     int error;
; 719  : 
; 720  : #if defined(_MSC_VER)  &&  _MSC_VER >= 1400
; 721  : 
; 722  :     /* Microsoft Visual Studio 2005 or later */
; 723  :     error = mbstowcs_s (pReturnValue, wcstr, sizeInWords, mbstr, count);

	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mbstr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sizeInWords$[ebp]
	push	edx
	mov	eax, DWORD PTR _wcstr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pReturnValue$[ebp]
	push	ecx
	call	_mbstowcs_s
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax

; 724  : 
; 725  : #else
; 726  : 
; 727  :     /* Older Visual Studio or non-Microsoft compiler */
; 728  :     size_t n;
; 729  : 
; 730  :     /* Convert to wide-character string (or count characters) */
; 731  :     n = mbstowcs (wcstr, mbstr, sizeInWords);
; 732  :     if (!wcstr  ||  n < count) {
; 733  : 
; 734  :         /* Zero-terminate output buffer */
; 735  :         if (wcstr  &&  sizeInWords) {
; 736  :             if (n >= sizeInWords) {
; 737  :                 n = sizeInWords - 1;
; 738  :             }
; 739  :             wcstr[n] = 0;
; 740  :         }
; 741  : 
; 742  :         /* Length of resuting multi-byte string WITH zero terminator */
; 743  :         if (pReturnValue) {
; 744  :             *pReturnValue = n + 1;
; 745  :         }
; 746  : 
; 747  :         /* Success */
; 748  :         error = 0;
; 749  : 
; 750  :     } else {
; 751  : 
; 752  :         /* Could not convert string */
; 753  :         error = 1;
; 754  : 
; 755  :     }
; 756  : 
; 757  : #endif
; 758  : 
; 759  :     return error;

	mov	eax, DWORD PTR _error$[ebp]

; 760  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dirent_mbstowcs_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\dirent.h
;	COMDAT _dirent_next
_TEXT	SEGMENT
_p$ = -8						; size = 4
_dirp$ = 8						; size = 4
_dirent_next PROC					; COMDAT

; 485  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 486  :     WIN32_FIND_DATAW *p;
; 487  : 
; 488  :     /* Get next directory entry */
; 489  :     if (dirp->cached != 0) {

	mov	eax, DWORD PTR _dirp$[ebp]
	cmp	DWORD PTR [eax+1128], 0
	je	SHORT $LN6@dirent_nex

; 490  : 
; 491  :         /* A valid directory entry already in memory */
; 492  :         p = &dirp->data;

	mov	eax, DWORD PTR _dirp$[ebp]
	add	eax, 536				; 00000218H
	mov	DWORD PTR _p$[ebp], eax

; 493  :         dirp->cached = 0;

	mov	eax, DWORD PTR _dirp$[ebp]
	mov	DWORD PTR [eax+1128], 0
	jmp	SHORT $LN5@dirent_nex
$LN6@dirent_nex:

; 494  : 
; 495  :     } else if (dirp->handle != INVALID_HANDLE_VALUE) {

	mov	eax, DWORD PTR _dirp$[ebp]
	cmp	DWORD PTR [eax+1132], -1
	je	SHORT $LN4@dirent_nex

; 496  : 
; 497  :         /* Get the next directory entry from stream */
; 498  :         if (FindNextFileW (dirp->handle, &dirp->data) != FALSE) {

	mov	eax, DWORD PTR _dirp$[ebp]
	add	eax, 536				; 00000218H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _dirp$[ebp]
	mov	edx, DWORD PTR [ecx+1132]
	push	edx
	call	DWORD PTR __imp__FindNextFileW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@dirent_nex

; 499  :             /* Got a file */
; 500  :             p = &dirp->data;

	mov	eax, DWORD PTR _dirp$[ebp]
	add	eax, 536				; 00000218H
	mov	DWORD PTR _p$[ebp], eax

; 501  :         } else {

	jmp	SHORT $LN2@dirent_nex
$LN3@dirent_nex:

; 502  :             /* The very last entry has been processed or an error occured */
; 503  :             FindClose (dirp->handle);

	mov	esi, esp
	mov	eax, DWORD PTR _dirp$[ebp]
	mov	ecx, DWORD PTR [eax+1132]
	push	ecx
	call	DWORD PTR __imp__FindClose@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 504  :             dirp->handle = INVALID_HANDLE_VALUE;

	mov	eax, DWORD PTR _dirp$[ebp]
	mov	DWORD PTR [eax+1132], -1

; 505  :             p = NULL;

	mov	DWORD PTR _p$[ebp], 0
$LN2@dirent_nex:

; 506  :         }
; 507  : 
; 508  :     } else {

	jmp	SHORT $LN5@dirent_nex
$LN4@dirent_nex:

; 509  : 
; 510  :         /* End of directory stream reached */
; 511  :         p = NULL;

	mov	DWORD PTR _p$[ebp], 0
$LN5@dirent_nex:

; 512  : 
; 513  :     }
; 514  : 
; 515  :     return p;

	mov	eax, DWORD PTR _p$[ebp]

; 516  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dirent_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\dirent.h
;	COMDAT _dirent_first
_TEXT	SEGMENT
_datap$ = -8						; size = 4
_dirp$ = 8						; size = 4
_dirent_first PROC					; COMDAT

; 460  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 461  :     WIN32_FIND_DATAW *datap;
; 462  : 
; 463  :     /* Open directory and retrieve the first entry */
; 464  :     dirp->handle = FindFirstFileW (dirp->patt, &dirp->data);

	mov	eax, DWORD PTR _dirp$[ebp]
	add	eax, 536				; 00000218H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _dirp$[ebp]
	mov	edx, DWORD PTR [ecx+1136]
	push	edx
	call	DWORD PTR __imp__FindFirstFileW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _dirp$[ebp]
	mov	DWORD PTR [ecx+1132], eax

; 465  :     if (dirp->handle != INVALID_HANDLE_VALUE) {

	mov	eax, DWORD PTR _dirp$[ebp]
	cmp	DWORD PTR [eax+1132], -1
	je	SHORT $LN2@dirent_fir

; 466  : 
; 467  :         /* a directory entry is now waiting in memory */
; 468  :         datap = &dirp->data;

	mov	eax, DWORD PTR _dirp$[ebp]
	add	eax, 536				; 00000218H
	mov	DWORD PTR _datap$[ebp], eax

; 469  :         dirp->cached = 1;

	mov	eax, DWORD PTR _dirp$[ebp]
	mov	DWORD PTR [eax+1128], 1

; 470  : 
; 471  :     } else {

	jmp	SHORT $LN1@dirent_fir
$LN2@dirent_fir:

; 472  : 
; 473  :         /* Failed to re-open directory: no directory entry in memory */
; 474  :         dirp->cached = 0;

	mov	eax, DWORD PTR _dirp$[ebp]
	mov	DWORD PTR [eax+1128], 0

; 475  :         datap = NULL;

	mov	DWORD PTR _datap$[ebp], 0
$LN1@dirent_fir:

; 476  : 
; 477  :     }
; 478  :     return datap;

	mov	eax, DWORD PTR _datap$[ebp]

; 479  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dirent_first ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\dirent.h
;	COMDAT _closedir
_TEXT	SEGMENT
_ok$ = -8						; size = 4
_dirp$ = 8						; size = 4
_closedir PROC						; COMDAT

; 677  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 678  :     int ok;
; 679  :     if (dirp) {

	cmp	DWORD PTR _dirp$[ebp], 0
	je	SHORT $LN2@closedir

; 680  : 
; 681  :         /* Close wide-character directory stream */
; 682  :         ok = _wclosedir (dirp->wdirp);

	mov	eax, DWORD PTR _dirp$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	push	ecx
	call	__wclosedir
	add	esp, 4
	mov	DWORD PTR _ok$[ebp], eax

; 683  :         dirp->wdirp = NULL;

	mov	eax, DWORD PTR _dirp$[ebp]
	mov	DWORD PTR [eax+276], 0

; 684  : 
; 685  :         /* Release multi-byte character version */
; 686  :         free (dirp);

	mov	eax, DWORD PTR _dirp$[ebp]
	push	eax
	call	_free
	add	esp, 4

; 687  : 
; 688  :     } else {

	jmp	SHORT $LN1@closedir
$LN2@closedir:

; 689  : 
; 690  :         /* Invalid directory stream */
; 691  :         dirent_set_errno (EBADF);

	push	9
	call	_dirent_set_errno
	add	esp, 4

; 692  :         ok = /*failure*/-1;

	mov	DWORD PTR _ok$[ebp], -1
$LN1@closedir:

; 693  : 
; 694  :     }
; 695  :     return ok;

	mov	eax, DWORD PTR _ok$[ebp]

; 696  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_closedir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\dirent.h
;	COMDAT _readdir
_TEXT	SEGMENT
_attr$1 = -56						; size = 4
_error$2 = -44						; size = 4
_n$3 = -32						; size = 4
_entp$ = -20						; size = 4
_datap$ = -8						; size = 4
_dirp$ = 8						; size = 4
_readdir PROC						; COMDAT

; 594  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 595  :     WIN32_FIND_DATAW *datap;
; 596  :     struct dirent *entp;
; 597  : 
; 598  :     /* Read next directory entry */
; 599  :     datap = dirent_next (dirp->wdirp);

	mov	eax, DWORD PTR _dirp$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	push	ecx
	call	_dirent_next
	add	esp, 4
	mov	DWORD PTR _datap$[ebp], eax

; 600  :     if (datap) {

	cmp	DWORD PTR _datap$[ebp], 0
	je	$LN9@readdir

; 601  :         size_t n;
; 602  :         int error;
; 603  : 
; 604  :         /* Attempt to convert file name to multi-byte string */
; 605  :         error = dirent_wcstombs_s(
; 606  :             &n, dirp->ent.d_name, PATH_MAX, datap->cFileName, PATH_MAX);

	push	260					; 00000104H
	mov	eax, DWORD PTR _datap$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	push	260					; 00000104H
	mov	ecx, DWORD PTR _dirp$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR _n$3[ebp]
	push	edx
	call	_dirent_wcstombs_s
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$2[ebp], eax

; 607  : 
; 608  :         /* 
; 609  :          * If the file name cannot be represented by a multi-byte string,
; 610  :          * then attempt to use old 8+3 file name.  This allows traditional
; 611  :          * Unix-code to access some file names despite of unicode
; 612  :          * characters, although file names may seem unfamiliar to the user.
; 613  :          *
; 614  :          * Be ware that the code below cannot come up with a short file
; 615  :          * name unless the file system provides one.  At least
; 616  :          * VirtualBox shared folders fail to do this.
; 617  :          */
; 618  :         if (error  &&  datap->cAlternateFileName[0] != '\0') {

	cmp	DWORD PTR _error$2[ebp], 0
	je	SHORT $LN8@readdir
	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _datap$[ebp]
	movzx	eax, WORD PTR [edx+ecx+564]
	test	eax, eax
	je	SHORT $LN8@readdir

; 619  :             error = dirent_wcstombs_s(
; 620  :                 &n, dirp->ent.d_name, PATH_MAX, 
; 621  :                 datap->cAlternateFileName, PATH_MAX);

	push	260					; 00000104H
	mov	eax, DWORD PTR _datap$[ebp]
	add	eax, 564				; 00000234H
	push	eax
	push	260					; 00000104H
	mov	ecx, DWORD PTR _dirp$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR _n$3[ebp]
	push	edx
	call	_dirent_wcstombs_s
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$2[ebp], eax
$LN8@readdir:

; 622  :         }
; 623  : 
; 624  :         if (!error) {

	cmp	DWORD PTR _error$2[ebp], 0
	jne	SHORT $LN7@readdir

; 625  :             DWORD attr;
; 626  : 
; 627  :             /* Initialize directory entry for return */
; 628  :             entp = &dirp->ent;

	mov	eax, DWORD PTR _dirp$[ebp]
	mov	DWORD PTR _entp$[ebp], eax

; 629  : 
; 630  :             /* Length of file name excluding zero terminator */
; 631  :             entp->d_namlen = n - 1;

	mov	eax, DWORD PTR _n$3[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _entp$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 632  : 
; 633  :             /* File attributes */
; 634  :             attr = datap->dwFileAttributes;

	mov	eax, DWORD PTR _datap$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _attr$1[ebp], ecx

; 635  :             if ((attr & FILE_ATTRIBUTE_DEVICE) != 0) {

	mov	eax, DWORD PTR _attr$1[ebp]
	and	eax, 64					; 00000040H
	je	SHORT $LN6@readdir

; 636  :                 entp->d_type = DT_CHR;

	mov	eax, DWORD PTR _entp$[ebp]
	mov	DWORD PTR [eax+12], 8192		; 00002000H
	jmp	SHORT $LN5@readdir
$LN6@readdir:

; 637  :             } else if ((attr & FILE_ATTRIBUTE_DIRECTORY) != 0) {

	mov	eax, DWORD PTR _attr$1[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN4@readdir

; 638  :                 entp->d_type = DT_DIR;

	mov	eax, DWORD PTR _entp$[ebp]
	mov	DWORD PTR [eax+12], 16384		; 00004000H

; 639  :             } else {

	jmp	SHORT $LN5@readdir
$LN4@readdir:

; 640  :                 entp->d_type = DT_REG;

	mov	eax, DWORD PTR _entp$[ebp]
	mov	DWORD PTR [eax+12], 32768		; 00008000H
$LN5@readdir:

; 641  :             }
; 642  : 
; 643  :             /* Reset dummy fields */
; 644  :             entp->d_ino = 0;

	mov	eax, DWORD PTR _entp$[ebp]
	mov	DWORD PTR [eax], 0

; 645  :             entp->d_reclen = sizeof (struct dirent);

	mov	eax, 276				; 00000114H
	mov	ecx, DWORD PTR _entp$[ebp]
	mov	WORD PTR [ecx+4], ax

; 646  : 
; 647  :         } else {

	jmp	SHORT $LN2@readdir
$LN7@readdir:

; 648  :             /* 
; 649  :              * Cannot convert file name to multi-byte string so construct
; 650  :              * an errornous directory entry and return that.  Note that
; 651  :              * we cannot return NULL as that would stop the processing
; 652  :              * of directory entries completely.
; 653  :              */
; 654  :             entp = &dirp->ent;

	mov	eax, DWORD PTR _dirp$[ebp]
	mov	DWORD PTR _entp$[ebp], eax

; 655  :             entp->d_name[0] = '?';

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _entp$[ebp]
	mov	BYTE PTR [edx+ecx+16], 63		; 0000003fH

; 656  :             entp->d_name[1] = '\0';

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _entp$[ebp]
	mov	BYTE PTR [ecx+eax+16], 0

; 657  :             entp->d_namlen = 1;

	mov	eax, DWORD PTR _entp$[ebp]
	mov	DWORD PTR [eax+8], 1

; 658  :             entp->d_type = DT_UNKNOWN;

	mov	eax, DWORD PTR _entp$[ebp]
	mov	DWORD PTR [eax+12], 0

; 659  :             entp->d_ino = 0;

	mov	eax, DWORD PTR _entp$[ebp]
	mov	DWORD PTR [eax], 0

; 660  :             entp->d_reclen = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _entp$[ebp]
	mov	WORD PTR [ecx+4], ax
$LN2@readdir:

; 661  :         }
; 662  : 
; 663  :     } else {

	jmp	SHORT $LN1@readdir
$LN9@readdir:

; 664  :         /* No more directory entries */
; 665  :         entp = NULL;

	mov	DWORD PTR _entp$[ebp], 0
$LN1@readdir:

; 666  :     }
; 667  : 
; 668  :     return entp;

	mov	eax, DWORD PTR _entp$[ebp]

; 669  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@readdir
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@readdir:
	DD	1
	DD	$LN13@readdir
$LN13@readdir:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN12@readdir
$LN12@readdir:
	DB	110					; 0000006eH
	DB	0
_readdir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\dirent.h
;	COMDAT _opendir
_TEXT	SEGMENT
_n$1 = -564						; size = 4
_wname$2 = -552						; size = 520
_error$ = -24						; size = 4
_dirp$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_dirname$ = 8						; size = 4
_opendir PROC						; COMDAT

; 524  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 760				; 000002f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-760]
	mov	ecx, 190				; 000000beH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 525  :     struct DIR *dirp;
; 526  :     int error;
; 527  : 
; 528  :     /* Must have directory name */
; 529  :     if (dirname == NULL  ||  dirname[0] == '\0') {

	cmp	DWORD PTR _dirname$[ebp], 0
	je	SHORT $LN8@opendir
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _dirname$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN9@opendir
$LN8@opendir:

; 530  :         dirent_set_errno (ENOENT);

	push	2
	call	_dirent_set_errno
	add	esp, 4

; 531  :         return NULL;

	xor	eax, eax
	jmp	$LN10@opendir
$LN9@opendir:

; 532  :     }
; 533  : 
; 534  :     /* Allocate memory for DIR structure */
; 535  :     dirp = (DIR*) malloc (sizeof (struct DIR));

	push	280					; 00000118H
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _dirp$[ebp], eax

; 536  :     if (dirp) {

	cmp	DWORD PTR _dirp$[ebp], 0
	je	SHORT $LN7@opendir

; 537  :         wchar_t wname[PATH_MAX];
; 538  :         size_t n;
; 539  : 
; 540  :         /* Convert directory name to wide-character string */
; 541  :         error = dirent_mbstowcs_s (&n, wname, PATH_MAX, dirname, PATH_MAX);

	push	260					; 00000104H
	mov	eax, DWORD PTR _dirname$[ebp]
	push	eax
	push	260					; 00000104H
	lea	ecx, DWORD PTR _wname$2[ebp]
	push	ecx
	lea	edx, DWORD PTR _n$1[ebp]
	push	edx
	call	_dirent_mbstowcs_s
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax

; 542  :         if (!error) {

	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN6@opendir

; 543  : 
; 544  :             /* Open directory stream using wide-character name */
; 545  :             dirp->wdirp = _wopendir (wname);

	lea	eax, DWORD PTR _wname$2[ebp]
	push	eax
	call	__wopendir
	add	esp, 4
	mov	ecx, DWORD PTR _dirp$[ebp]
	mov	DWORD PTR [ecx+276], eax

; 546  :             if (dirp->wdirp) {

	mov	eax, DWORD PTR _dirp$[ebp]
	cmp	DWORD PTR [eax+276], 0
	je	SHORT $LN5@opendir

; 547  :                 /* Directory stream opened */
; 548  :                 error = 0;

	mov	DWORD PTR _error$[ebp], 0

; 549  :             } else {

	jmp	SHORT $LN4@opendir
$LN5@opendir:

; 550  :                 /* Failed to open directory stream */
; 551  :                 error = 1;

	mov	DWORD PTR _error$[ebp], 1
$LN4@opendir:

; 552  :             }
; 553  : 
; 554  :         } else {

	jmp	SHORT $LN3@opendir
$LN6@opendir:

; 555  :             /* 
; 556  :              * Cannot convert file name to wide-character string.  This
; 557  :              * occurs if the string contains invalid multi-byte sequences or
; 558  :              * the output buffer is too small to contain the resulting
; 559  :              * string.
; 560  :              */
; 561  :             error = 1;

	mov	DWORD PTR _error$[ebp], 1
$LN3@opendir:

; 562  :         }
; 563  : 
; 564  :     } else {

	jmp	SHORT $LN2@opendir
$LN7@opendir:

; 565  :         /* Cannot allocate DIR structure */
; 566  :         error = 1;

	mov	DWORD PTR _error$[ebp], 1
$LN2@opendir:

; 567  :     }
; 568  : 
; 569  :     /* Clean up in case of error */
; 570  :     if (error  &&  dirp) {

	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@opendir
	cmp	DWORD PTR _dirp$[ebp], 0
	je	SHORT $LN1@opendir

; 571  :         free (dirp);

	mov	eax, DWORD PTR _dirp$[ebp]
	push	eax
	call	_free
	add	esp, 4

; 572  :         dirp = NULL;

	mov	DWORD PTR _dirp$[ebp], 0
$LN1@opendir:

; 573  :     }
; 574  : 
; 575  :     return dirp;

	mov	eax, DWORD PTR _dirp$[ebp]
$LN10@opendir:

; 576  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@opendir
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 760				; 000002f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@opendir:
	DD	2
	DD	$LN14@opendir
$LN14@opendir:
	DD	-552					; fffffdd8H
	DD	520					; 00000208H
	DD	$LN12@opendir
	DD	-564					; fffffdccH
	DD	4
	DD	$LN13@opendir
$LN13@opendir:
	DB	110					; 0000006eH
	DB	0
$LN12@opendir:
	DB	119					; 00000077H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_opendir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\dirent.h
;	COMDAT __wclosedir
_TEXT	SEGMENT
_ok$ = -8						; size = 4
_dirp$ = 8						; size = 4
__wclosedir PROC					; COMDAT

; 409  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 410  :     int ok;
; 411  :     if (dirp) {

	cmp	DWORD PTR _dirp$[ebp], 0
	je	SHORT $LN4@wclosedir

; 412  : 
; 413  :         /* Release search handle */
; 414  :         if (dirp->handle != INVALID_HANDLE_VALUE) {

	mov	eax, DWORD PTR _dirp$[ebp]
	cmp	DWORD PTR [eax+1132], -1
	je	SHORT $LN3@wclosedir

; 415  :             FindClose (dirp->handle);

	mov	esi, esp
	mov	eax, DWORD PTR _dirp$[ebp]
	mov	ecx, DWORD PTR [eax+1132]
	push	ecx
	call	DWORD PTR __imp__FindClose@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 416  :             dirp->handle = INVALID_HANDLE_VALUE;

	mov	eax, DWORD PTR _dirp$[ebp]
	mov	DWORD PTR [eax+1132], -1
$LN3@wclosedir:

; 417  :         }
; 418  : 
; 419  :         /* Release search pattern */
; 420  :         if (dirp->patt) {

	mov	eax, DWORD PTR _dirp$[ebp]
	cmp	DWORD PTR [eax+1136], 0
	je	SHORT $LN2@wclosedir

; 421  :             free (dirp->patt);

	mov	eax, DWORD PTR _dirp$[ebp]
	mov	ecx, DWORD PTR [eax+1136]
	push	ecx
	call	_free
	add	esp, 4

; 422  :             dirp->patt = NULL;

	mov	eax, DWORD PTR _dirp$[ebp]
	mov	DWORD PTR [eax+1136], 0
$LN2@wclosedir:

; 423  :         }
; 424  : 
; 425  :         /* Release directory structure */
; 426  :         free (dirp);

	mov	eax, DWORD PTR _dirp$[ebp]
	push	eax
	call	_free
	add	esp, 4

; 427  :         ok = /*success*/0;

	mov	DWORD PTR _ok$[ebp], 0

; 428  : 
; 429  :     } else {

	jmp	SHORT $LN1@wclosedir
$LN4@wclosedir:

; 430  :         /* Invalid directory stream */
; 431  :         dirent_set_errno (EBADF);

	push	9
	call	_dirent_set_errno
	add	esp, 4

; 432  :         ok = /*failure*/-1;

	mov	DWORD PTR _ok$[ebp], -1
$LN1@wclosedir:

; 433  :     }
; 434  :     return ok;

	mov	eax, DWORD PTR _ok$[ebp]

; 435  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__wclosedir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mgear-1\dirent.h
;	COMDAT __wopendir
_TEXT	SEGMENT
tv135 = -244						; size = 4
_p$1 = -44						; size = 4
_n$2 = -32						; size = 4
_error$ = -20						; size = 4
_dirp$ = -8						; size = 4
_dirname$ = 8						; size = 4
__wopendir PROC						; COMDAT

; 250  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 251  :     _WDIR *dirp = NULL;

	mov	DWORD PTR _dirp$[ebp], 0

; 252  :     int error;
; 253  : 
; 254  :     /* Must have directory name */
; 255  :     if (dirname == NULL  ||  dirname[0] == '\0') {

	cmp	DWORD PTR _dirname$[ebp], 0
	je	SHORT $LN15@wopendir
	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _dirname$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN16@wopendir
$LN15@wopendir:

; 256  :         dirent_set_errno (ENOENT);

	push	2
	call	_dirent_set_errno
	add	esp, 4

; 257  :         return NULL;

	xor	eax, eax
	jmp	$LN17@wopendir
$LN16@wopendir:

; 258  :     }
; 259  : 
; 260  :     /* Allocate new _WDIR structure */
; 261  :     dirp = (_WDIR*) malloc (sizeof (struct _WDIR));

	push	1140					; 00000474H
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _dirp$[ebp], eax

; 262  :     if (dirp != NULL) {

	cmp	DWORD PTR _dirp$[ebp], 0
	je	$LN14@wopendir

; 263  :         DWORD n;
; 264  : 
; 265  :         /* Reset _WDIR structure */
; 266  :         dirp->handle = INVALID_HANDLE_VALUE;

	mov	eax, DWORD PTR _dirp$[ebp]
	mov	DWORD PTR [eax+1132], -1

; 267  :         dirp->patt = NULL;

	mov	eax, DWORD PTR _dirp$[ebp]
	mov	DWORD PTR [eax+1136], 0

; 268  :         dirp->cached = 0;

	mov	eax, DWORD PTR _dirp$[ebp]
	mov	DWORD PTR [eax+1128], 0

; 269  : 
; 270  :         /* Compute the length of full path plus zero terminator */
; 271  :         n = GetFullPathNameW (dirname, 0, NULL, NULL);

	mov	esi, esp
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _dirname$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFullPathNameW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _n$2[ebp], eax

; 272  : 
; 273  :         /* Allocate room for absolute directory name and search pattern */
; 274  :         dirp->patt = (wchar_t*) malloc (sizeof (wchar_t) * n + 16);

	mov	eax, DWORD PTR _n$2[ebp]
	lea	ecx, DWORD PTR [eax+eax+16]
	push	ecx
	call	_malloc
	add	esp, 4
	mov	edx, DWORD PTR _dirp$[ebp]
	mov	DWORD PTR [edx+1136], eax

; 275  :         if (dirp->patt) {

	mov	eax, DWORD PTR _dirp$[ebp]
	cmp	DWORD PTR [eax+1136], 0
	je	$LN13@wopendir

; 276  : 
; 277  :             /*
; 278  :              * Convert relative directory name to an absolute one.  This
; 279  :              * allows rewinddir() to function correctly even when current
; 280  :              * working directory is changed between opendir() and rewinddir().
; 281  :              */
; 282  :             n = GetFullPathNameW (dirname, n, dirp->patt, NULL);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _dirp$[ebp]
	mov	ecx, DWORD PTR [eax+1136]
	push	ecx
	mov	edx, DWORD PTR _n$2[ebp]
	push	edx
	mov	eax, DWORD PTR _dirname$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFullPathNameW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _n$2[ebp], eax

; 283  :             if (n > 0) {

	cmp	DWORD PTR _n$2[ebp], 0
	jbe	$LN12@wopendir

; 284  :                 wchar_t *p;
; 285  : 
; 286  :                 /* Append search pattern \* to the directory name */
; 287  :                 p = dirp->patt + n;

	mov	eax, DWORD PTR _dirp$[ebp]
	mov	ecx, DWORD PTR [eax+1136]
	mov	edx, DWORD PTR _n$2[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _p$1[ebp], eax

; 288  :                 if (dirp->patt < p) {

	mov	eax, DWORD PTR _dirp$[ebp]
	mov	ecx, DWORD PTR [eax+1136]
	cmp	ecx, DWORD PTR _p$1[ebp]
	jae	SHORT $LN11@wopendir

; 289  :                     switch (p[-1]) {

	mov	eax, 2
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _p$1[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	mov	DWORD PTR tv135[ebp], eax
	cmp	DWORD PTR tv135[ebp], 47		; 0000002fH
	je	SHORT $LN8@wopendir
	cmp	DWORD PTR tv135[ebp], 58		; 0000003aH
	je	SHORT $LN8@wopendir
	cmp	DWORD PTR tv135[ebp], 92		; 0000005cH
	je	SHORT $LN8@wopendir
	jmp	SHORT $LN7@wopendir
$LN8@wopendir:

; 290  :                     case '\\':
; 291  :                     case '/':
; 292  :                     case ':':
; 293  :                         /* Directory ends in path separator, e.g. c:\temp\ */
; 294  :                         /*NOP*/;
; 295  :                         break;

	jmp	SHORT $LN11@wopendir
$LN7@wopendir:

; 296  : 
; 297  :                     default:
; 298  :                         /* Directory name doesn't end in path separator */
; 299  :                         *p++ = '\\';

	mov	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _p$1[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _p$1[ebp]
	add	edx, 2
	mov	DWORD PTR _p$1[ebp], edx
$LN11@wopendir:

; 300  :                     }
; 301  :                 }
; 302  :                 *p++ = '*';

	mov	eax, 42					; 0000002aH
	mov	ecx, DWORD PTR _p$1[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _p$1[ebp]
	add	edx, 2
	mov	DWORD PTR _p$1[ebp], edx

; 303  :                 *p = '\0';

	xor	eax, eax
	mov	ecx, DWORD PTR _p$1[ebp]
	mov	WORD PTR [ecx], ax

; 304  : 
; 305  :                 /* Open directory stream and retrieve the first entry */
; 306  :                 if (dirent_first (dirp)) {

	mov	eax, DWORD PTR _dirp$[ebp]
	push	eax
	call	_dirent_first
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@wopendir

; 307  :                     /* Directory stream opened successfully */
; 308  :                     error = 0;

	mov	DWORD PTR _error$[ebp], 0

; 309  :                 } else {

	jmp	SHORT $LN5@wopendir
$LN6@wopendir:

; 310  :                     /* Cannot retrieve first entry */
; 311  :                     error = 1;

	mov	DWORD PTR _error$[ebp], 1

; 312  :                     dirent_set_errno (ENOENT);

	push	2
	call	_dirent_set_errno
	add	esp, 4
$LN5@wopendir:

; 313  :                 }
; 314  : 
; 315  :             } else {

	jmp	SHORT $LN4@wopendir
$LN12@wopendir:

; 316  :                 /* Cannot retrieve full path name */
; 317  :                 dirent_set_errno (ENOENT);

	push	2
	call	_dirent_set_errno
	add	esp, 4

; 318  :                 error = 1;

	mov	DWORD PTR _error$[ebp], 1
$LN4@wopendir:

; 319  :             }
; 320  : 
; 321  :         } else {

	jmp	SHORT $LN3@wopendir
$LN13@wopendir:

; 322  :             /* Cannot allocate memory for search pattern */
; 323  :             error = 1;

	mov	DWORD PTR _error$[ebp], 1
$LN3@wopendir:

; 324  :         }
; 325  : 
; 326  :     } else {

	jmp	SHORT $LN2@wopendir
$LN14@wopendir:

; 327  :         /* Cannot allocate _WDIR structure */
; 328  :         error = 1;

	mov	DWORD PTR _error$[ebp], 1
$LN2@wopendir:

; 329  :     }
; 330  : 
; 331  :     /* Clean up in case of error */
; 332  :     if (error  &&  dirp) {

	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@wopendir
	cmp	DWORD PTR _dirp$[ebp], 0
	je	SHORT $LN1@wopendir

; 333  :         _wclosedir (dirp);

	mov	eax, DWORD PTR _dirp$[ebp]
	push	eax
	call	__wclosedir
	add	esp, 4

; 334  :         dirp = NULL;

	mov	DWORD PTR _dirp$[ebp], 0
$LN1@wopendir:

; 335  :     }
; 336  : 
; 337  :     return dirp;

	mov	eax, DWORD PTR _dirp$[ebp]
$LN17@wopendir:

; 338  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__wopendir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mtex\main.c
;	COMDAT _DirFiles
_TEXT	SEGMENT
_filenum$ = -44						; size = 2
_i$ = -32						; size = 2
_ent$ = -20						; size = 4
_dir$ = -8						; size = 4
_path$ = 8						; size = 4
_content$ = 12						; size = 4
_DirFiles PROC						; COMDAT

; 107  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 108  : 	DIR *dir;
; 109  : 	dirent *ent;
; 110  : 	uint16 i=0;

	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax

; 111  : 	int16 filenum=0;

	xor	eax, eax
	mov	WORD PTR _filenum$[ebp], ax

; 112  : 
; 113  : 	if((dir=opendir(path))!=NULL)

	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	call	_opendir
	add	esp, 4
	mov	DWORD PTR _dir$[ebp], eax
	cmp	DWORD PTR _dir$[ebp], 0
	je	SHORT $LN4@DirFiles
$LN3@DirFiles:

; 114  : 	{
; 115  : 		while((ent=readdir(dir))!=NULL)

	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	call	_readdir
	add	esp, 4
	mov	DWORD PTR _ent$[ebp], eax
	cmp	DWORD PTR _ent$[ebp], 0
	je	SHORT $LN2@DirFiles

; 116  : 		{
; 117  : 			strcpy(content[i],ent->d_name);

	mov	eax, DWORD PTR _ent$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	movzx	ecx, WORD PTR _i$[ebp]
	shl	ecx, 9
	add	ecx, DWORD PTR _content$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 118  : 			i++;

	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax

; 119  : 			filenum++;

	mov	ax, WORD PTR _filenum$[ebp]
	add	ax, 1
	mov	WORD PTR _filenum$[ebp], ax

; 120  : 		}

	jmp	SHORT $LN3@DirFiles
$LN2@DirFiles:

; 121  : 
; 122  : 		closedir(dir);

	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	call	_closedir
	add	esp, 4

; 123  : 	}
; 124  : 	else

	jmp	SHORT $LN1@DirFiles
$LN4@DirFiles:

; 125  : 	{
; 126  : 		LogApp("Coulnd not open directory");

	push	OFFSET ??_C@_0BK@DEPFCNDH@Coulnd?5not?5open?5directory?$AA@
	call	_SDL_Log
	add	esp, 4

; 127  : 		return -1;

	or	eax, -1
	jmp	SHORT $LN5@DirFiles
$LN1@DirFiles:

; 128  : 	}
; 129  : 
; 130  : 	return filenum;

	mov	ax, WORD PTR _filenum$[ebp]
$LN5@DirFiles:

; 131  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DirFiles ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\marcos\desktop\prj\mgear-1\mtex\main.c
;	COMDAT _SDL_main
_TEXT	SEGMENT
_bg$1 = -132						; size = 16
_atlas$ = -108						; size = 4
_background$ = -96					; size = 4
_loops$ = -84						; size = 4
__$ArrayPad$ = -4					; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_SDL_main PROC						; COMDAT

; 939  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 940  : 	char str[64];
; 941  : 	int loops;
; 942  : 
; 943  : 	struct nk_color background;
; 944  : 
; 945  : 	if(LoadCFG()==0)

	call	_LoadCFG
	movzx	eax, ax
	test	eax, eax
	jne	SHORT $LN10@SDL_main

; 946  : 		if(MessageBox(NULL,L"Error while trying to read or write the configuration file",NULL,MB_OK | MB_ICONERROR)==IDOK) 

	mov	esi, esp
	push	16					; 00000010H
	push	0
	push	OFFSET ??_C@_1HG@JKFDANAL@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAw?$AAh?$AAi?$AAl?$AAe?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAo?$AAr?$AA?5?$AAw?$AAr@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN10@SDL_main

; 947  : 			Quit();

	call	_Quit
$LN10@SDL_main:

; 948  : 
; 949  : 	Init();

	call	_Init

; 950  : 
; 951  : 	strcpy(st.WindowTitle,"Tex ALPHA");

	push	OFFSET ??_C@_09PJHAHPG@Tex?5ALPHA?$AA@
	push	OFFSET _st+196
	call	_strcpy
	add	esp, 8

; 952  : 
; 953  : 	OpenFont("font/Roboto-Regular.ttf","arial",0,128);

	push	128					; 00000080H
	push	0
	push	OFFSET ??_C@_05MIPEAMDJ@arial?$AA@
	push	OFFSET ??_C@_0BI@HHEBJCKC@font?1Roboto?9Regular?4ttf?$AA@
	call	_OpenFont
	add	esp, 16					; 00000010H

; 954  : 	OpenFont("font/Roboto-Bold.ttf","arial bold",1,128);

	push	128					; 00000080H
	push	1
	push	OFFSET ??_C@_0L@JAEOLJKM@arial?5bold?$AA@
	push	OFFSET ??_C@_0BF@DCPHDOKH@font?1Roboto?9Bold?4ttf?$AA@
	call	_OpenFont
	add	esp, 16					; 00000010H

; 955  : 	//OpenFont("font//tt0524m_.ttf","geometry",2,128);
; 956  : 
; 957  : 	InitMGG();

	call	_InitMGG

; 958  : 	
; 959  : 	if(LoadMGG(&mgg_sys[0],"data/mEngUI.mgg")==NULL)

	push	OFFSET ??_C@_0BA@GLINHHCI@data?1mEngUI?4mgg?$AA@
	mov	eax, 60					; 0000003cH
	imul	ecx, eax, 0
	add	ecx, OFFSET _mgg_sys
	push	ecx
	call	_LoadMGG
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@SDL_main

; 960  : 	{
; 961  : 		LogApp("Could not open UI mgg");

	push	OFFSET ??_C@_0BG@KBDHGKMD@Could?5not?5open?5UI?5mgg?$AA@
	call	_SDL_Log
	add	esp, 4

; 962  : 		Quit();

	call	_Quit
$LN8@SDL_main:

; 963  : 	}
; 964  : 	
; 965  : 	UILoadSystem("UI_Sys.cfg");

	push	OFFSET ??_C@_0L@EMLOAAHA@UI_Sys?4cfg?$AA@
	call	_UILoadSystem
	add	esp, 4

; 966  : 
; 967  : 	st.FPSYes=1;

	mov	BYTE PTR _st+2335428, 1

; 968  : 
; 969  : 	st.Developer_Mode=1;

	mov	BYTE PTR _st+2335416, 1

; 970  : 
; 971  : 	curr_tic=GetTicks();

	call	_SDL_GetTicks
	mov	DWORD PTR _curr_tic, eax

; 972  : 
; 973  : 	ctx = nk_sdl_init(wn);

	mov	eax, DWORD PTR _wn
	push	eax
	call	_nk_sdl_init
	add	esp, 4
	mov	DWORD PTR _ctx, eax

; 974  : 
; 975  : 	struct nk_font_atlas *atlas;
; 976  : 	nk_sdl_font_stash_begin(&atlas);

	lea	eax, DWORD PTR _atlas$[ebp]
	push	eax
	call	_nk_sdl_font_stash_begin
	add	esp, 4

; 977  : 	nk_sdl_font_stash_end();

	call	_nk_sdl_font_stash_end

; 978  : 	background = nk_rgb(28, 48, 62);

	push	62					; 0000003eH
	push	48					; 00000030H
	push	28					; 0000001cH
	call	_nk_rgb
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _background$[ebp], eax

; 979  : 
; 980  : 	SETENGINEPATH;

	push	OFFSET _st+3307838
	push	OFFSET _UI_Sys+43
	call	_strcpy
	add	esp, 8

; 981  : 
; 982  : 	memset(&mtex, 0, sizeof(mTex));

	push	10					; 0000000aH
	push	0
	push	OFFSET _mtex
	call	_memset
	add	esp, 12					; 0000000cH
$LN7@SDL_main:

; 983  : 
; 984  : 	while(!st.quit)

	movzx	eax, BYTE PTR _st+66668
	test	eax, eax
	jne	$LN6@SDL_main

; 985  : 	{
; 986  : 		if(st.FPSYes)

	movzx	eax, BYTE PTR _st+2335428
	test	eax, eax
	je	SHORT $LN5@SDL_main

; 987  : 			FPSCounter();

	call	_FPSCounter
$LN5@SDL_main:

; 988  : 
; 989  : 		nk_input_begin(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_input_begin
	add	esp, 4
$LN4@SDL_main:

; 990  : 
; 991  : 		while(PollEvent(&events))

	push	OFFSET _events
	call	_SDL_PollEvent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@SDL_main

; 992  : 		{
; 993  : 			WindowEvents();

	call	_WindowEvents

; 994  : 			nk_sdl_handle_event(&events);

	push	OFFSET _events
	call	_nk_sdl_handle_event
	add	esp, 4

; 995  : 		}

	jmp	SHORT $LN4@SDL_main
$LN3@SDL_main:

; 996  : 
; 997  : 		nk_input_end(ctx);

	mov	eax, DWORD PTR _ctx
	push	eax
	call	_nk_input_end
	add	esp, 4

; 998  : 
; 999  : 		BASICBKD(255,255,255);

	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	call	_BASICBKD
	add	esp, 12					; 0000000cH

; 1000 : 		
; 1001 : 		loops=0;

	mov	DWORD PTR _loops$[ebp], 0
$LN2@SDL_main:

; 1002 : 		while(GetTicks() > curr_tic && loops < 10)

	call	_SDL_GetTicks
	cmp	eax, DWORD PTR _curr_tic
	jbe	SHORT $LN1@SDL_main
	cmp	DWORD PTR _loops$[ebp], 10		; 0000000aH
	jge	SHORT $LN1@SDL_main

; 1003 : 		{
; 1004 : 			//nk_clear(ctx);
; 1005 : 			Finish();

	call	_Finish

; 1006 : 
; 1007 : 			curr_tic+=1000/TICSPERSECOND;

	mov	eax, DWORD PTR _curr_tic
	add	eax, 8
	mov	DWORD PTR _curr_tic, eax

; 1008 : 			loops++;

	mov	eax, DWORD PTR _loops$[ebp]
	add	eax, 1
	mov	DWORD PTR _loops$[ebp], eax

; 1009 : 			SetTimerM(1);

	push	0
	push	1
	call	@SetTimerM@8

; 1010 : 		}

	jmp	SHORT $LN2@SDL_main
$LN1@SDL_main:

; 1011 : 
; 1012 : 		DrawSys();

	call	_DrawSys

; 1013 : 
; 1014 : 		MenuBar();

	call	_MenuBar

; 1015 : 		LeftPannel();

	call	_LeftPannel

; 1016 : 		Canvas();

	call	_Canvas

; 1017 : 		AnimBox();

	call	_AnimBox

; 1018 : 
; 1019 : 		UIMain_DrawSystem();

	call	_UIMain_DrawSystem

; 1020 : 		//MainSound();
; 1021 : 		Renderer(0);

	push	0
	call	_Renderer
	add	esp, 4

; 1022 : 
; 1023 : 		float bg[4];
; 1024 : 		nk_color_fv(bg, background);

	mov	eax, DWORD PTR _background$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bg$1[ebp]
	push	ecx
	call	_nk_color_fv
	add	esp, 8

; 1025 : 
; 1026 : 		nk_sdl_render(NK_ANTI_ALIASING_OFF, 512 * 1024, 128 * 1024);

	push	131072					; 00020000H
	push	524288					; 00080000H
	push	0
	call	_nk_sdl_render
	add	esp, 12					; 0000000cH

; 1027 : 
; 1028 : 		SwapBuffer(wn);

	mov	eax, DWORD PTR _wn
	push	eax
	call	_SDL_GL_SwapWindow
	add	esp, 4

; 1029 : 
; 1030 : 		nkrendered = 0;

	mov	DWORD PTR _nkrendered, 0

; 1031 : 	}

	jmp	$LN7@SDL_main
$LN6@SDL_main:

; 1032 : 
; 1033 : 	Quit();

	call	_Quit

; 1034 : 	return 1;

	mov	eax, 1

; 1035 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@SDL_main
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@SDL_main:
	DD	4
	DD	$LN17@SDL_main
$LN17@SDL_main:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN13@SDL_main
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN14@SDL_main
	DD	-108					; ffffff94H
	DD	4
	DD	$LN15@SDL_main
	DD	-132					; ffffff7cH
	DD	16					; 00000010H
	DD	$LN16@SDL_main
$LN16@SDL_main:
	DB	98					; 00000062H
	DB	103					; 00000067H
	DB	0
$LN15@SDL_main:
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	0
$LN14@SDL_main:
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN13@SDL_main:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
_SDL_main ENDP
_TEXT	ENDS
END
